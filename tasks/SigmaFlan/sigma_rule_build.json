[
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\rdrleakdiag.exe' or where the OriginalFileName is explicitly 'RdrLeakDiag.exe'. Additionally, scrutinize command-line parameters to identify attempts to dump memory. Key command-line options to watch for include 'fullmemdmp', '/memdmp', and '-memdmp' which indicate an operation to dump memory. Also, be alert for options such as ' -o ', ' /o ', which specify the output location for the dump file, and ' -p ', ' /p ', which indicate a target process for the memory dump. These indicators, particularly when occurring together, suggest an effort to misuse \"rdrleakdiag.exe\" for acquiring process memory data, which could be indicative of malicious activities such as information gathering or the facilitation of further attacks. Be aware that while monitoring for these signs, there may be instances where the use of these command-line arguments and the \"rdrleakdiag.exe\" process occur in non-malicious contexts; such instances are considered unknown false positives. The detection of any of the outlined command-line conditions in conjunction with the execution of \"rdrleakdiag.exe\" should be treated with a high level of suspicion and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rdrleakdiag.exe'\n        - OriginalFileName: RdrLeakDiag.exe\n    selection_cli_dump:\n        CommandLine|contains:\n            - 'fullmemdmp'\n            - '/memdmp'\n            - '-memdmp'\n    selection_cli_output:\n        CommandLine|contains:\n            - ' -o '\n            - ' /o '\n    selection_cli_process:\n        CommandLine|contains:\n            - ' -p '\n            - ' /p '\n    condition: all of selection_cli_* or (selection_img and selection_cli_dump)\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rdrleakdiag.exe'\n        - OriginalFileName: RdrLeakDiag.exe\n    selection_cli_dump:\n        CommandLine|contains:\n            - 'fullmemdmp'\n            - '/memdmp'\n            - '-memdmp'\n    selection_cli_output:\n        CommandLine|contains:\n            - ' -o '\n            - ' /o '\n    selection_cli_process:\n        CommandLine|contains:\n            - ' -p '\n            - ' /p '\n    condition: all of selection_cli_* or (selection_img and selection_cli_dump)\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory",
      "answer": "In order to detect the use of the Microsoft Windows Resource Leak Diagnostic tool \"rdrleakdiag.exe\" to dump process memory, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\rdrleakdiag.exe' or where the OriginalFileName is explicitly 'RdrLeakDiag.exe'. Additionally, scrutinize command-line parameters to identify attempts to dump memory. Key command-line options to watch for include 'fullmemdmp', '/memdmp', and '-memdmp' which indicate an operation to dump memory. Also, be alert for options such as ' -o ', ' /o ', which specify the output location for the dump file, and ' -p ', ' /p ', which indicate a target process for the memory dump. These indicators, particularly when occurring together, suggest an effort to misuse \"rdrleakdiag.exe\" for acquiring process memory data, which could be indicative of malicious activities such as information gathering or the facilitation of further attacks. Be aware that while monitoring for these signs, there may be instances where the use of these command-line arguments and the \"rdrleakdiag.exe\" process occur in non-malicious contexts; such instances are considered unknown false positives. The detection of any of the outlined command-line conditions in conjunction with the execution of \"rdrleakdiag.exe\" should be treated with a high level of suspicion and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting artifacts associated with GALLIUM cyber espionage group as reported by Microsoft Threat Intelligence Center in the December 2019 report..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect artifacts associated with GALLIUM cyber espionage group as reported by Microsoft Threat Intelligence Center in the December 2019 report, you should: monitor the creation of processes on Windows systems and check for any process that has been created with file hashes known to be associated with the GALLIUM cyber espionage group. Specifically, look for processes created with files matching any of these SHA256 or SHA1 hashes, as these are indicators of compromise (IoCs) tied to GALLIUM\u2019s activities. By identifying processes created with these specific hashes, it is possible to detect and potentially block or investigate suspicious activities attributed to this espionage group on your network. This detection method is critical for identifying attacks that use known malicious files to compromise systems, part of the tactics and techniques used for initial access, execution, persistence, or defense evasion by cyber espionage actors like GALLIUM.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'SHA256=9ae7c4a4e1cfe9b505c3a47e66551eb1357affee65bfefb0109d02f4e97c06dd'\n            - 'SHA256=7772d624e1aed327abcd24ce2068063da0e31bb1d5d3bf2841fc977e198c6c5b'\n            - 'SHA256=657fc7e6447e0065d488a7db2caab13071e44741875044f9024ca843fe4e86b5'\n            - 'SHA256=2ef157a97e28574356e1d871abf75deca7d7a1ea662f38b577a06dd039dbae29'\n            - 'SHA256=52fd7b90d7144ac448af4008be639d4d45c252e51823f4311011af3207a5fc77'\n            - 'SHA256=a370e47cb97b35f1ae6590d14ada7561d22b4a73be0cb6df7e851d85054b1ac3'\n            - 'SHA256=5bf80b871278a29f356bd42af1e35428aead20cd90b0c7642247afcaaa95b022'\n            - 'SHA256=6f690ccfd54c2b02f0c3cb89c938162c10cbeee693286e809579c540b07ed883'\n            - 'SHA256=3c884f776fbd16597c072afd81029e8764dd57ee79d798829ca111f5e170bd8e'\n            - 'SHA256=1922a419f57afb351b58330ed456143cc8de8b3ebcbd236d26a219b03b3464d7'\n            - 'SHA256=fe0e4ef832b62d49b43433e10c47dc51072959af93963c790892efc20ec422f1'\n            - 'SHA256=7ce9e1c5562c8a5c93878629a47fe6071a35d604ed57a8f918f3eadf82c11a9c'\n            - 'SHA256=178d5ee8c04401d332af331087a80fb4e5e2937edfba7266f9be34a5029b6945'\n            - 'SHA256=51f70956fa8c487784fd21ab795f6ba2199b5c2d346acdeef1de0318a4c729d9'\n            - 'SHA256=889bca95f1a69e94aaade1e959ed0d3620531dc0fc563be9a8decf41899b4d79'\n            - 'SHA256=332ddaa00e2eb862742cb8d7e24ce52a5d38ffb22f6c8bd51162bd35e84d7ddf'\n            - 'SHA256=44bcf82fa536318622798504e8369e9dcdb32686b95fcb44579f0b4efa79df08'\n            - 'SHA256=63552772fdd8c947712a2cff00dfe25c7a34133716784b6d486227384f8cf3ef'\n            - 'SHA256=056744a3c371b5938d63c396fe094afce8fb153796a65afa5103e1bffd7ca070'\n            - 'SHA1=53a44c2396d15c3a03723fa5e5db54cafd527635'\n            - 'SHA1=9c5e496921e3bc882dc40694f1dcc3746a75db19'\n            - 'SHA1=aeb573accfd95758550cf30bf04f389a92922844'\n            - 'SHA1=79ef78a797403a4ed1a616c68e07fff868a8650a'\n            - 'SHA1=4f6f38b4cec35e895d91c052b1f5a83d665c2196'\n            - 'SHA1=1e8c2cac2e4ce7cbd33c3858eb2e24531cb8a84d'\n            - 'SHA1=e841a63e47361a572db9a7334af459ddca11347a'\n            - 'SHA1=c28f606df28a9bc8df75a4d5e5837fc5522dd34d'\n            - 'SHA1=2e94b305d6812a9f96e6781c888e48c7fb157b6b'\n            - 'SHA1=dd44133716b8a241957b912fa6a02efde3ce3025'\n            - 'SHA1=8793bf166cb89eb55f0593404e4e933ab605e803'\n            - 'SHA1=a39b57032dbb2335499a51e13470a7cd5d86b138'\n            - 'SHA1=41cc2b15c662bc001c0eb92f6cc222934f0beeea'\n            - 'SHA1=d209430d6af54792371174e70e27dd11d3def7a7'\n            - 'SHA1=1c6452026c56efd2c94cea7e0f671eb55515edb0'\n            - 'SHA1=c6b41d3afdcdcaf9f442bbe772f5da871801fd5a'\n            - 'SHA1=4923d460e22fbbf165bbbaba168e5a46b8157d9f'\n            - 'SHA1=f201504bd96e81d0d350c3a8332593ee1c9e09de'\n            - 'SHA1=ddd2db1127632a2a52943a2fe516a2e7d05d70d2'\n    selection_hashes:\n        - sha256:\n            - '9ae7c4a4e1cfe9b505c3a47e66551eb1357affee65bfefb0109d02f4e97c06dd'\n            - '7772d624e1aed327abcd24ce2068063da0e31bb1d5d3bf2841fc977e198c6c5b'\n            - '657fc7e6447e0065d488a7db2caab13071e44741875044f9024ca843fe4e86b5'\n            - '2ef157a97e28574356e1d871abf75deca7d7a1ea662f38b577a06dd039dbae29'\n            - '52fd7b90d7144ac448af4008be639d4d45c252e51823f4311011af3207a5fc77'\n            - 'a370e47cb97b35f1ae6590d14ada7561d22b4a73be0cb6df7e851d85054b1ac3'\n            - '5bf80b871278a29f356bd42af1e35428aead20cd90b0c7642247afcaaa95b022'\n            - '6f690ccfd54c2b02f0c3cb89c938162c10cbeee693286e809579c540b07ed883'\n            - '3c884f776fbd16597c072afd81029e8764dd57ee79d798829ca111f5e170bd8e'\n            - '1922a419f57afb351b58330ed456143cc8de8b3ebcbd236d26a219b03b3464d7'\n            - 'fe0e4ef832b62d49b43433e10c47dc51072959af93963c790892efc20ec422f1'\n            - '7ce9e1c5562c8a5c93878629a47fe6071a35d604ed57a8f918f3eadf82c11a9c'\n            - '178d5ee8c04401d332af331087a80fb4e5e2937edfba7266f9be34a5029b6945'\n            - '51f70956fa8c487784fd21ab795f6ba2199b5c2d346acdeef1de0318a4c729d9'\n            - '889bca95f1a69e94aaade1e959ed0d3620531dc0fc563be9a8decf41899b4d79'\n            - '332ddaa00e2eb862742cb8d7e24ce52a5d38ffb22f6c8bd51162bd35e84d7ddf'\n            - '44bcf82fa536318622798504e8369e9dcdb32686b95fcb44579f0b4efa79df08'\n            - '63552772fdd8c947712a2cff00dfe25c7a34133716784b6d486227384f8cf3ef'\n            - '056744a3c371b5938d63c396fe094afce8fb153796a65afa5103e1bffd7ca070'\n        - sha1:\n            - '53a44c2396d15c3a03723fa5e5db54cafd527635'\n            - '9c5e496921e3bc882dc40694f1dcc3746a75db19'\n            - 'aeb573accfd95758550cf30bf04f389a92922844'\n            - '79ef78a797403a4ed1a616c68e07fff868a8650a'\n            - '4f6f38b4cec35e895d91c052b1f5a83d665c2196'\n            - '1e8c2cac2e4ce7cbd33c3858eb2e24531cb8a84d'\n            - 'e841a63e47361a572db9a7334af459ddca11347a'\n            - 'c28f606df28a9bc8df75a4d5e5837fc5522dd34d'\n            - '2e94b305d6812a9f96e6781c888e48c7fb157b6b'\n            - 'dd44133716b8a241957b912fa6a02efde3ce3025'\n            - '8793bf166cb89eb55f0593404e4e933ab605e803'\n            - 'a39b57032dbb2335499a51e13470a7cd5d86b138'\n            - '41cc2b15c662bc001c0eb92f6cc222934f0beeea'\n            - 'd209430d6af54792371174e70e27dd11d3def7a7'\n            - '1c6452026c56efd2c94cea7e0f671eb55515edb0'\n            - 'c6b41d3afdcdcaf9f442bbe772f5da871801fd5a'\n            - '4923d460e22fbbf165bbbaba168e5a46b8157d9f'\n            - 'f201504bd96e81d0d350c3a8332593ee1c9e09de'\n            - 'ddd2db1127632a2a52943a2fe516a2e7d05d70d2'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'SHA256=9ae7c4a4e1cfe9b505c3a47e66551eb1357affee65bfefb0109d02f4e97c06dd'\n            - 'SHA256=7772d624e1aed327abcd24ce2068063da0e31bb1d5d3bf2841fc977e198c6c5b'\n            - 'SHA256=657fc7e6447e0065d488a7db2caab13071e44741875044f9024ca843fe4e86b5'\n            - 'SHA256=2ef157a97e28574356e1d871abf75deca7d7a1ea662f38b577a06dd039dbae29'\n            - 'SHA256=52fd7b90d7144ac448af4008be639d4d45c252e51823f4311011af3207a5fc77'\n            - 'SHA256=a370e47cb97b35f1ae6590d14ada7561d22b4a73be0cb6df7e851d85054b1ac3'\n            - 'SHA256=5bf80b871278a29f356bd42af1e35428aead20cd90b0c7642247afcaaa95b022'\n            - 'SHA256=6f690ccfd54c2b02f0c3cb89c938162c10cbeee693286e809579c540b07ed883'\n            - 'SHA256=3c884f776fbd16597c072afd81029e8764dd57ee79d798829ca111f5e170bd8e'\n            - 'SHA256=1922a419f57afb351b58330ed456143cc8de8b3ebcbd236d26a219b03b3464d7'\n            - 'SHA256=fe0e4ef832b62d49b43433e10c47dc51072959af93963c790892efc20ec422f1'\n            - 'SHA256=7ce9e1c5562c8a5c93878629a47fe6071a35d604ed57a8f918f3eadf82c11a9c'\n            - 'SHA256=178d5ee8c04401d332af331087a80fb4e5e2937edfba7266f9be34a5029b6945'\n            - 'SHA256=51f70956fa8c487784fd21ab795f6ba2199b5c2d346acdeef1de0318a4c729d9'\n            - 'SHA256=889bca95f1a69e94aaade1e959ed0d3620531dc0fc563be9a8decf41899b4d79'\n            - 'SHA256=332ddaa00e2eb862742cb8d7e24ce52a5d38ffb22f6c8bd51162bd35e84d7ddf'\n            - 'SHA256=44bcf82fa536318622798504e8369e9dcdb32686b95fcb44579f0b4efa79df08'\n            - 'SHA256=63552772fdd8c947712a2cff00dfe25c7a34133716784b6d486227384f8cf3ef'\n            - 'SHA256=056744a3c371b5938d63c396fe094afce8fb153796a65afa5103e1bffd7ca070'\n            - 'SHA1=53a44c2396d15c3a03723fa5e5db54cafd527635'\n            - 'SHA1=9c5e496921e3bc882dc40694f1dcc3746a75db19'\n            - 'SHA1=aeb573accfd95758550cf30bf04f389a92922844'\n            - 'SHA1=79ef78a797403a4ed1a616c68e07fff868a8650a'\n            - 'SHA1=4f6f38b4cec35e895d91c052b1f5a83d665c2196'\n            - 'SHA1=1e8c2cac2e4ce7cbd33c3858eb2e24531cb8a84d'\n            - 'SHA1=e841a63e47361a572db9a7334af459ddca11347a'\n            - 'SHA1=c28f606df28a9bc8df75a4d5e5837fc5522dd34d'\n            - 'SHA1=2e94b305d6812a9f96e6781c888e48c7fb157b6b'\n            - 'SHA1=dd44133716b8a241957b912fa6a02efde3ce3025'\n            - 'SHA1=8793bf166cb89eb55f0593404e4e933ab605e803'\n            - 'SHA1=a39b57032dbb2335499a51e13470a7cd5d86b138'\n            - 'SHA1=41cc2b15c662bc001c0eb92f6cc222934f0beeea'\n            - 'SHA1=d209430d6af54792371174e70e27dd11d3def7a7'\n            - 'SHA1=1c6452026c56efd2c94cea7e0f671eb55515edb0'\n            - 'SHA1=c6b41d3afdcdcaf9f442bbe772f5da871801fd5a'\n            - 'SHA1=4923d460e22fbbf165bbbaba168e5a46b8157d9f'\n            - 'SHA1=f201504bd96e81d0d350c3a8332593ee1c9e09de'\n            - 'SHA1=ddd2db1127632a2a52943a2fe516a2e7d05d70d2'\n    selection_hashes:\n        - sha256:\n            - '9ae7c4a4e1cfe9b505c3a47e66551eb1357affee65bfefb0109d02f4e97c06dd'\n            - '7772d624e1aed327abcd24ce2068063da0e31bb1d5d3bf2841fc977e198c6c5b'\n            - '657fc7e6447e0065d488a7db2caab13071e44741875044f9024ca843fe4e86b5'\n            - '2ef157a97e28574356e1d871abf75deca7d7a1ea662f38b577a06dd039dbae29'\n            - '52fd7b90d7144ac448af4008be639d4d45c252e51823f4311011af3207a5fc77'\n            - 'a370e47cb97b35f1ae6590d14ada7561d22b4a73be0cb6df7e851d85054b1ac3'\n            - '5bf80b871278a29f356bd42af1e35428aead20cd90b0c7642247afcaaa95b022'\n            - '6f690ccfd54c2b02f0c3cb89c938162c10cbeee693286e809579c540b07ed883'\n            - '3c884f776fbd16597c072afd81029e8764dd57ee79d798829ca111f5e170bd8e'\n            - '1922a419f57afb351b58330ed456143cc8de8b3ebcbd236d26a219b03b3464d7'\n            - 'fe0e4ef832b62d49b43433e10c47dc51072959af93963c790892efc20ec422f1'\n            - '7ce9e1c5562c8a5c93878629a47fe6071a35d604ed57a8f918f3eadf82c11a9c'\n            - '178d5ee8c04401d332af331087a80fb4e5e2937edfba7266f9be34a5029b6945'\n            - '51f70956fa8c487784fd21ab795f6ba2199b5c2d346acdeef1de0318a4c729d9'\n            - '889bca95f1a69e94aaade1e959ed0d3620531dc0fc563be9a8decf41899b4d79'\n            - '332ddaa00e2eb862742cb8d7e24ce52a5d38ffb22f6c8bd51162bd35e84d7ddf'\n            - '44bcf82fa536318622798504e8369e9dcdb32686b95fcb44579f0b4efa79df08'\n            - '63552772fdd8c947712a2cff00dfe25c7a34133716784b6d486227384f8cf3ef'\n            - '056744a3c371b5938d63c396fe094afce8fb153796a65afa5103e1bffd7ca070'\n        - sha1:\n            - '53a44c2396d15c3a03723fa5e5db54cafd527635'\n            - '9c5e496921e3bc882dc40694f1dcc3746a75db19'\n            - 'aeb573accfd95758550cf30bf04f389a92922844'\n            - '79ef78a797403a4ed1a616c68e07fff868a8650a'\n            - '4f6f38b4cec35e895d91c052b1f5a83d665c2196'\n            - '1e8c2cac2e4ce7cbd33c3858eb2e24531cb8a84d'\n            - 'e841a63e47361a572db9a7334af459ddca11347a'\n            - 'c28f606df28a9bc8df75a4d5e5837fc5522dd34d'\n            - '2e94b305d6812a9f96e6781c888e48c7fb157b6b'\n            - 'dd44133716b8a241957b912fa6a02efde3ce3025'\n            - '8793bf166cb89eb55f0593404e4e933ab605e803'\n            - 'a39b57032dbb2335499a51e13470a7cd5d86b138'\n            - '41cc2b15c662bc001c0eb92f6cc222934f0beeea'\n            - 'd209430d6af54792371174e70e27dd11d3def7a7'\n            - '1c6452026c56efd2c94cea7e0f671eb55515edb0'\n            - 'c6b41d3afdcdcaf9f442bbe772f5da871801fd5a'\n            - '4923d460e22fbbf165bbbaba168e5a46b8157d9f'\n            - 'f201504bd96e81d0d350c3a8332593ee1c9e09de'\n            - 'ddd2db1127632a2a52943a2fe516a2e7d05d70d2'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "artifacts associated with GALLIUM cyber espionage group as reported by Microsoft Threat Intelligence Center in the December 2019 report.",
      "answer": "In order to detect artifacts associated with GALLIUM cyber espionage group as reported by Microsoft Threat Intelligence Center in the December 2019 report, you should: monitor the creation of processes on Windows systems and check for any process that has been created with file hashes known to be associated with the GALLIUM cyber espionage group. Specifically, look for processes created with files matching any of these SHA256 or SHA1 hashes, as these are indicators of compromise (IoCs) tied to GALLIUM\u2019s activities. By identifying processes created with these specific hashes, it is possible to detect and potentially block or investigate suspicious activities attributed to this espionage group on your network. This detection method is critical for identifying attacks that use known malicious files to compromise systems, part of the tactics and techniques used for initial access, execution, persistence, or defense evasion by cyber espionage actors like GALLIUM."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary might use WMI to check if a certain remote service is running on a remote device.\nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an adversary might use Windows Management Instrumentation (WMI) to check if a certain remote service is running on a remote device, you should: monitor for the creation of processes that end with '\\WMIC.exe' or have an original filename of 'wmic.exe'. Additionally, it's important to look for command lines that contain the word 'service'. These observations indicate that someone is likely using the WMIC tool to query remote services, which can be a sign of reconnaissance activity as part of a broader campaign to understand the network environment and potentially identify vulnerable services for exploitation. The feedback from such a query might indicate whether a service is running, not present, or if the remote host is unreachable, commonly noted by messages like \"No instance(s) Available\" or \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable.\" This monitoring should be applied to systems running Windows, given the use of WMIC. The level of concern for such activities is considered medium, and while there may be legitimate uses for querying service information remotely, it's essential to review these activities to rule out malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'service'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'service'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "An adversary might use WMI to check if a certain remote service is running on a remote device.\nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\n",
      "answer": "In order to detect when an adversary might use Windows Management Instrumentation (WMI) to check if a certain remote service is running on a remote device, you should: monitor for the creation of processes that end with '\\WMIC.exe' or have an original filename of 'wmic.exe'. Additionally, it's important to look for command lines that contain the word 'service'. These observations indicate that someone is likely using the WMIC tool to query remote services, which can be a sign of reconnaissance activity as part of a broader campaign to understand the network environment and potentially identify vulnerable services for exploitation. The feedback from such a query might indicate whether a service is running, not present, or if the remote host is unreachable, commonly noted by messages like \"No instance(s) Available\" or \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable.\" This monitoring should be applied to systems running Windows, given the use of WMIC. The level of concern for such activities is considered medium, and while there may be legitimate uses for querying service information remotely, it's essential to review these activities to rule out malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", which can be used to gather information about the target machine, you should monitor process creation events on Windows systems for any command line execution that includes 'gatherNetworkInfo.vbs'. It's crucial to exclude processes where the command line execution image ends with '\\cscript.exe' or '\\wscript.exe' to reduce false positives. This approach is designed to identify potential reconnaissance activity where adversaries attempt to gather valuable information about the network configuration and settings of the target machine. The associated tactics and techniques based on the MITRE ATT&CK framework for this detection include Discovery and Scripting. It is important to note that the reliability of this detection is high, but unknown false positives may occur, implying a need for further investigation into any alerts generated from this detection strategy.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'gatherNetworkInfo.vbs'\n    filter:\n        Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'gatherNetworkInfo.vbs'\n    filter:\n        Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
      "answer": "In order to detect execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", which can be used to gather information about the target machine, you should monitor process creation events on Windows systems for any command line execution that includes 'gatherNetworkInfo.vbs'. It's crucial to exclude processes where the command line execution image ends with '\\cscript.exe' or '\\wscript.exe' to reduce false positives. This approach is designed to identify potential reconnaissance activity where adversaries attempt to gather valuable information about the network configuration and settings of the target machine. The associated tactics and techniques based on the MITRE ATT&CK framework for this detection include Discovery and Scripting. It is important to note that the reliability of this detection is high, but unknown false positives may occur, implying a need for further investigation into any alerts generated from this detection strategy."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse the Windows command shell for execution.\nThe Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems.\nThe Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands.\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops.\nCommon uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple system\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries abusing the Windows command shell for execution, you should monitor PowerShell Script Block Logs for specific patterns indicating malicious activity. Ensure that Script Block Logging is enabled on Windows systems to capture detailed information about all PowerShell scripts executed, including those launched from the command line. Focus on identifying any instances where the PowerShell script contains commands starting processes (Start-Process) directly followed by or associated with execution of batch files (files ending in .cmd or .bat). These patterns are indicative of attempts to control the system or execute tasks in a manner commonly seen in attacks leveraging the command shell. Note that while detecting these behaviors is crucial for identifying potential malicious activity, it\u2019s also important to consider legitimate administrative scripts that may employ similar commands for system management purposes. The detection is tagged with tactics and techniques such as Execution and Command and Scripting Interpreter, reflecting its focus on capturing misuse of the Windows command shell and batch files for adversarial purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_start:\n        ScriptBlockText|contains: Start-Process\n    selection_batch:\n        ScriptBlockText|contains:\n            - '.cmd'\n            - '.bat'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_start:\n        ScriptBlockText|contains: Start-Process\n    selection_batch:\n        ScriptBlockText|contains:\n            - '.cmd'\n            - '.bat'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration script\nlevel: medium\n",
      "question": "Adversaries may abuse the Windows command shell for execution.\nThe Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems.\nThe Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands.\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops.\nCommon uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple system\n",
      "answer": "In order to detect adversaries abusing the Windows command shell for execution, you should monitor PowerShell Script Block Logs for specific patterns indicating malicious activity. Ensure that Script Block Logging is enabled on Windows systems to capture detailed information about all PowerShell scripts executed, including those launched from the command line. Focus on identifying any instances where the PowerShell script contains commands starting processes (Start-Process) directly followed by or associated with execution of batch files (files ending in .cmd or .bat). These patterns are indicative of attempts to control the system or execute tasks in a manner commonly seen in attacks leveraging the command shell. Note that while detecting these behaviors is crucial for identifying potential malicious activity, it\u2019s also important to consider legitimate administrative scripts that may employ similar commands for system management purposes. The detection is tagged with tactics and techniques such as Execution and Command and Scripting Interpreter, reflecting its focus on capturing misuse of the Windows command shell and batch files for adversarial purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when the \"index\" value of a scheduled task is modified from the registry\nWhich effectively hides it from any tooling such as \"schtasks /query\" (Read the referenced link for more information about the effects of this technique)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when the \"index\" value of a scheduled task is modified from the registry, which effectively hides it from any tooling such as \"schtasks /query\", you should look for modifications in the Windows Registry specific to scheduled tasks. Monitor for events where the \"SetValue\" type is logged, indicating a change has been made to a registry key. Specifically, focus on changes to the \"TargetObject\" path within the registry, which should contain the string '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\' along with 'Index'. These alterations are intricately linked to the visibility of scheduled tasks and their respective indices. Any modification, particularly setting the \"Details\" to a DWORD of 0x00000000, should raise an alert as it could be an attempt to obscure a scheduled task. Given the context and the specificity of the manipulation, false positives are considered unlikely, and any detection of this behavior should be treated with a high level of concern due to its potential implications on system transparency and security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\'\n            - 'Index'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\'\n            - 'Index'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "when the \"index\" value of a scheduled task is modified from the registry\nWhich effectively hides it from any tooling such as \"schtasks /query\" (Read the referenced link for more information about the effects of this technique)\n",
      "answer": "In order to detect when the \"index\" value of a scheduled task is modified from the registry, which effectively hides it from any tooling such as \"schtasks /query\", you should look for modifications in the Windows Registry specific to scheduled tasks. Monitor for events where the \"SetValue\" type is logged, indicating a change has been made to a registry key. Specifically, focus on changes to the \"TargetObject\" path within the registry, which should contain the string '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\' along with 'Index'. These alterations are intricately linked to the visibility of scheduled tasks and their respective indices. Any modification, particularly setting the \"Details\" to a DWORD of 0x00000000, should raise an alert as it could be an attempt to obscure a scheduled task. Given the context and the specificity of the manipulation, false positives are considered unlikely, and any detection of this behavior should be treated with a high level of concern due to its potential implications on system transparency and security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of DLL side-loading malware used by threat group Emissary Panda aka APT27.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of DLL side-loading malware used by threat group Emissary Panda aka APT27, you should monitor process creation events on Windows systems. Specifically, look for instances where the `sllauncher.exe` process is the parent and `svchost.exe` is the child process. Additionally, pay attention to any `svchost.exe` process not only being spawned from within the `\\AppData\\Roaming\\` directory but also having command-line arguments that include '-k'. These patterns are indicative of abnormal activity potentially tied to the noted threat group's malicious operations. Due to the nature of the attack, such detections are critical and the likelihood of false positives is low. This strategy focuses on identifying a method commonly used by attackers to load malicious DLLs by exploiting legitimate Windows processes, hence providing a direct indication of a potential compromise by the specified threat group.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sllauncher:\n        ParentImage|endswith: '\\sllauncher.exe'\n        Image|endswith: '\\svchost.exe'\n    selection_svchost:\n        ParentImage|contains: '\\AppData\\Roaming\\'\n        Image|endswith: '\\svchost.exe'\n        CommandLine|contains: '-k'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sllauncher:\n        ParentImage|endswith: '\\sllauncher.exe'\n        Image|endswith: '\\svchost.exe'\n    selection_svchost:\n        ParentImage|contains: '\\AppData\\Roaming\\'\n        Image|endswith: '\\svchost.exe'\n        CommandLine|contains: '-k'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "execution of DLL side-loading malware used by threat group Emissary Panda aka APT27",
      "answer": "In order to detect the execution of DLL side-loading malware used by threat group Emissary Panda aka APT27, you should monitor process creation events on Windows systems. Specifically, look for instances where the `sllauncher.exe` process is the parent and `svchost.exe` is the child process. Additionally, pay attention to any `svchost.exe` process not only being spawned from within the `\\AppData\\Roaming\\` directory but also having command-line arguments that include '-k'. These patterns are indicative of abnormal activity potentially tied to the noted threat group's malicious operations. Due to the nature of the attack, such detections are critical and the likelihood of false positives is low. This strategy focuses on identifying a method commonly used by attackers to load malicious DLLs by exploiting legitimate Windows processes, hence providing a direct indication of a potential compromise by the specified threat group."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious PowerShell invocation command parameters.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell invocation command parameters, you should:\n\nMonitor process creation logs within Windows environments for specific patterns in the command line arguments that could indicate malicious activity. Look for instances where PowerShell is invoked with combinations of switches and parameters often used in attacks to execute code, bypass execution policies, or hide the activity.\n\nSpecific detection patterns to watch for include:\n- Use of base64 encoding with the presence of parameters like '-nop' (bypasses PowerShell profiles), '-w', 'hidden' (attempts to hide windows), '-c' (execute command), and '[Convert]::FromBase64String' (indicates base64 encoded commands are being decoded and executed).\n- Invocation of PowerShell with flags such as '-noni' (non-interactive), '-nop', 'hidden', 'iex' (alias for Invoke-Expression, used to run strings as commands), and 'New-Object' (used to instantiate .NET objects, potentially for web requests or COM objects for lateral movements or data theft).\n- Use of encoded commands that bypass the execution policy with '-ep', 'bypass', and '-Enc' (encoded commands) along with attempts to run Windows invisibly with parameters like '-w' and 'hidden'.\n- Attempts to modify the system registry through PowerShell with identifiable flags and paths like 'powershell', 'reg', 'add', and a specific focus on '\\software\\' indicating changes to software entries.\n- Suspicious usage of PowerShell to invoke web requests with 'bypass', '-noprofile', 'hidden', and the creation of 'new-object' instances of 'system.net.webclient', followed by a download function call. This behavior often points to downloading and executing malicious scripts or tools from the internet.\n- Execution of PowerShell scripts that include 'iex', 'New-Object', 'Net.WebClient', and '.Download' commands in combination, indicating direct internet downloads and execution of potentially malicious content.\n\nIt's important to exclude known benign instances such as the downloading and execution of Chocolatey installation scripts, which might contain similar patterns but are recognized as legitimate.\n\nBy actively monitoring for these specific patterns, you can identify potentially malicious activities involving PowerShell, which is a common vector used by attackers to execute code, bypass security measures, and maintain stealth.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_convert_b64:\n        CommandLine|contains|all:\n            - '-nop'\n            - ' -w '\n            - 'hidden'\n            - ' -c '\n            - '[Convert]::FromBase64String'\n    selection_iex:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-noni'\n            - '-nop'\n            - ' -c '\n            - 'iex'\n            - 'New-Object'\n    selection_enc:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-ep'\n            - 'bypass'\n            - '-Enc'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'powershell'\n            - 'reg'\n            - 'add'\n            - '\\software\\'\n    selection_webclient:\n        CommandLine|contains|all:\n            - 'bypass'\n            - '-noprofile'\n            - '-windowstyle'\n            - 'hidden'\n            - 'new-object'\n            - 'system.net.webclient'\n            - '.download'\n    selection_iex_webclient:\n        CommandLine|contains|all:\n            - 'iex'\n            - 'New-Object'\n            - 'Net.WebClient'\n            - '.Download'\n    filter_chocolatey:\n        CommandLine|contains:\n            - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\"\n            - 'Write-ChocolateyWarning'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_convert_b64:\n        CommandLine|contains|all:\n            - '-nop'\n            - ' -w '\n            - 'hidden'\n            - ' -c '\n            - '[Convert]::FromBase64String'\n    selection_iex:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-noni'\n            - '-nop'\n            - ' -c '\n            - 'iex'\n            - 'New-Object'\n    selection_enc:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-ep'\n            - 'bypass'\n            - '-Enc'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'powershell'\n            - 'reg'\n            - 'add'\n            - '\\software\\'\n    selection_webclient:\n        CommandLine|contains|all:\n            - 'bypass'\n            - '-noprofile'\n            - '-windowstyle'\n            - 'hidden'\n            - 'new-object'\n            - 'system.net.webclient'\n            - '.download'\n    selection_iex_webclient:\n        CommandLine|contains|all:\n            - 'iex'\n            - 'New-Object'\n            - 'Net.WebClient'\n            - '.Download'\n    filter_chocolatey:\n        CommandLine|contains:\n            - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\"\n            - 'Write-ChocolateyWarning'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious PowerShell invocation command parameters",
      "answer": "In order to detect suspicious PowerShell invocation command parameters, you should:\n\nMonitor process creation logs within Windows environments for specific patterns in the command line arguments that could indicate malicious activity. Look for instances where PowerShell is invoked with combinations of switches and parameters often used in attacks to execute code, bypass execution policies, or hide the activity.\n\nSpecific detection patterns to watch for include:\n- Use of base64 encoding with the presence of parameters like '-nop' (bypasses PowerShell profiles), '-w', 'hidden' (attempts to hide windows), '-c' (execute command), and '[Convert]::FromBase64String' (indicates base64 encoded commands are being decoded and executed).\n- Invocation of PowerShell with flags such as '-noni' (non-interactive), '-nop', 'hidden', 'iex' (alias for Invoke-Expression, used to run strings as commands), and 'New-Object' (used to instantiate .NET objects, potentially for web requests or COM objects for lateral movements or data theft).\n- Use of encoded commands that bypass the execution policy with '-ep', 'bypass', and '-Enc' (encoded commands) along with attempts to run Windows invisibly with parameters like '-w' and 'hidden'.\n- Attempts to modify the system registry through PowerShell with identifiable flags and paths like 'powershell', 'reg', 'add', and a specific focus on '\\software\\' indicating changes to software entries.\n- Suspicious usage of PowerShell to invoke web requests with 'bypass', '-noprofile', 'hidden', and the creation of 'new-object' instances of 'system.net.webclient', followed by a download function call. This behavior often points to downloading and executing malicious scripts or tools from the internet.\n- Execution of PowerShell scripts that include 'iex', 'New-Object', 'Net.WebClient', and '.Download' commands in combination, indicating direct internet downloads and execution of potentially malicious content.\n\nIt's important to exclude known benign instances such as the downloading and execution of Chocolatey installation scripts, which might contain similar patterns but are recognized as legitimate.\n\nBy actively monitoring for these specific patterns, you can identify potentially malicious activities involving PowerShell, which is a common vector used by attackers to execute code, bypass security measures, and maintain stealth."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious execution from ManageEngine as seen used by Mint Sandstorm.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious execution from ManageEngine as seen used by Mint Sandstorm, you should:\n\nFocus on the creation of processes within Windows operating systems, specifically monitoring the parent processes for instances of ManageEngine applications or the use of Java. You should be vigilant for child processes that involve PowerShell (either powershell.exe or powershell_ise.exe). Additionally, pay attention to PowerShell command lines that include specific keywords indicating potentially malicious activities, such as commands for dumping credentials, manipulating local group memberships, downloading files, executing web requests, handling encoded commands, and various other suspicious activities.\n\nAlso, monitor for the use of command-line tools targeting the Local Security Authority Subsystem Service (LSASS), including use cases that might involve dumping process memory or querying system information, commands initiating external network connections via tools like `wget` or `curl`, and the manipulation of user groups and system configurations through command-line interfaces. This includes adding users to local administrator groups, making unauthorized network configurations, disabling anti-spyware features, deleting shadow copies, and other actions that could undermine system integrity and security.\n\nPay extra attention to commands attempting to modify critical system settings through the Registry Editor, use of WMIC for process creation or deletion, and the utilization of utilities designed for backup management or shadow copy deletion, indicating an attempt to hamper system recovery.\n\nBe wary of false positive indicators and ensure that legitimate administrative activities, especially those involving ManageEngine sites or downloading Microsoft components, are not incorrectly flagged. The detection thresholds outlined are critical due to the potential impact and sophistication of the tactics involved.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent_path:\n        ParentImage|contains:\n            - 'manageengine'\n            - 'ServiceDesk'\n    selection_parent_image:\n        ParentImage|contains: '\\java'\n    selection_special_child_powershell_img:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n    selection_special_child_powershell_cli:\n        - CommandLine|contains:\n            - ' echo '\n            - '-dumpmode'\n            - '-ssh'\n            - '.dmp'\n            - 'add-MpPreference'\n            - 'adscredentials'\n            - 'bitsadmin'\n            - 'certutil'\n            - 'csvhost.exe'\n            - 'DownloadFile'\n            - 'DownloadString'\n            - 'dsquery'\n            - 'ekern.exe'\n            - 'FromBase64String'\n            - 'iex '\n            - 'iex('\n            - 'Invoke-Expression'\n            - 'Invoke-WebRequest'\n            - 'localgroup administrators'\n            - 'net group'\n            - 'net user'\n            - 'o365accountconfiguration'\n            - 'query session'\n            - 'samaccountname='\n            - 'set-MpPreference'\n            - 'svhost.exe'\n            - 'System.IO.Compression'\n            - 'System.IO.MemoryStream'\n            - 'usoprivate'\n            - 'usoshared'\n            - 'whoami'\n        - CommandLine|re: '[-/\u2013][Ee^]{1,2}[ncodema^]*\\s[A-Za-z0-9+/=]{15,}'\n    selection_special_child_lsass_1:\n        CommandLine|contains: 'lsass'\n    selection_special_child_lsass_2:\n        CommandLine|contains:\n            - 'procdump'\n            - 'tasklist'\n            - 'findstr'\n    selection_child_wget:\n        Image|endswith: '\\wget.exe'\n        CommandLine|contains: 'http'\n    selection_child_curl:\n        Image|endswith: '\\curl.exe'\n        CommandLine|contains: 'http'\n    selection_child_script:\n        CommandLine|contains:\n            - 'E:jscript'\n            - 'e:vbscript'\n    selection_child_localgroup:\n        CommandLine|contains|all:\n            - 'localgroup Administrators'\n            - '/add'\n    selection_child_net:\n        CommandLine|contains: 'net' # Covers net1\n        CommandLine|contains|all:\n            - 'user'\n            - '/add'\n    selection_child_reg:\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableAntiSpyware'\n            - '\\Microsoft\\Windows Defender'\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableRestrictedAdmin'\n            - 'CurrentControlSet\\Control\\Lsa'\n    selection_child_wmic_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'process call create'\n    selection_child_wmic_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'delete'\n            - 'shadowcopy'\n    selection_child_vssadmin:\n        CommandLine|contains|all:\n            - 'vssadmin'\n            - 'delete'\n            - 'shadows'\n    selection_child_wbadmin:\n        CommandLine|contains|all:\n            - 'wbadmin'\n            - 'delete'\n            - 'catalog'\n    filter_main:\n        CommandLine|contains|all:\n            - 'download.microsoft.com'\n            - 'manageengine.com'\n            - 'msiexec'\n    condition: all of selection_parent_* and (all of selection_special_child_powershell_* or all of selection_special_child_lsass_* or 1 of selection_child_*) and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent_path:\n        ParentImage|contains:\n            - 'manageengine'\n            - 'ServiceDesk'\n    selection_parent_image:\n        ParentImage|contains: '\\java'\n    selection_special_child_powershell_img:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n    selection_special_child_powershell_cli:\n        - CommandLine|contains:\n            - ' echo '\n            - '-dumpmode'\n            - '-ssh'\n            - '.dmp'\n            - 'add-MpPreference'\n            - 'adscredentials'\n            - 'bitsadmin'\n            - 'certutil'\n            - 'csvhost.exe'\n            - 'DownloadFile'\n            - 'DownloadString'\n            - 'dsquery'\n            - 'ekern.exe'\n            - 'FromBase64String'\n            - 'iex '\n            - 'iex('\n            - 'Invoke-Expression'\n            - 'Invoke-WebRequest'\n            - 'localgroup administrators'\n            - 'net group'\n            - 'net user'\n            - 'o365accountconfiguration'\n            - 'query session'\n            - 'samaccountname='\n            - 'set-MpPreference'\n            - 'svhost.exe'\n            - 'System.IO.Compression'\n            - 'System.IO.MemoryStream'\n            - 'usoprivate'\n            - 'usoshared'\n            - 'whoami'\n        - CommandLine|re: '[-/\u2013][Ee^]{1,2}[ncodema^]*\\s[A-Za-z0-9+/=]{15,}'\n    selection_special_child_lsass_1:\n        CommandLine|contains: 'lsass'\n    selection_special_child_lsass_2:\n        CommandLine|contains:\n            - 'procdump'\n            - 'tasklist'\n            - 'findstr'\n    selection_child_wget:\n        Image|endswith: '\\wget.exe'\n        CommandLine|contains: 'http'\n    selection_child_curl:\n        Image|endswith: '\\curl.exe'\n        CommandLine|contains: 'http'\n    selection_child_script:\n        CommandLine|contains:\n            - 'E:jscript'\n            - 'e:vbscript'\n    selection_child_localgroup:\n        CommandLine|contains|all:\n            - 'localgroup Administrators'\n            - '/add'\n    selection_child_net:\n        CommandLine|contains: 'net' # Covers net1\n        CommandLine|contains|all:\n            - 'user'\n            - '/add'\n    selection_child_reg:\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableAntiSpyware'\n            - '\\Microsoft\\Windows Defender'\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableRestrictedAdmin'\n            - 'CurrentControlSet\\Control\\Lsa'\n    selection_child_wmic_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'process call create'\n    selection_child_wmic_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'delete'\n            - 'shadowcopy'\n    selection_child_vssadmin:\n        CommandLine|contains|all:\n            - 'vssadmin'\n            - 'delete'\n            - 'shadows'\n    selection_child_wbadmin:\n        CommandLine|contains|all:\n            - 'wbadmin'\n            - 'delete'\n            - 'catalog'\n    filter_main:\n        CommandLine|contains|all:\n            - 'download.microsoft.com'\n            - 'manageengine.com'\n            - 'msiexec'\n    condition: all of selection_parent_* and (all of selection_special_child_powershell_* or all of selection_special_child_lsass_* or 1 of selection_child_*) and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "suspicious execution from ManageEngine as seen used by Mint Sandstorm",
      "answer": "In order to detect suspicious execution from ManageEngine as seen used by Mint Sandstorm, you should:\n\nFocus on the creation of processes within Windows operating systems, specifically monitoring the parent processes for instances of ManageEngine applications or the use of Java. You should be vigilant for child processes that involve PowerShell (either powershell.exe or powershell_ise.exe). Additionally, pay attention to PowerShell command lines that include specific keywords indicating potentially malicious activities, such as commands for dumping credentials, manipulating local group memberships, downloading files, executing web requests, handling encoded commands, and various other suspicious activities.\n\nAlso, monitor for the use of command-line tools targeting the Local Security Authority Subsystem Service (LSASS), including use cases that might involve dumping process memory or querying system information, commands initiating external network connections via tools like `wget` or `curl`, and the manipulation of user groups and system configurations through command-line interfaces. This includes adding users to local administrator groups, making unauthorized network configurations, disabling anti-spyware features, deleting shadow copies, and other actions that could undermine system integrity and security.\n\nPay extra attention to commands attempting to modify critical system settings through the Registry Editor, use of WMIC for process creation or deletion, and the utilization of utilities designed for backup management or shadow copy deletion, indicating an attempt to hamper system recovery.\n\nBe wary of false positive indicators and ensure that legitimate administrative activities, especially those involving ManageEngine sites or downloading Microsoft components, are not incorrectly flagged. The detection thresholds outlined are critical due to the potential impact and sophistication of the tactics involved."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a named pipe as used by CobaltStrike.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a named pipe as used by CobaltStrike, you should: Focus on monitoring the creation of Windows named pipes which could indicate malicious activity. Ensure your monitoring tools, especially those analyzing logs from Windows systems, are configured to capture Named Pipe Events, specifically looking for Event IDs 17 and 18 in Sysmon logs. This requires verifying if your Sysmon configuration actively logs these events, and adjustments might be necessary using popular configurations found on GitHub. \n\nDuring detection, pay close attention to the pipe names. If a pipe name contains both '\\MSSE-' and '-server', starts with '\\postex_', '\\status_', '\\msagent_', '\\mojo_', '\\interprocess_', '\\samr_', '\\netlogon_', '\\srvsvc_', '\\lsarpc_', '\\wkssvc_', it could indicate a compromised system. These specific patterns are chosen because they are commonly utilized by Cobalt Strike and other malware to establish communication channels on the infected host.\n\nRemember that while this strategy is critical for identifying potential threats, there might be cases where legitimate software uses similar named pipes, leading to unknown false positives. Thus, it\u2019s crucial to analyze detections within the broader context of behavior on the system to accurately identify malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection_MSSE:\n        PipeName|contains|all:\n            - '\\MSSE-'\n            - '-server'\n    selection_postex:\n        PipeName|startswith: '\\postex_' # Also include the pipe \"\\postex_ssh_\"\n    selection_status:\n        PipeName|startswith: '\\status_'\n    selection_msagent:\n        PipeName|startswith: '\\msagent_'\n    selection_mojo:\n        PipeName|startswith: '\\mojo_'\n    selection_interprocess:\n        PipeName|startswith: '\\interprocess_'\n    selection_samr:\n        PipeName|startswith: '\\samr_'\n    selection_netlogon:\n        PipeName|startswith: '\\netlogon_'\n    selection_srvsvc:\n        PipeName|startswith: '\\srvsvc_'\n    selection_lsarpc:\n        PipeName|startswith: '\\lsarpc_'\n    selection_wkssvc:\n        PipeName|startswith: '\\wkssvc_'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection_MSSE:\n        PipeName|contains|all:\n            - '\\MSSE-'\n            - '-server'\n    selection_postex:\n        PipeName|startswith: '\\postex_' # Also include the pipe \"\\postex_ssh_\"\n    selection_status:\n        PipeName|startswith: '\\status_'\n    selection_msagent:\n        PipeName|startswith: '\\msagent_'\n    selection_mojo:\n        PipeName|startswith: '\\mojo_'\n    selection_interprocess:\n        PipeName|startswith: '\\interprocess_'\n    selection_samr:\n        PipeName|startswith: '\\samr_'\n    selection_netlogon:\n        PipeName|startswith: '\\netlogon_'\n    selection_srvsvc:\n        PipeName|startswith: '\\srvsvc_'\n    selection_lsarpc:\n        PipeName|startswith: '\\lsarpc_'\n    selection_wkssvc:\n        PipeName|startswith: '\\wkssvc_'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "creation of a named pipe as used by CobaltStrike",
      "answer": "In order to detect the creation of a named pipe as used by CobaltStrike, you should: Focus on monitoring the creation of Windows named pipes which could indicate malicious activity. Ensure your monitoring tools, especially those analyzing logs from Windows systems, are configured to capture Named Pipe Events, specifically looking for Event IDs 17 and 18 in Sysmon logs. This requires verifying if your Sysmon configuration actively logs these events, and adjustments might be necessary using popular configurations found on GitHub. \n\nDuring detection, pay close attention to the pipe names. If a pipe name contains both '\\MSSE-' and '-server', starts with '\\postex_', '\\status_', '\\msagent_', '\\mojo_', '\\interprocess_', '\\samr_', '\\netlogon_', '\\srvsvc_', '\\lsarpc_', '\\wkssvc_', it could indicate a compromised system. These specific patterns are chosen because they are commonly utilized by Cobalt Strike and other malware to establish communication channels on the infected host.\n\nRemember that while this strategy is critical for identifying potential threats, there might be cases where legitimate software uses similar named pipes, leading to unknown false positives. Thus, it\u2019s crucial to analyze detections within the broader context of behavior on the system to accurately identify malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet, you should monitor Windows process creation logs for the execution of commands that contain 'Get-LocalGroupMember '. Furthermore, be on the lookout for specific references within those commands to key user groups such as 'domain admins', both correctly spelled and with common typos like ' administrator' without an 's', ' administrateur' again missing an 's', 'enterprise admins', 'Exchange Trusted Subsystem', 'Remote Desktop Users', and the translations of 'Remote Desktop Users' in French as 'Utilisateurs du Bureau \u00e0 distance' and in Spanish as 'Usuarios de escritorio remoto'. It's important to capture both the command lines used and their parent command lines to fully understand the context of these potentially reconnaissance-related activities. However, be aware that legitimate administrative activity might occasionally use these commands, which could lead to false positives. The significance level of this detection is considered medium, indicating it's important but not necessarily indicative of a breach on its own.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Covers group and localgroup flags\n    selection_cmdlet:\n        CommandLine|contains: 'Get-LocalGroupMember '\n    selection_group:\n        CommandLine|contains:\n            # Add more groups for other languages\n            - 'domain admins'\n            - ' administrator' # Typo without an 'S' so we catch both\n            - ' administrateur' # Typo without an 'S' so we catch both\n            - 'enterprise admins'\n            - 'Exchange Trusted Subsystem'\n            - 'Remote Desktop Users'\n            - 'Utilisateurs du Bureau \u00e0 distance' # French for \"Remote Desktop Users\"\n            - 'Usuarios de escritorio remoto' # Spanish for \"Remote Desktop Users\"\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Covers group and localgroup flags\n    selection_cmdlet:\n        CommandLine|contains: 'Get-LocalGroupMember '\n    selection_group:\n        CommandLine|contains:\n            # Add more groups for other languages\n            - 'domain admins'\n            - ' administrator' # Typo without an 'S' so we catch both\n            - ' administrateur' # Typo without an 'S' so we catch both\n            - 'enterprise admins'\n            - 'Exchange Trusted Subsystem'\n            - 'Remote Desktop Users'\n            - 'Utilisateurs du Bureau \u00e0 distance' # French for \"Remote Desktop Users\"\n            - 'Usuarios de escritorio remoto' # Spanish for \"Remote Desktop Users\"\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
      "question": "suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet",
      "answer": "In order to detect suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet, you should monitor Windows process creation logs for the execution of commands that contain 'Get-LocalGroupMember '. Furthermore, be on the lookout for specific references within those commands to key user groups such as 'domain admins', both correctly spelled and with common typos like ' administrator' without an 's', ' administrateur' again missing an 's', 'enterprise admins', 'Exchange Trusted Subsystem', 'Remote Desktop Users', and the translations of 'Remote Desktop Users' in French as 'Utilisateurs du Bureau \u00e0 distance' and in Spanish as 'Usuarios de escritorio remoto'. It's important to capture both the command lines used and their parent command lines to fully understand the context of these potentially reconnaissance-related activities. However, be aware that legitimate administrative activity might occasionally use these commands, which could lead to false positives. The significance level of this detection is considered medium, indicating it's important but not necessarily indicative of a breach on its own."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the AMSI come server registry key in order disable AMSI scanning functionalities. When AMSI attempts to starts its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the AMSI COM server registry key in order to disable AMSI scanning functionalities. When AMSI attempts to start its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless, you should: Monitor Windows registry set operations, focusing on events where the registry value is being set (EventType: SetValue) to track changes. Concentrate on registry modifications targeting the specific path ending with '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)', which is crucial for AMSI's COM server initialization. Exclude any instances where these modifications are setting the registry's target object to the legitimate AMSI DLL path ('%windir%\\system32\\amsi.dll'), as these changes do not represent the attack scenario of interest. This detection strategy requires vigilance in monitoring for registry alterations that deviate from the genuine AMSI DLL path, ensuring the early identification of attempts to disable AMSI scanning functionalities. Recognizing such unauthorized modifications is vital, as they can lead to a scenario where Windows fails to load the correct AMSI COM component during scanning operations, severely compromising system security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)'\n    filter:\n        Details: '%windir%\\system32\\amsi.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)'\n    filter:\n        Details: '%windir%\\system32\\amsi.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to the AMSI come server registry key in order disable AMSI scanning functionalities. When AMSI attempts to starts its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless",
      "answer": "In order to detect changes to the AMSI COM server registry key in order to disable AMSI scanning functionalities. When AMSI attempts to start its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless, you should: Monitor Windows registry set operations, focusing on events where the registry value is being set (EventType: SetValue) to track changes. Concentrate on registry modifications targeting the specific path ending with '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)', which is crucial for AMSI's COM server initialization. Exclude any instances where these modifications are setting the registry's target object to the legitimate AMSI DLL path ('%windir%\\system32\\amsi.dll'), as these changes do not represent the attack scenario of interest. This detection strategy requires vigilance in monitoring for registry alterations that deviate from the genuine AMSI DLL path, ensuring the early identification of attempts to disable AMSI scanning functionalities. Recognizing such unauthorized modifications is vital, as they can lead to a scenario where Windows fails to load the correct AMSI COM component during scanning operations, severely compromising system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting one of the possible scenarios for disabling Symantec Endpoint Protection.\nSymantec Endpoint Protection antivirus software services incorrectly implement the protected service mechanism.\nAs a result, the NT AUTHORITY/SYSTEM user can execute the taskkill /im command several times ccSvcHst.exe /f, thereby killing the process belonging to the service, and thus shutting down the service.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect one of the possible scenarios for disabling Symantec Endpoint Protection, you should monitor process creation logs on Windows systems for commands indicative of an attempt to forcefully terminate the \"ccSvcHst.exe\" process, which is associated with Symantec Endpoint Protection. Specifically, look for the use of the \"taskkill\" command with the flags \" /F \" (which forces the command to kill the specified process) and \" /IM \" (which specifies the image name of the process to be terminated), targeting \"ccSvcHst.exe\". This activity might be executed by the NT AUTHORITY/SYSTEM user multiple times in an attempt to shutdown the antivirus service. This behavior is considered highly suspicious and could indicate a breach of the protected service mechanism of Symantec Endpoint Protection, potentially allowing an attacker to disable the antivirus system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'taskkill'\n            - ' /F '\n            - ' /IM '\n            - 'ccSvcHst.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'taskkill'\n            - ' /F '\n            - ' /IM '\n            - 'ccSvcHst.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "one of the possible scenarios for disabling Symantec Endpoint Protection.\nSymantec Endpoint Protection antivirus software services incorrectly implement the protected service mechanism.\nAs a result, the NT AUTHORITY/SYSTEM user can execute the taskkill /im command several times ccSvcHst.exe /f, thereby killing the process belonging to the service, and thus shutting down the service.\n",
      "answer": "In order to detect one of the possible scenarios for disabling Symantec Endpoint Protection, you should monitor process creation logs on Windows systems for commands indicative of an attempt to forcefully terminate the \"ccSvcHst.exe\" process, which is associated with Symantec Endpoint Protection. Specifically, look for the use of the \"taskkill\" command with the flags \" /F \" (which forces the command to kill the specified process) and \" /IM \" (which specifies the image name of the process to be terminated), targeting \"ccSvcHst.exe\". This activity might be executed by the NT AUTHORITY/SYSTEM user multiple times in an attempt to shutdown the antivirus service. This behavior is considered highly suspicious and could indicate a breach of the protected service mechanism of Symantec Endpoint Protection, potentially allowing an attacker to disable the antivirus system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting See what files are being deleted from flash file systems.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to see what files are being deleted from flash file systems, you should: Monitor Cisco devices that use AAA services for certain activities that indicate files being erased from the flash storage. Specifically, focus on logging activities that involve keywords such as 'erase', 'delete', and 'format'. These actions typically appear in the command set (CmdSet) field within your logs. It's important to note that while detecting these keywords can indicate malicious behavior, there are legitimate scenarios where administrators might use these commands to clean up local flash space. Therefore, these detections are considered to have a medium level of confidence, and further investigation is recommended to differentiate between benign and malicious intentions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'erase'\n        - 'delete'\n        - 'format'\n    condition: keywords\nfields:\n    - CmdSet\nfalsepositives:\n    - Will be used sometimes by admins to clean up local flash space\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'erase'\n        - 'delete'\n        - 'format'\n    condition: keywords\nfields:\n    - CmdSet\nfalsepositives:\n    - Will be used sometimes by admins to clean up local flash space\nlevel: medium\n",
      "question": "See what files are being deleted from flash file systems",
      "answer": "In order to see what files are being deleted from flash file systems, you should: Monitor Cisco devices that use AAA services for certain activities that indicate files being erased from the flash storage. Specifically, focus on logging activities that involve keywords such as 'erase', 'delete', and 'format'. These actions typically appear in the command set (CmdSet) field within your logs. It's important to note that while detecting these keywords can indicate malicious behavior, there are legitimate scenarios where administrators might use these commands to clean up local flash space. Therefore, these detections are considered to have a medium level of confidence, and further investigation is recommended to differentiate between benign and malicious intentions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows services that got terminated for whatever reason.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detects Windows services that got terminated for whatever reason, you should: Focus on monitoring Windows system service logs, specifically targeting those generated by the Service Control Manager. The detection strategy hinges on identifying event logs where the Provider Name matches 'Service Control Manager' and the Event ID is 7023, which indicates that a service has been terminated, citing an error for the termination. While implementing this monitoring, bear in mind that encountering such events does not invariably signify malicious activity. Service terminations can occur for a variety of non-malicious reasons, hence such events are generally considered to have a low level of threat severity. Identifying these events can nonetheless be crucial for maintaining system integrity and security, providing valuable insights into potential operational issues or malicious disruptions within the Windows services framework.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7023 # The X Service service terminated with the following error\n    condition: selection\nfalsepositives:\n    - False positives could occur since service termination could happen due to multiple reasons\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7023 # The X Service service terminated with the following error\n    condition: selection\nfalsepositives:\n    - False positives could occur since service termination could happen due to multiple reasons\nlevel: low\n",
      "question": "Windows services that got terminated for whatever reason",
      "answer": "In order to Detects Windows services that got terminated for whatever reason, you should: Focus on monitoring Windows system service logs, specifically targeting those generated by the Service Control Manager. The detection strategy hinges on identifying event logs where the Provider Name matches 'Service Control Manager' and the Event ID is 7023, which indicates that a service has been terminated, citing an error for the termination. While implementing this monitoring, bear in mind that encountering such events does not invariably signify malicious activity. Service terminations can occur for a variety of non-malicious reasons, hence such events are generally considered to have a low level of threat severity. Identifying these events can nonetheless be crucial for maintaining system integrity and security, providing valuable insights into potential operational issues or malicious disruptions within the Windows services framework."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting recovery of a new public database instance from a snapshot. It may be a part of data exfiltration..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the recovery of a new public database instance from a snapshot. It may be a part of data exfiltration, you should: Monitor AWS CloudTrail logs for activities involving the recovery of database instances from snapshots where the database is set to be publicly accessible. Specifically, keep an eye out for events that come from the RDS (Relational Database Service) indicated by the event source `rds.amazonaws.com`. Look for the event name `RestoreDBInstanceFromDBSnapshot` which signifies the action of restoring a database instance from a snapshot. Importantly, ensure that the `responseElements.publiclyAccessible` attribute is set to 'true', indicating that the database instance is publicly accessible post-restoration. This detection is rated with a high-level importance due to the potential risk of exfiltrating data through such publicly accessible databases. Awareness of false positives is essential, although currently unknown, implying that monitoring and context are crucial when interpreting alerts based on this detection criterion. Identifying such activity could signify a breach or an inadvertent configuration that could expose sensitive data publicly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: rds.amazonaws.com\n        responseElements.publiclyAccessible: 'true'\n        eventName: RestoreDBInstanceFromDBSnapshot\n    condition: selection_source\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: rds.amazonaws.com\n        responseElements.publiclyAccessible: 'true'\n        eventName: RestoreDBInstanceFromDBSnapshot\n    condition: selection_source\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "recovery of a new public database instance from a snapshot. It may be a part of data exfiltration.",
      "answer": "In order to detect the recovery of a new public database instance from a snapshot. It may be a part of data exfiltration, you should: Monitor AWS CloudTrail logs for activities involving the recovery of database instances from snapshots where the database is set to be publicly accessible. Specifically, keep an eye out for events that come from the RDS (Relational Database Service) indicated by the event source `rds.amazonaws.com`. Look for the event name `RestoreDBInstanceFromDBSnapshot` which signifies the action of restoring a database instance from a snapshot. Importantly, ensure that the `responseElements.publiclyAccessible` attribute is set to 'true', indicating that the database instance is publicly accessible post-restoration. This detection is rated with a high-level importance due to the potential risk of exfiltrating data through such publicly accessible databases. Awareness of false positives is essential, although currently unknown, implying that monitoring and context are crucial when interpreting alerts based on this detection criterion. Identifying such activity could signify a breach or an inadvertent configuration that could expose sensitive data publicly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential suspicious child processes of \"3CXDesktopApp.exe\". Which could be related to the 3CXDesktopApp supply chain compromise.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential suspicious child processes of \"3CXDesktopApp.exe\", which could be related to the 3CXDesktopApp supply chain compromise, you should monitor for the creation of certain processes when they are spawned as child processes by \"3CXDesktopApp.exe\" on Windows systems. Specifically, track the initiation of command-line tools and scripting engines, including 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', and 'wscript.exe'. The occurrence of these processes being started by \"3CXDesktopApp.exe\" should be considered highly suspicious and potentially indicative of a security threat related to a supply chain compromise. It's critical to react with high caution to these alerts, although it is acknowledged that false positives remain a possibility, albeit they are unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\3CXDesktopApp.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\3CXDesktopApp.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential suspicious child processes of \"3CXDesktopApp.exe\". Which could be related to the 3CXDesktopApp supply chain compromise",
      "answer": "In order to detect potential suspicious child processes of \"3CXDesktopApp.exe\", which could be related to the 3CXDesktopApp supply chain compromise, you should monitor for the creation of certain processes when they are spawned as child processes by \"3CXDesktopApp.exe\" on Windows systems. Specifically, track the initiation of command-line tools and scripting engines, including 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', and 'wscript.exe'. The occurrence of these processes being started by \"3CXDesktopApp.exe\" should be considered highly suspicious and potentially indicative of a security threat related to a supply chain compromise. It's critical to react with high caution to these alerts, although it is acknowledged that false positives remain a possibility, albeit they are unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious ways to download files or content using PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious ways to download files or content using PowerShell, you should: Monitor the process creation logs on Windows systems for any occurrences where the command line contains specific strings indicative of file or content download attempts via PowerShell. These strings include '.DownloadString(', '.DownloadFile(', 'Invoke-WebRequest ', and 'iwr '. Notably, this monitoring is set at a medium level of alert due to the potential for false positives, which could arise from legitimate scripts or tools that download files. This approach is designed to spot techniques that may be utilized by attackers to retrieve malicious payloads or scripts onto a targeted system covertly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    condition: selection\nfalsepositives:\n    - Scripts or tools that download files\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    condition: selection\nfalsepositives:\n    - Scripts or tools that download files\nlevel: medium\n",
      "question": "suspicious ways to download files or content using PowerShell",
      "answer": "In order to detect suspicious ways to download files or content using PowerShell, you should: Monitor the process creation logs on Windows systems for any occurrences where the command line contains specific strings indicative of file or content download attempts via PowerShell. These strings include '.DownloadString(', '.DownloadFile(', 'Invoke-WebRequest ', and 'iwr '. Notably, this monitoring is set at a medium level of alert due to the potential for false positives, which could arise from legitimate scripts or tools that download files. This approach is designed to spot techniques that may be utilized by attackers to retrieve malicious payloads or scripts onto a targeted system covertly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process command line that uses whoami as first parameter (as e.g. used by EfsPotato).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious process command line that uses whoami as the first parameter (as e.g. used by EfsPotato), you should monitor for process creation events on Windows systems where the command line includes the sequence '.exe whoami'. This specific sequence may indicate that an adversary is attempting to gather information about the current user's privileges or identity, which can be a precursor to privilege escalation or lateral movement within the network. It's important to note that while this activity can be indicative of malicious behavior, the possibility of false positives exists due to legitimate use of the 'whoami' command in benign contexts, though such instances are considered unknown. The detection of this pattern should be treated with a high level of concern due to its potential association with malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '.exe whoami'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '.exe whoami'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious process command line that uses whoami as first parameter (as e.g. used by EfsPotato)",
      "answer": "In order to detect a suspicious process command line that uses whoami as the first parameter (as e.g. used by EfsPotato), you should monitor for process creation events on Windows systems where the command line includes the sequence '.exe whoami'. This specific sequence may indicate that an adversary is attempting to gather information about the current user's privileges or identity, which can be a precursor to privilege escalation or lateral movement within the network. It's important to note that while this activity can be indicative of malicious behavior, the possibility of false positives exists due to legitimate use of the 'whoami' command in benign contexts, though such instances are considered unknown. The detection of this pattern should be treated with a high level of concern due to its potential association with malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using Event Viewer RecentViews.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using Event Viewer RecentViews, you should: monitor Windows process creation logs for evidence of specific command-line behaviors indicative of this attack method. Specifically, look for processes that have command lines containing references to either '\\Event Viewer\\RecentViews' or '\\EventV~1\\RecentViews'. Additionally, watch for command lines that include the redirection character '>', which is commonly used in these attacks to write or copy malicious payloads to specific locations, leveraging the Event Viewer to bypass User Account Control (UAC). Such detection criteria are crucial because they signify an abnormal use of the Event Viewer RecentViews or an attempt to exploit its functionality to execute unauthorized commands or applications with elevated privileges without triggering standard UAC prompts. It is noted that while these patterns are highly indicative of a UAC bypass attempt using Event Viewer, there might be unknown false positive cases where legitimate actions might inadvertently match these criteria. Therefore, the alert level for this detection is set to high due to the severity of the potential security breach this behavior represents.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_path:\n        # Example: ysoserial.exe -o raw -f BinaryFormatter - g DataSet -c calc > RecentViews & copy RecentViews %LOCALAPPDATA%\\Microsoft\\EventV~1\\RecentViews & eventvwr.exe\n        CommandLine|contains:\n            - '\\Event Viewer\\RecentViews'\n            - '\\EventV~1\\RecentViews'\n    selection_redirect:\n        CommandLine|contains: '>'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_path:\n        # Example: ysoserial.exe -o raw -f BinaryFormatter - g DataSet -c calc > RecentViews & copy RecentViews %LOCALAPPDATA%\\Microsoft\\EventV~1\\RecentViews & eventvwr.exe\n        CommandLine|contains:\n            - '\\Event Viewer\\RecentViews'\n            - '\\EventV~1\\RecentViews'\n    selection_redirect:\n        CommandLine|contains: '>'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using Event Viewer RecentViews",
      "answer": "In order to detect the pattern of UAC Bypass using Event Viewer RecentViews, you should: monitor Windows process creation logs for evidence of specific command-line behaviors indicative of this attack method. Specifically, look for processes that have command lines containing references to either '\\Event Viewer\\RecentViews' or '\\EventV~1\\RecentViews'. Additionally, watch for command lines that include the redirection character '>', which is commonly used in these attacks to write or copy malicious payloads to specific locations, leveraging the Event Viewer to bypass User Account Control (UAC). Such detection criteria are crucial because they signify an abnormal use of the Event Viewer RecentViews or an attempt to exploit its functionality to execute unauthorized commands or applications with elevated privileges without triggering standard UAC prompts. It is noted that while these patterns are highly indicative of a UAC bypass attempt using Event Viewer, there might be unknown false positive cases where legitimate actions might inadvertently match these criteria. Therefore, the alert level for this detection is set to high due to the severity of the potential security breach this behavior represents."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares), you should monitor the creation of processes on Windows systems, particularly focusing on those instances where Outlook appears to be the parent application launching these processes. Specifically, look for cases where the child process (the executable image being launched) has its path starting with double backslashes `\\\\`, which typically indicates access to network resources, such as SMB or WebDAV shares. This scenario could signify a potentially malicious activity, where Outlook is being used to execute code from a remote location, possibly as part of a phishing attack or another form of compromise. Given the high risk associated with such behavior, it is marked with a high level of alert, although it's important to acknowledge that there could be unknown scenarios where this behavior might be legitimate.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\outlook.exe'\n        Image|startswith: '\\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\outlook.exe'\n        Image|startswith: '\\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares).",
      "answer": "In order to detect a suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares), you should monitor the creation of processes on Windows systems, particularly focusing on those instances where Outlook appears to be the parent application launching these processes. Specifically, look for cases where the child process (the executable image being launched) has its path starting with double backslashes `\\\\`, which typically indicates access to network resources, such as SMB or WebDAV shares. This scenario could signify a potentially malicious activity, where Outlook is being used to execute code from a remote location, possibly as part of a phishing attack or another form of compromise. Given the high risk associated with such behavior, it is marked with a high level of alert, although it's important to acknowledge that there could be unknown scenarios where this behavior might be legitimate."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Environment Variables to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of environment variables to execute PowerShell, you should monitor Windows driver load logs for instances where the Image Path field matches a specific regular expression. This regular expression looks for command-line processes (cmd) initiated with either /c or /r options, followed by a command to set an environment variable. The variable name is expected to have 3 to 6 alphabetic characters and may also involve complex curly brace notation indicating an attempt at obfuscation. Additionally, the presence of \"-f\" within the command structure suggests an attempt to format strings or execute code in a manner that is not immediately clear, further indicating obfuscation. This detection strategy is crucial because attackers might use such sophisticated techniques to obscure their activities, including the execution of PowerShell scripts, making it difficult to discern malicious endeavors from legitimate system operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r)(?:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?:.*\\)){1,}.*\\\"'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r)(?:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?:.*\\)){1,}.*\\\"'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n\n",
      "question": "Obfuscated use of Environment Variables to execute PowerShell",
      "answer": "In order to detect obfuscated use of environment variables to execute PowerShell, you should monitor Windows driver load logs for instances where the Image Path field matches a specific regular expression. This regular expression looks for command-line processes (cmd) initiated with either /c or /r options, followed by a command to set an environment variable. The variable name is expected to have 3 to 6 alphabetic characters and may also involve complex curly brace notation indicating an attempt at obfuscation. Additionally, the presence of \"-f\" within the command structure suggests an attempt to format strings or execute code in a manner that is not immediately clear, further indicating obfuscation. This detection strategy is crucial because attackers might use such sophisticated techniques to obscure their activities, including the execution of PowerShell scripts, making it difficult to discern malicious endeavors from legitimate system operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This method detects malicious services mentioned in Turla PNG dropper report by NCC Group in November 2018.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect malicious services mentioned in Turla PNG dropper report by NCC Group in November 2018, you should monitor Windows system service logs for events that are indicative of the suspicious activity associated with these services. Specifically, look for logs that come from the Service Control Manager with an EventID of 7045, which denotes a service installation. Be particularly vigilant for the installation of a service named 'WerFaultSvc'. This specific service name has been identified in connection with the Turla PNG dropper, a type of malware deployment. Considering the context and specificity of these indicators - the service name and event ID - false positives are considered unlikely. Given the critical nature of this threat, immediate attention to such alerts is advisable. This analysis focuses on identifying tactics and techniques without directly referencing specific MITRE ATT&CK framework identifiers; however, it aligns with strategies observed in sophisticated cyber espionage campaigns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'WerFaultSvc'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'WerFaultSvc'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "This method detects malicious services mentioned in Turla PNG dropper report by NCC Group in November 2018",
      "answer": "In order to detect malicious services mentioned in Turla PNG dropper report by NCC Group in November 2018, you should monitor Windows system service logs for events that are indicative of the suspicious activity associated with these services. Specifically, look for logs that come from the Service Control Manager with an EventID of 7045, which denotes a service installation. Be particularly vigilant for the installation of a service named 'WerFaultSvc'. This specific service name has been identified in connection with the Turla PNG dropper, a type of malware deployment. Considering the context and specificity of these indicators - the service name and event ID - false positives are considered unlikely. Given the critical nature of this threat, immediate attention to such alerts is advisable. This analysis focuses on identifying tactics and techniques without directly referencing specific MITRE ATT&CK framework identifiers; however, it aligns with strategies observed in sophisticated cyber espionage campaigns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of other scripts using the Node executable packaged with Adobe Creative Cloud.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of other scripts using the Node executable packaged with Adobe Creative Cloud, you should monitor the process creation logs on Windows systems for instances where the Node executable under the Adobe Creative Cloud Experience directory is started. Specifically, look for processes that end with the path '\\Adobe Creative Cloud Experience\\libs\\node.exe'. However, it's essential to exclude any processes that are legitimately executing JavaScript files located in the 'Adobe Creative Cloud Experience\\js' folder, as this is a standard operation of the Adobe service. Keep an eye on the 'Image', 'CommandLine', and 'ParentCommandLine' fields for any suspicious activity. This detection has a medium level of urgency due to the potential for false positives, which, while not specifically known, should be considered in any alerts generated. This monitoring strategy aims at identifying techniques where attackers may leverage legitimate system processes to execute malicious scripts, a method often employed to avoid detection by security software.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Adobe Creative Cloud Experience\\libs\\node.exe'\n    filter:\n        CommandLine|contains: 'Adobe Creative Cloud Experience\\js' # Folder where Creative Cloud's JS resources are located\n    condition: selection and not filter\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Adobe Creative Cloud Experience\\libs\\node.exe'\n    filter:\n        CommandLine|contains: 'Adobe Creative Cloud Experience\\js' # Folder where Creative Cloud's JS resources are located\n    condition: selection and not filter\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of other scripts using the Node executable packaged with Adobe Creative Cloud",
      "answer": "In order to detect the execution of other scripts using the Node executable packaged with Adobe Creative Cloud, you should monitor the process creation logs on Windows systems for instances where the Node executable under the Adobe Creative Cloud Experience directory is started. Specifically, look for processes that end with the path '\\Adobe Creative Cloud Experience\\libs\\node.exe'. However, it's essential to exclude any processes that are legitimately executing JavaScript files located in the 'Adobe Creative Cloud Experience\\js' folder, as this is a standard operation of the Adobe service. Keep an eye on the 'Image', 'CommandLine', and 'ParentCommandLine' fields for any suspicious activity. This detection has a medium level of urgency due to the potential for false positives, which, while not specifically known, should be considered in any alerts generated. This monitoring strategy aims at identifying techniques where attackers may leverage legitimate system processes to execute malicious scripts, a method often employed to avoid detection by security software."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of psexec or paexec with renamed service name, helping to filter out the noise if psexec is used for legitimate purposes or if an attacker uses a different psexec client other than the sysinternal one, you should: Monitor Windows security logs for events with ID 5145, which are related to the advanced audit policy setting \"Object Access > Audit Detailed File Share\", configured for both Success and Failure. Specifically, look for events where the ShareName includes '\\\\*\\IPC$', a common indicator of psexec or paexec usage. Additionally, pay attention to the RelativeTargetName field for entries ending with '-stdin', '-stdout', or '-stderr', as these are often associated with the execution of remote commands or scripts via these tools. However, to reduce false positives and filter out legitimate use cases of psexec by system administrators, exclude any events where the RelativeTargetName starts with 'PSEXESVC'. This approach helps in identifying misuse of administrative tools and potential lateral movement or remote execution efforts by attackers, without overly focusing on legitimate administrative activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|endswith:\n            - '-stdin'\n            - '-stdout'\n            - '-stderr'\n    filter:\n        RelativeTargetName|startswith: 'PSEXESVC'\n    condition: selection1 and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|endswith:\n            - '-stdin'\n            - '-stdout'\n            - '-stderr'\n    filter:\n        RelativeTargetName|startswith: 'PSEXESVC'\n    condition: selection1 and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
      "answer": "In order to detect execution of psexec or paexec with renamed service name, helping to filter out the noise if psexec is used for legitimate purposes or if an attacker uses a different psexec client other than the sysinternal one, you should: Monitor Windows security logs for events with ID 5145, which are related to the advanced audit policy setting \"Object Access > Audit Detailed File Share\", configured for both Success and Failure. Specifically, look for events where the ShareName includes '\\\\*\\IPC$', a common indicator of psexec or paexec usage. Additionally, pay attention to the RelativeTargetName field for entries ending with '-stdin', '-stdout', or '-stderr', as these are often associated with the execution of remote commands or scripts via these tools. However, to reduce false positives and filter out legitimate use cases of psexec by system administrators, exclude any events where the RelativeTargetName starts with 'PSEXESVC'. This approach helps in identifying misuse of administrative tools and potential lateral movement or remote execution efforts by attackers, without overly focusing on legitimate administrative activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting email exfiltration via powershell cmdlets.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect email exfiltration via PowerShell cmdlets, you should focus on monitoring process creation logs within Windows environments. Specifically, keep a vigilant eye for any instances where 'powershell.exe' or 'pwsh.exe' are launched. Within the command lines initiated by these executables, it is imperative to look for the combination of certain PowerShell commands. These include 'Add-PSSnapin', paired with 'Get-Recipient', and the additional use of '-ExpandProperty EmailAddresses', 'SmtpAddress', and '-hidetableheaders'. The presence of these command-line arguments together may indicate an attempt to query and exfiltrate email addresses without triggering obvious signs of malicious activity. Given the high impact of such an action, the alert level for this behavior is considered high, although it's important to remain cautious of potential unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Add-PSSnapin'\n            - 'Get-Recipient'\n            - '-ExpandProperty'\n            - 'EmailAddresses'\n            - 'SmtpAddress'\n            - '-hidetableheaders'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Add-PSSnapin'\n            - 'Get-Recipient'\n            - '-ExpandProperty'\n            - 'EmailAddresses'\n            - 'SmtpAddress'\n            - '-hidetableheaders'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "email exfiltration via powershell cmdlets",
      "answer": "In order to detect email exfiltration via PowerShell cmdlets, you should focus on monitoring process creation logs within Windows environments. Specifically, keep a vigilant eye for any instances where 'powershell.exe' or 'pwsh.exe' are launched. Within the command lines initiated by these executables, it is imperative to look for the combination of certain PowerShell commands. These include 'Add-PSSnapin', paired with 'Get-Recipient', and the additional use of '-ExpandProperty EmailAddresses', 'SmtpAddress', and '-hidetableheaders'. The presence of these command-line arguments together may indicate an attempt to query and exfiltrate email addresses without triggering obvious signs of malicious activity. Given the high impact of such an action, the alert level for this behavior is considered high, although it's important to remain cautious of potential unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attack where the Fax service tries to load a non-existent DLL named ualapi.dll, allowing an attacker to side-load their own malicious DLL using this service, you should monitor Windows image load events.\n\nSpecifically, focus on instances where the process `\\fxssvc.exe`, which is associated with the Windows Fax service, attempts to load a DLL. If the DLL being loaded ends with 'ualapi.dll', it signals a potential malicious activity because 'ualapi.dll' does not exist by default in Windows systems. This anomaly might indicate an attacker's attempt to exploit the Fax service for DLL side-loading.\n\nHowever, to reduce false positives, any loading of DLL files that start with the path 'C:\\Windows\\WinSxS\\' should be excluded from alerts. This path is a legitimate system directory used for storing side-by-side assemblies in Windows and could contain various versions of DLLs needed by the system or legitimate applications.\n\nThis analysis falls under the high importance level due to the potential for malicious actors to exploit the Fax service to achieve persistence, evade defenses, or execute their code with the privileges of the fax service. Monitoring for such behavior is critical in identifying sophisticated adversaries attempting to utilize this technique.\n\nLook for these signs in the logs of Windows image loading events, focusing on filtering out legitimate uses while catching malicious attempts at exploiting the Fax service through DLL side-loading.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\fxssvc.exe'\n        ImageLoaded|endswith: 'ualapi.dll'\n    filter:\n        ImageLoaded|startswith: 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\fxssvc.exe'\n        ImageLoaded|endswith: 'ualapi.dll'\n    filter:\n        ImageLoaded|startswith: 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service.",
      "answer": "In order to detect an attack where the Fax service tries to load a non-existent DLL named ualapi.dll, allowing an attacker to side-load their own malicious DLL using this service, you should monitor Windows image load events.\n\nSpecifically, focus on instances where the process `\\fxssvc.exe`, which is associated with the Windows Fax service, attempts to load a DLL. If the DLL being loaded ends with 'ualapi.dll', it signals a potential malicious activity because 'ualapi.dll' does not exist by default in Windows systems. This anomaly might indicate an attacker's attempt to exploit the Fax service for DLL side-loading.\n\nHowever, to reduce false positives, any loading of DLL files that start with the path 'C:\\Windows\\WinSxS\\' should be excluded from alerts. This path is a legitimate system directory used for storing side-by-side assemblies in Windows and could contain various versions of DLLs needed by the system or legitimate applications.\n\nThis analysis falls under the high importance level due to the potential for malicious actors to exploit the Fax service to achieve persistence, evade defenses, or execute their code with the privileges of the fax service. Monitoring for such behavior is critical in identifying sophisticated adversaries attempting to utilize this technique.\n\nLook for these signs in the logs of Windows image loading events, focusing on filtering out legitimate uses while catching malicious attempts at exploiting the Fax service through DLL side-loading."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Clip.exe to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring PowerShell script activities within Windows environments. Specifically, attention should be given to the Script Block Logging, which must be enabled to trace potentially malicious PowerShell executions. The key indicator for this type of attack involves looking for patterns in the ScriptBlockText that include the use of `cmd` with either `/c` or `/r` switches in close proximity to `clip.exe` or just `clip` followed by an attempt to interact with the clipboard in a concatenated and obfuscated manner. Such patterns often involve complex strings meant to obscure the intended action, which might include, but are not limited to, sequences that significantly utilize regex patterns to detect the precise formatting of commands designed to leverage Clip.exe for malicious purposes. Tags associated with this kind of activity mainly encompass tactics and techniques related to 'Execution', given the execution of commands via the command line, and 'Defense Evasion', regarding the obfuscated manner in which the Clip.exe utility is being utilized to execute PowerShell scripts indirectly. Detecting such activities is critical and is set at a high level of importance due to the potential for these methods to bypass conventional detection mechanisms and facilitate unauthorized actions on the target system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|re: '.*cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\"'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|re: '.*cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\"'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring PowerShell script activities within Windows environments. Specifically, attention should be given to the Script Block Logging, which must be enabled to trace potentially malicious PowerShell executions. The key indicator for this type of attack involves looking for patterns in the ScriptBlockText that include the use of `cmd` with either `/c` or `/r` switches in close proximity to `clip.exe` or just `clip` followed by an attempt to interact with the clipboard in a concatenated and obfuscated manner. Such patterns often involve complex strings meant to obscure the intended action, which might include, but are not limited to, sequences that significantly utilize regex patterns to detect the precise formatting of commands designed to leverage Clip.exe for malicious purposes. Tags associated with this kind of activity mainly encompass tactics and techniques related to 'Execution', given the execution of commands via the command line, and 'Defense Evasion', regarding the obfuscated manner in which the Clip.exe utility is being utilized to execute PowerShell scripts indirectly. Detecting such activities is critical and is set at a high level of importance due to the potential for these methods to bypass conventional detection mechanisms and facilitate unauthorized actions on the target system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Set-Alias or New-Alias cmdlet usage. Which can be use as a mean to obfuscate PowerShell scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Set-Alias or New-Alias cmdlet usage, which can be used as a means to obfuscate PowerShell scripts, you should: Monitor Windows PowerShell script block logs, which requires Script Block Logging to be enabled on the system. Specifically, focus on identifying occurrences where scripts contain the text 'Set-Alias ' or 'New-Alias '. This detection helps in identifying potential obfuscation techniques being employed within PowerShell scripts. However, be aware that there might be instances which could lead to false positives since the rule's precision is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Set-Alias '\n            - 'New-Alias '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Set-Alias '\n            - 'New-Alias '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Set-Alias or New-Alias cmdlet usage. Which can be use as a mean to obfuscate PowerShell scripts",
      "answer": "In order to detect Set-Alias or New-Alias cmdlet usage, which can be used as a means to obfuscate PowerShell scripts, you should: Monitor Windows PowerShell script block logs, which requires Script Block Logging to be enabled on the system. Specifically, focus on identifying occurrences where scripts contain the text 'Set-Alias ' or 'New-Alias '. This detection helps in identifying potential obfuscation techniques being employed within PowerShell scripts. However, be aware that there might be instances which could lead to false positives since the rule's precision is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should: Monitor Windows process creation logs for the execution of the PowerShell command 'Compress-Archive' accompanied by the parameters '-Path' and '-DestinationPath', specifically when the destination path is set to the Windows temporary folder, denoted as '$env:TEMP\\'. This activity is commonly observed when adversaries utilize built-in system tools to compress data in preparation for exfiltration. They might aggregate sensitive files in a single archive, placing it in a temporary directory, making it easier to stealthily exfiltrate. Be aware that this behavior might lead to some false positives as it\u2019s not entirely unique to malicious activities. Thus, it's classified with a medium level of confidence. Identifying such activities falls under tactics and techniques such as Collection (gathering data of interest to their goal) and Exfiltration (stealing the data), although these specific terms are not used directly in the monitoring logic.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration",
      "answer": "In order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should: Monitor Windows process creation logs for the execution of the PowerShell command 'Compress-Archive' accompanied by the parameters '-Path' and '-DestinationPath', specifically when the destination path is set to the Windows temporary folder, denoted as '$env:TEMP\\'. This activity is commonly observed when adversaries utilize built-in system tools to compress data in preparation for exfiltration. They might aggregate sensitive files in a single archive, placing it in a temporary directory, making it easier to stealthily exfiltrate. Be aware that this behavior might lead to some false positives as it\u2019s not entirely unique to malicious activities. Thus, it's classified with a medium level of confidence. Identifying such activities falls under tactics and techniques such as Collection (gathering data of interest to their goal) and Exfiltration (stealing the data), although these specific terms are not used directly in the monitoring logic."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting malicious indicators seen used by the Goofy Guineapig malware.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect malicious indicators seen used by the Goofy Guineapig malware, you should monitor file events on Windows systems, particularly focusing on the creation, modification, or access to specific files and directories that are known to be associated with this malware. Keep an eye on any activities involving the following paths: 'C:\\ProgramData\\GoogleUpdate\\config.dat', 'C:\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', 'C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\\tmp.bat', and 'C:\\ProgramData\\GoogleUpdate\\goopdate.dll'. These files are crucial indicators of the Goofy Guineapig malware\u2019s footprint on an infected system. Considering the unlikely chance of false positives and the high importance of these indicators, any detection of these file events should be taken seriously and prompt an immediate investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename:\n            - 'C:\\ProgramData\\GoogleUpdate\\config.dat'\n            - 'C:\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe'\n            - 'C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\\tmp.bat'\n            - 'C:\\ProgramData\\GoogleUpdate\\goopdate.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename:\n            - 'C:\\ProgramData\\GoogleUpdate\\config.dat'\n            - 'C:\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe'\n            - 'C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\\tmp.bat'\n            - 'C:\\ProgramData\\GoogleUpdate\\goopdate.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "malicious indicators seen used by the Goofy Guineapig malware",
      "answer": "In order to detect malicious indicators seen used by the Goofy Guineapig malware, you should monitor file events on Windows systems, particularly focusing on the creation, modification, or access to specific files and directories that are known to be associated with this malware. Keep an eye on any activities involving the following paths: 'C:\\ProgramData\\GoogleUpdate\\config.dat', 'C:\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', 'C:\\ProgramData\\GoogleUpdate\\GoogleUpdate\\tmp.bat', and 'C:\\ProgramData\\GoogleUpdate\\goopdate.dll'. These files are crucial indicators of the Goofy Guineapig malware\u2019s footprint on an infected system. Considering the unlikely chance of false positives and the high importance of these indicators, any detection of these file events should be taken seriously and prompt an immediate investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of bitsadmin downloading a file.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of bitsadmin downloading a file, you should: focus on monitoring process creation activities within Windows environments. Specifically, look for instances where the process image name ends with '\\bitsadmin.exe' or where the original file name is identified as 'bitsadmin.exe'. To further refine the detection, examine the command line for the presence of '/transfer', which is commonly used in file download commands. Additionally, check if the command line includes both '/create' and '/addfile' as part of its arguments, indicating the creation of a job and addition of a file to it. Another indicator of malicious activity is the inclusion of 'http' in the command line, suggesting the downloading of a file from the internet. It is important to capture both the command line and parent command line fields for analysis. While some legitimate applications may use bitsadmin in a similar manner, these instances are limited. The detection of such activities is considered to be of medium importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium\n",
      "question": "usage of bitsadmin downloading a file",
      "answer": "In order to detect usage of bitsadmin downloading a file, you should: focus on monitoring process creation activities within Windows environments. Specifically, look for instances where the process image name ends with '\\bitsadmin.exe' or where the original file name is identified as 'bitsadmin.exe'. To further refine the detection, examine the command line for the presence of '/transfer', which is commonly used in file download commands. Additionally, check if the command line includes both '/create' and '/addfile' as part of its arguments, indicating the creation of a job and addition of a file to it. Another indicator of malicious activity is the inclusion of 'http' in the command line, suggesting the downloading of a file from the internet. It is important to capture both the command line and parent command line fields for analysis. While some legitimate applications may use bitsadmin in a similar manner, these instances are limited. The detection of such activities is considered to be of medium importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the IEExec utility to download payloads.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the IEExec utility to download payloads, you should: Monitor the creation of processes on Windows systems for instances where the IEExec utility is used. Specifically, look for processes that end with the image name '\\IEExec.exe' or have 'IEExec.exe' as the OriginalFileName. Additionally, pay attention to any command line arguments that include 'https://' or 'http://', indicating a possible remote payload retrieval attempt. This combination of process creation involving IEExec.exe and remote payload retrieval attempts through HTTP or HTTPS protocols should be flagged for further investigation. Keep in mind that while this method is highly indicative of malicious activity, there may be cases where it detects legitimate use of network resources, though such instances are currently considered unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    lolbas:\n        - Image|endswith: '\\IEExec.exe'\n        - OriginalFileName: 'IEExec.exe'\n    remote:\n        CommandLine|contains:\n            - 'https://'\n            - 'http://'\n    condition: lolbas and remote\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    lolbas:\n        - Image|endswith: '\\IEExec.exe'\n        - OriginalFileName: 'IEExec.exe'\n    remote:\n        CommandLine|contains:\n            - 'https://'\n            - 'http://'\n    condition: lolbas and remote\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of the IEExec utility to download payloads",
      "answer": "In order to detect execution of the IEExec utility to download payloads, you should: Monitor the creation of processes on Windows systems for instances where the IEExec utility is used. Specifically, look for processes that end with the image name '\\IEExec.exe' or have 'IEExec.exe' as the OriginalFileName. Additionally, pay attention to any command line arguments that include 'https://' or 'http://', indicating a possible remote payload retrieval attempt. This combination of process creation involving IEExec.exe and remote payload retrieval attempts through HTTP or HTTPS protocols should be flagged for further investigation. Keep in mind that while this method is highly indicative of malicious activity, there may be cases where it detects legitimate use of network resources, though such instances are currently considered unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Advanced IP Scanner, a tool popular among ransomware groups, you should focus on monitoring Windows process creation logs for specific indicators. Look for processes that involve the Advanced IP Scanner application, which could be identified by several attributes. These include the image name containing '\\advanced_ip_scanner' which could also refer to 'advanced_ip_scanner_console.exe', the original file name containing 'advanced_ip_scanner', and any descriptions that include 'Advanced IP Scanner'. Additionally, pay attention to the command line arguments, specifically looking for instances where both '/portable' and '/lng' are present simultaneously, as this combination of parameters is suspect and potentially indicative of malicious use.\n\nIt\u2019s important to consider that there may be legitimate scenarios where system administrators or network technicians use Advanced IP Scanner for administrative purposes, so any detections should be analyzed carefully to determine if they are part of an authorized activity. The detection level for this behavior is set to medium, suggesting that while it's significant, it should be validated against the context of your environment to accurately assess the intent behind its usage. This comprehensive approach weighs various facets of process execution tied to Advanced IP Scanner, enhancing the likelihood of identifying malicious activities associated with ransomware operations targeting your network's vulnerabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\advanced_ip_scanner' # Covers also advanced_ip_scanner_console.exe\n        - OriginalFileName|contains: 'advanced_ip_scanner' # Covers also advanced_ip_scanner_console.exe\n        - Description|contains: 'Advanced IP Scanner'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/portable'\n            - '/lng'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\advanced_ip_scanner' # Covers also advanced_ip_scanner_console.exe\n        - OriginalFileName|contains: 'advanced_ip_scanner' # Covers also advanced_ip_scanner_console.exe\n        - Description|contains: 'Advanced IP Scanner'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/portable'\n            - '/lng'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium\n",
      "question": "use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.",
      "answer": "In order to detect the use of Advanced IP Scanner, a tool popular among ransomware groups, you should focus on monitoring Windows process creation logs for specific indicators. Look for processes that involve the Advanced IP Scanner application, which could be identified by several attributes. These include the image name containing '\\advanced_ip_scanner' which could also refer to 'advanced_ip_scanner_console.exe', the original file name containing 'advanced_ip_scanner', and any descriptions that include 'Advanced IP Scanner'. Additionally, pay attention to the command line arguments, specifically looking for instances where both '/portable' and '/lng' are present simultaneously, as this combination of parameters is suspect and potentially indicative of malicious use.\n\nIt\u2019s important to consider that there may be legitimate scenarios where system administrators or network technicians use Advanced IP Scanner for administrative purposes, so any detections should be analyzed carefully to determine if they are part of an authorized activity. The detection level for this behavior is set to medium, suggesting that while it's significant, it should be validated against the context of your environment to accurately assess the intent behind its usage. This comprehensive approach weighs various facets of process execution tied to Advanced IP Scanner, enhancing the likelihood of identifying malicious activities associated with ransomware operations targeting your network's vulnerabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution GMER tool based on image and hash fields..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution GMER tool based on image and hash fields, you should monitor Windows process creation logs for any activity that involves the execution of 'gmer.exe'. Pay particular attention to processes that have either of the specific hashes: MD5 hash as 'E9DC058440D321AA17D0600B3CA0AB04', SHA1 hash as '539C228B6B332F5AA523E5CE358C16647D8BBE57', or SHA256 hash as 'E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'. These criteria are meticulously chosen to pinpoint the tool's execution without capturing unrelated processes, making false positives unlikely. The delineation on process creation and specific hash values is of high importance for ensuring the security and integrity of the system by identifying possible unauthorized or suspicious use of GMER, which is a tool known for its capabilities in the analysis and detection of rootkits.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\gmer.exe'\n    selection_sysmon_hash:\n        Hashes|contains:\n            - 'MD5=E9DC058440D321AA17D0600B3CA0AB04'\n            - 'SHA1=539C228B6B332F5AA523E5CE358C16647D8BBE57'\n            - 'SHA256=E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'\n    selection_other:\n        - md5: 'e9dc058440d321aa17d0600b3ca0ab04'\n        - sha1: '539c228b6b332f5aa523e5ce358c16647d8bbe57'\n        - sha256: 'e8a3e804a96c716a3e9b69195db6ffb0d33e2433af871e4d4e1eab3097237173'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\gmer.exe'\n    selection_sysmon_hash:\n        Hashes|contains:\n            - 'MD5=E9DC058440D321AA17D0600B3CA0AB04'\n            - 'SHA1=539C228B6B332F5AA523E5CE358C16647D8BBE57'\n            - 'SHA256=E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'\n    selection_other:\n        - md5: 'e9dc058440d321aa17d0600b3ca0ab04'\n        - sha1: '539c228b6b332f5aa523e5ce358c16647d8bbe57'\n        - sha256: 'e8a3e804a96c716a3e9b69195db6ffb0d33e2433af871e4d4e1eab3097237173'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution GMER tool based on image and hash fields.",
      "answer": "In order to detect the execution GMER tool based on image and hash fields, you should monitor Windows process creation logs for any activity that involves the execution of 'gmer.exe'. Pay particular attention to processes that have either of the specific hashes: MD5 hash as 'E9DC058440D321AA17D0600B3CA0AB04', SHA1 hash as '539C228B6B332F5AA523E5CE358C16647D8BBE57', or SHA256 hash as 'E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'. These criteria are meticulously chosen to pinpoint the tool's execution without capturing unrelated processes, making false positives unlikely. The delineation on process creation and specific hash values is of high importance for ensuring the security and integrity of the system by identifying possible unauthorized or suspicious use of GMER, which is a tool known for its capabilities in the analysis and detection of rootkits."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs",
      "answer": "In order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user has potentially entered their password into the\nusername field, which will cause the password to be retained in log files.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user has potentially entered their password into the username field, which will cause the password to be retained in log files, you should monitor for failed login attempts in the Okta service. Specifically, look for log entries labeled with the event type 'core.user_auth.login_failed'. However, it is crucial to filter out entries that might falsely trigger the detection. This involves excluding entries where the 'actor_alternateid' appears to be a service account (typically starting with '0oa') or resembles a valid email address format. The rationale behind this exclusion is that Okta service account names and user names usually follow specific formatting rules, and legitimate account names are often structured like email addresses. Therefore, by excluding these patterns, the focus is narrowed down to anomalous entries that could indicate a user mistakenly inputting their password into the username field. \n\nBe mindful of potential false negatives, especially in scenarios where failed login attempts include input that looks like a valid email address in the password field. Despite these considerations, false positives are deemed unlikely. Given the potential security risk posed by passwords being stored in logs due to such input mistakes, the severity level for this detection scenario is classified as high.\n\nThis approach aligns with MITRE ATT&CK tactics and techniques, although they are not explicitly mentioned in the provided context, the underlying concern relates to credential access attempts and improper handling of credentials, which could inadvertently expose sensitive information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        legacyeventtype: 'core.user_auth.login_failed'\n    filter_main:\n        # Okta service account names start with 0oa\n        # Email addresses are the default format for Okta usernames, so attempt\n        # to exclude alternateIds that look like valid emails\n        # If your Okta configuration uses different character restrictions, you\n        # will need to update this regular expression to reflect that or disable the rule for your environment\n        # Possible false negatives are failed login attempts with a password that looks like a valid email address\n        actor_alternateid|re: '(^0oa.*|[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,10})'\n    condition: selection and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        legacyeventtype: 'core.user_auth.login_failed'\n    filter_main:\n        # Okta service account names start with 0oa\n        # Email addresses are the default format for Okta usernames, so attempt\n        # to exclude alternateIds that look like valid emails\n        # If your Okta configuration uses different character restrictions, you\n        # will need to update this regular expression to reflect that or disable the rule for your environment\n        # Possible false negatives are failed login attempts with a password that looks like a valid email address\n        actor_alternateid|re: '(^0oa.*|[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,10})'\n    condition: selection and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "user has potentially entered their password into the\nusername field, which will cause the password to be retained in log files.\n",
      "answer": "In order to detect when a user has potentially entered their password into the username field, which will cause the password to be retained in log files, you should monitor for failed login attempts in the Okta service. Specifically, look for log entries labeled with the event type 'core.user_auth.login_failed'. However, it is crucial to filter out entries that might falsely trigger the detection. This involves excluding entries where the 'actor_alternateid' appears to be a service account (typically starting with '0oa') or resembles a valid email address format. The rationale behind this exclusion is that Okta service account names and user names usually follow specific formatting rules, and legitimate account names are often structured like email addresses. Therefore, by excluding these patterns, the focus is narrowed down to anomalous entries that could indicate a user mistakenly inputting their password into the username field. \n\nBe mindful of potential false negatives, especially in scenarios where failed login attempts include input that looks like a valid email address in the password field. Despite these considerations, false positives are deemed unlikely. Given the potential security risk posed by passwords being stored in logs due to such input mistakes, the severity level for this detection scenario is classified as high.\n\nThis approach aligns with MITRE ATT&CK tactics and techniques, although they are not explicitly mentioned in the provided context, the underlying concern relates to credential access attempts and improper handling of credentials, which could inadvertently expose sensitive information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible malicious execution of JXA in-memory via OSAScript.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible malicious execution of JXA in-memory via OSAScript, you should: Monitor process creation logs on macOS devices for specific command line patterns that indicate an in-memory execution attempt using OSAScript. Specifically, look for process executions involving the 'osascript' command along with the '-e' argument followed by strings 'eval' and 'NSData.dataWithContentsOfURL'. Additionally, be attentive to command lines indicating the use of '-l JavaScript' or the presence of '.js' files, as these could signify the execution or involvement of JavaScript code, potentially for malicious purposes. Any processes matching these patterns should be scrutinized. The detection of such activities requires vigilance due to the high threat level, although be aware of potential unknown false positives. This strategy revolves around intercepting and analyzing commands that might be exploiting JavaScript for Automation (JXA) to execute malicious scripts or commands in memory, which is a sophisticated technique often used by attackers to evade detection mechanisms on macOS systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection_main:\n        CommandLine|contains|all:\n            - 'osascript'\n            - ' -e '\n            - 'eval'\n            - 'NSData.dataWithContentsOfURL'\n    selection_js:\n        - CommandLine|contains|all:\n            - ' -l '\n            - 'JavaScript'\n        - CommandLine|contains: '.js'\n    condition: all of selection_*\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection_main:\n        CommandLine|contains|all:\n            - 'osascript'\n            - ' -e '\n            - 'eval'\n            - 'NSData.dataWithContentsOfURL'\n    selection_js:\n        - CommandLine|contains|all:\n            - ' -l '\n            - 'JavaScript'\n        - CommandLine|contains: '.js'\n    condition: all of selection_*\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible malicious execution of JXA in-memory via OSAScript",
      "answer": "In order to detect possible malicious execution of JXA in-memory via OSAScript, you should: Monitor process creation logs on macOS devices for specific command line patterns that indicate an in-memory execution attempt using OSAScript. Specifically, look for process executions involving the 'osascript' command along with the '-e' argument followed by strings 'eval' and 'NSData.dataWithContentsOfURL'. Additionally, be attentive to command lines indicating the use of '-l JavaScript' or the presence of '.js' files, as these could signify the execution or involvement of JavaScript code, potentially for malicious purposes. Any processes matching these patterns should be scrutinized. The detection of such activities requires vigilance due to the high threat level, although be aware of potential unknown false positives. This strategy revolves around intercepting and analyzing commands that might be exploiting JavaScript for Automation (JXA) to execute malicious scripts or commands in memory, which is a sophisticated technique often used by attackers to evade detection mechanisms on macOS systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attacker executing an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver, you should monitor for the creation of processes on Windows systems, specifically looking for instances where the process name ends with '\\rundll32.exe' or the original file name is 'RUNDLL32.EXE'. Additionally, scrutinize the command line arguments for the presence of 'InstallScreenSaver', as this indicates the execution of a command to install a screensaver, potentially disguising malicious activity. It's important to note that while this behavior can be indicative of suspicious activities associated with using rundll32.exe for execution of unexpected or malicious applications, there can be legitimate cases where a new screensaver is being installed. This scenario is classified with a medium level of alert due to the potential for false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'InstallScreenSaver'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate installation of a new screensaver\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'InstallScreenSaver'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate installation of a new screensaver\nlevel: medium\n",
      "question": "An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver",
      "answer": "In order to detect an attacker executing an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver, you should monitor for the creation of processes on Windows systems, specifically looking for instances where the process name ends with '\\rundll32.exe' or the original file name is 'RUNDLL32.EXE'. Additionally, scrutinize the command line arguments for the presence of 'InstallScreenSaver', as this indicates the execution of a command to install a screensaver, potentially disguising malicious activity. It's important to note that while this behavior can be indicative of suspicious activities associated with using rundll32.exe for execution of unexpected or malicious applications, there can be legitimate cases where a new screensaver is being installed. This scenario is classified with a medium level of alert due to the potential for false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious curl process start on linux with set useragent options.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious curl process start on linux with set useragent options, you should: Look for instances where a process creation event occurs within a Linux environment, and this event specifically involves the initiation of the 'curl' command. The focus should be on detecting when the 'curl' command line includes options that modify its user-agent string, which are typically denoted by ' -A ' or '--user-agent '. These indicators suggest that the curl command is being used in a way that attempts to disguise its nature or origin, which can be a sign of malicious activity. However, it's important to consider that some legitimate scripts created by developers and system administrators may also use these options for valid purposes. As such, these instances might be flagged as false positives. The significance of detecting these activities is considered of medium level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/curl'\n        CommandLine|contains:\n            - ' -A '\n            - ' --user-agent '\n    condition: selection\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/curl'\n        CommandLine|contains:\n            - ' -A '\n            - ' --user-agent '\n    condition: selection\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: medium\n",
      "question": "suspicious curl process start on linux with set useragent options",
      "answer": "In order to detect a suspicious curl process start on linux with set useragent options, you should: Look for instances where a process creation event occurs within a Linux environment, and this event specifically involves the initiation of the 'curl' command. The focus should be on detecting when the 'curl' command line includes options that modify its user-agent string, which are typically denoted by ' -A ' or '--user-agent '. These indicators suggest that the curl command is being used in a way that attempts to disguise its nature or origin, which can be a sign of malicious activity. However, it's important to consider that some legitimate scripts created by developers and system administrators may also use these options for valid purposes. As such, these instances might be flagged as false positives. The significance of detecting these activities is considered of medium level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to list credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe, you should: Monitor the creation of processes on Windows systems, focusing on the execution of the `vaultcmd.exe` utility. Specifically, look for processes where the image name ends with `\\VaultCmd.exe` or has an original file name of `VAULTCMD.EXE`. Additionally, pay attention to the command line parameters used with these processes, especially for the use of `/listcreds:` argument, which is utilized to list credentials. These activities are indicative of attempts to access or manipulate the Windows Credential Manager, which aligns with techniques for credential access. The level of concern for these activities is considered medium, though be aware that some legitimate actions may trigger this detection, though such instances are currently unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VaultCmd.exe'\n        - OriginalFileName: 'VAULTCMD.EXE'\n    selection_cli:\n        CommandLine|contains: '/listcreds:'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VaultCmd.exe'\n        - OriginalFileName: 'VAULTCMD.EXE'\n    selection_cli:\n        CommandLine|contains: '/listcreds:'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe",
      "answer": "In order to list credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe, you should: Monitor the creation of processes on Windows systems, focusing on the execution of the `vaultcmd.exe` utility. Specifically, look for processes where the image name ends with `\\VaultCmd.exe` or has an original file name of `VAULTCMD.EXE`. Additionally, pay attention to the command line parameters used with these processes, especially for the use of `/listcreds:` argument, which is utilized to list credentials. These activities are indicative of attempts to access or manipulate the Windows Credential Manager, which aligns with techniques for credential access. The level of concern for these activities is considered medium, though be aware that some legitimate actions may trigger this detection, though such instances are currently unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new service using the \"sc.exe\" utility..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a new service using the \"sc.exe\" utility, you should: Monitor the process creation logs on Windows systems for any instances where the executable path ends with '\\sc.exe', and the command line includes both 'create' and 'binPath'. This activity might indicate an attempt to establish persistence or manage services in a malicious manner, as \"sc.exe\" is a legitimate Windows command-line tool used for managing Windows services, including creating new ones. However, be aware that there might be false positives, such as when a legitimate administrator or user creates a service for a valid reason or during software installation. Given these considerations, the detection sensitivity is set to low to minimize the chance of flagging legitimate activities as suspicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low\n",
      "question": "creation of a new service using the \"sc.exe\" utility.",
      "answer": "In order to detect the creation of a new service using the \"sc.exe\" utility, you should: Monitor the process creation logs on Windows systems for any instances where the executable path ends with '\\sc.exe', and the command line includes both 'create' and 'binPath'. This activity might indicate an attempt to establish persistence or manage services in a malicious manner, as \"sc.exe\" is a legitimate Windows command-line tool used for managing Windows services, including creating new ones. However, be aware that there might be false positives, such as when a legitimate administrator or user creates a service for a valid reason or during software installation. Given these considerations, the detection sensitivity is set to low to minimize the chance of flagging legitimate activities as suspicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting embeding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect embedding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for the use of the 'steghide' binary, specifically focusing on the auditd logs. Be on the lookout for the execution of 'steghide' with the arguments 'embed', '-cf', and '-ef'. These arguments indicate an attempt to embed hidden information within files. The 'execve' type in the logs is crucial, as it signifies an execution request for the steghide command. The '-cf' option specifies the cover file that will contain the hidden data, while '-ef' denotes the embedded file that carries the data to be hidden. It's important to understand that, despite the low level of initial suspicion attributed to these actions (as they could theoretically be used in benign scenarios), their detection plays a critical role in uncovering efforts by adversaries to transfer or conceal sensitive information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: steghide\n        a1: embed\n        a2:\n            - '-cf'\n            - '-ef'\n        a4:\n            - '-cf'\n            - '-ef'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: steghide\n        a1: embed\n        a2:\n            - '-cf'\n            - '-ef'\n        a4:\n            - '-cf'\n            - '-ef'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "embeding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information.",
      "answer": "In order to detect embedding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for the use of the 'steghide' binary, specifically focusing on the auditd logs. Be on the lookout for the execution of 'steghide' with the arguments 'embed', '-cf', and '-ef'. These arguments indicate an attempt to embed hidden information within files. The 'execve' type in the logs is crucial, as it signifies an execution request for the steghide command. The '-cf' option specifies the cover file that will contain the hidden data, while '-ef' denotes the embedded file that carries the data to be hidden. It's important to understand that, despite the low level of initial suspicion attributed to these actions (as they could theoretically be used in benign scenarios), their detection plays a critical role in uncovering efforts by adversaries to transfer or conceal sensitive information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious scheduled task creations from a parent stored in a temporary folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious scheduled task creations from a parent stored in a temporary folder, you should: Monitor Windows process creation logs for instances where the process image ends with '\\schtasks.exe' indicating the use of the scheduled task utility, in combination with the command line containing '/Create ' signifying a request to create a new task. Further scrutiny is required when the parent process of this activity originates from temporary directories such as '\\AppData\\Local\\', '\\AppData\\Roaming\\', '\\Temporary Internet Files\\', or the '\\Users\\Public\\' folder. However, it's crucial to exclude detections where the command line involves 'update_task.xml' or 'unattended.ini' as these may indicate legitimate software installation activities that also deploy scheduled tasks. This approach balances sensitivity and specificity by focusing on typical temporary directories used in malicious activities while acknowledging possible legitimate uses. The overall threat level for these detections is considered medium, taking into account the commonality of such behavior in both benign and malicious contexts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: '/Create '\n        ParentImage|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Temporary Internet'\n            - '\\Users\\Public\\'\n    filter:\n        CommandLine|contains:\n            - 'update_task.xml'\n            - 'unattended.ini'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Software installers that run from temporary folders and also install scheduled tasks\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: '/Create '\n        ParentImage|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Temporary Internet'\n            - '\\Users\\Public\\'\n    filter:\n        CommandLine|contains:\n            - 'update_task.xml'\n            - 'unattended.ini'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Software installers that run from temporary folders and also install scheduled tasks\nlevel: medium\n",
      "question": "suspicious scheduled task creations from a parent stored in a temporary folder",
      "answer": "In order to detect suspicious scheduled task creations from a parent stored in a temporary folder, you should: Monitor Windows process creation logs for instances where the process image ends with '\\schtasks.exe' indicating the use of the scheduled task utility, in combination with the command line containing '/Create ' signifying a request to create a new task. Further scrutiny is required when the parent process of this activity originates from temporary directories such as '\\AppData\\Local\\', '\\AppData\\Roaming\\', '\\Temporary Internet Files\\', or the '\\Users\\Public\\' folder. However, it's crucial to exclude detections where the command line involves 'update_task.xml' or 'unattended.ini' as these may indicate legitimate software installation activities that also deploy scheduled tasks. This approach balances sensitivity and specificity by focusing on typical temporary directories used in malicious activities while acknowledging possible legitimate uses. The overall threat level for these detections is considered medium, taking into account the commonality of such behavior in both benign and malicious contexts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675 ..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675, you should focus on monitoring antivirus logs specifically for files created or modified in the `C:\\Windows\\System32\\spool\\drivers\\x64\\` directory. This path is critical because it's commonly exploited by attackers aiming to leverage the Print Spooler vulnerabilities to execute malicious code remotely on a Windows system. \n\nIt's crucial to watch for any activity involving the creation or modification of files in this directory without immediately flagging files that have been submitted to Symantec for analysis (identified by mentions such as \"File submitted to Symantec\"), as these might still be under investigation and could result in false positives. Nonetheless, since these false positives are considered unlikely or are pending further analysis by a Protection Service for Platforms (PSP), any hit outside of this context should be taken with utmost seriousness.\n\nFor effective detection, ensure to log and scrutinize the signature of the detected file, its filename, and the computer name which reported the activity. By concentrating on these details, you can identify and respond to potential exploitation of these vulnerabilities more swiftly. Given the critical nature of these vulnerabilities and the method of attack, this detection mechanism is paramount in defending against unauthorized remote code execution that capitalizes on the Windows Print Spooler vulnerabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        Filename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\'\n    keywords:\n        - 'File submitted to Symantec' # symantec fp, pending analysis, more generic\n    condition: selection and not keywords\nfields:\n    - Signature\n    - Filename\n    - ComputerName\nfalsepositives:\n    - Unlikely, or pending PSP analysis\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: antivirus\ndetection:\n    selection:\n        Filename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\'\n    keywords:\n        - 'File submitted to Symantec' # symantec fp, pending analysis, more generic\n    condition: selection and not keywords\nfields:\n    - Signature\n    - Filename\n    - ComputerName\nfalsepositives:\n    - Unlikely, or pending PSP analysis\nlevel: critical\n",
      "question": "suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675 .",
      "answer": "In order to detect the suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675, you should focus on monitoring antivirus logs specifically for files created or modified in the `C:\\Windows\\System32\\spool\\drivers\\x64\\` directory. This path is critical because it's commonly exploited by attackers aiming to leverage the Print Spooler vulnerabilities to execute malicious code remotely on a Windows system. \n\nIt's crucial to watch for any activity involving the creation or modification of files in this directory without immediately flagging files that have been submitted to Symantec for analysis (identified by mentions such as \"File submitted to Symantec\"), as these might still be under investigation and could result in false positives. Nonetheless, since these false positives are considered unlikely or are pending further analysis by a Protection Service for Platforms (PSP), any hit outside of this context should be taken with utmost seriousness.\n\nFor effective detection, ensure to log and scrutinize the signature of the detected file, its filename, and the computer name which reported the activity. By concentrating on these details, you can identify and respond to potential exploitation of these vulnerabilities more swiftly. Given the critical nature of these vulnerabilities and the method of attack, this detection mechanism is paramount in defending against unauthorized remote code execution that capitalizes on the Windows Print Spooler vulnerabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Keyvault Key is modified or deleted in Azure..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a Keyvault Key is modified or deleted in Azure, you should monitor Azure Activity Logs for operations related to the creation, updating, importing, recovering, restoring, deleting, backing up, and purging of Keys in the Microsoft Keyvault service. Specifically, look for any activity logged with operation names such as MICROSOFT.KEYVAULT/VAULTS/KEYS/UPDATE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE, MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/IMPORT/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/RECOVER/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/RESTORE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/DELETE, MICROSOFT.KEYVAULT/VAULTS/KEYS/BACKUP/ACTION, and MICROSOFT.KEYVAULT/VAULTS/KEYS/PURGE/ACTION. These activities are significant indicators that a Keyvault Key is being tampered with which might include rightful updates or possibly malicious deletions or modifications.\n\nThere are some instances where modifications or deletions of keys might generate alerts but are part of normal administrative duties. Therefore, it's important to verify whether the changes were made by system administrators or known users who have legitimate reasons to perform these actions. Look into the user identity, user agent, and the hostname that initiated the change to determine its legitimacy. Activities carried out by unfamiliar users should be scrutinized, and if any known behavior is consistently raising false alarms, it may be considered for exemption to refine the alerting mechanism. Monitoring for these specific operations on Azure Keyvault keys is crucial for maintaining the integrity and security of key management within an organization's Azure environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/UPDATE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/IMPORT/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/RECOVER/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/RESTORE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/DELETE\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/BACKUP/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/PURGE/ACTION\n    condition: selection\nfalsepositives:\n    - Key being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Key modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/UPDATE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/IMPORT/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/RECOVER/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/RESTORE/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/DELETE\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/BACKUP/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/KEYS/PURGE/ACTION\n    condition: selection\nfalsepositives:\n    - Key being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Key modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Keyvault Key is modified or deleted in Azure.",
      "answer": "In order to identify when a Keyvault Key is modified or deleted in Azure, you should monitor Azure Activity Logs for operations related to the creation, updating, importing, recovering, restoring, deleting, backing up, and purging of Keys in the Microsoft Keyvault service. Specifically, look for any activity logged with operation names such as MICROSOFT.KEYVAULT/VAULTS/KEYS/UPDATE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE, MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/IMPORT/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/RECOVER/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/RESTORE/ACTION, MICROSOFT.KEYVAULT/VAULTS/KEYS/DELETE, MICROSOFT.KEYVAULT/VAULTS/KEYS/BACKUP/ACTION, and MICROSOFT.KEYVAULT/VAULTS/KEYS/PURGE/ACTION. These activities are significant indicators that a Keyvault Key is being tampered with which might include rightful updates or possibly malicious deletions or modifications.\n\nThere are some instances where modifications or deletions of keys might generate alerts but are part of normal administrative duties. Therefore, it's important to verify whether the changes were made by system administrators or known users who have legitimate reasons to perform these actions. Look into the user identity, user agent, and the hostname that initiated the change to determine its legitimacy. Activities carried out by unfamiliar users should be scrutinized, and if any known behavior is consistently raising false alarms, it may be considered for exemption to refine the alerting mechanism. Monitoring for these specific operations on Azure Keyvault keys is crucial for maintaining the integrity and security of key management within an organization's Azure environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel, you should:\n\nMonitor the Windows registry for any SetValue events that target the \"Enabled\" keys within the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\' path. Specifically, you are looking for changes that set these keys to 'DWORD (0x00000000)', which effectively disables logging for that event channel. \n\nHowever, there are several conditions under which this activity may not indicate a malicious attempt to disable Windows logging. One such condition is when the modification comes from the 'wevtutil.exe' tool found in the '\\Windows\\system32\\' directory, as this is a standard tool used for event log configuration, including during legitimate installations of manifests. Similarly, modifications originating from 'TiWorker.exe' located in the 'C:\\Windows\\winsxs\\' directory, or from 'TrustedInstaller.exe' in the 'C:\\Windows\\servicing\\' directory, should also be considered with caution since these are associated with legitimate system updates and installations.\n\nFurther exceptions should be made for changes initiated by 'svchost.exe' in 'C:\\Windows\\System32\\' when the target objects include specific channels related to the FileInfoMinifilter, ASN1, Kernel-AppCompat, Runtime Error, or CAPI2 event logs. This is because such changes can be part of normal system operations or updates, especially when they involve system components or security features.\n\nUnfortunately, there are filters related to potential errors, identified as 'filter_optional_empty' and 'filter_optional_null', which currently do not specify any criteria and are placeholders for future adjustments. \n\nIt is noteworthy that while the overall intention is to capture and alert on unauthorized disablement of logging, legitimate administrative actions undertaken for troubleshooting or system configuration purposes may occasionally trigger alerts, resulting in rare false positives.\n\nThe severity level for this detection mechanism is classified as high due to the significant security implications of successfully tampering with event logging, which could undermine the integrity of audit logs and hinder the detection of malicious activities. This detection strategy is aligned with mitigating tactics against evasion techniques that aim to disable or interfere with event logging, as cataloged in the MITRE ATT&CK framework under Indicator Blocking and Defense Evasion tactics.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\'\n        TargetObject|endswith: '\\Enabled'\n        Details: 'DWORD (0x00000000)'\n    filter_main_wevutil:\n        Image|endswith: '\\Windows\\system32\\wevtutil.exe' # FP generated during installation of manifests via wevtutil\n    filter_main_iis:\n        Image|startswith: 'C:\\Windows\\winsxs\\'\n        Image|endswith: '\\TiWorker.exe'  # Many different TargetObjects\n    filter_main_svchost:\n        Image: 'C:\\Windows\\System32\\svchost.exe'\n        TargetObject|contains:\n            - '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-FileInfoMinifilter'\n            - '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-ASN1\\'\n            - '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Kernel-AppCompat\\'\n            - '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Runtime\\Error\\'\n            - '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-CAPI2/Operational\\'\n    filter_main_trusted_installer:\n        Image: C:\\Windows\\servicing\\TrustedInstaller.exe\n        TargetObject|contains: '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Compat-Appraiser'\n    filter_optional_empty: # This filter is related to aurora. Should be removed when fix is deployed. # TODO: Remove later\n        Image: ''\n    filter_optional_null: # This filter is related to aurora. Should be removed when fix is deployed. # TODO: Remove later\n        Image: null\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Rare falsepositives may occur from legitimate administrators disabling specific event log for troubleshooting\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\'\n        TargetObject|endswith: '\\Enabled'\n        Details: 'DWORD (0x00000000)'\n    filter_main_wevutil:\n        Image|endswith: '\\Windows\\system32\\wevtutil.exe' # FP generated during installation of manifests via wevtutil\n    filter_main_iis:\n        Image|startswith: 'C:\\Windows\\winsxs\\'\n        Image|endswith: '\\TiWorker.exe'  # Many different TargetObjects\n    filter_main_svchost:\n        Image: 'C:\\Windows\\System32\\svchost.exe'\n        TargetObject|contains:\n            - '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-FileInfoMinifilter'\n            - '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-ASN1\\'\n            - '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Kernel-AppCompat\\'\n            - '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Runtime\\Error\\'\n            - '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-CAPI2/Operational\\'\n    filter_main_trusted_installer:\n        Image: C:\\Windows\\servicing\\TrustedInstaller.exe\n        TargetObject|contains: '\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Compat-Appraiser'\n    filter_optional_empty: # This filter is related to aurora. Should be removed when fix is deployed. # TODO: Remove later\n        Image: ''\n    filter_optional_null: # This filter is related to aurora. Should be removed when fix is deployed. # TODO: Remove later\n        Image: null\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Rare falsepositives may occur from legitimate administrators disabling specific event log for troubleshooting\nlevel: high\n",
      "question": "tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel",
      "answer": "In order to detect tampering with the \"Enabled\" registry key in order to disable Windows logging of a Windows event channel, you should:\n\nMonitor the Windows registry for any SetValue events that target the \"Enabled\" keys within the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\' path. Specifically, you are looking for changes that set these keys to 'DWORD (0x00000000)', which effectively disables logging for that event channel. \n\nHowever, there are several conditions under which this activity may not indicate a malicious attempt to disable Windows logging. One such condition is when the modification comes from the 'wevtutil.exe' tool found in the '\\Windows\\system32\\' directory, as this is a standard tool used for event log configuration, including during legitimate installations of manifests. Similarly, modifications originating from 'TiWorker.exe' located in the 'C:\\Windows\\winsxs\\' directory, or from 'TrustedInstaller.exe' in the 'C:\\Windows\\servicing\\' directory, should also be considered with caution since these are associated with legitimate system updates and installations.\n\nFurther exceptions should be made for changes initiated by 'svchost.exe' in 'C:\\Windows\\System32\\' when the target objects include specific channels related to the FileInfoMinifilter, ASN1, Kernel-AppCompat, Runtime Error, or CAPI2 event logs. This is because such changes can be part of normal system operations or updates, especially when they involve system components or security features.\n\nUnfortunately, there are filters related to potential errors, identified as 'filter_optional_empty' and 'filter_optional_null', which currently do not specify any criteria and are placeholders for future adjustments. \n\nIt is noteworthy that while the overall intention is to capture and alert on unauthorized disablement of logging, legitimate administrative actions undertaken for troubleshooting or system configuration purposes may occasionally trigger alerts, resulting in rare false positives.\n\nThe severity level for this detection mechanism is classified as high due to the significant security implications of successfully tampering with event logging, which could undermine the integrity of audit logs and hinder the detection of malicious activities. This detection strategy is aligned with mitigating tactics against evasion techniques that aim to disable or interfere with event logging, as cataloged in the MITRE ATT&CK framework under Indicator Blocking and Defense Evasion tactics."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report, you should: Monitor the creation of processes on Windows systems, paying special attention to command lines that follow a very specific pattern. This pattern consists of two critical arguments passed to an executable: the first is a 64-character hexadecimal string, representing a SHA-256 hashed wide character string. This argument is significant as it is rarely used in common applications and can be a strong indicator of malicious activity. The second argument, also hexadecimal, must be at least 16 characters long, indicating the minimum required length for an AES initialization vector (IV). This specific sequence of arguments, when observed, points to the installation routine of the SNAKE malware, leveraging these cryptographic elements for its execution. The rarity of such command line patterns in benign applications coupled with the high level of specificity associated with this malware's installation method makes the likelihood of false positives low. Monitoring for and identifying these command line arguments can significantly contribute to thwarting attempts of SNAKE malware installation on Windows systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # This CLI regex is based on the following description from the report:\n        #   The jpsetup.exe installer requires two arguments to be passed via the command line for execution\n        #   The first argument is a wide character string hashed with SHA-256 twice -> We assume that the first argument is of length SHA256\n        #   The AES initialization vector (IV) consists of the first 16 bytes of the second argument to jpsetup.exe -> We assume that the second argument is of at least 16 bytes (16 characters)\n        CommandLine|re: '\\s[a-fA-F0-9]{64}\\s[a-fA-F0-9]{16}'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # This CLI regex is based on the following description from the report:\n        #   The jpsetup.exe installer requires two arguments to be passed via the command line for execution\n        #   The first argument is a wide character string hashed with SHA-256 twice -> We assume that the first argument is of length SHA256\n        #   The AES initialization vector (IV) consists of the first 16 bytes of the second argument to jpsetup.exe -> We assume that the second argument is of at least 16 bytes (16 characters)\n        CommandLine|re: '\\s[a-fA-F0-9]{64}\\s[a-fA-F0-9]{16}'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report",
      "answer": "In order to detect a specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report, you should: Monitor the creation of processes on Windows systems, paying special attention to command lines that follow a very specific pattern. This pattern consists of two critical arguments passed to an executable: the first is a 64-character hexadecimal string, representing a SHA-256 hashed wide character string. This argument is significant as it is rarely used in common applications and can be a strong indicator of malicious activity. The second argument, also hexadecimal, must be at least 16 characters long, indicating the minimum required length for an AES initialization vector (IV). This specific sequence of arguments, when observed, points to the installation routine of the SNAKE malware, leveraging these cryptographic elements for its execution. The rarity of such command line patterns in benign applications coupled with the high level of specificity associated with this malware's installation method makes the likelihood of false positives low. Monitoring for and identifying these command line arguments can significantly contribute to thwarting attempts of SNAKE malware installation on Windows systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may search for common password storage locations to obtain user credentials.\nPasswords are stored in several places on a system, depending on the operating system or application holding the credentials.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries searching for common password storage locations to obtain user credentials, you should monitor PowerShell scripts for specific indicators of this malicious activity. Since passwords can be stored in various places depending on the system or application, attackers might use PowerShell to access these secure locations. \n\nFirstly, focus on scripts that attempt to use the functions 'Get-PasswordVaultCredentials' or 'Get-CredManCreds'. These are indicative of attempts to access credentials stored within Windows Credential Manager or the Password Vault.\n\nAdditionally, watch for scripts that involve the creation of new objects related to the Windows.Security.Credentials.PasswordVault or the use of 'Microsoft.CSharp.CSharpCodeProvider'. This could represent an attempt to manipulate or access the Password Vault or Credential Manager programmatically. Specifically, the combination of creating new objects, using 'System.Runtime.InteropServices.RuntimeEnvironment' to get runtime directories, and referring to 'Collections.ArrayList' and 'System.CodeDom.Compiler.CompilerParameters' are red flags for attempts to interact with stored credentials in an unconventional or malicious manner.\n\nThis monitoring is applicable to environments where PowerShell script logging (Script Block Logging) is enabled, as it requires visibility into the execution of PowerShell commands and scripts. The activity described could lead to credential theft if not detected and mitigated, posing a significant security threat. Tags associated with this behavior include Credential Access, indicating attempts to gain access to credential storage locations or mechanisms on the Windows operating system.\n\nBe cautious of false positives, as the specific usage of these commands or objects might be part of legitimate scripts or administrative activities. Therefore, it is necessary to investigate the context in which these indicators appear to differentiate between malicious activities and benign use cases.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_kiddie:\n        ScriptBlockText|contains:\n            - 'Get-PasswordVaultCredentials'\n            - 'Get-CredManCreds'\n    selection_rename_Password:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'Windows.Security.Credentials.PasswordVault'\n    selection_rename_credman:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'Microsoft.CSharp.CSharpCodeProvider'\n            - '[System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())'\n            - 'Collections.ArrayList'\n            - 'System.CodeDom.Compiler.CompilerParameters'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_kiddie:\n        ScriptBlockText|contains:\n            - 'Get-PasswordVaultCredentials'\n            - 'Get-CredManCreds'\n    selection_rename_Password:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'Windows.Security.Credentials.PasswordVault'\n    selection_rename_credman:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'Microsoft.CSharp.CSharpCodeProvider'\n            - '[System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())'\n            - 'Collections.ArrayList'\n            - 'System.CodeDom.Compiler.CompilerParameters'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may search for common password storage locations to obtain user credentials.\nPasswords are stored in several places on a system, depending on the operating system or application holding the credentials.\n",
      "answer": "In order to detect adversaries searching for common password storage locations to obtain user credentials, you should monitor PowerShell scripts for specific indicators of this malicious activity. Since passwords can be stored in various places depending on the system or application, attackers might use PowerShell to access these secure locations. \n\nFirstly, focus on scripts that attempt to use the functions 'Get-PasswordVaultCredentials' or 'Get-CredManCreds'. These are indicative of attempts to access credentials stored within Windows Credential Manager or the Password Vault.\n\nAdditionally, watch for scripts that involve the creation of new objects related to the Windows.Security.Credentials.PasswordVault or the use of 'Microsoft.CSharp.CSharpCodeProvider'. This could represent an attempt to manipulate or access the Password Vault or Credential Manager programmatically. Specifically, the combination of creating new objects, using 'System.Runtime.InteropServices.RuntimeEnvironment' to get runtime directories, and referring to 'Collections.ArrayList' and 'System.CodeDom.Compiler.CompilerParameters' are red flags for attempts to interact with stored credentials in an unconventional or malicious manner.\n\nThis monitoring is applicable to environments where PowerShell script logging (Script Block Logging) is enabled, as it requires visibility into the execution of PowerShell commands and scripts. The activity described could lead to credential theft if not detected and mitigated, posing a significant security threat. Tags associated with this behavior include Credential Access, indicating attempts to gain access to credential storage locations or mechanisms on the Windows operating system.\n\nBe cautious of false positives, as the specific usage of these commands or objects might be part of legitimate scripts or administrative activities. Therefore, it is necessary to investigate the context in which these indicators appear to differentiate between malicious activities and benign use cases."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting CVE-2019-11510 exploitation attempt - URI contains Guacamole.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect CVE-2019-11510 exploitation attempt - URI contains Guacamole, you should: Check web server logs for any requests that contain the specific Uniform Resource Identifier (URI) pattern '?/dana/html5acc/guacamole/'. This detection focuses on spotting attempts to exploit a vulnerability associated with accessing Guacamole through a crafted URI. To efficiently detect such attempts, it is important to monitor fields like the IP address of the client making the request, the server's virtual host, the full URL of the request, and the server's response to the request. This activity is considered critical and, while false positives are deemed unknown, it's important to be diligent in monitoring and investigating any hits due to the severity associated with CVE-2019-11510.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query: '*?/dana/html5acc/guacamole/*'\n    condition: selection\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query: '*?/dana/html5acc/guacamole/*'\n    condition: selection\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "CVE-2019-11510 exploitation attempt - URI contains Guacamole",
      "answer": "In order to detect CVE-2019-11510 exploitation attempt - URI contains Guacamole, you should: Check web server logs for any requests that contain the specific Uniform Resource Identifier (URI) pattern '?/dana/html5acc/guacamole/'. This detection focuses on spotting attempts to exploit a vulnerability associated with accessing Guacamole through a crafted URI. To efficiently detect such attempts, it is important to monitor fields like the IP address of the client making the request, the server's virtual host, the full URL of the request, and the server's response to the request. This activity is considered critical and, while false positives are deemed unknown, it's important to be diligent in monitoring and investigating any hits due to the severity associated with CVE-2019-11510."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible Java payloads in web access logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible Java payloads in web access logs, you should: Monitor web access log files for specific patterns and keywords that often indicate malicious activity. Focus on the detection of encoded or plain text strings commonly associated with Java-based exploitation, such as variations of `${(#a=@`, `${@java`, and `getRuntime().exec(`. These strings suggest an attempt to execute Java code or shell commands through the web application, potentially endangering the server's security. Watch for these patterns both in URL-encoded form (like `%24%7B%28%23a%3D%40` and `%24%7B%40java`) and in their decoded forms. Additionally, look out for other suspicious substrings such as `new java.` or `/${#`, which further hint at unauthorized command execution or injection attempts. \n\nBear in mind that some legitimate applications might use similar patterns for non-malicious purposes, so it's vital to analyze detected instances carefully to differentiate between genuine and deceptive use cases. The security level associated with these findings is considered high due to the potential for attackers to leverage Java payloads to execute arbitrary code, gain unauthorized access, or perform other malicious actions on the webserver.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    keywords:\n        - '%24%7B%28%23a%3D%40'\n        - '${(#a=@'\n        - '%24%7B%40java'\n        - '${@java'\n        - 'u0022java'\n        - '%2F%24%7B%23'\n        - '/${#'\n        - 'new+java.'\n        - 'getRuntime().exec('\n        - 'getRuntime%28%29.exec%28'\n    condition: keywords\nfalsepositives:\n    - Legitimate apps\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    keywords:\n        - '%24%7B%28%23a%3D%40'\n        - '${(#a=@'\n        - '%24%7B%40java'\n        - '${@java'\n        - 'u0022java'\n        - '%2F%24%7B%23'\n        - '/${#'\n        - 'new+java.'\n        - 'getRuntime().exec('\n        - 'getRuntime%28%29.exec%28'\n    condition: keywords\nfalsepositives:\n    - Legitimate apps\nlevel: high\n",
      "question": "possible Java payloads in web access logs",
      "answer": "In order to detect possible Java payloads in web access logs, you should: Monitor web access log files for specific patterns and keywords that often indicate malicious activity. Focus on the detection of encoded or plain text strings commonly associated with Java-based exploitation, such as variations of `${(#a=@`, `${@java`, and `getRuntime().exec(`. These strings suggest an attempt to execute Java code or shell commands through the web application, potentially endangering the server's security. Watch for these patterns both in URL-encoded form (like `%24%7B%28%23a%3D%40` and `%24%7B%40java`) and in their decoded forms. Additionally, look out for other suspicious substrings such as `new java.` or `/${#`, which further hint at unauthorized command execution or injection attempts. \n\nBear in mind that some legitimate applications might use similar patterns for non-malicious purposes, so it's vital to analyze detected instances carefully to differentiate between genuine and deceptive use cases. The security level associated with these findings is considered high due to the potential for attackers to leverage Java payloads to execute arbitrary code, gain unauthorized access, or perform other malicious actions on the webserver."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting system changes made by Blue Mockingbird.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|endswith: '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|endswith: '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "system changes made by Blue Mockingbird",
      "answer": "In order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting signs of potential use of the WSMAN provider from uncommon processes locally and remote execution..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect signs of potential use of the WSMAN provider from uncommon processes locally and remote execution, you should monitor for specific image load activities in Windows environments. Look for events where certain DLL files associated with WSMAN (Windows Remote Management) are loaded, such as 'WsmSvc.dll', 'WsmAuto.dll', and 'Microsoft.WSMan.Management.ni.dll' among others. Additionally, watch for the loading of 'svchost.exe' in association with the 'WsmWmiPl.dll' file, signifying response from the server side.\n\nIt's important to exclude from your detection certain benign processes that might also load these or similar libraries but are known to be safe. Such processes include 'powershell.exe', various system utilities like 'sdiagnhost.exe' and 'services.exe', command lines invoking 'svchost.exe' for standard services, the .NET optimization service 'mscorsvw.exe', and others related to specific use cases or system activities like server management tools, temporary files, Citrix applications, or instances of PowerShell ISE.\n\nBe cautious though, as some legitimate command lines may contain 'svchost.exe' without further parameters, which should not alone trigger alerts without the specific DLLs being loaded as mentioned above.\n\nBy filtering out these general and specific images and command lines, you can effectively reduce false positives, focusing only on unusual and potentially malicious WSMAN usage patterns. The detection level for this monitoring is set to medium, acknowledging that while not all findings may represent malicious activity, they warrant investigation to rule out unauthorized or harmful remote management actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    request_client:\n        - ImageLoaded|endswith:\n            - '\\WsmSvc.dll'\n            - '\\WsmAuto.dll'\n            - '\\Microsoft.WSMan.Management.ni.dll'\n        - OriginalFileName:\n            - 'WsmSvc.dll'\n            - 'WSMANAUTOMATION.DLL'\n            - 'Microsoft.WSMan.Management.dll'\n    respond_server:\n        Image|endswith: '\\svchost.exe'\n        OriginalFileName: 'WsmWmiPl.dll'\n    filter_general:\n        Image|endswith:\n            - '\\powershell.exe'\n            - 'C:\\Windows\\System32\\sdiagnhost.exe'\n            - 'C:\\Windows\\System32\\services.exe'\n    filter_svchost: # not available in Sysmon data, but Aurora logs\n        CommandLine|contains:\n            - 'svchost.exe -k netsvcs -p -s BITS'\n            - 'svchost.exe -k GraphicsPerfSvcGroup -s GraphicsPerfSvc'\n            - 'svchost.exe -k NetworkService -p -s Wecsvc'\n            - 'svchost.exe -k netsvcs'\n    filter_mscorsvw: #Image: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorsvw.exe\n        Image|startswith:\n            - 'C:\\Windows\\Microsoft.NET\\Framework64\\v'\n            - 'C:\\Windows\\Microsoft.NET\\Framework\\v'\n        Image|endswith: '\\mscorsvw.exe'\n    filter_svr_2019:\n        Image:\n            - 'C:\\Windows\\System32\\Configure-SMRemoting.exe'\n            - 'C:\\Windows\\System32\\ServerManager.exe'\n    filter_nextron:\n        Image|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n    filter_citrix:\n        Image|startswith: 'C:\\Program Files\\Citrix\\'\n    filter_ps_ise:\n        Image|endswith: '\\powershell_ise.exe'\n    filter_upgrade:\n        Image|startswith: 'C:\\$WINDOWS.~BT\\Sources\\'\n    svchost:\n        Image|endswith: '\\svchost.exe'\n    commandline_null:\n        CommandLine: null\n    condition: ( request_client or respond_server ) and not 1 of filter* and not ( svchost and commandline_null )\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    request_client:\n        - ImageLoaded|endswith:\n            - '\\WsmSvc.dll'\n            - '\\WsmAuto.dll'\n            - '\\Microsoft.WSMan.Management.ni.dll'\n        - OriginalFileName:\n            - 'WsmSvc.dll'\n            - 'WSMANAUTOMATION.DLL'\n            - 'Microsoft.WSMan.Management.dll'\n    respond_server:\n        Image|endswith: '\\svchost.exe'\n        OriginalFileName: 'WsmWmiPl.dll'\n    filter_general:\n        Image|endswith:\n            - '\\powershell.exe'\n            - 'C:\\Windows\\System32\\sdiagnhost.exe'\n            - 'C:\\Windows\\System32\\services.exe'\n    filter_svchost: # not available in Sysmon data, but Aurora logs\n        CommandLine|contains:\n            - 'svchost.exe -k netsvcs -p -s BITS'\n            - 'svchost.exe -k GraphicsPerfSvcGroup -s GraphicsPerfSvc'\n            - 'svchost.exe -k NetworkService -p -s Wecsvc'\n            - 'svchost.exe -k netsvcs'\n    filter_mscorsvw: #Image: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorsvw.exe\n        Image|startswith:\n            - 'C:\\Windows\\Microsoft.NET\\Framework64\\v'\n            - 'C:\\Windows\\Microsoft.NET\\Framework\\v'\n        Image|endswith: '\\mscorsvw.exe'\n    filter_svr_2019:\n        Image:\n            - 'C:\\Windows\\System32\\Configure-SMRemoting.exe'\n            - 'C:\\Windows\\System32\\ServerManager.exe'\n    filter_nextron:\n        Image|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n    filter_citrix:\n        Image|startswith: 'C:\\Program Files\\Citrix\\'\n    filter_ps_ise:\n        Image|endswith: '\\powershell_ise.exe'\n    filter_upgrade:\n        Image|startswith: 'C:\\$WINDOWS.~BT\\Sources\\'\n    svchost:\n        Image|endswith: '\\svchost.exe'\n    commandline_null:\n        CommandLine: null\n    condition: ( request_client or respond_server ) and not 1 of filter* and not ( svchost and commandline_null )\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "signs of potential use of the WSMAN provider from uncommon processes locally and remote execution.",
      "answer": "In order to detect signs of potential use of the WSMAN provider from uncommon processes locally and remote execution, you should monitor for specific image load activities in Windows environments. Look for events where certain DLL files associated with WSMAN (Windows Remote Management) are loaded, such as 'WsmSvc.dll', 'WsmAuto.dll', and 'Microsoft.WSMan.Management.ni.dll' among others. Additionally, watch for the loading of 'svchost.exe' in association with the 'WsmWmiPl.dll' file, signifying response from the server side.\n\nIt's important to exclude from your detection certain benign processes that might also load these or similar libraries but are known to be safe. Such processes include 'powershell.exe', various system utilities like 'sdiagnhost.exe' and 'services.exe', command lines invoking 'svchost.exe' for standard services, the .NET optimization service 'mscorsvw.exe', and others related to specific use cases or system activities like server management tools, temporary files, Citrix applications, or instances of PowerShell ISE.\n\nBe cautious though, as some legitimate command lines may contain 'svchost.exe' without further parameters, which should not alone trigger alerts without the specific DLLs being loaded as mentioned above.\n\nBy filtering out these general and specific images and command lines, you can effectively reduce false positives, focusing only on unusual and potentially malicious WSMAN usage patterns. The detection level for this monitoring is set to medium, acknowledging that while not all findings may represent malicious activity, they warrant investigation to rule out unauthorized or harmful remote management actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file based on their extension being created in \"C:\\PerfLogs\\\". Note that this directory mostly contains \".etl\" files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious file based on their extension being created in \"C:\\PerfLogs\\\", you should monitor file events in Windows environments, especially focusing on files created in the \"C:\\PerfLogs\\\" directory. Pay close attention to files with the extensions '.7z', '.bat', '.bin', '.chm', '.dll', '.exe', '.hta', '.lnk', '.ps1', '.psm1', '.py', '.scr', '.sys', '.vbe', '.vbs', and '.zip'. These extensions are commonly associated with executable and potentially malicious content, unlike the typical \".etl\" files expected in this directory. The detection of files with these extensions being created in the specified directory should raise alerts, as it is unlikely for such activities to occur under normal circumstances, thus indicating a potential security threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\PerfLogs\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.bin'\n            - '.chm'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.lnk'\n            - '.ps1'\n            - '.psm1'\n            - '.py'\n            - '.scr'\n            - '.sys'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\PerfLogs\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.bin'\n            - '.chm'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.lnk'\n            - '.ps1'\n            - '.psm1'\n            - '.py'\n            - '.scr'\n            - '.sys'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
      "question": "suspicious file based on their extension being created in \"C:\\PerfLogs\\\". Note that this directory mostly contains \".etl\" files",
      "answer": "In order to detect suspicious file based on their extension being created in \"C:\\PerfLogs\\\", you should monitor file events in Windows environments, especially focusing on files created in the \"C:\\PerfLogs\\\" directory. Pay close attention to files with the extensions '.7z', '.bat', '.bin', '.chm', '.dll', '.exe', '.hta', '.lnk', '.ps1', '.psm1', '.py', '.scr', '.sys', '.vbe', '.vbs', and '.zip'. These extensions are commonly associated with executable and potentially malicious content, unlike the typical \".etl\" files expected in this directory. The detection of files with these extensions being created in the specified directory should raise alerts, as it is unlikely for such activities to occur under normal circumstances, thus indicating a potential security threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an adversary leveraging legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes on Windows systems that are indicative of the GoTo Opener software. This involves looking for any process that has a description of \"GoTo Opener,\" is named \"GoTo Opener,\" and is associated with the company \"LogMeIn, Inc.\" It's important to note, however, that there may be legitimate uses of this software, so not all detections signify malicious activity but should be examined within the context of other suspicious activities on the network. The monitoring of such processes falls under the tactics of Execution, Persistence, and Privilege Escalation, as malicious actors may use the GoTo Opener as a method to execute commands, maintain persistent access, and potentially escalate their privileges within a target network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'GoTo Opener'\n        - Product: 'GoTo Opener'\n        - Company: 'LogMeIn, Inc.'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'GoTo Opener'\n        - Product: 'GoTo Opener'\n        - Company: 'LogMeIn, Inc.'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect an adversary leveraging legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes on Windows systems that are indicative of the GoTo Opener software. This involves looking for any process that has a description of \"GoTo Opener,\" is named \"GoTo Opener,\" and is associated with the company \"LogMeIn, Inc.\" It's important to note, however, that there may be legitimate uses of this software, so not all detections signify malicious activity but should be examined within the context of other suspicious activities on the network. The monitoring of such processes falls under the tactics of Execution, Persistence, and Privilege Escalation, as malicious actors may use the GoTo Opener as a method to execute commands, maintain persistent access, and potentially escalate their privileges within a target network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The \"VSIISExeLauncher.exe\" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect instances where the \"VSIISExeLauncher.exe\" binary, part of the Visual Studio/VS Code, is used to execute arbitrary binaries, you should monitor Windows process creation logs. Keep an eye out specifically for processes that are either named \"\\VSIISExeLauncher.exe\" at the end of the path or have the original file name \"VSIISExeLauncher.exe\". Additionally, it is important to scrutinize any command line parameters that include sequences such as \" -p \" and \" -a \", as these might indicate attempts at exploiting this executable for unauthorized binary launches. The rule applies across all cases where these conditions match, indicating a medium-level threat, although it's worth noting that there could be instances where these detections are not malicious (although such false positives are unspecified).",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSIISExeLauncher.exe'\n        - OriginalFileName: 'VSIISExeLauncher.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -p '\n            - ' -a '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSIISExeLauncher.exe'\n        - OriginalFileName: 'VSIISExeLauncher.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -p '\n            - ' -a '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "The \"VSIISExeLauncher.exe\" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries",
      "answer": "In order to detect instances where the \"VSIISExeLauncher.exe\" binary, part of the Visual Studio/VS Code, is used to execute arbitrary binaries, you should monitor Windows process creation logs. Keep an eye out specifically for processes that are either named \"\\VSIISExeLauncher.exe\" at the end of the path or have the original file name \"VSIISExeLauncher.exe\". Additionally, it is important to scrutinize any command line parameters that include sequences such as \" -p \" and \" -a \", as these might indicate attempts at exploiting this executable for unauthorized binary launches. The rule applies across all cases where these conditions match, indicating a medium-level threat, although it's worth noting that there could be instances where these detections are not malicious (although such false positives are unspecified)."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting raw disk access using uncommon tools or tools that are located in suspicious locations (heavy filtering is required), which could indicate possible defense evasion attempts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect raw disk access using uncommon tools or tools that are located in suspicious locations, which could indicate possible defense evasion attempts, you should monitor for executions from locations not commonly associated with legitimate system processes or common software installations. Windows operating systems have predefined locations for system files, applications, and processes critical for their operation, such as 'C:\\Program Files\\', 'C:\\Windows\\System32\\', and similar directories. Processes executing from these locations are generally considered safe. However, to spot potentially malicious activity, look for executions occurring outside these trusted paths, especially from removable devices like floppy drives, temporary directories such as 'C:\\Windows\\Temp\\', or less monitored user data folders like those under 'C:\\Users\\'.\n\nYou should also pay attention to processes that attempt to disguise themselves as legitimate system update files or processes (e.g., 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' related to Windows upgrade or update), yet located in atypical directories, or leveraging application data paths (e.g., paths containing '\\AppData\\Microsoft\\'). Such tactics might be employed by attackers to evade detection mechanisms by blending in with normal system update operations.\n\nAdditionally, keep an eye out for specific executable names and paths that have been flagged as uncommon points of execution for otherwise legitimate tools, for instance, the GitHub Desktop application executing from an unusual path like 'C:\\Users\\[Username]\\AppData\\Local\\GitHubDesktop\\...' or tools like 'NVMEHostmetadata.exe' and 'SSDUpdate.exe' running from 'C:\\Windows\\Temp\\' which might indicate an attempt to modify system or disk components covertly.\n\nFurthermore, execution of tools like 'thor.exe' from directories like 'C:\\Windows\\Temp\\asgard2-agent\\' and unusual execution paths for Keybase updater ('upd.exe') could signify unauthorized or suspicious activities. \n\nMonitoring for these indicators necessitates a nuanced understand of normal system and user behavior to minimize false positives, as legitimate software installations, updates, or administrative activities may occasionally use similar paths or patterns. However, consistent or repeated detection of such patterns warrants further investigation. Tags such as \"Defense Evasion\" and \"Execution\" from the MITRE ATT&CK framework are pertinent here, as they help categorize the detected activities into broader tactics and techniques used by adversaries to bypass security measures and execute malicious payloads or scripts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: raw_access_thread\ndetection:\n    filter_main_floppy:\n        Device|contains: floppy\n    filter_main_generic:\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SystemApps\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\servicing\\'\n            - 'C:\\Windows\\CCM\\'\n            - 'C:\\Windows\\uus\\'\n    filter_main_setuphost:\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' # Related to Windows Upgrade/Update\n    filter_main_system_images:\n        Image:\n            - 'System'\n            - 'Registry'\n    filter_main_specific:\n        Image: 'C:\\Windows\\explorer.exe'\n    filter_main_windefender:\n        Image|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_main_microsoft_appdata:\n        Image|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\'\n            - '\\Microsoft\\'\n    filter_main_windows_update_box:\n        # ParentCommandLine: C:\\WINDOWS\\system32\\svchost.exe -k netsvcs -p -s wuauserv\n        # Related to Windows Upgrade/Update\n        Image|startswith: 'C:\\Windows\\SoftwareDistribution\\Download'\n        Image|endswith: '\\WindowsUpdateBox.exe'\n    filter_main_ssd_nvme:\n        Image|startswith: 'C:\\Windows\\Temp\\'\n        Image|endswith:\n            - '\\HostMetadata\\NVMEHostmetadata.exe'\n            - '\\Executables\\SSDUpdate.exe'\n    filter_optional_github_desktop:\n        Image|startswith: 'C:\\Users\\'\n        Image|contains: '\\AppData\\Local\\GitHubDesktop\\app-'\n        Image|endswith: '\\resources\\app\\git\\mingw64\\bin\\git.exe'\n    filter_optional_nextron:\n        Image|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        Image|endswith: '\\thor.exe'\n    filter_optional_Keybase:\n        Image|endswith: 'C:\\Users\\'\n        Image|startswith: '\\AppData\\Local\\Keybase\\upd.exe'\n    condition: not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Likely\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: raw_access_thread\ndetection:\n    filter_main_floppy:\n        Device|contains: floppy\n    filter_main_generic:\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SystemApps\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\servicing\\'\n            - 'C:\\Windows\\CCM\\'\n            - 'C:\\Windows\\uus\\'\n    filter_main_setuphost:\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' # Related to Windows Upgrade/Update\n    filter_main_system_images:\n        Image:\n            - 'System'\n            - 'Registry'\n    filter_main_specific:\n        Image: 'C:\\Windows\\explorer.exe'\n    filter_main_windefender:\n        Image|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_main_microsoft_appdata:\n        Image|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\'\n            - '\\Microsoft\\'\n    filter_main_windows_update_box:\n        # ParentCommandLine: C:\\WINDOWS\\system32\\svchost.exe -k netsvcs -p -s wuauserv\n        # Related to Windows Upgrade/Update\n        Image|startswith: 'C:\\Windows\\SoftwareDistribution\\Download'\n        Image|endswith: '\\WindowsUpdateBox.exe'\n    filter_main_ssd_nvme:\n        Image|startswith: 'C:\\Windows\\Temp\\'\n        Image|endswith:\n            - '\\HostMetadata\\NVMEHostmetadata.exe'\n            - '\\Executables\\SSDUpdate.exe'\n    filter_optional_github_desktop:\n        Image|startswith: 'C:\\Users\\'\n        Image|contains: '\\AppData\\Local\\GitHubDesktop\\app-'\n        Image|endswith: '\\resources\\app\\git\\mingw64\\bin\\git.exe'\n    filter_optional_nextron:\n        Image|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        Image|endswith: '\\thor.exe'\n    filter_optional_Keybase:\n        Image|endswith: 'C:\\Users\\'\n        Image|startswith: '\\AppData\\Local\\Keybase\\upd.exe'\n    condition: not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Likely\nlevel: low\n",
      "question": "raw disk access using uncommon tools or tools that are located in suspicious locations (heavy filtering is required), which could indicate possible defense evasion attempts",
      "answer": "In order to detect raw disk access using uncommon tools or tools that are located in suspicious locations, which could indicate possible defense evasion attempts, you should monitor for executions from locations not commonly associated with legitimate system processes or common software installations. Windows operating systems have predefined locations for system files, applications, and processes critical for their operation, such as 'C:\\Program Files\\', 'C:\\Windows\\System32\\', and similar directories. Processes executing from these locations are generally considered safe. However, to spot potentially malicious activity, look for executions occurring outside these trusted paths, especially from removable devices like floppy drives, temporary directories such as 'C:\\Windows\\Temp\\', or less monitored user data folders like those under 'C:\\Users\\'.\n\nYou should also pay attention to processes that attempt to disguise themselves as legitimate system update files or processes (e.g., 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' related to Windows upgrade or update), yet located in atypical directories, or leveraging application data paths (e.g., paths containing '\\AppData\\Microsoft\\'). Such tactics might be employed by attackers to evade detection mechanisms by blending in with normal system update operations.\n\nAdditionally, keep an eye out for specific executable names and paths that have been flagged as uncommon points of execution for otherwise legitimate tools, for instance, the GitHub Desktop application executing from an unusual path like 'C:\\Users\\[Username]\\AppData\\Local\\GitHubDesktop\\...' or tools like 'NVMEHostmetadata.exe' and 'SSDUpdate.exe' running from 'C:\\Windows\\Temp\\' which might indicate an attempt to modify system or disk components covertly.\n\nFurthermore, execution of tools like 'thor.exe' from directories like 'C:\\Windows\\Temp\\asgard2-agent\\' and unusual execution paths for Keybase updater ('upd.exe') could signify unauthorized or suspicious activities. \n\nMonitoring for these indicators necessitates a nuanced understand of normal system and user behavior to minimize false positives, as legitimate software installations, updates, or administrative activities may occasionally use similar paths or patterns. However, consistent or repeated detection of such patterns warrants further investigation. Tags such as \"Defense Evasion\" and \"Execution\" from the MITRE ATT&CK framework are pertinent here, as they help categorize the detected activities into broader tactics and techniques used by adversaries to bypass security measures and execute malicious payloads or scripts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to misuse Remote.exe, which is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files, you should: focus on monitoring process creation activity on Windows systems. Specifically, attention should be directed at instances where processes are initiated and the associated image file name ends with '\\remote.exe' or the original file name is exactly 'remote.exe'. This approach is guided by recognizing the potential exploitation of Remote.exe for unauthorized actions. However, it is crucial to account for legitimate use cases, such as approved installations of the Windows SDK with Debugging Tools for Windows (WinDbg), which are recognized as potential sources of false positives. The sensitivity of detection for this activity is categorized as medium, indicating a balanced approach to identifying potential threats while minimizing unnecessary alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\remote.exe'\n        - OriginalFileName: 'remote.exe'\n    condition: selection\nfalsepositives:\n    - Approved installs of Windows SDK with Debugging Tools for Windows (WinDbg).\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\remote.exe'\n        - OriginalFileName: 'remote.exe'\n    condition: selection\nfalsepositives:\n    - Approved installs of Windows SDK with Debugging Tools for Windows (WinDbg).\nlevel: medium\n",
      "question": "Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.",
      "answer": "In order to detect attempts to misuse Remote.exe, which is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files, you should: focus on monitoring process creation activity on Windows systems. Specifically, attention should be directed at instances where processes are initiated and the associated image file name ends with '\\remote.exe' or the original file name is exactly 'remote.exe'. This approach is guided by recognizing the potential exploitation of Remote.exe for unauthorized actions. However, it is crucial to account for legitimate use cases, such as approved installations of the Windows SDK with Debugging Tools for Windows (WinDbg), which are recognized as potential sources of false positives. The sensitivity of detection for this activity is categorized as medium, indicating a balanced approach to identifying potential threats while minimizing unnecessary alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tamper attempts to sophos av functionality via registry key modification.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tamper attempts to Sophos AV functionality via registry key modification, you should: Focus on monitoring registry set actions within Windows environments. Specifically, look out for the event type `SetValue`, indicating a modification attempt on registry keys. Key targets for this detection are registry paths related to Sophos Endpoint Defense and SAVService tamper protection configurations, which include:\n\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled`\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled`\n- `\\Sophos\\SAVService\\TamperProtection\\Enabled`\n\nA critical signal of a tampering attempt is the modification of these registry keys' values to `DWORD (0x00000000)`, effectively disabling the Sophos Endpoint Defense tamper protection features. \n\nKeep in mind that there might be false positives, such as when the antivirus itself legitimately disables this feature. Thus, any modifications to these registry keys should be investigated to confirm whether they are legitimate changes or potential security threats. The severity level of this detection is high, underscoring the importance of such monitoring in maintaining the integrity of Sophos antivirus functionalities against tampering efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled'\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled'\n            - '\\Sophos\\SAVService\\TamperProtection\\Enabled'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Some FP may occur when the feature is disabled by the AV itself, you should always investigate if the action was legitimate\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled'\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled'\n            - '\\Sophos\\SAVService\\TamperProtection\\Enabled'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Some FP may occur when the feature is disabled by the AV itself, you should always investigate if the action was legitimate\nlevel: high\n",
      "question": "tamper attempts to sophos av functionality via registry key modification",
      "answer": "In order to detect tamper attempts to Sophos AV functionality via registry key modification, you should: Focus on monitoring registry set actions within Windows environments. Specifically, look out for the event type `SetValue`, indicating a modification attempt on registry keys. Key targets for this detection are registry paths related to Sophos Endpoint Defense and SAVService tamper protection configurations, which include:\n\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled`\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled`\n- `\\Sophos\\SAVService\\TamperProtection\\Enabled`\n\nA critical signal of a tampering attempt is the modification of these registry keys' values to `DWORD (0x00000000)`, effectively disabling the Sophos Endpoint Defense tamper protection features. \n\nKeep in mind that there might be false positives, such as when the antivirus itself legitimately disables this feature. Thus, any modifications to these registry keys should be investigated to confirm whether they are legitimate changes or potential security threats. The severity level of this detection is high, underscoring the importance of such monitoring in maintaining the integrity of Sophos antivirus functionalities against tampering efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting javaw.exe in AppData folder as used by Adwind / JRAT.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect javaw.exe in AppData folder as used by Adwind / JRAT, you should monitor for registry set actions in Windows where the event type involves setting a value. Specifically, keep an eye on modifications targeting the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run' registry path, a common location for configuring startup programs. Any instance where the target object begins with this path and the details of the modification point to an executable within the '%AppData%\\Roaming\\Oracle\\bin\\' directory should raise an alert. This behavior might indicate an attempt to ensure that malware, such as Adwind or JRAT which often masquerades as a legitimate Java process, persists across reboots by adding itself to the system\u2019s startup items. This kind of activity is considered suspicious and should be flagged for further investigation with a high level of concern due to its potential impact and the tactics, techniques, and procedures associated with persistent access and evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n        Details|startswith: '%AppData%\\Roaming\\Oracle\\bin\\'\n    condition: selection\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n        Details|startswith: '%AppData%\\Roaming\\Oracle\\bin\\'\n    condition: selection\nlevel: high\n",
      "question": "javaw.exe in AppData folder as used by Adwind / JRAT",
      "answer": "In order to detect javaw.exe in AppData folder as used by Adwind / JRAT, you should monitor for registry set actions in Windows where the event type involves setting a value. Specifically, keep an eye on modifications targeting the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run' registry path, a common location for configuring startup programs. Any instance where the target object begins with this path and the details of the modification point to an executable within the '%AppData%\\Roaming\\Oracle\\bin\\' directory should raise an alert. This behavior might indicate an attempt to ensure that malware, such as Adwind or JRAT which often masquerades as a legitimate Java process, persists across reboots by adding itself to the system\u2019s startup items. This kind of activity is considered suspicious and should be flagged for further investigation with a high level of concern due to its potential impact and the tactics, techniques, and procedures associated with persistent access and evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when sign-ins increased by 10% or greater..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when sign-ins increased by 10% or greater, you should: Monitor Azure's sign-in logs for an increase in sign-in failures. Specifically, look for events where the status is marked as a failure, and this failure rate constitutes less than 10% of total attempts. This monitoring approach is designed for Azure environments and concerns the sign-in logs service. An increase in sign-in failures might indicate an unauthorized attempt to access accounts, which could be part of a broader attack strategy. This detection strategy is of medium importance and is considered to have an unlikely chance of producing false positives, suggesting high confidence in the reliability of the detection. The tags associated with this form of monitoring include tactics and techniques that involve initial access attempts through credential exploitation or brute force methods.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: failure\n        Count: \"<10%\"\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: failure\n        Count: \"<10%\"\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
      "question": "when sign-ins increased by 10% or greater.",
      "answer": "In order to detect when sign-ins increased by 10% or greater, you should: Monitor Azure's sign-in logs for an increase in sign-in failures. Specifically, look for events where the status is marked as a failure, and this failure rate constitutes less than 10% of total attempts. This monitoring approach is designed for Azure environments and concerns the sign-in logs service. An increase in sign-in failures might indicate an unauthorized attempt to access accounts, which could be part of a broader attack strategy. This detection strategy is of medium importance and is considered to have an unlikely chance of producing false positives, suggesting high confidence in the reliability of the detection. The tags associated with this form of monitoring include tactics and techniques that involve initial access attempts through credential exploitation or brute force methods."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting driver load of the Process Hacker tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect driver load of the Process Hacker tool, you should focus on identifying events where the Process Hacker's driver, specifically named 'kprocesshacker.sys', is loaded within a Windows environment. This can be accomplished by monitoring for the loading of images ending with '\\kprocesshacker.sys'. Additionally, particular attention should be given to the detection of specific hash values associated with the image file. These hash values, identified as 'IMPHASH', are unique identifiers that signify the Process Hacker's driver based on its contents and are listed as '821D74031D3F625BCBD0DF08B70F1E77', 'F86759BB4DE4320918615DC06E998A39', '0A64EEB85419257D0CE32BD5D55C3A18', and '6E7B34DFC017700B1517B230DF6FF0D0'. Monitoring for these hash values in logs can help in the accurate detection of the Process Hacker tool's presence in the system. It is important to consider that in some cases, the use of the Process Hacker tool might be legitimate, especially among low-level developers or system administrators; hence, such instances should be carefully distinguished to avoid false positives. This approach is crucial for maintaining the security posture of Windows systems against potential misuse of the Process Hacker tool, which might be utilized for nefarious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_image:\n        ImageLoaded|endswith: '\\kprocesshacker.sys'\n    selection_processhack_sysmon:\n        Hashes|contains:\n            - 'IMPHASH=821D74031D3F625BCBD0DF08B70F1E77'\n            - 'IMPHASH=F86759BB4DE4320918615DC06E998A39'\n            - 'IMPHASH=0A64EEB85419257D0CE32BD5D55C3A18'\n            - 'IMPHASH=6E7B34DFC017700B1517B230DF6FF0D0'\n    selection_processhack_hashes:\n        Imphash:\n            - '821D74031D3F625BCBD0DF08B70F1E77'\n            - 'F86759BB4DE4320918615DC06E998A39'\n            - '0A64EEB85419257D0CE32BD5D55C3A18'\n            - '6E7B34DFC017700B1517B230DF6FF0D0'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of process hacker or system informer by low level developers or system administrators\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_image:\n        ImageLoaded|endswith: '\\kprocesshacker.sys'\n    selection_processhack_sysmon:\n        Hashes|contains:\n            - 'IMPHASH=821D74031D3F625BCBD0DF08B70F1E77'\n            - 'IMPHASH=F86759BB4DE4320918615DC06E998A39'\n            - 'IMPHASH=0A64EEB85419257D0CE32BD5D55C3A18'\n            - 'IMPHASH=6E7B34DFC017700B1517B230DF6FF0D0'\n    selection_processhack_hashes:\n        Imphash:\n            - '821D74031D3F625BCBD0DF08B70F1E77'\n            - 'F86759BB4DE4320918615DC06E998A39'\n            - '0A64EEB85419257D0CE32BD5D55C3A18'\n            - '6E7B34DFC017700B1517B230DF6FF0D0'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of process hacker or system informer by low level developers or system administrators\nlevel: high\n",
      "question": "driver load of the Process Hacker tool",
      "answer": "In order to detect driver load of the Process Hacker tool, you should focus on identifying events where the Process Hacker's driver, specifically named 'kprocesshacker.sys', is loaded within a Windows environment. This can be accomplished by monitoring for the loading of images ending with '\\kprocesshacker.sys'. Additionally, particular attention should be given to the detection of specific hash values associated with the image file. These hash values, identified as 'IMPHASH', are unique identifiers that signify the Process Hacker's driver based on its contents and are listed as '821D74031D3F625BCBD0DF08B70F1E77', 'F86759BB4DE4320918615DC06E998A39', '0A64EEB85419257D0CE32BD5D55C3A18', and '6E7B34DFC017700B1517B230DF6FF0D0'. Monitoring for these hash values in logs can help in the accurate detection of the Process Hacker tool's presence in the system. It is important to consider that in some cases, the use of the Process Hacker tool might be legitimate, especially among low-level developers or system administrators; hence, such instances should be carefully distinguished to avoid false positives. This approach is crucial for maintaining the security posture of Windows systems against potential misuse of the Process Hacker tool, which might be utilized for nefarious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use Clip.exe in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated PowerShell via use Clip.exe in Scripts, you should monitor the loading of drivers within Windows environments, specifically looking for instances where the ImagePath property contains references to either 'Clipboard' or 'i'. This approach is pivotal in identifying scripts that attempt to leverage Clip.exe, which might be used in obfuscating malicious PowerShell scripts. The detection focuses on the 'driver_load' category, which is essential for catching the early stages of this obfuscation technique. Due to the potentially stealthy nature of such scripts, any matches should be treated with a high level of concern, although it is acknowledged that there might be scenarios where the detection could flag unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains: '(Clipboard|i'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains: '(Clipboard|i'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high",
      "question": "Obfuscated Powershell via use Clip.exe in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use Clip.exe in Scripts, you should monitor the loading of drivers within Windows environments, specifically looking for instances where the ImagePath property contains references to either 'Clipboard' or 'i'. This approach is pivotal in identifying scripts that attempt to leverage Clip.exe, which might be used in obfuscating malicious PowerShell scripts. The detection focuses on the 'driver_load' category, which is essential for catching the early stages of this obfuscation technique. Due to the potentially stealthy nature of such scripts, any matches should be treated with a high level of concern, although it is acknowledged that there might be scenarios where the detection could flag unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation, you should: Monitor process creations within Windows systems for instances where `msdt.exe` is initiated. Specifically, look out for executions of `msdt.exe` that are children of certain programs known for scripting or command execution, such as `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. These parent processes are often used by attackers to execute malicious scripts or commands. To ensure effective detection, confirm that both the process image ends with `\\msdt.exe` and its original filename is identified as `msdt.exe` to reduce the chance of missing malicious activity. This monitoring is tagged under tactics and techniques such as Execution, Privilege Escalation, and Defense Evasion due to the nature of the exploit and the ways attackers leverage it to execute arbitrary commands, elevate privileges, or bypass security mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            # Note: office applications are covered by: 438025f9-5856-4663-83f7-52f878a70a50\n    selection_msdt:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            # Note: office applications are covered by: 438025f9-5856-4663-83f7-52f878a70a50\n    selection_msdt:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation",
      "answer": "In order to detect msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation, you should: Monitor process creations within Windows systems for instances where `msdt.exe` is initiated. Specifically, look out for executions of `msdt.exe` that are children of certain programs known for scripting or command execution, such as `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. These parent processes are often used by attackers to execute malicious scripts or commands. To ensure effective detection, confirm that both the process image ends with `\\msdt.exe` and its original filename is identified as `msdt.exe` to reduce the chance of missing malicious activity. This monitoring is tagged under tactics and techniques such as Execution, Privilege Escalation, and Defense Evasion due to the nature of the exploit and the ways attackers leverage it to execute arbitrary commands, elevate privileges, or bypass security mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell scripts set ACL to of a file or a folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell scripts set ACL to of a file or a folder, you should: Look for PowerShell script execution logs within the Windows environment, specifically focusing on scripts that involve manipulating Access Control Lists (ACLs) of files or directories. Significant indicators include the usage of 'Set-Acl ' together with '-AclObject ' and '-Path ' within the same PowerShell script block. This detection strategy is centered around identifying attempts to change permissions, which could be a precursor to nefarious activities such as escalating privileges or expanding the attack surface. It's important to note that the confidence level for these detections is considered low, primarily due to the potential for legitimate administrative activities to use similar scripting methods for genuine maintenance purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: bade5735-5ab0-4aa7-a642-a11be0e40872\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Acl '\n            - '-AclObject '\n            - '-Path '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: bade5735-5ab0-4aa7-a642-a11be0e40872\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Acl '\n            - '-AclObject '\n            - '-Path '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "PowerShell scripts set ACL to of a file or a folder",
      "answer": "In order to detect PowerShell scripts set ACL to of a file or a folder, you should: Look for PowerShell script execution logs within the Windows environment, specifically focusing on scripts that involve manipulating Access Control Lists (ACLs) of files or directories. Significant indicators include the usage of 'Set-Acl ' together with '-AclObject ' and '-Path ' within the same PowerShell script block. This detection strategy is centered around identifying attempts to change permissions, which could be a precursor to nefarious activities such as escalating privileges or expanding the attack surface. It's important to note that the confidence level for these detections is considered low, primarily due to the potential for legitimate administrative activities to use similar scripting methods for genuine maintenance purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell creating a PowerShell file (.ps1). While often times this behavior is benign, sometimes it can be a sign of a dropper script trying to achieve persistence..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell creating a PowerShell file (.ps1), which might indicate benign activity or potentially a dropper script trying to achieve persistence, you should focus on monitoring file events on Windows systems. Specifically, keep an eye out for instances where 'powershell.exe' or 'pwsh.exe' results in the creation of '.ps1' files. This behavior can be captured by evaluating file event logs for occurrences where the image path ends with either '\\powershell.exe' or '\\pwsh.exe' and the target filename ends with '.ps1'. However, it's important to exclude certain cases to reduce false positives: ignore any instances where the target filename contains '__PSScriptPolicyTest_', starts with 'C:\\Users\\' and contains '\\AppData\\Local\\Temp\\', or begins with 'C:\\Windows\\Temp\\'. Keep in mind that the exact nature of false positives may vary based on the environment and the PowerShell scripts being utilized. It may be necessary to apply additional filters based on the specific context to accurately identify suspicious activity without overwhelming the system with benign triggers. This approach aims at striking a balance between vigilance against potential threats and minimizing the noise from false alarms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetFilename|endswith: '.ps1'\n    filter_main_psscriptpolicytest:\n        TargetFilename|contains: '__PSScriptPolicyTest_'\n    filter_main_appdata:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\'\n    filter_main_windows_temp:\n        TargetFilename|startswith: 'C:\\Windows\\Temp\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - False positives will differ depending on the environement and scripts used. Apply additional filters accordingly.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetFilename|endswith: '.ps1'\n    filter_main_psscriptpolicytest:\n        TargetFilename|contains: '__PSScriptPolicyTest_'\n    filter_main_appdata:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\'\n    filter_main_windows_temp:\n        TargetFilename|startswith: 'C:\\Windows\\Temp\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - False positives will differ depending on the environement and scripts used. Apply additional filters accordingly.\nlevel: low\n",
      "question": "PowerShell creating a PowerShell file (.ps1). While often times this behavior is benign, sometimes it can be a sign of a dropper script trying to achieve persistence.",
      "answer": "In order to detect PowerShell creating a PowerShell file (.ps1), which might indicate benign activity or potentially a dropper script trying to achieve persistence, you should focus on monitoring file events on Windows systems. Specifically, keep an eye out for instances where 'powershell.exe' or 'pwsh.exe' results in the creation of '.ps1' files. This behavior can be captured by evaluating file event logs for occurrences where the image path ends with either '\\powershell.exe' or '\\pwsh.exe' and the target filename ends with '.ps1'. However, it's important to exclude certain cases to reduce false positives: ignore any instances where the target filename contains '__PSScriptPolicyTest_', starts with 'C:\\Users\\' and contains '\\AppData\\Local\\Temp\\', or begins with 'C:\\Windows\\Temp\\'. Keep in mind that the exact nature of false positives may vary based on the environment and the PowerShell scripts being utilized. It may be necessary to apply additional filters based on the specific context to accurately identify suspicious activity without overwhelming the system with benign triggers. This approach aims at striking a balance between vigilance against potential threats and minimizing the noise from false alarms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use Rundll32 in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated PowerShell via the use of Rundll32 in scripts, you should monitor Windows PowerShell module logs for specific patterns that indicate potential suspicious activity. Focus on events with payload content that includes a combination of '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. These elements in conjunction with either of 'value', 'invoke', 'comspec', or 'iex' within the payload suggest an attempt to obscure the true nature of the PowerShell script's actions, which often involves invoking rundll32 to execute malicious code indirectly. This method of script obfuscation is a sophisticated technique used to evade detection by hiding the true intent of the PowerShell script, making it crucial to identify these patterns to mitigate possible threats. The detection of such activity is associated with high severity due to the potential for malicious actions being executed through obscure and indirect methods. Keep in mind that while this detection strategy is essential, false positives are unknown, indicating the necessity for manual verification of detected incidents to confirm their malicious nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains|all:\n            - '&&'\n            - 'rundll32'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n        Payload|contains:\n            - 'value'\n            - 'invoke'\n            - 'comspec'\n            - 'iex'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains|all:\n            - '&&'\n            - 'rundll32'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n        Payload|contains:\n            - 'value'\n            - 'invoke'\n            - 'comspec'\n            - 'iex'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use Rundll32 in Scripts",
      "answer": "In order to detect obfuscated PowerShell via the use of Rundll32 in scripts, you should monitor Windows PowerShell module logs for specific patterns that indicate potential suspicious activity. Focus on events with payload content that includes a combination of '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. These elements in conjunction with either of 'value', 'invoke', 'comspec', or 'iex' within the payload suggest an attempt to obscure the true nature of the PowerShell script's actions, which often involves invoking rundll32 to execute malicious code indirectly. This method of script obfuscation is a sophisticated technique used to evade detection by hiding the true intent of the PowerShell script, making it crucial to identify these patterns to mitigate possible threats. The detection of such activity is associated with high severity due to the potential for malicious actions being executed through obscure and indirect methods. Keep in mind that while this detection strategy is essential, false positives are unknown, indicating the necessity for manual verification of detected incidents to confirm their malicious nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect and understand an attack that leverages the setupapi.dll library's InstallHinfSection function to achieve persistence by potentially modifying registry values, files, and installing drivers, you should: focus on monitoring process creation events within Windows environments. Specifically, look for instances where 'runonce.exe' is initiated as a process and its parent process is 'rundll32.exe'. The parent process command line should include references to 'setupapi.dll' and 'InstallHinfSection'. These criteria are essential indicators that an attacker might be exploiting the InstallHinfSection function to execute malicious activities, such as modifying Run or RunOnce registry keys for persistence, executing additional processes, or chaining calls to other DLLs. When observing such activities, important information like the Computer Name, User involved, and both the Command Line used to start the process and the Parent Command Line should be collected and analyzed. However, it's important to consider that there might be legitimate scripts and administrative tools using INF files for driver installation with setupapi.dll, which could be misidentified as false positives in this context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\runonce.exe'\n        ParentImage|endswith: '\\rundll32.exe'\n        ParentCommandLine|contains|all:\n            - 'setupapi.dll'\n            - 'InstallHinfSection'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts and administrative tools that use INF files for driver installation with setupapi.dll\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\runonce.exe'\n        ParentImage|endswith: '\\rundll32.exe'\n        ParentCommandLine|contains|all:\n            - 'setupapi.dll'\n            - 'InstallHinfSection'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts and administrative tools that use INF files for driver installation with setupapi.dll\nlevel: medium\n",
      "question": "setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file.",
      "answer": "In order to detect and understand an attack that leverages the setupapi.dll library's InstallHinfSection function to achieve persistence by potentially modifying registry values, files, and installing drivers, you should: focus on monitoring process creation events within Windows environments. Specifically, look for instances where 'runonce.exe' is initiated as a process and its parent process is 'rundll32.exe'. The parent process command line should include references to 'setupapi.dll' and 'InstallHinfSection'. These criteria are essential indicators that an attacker might be exploiting the InstallHinfSection function to execute malicious activities, such as modifying Run or RunOnce registry keys for persistence, executing additional processes, or chaining calls to other DLLs. When observing such activities, important information like the Computer Name, User involved, and both the Command Line used to start the process and the Parent Command Line should be collected and analyzed. However, it's important to consider that there might be legitimate scripts and administrative tools using INF files for driver installation with setupapi.dll, which could be misidentified as false positives in this context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files').\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files'), you should focus on monitoring process creation events on Windows systems. Look for processes that are initiated from executable files named 'rutserv.exe' or 'rfusclient.exe', which are associated with the Remote Utilities software. Additionally, check if the 'Product' attribute in the event logs matches 'Remote Utilities'. It's crucial to differentiate between legitimate and suspicious activities by excluding events where these processes start from the standard installation paths, namely 'C:\\Program Files\\Remote Utilities' and 'C:\\Program Files (x86)\\Remote Utilities'. By applying this monitoring strategy, any process creation event that matches these criteria but does not originate from the expected directories should be considered as a potential indicator of a Remote Utilities RAT being executed from an unusual location, which might suggest a malicious usage. This detection is categorized with a medium level of confidence due to the possibility of unknown false positives, indicating that while the criteria are specific, there may be legitimate scenarios that could inadvertently meet these conditions. This approach is designed to combat tactics and techniques like execution of malware and use of remote access tools by unauthorized entities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n        - Product: 'Remote Utilities'\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\Remote Utilities'\n            - 'C:\\Program Files (x86)\\Remote Utilities'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n        - Product: 'Remote Utilities'\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\Remote Utilities'\n            - 'C:\\Program Files (x86)\\Remote Utilities'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files')",
      "answer": "In order to detect execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files'), you should focus on monitoring process creation events on Windows systems. Look for processes that are initiated from executable files named 'rutserv.exe' or 'rfusclient.exe', which are associated with the Remote Utilities software. Additionally, check if the 'Product' attribute in the event logs matches 'Remote Utilities'. It's crucial to differentiate between legitimate and suspicious activities by excluding events where these processes start from the standard installation paths, namely 'C:\\Program Files\\Remote Utilities' and 'C:\\Program Files (x86)\\Remote Utilities'. By applying this monitoring strategy, any process creation event that matches these criteria but does not originate from the expected directories should be considered as a potential indicator of a Remote Utilities RAT being executed from an unusual location, which might suggest a malicious usage. This detection is categorized with a medium level of confidence due to the possibility of unknown false positives, indicating that while the criteria are specific, there may be legitimate scenarios that could inadvertently meet these conditions. This approach is designed to combat tactics and techniques like execution of malware and use of remote access tools by unauthorized entities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PAExec default named pipe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PAExec default named pipe, you should: Focus on monitoring the creation of named pipes in Windows systems, particularly through events that Sysmon logs under Event IDs 17 and 18, which pertain to pipe creation and connection events, respectively. To ensure these events are properly logged, you'll need to configure Sysmon with a configuration such as those available from popular repositories by SwiftOnSecurity, Neo23x0, or olafhartong. Effective detection hinges on identifying pipe names that start with '\\PAExec', a known indicator of the PAExec tool's usage, which might be leveraged by attackers for executing processes remotely. Although the activity's risk is regarded as medium, there exists a potential for false positives, which are currently undefined, indicating the need for cautious interpretation of detected events.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: pipe_created\n    product: windows\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PAExec'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: pipe_created\n    product: windows\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PAExec'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "PAExec default named pipe",
      "answer": "In order to detect PAExec default named pipe, you should: Focus on monitoring the creation of named pipes in Windows systems, particularly through events that Sysmon logs under Event IDs 17 and 18, which pertain to pipe creation and connection events, respectively. To ensure these events are properly logged, you'll need to configure Sysmon with a configuration such as those available from popular repositories by SwiftOnSecurity, Neo23x0, or olafhartong. Effective detection hinges on identifying pipe names that start with '\\PAExec', a known indicator of the PAExec tool's usage, which might be leveraged by attackers for executing processes remotely. Although the activity's risk is regarded as medium, there exists a potential for false positives, which are currently undefined, indicating the need for cautious interpretation of detected events."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email, you should monitor logs from the threat management service, specifically targeting the Microsoft 365 platform. Focus on identifying events where the SecurityComplianceCenter is the event source. Specifically, look for the event named 'User restricted from sending email' with a status marked as success. This indicates a successful action where a user has been restricted due to exceeding sending limits, aligning with security compliance policies. Be aware that it might be challenging to distinguish between genuine policy violations and benign activities that trigger similar alerts, as there could be unknown factors leading to false positives. The severity of this activity is considered medium, suggesting it requires attention to mitigate potential security or compliance issues.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'User restricted from sending email'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'User restricted from sending email'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email.",
      "answer": "In order to detect when a Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email, you should monitor logs from the threat management service, specifically targeting the Microsoft 365 platform. Focus on identifying events where the SecurityComplianceCenter is the event source. Specifically, look for the event named 'User restricted from sending email' with a status marked as success. This indicates a successful action where a user has been restricted due to exceeding sending limits, aligning with security compliance policies. Be aware that it might be challenging to distinguish between genuine policy violations and benign activities that trigger similar alerts, as there could be unknown factors leading to false positives. The severity of this activity is considered medium, suggesting it requires attention to mitigate potential security or compliance issues."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Office applications executing a child process that includes directory traversal patterns. This could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Office applications executing a child process that includes directory traversal patterns, which could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE), you should: monitor the creation of processes on Windows systems, specifically focusing on those spawned by Microsoft Office applications such as Word, Excel, PowerPoint, Access, Publisher, Equation Editor, and Visio. Look for command lines that contain directory traversal patterns such as '../../../..' or '..\\..\\..\\..' or '..//..//..//..'. These patterns suggest an attempt to break out of the restricted directory to potentially execute malicious files or commands located in other directories. This behavior is highly indicative of an attack aiming to exploit vulnerabilities in Microsoft Office products, warranting a high level of concern due to the potential for remote code execution and the consequent exposure to a significant risk.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\msaccess.exe'\n            - '\\mspub.exe'\n            - '\\eqnedt32.exe'\n            - '\\visio.exe'\n        CommandLine|contains:\n            - '../../../..'\n            - '..\\..\\..\\..'\n            - '..//..//..//..'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\msaccess.exe'\n            - '\\mspub.exe'\n            - '\\eqnedt32.exe'\n            - '\\visio.exe'\n        CommandLine|contains:\n            - '../../../..'\n            - '..\\..\\..\\..'\n            - '..//..//..//..'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Office applications executing a child process that includes directory traversal patterns. This could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE)",
      "answer": "In order to detect Office applications executing a child process that includes directory traversal patterns, which could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE), you should: monitor the creation of processes on Windows systems, specifically focusing on those spawned by Microsoft Office applications such as Word, Excel, PowerPoint, Access, Publisher, Equation Editor, and Visio. Look for command lines that contain directory traversal patterns such as '../../../..' or '..\\..\\..\\..' or '..//..//..//..'. These patterns suggest an attempt to break out of the restricted directory to potentially execute malicious files or commands located in other directories. This behavior is highly indicative of an attack aiming to exploit vulnerabilities in Microsoft Office products, warranting a high level of concern due to the potential for remote code execution and the consequent exposure to a significant risk."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting actions that clear the local ShimCache and remove forensic evidence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect actions that clear the local ShimCache and remove forensic evidence, you should monitor Windows process creations for specific command-line activity indicating such actions. Specifically, look for processes initiated with the `rundll32` command loading either `apphelp.dll` or `kernel32.dll` in conjunction with command-line parameters that involve ShimCache manipulation. The clear indicators for these actions are the presence of `ShimFlushCache` and `BaseFlushAppcompatCache` within the command line, often accompanied by numerical identifiers like `#250` and `#46`, respectively. These particular sequences suggest efforts to clear ShimCache, a Windows component that if cleared, can hamper forensic investigations by erasing valuable evidence. The importance of this detection is underscored by its high level of reliability, albeit with recognition of potential unknown false positives. Monitoring should focus on capturing the image path, the full command-line invocation, and the parent process's command line to gain comprehensive insight into potential evidence tampering efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'apphelp.dll'\n    selection1b:\n        CommandLine|contains:\n            - 'ShimFlushCache'\n            - '#250'\n    selection2a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'kernel32.dll'\n    selection2b:\n        CommandLine|contains:\n            - 'BaseFlushAppcompatCache'\n            - '#46'\n    condition: ( selection1a and selection1b ) or ( selection2a and selection2b )\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'apphelp.dll'\n    selection1b:\n        CommandLine|contains:\n            - 'ShimFlushCache'\n            - '#250'\n    selection2a:\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'kernel32.dll'\n    selection2b:\n        CommandLine|contains:\n            - 'BaseFlushAppcompatCache'\n            - '#46'\n    condition: ( selection1a and selection1b ) or ( selection2a and selection2b )\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "actions that clear the local ShimCache and remove forensic evidence",
      "answer": "In order to detect actions that clear the local ShimCache and remove forensic evidence, you should monitor Windows process creations for specific command-line activity indicating such actions. Specifically, look for processes initiated with the `rundll32` command loading either `apphelp.dll` or `kernel32.dll` in conjunction with command-line parameters that involve ShimCache manipulation. The clear indicators for these actions are the presence of `ShimFlushCache` and `BaseFlushAppcompatCache` within the command line, often accompanied by numerical identifiers like `#250` and `#46`, respectively. These particular sequences suggest efforts to clear ShimCache, a Windows component that if cleared, can hamper forensic investigations by erasing valuable evidence. The importance of this detection is underscored by its high level of reliability, albeit with recognition of potential unknown false positives. Monitoring should focus on capturing the image path, the full command-line invocation, and the parent process's command line to gain comprehensive insight into potential evidence tampering efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting TeamViewer_Desktop.exe is create during install.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of \"TeamViewer_Desktop.exe\" during an installation process, you should monitor for file events within the Windows environment. Specifically, look for any event where the target filename ends with '\\TeamViewer_Desktop.exe'. This approach is particularly important as it helps to identify potential misuse or malicious deployments of TeamViewer by tracking its installation footprint. Keep in mind that false positives are currently unknown, suggesting caution and further investigation for any alerts. The alert level for this kind of detection has been set to medium, highlighting its importance in the broader context of monitoring and threat detection activities related to various tactics and techniques, such as Execution, Persistence, or Privilege Escalation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\TeamViewer_Desktop.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\TeamViewer_Desktop.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "TeamViewer_Desktop.exe is create during install",
      "answer": "In order to detect the creation of \"TeamViewer_Desktop.exe\" during an installation process, you should monitor for file events within the Windows environment. Specifically, look for any event where the target filename ends with '\\TeamViewer_Desktop.exe'. This approach is particularly important as it helps to identify potential misuse or malicious deployments of TeamViewer by tracking its installation footprint. Keep in mind that false positives are currently unknown, suggesting caution and further investigation for any alerts. The alert level for this kind of detection has been set to medium, highlighting its importance in the broader context of monitoring and threat detection activities related to various tactics and techniques, such as Execution, Persistence, or Privilege Escalation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a remote file copy attempt to a hidden network share, which may indicate lateral movement or data staging activity, you should: Monitor for process creation events within Windows operating systems that involve command-line tools such as cmd.exe and powershell.exe. Specifically, look for instances where these tools execute commands containing the strings 'echo' and '>' along with a reference to a named pipe ('\\\\\\\\.\\\\pipe\\\\'), which is a method often used in scripting to redirect output to a network location in a covert fashion. Such activity could suggest an attempt at moving files to a hidden network share, potentially for malicious purposes like data theft or spreading within a network. It's important to be aware that there are legitimate cases where similar patterns may occur, so careful analysis is necessary to distinguish between benign and malicious behavior. The level of concern for such detections is considered high, indicating that immediate investigation is recommended upon alert.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n        - OriginalFileName:\n            - 'Cmd.Exe'\n            - 'PowerShell.EXE'\n    selection_args:\n        CommandLine|contains|all:\n            - 'echo'\n            - '>'\n            - '\\\\\\\\.\\\\pipe\\\\'\n    condition: all of selection*\nfalsepositives:\n    - Other programs that cause these patterns (please report)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n        - OriginalFileName:\n            - 'Cmd.Exe'\n            - 'PowerShell.EXE'\n    selection_args:\n        CommandLine|contains|all:\n            - 'echo'\n            - '>'\n            - '\\\\\\\\.\\\\pipe\\\\'\n    condition: all of selection*\nfalsepositives:\n    - Other programs that cause these patterns (please report)\nlevel: high\n",
      "question": "remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity.",
      "answer": "In order to detect a remote file copy attempt to a hidden network share, which may indicate lateral movement or data staging activity, you should: Monitor for process creation events within Windows operating systems that involve command-line tools such as cmd.exe and powershell.exe. Specifically, look for instances where these tools execute commands containing the strings 'echo' and '>' along with a reference to a named pipe ('\\\\\\\\.\\\\pipe\\\\'), which is a method often used in scripting to redirect output to a network location in a covert fashion. Such activity could suggest an attempt at moving files to a hidden network share, potentially for malicious purposes like data theft or spreading within a network. It's important to be aware that there are legitimate cases where similar patterns may occur, so careful analysis is necessary to distinguish between benign and malicious behavior. The level of concern for such detections is considered high, indicating that immediate investigation is recommended upon alert."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting loading of Amsi.dll by uncommon processes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect loading of Amsi.dll by uncommon processes, you should monitor for instances where the 'amsi.dll' file is being loaded into memory, but excluding those occurrences where the process loading 'amsi.dll' originates from known and common paths such as 'C:\\Windows\\explorer.exe', 'C:\\Windows\\Sysmon64.exe', or paths starting with 'C:\\Program Files', 'C:\\Windows\\System32', 'C:\\Windows\\SysWOW64', 'C:\\Windows\\WinSxS', and 'C:\\Windows\\Microsoft.NET\\Framework'. Additionally, specific exclusions are applied for Windows Defender processes starting in 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\' and ending with '\\MsMpEng.exe', as well as for .NET optimization service processes ending with '\\ngentask.exe'. Attention should also be given to processes that have no image path defined or have an empty value for the image path, as these cases are filtered out to avoid false alarms. While monitoring, it's important to consider that legitimate third-party applications installed in non-standard directories like \"ProgramData\" and \"AppData\" might load 'amsi.dll' without malicious intent, which could lead to false positives. Therefore, it's advised to calibrate the detection mechanism by incorporating additional filters as needed to distinguish between harmful and benign activities accurately. The security sensitivity level for this kind of activity is classified as low, indicating that while it's essential to monitor for such events, they do not always signal an immediate or high-risk threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\amsi.dll'\n    filter_main_exact:\n        Image:\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\Windows\\Sysmon64.exe'\n    filter_main_generic:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    filter_optional_defender:\n        Image|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_main_dotnet:\n        Image|startswith:\n            - 'C:\\Windows\\Microsoft.NET\\Framework\\'\n            - 'C:\\Windows\\Microsoft.NET\\Framework64\\'\n        Image|endswith: '\\ngentask.exe'\n    filter_main_null:\n        Image: null\n    filter_main_empty:\n        Image: ''\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate third party apps installed in \"ProgramData\" and \"AppData\" might generate some false positives. Apply additional filters accordingly\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\amsi.dll'\n    filter_main_exact:\n        Image:\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\Windows\\Sysmon64.exe'\n    filter_main_generic:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    filter_optional_defender:\n        Image|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_main_dotnet:\n        Image|startswith:\n            - 'C:\\Windows\\Microsoft.NET\\Framework\\'\n            - 'C:\\Windows\\Microsoft.NET\\Framework64\\'\n        Image|endswith: '\\ngentask.exe'\n    filter_main_null:\n        Image: null\n    filter_main_empty:\n        Image: ''\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate third party apps installed in \"ProgramData\" and \"AppData\" might generate some false positives. Apply additional filters accordingly\nlevel: low\n",
      "question": "loading of Amsi.dll by uncommon processes",
      "answer": "In order to detect loading of Amsi.dll by uncommon processes, you should monitor for instances where the 'amsi.dll' file is being loaded into memory, but excluding those occurrences where the process loading 'amsi.dll' originates from known and common paths such as 'C:\\Windows\\explorer.exe', 'C:\\Windows\\Sysmon64.exe', or paths starting with 'C:\\Program Files', 'C:\\Windows\\System32', 'C:\\Windows\\SysWOW64', 'C:\\Windows\\WinSxS', and 'C:\\Windows\\Microsoft.NET\\Framework'. Additionally, specific exclusions are applied for Windows Defender processes starting in 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\' and ending with '\\MsMpEng.exe', as well as for .NET optimization service processes ending with '\\ngentask.exe'. Attention should also be given to processes that have no image path defined or have an empty value for the image path, as these cases are filtered out to avoid false alarms. While monitoring, it's important to consider that legitimate third-party applications installed in non-standard directories like \"ProgramData\" and \"AppData\" might load 'amsi.dll' without malicious intent, which could lead to false positives. Therefore, it's advised to calibrate the detection mechanism by incorporating additional filters as needed to distinguish between harmful and benign activities accurately. The security sensitivity level for this kind of activity is classified as low, indicating that while it's essential to monitor for such events, they do not always signal an immediate or high-risk threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting commandline containing reference to files ending with a \".\" This scheme has been seen used by raspberry-robin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect commandline containing reference to files ending with a \".\", which has been seen used by raspberry-robin, you should monitor the creation of processes on Windows systems. Specifically, focus on the command lines that include references to files that end with a period followed by 1 to 6 characters but do not match at the end of the line due to potential false positives with bind DNS notation. This detection strategy is considered high priority due to the risk associated with the observed behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Example 1: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-3f-raspberryrobin-runonce.png\n        # Example 2: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-5f-odbcconf.png\n        # Example 3: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-6f-fauppod-command-line.png\n        CommandLine|re: \\\\[a-zA-Z0-9]{1,32}\\.[a-zA-Z0-9]{1,6}\\.[ \"']{1}  # cannot match on end-of-line because of FPs with bind DNS notation\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Example 1: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-3f-raspberryrobin-runonce.png\n        # Example 2: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-5f-odbcconf.png\n        # Example 3: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-6f-fauppod-command-line.png\n        CommandLine|re: \\\\[a-zA-Z0-9]{1,32}\\.[a-zA-Z0-9]{1,6}\\.[ \"']{1}  # cannot match on end-of-line because of FPs with bind DNS notation\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "commandline containing reference to files ending with a \".\" This scheme has been seen used by raspberry-robin",
      "answer": "In order to detect commandline containing reference to files ending with a \".\", which has been seen used by raspberry-robin, you should monitor the creation of processes on Windows systems. Specifically, focus on the command lines that include references to files that end with a period followed by 1 to 6 characters but do not match at the end of the line due to potential false positives with bind DNS notation. This detection strategy is considered high priority due to the risk associated with the observed behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation of Microsoft Exchange vulnerability as described in CVE-2020-0688.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the exploitation of Microsoft Exchange vulnerability as described in CVE-2020-0688, you should: monitor Windows application service logs for specific events that indicate potential exploitation activity. Look for two main types of indicators. Firstly, check for log entries with an EventID of 4, where the Provider Name is 'MSExchange Control Panel' and the log level is marked as Error. These logs may signal an attempt to exploit the vulnerability. Secondly, pay attention to any instances where the log entries contain the string '&__VIEWSTATE=', as this is commonly associated with attacks attempting to exploit this specific vulnerability in Microsoft Exchange. It's important to monitor for both sets of criteria to accurately detect potential exploits. Be aware that there may be unknown false positives, indicating that not every detection might be an actual exploit attempt. The significance of these detections is high, underscoring the critical nature of the vulnerability being targeted. These monitoring practices are directly aligned with efforts to combat Initial Access tactics, specifically through the exploitation of public-facing applications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\ndetection:\n    selection1:\n        EventID: 4\n        Provider_Name: 'MSExchange Control Panel'\n        Level: Error\n    selection2:\n        - '&__VIEWSTATE='\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\ndetection:\n    selection1:\n        EventID: 4\n        Provider_Name: 'MSExchange Control Panel'\n        Level: Error\n    selection2:\n        - '&__VIEWSTATE='\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "exploitation of Microsoft Exchange vulnerability as described in CVE-2020-0688",
      "answer": "In order to detect the exploitation of Microsoft Exchange vulnerability as described in CVE-2020-0688, you should: monitor Windows application service logs for specific events that indicate potential exploitation activity. Look for two main types of indicators. Firstly, check for log entries with an EventID of 4, where the Provider Name is 'MSExchange Control Panel' and the log level is marked as Error. These logs may signal an attempt to exploit the vulnerability. Secondly, pay attention to any instances where the log entries contain the string '&__VIEWSTATE=', as this is commonly associated with attacks attempting to exploit this specific vulnerability in Microsoft Exchange. It's important to monitor for both sets of criteria to accurately detect potential exploits. Be aware that there may be unknown false positives, indicating that not every detection might be an actual exploit attempt. The significance of these detections is high, underscoring the critical nature of the vulnerability being targeted. These monitoring practices are directly aligned with efforts to combat Initial Access tactics, specifically through the exploitation of public-facing applications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: Monitor Windows process creation logs for the execution of specific PowerShell commands that indicate the manipulation and deletion of Volume Shadow Copies. Pay attention to command lines that contain 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim', which are used to interact with Windows Management Instrumentation (WMI) objects, and specifically look for command lines that invoke 'Win32_Shadowcopy' indicating shadow copy interaction. Moreover, closely monitor for command lines including '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', and 'rcim', as these are indicative of attempts to delete these shadow copies. The use of such commands should be treated with high suspicion as they can often relate to ransomware or other malicious activities aimed at preventing system recovery. False positives might occur, but due to the nature of the activity \u2013 a high level of scrutiny is recommended when such patterns are detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_get:\n        CommandLine|contains:\n            - 'Get-WmiObject'\n            - 'gwmi'\n            - 'Get-CimInstance'\n            - 'gcim'\n    selection_shadowcopy:\n        CommandLine|contains: 'Win32_Shadowcopy'\n    selection_delete:\n        CommandLine|contains:\n            - '.Delete()'\n            - 'Remove-WmiObject'\n            - 'rwmi'\n            - 'Remove-CimInstance'\n            - 'rcim'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_get:\n        CommandLine|contains:\n            - 'Get-WmiObject'\n            - 'gwmi'\n            - 'Get-CimInstance'\n            - 'gcim'\n    selection_shadowcopy:\n        CommandLine|contains: 'Win32_Shadowcopy'\n    selection_delete:\n        CommandLine|contains:\n            - '.Delete()'\n            - 'Remove-WmiObject'\n            - 'rwmi'\n            - 'Remove-CimInstance'\n            - 'rcim'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
      "answer": "In order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: Monitor Windows process creation logs for the execution of specific PowerShell commands that indicate the manipulation and deletion of Volume Shadow Copies. Pay attention to command lines that contain 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim', which are used to interact with Windows Management Instrumentation (WMI) objects, and specifically look for command lines that invoke 'Win32_Shadowcopy' indicating shadow copy interaction. Moreover, closely monitor for command lines including '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', and 'rcim', as these are indicative of attempts to delete these shadow copies. The use of such commands should be treated with high suspicion as they can often relate to ransomware or other malicious activities aimed at preventing system recovery. False positives might occur, but due to the nature of the activity \u2013 a high level of scrutiny is recommended when such patterns are detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tampering of RDP Terminal Service/Server sensitive settings.\nSuch as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections'...etc\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tampering of RDP Terminal Service/Server sensitive settings such as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections', you should: Monitor Windows registry settings related to Terminal Services for unauthorized modifications. Specifically, look for changes to registry values under `SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\` and `\\Control\\Terminal Server\\` that pertain to remote session shadowing configurations and permissions. This includes alterations to settings that determine whether full control or view session permissions are given either with or without the user's permission, represented by DWORD values ranging from 0x00000001 to 0x00000004. Additionally, pay attention to modifications that allow unsolicited remote assistance offers (`fAllowUnsolicited` and `fAllowUnsolicitedFullControl`) signified by setting these values to 'DWORD (0x00000001)'. It's also crucial to monitor for any changes aiming to tamper with the RDP service directly, such as modifications to the `ServiceDll` under the TermService parameters, or the setting of initial programs to run automatically upon logging in to a remote computer through RDP paths. Be alert to these changes as they indicate attempts to hijack or misuse Terminal Services for unauthorized access or control. Adjustments to these specific registry keys and values may not always be malicious, as administrators may alter them for legitimate policy settings, nevertheless, these modifications require thorough investigation due to their high-risk nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_shadow:\n        EventType: SetValue\n        TargetObject|contains:\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\'\n            - '\\Control\\Terminal Server\\'\n        TargetObject|endswith: '\\Shadow'\n        Details:\n            - 'DWORD (0x00000001)' # Full Control with user\u2019s permission\n            - 'DWORD (0x00000002)' # Full Control without user\u2019s permission\n            - 'DWORD (0x00000003)' # View Session with user\u2019s permission\n            - 'DWORD (0x00000004)' # View Session without user\u2019s permission\n    selection_terminal_services_key:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Control\\Terminal Server\\'\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\'\n    selection_terminal_services_values:\n        TargetObject|endswith:\n            - '\\fAllowUnsolicited' # Allow unsolicited remote assistance offers\n            - '\\fAllowUnsolicitedFullControl'\n        Details: 'DWORD (0x00000001)'\n    selection_tamper_only:\n        # Any changes to these keys should be suspicious and looked at\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\services\\TermService\\Parameters\\ServiceDll' # RDP hijacking\n            - '\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n            - '\\Control\\Terminal Server\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n    condition: selection_shadow or (selection_terminal_services_key and selection_terminal_services_values) or selection_tamper_only\nfalsepositives:\n    - Some of the keys mentioned here could be modified by an administrator while setting group policy (it should be investigated either way)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_shadow:\n        EventType: SetValue\n        TargetObject|contains:\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\'\n            - '\\Control\\Terminal Server\\'\n        TargetObject|endswith: '\\Shadow'\n        Details:\n            - 'DWORD (0x00000001)' # Full Control with user\u2019s permission\n            - 'DWORD (0x00000002)' # Full Control without user\u2019s permission\n            - 'DWORD (0x00000003)' # View Session with user\u2019s permission\n            - 'DWORD (0x00000004)' # View Session without user\u2019s permission\n    selection_terminal_services_key:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Control\\Terminal Server\\'\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\'\n    selection_terminal_services_values:\n        TargetObject|endswith:\n            - '\\fAllowUnsolicited' # Allow unsolicited remote assistance offers\n            - '\\fAllowUnsolicitedFullControl'\n        Details: 'DWORD (0x00000001)'\n    selection_tamper_only:\n        # Any changes to these keys should be suspicious and looked at\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\services\\TermService\\Parameters\\ServiceDll' # RDP hijacking\n            - '\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n            - '\\Control\\Terminal Server\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n    condition: selection_shadow or (selection_terminal_services_key and selection_terminal_services_values) or selection_tamper_only\nfalsepositives:\n    - Some of the keys mentioned here could be modified by an administrator while setting group policy (it should be investigated either way)\nlevel: high\n",
      "question": "tampering of RDP Terminal Service/Server sensitive settings.\nSuch as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections'...etc\n",
      "answer": "In order to detect tampering of RDP Terminal Service/Server sensitive settings such as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections', you should: Monitor Windows registry settings related to Terminal Services for unauthorized modifications. Specifically, look for changes to registry values under `SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\` and `\\Control\\Terminal Server\\` that pertain to remote session shadowing configurations and permissions. This includes alterations to settings that determine whether full control or view session permissions are given either with or without the user's permission, represented by DWORD values ranging from 0x00000001 to 0x00000004. Additionally, pay attention to modifications that allow unsolicited remote assistance offers (`fAllowUnsolicited` and `fAllowUnsolicitedFullControl`) signified by setting these values to 'DWORD (0x00000001)'. It's also crucial to monitor for any changes aiming to tamper with the RDP service directly, such as modifications to the `ServiceDll` under the TermService parameters, or the setting of initial programs to run automatically upon logging in to a remote computer through RDP paths. Be alert to these changes as they indicate attempts to hijack or misuse Terminal Services for unauthorized access or control. Adjustments to these specific registry keys and values may not always be malicious, as administrators may alter them for legitimate policy settings, nevertheless, these modifications require thorough investigation due to their high-risk nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries can abuse wuauclt.exe (Windows Update client) to run code execution by specifying an arbitrary DLL..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to prevent adversaries from abusing the Windows Update client (wuauclt.exe) for arbitrary code execution, you should: monitor process creation logs in Windows for instances where the command line includes wuauclt.exe along with the flags '/UpdateDeploymentProvider' and '/Runhandlercomserver'. It is important to exclude instances where the command line also contains references to 'wuaueng.dll' or 'UpdateDeploymentProvider.dll /ClassId' as these are associated with legitimate operations of Windows Update. Paying attention to such command line patterns can help distinguish malicious use of wuauclt.exe aimed at executing code through unauthorized DLLs. This detection strategy is crucial for defending against techniques focused on evasion and execution, specifically those involving the abuse of signed binaries to bypass security controls.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'wuauclt.exe'\n            - '/UpdateDeploymentProvider'\n            - '/Runhandlercomserver'\n    filter:\n        CommandLine|contains:\n            - 'wuaueng.dll'\n            - 'UpdateDeploymentProvider.dll /ClassId'\n    condition: selection and not filter\nfalsepositives:\n    - Wuaueng.dll which is a module belonging to Microsoft Windows Update.\nfields:\n    - CommandLine\nlevel: medium\ntags:\n    - attack.defense_evasion\n    - attack.execution\n    - attack.t1218\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'wuauclt.exe'\n            - '/UpdateDeploymentProvider'\n            - '/Runhandlercomserver'\n    filter:\n        CommandLine|contains:\n            - 'wuaueng.dll'\n            - 'UpdateDeploymentProvider.dll /ClassId'\n    condition: selection and not filter\nfalsepositives:\n    - Wuaueng.dll which is a module belonging to Microsoft Windows Update.\nfields:\n    - CommandLine\nlevel: medium\ntags:\n    - attack.defense_evasion\n    - attack.execution\n    - attack.t1218\n",
      "question": "Adversaries can abuse wuauclt.exe (Windows Update client) to run code execution by specifying an arbitrary DLL.",
      "answer": "In order to prevent adversaries from abusing the Windows Update client (wuauclt.exe) for arbitrary code execution, you should: monitor process creation logs in Windows for instances where the command line includes wuauclt.exe along with the flags '/UpdateDeploymentProvider' and '/Runhandlercomserver'. It is important to exclude instances where the command line also contains references to 'wuaueng.dll' or 'UpdateDeploymentProvider.dll /ClassId' as these are associated with legitimate operations of Windows Update. Paying attention to such command line patterns can help distinguish malicious use of wuauclt.exe aimed at executing code through unauthorized DLLs. This detection strategy is crucial for defending against techniques focused on evasion and execution, specifically those involving the abuse of signed binaries to bypass security controls."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell scripts with potential registry reconnaissance capabilities. Adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell scripts with potential registry reconnaissance capabilities, where adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software, you should: monitor Windows PowerShell scripts for specific patterns of accessing the registry. Focus on script block logging, specifically on scripts that involve commands like Get-Item, gci, or Get-ChildItem, followed within a short distance by a '-Path' argument that points towards critical registry paths. These paths include locations within the registry such as 'currentcontrolset\\\\services', 'CurrentVersion\\\\Policies\\\\Explorer\\\\Run', 'CurrentVersion\\\\Run', 'CurrentVersion\\\\ShellServiceObjectDelayLoad', and 'CurrentVersion\\\\Windows\\\\winlogon', which are often queried by adversaries looking for valuable information or settings to exploit. Remember, this detection requires that PowerShell's Script Block Logging feature is enabled to capture the relevant script content for analysis. Be aware that there might be false positives due to the nature of the script block, so use this method as a tool for hunting potential malicious activities rather than definitive evidence. The detection level set for this activity is medium, indicating it requires additional investigation when alerted.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        # TODO: switch to |re|i: after sigma specification v2 is released\n        ScriptBlockText|re: '(Get-Item|gci|Get-ChildItem).{1,64}-Path.{1,64}\\\\(currentcontrolset\\\\services|CurrentVersion\\\\Policies\\\\Explorer\\\\Run|CurrentVersion\\\\Run|CurrentVersion\\\\ShellServiceObjectDelayLoad|CurrentVersion\\\\Windows\\winlogon)\\\\'\n    condition: selection\nfalsepositives:\n    - Due to the nature of the script block, the matching of the string could sometimes result in a false positive. Use this rule to hunt for potential malicious or suspicious scripts.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        # TODO: switch to |re|i: after sigma specification v2 is released\n        ScriptBlockText|re: '(Get-Item|gci|Get-ChildItem).{1,64}-Path.{1,64}\\\\(currentcontrolset\\\\services|CurrentVersion\\\\Policies\\\\Explorer\\\\Run|CurrentVersion\\\\Run|CurrentVersion\\\\ShellServiceObjectDelayLoad|CurrentVersion\\\\Windows\\winlogon)\\\\'\n    condition: selection\nfalsepositives:\n    - Due to the nature of the script block, the matching of the string could sometimes result in a false positive. Use this rule to hunt for potential malicious or suspicious scripts.\nlevel: medium\n",
      "question": "PowerShell scripts with potential registry reconnaissance capabilities. Adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software.",
      "answer": "In order to detect PowerShell scripts with potential registry reconnaissance capabilities, where adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software, you should: monitor Windows PowerShell scripts for specific patterns of accessing the registry. Focus on script block logging, specifically on scripts that involve commands like Get-Item, gci, or Get-ChildItem, followed within a short distance by a '-Path' argument that points towards critical registry paths. These paths include locations within the registry such as 'currentcontrolset\\\\services', 'CurrentVersion\\\\Policies\\\\Explorer\\\\Run', 'CurrentVersion\\\\Run', 'CurrentVersion\\\\ShellServiceObjectDelayLoad', and 'CurrentVersion\\\\Windows\\\\winlogon', which are often queried by adversaries looking for valuable information or settings to exploit. Remember, this detection requires that PowerShell's Script Block Logging feature is enabled to capture the relevant script content for analysis. Be aware that there might be false positives due to the nature of the script block, so use this method as a tool for hunting potential malicious activities rather than definitive evidence. The detection level set for this activity is medium, indicating it requires additional investigation when alerted."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt against log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts against the log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell), you should monitor web server log entries for specific patterns that indicate an attack attempt. Focus should be on the 'User-Agent', 'URI Query', and 'Referer' header fields of web traffic. These fields are commonly abused by attackers to deliver malicious payloads exploiting the Log4Shell vulnerability. \n\nLook out for the presence of certain key patterns within these fields, which include variations of the JNDI lookup strings such as '${jndi:ldap:/', '${jndi:rmi:/', and others that involve encoded versions of these strings or manipulations aimed at evading simple detection mechanisms (e.g., '${base64:JHtqbmRp', '${${env:BARFOO:-j}', and '${${lower:j}ndi:'). Also, signs of obfuscation like strings containing encoded '${jndi:' and other crafted entries indicating attempts to leverage the Log4Shell vulnerability should be carefully examined.\n\nIt's important to adjust monitoring tools to detect these specific patterns in the 'User-Agent', 'URI Query', and 'Referer' fields to promptly identify and respond to potential exploitation attempts. However, be mindful of possible false positives, such as those that might arise from vulnerability scanning activities, and adjust the detection mechanisms accordingly. The level of threat associated with these detection patterns is considered high, underscoring the necessity of implementing these measures to secure web servers against this critical vulnerability.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-user-agent|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    # selection2:\n        # user-agent|contains:\n            # - '${jndi:ldap:/'\n            # - '${jndi:rmi:/'\n            # - '${jndi:ldaps:/'\n            # - '${jndi:dns:/'\n            # - '/$%7bjndi:'\n            # - '%24%7bjndi:'\n            # - '$%7Bjndi:'\n            # - '%2524%257Bjndi'\n            # - '%2F%252524%25257Bjndi%3A'\n            # - '${jndi:${lower:'\n            # - '${::-j}${'\n            # - '${jndi:nis'\n            # - '${jndi:nds'\n            # - '${jndi:corba'\n            # - '${jndi:iiop'\n            # - 'Reference Class Name: foo'\n            # - '${${env:BARFOO:-j}'\n            # - '${::-l}${::-d}${::-a}${::-p}'\n            # - '${base64:JHtqbmRp'\n            # - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            # - '${${lower:j}ndi:'\n            # - '${${upper:j}ndi:'\n            # - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection3:\n        cs-uri-query|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection4:\n        cs-referer|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    condition: 1 of selection*\nfalsepositives:\n    - Vulnerability scanning\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-user-agent|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    # selection2:\n        # user-agent|contains:\n            # - '${jndi:ldap:/'\n            # - '${jndi:rmi:/'\n            # - '${jndi:ldaps:/'\n            # - '${jndi:dns:/'\n            # - '/$%7bjndi:'\n            # - '%24%7bjndi:'\n            # - '$%7Bjndi:'\n            # - '%2524%257Bjndi'\n            # - '%2F%252524%25257Bjndi%3A'\n            # - '${jndi:${lower:'\n            # - '${::-j}${'\n            # - '${jndi:nis'\n            # - '${jndi:nds'\n            # - '${jndi:corba'\n            # - '${jndi:iiop'\n            # - 'Reference Class Name: foo'\n            # - '${${env:BARFOO:-j}'\n            # - '${::-l}${::-d}${::-a}${::-p}'\n            # - '${base64:JHtqbmRp'\n            # - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            # - '${${lower:j}ndi:'\n            # - '${${upper:j}ndi:'\n            # - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection3:\n        cs-uri-query|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection4:\n        cs-referer|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    condition: 1 of selection*\nfalsepositives:\n    - Vulnerability scanning\nlevel: high\n",
      "question": "exploitation attempt against log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell)",
      "answer": "In order to detect exploitation attempts against the log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell), you should monitor web server log entries for specific patterns that indicate an attack attempt. Focus should be on the 'User-Agent', 'URI Query', and 'Referer' header fields of web traffic. These fields are commonly abused by attackers to deliver malicious payloads exploiting the Log4Shell vulnerability. \n\nLook out for the presence of certain key patterns within these fields, which include variations of the JNDI lookup strings such as '${jndi:ldap:/', '${jndi:rmi:/', and others that involve encoded versions of these strings or manipulations aimed at evading simple detection mechanisms (e.g., '${base64:JHtqbmRp', '${${env:BARFOO:-j}', and '${${lower:j}ndi:'). Also, signs of obfuscation like strings containing encoded '${jndi:' and other crafted entries indicating attempts to leverage the Log4Shell vulnerability should be carefully examined.\n\nIt's important to adjust monitoring tools to detect these specific patterns in the 'User-Agent', 'URI Query', and 'Referer' fields to promptly identify and respond to potential exploitation attempts. However, be mindful of possible false positives, such as those that might arise from vulnerability scanning activities, and adjust the detection mechanisms accordingly. The level of threat associated with these detection patterns is considered high, underscoring the necessity of implementing these measures to secure web servers against this critical vulnerability."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys. Often used by attacker to allow the ransomware to work in safe mode as some security products do not.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys, often used by attacker to allow the ransomware to work in safe mode as some security products do not, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the \"reg.exe\" program is executed, indicated either by the program's image name ending with 'reg.exe' or the original file name being 'reg.exe'. Additionally, pay attention to the command line arguments accompanying the execution of \"reg.exe\". It's critical to identify instances where the command line includes references to the system's safe boot configuration, specifically paths containing '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'. Moreover, detect command lines that include the use of 'copy' or 'add' commands, which are red flags for potential malicious activity aimed at modifying the registry to ensure malware persistence even in safe mode. Given the unlikely chance of false positives and the high severity of such an action, prompt and thorough investigation is warranted upon detection of these criteria.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: 'reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_safeboot:\n        CommandLine|contains: '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'\n    selection_flag:\n        CommandLine|contains:\n            - ' copy '\n            - ' add '\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: 'reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_safeboot:\n        CommandLine|contains: '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'\n    selection_flag:\n        CommandLine|contains:\n            - ' copy '\n            - ' add '\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys. Often used by attacker to allow the ransomware to work in safe mode as some security products do not",
      "answer": "In order to detect execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys, often used by attacker to allow the ransomware to work in safe mode as some security products do not, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the \"reg.exe\" program is executed, indicated either by the program's image name ending with 'reg.exe' or the original file name being 'reg.exe'. Additionally, pay attention to the command line arguments accompanying the execution of \"reg.exe\". It's critical to identify instances where the command line includes references to the system's safe boot configuration, specifically paths containing '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'. Moreover, detect command lines that include the use of 'copy' or 'add' commands, which are red flags for potential malicious activity aimed at modifying the registry to ensure malware persistence even in safe mode. Given the unlikely chance of false positives and the high severity of such an action, prompt and thorough investigation is warranted upon detection of these criteria."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of HackSys Extreme Vulnerable Driver which is an intentionally vulnerable Windows driver developed for security enthusiasts to learn and polish their exploitation skills at Kernel level and often abused by threat actors.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of HackSys Extreme Vulnerable Driver which is an intentionally vulnerable Windows driver developed for security enthusiasts to learn and polish their exploitation skills at Kernel level and often abused by threat actors, you should: Focus on monitoring driver load activities specifically on Windows systems. Look for instances where the driver 'HEVD.sys' is loaded, as indicated by the image name ending with '\\HEVD.sys'. Additionally, pay special attention to the cryptographic hash values of the driver files, particularly the Import Hash (IMPHASH). Be on the lookout for hashes 'f26d0b110873a1c7d8c4f08fbeab89c5' and 'c46ea2e651fd5f7f716c8867c6d13594', which are associated with known versions of the HackSys Extreme Vulnerable Driver, specifically version 3.0. This approach involves scrutinizing various detection points, including direct image load detection and hash value comparison. The likelihood of these specific instances being false positives is low, indicating a high level of confidence in the detection of this activity. This strategy is crucial for identifying and mitigating attempts to exploit kernel vulnerabilities through the use of known vulnerable drivers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_name:\n        ImageLoaded|endswith: '\\HEVD.sys'\n    selection_sysmon:\n        Hashes|contains:\n            - 'IMPHASH=f26d0b110873a1c7d8c4f08fbeab89c5' #Version 3.0\n            - 'IMPHASH=c46ea2e651fd5f7f716c8867c6d13594' #Version 3.0\n    selection_other:\n        Imphash:\n            - 'f26d0b110873a1c7d8c4f08fbeab89c5' #Version 3.0\n            - 'c46ea2e651fd5f7f716c8867c6d13594' #Version 3.0\n    condition: 1 of selection*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_name:\n        ImageLoaded|endswith: '\\HEVD.sys'\n    selection_sysmon:\n        Hashes|contains:\n            - 'IMPHASH=f26d0b110873a1c7d8c4f08fbeab89c5' #Version 3.0\n            - 'IMPHASH=c46ea2e651fd5f7f716c8867c6d13594' #Version 3.0\n    selection_other:\n        Imphash:\n            - 'f26d0b110873a1c7d8c4f08fbeab89c5' #Version 3.0\n            - 'c46ea2e651fd5f7f716c8867c6d13594' #Version 3.0\n    condition: 1 of selection*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "load of HackSys Extreme Vulnerable Driver which is an intentionally vulnerable Windows driver developed for security enthusiasts to learn and polish their exploitation skills at Kernel level and often abused by threat actors",
      "answer": "In order to detect the load of HackSys Extreme Vulnerable Driver which is an intentionally vulnerable Windows driver developed for security enthusiasts to learn and polish their exploitation skills at Kernel level and often abused by threat actors, you should: Focus on monitoring driver load activities specifically on Windows systems. Look for instances where the driver 'HEVD.sys' is loaded, as indicated by the image name ending with '\\HEVD.sys'. Additionally, pay special attention to the cryptographic hash values of the driver files, particularly the Import Hash (IMPHASH). Be on the lookout for hashes 'f26d0b110873a1c7d8c4f08fbeab89c5' and 'c46ea2e651fd5f7f716c8867c6d13594', which are associated with known versions of the HackSys Extreme Vulnerable Driver, specifically version 3.0. This approach involves scrutinizing various detection points, including direct image load detection and hash value comparison. The likelihood of these specific instances being false positives is low, indicating a high level of confidence in the detection of this activity. This strategy is crucial for identifying and mitigating attempts to exploit kernel vulnerabilities through the use of known vulnerable drivers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting using Diskshadow.exe to execute arbitrary code in text file.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect using Diskshadow.exe to execute arbitrary code in text file, you should: focus on monitoring process creation events within Windows environments. Specifically, look for instances where the process name ends with '\\diskshadow.exe' and the command line includes either '/s' or '-s' parameters. These characteristics are indicative of attempts to use the Diskshadow utility, a legitimate Windows tool, for malicious purposes such as executing arbitrary code through scripts. It is important to capture the command line arguments in the logs for further analysis. Be mindful that in environments where Diskshadow is used for legitimate backup processes by administrators, these indicators may lead to false positives. The severity of this detection is considered high due to the potential misuse of the Diskshadow tool for executing unauthorized code.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\diskshadow.exe'\n        CommandLine|contains:\n            - '/s'\n            - '-s'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - False postitve can be if administrators use diskshadow tool in their infrastructure as a main backup tool with scripts.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\diskshadow.exe'\n        CommandLine|contains:\n            - '/s'\n            - '-s'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - False postitve can be if administrators use diskshadow tool in their infrastructure as a main backup tool with scripts.\nlevel: high\n",
      "question": "using Diskshadow.exe to execute arbitrary code in text file",
      "answer": "In order to detect using Diskshadow.exe to execute arbitrary code in text file, you should: focus on monitoring process creation events within Windows environments. Specifically, look for instances where the process name ends with '\\diskshadow.exe' and the command line includes either '/s' or '-s' parameters. These characteristics are indicative of attempts to use the Diskshadow utility, a legitimate Windows tool, for malicious purposes such as executing arbitrary code through scripts. It is important to capture the command line arguments in the logs for further analysis. Be mindful that in environments where Diskshadow is used for legitimate backup processes by administrators, these indicators may lead to false positives. The severity of this detection is considered high due to the potential misuse of the Diskshadow tool for executing unauthorized code."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may employ various system checks to detect and avoid virtualization and analysis environments.\nThis may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who employ various system checks to avoid virtualization and analysis environments, you should focus on monitoring PowerShell scripts within Windows environments. It is essential that Script Block Logging is enabled to capture the PowerShell script activities accurately. The detection strategy involves looking for scripts that contain keywords indicative of system information queries, specifically those that use PowerShell commands like `Get-WmiObject` or its alias `gwmi`. Additionally, scripts querying for specific system information such as `MSAcpi_ThermalZoneTemperature` or `Win32_ComputerSystem` are also red flags. These particular queries are often used by adversaries to gather information about the system, which can help them determine if an analysis or virtualized environment is present, thus enabling them to change their behavior to avoid detection. The detection strategy encompasses monitoring all these elements. Although the potential for false positives exists, the severity level for such detections is considered medium, indicating a balanced approach towards identifying malicious activity without overwhelming the analysts with benign alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - Get-WmiObject\n            - gwmi\n    selection_module:\n        ScriptBlockText|contains:\n            - MSAcpi_ThermalZoneTemperature\n            - Win32_ComputerSystem\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - Get-WmiObject\n            - gwmi\n    selection_module:\n        ScriptBlockText|contains:\n            - MSAcpi_ThermalZoneTemperature\n            - Win32_ComputerSystem\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments.\nThis may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox\n",
      "answer": "In order to detect adversaries who employ various system checks to avoid virtualization and analysis environments, you should focus on monitoring PowerShell scripts within Windows environments. It is essential that Script Block Logging is enabled to capture the PowerShell script activities accurately. The detection strategy involves looking for scripts that contain keywords indicative of system information queries, specifically those that use PowerShell commands like `Get-WmiObject` or its alias `gwmi`. Additionally, scripts querying for specific system information such as `MSAcpi_ThermalZoneTemperature` or `Win32_ComputerSystem` are also red flags. These particular queries are often used by adversaries to gather information about the system, which can help them determine if an analysis or virtualized environment is present, thus enabling them to change their behavior to avoid detection. The detection strategy encompasses monitoring all these elements. Although the potential for false positives exists, the severity level for such detections is considered medium, indicating a balanced approach towards identifying malicious activity without overwhelming the analysts with benign alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution, you should: Monitor process creation logs on Windows systems for instances where the PSEXESVC.exe file, specifically located at C:\\Windows\\PSEXESVC.exe and bearing the original file name 'psexesvc.exe', is initiated. This detection helps in identifying potential malicious usage of the PsExec tool for remote execution, which could indicate a system compromise. Bear in mind, however, that the detection can generate alerts for legitimate administrative tasks that also use PsExec, hence such activities are considered as potential false positives and the alert level is set at medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image: 'C:\\Windows\\PSEXESVC.exe'\n        - OriginalFileName: 'psexesvc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative tasks\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image: 'C:\\Windows\\PSEXESVC.exe'\n        - OriginalFileName: 'psexesvc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative tasks\nlevel: medium\n",
      "question": "launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution",
      "answer": "In order to detect the launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution, you should: Monitor process creation logs on Windows systems for instances where the PSEXESVC.exe file, specifically located at C:\\Windows\\PSEXESVC.exe and bearing the original file name 'psexesvc.exe', is initiated. This detection helps in identifying potential malicious usage of the PsExec tool for remote execution, which could indicate a system compromise. Bear in mind, however, that the detection can generate alerts for legitimate administrative tasks that also use PsExec, hence such activities are considered as potential false positives and the alert level is set at medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious session with two users present.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious sessions with two users present, you should focus on monitoring logs from Linux systems, specifically those that pertain to the Guacamole service. The detection mechanism hinges on the identification of logs that explicitly mention \"2 users now present.\" This phrase serves as a key indicator that a session may be compromised or suspicious due to the presence of an unexpected additional user. Since Guacamole is often employed for remote desktop access, any indication of an unexpected second user could suggest a security breach or an unauthorized access attempt.\n\nIt's vital to note that the detection strategy is classified with a high level of importance, suggesting such occurrences are taken seriously and should be investigated promptly. However, due to the broad and somewhat unspecified nature of this detection method, it is acknowledged that there might be unknown false positives. This means that while alerts generated from this detection method require investigation, not all will necessarily correlate with malicious activity. The vigilance in monitoring and analyzing Guacamole service logs for the mentioned phrase will be a critical step in identifying potential breaches attempting to utilize or exploit remote access services in a Linux environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: guacamole\ndetection:\n    selection:\n        - '(2 users now present)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: guacamole\ndetection:\n    selection:\n        - '(2 users now present)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious session with two users present",
      "answer": "In order to detect suspicious sessions with two users present, you should focus on monitoring logs from Linux systems, specifically those that pertain to the Guacamole service. The detection mechanism hinges on the identification of logs that explicitly mention \"2 users now present.\" This phrase serves as a key indicator that a session may be compromised or suspicious due to the presence of an unexpected additional user. Since Guacamole is often employed for remote desktop access, any indication of an unexpected second user could suggest a security breach or an unauthorized access attempt.\n\nIt's vital to note that the detection strategy is classified with a high level of importance, suggesting such occurrences are taken seriously and should be investigated promptly. However, due to the broad and somewhat unspecified nature of this detection method, it is acknowledged that there might be unknown false positives. This means that while alerts generated from this detection method require investigation, not all will necessarily correlate with malicious activity. The vigilance in monitoring and analyzing Guacamole service logs for the mentioned phrase will be a critical step in identifying potential breaches attempting to utilize or exploit remote access services in a Linux environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries abusing msiexec.exe to proxy execution of malicious payloads, which is a technique often seen where msiexec.exe, a utility commonly used for executing installation packages (.msi), is manipulated for executing malicious code or payloads, you should:\n\nMonitor Windows process creation logs for occurrences of msiexec.exe being executed. Specifically, look for the process image ending with '\\msiexec.exe' or having an original filename of 'msiexec.exe'. Additionally, inspect the command line arguments used during the execution of msiexec.exe for flags related to installation (/i or -i), package management (/package or -package), administrative installation (/a or -a), advertising a product without installing it (/j or -j), and especially for silent installation flags (/q or -q), which are often used by attackers to hide their activities.\n\nHowever, you need to apply certain filters to reduce false positives. Exclude cases where the parent process image path suggests a benign origin, such as processes initiating from the user's temp folder ('C:\\Users\\[User Name]\\AppData\\Local\\Temp\\' indicates a common location for legitimate installers), the system's temp folder ('C:\\Windows\\Temp\\'), or the CCM folder ('C:\\Windows\\CCM\\Ccm32BitLauncher.exe') often involved in legitimate operations, particularly if executed with system integrity level. \n\nUnderstanding that sometimes legitimate Windows applications may use these techniques for updates or system functions, be mindful of false positives, notably Windows Apps installing updates silently using msiexec.exe with the quiet flag.\n\nTaking these steps enables you to better identify malicious use of msiexec.exe for executing unauthorized payloads, keeping in line with recognizing and preventing proxy execution tactics used by adversaries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: 'msiexec.exe'\n    selection_cli:\n        # Note that there is no space before and after the arguments because it's possible to write a commandline as such\n        # Example: msiexec -q/i [MSI Package]\n        CommandLine|contains:\n            - '/i'\n            - '-i'\n            - '/package'\n            - '-package'\n            - '/a'\n            - '-a'\n            - '/j'\n            - '-j'\n    selection_quiet:\n        CommandLine|contains:\n            - '/q'\n            - '-q'\n    filter_user_temp:\n        # The %temp% is a very common location for installers\n        ParentImage|startswith: 'C:\\Users\\'\n        ParentImage|contains: '\\AppData\\Local\\Temp\\'\n    filter_system_temp:\n        ParentImage|startswith: 'C:\\Windows\\Temp\\'\n    filter_ccm:\n        ParentImage: 'C:\\Windows\\CCM\\Ccm32BitLauncher.exe'\n        IntegrityLevel: 'System'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - WindowsApps installing updates via the quiet flag\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: 'msiexec.exe'\n    selection_cli:\n        # Note that there is no space before and after the arguments because it's possible to write a commandline as such\n        # Example: msiexec -q/i [MSI Package]\n        CommandLine|contains:\n            - '/i'\n            - '-i'\n            - '/package'\n            - '-package'\n            - '/a'\n            - '-a'\n            - '/j'\n            - '-j'\n    selection_quiet:\n        CommandLine|contains:\n            - '/q'\n            - '-q'\n    filter_user_temp:\n        # The %temp% is a very common location for installers\n        ParentImage|startswith: 'C:\\Users\\'\n        ParentImage|contains: '\\AppData\\Local\\Temp\\'\n    filter_system_temp:\n        ParentImage|startswith: 'C:\\Windows\\Temp\\'\n    filter_ccm:\n        ParentImage: 'C:\\Windows\\CCM\\Ccm32BitLauncher.exe'\n        IntegrityLevel: 'System'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - WindowsApps installing updates via the quiet flag\nlevel: medium\n",
      "question": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
      "answer": "In order to detect adversaries abusing msiexec.exe to proxy execution of malicious payloads, which is a technique often seen where msiexec.exe, a utility commonly used for executing installation packages (.msi), is manipulated for executing malicious code or payloads, you should:\n\nMonitor Windows process creation logs for occurrences of msiexec.exe being executed. Specifically, look for the process image ending with '\\msiexec.exe' or having an original filename of 'msiexec.exe'. Additionally, inspect the command line arguments used during the execution of msiexec.exe for flags related to installation (/i or -i), package management (/package or -package), administrative installation (/a or -a), advertising a product without installing it (/j or -j), and especially for silent installation flags (/q or -q), which are often used by attackers to hide their activities.\n\nHowever, you need to apply certain filters to reduce false positives. Exclude cases where the parent process image path suggests a benign origin, such as processes initiating from the user's temp folder ('C:\\Users\\[User Name]\\AppData\\Local\\Temp\\' indicates a common location for legitimate installers), the system's temp folder ('C:\\Windows\\Temp\\'), or the CCM folder ('C:\\Windows\\CCM\\Ccm32BitLauncher.exe') often involved in legitimate operations, particularly if executed with system integrity level. \n\nUnderstanding that sometimes legitimate Windows applications may use these techniques for updates or system functions, be mindful of false positives, notably Windows Apps installing updates silently using msiexec.exe with the quiet flag.\n\nTaking these steps enables you to better identify malicious use of msiexec.exe for executing unauthorized payloads, keeping in line with recognizing and preventing proxy execution tactics used by adversaries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject, you should monitor Windows process access logs for specific patterns of behavior that indicate suspicious activity. Specifically, you should look out for cases where a process has been granted certain access rights, identified by the hexadecimal values '0x147a' and '0x1f3fff', which could be indicative of an attempt to inject shellcode into a process. Additionally, if the call trace of the process access attempt contains 'UNKNOWN', this could signal an injection attempt that is trying to mask its origin.\n\nHowever, it's important to apply certain filters to avoid false positives from legitimate software. For instance, Dell software and certain Microsoft Visual Studio processes might exhibit similar behavior during normal operations. These include processes starting with specific paths such as 'C:\\Program Files\\Dell\\' and 'C:\\Program Files (x86)\\Dell\\', or Microsoft Visual Studio paths, especially when they are accessing other processes within the same directories with the same high level of granted access ('0x1f3fff'). Additionally, legitimate activities often involve call traces starting with 'C:\\Windows\\System32\\ntdll.dll'.\n\nTo accurately filter out these legitimate cases, review instances where Dell-related software or specific Visual Studio utilities (e.g., PerfWatson2.exe or MSBuild.exe) are involved in process access attempts toward expected target processes, including but not limited to Dell TechHub software or Visual Studio development environments.\n\nBy focusing on these patterns and applying the appropriate filters, you can more precisely detect malicious activities attempting to utilize shellcode injection techniques akin to those employed by advanced hacking tools like Metasploit and Empire, while reducing the chances of flagging benign software operations as threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        GrantedAccess:\n            - '0x147a'\n            - '0x1f3fff'\n        CallTrace|contains: 'UNKNOWN'\n    filter_dell_folders:\n        # If dell software is installed we get matches like these\n        # Example 1:\n        #   SourceImage: C:\\Program Files\\Dell\\SupportAssistAgent\\bin\\SupportAssistAgent.exe\n        #   TargetImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   GrantedAccess: 0x1F3FFF\n        # Example 2:\n        #   SourceImage: C:\\Program Files (x86)\\Dell\\UpdateService\\DCF\\Dell.DCF.UA.Bradbury.API.SubAgent.exe\n        #   TargetImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   GrantedAccess: 0x1F3FFF\n        # Example 3:\n        #   SourceImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   TargetImage: C:\\Program Files (x86)\\Dell\\UpdateService\\DCF\\Dell.DCF.UA.Bradbury.API.SubAgent.exe\n        #   GrantedAccess: 0x1F3FFF\n        SourceImage|startswith:\n            - 'C:\\Program Files\\Dell\\'\n            - 'C:\\Program Files (x86)\\Dell\\'\n        TargetImage|startswith:\n            - 'C:\\Program Files\\Dell\\'\n            - 'C:\\Program Files (x86)\\Dell\\'\n        GrantedAccess: '0x1F3FFF'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_dell_specifc:\n        SourceImage: 'C:\\Program Files (x86)\\Dell\\UpdateService\\ServiceShell.exe'\n        TargetImage: 'C:\\Windows\\Explorer.EXE'\n        GrantedAccess: '0x1F3FFF'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_visual_studio:\n        SourceImage:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\PerfWatson2.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\PerfWatson2.exe'\n        TargetImage:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\devenv.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\devenv.exe'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_ddvdatacollector:\n        SourceImage|startswith: 'C:\\Program Files\\Microsoft Visual Studio\\'\n        SourceImage|endswith: '\\MSBuild\\Current\\Bin\\MSBuild.exe'\n        TargetImage: C:\\Program Files\\Dell\\DellDataVault\\DDVDataCollector.exe\n    filter_wmiprvese:\n        SourceImage: 'C:\\Windows\\System32\\Wbem\\Wmiprvse.exe'\n        TargetImage: 'C:\\Windows\\system32\\lsass.exe'\n        CallTrace|startswith: 'C:\\Windows\\SYSTEM32\\ntdll.dll'\n        CallTrace|contains: '\\System.ni.dll+'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        GrantedAccess:\n            - '0x147a'\n            - '0x1f3fff'\n        CallTrace|contains: 'UNKNOWN'\n    filter_dell_folders:\n        # If dell software is installed we get matches like these\n        # Example 1:\n        #   SourceImage: C:\\Program Files\\Dell\\SupportAssistAgent\\bin\\SupportAssistAgent.exe\n        #   TargetImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   GrantedAccess: 0x1F3FFF\n        # Example 2:\n        #   SourceImage: C:\\Program Files (x86)\\Dell\\UpdateService\\DCF\\Dell.DCF.UA.Bradbury.API.SubAgent.exe\n        #   TargetImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   GrantedAccess: 0x1F3FFF\n        # Example 3:\n        #   SourceImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   TargetImage: C:\\Program Files (x86)\\Dell\\UpdateService\\DCF\\Dell.DCF.UA.Bradbury.API.SubAgent.exe\n        #   GrantedAccess: 0x1F3FFF\n        SourceImage|startswith:\n            - 'C:\\Program Files\\Dell\\'\n            - 'C:\\Program Files (x86)\\Dell\\'\n        TargetImage|startswith:\n            - 'C:\\Program Files\\Dell\\'\n            - 'C:\\Program Files (x86)\\Dell\\'\n        GrantedAccess: '0x1F3FFF'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_dell_specifc:\n        SourceImage: 'C:\\Program Files (x86)\\Dell\\UpdateService\\ServiceShell.exe'\n        TargetImage: 'C:\\Windows\\Explorer.EXE'\n        GrantedAccess: '0x1F3FFF'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_visual_studio:\n        SourceImage:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\PerfWatson2.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\PerfWatson2.exe'\n        TargetImage:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\devenv.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\devenv.exe'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_ddvdatacollector:\n        SourceImage|startswith: 'C:\\Program Files\\Microsoft Visual Studio\\'\n        SourceImage|endswith: '\\MSBuild\\Current\\Bin\\MSBuild.exe'\n        TargetImage: C:\\Program Files\\Dell\\DellDataVault\\DDVDataCollector.exe\n    filter_wmiprvese:\n        SourceImage: 'C:\\Windows\\System32\\Wbem\\Wmiprvse.exe'\n        TargetImage: 'C:\\Windows\\system32\\lsass.exe'\n        CallTrace|startswith: 'C:\\Windows\\SYSTEM32\\ntdll.dll'\n        CallTrace|contains: '\\System.ni.dll+'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject",
      "answer": "In order to detect potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject, you should monitor Windows process access logs for specific patterns of behavior that indicate suspicious activity. Specifically, you should look out for cases where a process has been granted certain access rights, identified by the hexadecimal values '0x147a' and '0x1f3fff', which could be indicative of an attempt to inject shellcode into a process. Additionally, if the call trace of the process access attempt contains 'UNKNOWN', this could signal an injection attempt that is trying to mask its origin.\n\nHowever, it's important to apply certain filters to avoid false positives from legitimate software. For instance, Dell software and certain Microsoft Visual Studio processes might exhibit similar behavior during normal operations. These include processes starting with specific paths such as 'C:\\Program Files\\Dell\\' and 'C:\\Program Files (x86)\\Dell\\', or Microsoft Visual Studio paths, especially when they are accessing other processes within the same directories with the same high level of granted access ('0x1f3fff'). Additionally, legitimate activities often involve call traces starting with 'C:\\Windows\\System32\\ntdll.dll'.\n\nTo accurately filter out these legitimate cases, review instances where Dell-related software or specific Visual Studio utilities (e.g., PerfWatson2.exe or MSBuild.exe) are involved in process access attempts toward expected target processes, including but not limited to Dell TechHub software or Visual Studio development environments.\n\nBy focusing on these patterns and applying the appropriate filters, you can more precisely detect malicious activities attempting to utilize shellcode injection techniques akin to those employed by advanced hacking tools like Metasploit and Empire, while reducing the chances of flagging benign software operations as threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting commands that indicate a Raccine removal from an end system. Raccine is a free ransomware protection tool..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect commands that indicate a Raccine removal from an end system, you should focus on: Monitoring for the creation of processes on Windows-based systems that involve command lines suggestive of attempts to remove Raccine, a free ransomware protection tool. Look out for processes that are initiated with command lines containing specific sequences of characters indicative of such removal attempts. These include the use of 'taskkill ' in conjunction with 'RaccineSettings.exe', indicating an effort to terminate Raccine's processes; employing 'reg.exe' alongside 'delete' and 'Raccine Tray' in a single command, suggesting the deletion of Raccine-related registry entries; and the use of 'schtasks' with '/DELETE' and 'Raccine Rules Updater', pointing to the deletion of scheduled tasks related to Raccine updates. It's important to consider that there could be legitimate scenarios where an administrative staff might perform these actions, which would be considered false positives. The detection of any of these command sequences should be treated with a high level of concern, as it may signal a targeted effort to disable ransomware protection mechanisms on the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains|all:\n            - 'taskkill '\n            - 'RaccineSettings.exe'\n    selection2:\n        CommandLine|contains|all:\n            - 'reg.exe'\n            - 'delete'\n            - 'Raccine Tray'\n    selection3:\n        CommandLine|contains|all:\n            - 'schtasks'\n            - '/DELETE'\n            - 'Raccine Rules Updater'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate deinstallation by administrative staff\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains|all:\n            - 'taskkill '\n            - 'RaccineSettings.exe'\n    selection2:\n        CommandLine|contains|all:\n            - 'reg.exe'\n            - 'delete'\n            - 'Raccine Tray'\n    selection3:\n        CommandLine|contains|all:\n            - 'schtasks'\n            - '/DELETE'\n            - 'Raccine Rules Updater'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate deinstallation by administrative staff\nlevel: high\n",
      "question": "commands that indicate a Raccine removal from an end system. Raccine is a free ransomware protection tool.",
      "answer": "In order to detect commands that indicate a Raccine removal from an end system, you should focus on: Monitoring for the creation of processes on Windows-based systems that involve command lines suggestive of attempts to remove Raccine, a free ransomware protection tool. Look out for processes that are initiated with command lines containing specific sequences of characters indicative of such removal attempts. These include the use of 'taskkill ' in conjunction with 'RaccineSettings.exe', indicating an effort to terminate Raccine's processes; employing 'reg.exe' alongside 'delete' and 'Raccine Tray' in a single command, suggesting the deletion of Raccine-related registry entries; and the use of 'schtasks' with '/DELETE' and 'Raccine Rules Updater', pointing to the deletion of scheduled tasks related to Raccine updates. It's important to consider that there could be legitimate scenarios where an administrative staff might perform these actions, which would be considered false positives. The detection of any of these command sequences should be treated with a high level of concern, as it may signal a targeted effort to disable ransomware protection mechanisms on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious RDP session redirect using tscon.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious RDP session redirect using tscon.exe, you should: Focus on monitoring the creation of processes within Windows systems. Specifically, look for instances where the command line invocation includes the parameter ' /dest:rdp-tcp#' which is indicative of an attempt to redirect a Remote Desktop Protocol (RDP) session using the utility tscon.exe. Such activity is usually not common in day-to-day operations and could signify malicious intent, especially tactics that involve gaining or exercising control over remote systems. The importance of identifying this behavior is marked as high due to the potential for unauthorized access and control over targeted systems. There are no known benign instances automatically associated with this behavior, but care should be taken to verify the context of detections to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /dest:rdp-tcp#'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /dest:rdp-tcp#'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious RDP session redirect using tscon.exe",
      "answer": "In order to detect a suspicious RDP session redirect using tscon.exe, you should: Focus on monitoring the creation of processes within Windows systems. Specifically, look for instances where the command line invocation includes the parameter ' /dest:rdp-tcp#' which is indicative of an attempt to redirect a Remote Desktop Protocol (RDP) session using the utility tscon.exe. Such activity is usually not common in day-to-day operations and could signify malicious intent, especially tactics that involve gaining or exercising control over remote systems. The importance of identifying this behavior is marked as high due to the potential for unauthorized access and control over targeted systems. There are no known benign instances automatically associated with this behavior, but care should be taken to verify the context of detections to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"git\" in order to clone a remote repository that contain suspicious keywords which might be suspicious.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"git\" in order to clone a remote repository that contains suspicious keywords which might be suspicious, you should: Monitor process creation events on Linux systems for any use of the \"git\" command, particularly those that involve cloning a repository. Pay special attention to command line arguments that contain the 'clone' keyword to identify repository cloning activities. Further scrutinize these git cloning operations for the presence of certain keywords in the command line that could indicate malicious intent. These keywords include 'exploit', 'Vulns', 'vulnerability', 'RCE' (Remote Code Execution), 'RemoteCodeExecution', 'Invoke-', 'CVE-' indicating specific known vulnerabilities, 'poc-' (proof of concept), 'ProofOfConcept', and names of known vulnerabilities such as 'proxyshell', 'log4shell', 'eternalblue', 'eternal-blue', and any that start with 'MS17-'. Events matching these criteria should be flagged for further investigation despite the possibility of false positives, treating the severity of these findings at a medium level. This approach helps in identifying suspicious activities related to the exploitation or investigation of vulnerabilities through the misuse of the git command on Linux systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_img:\n        Image|endswith: '/git'\n        CommandLine|contains: ' clone '\n    selection_keyword:\n        CommandLine|contains:\n            # Add more suspicious keywords\n            - 'exploit'\n            - 'Vulns'\n            - 'vulnerability'\n            - 'RCE'\n            - 'RemoteCodeExecution'\n            - 'Invoke-'\n            - 'CVE-'\n            - 'poc-'\n            - 'ProofOfConcept'\n            # Add more vuln names\n            - 'proxyshell'\n            - 'log4shell'\n            - 'eternalblue'\n            - 'eternal-blue'\n            - 'MS17-'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_img:\n        Image|endswith: '/git'\n        CommandLine|contains: ' clone '\n    selection_keyword:\n        CommandLine|contains:\n            # Add more suspicious keywords\n            - 'exploit'\n            - 'Vulns'\n            - 'vulnerability'\n            - 'RCE'\n            - 'RemoteCodeExecution'\n            - 'Invoke-'\n            - 'CVE-'\n            - 'poc-'\n            - 'ProofOfConcept'\n            # Add more vuln names\n            - 'proxyshell'\n            - 'log4shell'\n            - 'eternalblue'\n            - 'eternal-blue'\n            - 'MS17-'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of \"git\" in order to clone a remote repository that contain suspicious keywords which might be suspicious",
      "answer": "In order to detect execution of \"git\" in order to clone a remote repository that contains suspicious keywords which might be suspicious, you should: Monitor process creation events on Linux systems for any use of the \"git\" command, particularly those that involve cloning a repository. Pay special attention to command line arguments that contain the 'clone' keyword to identify repository cloning activities. Further scrutinize these git cloning operations for the presence of certain keywords in the command line that could indicate malicious intent. These keywords include 'exploit', 'Vulns', 'vulnerability', 'RCE' (Remote Code Execution), 'RemoteCodeExecution', 'Invoke-', 'CVE-' indicating specific known vulnerabilities, 'poc-' (proof of concept), 'ProofOfConcept', and names of known vulnerabilities such as 'proxyshell', 'log4shell', 'eternalblue', 'eternal-blue', and any that start with 'MS17-'. Events matching these criteria should be flagged for further investigation despite the possibility of false positives, treating the severity of these findings at a medium level. This approach helps in identifying suspicious activities related to the exploitation or investigation of vulnerabilities through the misuse of the git command on Linux systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT), you should: monitor the creation of processes within Windows environments, specifically focusing on the identification of instances where the process image name ends with '\\ntdsutil.exe'. This approach is targeted to uncover potential malicious activities involving the manipulation or attack on the NTDS database, which contains sensitive information. It is important to note that legitimate NTDS maintenance activities may also trigger this detection, so those should be considered as potential false positives. This monitoring carries a medium level of importance due to the potential for misuse of ntdsutil.exe in various attack scenarios.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ntdsutil.exe'\n    condition: selection\nfalsepositives:\n    - NTDS maintenance\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ntdsutil.exe'\n    condition: selection\nfalsepositives:\n    - NTDS maintenance\nlevel: medium\n",
      "question": "execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)",
      "answer": "In order to detect execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT), you should: monitor the creation of processes within Windows environments, specifically focusing on the identification of instances where the process image name ends with '\\ntdsutil.exe'. This approach is targeted to uncover potential malicious activities involving the manipulation or attack on the NTDS database, which contains sensitive information. It is important to note that legitimate NTDS maintenance activities may also trigger this detection, so those should be considered as potential false positives. This monitoring carries a medium level of importance due to the potential for misuse of ntdsutil.exe in various attack scenarios."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting logon events that have characteristics of events generated during an attack with RottenPotato and the like.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect logon events that have characteristics of events generated during an attack with RottenPotato and the like, you should focus on monitoring security logs in Windows environments. Specifically, pay attention to events with an ID of 4624, which indicates a successful logon event. The logon type should be 3, signifying a network logon. Crucially, these events will have the target username set to 'ANONYMOUS LOGON', and the workstation name field will be empty, represented by a '-'. Additionally, the IP address associated with these events will be '127.0.0.1' or '::1', both of which indicate local host connections. This pattern of characteristics is commonly associated with malicious activities, including but not limited to the exploitation techniques used by tools like RottenPotato. It\u2019s also essential to note that while any occurrence of these specific patterns should be investigated, there might be legitimate but rare scenarios where similar patterns occur, leading to potential false positives. In cybersecurity, identifying and analyzing events with these attributes at a high level of scrutiny is vital for early detection of this kind of attack tactic.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 3\n        TargetUserName: 'ANONYMOUS LOGON'\n        WorkstationName: '-'\n        IpAddress: \n            - '127.0.0.1'\n            - '::1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 3\n        TargetUserName: 'ANONYMOUS LOGON'\n        WorkstationName: '-'\n        IpAddress: \n            - '127.0.0.1'\n            - '::1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "logon events that have characteristics of events generated during an attack with RottenPotato and the like",
      "answer": "In order to detect logon events that have characteristics of events generated during an attack with RottenPotato and the like, you should focus on monitoring security logs in Windows environments. Specifically, pay attention to events with an ID of 4624, which indicates a successful logon event. The logon type should be 3, signifying a network logon. Crucially, these events will have the target username set to 'ANONYMOUS LOGON', and the workstation name field will be empty, represented by a '-'. Additionally, the IP address associated with these events will be '127.0.0.1' or '::1', both of which indicate local host connections. This pattern of characteristics is commonly associated with malicious activities, including but not limited to the exploitation techniques used by tools like RottenPotato. It\u2019s also essential to note that while any occurrence of these specific patterns should be investigated, there might be legitimate but rare scenarios where similar patterns occur, leading to potential false positives. In cybersecurity, identifying and analyzing events with these attributes at a high level of scrutiny is vital for early detection of this kind of attack tactic."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious command with /dev/tcp.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious command with /dev/tcp, you should monitor Linux system logs for the appearance of specific patterns indicating potential malicious activity. Specifically, search for commands that involve redirection or connections via /dev/tcp or /dev/udp. Such commands usually include the use of 'cat', 'exec', 'echo', and 'bash' in conjunction with /dev/tcp or /dev/udp to establish a connection, execute commands, or send data. Look out for patterns like 'cat </dev/tcp/', 'exec 3<>/dev/tcp/', 'echo >/dev/tcp/', 'bash -i >& /dev/tcp/', 'sh -i >& /dev/udp/', '0<&196;exec 196<>/dev/tcp/', 'exec 5<>/dev/tcp/', '(sh)0>/dev/tcp/', 'bash -c ''bash -i >& /dev/tcp/' and 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'. These patterns might be used by attackers to execute commands remotely, create reverse shells, or exfiltrate data. It's important to closely investigate occurrences of these patterns as their usage might indicate an intrusion or an attempt to leverage your system as part of an attack, although keep in mind that there might be unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        - 'cat </dev/tcp/'\n        - 'exec 3<>/dev/tcp/'\n        - 'echo >/dev/tcp/'\n        - 'bash -i >& /dev/tcp/'\n        - 'sh -i >& /dev/udp/'\n        - '0<&196;exec 196<>/dev/tcp/'\n        - 'exec 5<>/dev/tcp/'\n        - '(sh)0>/dev/tcp/'\n        - 'bash -c ''bash -i >& /dev/tcp/'\n        - 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        - 'cat </dev/tcp/'\n        - 'exec 3<>/dev/tcp/'\n        - 'echo >/dev/tcp/'\n        - 'bash -i >& /dev/tcp/'\n        - 'sh -i >& /dev/udp/'\n        - '0<&196;exec 196<>/dev/tcp/'\n        - 'exec 5<>/dev/tcp/'\n        - '(sh)0>/dev/tcp/'\n        - 'bash -c ''bash -i >& /dev/tcp/'\n        - 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious command with /dev/tcp",
      "answer": "In order to detect suspicious command with /dev/tcp, you should monitor Linux system logs for the appearance of specific patterns indicating potential malicious activity. Specifically, search for commands that involve redirection or connections via /dev/tcp or /dev/udp. Such commands usually include the use of 'cat', 'exec', 'echo', and 'bash' in conjunction with /dev/tcp or /dev/udp to establish a connection, execute commands, or send data. Look out for patterns like 'cat </dev/tcp/', 'exec 3<>/dev/tcp/', 'echo >/dev/tcp/', 'bash -i >& /dev/tcp/', 'sh -i >& /dev/udp/', '0<&196;exec 196<>/dev/tcp/', 'exec 5<>/dev/tcp/', '(sh)0>/dev/tcp/', 'bash -c ''bash -i >& /dev/tcp/' and 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'. These patterns might be used by attackers to execute commands remotely, create reverse shells, or exfiltrate data. It's important to closely investigate occurrences of these patterns as their usage might indicate an intrusion or an attempt to leverage your system as part of an attack, although keep in mind that there might be unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli_flag:\n        CommandLine|contains:\n            - 'save'\n            - 'export'\n            - '\u02e2ave'\n            - 'e\u02e3port'\n    selection_cli_hklm:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hk\u02eam'\n            - 'hkey_local_machine'\n            - 'hkey_\u02eaocal_machine'\n            - 'hkey_loca\u02ea_machine'\n            - 'hkey_\u02eaoca\u02ea_machine'\n    selection_cli_hive:\n        CommandLine|contains:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n            - '\\\u02e2ystem'\n            - '\\sy\u02e2tem'\n            - '\\\u02e2y\u02e2tem'\n            - '\\\u02e2am'\n            - '\\\u02e2ecurity'\n    condition: all of selection_*\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli_flag:\n        CommandLine|contains:\n            - 'save'\n            - 'export'\n            - '\u02e2ave'\n            - 'e\u02e3port'\n    selection_cli_hklm:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hk\u02eam'\n            - 'hkey_local_machine'\n            - 'hkey_\u02eaocal_machine'\n            - 'hkey_loca\u02ea_machine'\n            - 'hkey_\u02eaoca\u02ea_machine'\n    selection_cli_hive:\n        CommandLine|contains:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n            - '\\\u02e2ystem'\n            - '\\sy\u02e2tem'\n            - '\\\u02e2y\u02e2tem'\n            - '\\\u02e2am'\n            - '\\\u02e2ecurity'\n    condition: all of selection_*\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high\n",
      "question": "usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY",
      "answer": "In order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process patterns found in logs when CrackMapExec is used.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious process patterns found in logs when CrackMapExec is used, you should monitor the Windows process creation logs for certain command line patterns that could indicate malicious activity. Focus on detecting instances where the command line involves looking for the lsass.exe process using tasklist with a filter for 'Imagename eq lsass.exe', potentially combined with use of cmd.exe through various command switches (/c, /r, /k). This might be an attempt to execute commands or scripts in a way that hides their true nature or persists them across sessions. Additionally, check for command lines that execute rundll32.exe with a path to comsvcs.dll for MiniDump creation, specifically targeting the lsass process, which might be done to dump credentials from memory and often involves specifying a path in the Windows Temp directory. Also, pay attention to the use of tasklist to list processes with verbose output filtered for 'lsass' combined with the use of findstr, which could indicate an attempt to identify the lsass process for similar malicious purposes. The user account initiating these commands might have a name containing 'AUTHORI' or 'AUTORI', indicating a possible non-English language setting. Identifying these patterns helps in mitigating against tactics and techniques such as Credential Access through LSASS Memory dumping. Be aware that there might be legitimate uses of these commands that could lead to false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_lsass_dump1:\n        CommandLine|contains|all:\n            - 'tasklist /fi '\n            - 'Imagename eq lsass.exe'\n        CommandLine|contains:\n            - 'cmd.exe /c '\n            - 'cmd.exe /r '\n            - 'cmd.exe /k '\n            - 'cmd /c '\n            - 'cmd /r '\n            - 'cmd /k '\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_lsass_dump2:\n        CommandLine|contains|all:\n            - 'do rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump'\n            - '\\Windows\\Temp\\'\n            - ' full'\n            - '%%B'\n    selection_procdump:\n        CommandLine|contains|all:\n            - 'tasklist /v /fo csv'\n            - 'findstr /i \"lsass\"'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_lsass_dump1:\n        CommandLine|contains|all:\n            - 'tasklist /fi '\n            - 'Imagename eq lsass.exe'\n        CommandLine|contains:\n            - 'cmd.exe /c '\n            - 'cmd.exe /r '\n            - 'cmd.exe /k '\n            - 'cmd /c '\n            - 'cmd /r '\n            - 'cmd /k '\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_lsass_dump2:\n        CommandLine|contains|all:\n            - 'do rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump'\n            - '\\Windows\\Temp\\'\n            - ' full'\n            - '%%B'\n    selection_procdump:\n        CommandLine|contains|all:\n            - 'tasklist /v /fo csv'\n            - 'findstr /i \"lsass\"'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious process patterns found in logs when CrackMapExec is used",
      "answer": "In order to detect suspicious process patterns found in logs when CrackMapExec is used, you should monitor the Windows process creation logs for certain command line patterns that could indicate malicious activity. Focus on detecting instances where the command line involves looking for the lsass.exe process using tasklist with a filter for 'Imagename eq lsass.exe', potentially combined with use of cmd.exe through various command switches (/c, /r, /k). This might be an attempt to execute commands or scripts in a way that hides their true nature or persists them across sessions. Additionally, check for command lines that execute rundll32.exe with a path to comsvcs.dll for MiniDump creation, specifically targeting the lsass process, which might be done to dump credentials from memory and often involves specifying a path in the Windows Temp directory. Also, pay attention to the use of tasklist to list processes with verbose output filtered for 'lsass' combined with the use of findstr, which could indicate an attempt to identify the lsass process for similar malicious purposes. The user account initiating these commands might have a name containing 'AUTHORI' or 'AUTORI', indicating a possible non-English language setting. Identifying these patterns helps in mitigating against tactics and techniques such as Credential Access through LSASS Memory dumping. Be aware that there might be legitimate uses of these commands that could lead to false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential QBot activity by looking for process executions used previously by QBot.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential QBot activity by looking for process executions used previously by QBot, you should: Monitor Windows process creation logs for specific execution patterns that are indicative of QBot malware operations. Look out for instances where the WinRAR application initiates 'wscript.exe', a scenario that could be leveraged for malicious script executions. Additionally, watch for command line executions that include launching 'ping.exe' in a pattern that seems to be delaying execution with a follow-up action of reading a file - a technique that can be used to bypass time-based detection mechanisms. Furthermore, be vigilant for occurrences where 'regsvr32.exe' is executed alongside command lines that reference the 'C:\\ProgramData' directory and involve a '.tmp' file, as this pattern is characteristic of QBot's method of establishing persistence or executing malicious payloads. Given these specific criteria across different selection conditions, diligence in logging and reviewing such processes under the outlined circumstances is vital, recognizing these patterns as critical indicators of potential QBot infiltration. There would be few legitimate reasons for these specific combinations of process execution and command lines, so false positives are considered unlikely.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|endswith: '\\WinRAR.exe'\n        Image|endswith: '\\wscript.exe'\n    selection2:\n        CommandLine|contains: ' /c ping.exe -n 6 127.0.0.1 & type '\n    selection3:\n        CommandLine|contains|all:\n            - 'regsvr32.exe'\n            - 'C:\\ProgramData'\n            - '.tmp'\n    condition: 1 of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|endswith: '\\WinRAR.exe'\n        Image|endswith: '\\wscript.exe'\n    selection2:\n        CommandLine|contains: ' /c ping.exe -n 6 127.0.0.1 & type '\n    selection3:\n        CommandLine|contains|all:\n            - 'regsvr32.exe'\n            - 'C:\\ProgramData'\n            - '.tmp'\n    condition: 1 of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "potential QBot activity by looking for process executions used previously by QBot",
      "answer": "In order to detect potential QBot activity by looking for process executions used previously by QBot, you should: Monitor Windows process creation logs for specific execution patterns that are indicative of QBot malware operations. Look out for instances where the WinRAR application initiates 'wscript.exe', a scenario that could be leveraged for malicious script executions. Additionally, watch for command line executions that include launching 'ping.exe' in a pattern that seems to be delaying execution with a follow-up action of reading a file - a technique that can be used to bypass time-based detection mechanisms. Furthermore, be vigilant for occurrences where 'regsvr32.exe' is executed alongside command lines that reference the 'C:\\ProgramData' directory and involve a '.tmp' file, as this pattern is characteristic of QBot's method of establishing persistence or executing malicious payloads. Given these specific criteria across different selection conditions, diligence in logging and reviewing such processes under the outlined circumstances is vital, recognizing these patterns as critical indicators of potential QBot infiltration. There would be few legitimate reasons for these specific combinations of process execution and command lines, so false positives are considered unlikely."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect usage of DLL \"coregen.exe\" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of DLL \"coregen.exe\" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs, you should: monitor the loading of images within Windows systems, specifically looking for instances where the file name ends with '\\coregen.exe'. It's important to exclude any events where the loaded images originate from common and likely benign directories such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Program Files\\Microsoft Silverlight\\', and 'C:\\Program Files (x86)\\Microsoft Silverlight\\'. This approach helps in identifying potentially malicious activities involving \"coregen.exe\" being used outside of its regular operations, which could indicate an attempt to sideload DLLs in a harmful manner. The reliability of this detection process is considered medium, though there may be cases where legitimate activities trigger this rule, these instances are currently unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\coregen.exe'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Program Files\\Microsoft Silverlight\\'\n            - 'C:\\Program Files (x86)\\Microsoft Silverlight\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\coregen.exe'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Program Files\\Microsoft Silverlight\\'\n            - 'C:\\Program Files (x86)\\Microsoft Silverlight\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect usage of DLL \"coregen.exe\" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs.",
      "answer": "In order to detect usage of DLL \"coregen.exe\" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs, you should: monitor the loading of images within Windows systems, specifically looking for instances where the file name ends with '\\coregen.exe'. It's important to exclude any events where the loaded images originate from common and likely benign directories such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Program Files\\Microsoft Silverlight\\', and 'C:\\Program Files (x86)\\Microsoft Silverlight\\'. This approach helps in identifying potentially malicious activities involving \"coregen.exe\" being used outside of its regular operations, which could indicate an attempt to sideload DLLs in a harmful manner. The reliability of this detection process is considered medium, though there may be cases where legitimate activities trigger this rule, these instances are currently unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries abusing PowerShell commands and scripts for execution, monitor Windows PowerShell script logs, particularly focusing on scripts that contain specific characteristics indicating potentially malicious activity. Look for scripts with Script Block Logging enabled, and examine script contents for the following sequence of commands and objects:\n\n1. Creation of new objects using `New-Object`.\n2. Use of the `-ComObject` flag which indicates interaction with COM objects.\n3. Instantiation of `MsXml2.` objects, often used with `XmlHttp` to send or receive HTTP requests.\n\nSuch scripts are indicative of PowerShell being used to interact with external components or services, potentially for malicious purposes such as data exfiltration, downloading additional payloads, or executing remote commands. These activities tie back to techniques where PowerShell can be leveraged for attack execution and information discovery.\n\nHowever, it\u2019s important to consider that these indicators might also be present in legitimate administrative scripts. The detection level for such activities is set to medium, acknowledging that while these indicators are suggestive of malicious use, they are not definitively indicative of such. Continuous monitoring and context-aware analysis are recommended to distinguish between malicious activities and legitimate administrative use of PowerShell.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - '-ComObject'\n            - 'MsXml2.'\n            - 'XmlHttp'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - '-ComObject'\n            - 'MsXml2.'\n            - 'XmlHttp'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
      "answer": "In order to detect adversaries abusing PowerShell commands and scripts for execution, monitor Windows PowerShell script logs, particularly focusing on scripts that contain specific characteristics indicating potentially malicious activity. Look for scripts with Script Block Logging enabled, and examine script contents for the following sequence of commands and objects:\n\n1. Creation of new objects using `New-Object`.\n2. Use of the `-ComObject` flag which indicates interaction with COM objects.\n3. Instantiation of `MsXml2.` objects, often used with `XmlHttp` to send or receive HTTP requests.\n\nSuch scripts are indicative of PowerShell being used to interact with external components or services, potentially for malicious purposes such as data exfiltration, downloading additional payloads, or executing remote commands. These activities tie back to techniques where PowerShell can be leveraged for attack execution and information discovery.\n\nHowever, it\u2019s important to consider that these indicators might also be present in legitimate administrative scripts. The detection level for such activities is set to medium, acknowledging that while these indicators are suggestive of malicious use, they are not definitively indicative of such. Continuous monitoring and context-aware analysis are recommended to distinguish between malicious activities and legitimate administrative use of PowerShell."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection use of the command \"split\" to split files into parts and possible transfer..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the command \"split\" to split files into parts and possible transfer, you should monitor process creation logs on macOS systems for any instances where the command ending with '/split' is executed. It's important to note that this activity might sometimes be related to legitimate administrative tasks, so the risk level associated with this detection is considered low. This monitoring aims to identify scenarios where an attacker may be splitting files, potentially as a precursor to exfiltrating data.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/split'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/split'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n",
      "question": "Detection use of the command \"split\" to split files into parts and possible transfer.",
      "answer": "In order to detect the use of the command \"split\" to split files into parts and possible transfer, you should monitor process creation logs on macOS systems for any instances where the command ending with '/split' is executed. It's important to note that this activity might sometimes be related to legitimate administrative tasks, so the risk level associated with this detection is considered low. This monitoring aims to identify scenarios where an attacker may be splitting files, potentially as a precursor to exfiltrating data."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of files with an \"LNK\" as a second extension. This is sometimes used by malware as a method to abuse the fact that Windows hides the \"LNK\" extension by default.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of files with an \"LNK\" as a second extension, which is sometimes used by malware as a method to abuse the fact that Windows hides the \"LNK\" extension by default, you should monitor for the occurrence of file creation events within the Windows environment, especially focusing on files that end with '.lnk' extension. These files are of particular interest when their names contain common document and image formats as part of their names, such as '.doc', '.docx', '.jpg', '.pdf', '.ppt', '.pptx', '.xls', and '.xlsx'. \n\nTo reduce false positives and focus the detection, it is advised to exclude events that relate to files created in certain directories that are generally used by legitimate applications. Specifically, files created in the '\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\' directory should be excluded as these often relate to non-malicious activities. Furthermore, files executed or associated with common Microsoft Office applications (Excel, PowerPoint, Word) and located in directories related to recent files used by these applications ('\\AppData\\Roaming\\Microsoft\\Office\\Recent\\', '\\AppData\\Roaming\\Microsoft\\Excel', '\\AppData\\Roaming\\Microsoft\\PowerPoint', '\\AppData\\Roaming\\Microsoft\\Word') should also be checked; if a detection matches these criteria, it might be considered as a false positive, unless other suspicious activities are noticed.\n\nThis approach aims at striking a balance between detecting potentially malicious activities related to the misuse of .lnk files and minimizing the number of false positives by considering the context in which these files are created. It is worth noting that some amount of tuning might be necessary, especially when dealing with directories used by third-party applications that are not inherently malicious but may also use similar file naming conventions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith: '.lnk'\n        TargetFilename|contains:\n            - '.doc.'\n            - '.docx.'\n            - '.jpg.'\n            - '.pdf.'\n            - '.ppt.'\n            - '.pptx.'\n            - '.xls.'\n            - '.xlsx.'\n    filter_main_recent:\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\'\n    filter_optional_office:\n        Image|endswith:\n            # Note: Some additional office application might need to be added\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\winword.exe'\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\Office\\Recent\\'\n    filter_optional_excel:\n        Image|endswith: '\\excel.exe'\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\Excel'\n    filter_optional_powerpoint:\n        Image|endswith: '\\powerpnt.exe'\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\PowerPoint'\n    filter_optional_word:\n        Image|endswith: '\\winword.exe'\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\Word'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Some tuning is required for other general purpose directories of third party apps\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith: '.lnk'\n        TargetFilename|contains:\n            - '.doc.'\n            - '.docx.'\n            - '.jpg.'\n            - '.pdf.'\n            - '.ppt.'\n            - '.pptx.'\n            - '.xls.'\n            - '.xlsx.'\n    filter_main_recent:\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\'\n    filter_optional_office:\n        Image|endswith:\n            # Note: Some additional office application might need to be added\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\winword.exe'\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\Office\\Recent\\'\n    filter_optional_excel:\n        Image|endswith: '\\excel.exe'\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\Excel'\n    filter_optional_powerpoint:\n        Image|endswith: '\\powerpnt.exe'\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\PowerPoint'\n    filter_optional_word:\n        Image|endswith: '\\winword.exe'\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\Word'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Some tuning is required for other general purpose directories of third party apps\nlevel: medium\n",
      "question": "creation of files with an \"LNK\" as a second extension. This is sometimes used by malware as a method to abuse the fact that Windows hides the \"LNK\" extension by default.\n",
      "answer": "In order to detect the creation of files with an \"LNK\" as a second extension, which is sometimes used by malware as a method to abuse the fact that Windows hides the \"LNK\" extension by default, you should monitor for the occurrence of file creation events within the Windows environment, especially focusing on files that end with '.lnk' extension. These files are of particular interest when their names contain common document and image formats as part of their names, such as '.doc', '.docx', '.jpg', '.pdf', '.ppt', '.pptx', '.xls', and '.xlsx'. \n\nTo reduce false positives and focus the detection, it is advised to exclude events that relate to files created in certain directories that are generally used by legitimate applications. Specifically, files created in the '\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\' directory should be excluded as these often relate to non-malicious activities. Furthermore, files executed or associated with common Microsoft Office applications (Excel, PowerPoint, Word) and located in directories related to recent files used by these applications ('\\AppData\\Roaming\\Microsoft\\Office\\Recent\\', '\\AppData\\Roaming\\Microsoft\\Excel', '\\AppData\\Roaming\\Microsoft\\PowerPoint', '\\AppData\\Roaming\\Microsoft\\Word') should also be checked; if a detection matches these criteria, it might be considered as a false positive, unless other suspicious activities are noticed.\n\nThis approach aims at striking a balance between detecting potentially malicious activities related to the misuse of .lnk files and minimizing the number of false positives by considering the context in which these files are created. It is worth noting that some amount of tuning might be necessary, especially when dealing with directories used by third-party applications that are not inherently malicious but may also use similar file naming conventions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting new BITS transfer job saving local files with potential suspicious extensions.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect new BITS transfer job saving local files with potential suspicious extensions, you should: Monitor the Windows Background Intelligent Transfer Service (BITS) for specific behaviors that could indicate malicious activity. Be alert for event ID 16403, which signals the creation of a new BITS transfer job. The focus should be on jobs that save local files with extensions that are commonly associated with malicious scripts and executable files, such as '.bat' (batch files), '.dll' (dynamic link libraries), '.exe' (executables), '.hta' (HTML applications), '.ps1' (PowerShell scripts), '.psd1' (PowerShell module manifests), '.sh' (UNIX shell scripts), '.vbe' (VBScript encoded scripts), and '.vbs' (VBScript files). It is critical to apply filters to exclude known benign transfers, particularly those involving common applications like Chrome or Dropbox, which can be identified through file paths containing '\\AppData\\' or remote names containing '.com'. Implementing such filters will help reduce false positives, acknowledging that while the presence of these file extensions can be suspect, they can also frequently occur in non-malicious contexts. The adjustment of these filters might be necessary to align with the unique characteristics of your operational environment. The detection carries a medium level of urgency, indicating its importance in maintaining a secure network environment while also balancing the need to manage alerts effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: bits-client\ndetection:\n    selection:\n        EventID: 16403\n        LocalName|endswith:\n            # TODO: Extend this list with more interesting file extensions\n            - '.bat'\n            - '.dll'\n            - '.exe' # TODO: Might wanna comment this if it generates tons of FPs\n            - '.hta'\n            - '.ps1'\n            - '.psd1'\n            - '.sh'\n            - '.vbe'\n            - '.vbs'\n    filter_optional_generic:\n        # Typical updates: Chrome, Dropbox etc.\n        LocalName|contains: '\\AppData\\'\n        RemoteName|contains: '.com'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - While the file extensions in question can be suspicious at times. It's best to add filters according to your environment to avoid large amount false positives\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: bits-client\ndetection:\n    selection:\n        EventID: 16403\n        LocalName|endswith:\n            # TODO: Extend this list with more interesting file extensions\n            - '.bat'\n            - '.dll'\n            - '.exe' # TODO: Might wanna comment this if it generates tons of FPs\n            - '.hta'\n            - '.ps1'\n            - '.psd1'\n            - '.sh'\n            - '.vbe'\n            - '.vbs'\n    filter_optional_generic:\n        # Typical updates: Chrome, Dropbox etc.\n        LocalName|contains: '\\AppData\\'\n        RemoteName|contains: '.com'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - While the file extensions in question can be suspicious at times. It's best to add filters according to your environment to avoid large amount false positives\nlevel: medium\n",
      "question": "new BITS transfer job saving local files with potential suspicious extensions",
      "answer": "In order to detect new BITS transfer job saving local files with potential suspicious extensions, you should: Monitor the Windows Background Intelligent Transfer Service (BITS) for specific behaviors that could indicate malicious activity. Be alert for event ID 16403, which signals the creation of a new BITS transfer job. The focus should be on jobs that save local files with extensions that are commonly associated with malicious scripts and executable files, such as '.bat' (batch files), '.dll' (dynamic link libraries), '.exe' (executables), '.hta' (HTML applications), '.ps1' (PowerShell scripts), '.psd1' (PowerShell module manifests), '.sh' (UNIX shell scripts), '.vbe' (VBScript encoded scripts), and '.vbs' (VBScript files). It is critical to apply filters to exclude known benign transfers, particularly those involving common applications like Chrome or Dropbox, which can be identified through file paths containing '\\AppData\\' or remote names containing '.com'. Implementing such filters will help reduce false positives, acknowledging that while the presence of these file extensions can be suspect, they can also frequently occur in non-malicious contexts. The adjustment of these filters might be necessary to align with the unique characteristics of your operational environment. The detection carries a medium level of urgency, indicating its importance in maintaining a secure network environment while also balancing the need to manage alerts effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading using the Microsoft Office winword process via the '/l' flag..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading using the Microsoft Office winword process via the '/l' flag, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the winword.exe process is initiated. Look for scenarios where the command line includes the use of the '/l' flag followed by a reference to a DLL file. This is accomplished by checking for processes that have either their image path ending with '\\WINWORD.exe' or the original file name being 'WinWord.exe'. Furthermore, verify that the command line arguments for these processes contain both '/l ' and reference a '.dll' file, indicating a DLL is being specified explicitly for loading. This method is indicative of an attempt to sideload a DLL, which could be malicious in nature. Be aware that there might be instances where similar behavior is flagged but turns out to be benign, though these cases are not specifically known. The risk level associated with this behavior is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WINWORD.exe'\n        - OriginalFileName: 'WinWord.exe'\n    selection_dll:\n        CommandLine|contains|all:\n            - '/l '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WINWORD.exe'\n        - OriginalFileName: 'WinWord.exe'\n    selection_dll:\n        CommandLine|contains|all:\n            - '/l '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.",
      "answer": "In order to detect potential DLL sideloading using the Microsoft Office winword process via the '/l' flag, you should: Monitor the creation of processes on Windows systems, specifically focusing on instances where the winword.exe process is initiated. Look for scenarios where the command line includes the use of the '/l' flag followed by a reference to a DLL file. This is accomplished by checking for processes that have either their image path ending with '\\WINWORD.exe' or the original file name being 'WinWord.exe'. Furthermore, verify that the command line arguments for these processes contain both '/l ' and reference a '.dll' file, indicating a DLL is being specified explicitly for loading. This method is indicative of an attempt to sideload a DLL, which could be malicious in nature. Be aware that there might be instances where similar behavior is flagged but turns out to be benign, though these cases are not specifically known. The risk level associated with this behavior is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of a Callout DLL via CalloutDlls and CalloutEnabled parameter in Registry, which can be used to execute code in context of the DHCP server (restart required).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the installation of a Callout DLL via CalloutDlls and CalloutEnabled parameter in Registry, which can be used to execute code in context of the DHCP server (restart required), you should: monitor registry settings specifically within Windows environments for any SetValue events targeting the DHCP Server's parameters. Focus particularly on changes to the '\\Services\\DHCPServer\\Parameters\\CalloutDlls' and '\\Services\\DHCPServer\\Parameters\\CalloutEnabled'. Any modifications to these registry keys should be considered suspicious and possibly indicative of an attempt to inject malicious DLLs into the DHCP process, allowing code execution in the context of the DHCP server. Note that such changes often necessitate a restart of the DHCP server to take effect. The detection of these events is critical and should be treated with a high level of seriousness due to minimal known false positives. This monitoring and detection strategy are crucial for identifying and thwarting potential threats that leverage the DHCP server for executing unauthorized code, aligned with specific malicious tactics and techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|endswith:\n            - '\\Services\\DHCPServer\\Parameters\\CalloutDlls'\n            - '\\Services\\DHCPServer\\Parameters\\CalloutEnabled'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|endswith:\n            - '\\Services\\DHCPServer\\Parameters\\CalloutDlls'\n            - '\\Services\\DHCPServer\\Parameters\\CalloutEnabled'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "installation of a Callout DLL via CalloutDlls and CalloutEnabled parameter in Registry, which can be used to execute code in context of the DHCP server (restart required)",
      "answer": "In order to detect the installation of a Callout DLL via CalloutDlls and CalloutEnabled parameter in Registry, which can be used to execute code in context of the DHCP server (restart required), you should: monitor registry settings specifically within Windows environments for any SetValue events targeting the DHCP Server's parameters. Focus particularly on changes to the '\\Services\\DHCPServer\\Parameters\\CalloutDlls' and '\\Services\\DHCPServer\\Parameters\\CalloutEnabled'. Any modifications to these registry keys should be considered suspicious and possibly indicative of an attempt to inject malicious DLLs into the DHCP process, allowing code execution in the context of the DHCP server. Note that such changes often necessitate a restart of the DHCP server to take effect. The detection of these events is critical and should be treated with a high level of seriousness due to minimal known false positives. This monitoring and detection strategy are crucial for identifying and thwarting potential threats that leverage the DHCP server for executing unauthorized code, aligned with specific malicious tactics and techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting failed logins with multiple accounts from a single process on the system..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect failed logins with multiple accounts from a single process on the system, you should monitor for specific security events within the Windows operating environment. Focus on tracking Event ID 4625, which corresponds to failed login attempts, specifically those that utilize a Logon Type of 2, indicating interactive logins. This monitoring should occur over a 24-hour period to gather comprehensive data.\n\nIt is critical to exclude any events where the ProcessName is not specified (indicated by a '-'), as these do not provide the necessary information for analysis. The core of the detection strategy hinges on identifying scenarios where more than 10 failed login attempts have been made using different user accounts but originating from the same process.\n\nBe mindful that certain environments, such as terminal servers, jump servers, Citrix server farms, or workstations where user accounts are frequently switched, might naturally exhibit this behavior and therefore could be sources of false positives.\n\nThis approach is aligned with identifying potential brute force attacks or other unauthorized access attempts, focusing on techniques that fall under the reconnaissance and credential access tactics. By scrutinizing event logs for these specific failed login characteristics, it's possible to pinpoint unusual activity that could indicate a security threat or attack attempt on the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4625\n        LogonType: 2\n    filter:\n        ProcessName: '-'\n    timeframe: 24h\n    condition: selection1 and not filter | count(TargetUserName) by ProcessName > 10\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Other multiuser systems like Citrix server farms\n    - Workstations with frequently changing users\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4625\n        LogonType: 2\n    filter:\n        ProcessName: '-'\n    timeframe: 24h\n    condition: selection1 and not filter | count(TargetUserName) by ProcessName > 10\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Other multiuser systems like Citrix server farms\n    - Workstations with frequently changing users\nlevel: medium\n",
      "question": "failed logins with multiple accounts from a single process on the system.",
      "answer": "In order to detect failed logins with multiple accounts from a single process on the system, you should monitor for specific security events within the Windows operating environment. Focus on tracking Event ID 4625, which corresponds to failed login attempts, specifically those that utilize a Logon Type of 2, indicating interactive logins. This monitoring should occur over a 24-hour period to gather comprehensive data.\n\nIt is critical to exclude any events where the ProcessName is not specified (indicated by a '-'), as these do not provide the necessary information for analysis. The core of the detection strategy hinges on identifying scenarios where more than 10 failed login attempts have been made using different user accounts but originating from the same process.\n\nBe mindful that certain environments, such as terminal servers, jump servers, Citrix server farms, or workstations where user accounts are frequently switched, might naturally exhibit this behavior and therefore could be sources of false positives.\n\nThis approach is aligned with identifying potential brute force attacks or other unauthorized access attempts, focusing on techniques that fall under the reconnaissance and credential access tactics. By scrutinizing event logs for these specific failed login characteristics, it's possible to pinpoint unusual activity that could indicate a security threat or attack attempt on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of VMware Xfer utility (VMwareXferlogs.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of VMware Xfer utility (VMwareXferlogs.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor the process creation logs in Windows for instances where the VMware Xfer utility, known as VMwareXferlogs.exe, is executed. Specifically, focus on detecting when this executable is launched from locations other than its default directory, typically 'C:\\Program Files\\VMware\\'. This deviation from the norm could indicate an attempt at DLL sideloading, a technique where an attacker exploits the loading of dynamic link libraries to execute malicious code. The occurrence of VMwareXferlogs.exe running from any unusual path is a significant red flag, given that false positives are considered unlikely. The detection of this activity takes high importance due to the potential security implications associated with unauthorized DLL loading.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\VMwareXferlogs.exe'\n    filter: # VMware might be installed in another path so update the rule accordingly\n        Image|startswith: 'C:\\Program Files\\VMware\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\VMwareXferlogs.exe'\n    filter: # VMware might be installed in another path so update the rule accordingly\n        Image|startswith: 'C:\\Program Files\\VMware\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of VMware Xfer utility (VMwareXferlogs.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect execution of VMware Xfer utility (VMwareXferlogs.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor the process creation logs in Windows for instances where the VMware Xfer utility, known as VMwareXferlogs.exe, is executed. Specifically, focus on detecting when this executable is launched from locations other than its default directory, typically 'C:\\Program Files\\VMware\\'. This deviation from the norm could indicate an attempt at DLL sideloading, a technique where an attacker exploits the loading of dynamic link libraries to execute malicious code. The occurrence of VMwareXferlogs.exe running from any unusual path is a significant red flag, given that false positives are considered unlikely. The detection of this activity takes high importance due to the potential security implications associated with unauthorized DLL loading."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of whoami, which is often used by attackers after exploitation / privilege escalation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of whoami, which is often used by attackers after exploitation / privilege escalation, you should: Monitor the creation of processes on Windows systems for the execution of the \"whoami.exe\" application. This involves looking for process creations where the image name ends with \"\\whoami.exe\" or where the original file name is exactly \"whoami.exe\". This is an important step because attackers frequently use the \"whoami\" command to check the current user's identity and assess the level of privileges they have obtained after gaining access or escalating their privileges within the system. It's worth noting that there could be legitimate uses of the \"whoami.exe\" command by administrators or through scripts and administrative tools within the environment, as well as for monitoring activities, which should be considered as potential sources of false positives. The risk level for this activity is assessed as medium, implying that while it may not always indicate malicious activity, it deserves attention and potentially further investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\whoami.exe'\n        - OriginalFileName: 'whoami.exe'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: medium\n",
      "question": "execution of whoami, which is often used by attackers after exploitation / privilege escalation",
      "answer": "In order to detect the execution of whoami, which is often used by attackers after exploitation / privilege escalation, you should: Monitor the creation of processes on Windows systems for the execution of the \"whoami.exe\" application. This involves looking for process creations where the image name ends with \"\\whoami.exe\" or where the original file name is exactly \"whoami.exe\". This is an important step because attackers frequently use the \"whoami\" command to check the current user's identity and assess the level of privileges they have obtained after gaining access or escalating their privileges within the system. It's worth noting that there could be legitimate uses of the \"whoami.exe\" command by administrators or through scripts and administrative tools within the environment, as well as for monitoring activities, which should be considered as potential sources of false positives. The risk level for this activity is assessed as medium, implying that while it may not always indicate malicious activity, it deserves attention and potentially further investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new bits job by Bitsadmin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a new BITS job by Bitsadmin, you should: Monitor Windows Background Intelligent Transfer Service (BITS) client logs for events with an Event ID of 3, which indicate the creation of a new BITS job, and specifically check if these events were triggered by processes ending with '\\bitsadmin.exe'. It's important to note that while BITS admin tools can be used for legitimate purposes, their misuse can often be associated with malicious activities such as data exfiltration or the download of malicious payloads. The detection focuses on spotting these activities by narrowing down to the specific EventID and process path associated with BITS job creation. However, be aware that there might be many legitimate applications or scripts that use \"bitsadmin\", making it necessary to correlate this event with others, such as Event ID 16403 and the JobID field, to reduce false positives. The overall severity of this detection is considered to be low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: bits-client\ndetection:\n    selection:\n        EventID: 3\n        processPath|endswith: '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Many legitimate applications or scripts could leverage \"bitsadmin\". This event is best correlated with EID 16403 via the JobID field\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: bits-client\ndetection:\n    selection:\n        EventID: 3\n        processPath|endswith: '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Many legitimate applications or scripts could leverage \"bitsadmin\". This event is best correlated with EID 16403 via the JobID field\nlevel: low\n",
      "question": "creation of a new bits job by Bitsadmin",
      "answer": "In order to detect the creation of a new BITS job by Bitsadmin, you should: Monitor Windows Background Intelligent Transfer Service (BITS) client logs for events with an Event ID of 3, which indicate the creation of a new BITS job, and specifically check if these events were triggered by processes ending with '\\bitsadmin.exe'. It's important to note that while BITS admin tools can be used for legitimate purposes, their misuse can often be associated with malicious activities such as data exfiltration or the download of malicious payloads. The detection focuses on spotting these activities by narrowing down to the specific EventID and process path associated with BITS job creation. However, be aware that there might be many legitimate applications or scripts that use \"bitsadmin\", making it necessary to correlate this event with others, such as Event ID 16403 and the JobID field, to reduce false positives. The overall severity of this detection is considered to be low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros, you should: Monitor for process creation events within Windows systems for any instances where the command line contains the string '\\Outlook\\Security\\EnableUnsafeClientMailRules'. This string's presence suggests an attempt to alter Outlook's security settings to enable potentially unsafe client mail rules that could allow the execution of applications or macros, often used by attackers to perform malicious activities. It is important to consider any detection of this activity as high risk, although the possibility of false positives is acknowledged to be unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '\\Outlook\\Security\\EnableUnsafeClientMailRules'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '\\Outlook\\Security\\EnableUnsafeClientMailRules'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros",
      "answer": "In order to detect an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros, you should: Monitor for process creation events within Windows systems for any instances where the command line contains the string '\\Outlook\\Security\\EnableUnsafeClientMailRules'. This string's presence suggests an attempt to alter Outlook's security settings to enable potentially unsafe client mail rules that could allow the execution of applications or macros, often used by attackers to perform malicious activities. It is important to consider any detection of this activity as high risk, although the possibility of false positives is acknowledged to be unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling security tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling security tools, you should monitor process creation logs on macOS systems for specific activities that indicate an attempt to undermine system security. This includes lookout for processes initiating from '/bin/launchctl' with command lines containing 'unload', which is a method used to stop certain security services or daemons. The rule targets the unloading of various security-related property list files (.plist) used by macOS services and security applications, such as firewalls, endpoint protection software, and network security tools. The list includes, but is not limited to, Objective-See's Lulu and BlockBlock, Google Santa, Carbon Black defense daemons, Little Snitch, Tenable Nessus agent, OpenDNS Umbrella, Crowdstrike Falcon, Facebook's osquery, as well as several Elastic log shippers (filebeat, auditbeat, packetbeat) and fluentd's td-agent. This targeted unloading represents an attacker's attempt to disable these tools, allowing them to carry out malicious activities without being detected.\n\nAdditionally, monitoring is advised for the '/usr/sbin/spctl' process with command lines containing 'disable', which signals attempts to disable Gatekeeper. Gatekeeper is a macOS security feature that enforces code signing and verifies downloaded applications before allowing them to run, thus disabling it represents a significant security risk.\n\nThese activities should be treated with a medium level of suspicion as they could represent legitimate administrative actions as well. However, in the context of other suspicious activities, they could be indicative of an attack aimed at disabling security tools to facilitate further malicious actions undetected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    launchctl_unload:\n        Image: '/bin/launchctl'\n        CommandLine|contains: 'unload'\n    security_plists:\n        CommandLine|contains:\n            - 'com.objective-see.lulu.plist'                     # Objective-See firewall management utility\n            - 'com.objective-see.blockblock.plist'               # Objective-See persistence locations watcher/blocker\n            - 'com.google.santad.plist'                          # google santa\n            - 'com.carbonblack.defense.daemon.plist'             # carbon black\n            - 'com.carbonblack.daemon.plist'                     # carbon black\n            - 'at.obdev.littlesnitchd.plist'                     # Objective Development Software firewall management utility\n            - 'com.tenablesecurity.nessusagent.plist'            # Tenable Nessus\n            - 'com.opendns.osx.RoamingClientConfigUpdater.plist' # OpenDNS Umbrella\n            - 'com.crowdstrike.falcond.plist'                    # Crowdstrike Falcon\n            - 'com.crowdstrike.userdaemon.plist'                 # Crowdstrike Falcon\n            - 'osquery'                                          # facebook osquery\n            - 'filebeat'                                         # elastic log file shipper\n            - 'auditbeat'                                        # elastic auditing agent/log shipper\n            - 'packetbeat'                                       # elastic network logger/shipper\n            - 'td-agent'                                         # fluentd log shipper\n    disable_gatekeeper:\n        Image: '/usr/sbin/spctl'\n        CommandLine|contains: 'disable'\n    condition: (launchctl_unload and security_plists) or disable_gatekeeper\nfalsepositives:\n    - Legitimate activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    launchctl_unload:\n        Image: '/bin/launchctl'\n        CommandLine|contains: 'unload'\n    security_plists:\n        CommandLine|contains:\n            - 'com.objective-see.lulu.plist'                     # Objective-See firewall management utility\n            - 'com.objective-see.blockblock.plist'               # Objective-See persistence locations watcher/blocker\n            - 'com.google.santad.plist'                          # google santa\n            - 'com.carbonblack.defense.daemon.plist'             # carbon black\n            - 'com.carbonblack.daemon.plist'                     # carbon black\n            - 'at.obdev.littlesnitchd.plist'                     # Objective Development Software firewall management utility\n            - 'com.tenablesecurity.nessusagent.plist'            # Tenable Nessus\n            - 'com.opendns.osx.RoamingClientConfigUpdater.plist' # OpenDNS Umbrella\n            - 'com.crowdstrike.falcond.plist'                    # Crowdstrike Falcon\n            - 'com.crowdstrike.userdaemon.plist'                 # Crowdstrike Falcon\n            - 'osquery'                                          # facebook osquery\n            - 'filebeat'                                         # elastic log file shipper\n            - 'auditbeat'                                        # elastic auditing agent/log shipper\n            - 'packetbeat'                                       # elastic network logger/shipper\n            - 'td-agent'                                         # fluentd log shipper\n    disable_gatekeeper:\n        Image: '/usr/sbin/spctl'\n        CommandLine|contains: 'disable'\n    condition: (launchctl_unload and security_plists) or disable_gatekeeper\nfalsepositives:\n    - Legitimate activities\nlevel: medium\n",
      "question": "disabling security tools",
      "answer": "In order to detect disabling security tools, you should monitor process creation logs on macOS systems for specific activities that indicate an attempt to undermine system security. This includes lookout for processes initiating from '/bin/launchctl' with command lines containing 'unload', which is a method used to stop certain security services or daemons. The rule targets the unloading of various security-related property list files (.plist) used by macOS services and security applications, such as firewalls, endpoint protection software, and network security tools. The list includes, but is not limited to, Objective-See's Lulu and BlockBlock, Google Santa, Carbon Black defense daemons, Little Snitch, Tenable Nessus agent, OpenDNS Umbrella, Crowdstrike Falcon, Facebook's osquery, as well as several Elastic log shippers (filebeat, auditbeat, packetbeat) and fluentd's td-agent. This targeted unloading represents an attacker's attempt to disable these tools, allowing them to carry out malicious activities without being detected.\n\nAdditionally, monitoring is advised for the '/usr/sbin/spctl' process with command lines containing 'disable', which signals attempts to disable Gatekeeper. Gatekeeper is a macOS security feature that enforces code signing and verifies downloaded applications before allowing them to run, thus disabling it represents a significant security risk.\n\nThese activities should be treated with a medium level of suspicion as they could represent legitimate administrative actions as well. However, in the context of other suspicious activities, they could be indicative of an attack aimed at disabling security tools to facilitate further malicious actions undetected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an security threat is detected in Okta..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a security threat is detected in Okta, you should monitor the logs produced by Okta services for specific events that indicate a threat has been detected. Specifically, look for events with the type \"security.threat.detected\". These events signal that Okta has identified a potential security issue. It's important to address these threats with a medium level of urgency, although be aware that some events might be false positives where the activity is benign and does not actually pose any security risk. Nevertheless, all detected threats should be investigated to determine their legitimacy and impact.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: security.threat.detected\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: security.threat.detected\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "when an security threat is detected in Okta.",
      "answer": "In order to detect when a security threat is detected in Okta, you should monitor the logs produced by Okta services for specific events that indicate a threat has been detected. Specifically, look for events with the type \"security.threat.detected\". These events signal that Okta has identified a potential security issue. It's important to address these threats with a medium level of urgency, although be aware that some events might be false positives where the activity is benign and does not actually pose any security risk. Nevertheless, all detected threats should be investigated to determine their legitimacy and impact."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious failed logins with different user accounts from a single source system.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious failed logins with different user accounts from a single source system, you should monitor Windows security logs for specific event patterns that indicate such activity. Focus on security events with the Event ID 4776, which relates to the validation of credentials against the domain controller. These events become particularly suspicious when more than three different user account login failures originate from the same workstation within a 24-hour period. This pattern suggests an attempt to gain unauthorized access by trying numerous username combinations, which is a common tactic used in brute force or password spray attacks.\n\nBe aware that certain environments, such as terminal servers, jump servers, and other multi-user systems including Citrix server farms, as well as workstations used by multiple users in quick succession, are prone to generating false positives for this detection strategy. These systems naturally have higher rates of failed login attempts due to their operational use case, where many users access a single system.\n\nConsidering these factors, deploying this detection method with a comprehension of its potential for false positives is crucial. Adjustments and exceptions might need to be made for systems that are identified as common sources of legitimate failed login attempts to fine-tune the accuracy of identifying suspicious activity. This approach aims to strike a balance between identifying malicious attempts to access systems without overwhelming security teams with false alarms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection2:\n        EventID: 4776\n        TargetUserName: '*'\n        Workstation: '*'\n    timeframe: 24h\n    condition: selection2 | count(TargetUserName) by Workstation > 3\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Other multiuser systems like Citrix server farms\n    - Workstations with frequently changing users\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection2:\n        EventID: 4776\n        TargetUserName: '*'\n        Workstation: '*'\n    timeframe: 24h\n    condition: selection2 | count(TargetUserName) by Workstation > 3\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Other multiuser systems like Citrix server farms\n    - Workstations with frequently changing users\nlevel: medium\n",
      "question": "suspicious failed logins with different user accounts from a single source system",
      "answer": "In order to detect suspicious failed logins with different user accounts from a single source system, you should monitor Windows security logs for specific event patterns that indicate such activity. Focus on security events with the Event ID 4776, which relates to the validation of credentials against the domain controller. These events become particularly suspicious when more than three different user account login failures originate from the same workstation within a 24-hour period. This pattern suggests an attempt to gain unauthorized access by trying numerous username combinations, which is a common tactic used in brute force or password spray attacks.\n\nBe aware that certain environments, such as terminal servers, jump servers, and other multi-user systems including Citrix server farms, as well as workstations used by multiple users in quick succession, are prone to generating false positives for this detection strategy. These systems naturally have higher rates of failed login attempts due to their operational use case, where many users access a single system.\n\nConsidering these factors, deploying this detection method with a comprehension of its potential for false positives is crucial. Adjustments and exceptions might need to be made for systems that are identified as common sources of legitimate failed login attempts to fine-tune the accuracy of identifying suspicious activity. This approach aims to strike a balance between identifying malicious attempts to access systems without overwhelming security teams with false alarms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls useb by SharpHound to map remote connections and local group membership..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: Focus on analyzing logs from RPC Firewall, specifically those categorized under the application. Ensure that the RPC Firewall is installed and properly configured to audit and block RPC calls based on the configuration \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2\". The detection strategy revolves around monitoring for event logs tagged with \"RPCFW\", with an EventID of 3, which indicates an intercepted remote procedure call. Specifically, you are looking for any RPC calls that match the Interface UUID \"6bffd098-a112-3610-9833-46c3f87e345a\" and an operation number \"OpNum\" of 2. These parameters are indicative of the specific type of RPC call utilized by SharpHound in its reconnaissance activities. While analyzing these logs, it's important to be aware that false positives are unknown, indicating that each detection should be investigated thoroughly due to the high criticality of this activity. This approach is crucial in identifying and mitigating the tactics and techniques associated with the mapping of remote connections and the enumeration of local group memberships, typically involved in reconnaissance phases of cyber attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 6bffd098-a112-3610-9833-46c3f87e345a\n        OpNum: 2\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 6bffd098-a112-3610-9833-46c3f87e345a\n        OpNum: 2\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "remote RPC calls useb by SharpHound to map remote connections and local group membership.",
      "answer": "In order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: Focus on analyzing logs from RPC Firewall, specifically those categorized under the application. Ensure that the RPC Firewall is installed and properly configured to audit and block RPC calls based on the configuration \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2\". The detection strategy revolves around monitoring for event logs tagged with \"RPCFW\", with an EventID of 3, which indicates an intercepted remote procedure call. Specifically, you are looking for any RPC calls that match the Interface UUID \"6bffd098-a112-3610-9833-46c3f87e345a\" and an operation number \"OpNum\" of 2. These parameters are indicative of the specific type of RPC call utilized by SharpHound in its reconnaissance activities. While analyzing these logs, it's important to be aware that false positives are unknown, indicating that each detection should be investigated thoroughly due to the high criticality of this activity. This approach is crucial in identifying and mitigating the tactics and techniques associated with the mapping of remote connections and the enumeration of local group memberships, typically involved in reconnaissance phases of cyber attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Ryuk Ransomware command lines.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Ryuk Ransomware command lines, you should: Focus on monitoring process creation events within Windows environments. Look specifically for processes that end with '\\net.exe' or '\\net1.exe' and contain the command line argument 'stop'. Additionally, be alert for any command line executions that contain the strings 'samss', 'audioendpointbuilder', or 'unistoresvc_'. Pay attention to all these conditions simultaneously as they are indicative of the methods employed by Ryuk Ransomware. Given the critical nature of such detections, false positives are considered unlikely. This approach assists in identifying potential instances of the Ryuk Ransomware actively disrupting or manipulating system processes and services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'stop'\n    selection2:\n        CommandLine|contains:\n            - 'samss'\n            - 'audioendpointbuilder'\n            - 'unistoresvc_'\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'stop'\n    selection2:\n        CommandLine|contains:\n            - 'samss'\n            - 'audioendpointbuilder'\n            - 'unistoresvc_'\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "Ryuk Ransomware command lines",
      "answer": "In order to detect Ryuk Ransomware command lines, you should: Focus on monitoring process creation events within Windows environments. Look specifically for processes that end with '\\net.exe' or '\\net1.exe' and contain the command line argument 'stop'. Additionally, be alert for any command line executions that contain the strings 'samss', 'audioendpointbuilder', or 'unistoresvc_'. Pay attention to all these conditions simultaneously as they are indicative of the methods employed by Ryuk Ransomware. Given the critical nature of such detections, false positives are considered unlikely. This approach assists in identifying potential instances of the Ryuk Ransomware actively disrupting or manipulating system processes and services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of new services potentially related to COLDSTEEL RAT.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of new services potentially related to COLDSTEEL RAT, you should: Monitor Windows system logs for events indicating the creation of new services. Focus specifically on logs from the Service Control Manager with an Event ID of 7045. This event signals that a new service has been installed in the system. Pay special attention to services named 'Name', 'msupdate', or 'msupdate2'. Additionally, scrutinize the ImagePath field for any instances containing the path '\\Windows\\System32\\svchost.exe', as this is a common tactic used by malware to disguise themselves as legitimate Windows services. False positives are considered unlikely, indicating the detection methods are highly specific and closely associated with malicious activity. The severity level of this activity is marked as high due to its potential impact related to the COLDSTEEL RAT, implicating this monitoring strategy as critical for identifying and mitigating threats early on.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName:\n            - 'Name'\n            - 'msupdate'\n            - 'msupdate2'\n        ImagePath|contains: '\\Windows\\System32\\svchost.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName:\n            - 'Name'\n            - 'msupdate'\n            - 'msupdate2'\n        ImagePath|contains: '\\Windows\\System32\\svchost.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "creation of new services potentially related to COLDSTEEL RAT",
      "answer": "In order to detect the creation of new services potentially related to COLDSTEEL RAT, you should: Monitor Windows system logs for events indicating the creation of new services. Focus specifically on logs from the Service Control Manager with an Event ID of 7045. This event signals that a new service has been installed in the system. Pay special attention to services named 'Name', 'msupdate', or 'msupdate2'. Additionally, scrutinize the ImagePath field for any instances containing the path '\\Windows\\System32\\svchost.exe', as this is a common tactic used by malware to disguise themselves as legitimate Windows services. False positives are considered unlikely, indicating the detection methods are highly specific and closely associated with malicious activity. The severity level of this activity is marked as high due to its potential impact related to the COLDSTEEL RAT, implicating this monitoring strategy as critical for identifying and mitigating threats early on."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of AppX packages with known suspicious or malicious signature.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of AppX packages with known suspicious or malicious signature, you should monitor Windows application packaging logs for specific events related to the installation or execution of AppX packages. Focus your attention on events with the ID 157 within the AppX packaging service logs. This particular event ID indicates the activation of an AppX package, which could potentially be harmful if it originates from untrusted sources. Specifically, lookout for packages signed by the certificate with a subject name of \"CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\". This certificate has been identified as suspicious or malicious based on its usage in various attacks. It is crucial to be aware that there might be instances where this detection could trigger false positives, although the circumstances under which these might occur are unknown. The severity level for this detection has been set to medium, indicating a balanced caution between overlooking potential threats and overreacting to benign activities. This detection is aligned with techniques identified by MITRE ATT&CK relating to the abuse of application deployment systems for the purpose of executing untrusted code.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: appxpackaging-om\ndetection:\n    selection:\n        EventID: 157\n        # Add more known suspicious/malicious certificates used in different attacks\n        subjectName: 'CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: appxpackaging-om\ndetection:\n    selection:\n        EventID: 157\n        # Add more known suspicious/malicious certificates used in different attacks\n        subjectName: 'CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of AppX packages with known suspicious or malicious signature",
      "answer": "In order to detect execution of AppX packages with known suspicious or malicious signature, you should monitor Windows application packaging logs for specific events related to the installation or execution of AppX packages. Focus your attention on events with the ID 157 within the AppX packaging service logs. This particular event ID indicates the activation of an AppX package, which could potentially be harmful if it originates from untrusted sources. Specifically, lookout for packages signed by the certificate with a subject name of \"CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\". This certificate has been identified as suspicious or malicious based on its usage in various attacks. It is crucial to be aware that there might be instances where this detection could trigger false positives, although the circumstances under which these might occur are unknown. The severity level for this detection has been set to medium, indicating a balanced caution between overlooking potential threats and overreacting to benign activities. This detection is aligned with techniques identified by MITRE ATT&CK relating to the abuse of application deployment systems for the purpose of executing untrusted code."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to environment variables related to ETW logging. This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to environment variables related to ETW logging, which could indicate potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: monitor the creation of processes on Windows systems, specifically looking for the presence of 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' in the command line arguments. These particular strings are associated with environment variables that control ETW (Event Tracing for Windows) logging settings for .NET applications. A change or manipulation of these could suggest an attempt to evade detection by disabling logging of .NET assembly loads. Such activities are considered highly suspicious and are unlikely to produce false positives, highlighting the significance of detecting these specific command line arguments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'COMPlus_ETWEnabled'\n            - 'COMPlus_ETWFlags'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'COMPlus_ETWEnabled'\n            - 'COMPlus_ETWFlags'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "changes to environment variables related to ETW logging. This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies.",
      "answer": "In order to detect changes to environment variables related to ETW logging, which could indicate potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: monitor the creation of processes on Windows systems, specifically looking for the presence of 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' in the command line arguments. These particular strings are associated with environment variables that control ETW (Event Tracing for Windows) logging settings for .NET applications. A change or manipulation of these could suggest an attempt to evade detection by disabling logging of .NET assembly loads. Such activities are considered highly suspicious and are unlikely to produce false positives, highlighting the significance of detecting these specific command line arguments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via RUNDLL LAUNCHER.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Focus on monitoring driver load events in Windows environments. Specifically, look for the loading of drivers where the ImagePath includes rundll32.exe in conjunction with shell32.dll, as well as the specific mention of shellexec_rundll and powershell within the same command context. This scenario is indicative of a method used to execute obfuscated PowerShell scripts, an approach commonly leveraged by attackers to evade detection mechanisms. Such actions align with defense evasion and execution tactics, particularly those involving the obfuscation of malicious scripts (T1027) and the execution of PowerShell scripts (T1059.001) in an attempt to sidestep security measures. The identification of these activities should be met with a medium level of alertness due to the potential for false positives, although such occurrences are currently unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\ntags:\n    - attack.defense_evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\ntags:\n    - attack.defense_evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\n",
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Focus on monitoring driver load events in Windows environments. Specifically, look for the loading of drivers where the ImagePath includes rundll32.exe in conjunction with shell32.dll, as well as the specific mention of shellexec_rundll and powershell within the same command context. This scenario is indicative of a method used to execute obfuscated PowerShell scripts, an approach commonly leveraged by attackers to evade detection mechanisms. Such actions align with defense evasion and execution tactics, particularly those involving the obfuscation of malicious scripts (T1027) and the execution of PowerShell scripts (T1059.001) in an attempt to sidestep security measures. The identification of these activities should be met with a medium level of alertness due to the potential for false positives, although such occurrences are currently unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the default output filename used by the wmiexec tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the default output filename used by the wmiexec tool, you should monitor file events on Windows systems for the creation of specific filenames that match a regular expression pattern indicating they were likely generated by the wmiexec tool. These filenames are characterized by being located in the Windows, C:\\, or D:\\ directories and follow a distinct pattern that includes a sequence of numbers matched by '\\d{9}\\.\\d{1,7}'. This pattern suggests that the file's name starts with a sequence of 9 digits followed by a period and then 1 to 7 more digits. The use of such specific filename patterns makes detection more reliable and is considered critical due to the potential malicious use of the wmiexec tool. This detection mechanism is designed to have a low rate of false positives, highlighting the importance and specificity of the detection criteria.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        - TargetFilename|re: '\\\\Windows\\\\__1\\d{9}\\.\\d{1,7}$' # Admin$\n        - TargetFilename|re: 'C:\\\\__1\\d{9}\\.\\d{1,7}$' # C$\n        - TargetFilename|re: 'D:\\\\__1\\d{9}\\.\\d{1,7}$' # D$\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        - TargetFilename|re: '\\\\Windows\\\\__1\\d{9}\\.\\d{1,7}$' # Admin$\n        - TargetFilename|re: 'C:\\\\__1\\d{9}\\.\\d{1,7}$' # C$\n        - TargetFilename|re: 'D:\\\\__1\\d{9}\\.\\d{1,7}$' # D$\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "creation of the default output filename used by the wmiexec tool",
      "answer": "In order to detect the creation of the default output filename used by the wmiexec tool, you should monitor file events on Windows systems for the creation of specific filenames that match a regular expression pattern indicating they were likely generated by the wmiexec tool. These filenames are characterized by being located in the Windows, C:\\, or D:\\ directories and follow a distinct pattern that includes a sequence of numbers matched by '\\d{9}\\.\\d{1,7}'. This pattern suggests that the file's name starts with a sequence of 9 digits followed by a period and then 1 to 7 more digits. The use of such specific filename patterns makes detection more reliable and is considered critical due to the potential malicious use of the wmiexec tool. This detection mechanism is designed to have a low rate of false positives, highlighting the importance and specificity of the detection criteria."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PsExec service installation and execution events (service and Sysmon).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PsExec service installation and execution events (service and Sysmon), you should: Focus on monitoring the creation of named pipes, specifically targeting those associated with the PsExec service, which is known by its distinctive pipe name '\\PSEXESVC'. This detection mechanism is primarily applicable to Windows systems and requires the configuration of logging for Named Pipe Events, which can be done through Sysmon with Event IDs 17 and 18. It is essential to ensure that your Sysmon configuration is properly set up to capture these events, which can be achieved by referring to popular Sysmon configurations available online. Additionally, it is crucial to observe various fields associated with these events, including EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName, to gather comprehensive details about the suspicious activity. Be aware that there may be instances where the detection flags activities that are not malicious, categorized under unknown false positives. The severity of this rule is considered low, implying that while it represents a potential security risk, it might not always indicate a high-threat level attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: pipe_created\n    product: windows\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName: '\\PSEXESVC'\n    condition: selection\nfields:\n    - EventID\n    - CommandLine\n    - ParentCommandLine\n    - ServiceName\n    - ServiceFileName\n    - TargetFilename\n    - PipeName\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: pipe_created\n    product: windows\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName: '\\PSEXESVC'\n    condition: selection\nfields:\n    - EventID\n    - CommandLine\n    - ParentCommandLine\n    - ServiceName\n    - ServiceFileName\n    - TargetFilename\n    - PipeName\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "PsExec service installation and execution events (service and Sysmon)",
      "answer": "In order to detect PsExec service installation and execution events (service and Sysmon), you should: Focus on monitoring the creation of named pipes, specifically targeting those associated with the PsExec service, which is known by its distinctive pipe name '\\PSEXESVC'. This detection mechanism is primarily applicable to Windows systems and requires the configuration of logging for Named Pipe Events, which can be done through Sysmon with Event IDs 17 and 18. It is essential to ensure that your Sysmon configuration is properly set up to capture these events, which can be achieved by referring to popular Sysmon configurations available online. Additionally, it is crucial to observe various fields associated with these events, including EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName, to gather comprehensive details about the suspicious activity. Be aware that there may be instances where the detection flags activities that are not malicious, categorized under unknown false positives. The severity of this rule is considered low, implying that while it represents a potential security risk, it might not always indicate a high-threat level attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation of VSphere Remote Code Execution vulnerability as described in CVE-2021-21972.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the exploitation of VSphere Remote Code Execution vulnerability as described in CVE-2021-21972, you should: Monitor your webserver logs for any POST requests that target the specific URI query '/ui/vropspluginui/rest/services/uploadova'. This activity is considered suspicious and may indicate an attempt to exploit this vulnerability. Record the client IP address and DNS name involved in such requests for further investigation. However, be aware that legitimate OVA uploads to your VSphere appliance could generate similar logs, which represent false positives in this context. This detection has been tagged as high-level due to the potential severe impact of this vulnerability being successfully exploited.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query: '/ui/vropspluginui/rest/services/uploadova'\n    condition: selection\nfields:\n    - c-ip\n    - c-dns\nfalsepositives:\n    - OVA uploads to your VSphere appliance\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query: '/ui/vropspluginui/rest/services/uploadova'\n    condition: selection\nfields:\n    - c-ip\n    - c-dns\nfalsepositives:\n    - OVA uploads to your VSphere appliance\nlevel: high\n",
      "question": "exploitation of VSphere Remote Code Execution vulnerability as described in CVE-2021-21972",
      "answer": "In order to detect the exploitation of VSphere Remote Code Execution vulnerability as described in CVE-2021-21972, you should: Monitor your webserver logs for any POST requests that target the specific URI query '/ui/vropspluginui/rest/services/uploadova'. This activity is considered suspicious and may indicate an attempt to exploit this vulnerability. Record the client IP address and DNS name involved in such requests for further investigation. However, be aware that legitimate OVA uploads to your VSphere appliance could generate similar logs, which represent false positives in this context. This detection has been tagged as high-level due to the potential severe impact of this vulnerability being successfully exploited."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process spawning from one of the Microsoft Office suite products (Word, Excel, PowerPoint, Publisher, Visio, etc.).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious process spawning from one of the Microsoft Office suite products (Word, Excel, PowerPoint, Publisher, Visio, etc.), you should: Monitor Windows system logs for process creations originating from Microsoft Office applications like EQNEDT32.EXE, EXCEL.EXE, MSACCESS.EXE, MSPUB.exe, ONENOTE.EXE, POWERPNT.exe, VISIO.exe, WINWORD.EXE, wordpad.exe, and wordview.exe. Be especially vigilant for these parent processes spawning known potentially malicious child processes, including but not limited to bitsadmin.exe, CertUtil.exe, Cmd.Exe, PowerShell.EXE, regsvr32.exe, and others that are typically used in offensive security practices. Furthermore, pay particular attention to suspicious child processes executing from unusual paths like AppData, Users\\Public, ProgramData, Windows\\Tasks, Windows\\Temp, and Windows\\System32\\Tasks, as these are common hiding spots for malicious files. The combination of a Microsoft Office product initiating one of these known risky or uncommon child processes, especially from suspicious paths, should be thoroughly investigated for potential security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\EQNEDT32.EXE'\n            - '\\EXCEL.EXE'\n            - '\\MSACCESS.EXE'\n            - '\\MSPUB.exe'\n            - '\\ONENOTE.EXE'\n            - '\\POWERPNT.exe'\n            - '\\VISIO.exe'\n            - '\\WINWORD.EXE'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n    selection_child_processes:\n        - OriginalFileName:\n            - 'bitsadmin.exe'\n            - 'CertOC.exe'\n            - 'CertUtil.exe'\n            - 'Cmd.Exe'\n            - 'CMSTP.EXE'\n            - 'cscript.exe'\n            - 'curl.exe'\n            - 'HH.exe'\n            - 'IEExec.exe'\n            - 'InstallUtil.exe'\n            - 'javaw.exe'\n            - 'Microsoft.Workflow.Compiler.exe'\n            - 'msdt.exe'\n            - 'MSHTA.EXE'\n            - 'msiexec.exe'\n            - 'Msxsl.exe'\n            - 'odbcconf.exe'\n            - 'pcalua.exe'\n            - 'PowerShell.EXE'\n            - 'RegAsm.exe'\n            - 'RegSvcs.exe'\n            - 'REGSVR32.exe'\n            - 'RUNDLL32.exe'\n            - 'schtasks.exe'\n            - 'ScriptRunner.exe'\n            - 'wmic.exe'\n            - 'WorkFolders.exe'\n            - 'wscript.exe'\n        - Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\bitsadmin.exe'\n            - '\\certoc.exe'\n            - '\\certutil.exe'\n            - '\\cmd.exe'\n            - '\\cmstp.exe'\n            - '\\control.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\ieexec.exe'\n            - '\\installutil.exe'\n            - '\\javaw.exe'\n            - '\\mftrace.exe'\n            - '\\Microsoft.Workflow.Compiler.exe'\n            - '\\msbuild.exe'\n            - '\\msdt.exe'\n            - '\\mshta.exe'\n            - '\\msidb.exe'\n            - '\\msiexec.exe'\n            - '\\msxsl.exe'\n            - '\\odbcconf.exe'\n            - '\\pcalua.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regasm.exe'\n            - '\\regsvcs.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'\n            - '\\verclsid.exe'\n            - '\\wmic.exe'\n            - '\\workfolders.exe'\n            - '\\wscript.exe'\n    selection_child_susp_paths: # Idea: Laiali Kazalbach, Mohamed Elsayed (#4142)\n        Image|contains:\n            - '\\AppData\\'\n            - '\\Users\\Public\\'\n            - '\\ProgramData\\'\n            - '\\Windows\\Tasks\\'\n            - '\\Windows\\Temp\\'\n            - '\\Windows\\System32\\Tasks\\'\n    condition: selection_parent and 1 of selection_child_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\EQNEDT32.EXE'\n            - '\\EXCEL.EXE'\n            - '\\MSACCESS.EXE'\n            - '\\MSPUB.exe'\n            - '\\ONENOTE.EXE'\n            - '\\POWERPNT.exe'\n            - '\\VISIO.exe'\n            - '\\WINWORD.EXE'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n    selection_child_processes:\n        - OriginalFileName:\n            - 'bitsadmin.exe'\n            - 'CertOC.exe'\n            - 'CertUtil.exe'\n            - 'Cmd.Exe'\n            - 'CMSTP.EXE'\n            - 'cscript.exe'\n            - 'curl.exe'\n            - 'HH.exe'\n            - 'IEExec.exe'\n            - 'InstallUtil.exe'\n            - 'javaw.exe'\n            - 'Microsoft.Workflow.Compiler.exe'\n            - 'msdt.exe'\n            - 'MSHTA.EXE'\n            - 'msiexec.exe'\n            - 'Msxsl.exe'\n            - 'odbcconf.exe'\n            - 'pcalua.exe'\n            - 'PowerShell.EXE'\n            - 'RegAsm.exe'\n            - 'RegSvcs.exe'\n            - 'REGSVR32.exe'\n            - 'RUNDLL32.exe'\n            - 'schtasks.exe'\n            - 'ScriptRunner.exe'\n            - 'wmic.exe'\n            - 'WorkFolders.exe'\n            - 'wscript.exe'\n        - Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\bitsadmin.exe'\n            - '\\certoc.exe'\n            - '\\certutil.exe'\n            - '\\cmd.exe'\n            - '\\cmstp.exe'\n            - '\\control.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\ieexec.exe'\n            - '\\installutil.exe'\n            - '\\javaw.exe'\n            - '\\mftrace.exe'\n            - '\\Microsoft.Workflow.Compiler.exe'\n            - '\\msbuild.exe'\n            - '\\msdt.exe'\n            - '\\mshta.exe'\n            - '\\msidb.exe'\n            - '\\msiexec.exe'\n            - '\\msxsl.exe'\n            - '\\odbcconf.exe'\n            - '\\pcalua.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regasm.exe'\n            - '\\regsvcs.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'\n            - '\\verclsid.exe'\n            - '\\wmic.exe'\n            - '\\workfolders.exe'\n            - '\\wscript.exe'\n    selection_child_susp_paths: # Idea: Laiali Kazalbach, Mohamed Elsayed (#4142)\n        Image|contains:\n            - '\\AppData\\'\n            - '\\Users\\Public\\'\n            - '\\ProgramData\\'\n            - '\\Windows\\Tasks\\'\n            - '\\Windows\\Temp\\'\n            - '\\Windows\\System32\\Tasks\\'\n    condition: selection_parent and 1 of selection_child_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious process spawning from one of the Microsoft Office suite products (Word, Excel, PowerPoint, Publisher, Visio, etc.)",
      "answer": "In order to detect a suspicious process spawning from one of the Microsoft Office suite products (Word, Excel, PowerPoint, Publisher, Visio, etc.), you should: Monitor Windows system logs for process creations originating from Microsoft Office applications like EQNEDT32.EXE, EXCEL.EXE, MSACCESS.EXE, MSPUB.exe, ONENOTE.EXE, POWERPNT.exe, VISIO.exe, WINWORD.EXE, wordpad.exe, and wordview.exe. Be especially vigilant for these parent processes spawning known potentially malicious child processes, including but not limited to bitsadmin.exe, CertUtil.exe, Cmd.Exe, PowerShell.EXE, regsvr32.exe, and others that are typically used in offensive security practices. Furthermore, pay particular attention to suspicious child processes executing from unusual paths like AppData, Users\\Public, ProgramData, Windows\\Tasks, Windows\\Temp, and Windows\\System32\\Tasks, as these are common hiding spots for malicious files. The combination of a Microsoft Office product initiating one of these known risky or uncommon child processes, especially from suspicious paths, should be thoroughly investigated for potential security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"iviewers.dll\" (OLE/COM Object Interface Viewer).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"iviewers.dll\" (OLE/COM Object Interface Viewer), you should: focus on monitoring Windows image load event logs for instances where the \"iviewers.dll\" library is loaded into a process. Specifically, look for any case where the end part of the loaded image path matches '\\iviewers.dll' indicating that \"iviewers.dll\" was loaded. However, it is essential to exclude any loading instances originating from legitimate paths known to use this DLL for benign purposes, which are typically 'C:\\Program Files (x86)\\Windows Kits\\' and 'C:\\Program Files\\Windows Kits\\'. This method helps in identifying unauthorized or malicious use of \"iviewers.dll\", possibly indicating an attempt at DLL sideloading, while minimizing false positives by disregarding known legitimate usage of this DLL. This approach is critical because DLL sideloading can be exploited by attackers to stealthily execute malicious code under the guise of a legitimate process, making it a tactic often used in sophisticated cyber attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\iviewers.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Windows Kits\\'\n            - 'C:\\Program Files\\Windows Kits\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\iviewers.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Windows Kits\\'\n            - 'C:\\Program Files\\Windows Kits\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential DLL sideloading of \"iviewers.dll\" (OLE/COM Object Interface Viewer)",
      "answer": "In order to detect potential DLL sideloading of \"iviewers.dll\" (OLE/COM Object Interface Viewer), you should: focus on monitoring Windows image load event logs for instances where the \"iviewers.dll\" library is loaded into a process. Specifically, look for any case where the end part of the loaded image path matches '\\iviewers.dll' indicating that \"iviewers.dll\" was loaded. However, it is essential to exclude any loading instances originating from legitimate paths known to use this DLL for benign purposes, which are typically 'C:\\Program Files (x86)\\Windows Kits\\' and 'C:\\Program Files\\Windows Kits\\'. This method helps in identifying unauthorized or malicious use of \"iviewers.dll\", possibly indicating an attempt at DLL sideloading, while minimizing false positives by disregarding known legitimate usage of this DLL. This approach is critical because DLL sideloading can be exploited by attackers to stealthily execute malicious code under the guise of a legitimate process, making it a tactic often used in sophisticated cyber attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts, you should monitor process creation events within Windows environments, specifically looking for instances where these processes are initiated with SYSTEM level privileges. This monitoring should leverage Sysmon, with a version of 13.30 or higher, to capture the necessary details.\n\nFirst, focus on identifying processes that are started by users whose account names contain \"AUTHORI\" or \"AUTORI\" or specifically end with \"\\NETWORK SERVICE\" or \"\\LOCAL SERVICE\". These account names are often indicative of privileged services within Windows. Additionally, you should watch for child processes that are run under user accounts with names containing \"AUTHORI\" or \"AUTORI\", or ending with system-centric identifiers such as \"\\SYSTEM\", \"\\Syst\u00e8me\", or the Cyrillic \"\\\u0421\u0418\u0421\u0422\u0415\u041c\u0410\". It's crucial to verify that these child processes indeed operate at an Integrity Level denoted as 'System', signaling elevated privileges.\n\nHowever, it's also important to apply certain exclusions to avoid false positives, particularly for common benign processes that might fit these criteria. For example, processes with an image name ending in '\\rundll32.exe' and command-line arguments containing 'DavSetCookie' should be excluded from alerts as they can often be legitimate uses of the rundll32 executable, even though they may otherwise match the criteria for detection.\n\nBy setting up this tailored monitoring technique, focused on parent and child account privileges, process initiation sources, and specific system account usage, organizations can detect and investigate the suspicious spawning of child processes by services with particularly high privileges, which could indicate unauthorized actions or breaches within the security of the Windows operating system. This method addresses the risk of elevated privilege exploitation without being overwhelmed by false positives from benign system activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\n    definition: 'Requirements: ParentUser field needs sysmon >= 13.30'\ndetection:\n    selection:\n        ParentUser|contains:\n            - 'AUTHORI'\n            - 'AUTORI'\n        ParentUser|endswith:\n            - '\\NETWORK SERVICE'\n            - '\\LOCAL SERVICE'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        User|endswith: # System\n            - '\\SYSTEM'\n            - '\\Syst\u00e8me'\n            - '\\\u0421\u0418\u0421\u0422\u0415\u041c\u0410'\n        IntegrityLevel: 'System'\n    filter_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: 'DavSetCookie'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\n    definition: 'Requirements: ParentUser field needs sysmon >= 13.30'\ndetection:\n    selection:\n        ParentUser|contains:\n            - 'AUTHORI'\n            - 'AUTORI'\n        ParentUser|endswith:\n            - '\\NETWORK SERVICE'\n            - '\\LOCAL SERVICE'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        User|endswith: # System\n            - '\\SYSTEM'\n            - '\\Syst\u00e8me'\n            - '\\\u0421\u0418\u0421\u0422\u0415\u041c\u0410'\n        IntegrityLevel: 'System'\n    filter_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: 'DavSetCookie'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts",
      "answer": "In order to detect child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts, you should monitor process creation events within Windows environments, specifically looking for instances where these processes are initiated with SYSTEM level privileges. This monitoring should leverage Sysmon, with a version of 13.30 or higher, to capture the necessary details.\n\nFirst, focus on identifying processes that are started by users whose account names contain \"AUTHORI\" or \"AUTORI\" or specifically end with \"\\NETWORK SERVICE\" or \"\\LOCAL SERVICE\". These account names are often indicative of privileged services within Windows. Additionally, you should watch for child processes that are run under user accounts with names containing \"AUTHORI\" or \"AUTORI\", or ending with system-centric identifiers such as \"\\SYSTEM\", \"\\Syst\u00e8me\", or the Cyrillic \"\\\u0421\u0418\u0421\u0422\u0415\u041c\u0410\". It's crucial to verify that these child processes indeed operate at an Integrity Level denoted as 'System', signaling elevated privileges.\n\nHowever, it's also important to apply certain exclusions to avoid false positives, particularly for common benign processes that might fit these criteria. For example, processes with an image name ending in '\\rundll32.exe' and command-line arguments containing 'DavSetCookie' should be excluded from alerts as they can often be legitimate uses of the rundll32 executable, even though they may otherwise match the criteria for detection.\n\nBy setting up this tailored monitoring technique, focused on parent and child account privileges, process initiation sources, and specific system account usage, organizations can detect and investigate the suspicious spawning of child processes by services with particularly high privileges, which could indicate unauthorized actions or breaches within the security of the Windows operating system. This method addresses the risk of elevated privilege exploitation without being overwhelmed by false positives from benign system activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious PowerShell invocation with a parameter substring.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell invocation with a parameter substring, you should: monitor process creation events on Windows systems for the execution of 'powershell.exe' or 'pwsh.exe'. Specifically, look for command lines containing substrings that indicate an attempt to run PowerShell in a hidden window, use encoded commands, or bypass the execution policy. These substrings can vary slightly in spelling or syntax (including both hyphen '-' and slash '/' variants) to try and evade detection. Examples include variations of 'windowstyle hidden', 'NoProfile', 'noninteractive', 'encodedCommand', and execution policy bypass flags such as 'bypass'. Any such activity may signify a high-level threat and warrants investigation due to its potential malicious nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -windowstyle h '\n            - ' -windowstyl h'\n            - ' -windowsty h'\n            - ' -windowst h'\n            - ' -windows h'\n            - ' -windo h'\n            - ' -wind h'\n            - ' -win h'\n            - ' -wi h'\n            - ' -win h '\n            - ' -win hi '\n            - ' -win hid '\n            - ' -win hidd '\n            - ' -win hidde '\n            - ' -NoPr '\n            - ' -NoPro '\n            - ' -NoProf '\n            - ' -NoProfi '\n            - ' -NoProfil '\n            - ' -nonin '\n            - ' -nonint '\n            - ' -noninte '\n            - ' -noninter '\n            - ' -nonintera '\n            - ' -noninterac '\n            - ' -noninteract '\n            - ' -noninteracti '\n            - ' -noninteractiv '\n            - ' -ec '\n            - ' -encodedComman '\n            - ' -encodedComma '\n            - ' -encodedComm '\n            - ' -encodedCom '\n            - ' -encodedCo '\n            - ' -encodedC '\n            - ' -encoded '\n            - ' -encode '\n            - ' -encod '\n            - ' -enco '\n            - ' -en '\n            - ' -executionpolic '\n            - ' -executionpoli '\n            - ' -executionpol '\n            - ' -executionpo '\n            - ' -executionp '\n            - ' -execution bypass'\n            - ' -executio bypass'\n            - ' -executi bypass'\n            - ' -execut bypass'\n            - ' -execu bypass'\n            - ' -exec bypass'\n            - ' -exe bypass'\n            - ' -ex bypass'\n            - ' -ep bypass'\n            - ' /windowstyle h '\n            - ' /windowstyl h'\n            - ' /windowsty h'\n            - ' /windowst h'\n            - ' /windows h'\n            - ' /windo h'\n            - ' /wind h'\n            - ' /win h'\n            - ' /wi h'\n            - ' /win h '\n            - ' /win hi '\n            - ' /win hid '\n            - ' /win hidd '\n            - ' /win hidde '\n            - ' /NoPr '\n            - ' /NoPro '\n            - ' /NoProf '\n            - ' /NoProfi '\n            - ' /NoProfil '\n            - ' /nonin '\n            - ' /nonint '\n            - ' /noninte '\n            - ' /noninter '\n            - ' /nonintera '\n            - ' /noninterac '\n            - ' /noninteract '\n            - ' /noninteracti '\n            - ' /noninteractiv '\n            - ' /ec '\n            - ' /encodedComman '\n            - ' /encodedComma '\n            - ' /encodedComm '\n            - ' /encodedCom '\n            - ' /encodedCo '\n            - ' /encodedC '\n            - ' /encoded '\n            - ' /encode '\n            - ' /encod '\n            - ' /enco '\n            - ' /en '\n            - ' /executionpolic '\n            - ' /executionpoli '\n            - ' /executionpol '\n            - ' /executionpo '\n            - ' /executionp '\n            - ' /execution bypass'\n            - ' /executio bypass'\n            - ' /executi bypass'\n            - ' /execut bypass'\n            - ' /execu bypass'\n            - ' /exec bypass'\n            - ' /exe bypass'\n            - ' /ex bypass'\n            - ' /ep bypass'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -windowstyle h '\n            - ' -windowstyl h'\n            - ' -windowsty h'\n            - ' -windowst h'\n            - ' -windows h'\n            - ' -windo h'\n            - ' -wind h'\n            - ' -win h'\n            - ' -wi h'\n            - ' -win h '\n            - ' -win hi '\n            - ' -win hid '\n            - ' -win hidd '\n            - ' -win hidde '\n            - ' -NoPr '\n            - ' -NoPro '\n            - ' -NoProf '\n            - ' -NoProfi '\n            - ' -NoProfil '\n            - ' -nonin '\n            - ' -nonint '\n            - ' -noninte '\n            - ' -noninter '\n            - ' -nonintera '\n            - ' -noninterac '\n            - ' -noninteract '\n            - ' -noninteracti '\n            - ' -noninteractiv '\n            - ' -ec '\n            - ' -encodedComman '\n            - ' -encodedComma '\n            - ' -encodedComm '\n            - ' -encodedCom '\n            - ' -encodedCo '\n            - ' -encodedC '\n            - ' -encoded '\n            - ' -encode '\n            - ' -encod '\n            - ' -enco '\n            - ' -en '\n            - ' -executionpolic '\n            - ' -executionpoli '\n            - ' -executionpol '\n            - ' -executionpo '\n            - ' -executionp '\n            - ' -execution bypass'\n            - ' -executio bypass'\n            - ' -executi bypass'\n            - ' -execut bypass'\n            - ' -execu bypass'\n            - ' -exec bypass'\n            - ' -exe bypass'\n            - ' -ex bypass'\n            - ' -ep bypass'\n            - ' /windowstyle h '\n            - ' /windowstyl h'\n            - ' /windowsty h'\n            - ' /windowst h'\n            - ' /windows h'\n            - ' /windo h'\n            - ' /wind h'\n            - ' /win h'\n            - ' /wi h'\n            - ' /win h '\n            - ' /win hi '\n            - ' /win hid '\n            - ' /win hidd '\n            - ' /win hidde '\n            - ' /NoPr '\n            - ' /NoPro '\n            - ' /NoProf '\n            - ' /NoProfi '\n            - ' /NoProfil '\n            - ' /nonin '\n            - ' /nonint '\n            - ' /noninte '\n            - ' /noninter '\n            - ' /nonintera '\n            - ' /noninterac '\n            - ' /noninteract '\n            - ' /noninteracti '\n            - ' /noninteractiv '\n            - ' /ec '\n            - ' /encodedComman '\n            - ' /encodedComma '\n            - ' /encodedComm '\n            - ' /encodedCom '\n            - ' /encodedCo '\n            - ' /encodedC '\n            - ' /encoded '\n            - ' /encode '\n            - ' /encod '\n            - ' /enco '\n            - ' /en '\n            - ' /executionpolic '\n            - ' /executionpoli '\n            - ' /executionpol '\n            - ' /executionpo '\n            - ' /executionp '\n            - ' /execution bypass'\n            - ' /executio bypass'\n            - ' /executi bypass'\n            - ' /execut bypass'\n            - ' /execu bypass'\n            - ' /exec bypass'\n            - ' /exe bypass'\n            - ' /ex bypass'\n            - ' /ep bypass'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious PowerShell invocation with a parameter substring",
      "answer": "In order to detect suspicious PowerShell invocation with a parameter substring, you should: monitor process creation events on Windows systems for the execution of 'powershell.exe' or 'pwsh.exe'. Specifically, look for command lines containing substrings that indicate an attempt to run PowerShell in a hidden window, use encoded commands, or bypass the execution policy. These substrings can vary slightly in spelling or syntax (including both hyphen '-' and slash '/' variants) to try and evade detection. Examples include variations of 'windowstyle hidden', 'NoProfile', 'noninteractive', 'encodedCommand', and execution policy bypass flags such as 'bypass'. Any such activity may signify a high-level threat and warrants investigation due to its potential malicious nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"logman\" utility in order to disable or delete Windows trace sessions.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\logman.exe'\n        - OriginalFileName: 'Logman.exe'\n    selection_action:\n        CommandLine|contains:\n            - 'stop '\n            - 'delete '\n    selection_service:\n        CommandLine|contains:\n            - 'Circular Kernel Context Logger'\n            - 'EventLog-' # Cover multiple traces starting with EventLog-*\n            - 'SYSMON TRACE'\n            - 'SysmonDnsEtwSession'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate deactivation by administrative staff\n    - Installer tools that disable services, e.g. before log collection agent installation\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\logman.exe'\n        - OriginalFileName: 'Logman.exe'\n    selection_action:\n        CommandLine|contains:\n            - 'stop '\n            - 'delete '\n    selection_service:\n        CommandLine|contains:\n            - 'Circular Kernel Context Logger'\n            - 'EventLog-' # Cover multiple traces starting with EventLog-*\n            - 'SYSMON TRACE'\n            - 'SysmonDnsEtwSession'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate deactivation by administrative staff\n    - Installer tools that disable services, e.g. before log collection agent installation\nlevel: high\n",
      "question": "execution of \"logman\" utility in order to disable or delete Windows trace sessions",
      "answer": "In order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to bypass User Account Control using Event Viewer and a relevant Windows Registry modification, you should: Monitor registry set actions within Windows environments, specifically focusing on events where a SetValue operation occurs. This operation is crucial to watch as it could indicate an attempt to modify system settings through the registry that are unauthorized and potentially malicious. Key to identifying suspicious activity is the alteration of the registry key ending with '\\_Classes\\mscfile\\shell\\open\\command\\(Default)'. This specific modification is a known technique used by attackers to intercept and manipulate how certain administrative tools, like the Event Viewer, operate, effectively circumventing User Account Control mechanisms.\n\nYou must filter out benign modifications to this registry value, which are commonly identified by their details starting with '%SystemRoot%\\system32\\mmc.exe \"%1\" %'. These are typical configurations that should not be flagged as suspicious. However, any modification to this registry key not fitting this pattern should be considered a potential security threat. \n\nNo specific false positives have been identified, indicating that while the criteria are tightly defined, scrutiny of alerts is recommended to ensure they truly represent malicious activity. The severity level for this kind of detection has been classified as high due to the risk associated with successful bypasses of User Account Control, emphasizing the importance of prompt and effective response. \n\nMaintain vigilance for such registry modifications as part of your cyber defense strategy to protect against this sophisticated method of gaining elevated privileges without triggering standard security alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '_Classes\\mscfile\\shell\\open\\command\\(Default)'\n    filter:\n        Details|startswith: '%SystemRoot%\\system32\\mmc.exe \"%1\" %'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '_Classes\\mscfile\\shell\\open\\command\\(Default)'\n    filter:\n        Details|startswith: '%SystemRoot%\\system32\\mmc.exe \"%1\" %'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification",
      "answer": "In order to bypass User Account Control using Event Viewer and a relevant Windows Registry modification, you should: Monitor registry set actions within Windows environments, specifically focusing on events where a SetValue operation occurs. This operation is crucial to watch as it could indicate an attempt to modify system settings through the registry that are unauthorized and potentially malicious. Key to identifying suspicious activity is the alteration of the registry key ending with '\\_Classes\\mscfile\\shell\\open\\command\\(Default)'. This specific modification is a known technique used by attackers to intercept and manipulate how certain administrative tools, like the Event Viewer, operate, effectively circumventing User Account Control mechanisms.\n\nYou must filter out benign modifications to this registry value, which are commonly identified by their details starting with '%SystemRoot%\\system32\\mmc.exe \"%1\" %'. These are typical configurations that should not be flagged as suspicious. However, any modification to this registry key not fitting this pattern should be considered a potential security threat. \n\nNo specific false positives have been identified, indicating that while the criteria are tightly defined, scrutiny of alerts is recommended to ensure they truly represent malicious activity. The severity level for this kind of detection has been classified as high due to the risk associated with successful bypasses of User Account Control, emphasizing the importance of prompt and effective response. \n\nMaintain vigilance for such registry modifications as part of your cyber defense strategy to protect against this sophisticated method of gaining elevated privileges without triggering standard security alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting code fragments found in small and obfuscated AMSI bypass PowerShell scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect code fragments found in small and obfuscated AMSI bypass PowerShell scripts, you should: Focus on Windows platform, particularly monitoring PowerShell script activities where Script Block Logging is enabled. Identify scripts containing all the specific strings '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static', as these are indicative of attempts to bypass the Anti-Malware Scan Interface (AMSI) using obfuscation techniques. This detection strategy is of high importance due to the significant security risk posed by executing obfuscated scripts that attempt to evade malware detection mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "code fragments found in small and obfuscated AMSI bypass PowerShell scripts",
      "answer": "In order to detect code fragments found in small and obfuscated AMSI bypass PowerShell scripts, you should: Focus on Windows platform, particularly monitoring PowerShell script activities where Script Block Logging is enabled. Identify scripts containing all the specific strings '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static', as these are indicative of attempts to bypass the Anti-Malware Scan Interface (AMSI) using obfuscation techniques. This detection strategy is of high importance due to the significant security risk posed by executing obfuscated scripts that attempt to evade malware detection mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect execution of suspicious double extension files in ParentCommandLine.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of suspicious double extension files in ParentCommandLine, you should monitor the process creation logs on Windows systems for activities where the parent process image or command line ends with or contains file extensions indicating a document or script masked as a different file type. Specifically, look for files with dual extensions where the expected document extensions like '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.rtf', '.pdf', and '.txt' are followed by '.lnk' (indicating a shortcut pointing to the original file type) or '.js' (implying an embedded JavaScript script). Such anomalies suggest a possible attempt to deceive users or automated systems by disguising malicious executable scripts as benign documents, which is a common tactic used in various types of cyber attacks, including phishing and malware distribution. Always be cautious with false positives, but given the high risk that these types of files represent, each case warrants thorough investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - ParentImage|endswith:\n            - '.doc.lnk'\n            - '.docx.lnk'\n            - '.xls.lnk'\n            - '.xlsx.lnk'\n            - '.ppt.lnk'\n            - '.pptx.lnk'\n            - '.rtf.lnk'\n            - '.pdf.lnk'\n            - '.txt.lnk'\n            - '.doc.js'\n            - '.docx.js'\n            - '.xls.js'\n            - '.xlsx.js'\n            - '.ppt.js'\n            - '.pptx.js'\n            - '.rtf.js'\n            - '.pdf.js'\n            - '.txt.js'\n        - ParentCommandLine|contains:\n            - '.doc.lnk'\n            - '.docx.lnk'\n            - '.xls.lnk'\n            - '.xlsx.lnk'\n            - '.ppt.lnk'\n            - '.pptx.lnk'\n            - '.rtf.lnk'\n            - '.pdf.lnk'\n            - '.txt.lnk'\n            - '.doc.js'\n            - '.docx.js'\n            - '.xls.js'\n            - '.xlsx.js'\n            - '.ppt.js'\n            - '.pptx.js'\n            - '.rtf.js'\n            - '.pdf.js'\n            - '.txt.js'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - ParentImage|endswith:\n            - '.doc.lnk'\n            - '.docx.lnk'\n            - '.xls.lnk'\n            - '.xlsx.lnk'\n            - '.ppt.lnk'\n            - '.pptx.lnk'\n            - '.rtf.lnk'\n            - '.pdf.lnk'\n            - '.txt.lnk'\n            - '.doc.js'\n            - '.docx.js'\n            - '.xls.js'\n            - '.xlsx.js'\n            - '.ppt.js'\n            - '.pptx.js'\n            - '.rtf.js'\n            - '.pdf.js'\n            - '.txt.js'\n        - ParentCommandLine|contains:\n            - '.doc.lnk'\n            - '.docx.lnk'\n            - '.xls.lnk'\n            - '.xlsx.lnk'\n            - '.ppt.lnk'\n            - '.pptx.lnk'\n            - '.rtf.lnk'\n            - '.pdf.lnk'\n            - '.txt.lnk'\n            - '.doc.js'\n            - '.docx.js'\n            - '.xls.js'\n            - '.xlsx.js'\n            - '.ppt.js'\n            - '.pptx.js'\n            - '.rtf.js'\n            - '.pdf.js'\n            - '.txt.js'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect execution of suspicious double extension files in ParentCommandLine",
      "answer": "In order to detect execution of suspicious double extension files in ParentCommandLine, you should monitor the process creation logs on Windows systems for activities where the parent process image or command line ends with or contains file extensions indicating a document or script masked as a different file type. Specifically, look for files with dual extensions where the expected document extensions like '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.rtf', '.pdf', and '.txt' are followed by '.lnk' (indicating a shortcut pointing to the original file type) or '.js' (implying an embedded JavaScript script). Such anomalies suggest a possible attempt to deceive users or automated systems by disguising malicious executable scripts as benign documents, which is a common tactic used in various types of cyber attacks, including phishing and malware distribution. Always be cautious with false positives, but given the high risk that these types of files represent, each case warrants thorough investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting registry keys related to Ursnif malware..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect registry keys related to Ursnif malware, you should monitor for the creation of new registry keys within Windows, specifically targeting instances where the registry category indicates an addition to the registry. Look for events where a new registry key creation (EventType: CreateKey) is detected, especially those that involve path strings containing '\\Software\\AppDataLow\\Software\\Microsoft\\'. However, to improve precision and reduce false alarms, it is crucial to exclude any events that involve the creation of keys under the paths that include '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\', or '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'. This focused approach helps in isolating registry key creations that are more likely to be associated with malicious activities, particularly those that could be linked to the Ursnif malware, a prevalent threat. While there may still be unknown false positives, given the high level of specificity in the detection criteria, any match should be treated with a high degree of suspicion and investigated accordingly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains: '\\Software\\AppDataLow\\Software\\Microsoft\\'\n    filter:\n        TargetObject|contains:\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains: '\\Software\\AppDataLow\\Software\\Microsoft\\'\n    filter:\n        TargetObject|contains:\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "registry keys related to Ursnif malware.",
      "answer": "In order to detect registry keys related to Ursnif malware, you should monitor for the creation of new registry keys within Windows, specifically targeting instances where the registry category indicates an addition to the registry. Look for events where a new registry key creation (EventType: CreateKey) is detected, especially those that involve path strings containing '\\Software\\AppDataLow\\Software\\Microsoft\\'. However, to improve precision and reduce false alarms, it is crucial to exclude any events that involve the creation of keys under the paths that include '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\', or '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'. This focused approach helps in isolating registry key creations that are more likely to be associated with malicious activities, particularly those that could be linked to the Ursnif malware, a prevalent threat. While there may still be unknown false positives, given the high level of specificity in the detection criteria, any match should be treated with a high degree of suspicion and investigated accordingly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an Policy Rule is Modified or Deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Policy Rule is Modified or Deleted, you should monitor log data from Okta services. Specifically, look for events where the event type indicates either a policy rule update or a policy rule deletion. These modifications to policy rules can signal unauthorized changes aiming to weaken security policies or bypass security controls. Keeping an eye on these events is vital as they might not necessarily be malicious on their own, but without legitimate reasons, they could indicate a security risk or a breach attempt. The level of concern for such events is considered medium, meaning while they may not always represent malicious activities, they are significant enough to warrant investigation. False positives can occur, meaning there might be instances where policy rules are legitimately modified or deleted, and distinguishing between malicious and non-malicious changes requires further investigation. This monitoring process is crucial for maintaining the integrity of security policies within an organization's Okta environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype:\n            - policy.rule.update\n            - policy.rule.delete\n    condition: selection\nfalsepositives:\n    - Unknown\n\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype:\n            - policy.rule.update\n            - policy.rule.delete\n    condition: selection\nfalsepositives:\n    - Unknown\n\nlevel: medium\n",
      "question": "when an Policy Rule is Modified or Deleted.",
      "answer": "In order to detect when a Policy Rule is Modified or Deleted, you should monitor log data from Okta services. Specifically, look for events where the event type indicates either a policy rule update or a policy rule deletion. These modifications to policy rules can signal unauthorized changes aiming to weaken security policies or bypass security controls. Keeping an eye on these events is vital as they might not necessarily be malicious on their own, but without legitimate reasons, they could indicate a security risk or a breach attempt. The level of concern for such events is considered medium, meaning while they may not always represent malicious activities, they are significant enough to warrant investigation. False positives can occur, meaning there might be instances where policy rules are legitimately modified or deleted, and distinguishing between malicious and non-malicious changes requires further investigation. This monitoring process is crucial for maintaining the integrity of security policies within an organization's Okta environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible command execution by web application/web shell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible command execution by a web application/web shell, you should focus on setting up monitoring for specific system calls indicative of this type of activity on Linux systems using the Audit daemon (auditd). Specifically, pay attention to the execution system call (execve) made by the web server's user account, typically 'www-data' which, by default, has the user ID 33. This monitoring is established by adding rules to your auditd configuration that target both 32-bit and 64-bit architectures. These rules should be set to always trigger on the 'exit' action of the execve system call made by the effective user ID (euid) corresponding to your web server user. \n\nYou should tag and categorize these detection logs with a distinctive key, such as 'detect_execve_www', to facilitate their identification. Be aware that not all instances flagged by these monitoring rules are malicious. Legitimate administration activity or non-standard behavior by web applications may also trigger these alerts. Due to the critical nature of detecting unauthorized command execution, the level of concern for these detections is considered critical. This approach aligns with tactics commonly associated with the initiation and execution phases of an attack, where malicious commands may be executed on a server to either gain an initial foothold or move laterally within an environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        # You need to add to the following rules to your auditd.conf config:\n        #   -a always,exit -F arch=b32 -S execve -F euid=33 -k detect_execve_www\n        #   -a always,exit -F arch=b64 -S execve -F euid=33 -k detect_execve_www\n        # Change the number \"33\" to the ID of your WebServer user. Default: www-data:x:33:33\n        type: 'SYSCALL'\n        syscall: 'execve'\n        key: 'detect_execve_www'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Crazy web applications\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        # You need to add to the following rules to your auditd.conf config:\n        #   -a always,exit -F arch=b32 -S execve -F euid=33 -k detect_execve_www\n        #   -a always,exit -F arch=b64 -S execve -F euid=33 -k detect_execve_www\n        # Change the number \"33\" to the ID of your WebServer user. Default: www-data:x:33:33\n        type: 'SYSCALL'\n        syscall: 'execve'\n        key: 'detect_execve_www'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Crazy web applications\nlevel: critical\n",
      "question": "possible command execution by web application/web shell",
      "answer": "In order to detect possible command execution by a web application/web shell, you should focus on setting up monitoring for specific system calls indicative of this type of activity on Linux systems using the Audit daemon (auditd). Specifically, pay attention to the execution system call (execve) made by the web server's user account, typically 'www-data' which, by default, has the user ID 33. This monitoring is established by adding rules to your auditd configuration that target both 32-bit and 64-bit architectures. These rules should be set to always trigger on the 'exit' action of the execve system call made by the effective user ID (euid) corresponding to your web server user. \n\nYou should tag and categorize these detection logs with a distinctive key, such as 'detect_execve_www', to facilitate their identification. Be aware that not all instances flagged by these monitoring rules are malicious. Legitimate administration activity or non-standard behavior by web applications may also trigger these alerts. Due to the critical nature of detecting unauthorized command execution, the level of concern for these detections is considered critical. This approach aligns with tactics commonly associated with the initiation and execution phases of an attack, where malicious commands may be executed on a server to either gain an initial foothold or move laterally within an environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of autostart extensibility point (ASEP) in registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring Windows registry settings for specific events and changes that signify potential unauthorized modifications aimed at enabling autostart mechanisms for malware or other unwanted programs. The analysis should be concentrated on registry set events, particularly the `SetValue` event type, which indicates an attempt to modify registry values.\n\nKey registry paths to monitor include various locations under the `SOFTWARE\\Wow6432Node\\Microsoft` and `SOFTWARE\\Microsoft` paths that are commonly targeted for persistence mechanisms, such as `AutoStart`, `Command Processor\\Autorun`, `Active Setup\\Installed Components`, and several others including `SYSTEM\\Setup\\CmdLine`, `Software\\Microsoft\\Ctf\\LangBarAddin`, and `Environment\\UserInitMprLogonScript`. \n\nFurthermore, entries relating to browser components (`Software\\Microsoft\\Internet Explorer\\UrlSearchHooks`, `SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components`, etc.), desktop components (`Control Panel\\Desktop\\Scrnsave.exe`), and protocol handlers (`SOFTWARE\\Classes\\Protocols\\Handler`, `Software\\Classes\\Protocols\\Filter`) are crucial to monitor due to their potential to be leveraged for persistence and execution through user interaction or system events.\n\nSpecial attention should be given to exclude modifications related to certain Microsoft Office, Chrome, Edge, and Internet Explorer components, as denoted by specific registry paths and details related to these applications, from triggering alerts to reduce false positives. This is achieved by filtering out changes occurring in specified registry locations related to Microsoft Office ClickToRun, Chrome, Edge, and Internet Explorer setup components, alongside some known benign executables (`poqexec.exe`, `integrator.exe` and `OfficeClickToRun.exe`).\n\nCrucially, ensuring that legitimate software installations and administrator-configured autorun keys are carefully distinguished from malicious modifications is imperative to maintain operational integrity and minimize instances of false alarms. \n\nThe successful detection strategy encompasses monitoring for modifications in the specified registry paths while excluding changes that are identified as legitimate through the listed exclusions. The key fields to be logged for further investigation are the SecurityID, ObjectName, OldValueType, and NewValueType, which provide essential information about the operation performed. This approach offers a balanced and focused method to detect and alert on potentially malicious ASEP modifications in the Windows registry with a medium level of confidence, aiming to protect against persistence and execution mechanisms commonly used by malware and unwanted software.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    main_selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows CE Services\\AutoStart'\n            - '\\Software\\Wow6432Node\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnDisconnect'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnConnect'\n            - '\\SYSTEM\\Setup\\CmdLine'\n            - '\\Software\\Microsoft\\Ctf\\LangBarAddin'\n            - '\\Software\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Classes\\Protocols\\Handler'\n            - '\\SOFTWARE\\Classes\\Protocols\\Filter'\n            - '\\SOFTWARE\\Classes\\Htmlfile\\Shell\\Open\\Command\\(Default)'\n            - '\\Environment\\UserInitMprLogonScript'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\\Scrnsave.exe'\n            - '\\Software\\Microsoft\\Internet Explorer\\UrlSearchHooks'\n            - '\\SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components'\n            - '\\Software\\Classes\\Clsid\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\Inprocserver32'\n            - '\\Control Panel\\Desktop\\Scrnsave.exe'\n    filter_empty:\n        Details: '(Empty)'\n    filter_msoffice:\n        - TargetObject|contains:\n            - '\\Office\\ClickToRun\\REGISTRY\\MACHINE\\Software\\Classes\\PROTOCOLS\\Handler\\'\n            - '\\ClickToRunStore\\HKMU\\SOFTWARE\\Classes\\PROTOCOLS\\Handler\\'\n        - Details:\n            - '{314111c7-a502-11d2-bbca-00c04f8ec294}'\n            - '{3459B272-CC19-4448-86C9-DDC3B4B2FAD3}'\n            - '{42089D2D-912D-4018-9087-2B87803E93FB}'\n            - '{5504BE45-A83B-4808-900A-3A5C36E7F77A}'\n            - '{807583E5-5146-11D5-A672-00B0D022E945}'\n    filter_chrome:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{8A69D345-D564-463c-AFF1-A69D9E530F96}'\n    filter_edge:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{9459C573-B17A-45AE-9F64-1857B5D58CEE}'\n    filter_IE:\n        TargetObject|contains: '\\Software\\Microsoft\\Active Setup\\Installed Components\\{89820200-ECBD-11cf-8B85-00AA005B4383}'\n    filter_image:\n        Image:\n            - 'C:\\Windows\\System32\\poqexec.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe'\n    filter_office:\n        Image|startswith:\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\'\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\Updates\\'\n        Image|endswith: '\\OfficeClickToRun.exe'\n    condition: main_selection and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    main_selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows CE Services\\AutoStart'\n            - '\\Software\\Wow6432Node\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnDisconnect'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnConnect'\n            - '\\SYSTEM\\Setup\\CmdLine'\n            - '\\Software\\Microsoft\\Ctf\\LangBarAddin'\n            - '\\Software\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Classes\\Protocols\\Handler'\n            - '\\SOFTWARE\\Classes\\Protocols\\Filter'\n            - '\\SOFTWARE\\Classes\\Htmlfile\\Shell\\Open\\Command\\(Default)'\n            - '\\Environment\\UserInitMprLogonScript'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\\Scrnsave.exe'\n            - '\\Software\\Microsoft\\Internet Explorer\\UrlSearchHooks'\n            - '\\SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components'\n            - '\\Software\\Classes\\Clsid\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\Inprocserver32'\n            - '\\Control Panel\\Desktop\\Scrnsave.exe'\n    filter_empty:\n        Details: '(Empty)'\n    filter_msoffice:\n        - TargetObject|contains:\n            - '\\Office\\ClickToRun\\REGISTRY\\MACHINE\\Software\\Classes\\PROTOCOLS\\Handler\\'\n            - '\\ClickToRunStore\\HKMU\\SOFTWARE\\Classes\\PROTOCOLS\\Handler\\'\n        - Details:\n            - '{314111c7-a502-11d2-bbca-00c04f8ec294}'\n            - '{3459B272-CC19-4448-86C9-DDC3B4B2FAD3}'\n            - '{42089D2D-912D-4018-9087-2B87803E93FB}'\n            - '{5504BE45-A83B-4808-900A-3A5C36E7F77A}'\n            - '{807583E5-5146-11D5-A672-00B0D022E945}'\n    filter_chrome:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{8A69D345-D564-463c-AFF1-A69D9E530F96}'\n    filter_edge:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{9459C573-B17A-45AE-9F64-1857B5D58CEE}'\n    filter_IE:\n        TargetObject|contains: '\\Software\\Microsoft\\Active Setup\\Installed Components\\{89820200-ECBD-11cf-8B85-00AA005B4383}'\n    filter_image:\n        Image:\n            - 'C:\\Windows\\System32\\poqexec.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe'\n    filter_office:\n        Image|startswith:\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\'\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\Updates\\'\n        Image|endswith: '\\OfficeClickToRun.exe'\n    condition: main_selection and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring Windows registry settings for specific events and changes that signify potential unauthorized modifications aimed at enabling autostart mechanisms for malware or other unwanted programs. The analysis should be concentrated on registry set events, particularly the `SetValue` event type, which indicates an attempt to modify registry values.\n\nKey registry paths to monitor include various locations under the `SOFTWARE\\Wow6432Node\\Microsoft` and `SOFTWARE\\Microsoft` paths that are commonly targeted for persistence mechanisms, such as `AutoStart`, `Command Processor\\Autorun`, `Active Setup\\Installed Components`, and several others including `SYSTEM\\Setup\\CmdLine`, `Software\\Microsoft\\Ctf\\LangBarAddin`, and `Environment\\UserInitMprLogonScript`. \n\nFurthermore, entries relating to browser components (`Software\\Microsoft\\Internet Explorer\\UrlSearchHooks`, `SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components`, etc.), desktop components (`Control Panel\\Desktop\\Scrnsave.exe`), and protocol handlers (`SOFTWARE\\Classes\\Protocols\\Handler`, `Software\\Classes\\Protocols\\Filter`) are crucial to monitor due to their potential to be leveraged for persistence and execution through user interaction or system events.\n\nSpecial attention should be given to exclude modifications related to certain Microsoft Office, Chrome, Edge, and Internet Explorer components, as denoted by specific registry paths and details related to these applications, from triggering alerts to reduce false positives. This is achieved by filtering out changes occurring in specified registry locations related to Microsoft Office ClickToRun, Chrome, Edge, and Internet Explorer setup components, alongside some known benign executables (`poqexec.exe`, `integrator.exe` and `OfficeClickToRun.exe`).\n\nCrucially, ensuring that legitimate software installations and administrator-configured autorun keys are carefully distinguished from malicious modifications is imperative to maintain operational integrity and minimize instances of false alarms. \n\nThe successful detection strategy encompasses monitoring for modifications in the specified registry paths while excluding changes that are identified as legitimate through the listed exclusions. The key fields to be logged for further investigation are the SecurityID, ObjectName, OldValueType, and NewValueType, which provide essential information about the operation performed. This approach offers a balanced and focused method to detect and alert on potentially malicious ASEP modifications in the Windows registry with a medium level of confidence, aiming to protect against persistence and execution mechanisms commonly used by malware and unwanted software."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, you should focus on monitoring Windows process creation events for indications of this specific activity. Look for the execution of \"where.exe\" which is a command-line utility in Windows used to locate files within the system directories. In the context of this attack, \"where.exe\" might be misused to find specific browser data files. The files of interest include browser-specific SQLite databases and JSON files such as 'places.sqlite', 'cookies.sqlite', 'formhistory.sqlite', 'logins.json', 'key4.db', 'key3.db', and 'sessionstore.jsonlz4' for Firefox, as well as 'History', 'Bookmarks', 'Cookies', and 'Login Data' for Chrome. These files contain sensitive information like bookmarks, cookies, and login data which, if accessed, can provide adversaries with insights about personal user interests, banking information, social media, and internal network resources.\n\nWhen setting up detection mechanisms, include rules that trigger alarms for process creation events where the command line includes attempts to locate any of these critical files. This approach ensures you can identify potential reconnaissance efforts aimed at gathering browser bookmarks and related information.\n\nKeep in mind that while this detection strategy is vital for catching suspicious activities, it might also generate false positives, as the usage of \"where.exe\" is not exclusively malicious and could be part of regular system or administrative tasks. Therefore, it's recommended to verify such detection hits with further investigation. The monitoring strategy encompasses tags associated with MITRE ATT&CK tactics and techniques such as Credential Access, Discovery, and Collection, as interacting with these browser data files can relate to these categories of attack techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    where_exe:\n        - Image|endswith: '\\where.exe'\n        - OriginalFileName: 'where.exe'\n    where_opt:\n        CommandLine|contains:\n            # Firefox Data\n            - 'places.sqlite'\n            - 'cookies.sqlite'\n            - 'formhistory.sqlite'\n            - 'logins.json'\n            - 'key4.db'\n            - 'key3.db'\n            - 'sessionstore.jsonlz4'\n            # Chrome Data\n            - 'History'\n            - 'Bookmarks'\n            - 'Cookies'\n            - 'Login Data'\n    condition: all of where_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    where_exe:\n        - Image|endswith: '\\where.exe'\n        - OriginalFileName: 'where.exe'\n    where_opt:\n        CommandLine|contains:\n            # Firefox Data\n            - 'places.sqlite'\n            - 'cookies.sqlite'\n            - 'formhistory.sqlite'\n            - 'logins.json'\n            - 'key4.db'\n            - 'key3.db'\n            - 'sessionstore.jsonlz4'\n            # Chrome Data\n            - 'History'\n            - 'Bookmarks'\n            - 'Cookies'\n            - 'Login Data'\n    condition: all of where_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
      "answer": "In order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, you should focus on monitoring Windows process creation events for indications of this specific activity. Look for the execution of \"where.exe\" which is a command-line utility in Windows used to locate files within the system directories. In the context of this attack, \"where.exe\" might be misused to find specific browser data files. The files of interest include browser-specific SQLite databases and JSON files such as 'places.sqlite', 'cookies.sqlite', 'formhistory.sqlite', 'logins.json', 'key4.db', 'key3.db', and 'sessionstore.jsonlz4' for Firefox, as well as 'History', 'Bookmarks', 'Cookies', and 'Login Data' for Chrome. These files contain sensitive information like bookmarks, cookies, and login data which, if accessed, can provide adversaries with insights about personal user interests, banking information, social media, and internal network resources.\n\nWhen setting up detection mechanisms, include rules that trigger alarms for process creation events where the command line includes attempts to locate any of these critical files. This approach ensures you can identify potential reconnaissance efforts aimed at gathering browser bookmarks and related information.\n\nKeep in mind that while this detection strategy is vital for catching suspicious activities, it might also generate false positives, as the usage of \"where.exe\" is not exclusively malicious and could be part of regular system or administrative tasks. Therefore, it's recommended to verify such detection hits with further investigation. The monitoring strategy encompasses tags associated with MITRE ATT&CK tactics and techniques such as Credential Access, Discovery, and Collection, as interacting with these browser data files can relate to these categories of attack techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by Mandiant, you should: focus on monitoring file events within Windows environments. Specifically, lookout for occurrences where files named 'ds7002.lnk', 'ds7002.pdf', or 'ds7002.zip' are involved. These particular file names have been identified as indicators of this phishing campaign, suggesting a malicious attempt to compromise the system. Since the probability of these specific file names appearing under legitimate circumstances is unlikely, any detection of these should be considered critical and warrants immediate investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains:\n            - 'ds7002.lnk'\n            - 'ds7002.pdf'\n            - 'ds7002.zip'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains:\n            - 'ds7002.lnk'\n            - 'ds7002.pdf'\n            - 'ds7002.zip'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant",
      "answer": "In order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by Mandiant, you should: focus on monitoring file events within Windows environments. Specifically, lookout for occurrences where files named 'ds7002.lnk', 'ds7002.pdf', or 'ds7002.zip' are involved. These particular file names have been identified as indicators of this phishing campaign, suggesting a malicious attempt to compromise the system. Since the probability of these specific file names appearing under legitimate circumstances is unlikely, any detection of these should be considered critical and warrants immediate investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files').\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files'), you should monitor process creation logs on Windows devices for the execution of 'client32.exe', specifically related to the NetSupport Remote Control product. This involves looking for process executions where the image name ends with '\\client32.exe', the product name contains 'NetSupport Remote Control', or the original file name contains 'client32.exe'. Additionally, the detection focuses on identifying a specific import hash (imphash) 'a9d50692e95b79723f3e76fcf70d023e', which is unique to a particular version of this malicious software, or checking for any hashes that contain this specific imphash value.\n\nIt is crucial to filter out legitimate instances of 'client32.exe' running from expected locations, such as 'C:\\Program Files' or 'C:\\Program Files (x86)', to reduce false positives. The goal is to catch only those instances where the executable is running from an unusual location that might indicate a compromise or unauthorized installation of the NetSupport Remote Access Tool (RAT), which could be used by attackers for control or exfiltration of data.\n\nThis detection strategy aligns with identifying tactics and techniques that involve executing code (Execution tactic) and the use of software packaging commonly associated with remote access tools (Application Layer Protocol technique). It is rated at a medium level of concern due to the potential for false positives, where unknown or unexpected but legitimate uses of 'client32.exe' outside of the standard directories may occur.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\client32.exe'\n        - Product|contains: 'NetSupport Remote Control'\n        - OriginalFileName|contains: 'client32.exe'\n        - Imphash: a9d50692e95b79723f3e76fcf70d023e\n        - Hashes|contains: IMPHASH=a9d50692e95b79723f3e76fcf70d023e\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\client32.exe'\n        - Product|contains: 'NetSupport Remote Control'\n        - OriginalFileName|contains: 'client32.exe'\n        - Imphash: a9d50692e95b79723f3e76fcf70d023e\n        - Hashes|contains: IMPHASH=a9d50692e95b79723f3e76fcf70d023e\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files')",
      "answer": "In order to detect execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files'), you should monitor process creation logs on Windows devices for the execution of 'client32.exe', specifically related to the NetSupport Remote Control product. This involves looking for process executions where the image name ends with '\\client32.exe', the product name contains 'NetSupport Remote Control', or the original file name contains 'client32.exe'. Additionally, the detection focuses on identifying a specific import hash (imphash) 'a9d50692e95b79723f3e76fcf70d023e', which is unique to a particular version of this malicious software, or checking for any hashes that contain this specific imphash value.\n\nIt is crucial to filter out legitimate instances of 'client32.exe' running from expected locations, such as 'C:\\Program Files' or 'C:\\Program Files (x86)', to reduce false positives. The goal is to catch only those instances where the executable is running from an unusual location that might indicate a compromise or unauthorized installation of the NetSupport Remote Access Tool (RAT), which could be used by attackers for control or exfiltration of data.\n\nThis detection strategy aligns with identifying tactics and techniques that involve executing code (Execution tactic) and the use of software packaging commonly associated with remote access tools (Application Layer Protocol technique). It is rated at a medium level of concern due to the potential for false positives, where unknown or unexpected but legitimate uses of 'client32.exe' outside of the standard directories may occur."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of Msiexec.exe to install packages hosted remotely quietly.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of Msiexec.exe to install packages hosted remotely quietly, you should monitor for the execution of Msiexec.exe in Windows process creation logs. Specifically, look out for instances where the executable's name ends with '\\msiexec.exe' or where the original file name is exactly 'msiexec.exe'. Further examination should focus on the command line arguments used with Msiexec.exe, paying attention to instances where installation ('/i' or '-i'), package operations ('/package' or '-package'), admin installation ('/a' or '-a'), advertisement ('/j' or '-j'), or quiet mode ('/q' or '-q') parameters are present. Additionally, it's crucial to scan for command lines that include remote source indicators such as 'http' or double backslashes ('\\\\\\\\') which typically signify a network path. The detection of these specific elements in combination is indicative of potentially malicious activity aimed at evading defense mechanisms by quietly installing software packages from remote locations, which aligns with MITRE ATT&CK tactics and techniques related to Defense Evasion and specifically identified as Technique T1218.007.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: 'msiexec.exe'\n    selection_cli:\n        # Note that there is no space before and after the arguments because it's possible to write a commandline as such\n        # Example: msiexec -q/i [MSI Package]\n        CommandLine|contains:\n            - '/i'\n            - '-i'\n            - '/package'\n            - '-package'\n            - '/a'\n            - '-a'\n            - '/j'\n            - '-j'\n    selection_quiet:\n        CommandLine|contains:\n            - '/q'\n            - '-q'\n    selection_remote:\n        CommandLine|contains:\n            - 'http'\n            - '\\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\ntags:\n    - attack.defense_evasion\n    - attack.t1218.007\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: 'msiexec.exe'\n    selection_cli:\n        # Note that there is no space before and after the arguments because it's possible to write a commandline as such\n        # Example: msiexec -q/i [MSI Package]\n        CommandLine|contains:\n            - '/i'\n            - '-i'\n            - '/package'\n            - '-package'\n            - '/a'\n            - '-a'\n            - '/j'\n            - '-j'\n    selection_quiet:\n        CommandLine|contains:\n            - '/q'\n            - '-q'\n    selection_remote:\n        CommandLine|contains:\n            - 'http'\n            - '\\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\ntags:\n    - attack.defense_evasion\n    - attack.t1218.007\n",
      "question": "usage of Msiexec.exe to install packages hosted remotely quietly",
      "answer": "In order to detect usage of Msiexec.exe to install packages hosted remotely quietly, you should monitor for the execution of Msiexec.exe in Windows process creation logs. Specifically, look out for instances where the executable's name ends with '\\msiexec.exe' or where the original file name is exactly 'msiexec.exe'. Further examination should focus on the command line arguments used with Msiexec.exe, paying attention to instances where installation ('/i' or '-i'), package operations ('/package' or '-package'), admin installation ('/a' or '-a'), advertisement ('/j' or '-j'), or quiet mode ('/q' or '-q') parameters are present. Additionally, it's crucial to scan for command lines that include remote source indicators such as 'http' or double backslashes ('\\\\\\\\') which typically signify a network path. The detection of these specific elements in combination is indicative of potentially malicious activity aimed at evading defense mechanisms by quietly installing software packages from remote locations, which aligns with MITRE ATT&CK tactics and techniques related to Defense Evasion and specifically identified as Technique T1218.007."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting wmiexec/dcomexec/atexec/smbexec from Impacket framework.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect wmiexec/dcomexec/atexec/smbexec from Impacket framework, you should: monitor the creation of processes on Windows systems, paying special attention to specific parent-child process relationships and command line patterns that are indicative of these attack techniques. Look for instances where the parent process is 'wmiprvse.exe' signaling a potential use of wmiexec, 'mmc.exe' for possible dcomexec using MMC object, 'explorer.exe' for dcomexec with ShellBrowserWindow object, and 'services.exe' for smbexec scenario. These executables executing commands that include 'cmd.exe' combined with the parameters '/Q' and '/c', and specifically making network connections to the localhost address '\\\\\\\\127.0.0.1\\\\' followed by redirection '&1', are strong indicators of the described attack techniques being employed. \n\nAdditionally, watch for command line executions stemming from 'svchost.exe -k netsvcs' and 'taskeng.exe' as these may indicate the use of atexec on different versions of Windows (Windows 10 and Windows 7 respectively). These commands will also involve 'cmd.exe', use '/C' for command execution, attempt to write to 'Windows\\Temp\\' directory, and include '&1' in their command structure.\n\nMonitoring and analyzing these specific parent-child process relationships and command line arguments across the system with vigilance can strongly aid in the identification of suspicious activities that align with wmiexec, dcomexec, atexec, and smbexec attacks as part of the Impacket framework usage. This proactive surveillance is crucial, given the high threat level of such activities, albeit with a mindfulness towards the potential for false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other:\n        # *** wmiexec.py\n        #    parent is wmiprvse.exe\n        #    examples:\n        #       cmd.exe /Q /c whoami 1> \\\\127.0.0.1\\ADMIN$\\__1567439113.54 2>&1\n        #       cmd.exe /Q /c cd  1> \\\\127.0.0.1\\ADMIN$\\__1567439113.54 2>&1\n        # *** dcomexec.py -object MMC20\n        #   parent is mmc.exe\n        #   example:\n        #       \"C:\\Windows\\System32\\cmd.exe\" /Q /c cd  1> \\\\127.0.0.1\\ADMIN$\\__1567442499.05 2>&1\n        # *** dcomexec.py -object ShellBrowserWindow\n        #  runs %SystemRoot%\\System32\\rundll32.exe shell32.dll,SHCreateLocalServerRunDll {c08afd90-f2a1-11d1-8455-00a0c91f3880} but parent command is explorer.exe\n        #  example:\n        #   \"C:\\Windows\\System32\\cmd.exe\" /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$\\__1567520103.71 2>&1\n        # *** smbexec.py\n        #   parent is services.exe\n        #   example:\n        #       C:\\Windows\\system32\\cmd.exe /Q /c echo tasklist ^> \\\\127.0.0.1\\C$\\__output 2^>^&1 > C:\\Windows\\TEMP\\execute.bat & C:\\Windows\\system32\\cmd.exe /Q /c C:\\Windows\\TEMP\\execute.bat & del C:\\Windows\\TEMP\\execute.bat\n        ParentImage|endswith:\n            - '\\wmiprvse.exe'        # wmiexec\n            - '\\mmc.exe'        # dcomexec MMC\n            - '\\explorer.exe'        # dcomexec ShellBrowserWindow\n            - '\\services.exe'        # smbexec\n        CommandLine|contains|all:\n            - 'cmd.exe'\n            - '/Q'\n            - '/c'\n            - '\\\\\\\\127.0.0.1\\\\'\n            - '&1'\n    selection_atexec:\n        ParentCommandLine|contains:\n            - 'svchost.exe -k netsvcs'       # atexec on win10 (parent is \"C:\\Windows\\system32\\svchost.exe -k netsvcs\")\n            - 'taskeng.exe'       # atexec on win7 (parent is \"taskeng.exe {AFA79333-694C-4BEE-910E-E57D9A3518F6} S-1-5-18:NT AUTHORITY\\System:Service:\")\n            # cmd.exe /C tasklist /m > C:\\Windows\\Temp\\bAJrYQtL.tmp 2>&1\n        CommandLine|contains|all:\n            - 'cmd.exe'\n            - '/C'\n            - 'Windows\\Temp\\'\n            - '&1'\n    condition: 1 of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other:\n        # *** wmiexec.py\n        #    parent is wmiprvse.exe\n        #    examples:\n        #       cmd.exe /Q /c whoami 1> \\\\127.0.0.1\\ADMIN$\\__1567439113.54 2>&1\n        #       cmd.exe /Q /c cd  1> \\\\127.0.0.1\\ADMIN$\\__1567439113.54 2>&1\n        # *** dcomexec.py -object MMC20\n        #   parent is mmc.exe\n        #   example:\n        #       \"C:\\Windows\\System32\\cmd.exe\" /Q /c cd  1> \\\\127.0.0.1\\ADMIN$\\__1567442499.05 2>&1\n        # *** dcomexec.py -object ShellBrowserWindow\n        #  runs %SystemRoot%\\System32\\rundll32.exe shell32.dll,SHCreateLocalServerRunDll {c08afd90-f2a1-11d1-8455-00a0c91f3880} but parent command is explorer.exe\n        #  example:\n        #   \"C:\\Windows\\System32\\cmd.exe\" /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$\\__1567520103.71 2>&1\n        # *** smbexec.py\n        #   parent is services.exe\n        #   example:\n        #       C:\\Windows\\system32\\cmd.exe /Q /c echo tasklist ^> \\\\127.0.0.1\\C$\\__output 2^>^&1 > C:\\Windows\\TEMP\\execute.bat & C:\\Windows\\system32\\cmd.exe /Q /c C:\\Windows\\TEMP\\execute.bat & del C:\\Windows\\TEMP\\execute.bat\n        ParentImage|endswith:\n            - '\\wmiprvse.exe'        # wmiexec\n            - '\\mmc.exe'        # dcomexec MMC\n            - '\\explorer.exe'        # dcomexec ShellBrowserWindow\n            - '\\services.exe'        # smbexec\n        CommandLine|contains|all:\n            - 'cmd.exe'\n            - '/Q'\n            - '/c'\n            - '\\\\\\\\127.0.0.1\\\\'\n            - '&1'\n    selection_atexec:\n        ParentCommandLine|contains:\n            - 'svchost.exe -k netsvcs'       # atexec on win10 (parent is \"C:\\Windows\\system32\\svchost.exe -k netsvcs\")\n            - 'taskeng.exe'       # atexec on win7 (parent is \"taskeng.exe {AFA79333-694C-4BEE-910E-E57D9A3518F6} S-1-5-18:NT AUTHORITY\\System:Service:\")\n            # cmd.exe /C tasklist /m > C:\\Windows\\Temp\\bAJrYQtL.tmp 2>&1\n        CommandLine|contains|all:\n            - 'cmd.exe'\n            - '/C'\n            - 'Windows\\Temp\\'\n            - '&1'\n    condition: 1 of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "wmiexec/dcomexec/atexec/smbexec from Impacket framework",
      "answer": "In order to detect wmiexec/dcomexec/atexec/smbexec from Impacket framework, you should: monitor the creation of processes on Windows systems, paying special attention to specific parent-child process relationships and command line patterns that are indicative of these attack techniques. Look for instances where the parent process is 'wmiprvse.exe' signaling a potential use of wmiexec, 'mmc.exe' for possible dcomexec using MMC object, 'explorer.exe' for dcomexec with ShellBrowserWindow object, and 'services.exe' for smbexec scenario. These executables executing commands that include 'cmd.exe' combined with the parameters '/Q' and '/c', and specifically making network connections to the localhost address '\\\\\\\\127.0.0.1\\\\' followed by redirection '&1', are strong indicators of the described attack techniques being employed. \n\nAdditionally, watch for command line executions stemming from 'svchost.exe -k netsvcs' and 'taskeng.exe' as these may indicate the use of atexec on different versions of Windows (Windows 10 and Windows 7 respectively). These commands will also involve 'cmd.exe', use '/C' for command execution, attempt to write to 'Windows\\Temp\\' directory, and include '&1' in their command structure.\n\nMonitoring and analyzing these specific parent-child process relationships and command line arguments across the system with vigilance can strongly aid in the identification of suspicious activities that align with wmiexec, dcomexec, atexec, and smbexec attacks as part of the Impacket framework usage. This proactive surveillance is crucial, given the high threat level of such activities, albeit with a mindfulness towards the potential for false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting conditional access changes where non approved actor removed CA Policy..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to monitor and alert on conditional access changes where a non-approved actor removed a Conditional Access (CA) Policy, you should focus on monitoring Azure audit logs. Specifically, look for log entries where the message includes \"Delete conditional access policy.\" This indicates that a CA policy has been deleted, which could be a sign of unauthorized or malicious activity if done by an unapproved actor. It is important to consider potential false positives such as misconfigured role permissions or legitimate changes that may appear suspicious. Verify the context of the deletion by examining the user identity, user agent, and hostname involved in the change to ensure they are authorized to make such modifications in your environment. This detection carries a medium level of urgency, highlighting the need for prompt review and action if such activities are detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Delete conditional access policy\n    condition: selection\nfalsepositives:\n    - Misconfigured role permissions\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Delete conditional access policy\n    condition: selection\nfalsepositives:\n    - Misconfigured role permissions\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\nlevel: medium\n",
      "question": "conditional access changes where non approved actor removed CA Policy.",
      "answer": "In order to monitor and alert on conditional access changes where a non-approved actor removed a Conditional Access (CA) Policy, you should focus on monitoring Azure audit logs. Specifically, look for log entries where the message includes \"Delete conditional access policy.\" This indicates that a CA policy has been deleted, which could be a sign of unauthorized or malicious activity if done by an unapproved actor. It is important to consider potential false positives such as misconfigured role permissions or legitimate changes that may appear suspicious. Verify the context of the deletion by examining the user identity, user agent, and hostname involved in the change to ensure they are authorized to make such modifications in your environment. This detection carries a medium level of urgency, highlighting the need for prompt review and action if such activities are detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292.\nYou will likely have to tune this rule for your organization, but it is certainly something you should look for and could have applications for malicious activity beyond CVE-2021-42292.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292, you should: \n\nMonitor network connections made by the Excel application on Windows systems, focusing on connections that are initiated by it. Pay particular attention to connections where the destination IP address is not within the IPv6 format and avoids the commonly used private IP address ranges such as '10.x.x.x', '192.168.x.x', and '172.16.x.x' to '172.31.x.x', including the loopback address '127.0.0.1'. These conditions help in identifying potentially malicious activity where Excel might be used as a vector for attack, specifically targeting vulnerabilities like CVE-2021-42292. \n\nIt's important to tune out legitimate connections often seen in business environments, including those to domains related to Microsoft or other operational needs, and connections to templates or resources that might be hosted on internal or trusted external sites. Given the high likelihood of encountering benign triggers due to regular use of Excel in organizational settings, it's advised to regularly review and refine the detection criteria based on observed traffic patterns and business use cases to minimize false positives. This tailored approach will help in maintaining an effective detection strategy for monitoring and mitigating potential security threats leveraging Excel as an attack vector.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\excel.exe'\n        Initiated: 'true'\n        DestinationIsIpv6: 'false'\n    filter:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.0.0.1'\n    condition: selection and not filter\nfalsepositives:\n    - You may have to tune certain domains out that Excel may call out to, such as microsoft or other business use case domains.\n    - Office documents commonly have templates that refer to external addresses, like sharepoint.ourcompany.com may have to be tuned.\n    - It is highly recommended to baseline your activity and tune out common business use cases.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\excel.exe'\n        Initiated: 'true'\n        DestinationIsIpv6: 'false'\n    filter:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.0.0.1'\n    condition: selection and not filter\nfalsepositives:\n    - You may have to tune certain domains out that Excel may call out to, such as microsoft or other business use case domains.\n    - Office documents commonly have templates that refer to external addresses, like sharepoint.ourcompany.com may have to be tuned.\n    - It is highly recommended to baseline your activity and tune out common business use cases.\nlevel: medium\n",
      "question": "an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292.\nYou will likely have to tune this rule for your organization, but it is certainly something you should look for and could have applications for malicious activity beyond CVE-2021-42292.\n",
      "answer": "In order to detect an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292, you should: \n\nMonitor network connections made by the Excel application on Windows systems, focusing on connections that are initiated by it. Pay particular attention to connections where the destination IP address is not within the IPv6 format and avoids the commonly used private IP address ranges such as '10.x.x.x', '192.168.x.x', and '172.16.x.x' to '172.31.x.x', including the loopback address '127.0.0.1'. These conditions help in identifying potentially malicious activity where Excel might be used as a vector for attack, specifically targeting vulnerabilities like CVE-2021-42292. \n\nIt's important to tune out legitimate connections often seen in business environments, including those to domains related to Microsoft or other operational needs, and connections to templates or resources that might be hosted on internal or trusted external sites. Given the high likelihood of encountering benign triggers due to regular use of Excel in organizational settings, it's advised to regularly review and refine the detection criteria based on observed traffic patterns and business use cases to minimize false positives. This tailored approach will help in maintaining an effective detection strategy for monitoring and mitigating potential security threats leveraging Excel as an attack vector."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deletion of AMSI provider registry key entries in HKLM\\Software\\Microsoft\\AMSI. This technique could be used by an attacker in order to disable AMSI inspection..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the deletion of AMSI provider registry key entries in HKLM\\Software\\Microsoft\\AMSI, a technique that could be used by an attacker to disable AMSI inspection, you should monitor Windows registry deletion events. Specifically, look for events where the registry deletion event type is \"DeleteKey\" and the target object being deleted ends with either '{2781761E-28E0-4109-99FE-B9D127C57AFE}', which corresponds to IOfficeAntiVirus, or '{A7C452EF-8E9F-42EB-9F2B-245613CA0DC9}', associated with ProtectionManagement.dll. These particular registry keys are critical components of the AMSI provider, and their removal might indicate an attempt to bypass AMSI's inspection functionalities. Monitoring for the deletion of these keys provides a proactive measure to identify and mitigate such disablement attempts. The likelihood of these specific deletion events being benign is very low, hence any detection should be considered high priority for investigation. This technique aligns with the broader context of defense evasion strategies by tampering with security inspection mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_delete\ndetection:\n    selection:\n        EventType: DeleteKey\n        TargetObject|endswith:\n            - '{2781761E-28E0-4109-99FE-B9D127C57AFE}' # IOfficeAntiVirus\n            - '{A7C452EF-8E9F-42EB-9F2B-245613CA0DC9}' # ProtectionManagement.dll\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_delete\ndetection:\n    selection:\n        EventType: DeleteKey\n        TargetObject|endswith:\n            - '{2781761E-28E0-4109-99FE-B9D127C57AFE}' # IOfficeAntiVirus\n            - '{A7C452EF-8E9F-42EB-9F2B-245613CA0DC9}' # ProtectionManagement.dll\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "deletion of AMSI provider registry key entries in HKLM\\Software\\Microsoft\\AMSI. This technique could be used by an attacker in order to disable AMSI inspection.",
      "answer": "In order to detect the deletion of AMSI provider registry key entries in HKLM\\Software\\Microsoft\\AMSI, a technique that could be used by an attacker to disable AMSI inspection, you should monitor Windows registry deletion events. Specifically, look for events where the registry deletion event type is \"DeleteKey\" and the target object being deleted ends with either '{2781761E-28E0-4109-99FE-B9D127C57AFE}', which corresponds to IOfficeAntiVirus, or '{A7C452EF-8E9F-42EB-9F2B-245613CA0DC9}', associated with ProtectionManagement.dll. These particular registry keys are critical components of the AMSI provider, and their removal might indicate an attempt to bypass AMSI's inspection functionalities. Monitoring for the deletion of these keys provides a proactive measure to identify and mitigate such disablement attempts. The likelihood of these specific deletion events being benign is very low, hence any detection should be considered high priority for investigation. This technique aligns with the broader context of defense evasion strategies by tampering with security inspection mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting using register-cimprovider.exe to execute arbitrary dll file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect using register-cimprovider.exe to execute arbitrary dll file, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for the execution of 'register-cimprovider.exe' where the command line arguments include both '-path' and 'dll', indicating an attempt to execute an arbitrary DLL file. These detections are essential for identifying potentially malicious activities related to the execution of unauthorized code. It's important to log the command line parameters involved in such executions to aid in investigation. However, be aware that there might be legitimate uses that could trigger false positives, although they are unknown; therefore, a medium level of attention should be paid to such events.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\register-cimprovider.exe'\n        CommandLine|contains|all:\n            - '-path'\n            - 'dll'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\register-cimprovider.exe'\n        CommandLine|contains|all:\n            - '-path'\n            - 'dll'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "using register-cimprovider.exe to execute arbitrary dll file.",
      "answer": "In order to detect using register-cimprovider.exe to execute arbitrary dll file, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for the execution of 'register-cimprovider.exe' where the command line arguments include both '-path' and 'dll', indicating an attempt to execute an arbitrary DLL file. These detections are essential for identifying potentially malicious activities related to the execution of unauthorized code. It's important to log the command line parameters involved in such executions to aid in investigation. However, be aware that there might be legitimate uses that could trigger false positives, although they are unknown; therefore, a medium level of attention should be paid to such events."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string, you should: monitor your proxy logs for traffic that includes user-agent strings beginning with 'rclone/v'. The detection aims to identify potential unauthorized or malicious use of the rclone tool, which could be involved in data exfiltration activities or unauthorized file access on cloud storage platforms. It's important to log the client IP address ('c-ip') associated with each relevant request to aid in further investigation or remediation efforts. While this detection method is valuable, be aware of possible false positives that may arise from legitimate use of rclone by system administrators or through sanctioned scripts. This activity is characterized by a medium level of concern due to the potential for misuse of the rclone tool in carrying out data theft or manipulation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith: 'rclone/v'\n    condition: selection\nfields:\n    - c-ip\nfalsepositives:\n    - Valid requests with this exact user agent to that is used by legitimate scripts or sysadmin operations\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith: 'rclone/v'\n    condition: selection\nfields:\n    - c-ip\nfalsepositives:\n    - Valid requests with this exact user agent to that is used by legitimate scripts or sysadmin operations\nlevel: medium\n",
      "question": "use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string",
      "answer": "In order to detect the use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string, you should: monitor your proxy logs for traffic that includes user-agent strings beginning with 'rclone/v'. The detection aims to identify potential unauthorized or malicious use of the rclone tool, which could be involved in data exfiltration activities or unauthorized file access on cloud storage platforms. It's important to log the client IP address ('c-ip') associated with each relevant request to aid in further investigation or remediation efforts. While this detection method is valuable, be aware of possible false positives that may arise from legitimate use of rclone by system administrators or through sanctioned scripts. This activity is characterized by a medium level of concern due to the potential for misuse of the rclone tool in carrying out data theft or manipulation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting dropping of dll files in system32 that may be used to retrieve user credentials from LSASS.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the dropping of dll files in system32 that may be used to retrieve user credentials from LSASS, you should: Focus on monitoring process creation events in Windows environments. Particularly, you need to keep an eye out for command line activities that exhibit specific patterns indicative of such malicious intent. The patterns to watch include the presence of 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa', 'scecli\\0*', and 'reg add' all together in the command line. This indicates an attempt to manipulate registry keys associated with the Local Security Authority Subsystem Service (LSASS), potentially for deploying or modifying Dynamic Link Libraries (DLLs) in a manner that primes them for credential theft. It's crucial to note, however, that as of the guidance provided, there are unknown scenarios that might lead to false positives. Thus, any detection at a medium level of confidence should prompt further investigation rather than immediate remediation action.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmdline:\n        CommandLine|contains|all:\n            - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa'\n            - 'scecli\\0*'\n            - 'reg add'\n    condition: selection_cmdline\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmdline:\n        CommandLine|contains|all:\n            - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa'\n            - 'scecli\\0*'\n            - 'reg add'\n    condition: selection_cmdline\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "dropping of dll files in system32 that may be used to retrieve user credentials from LSASS",
      "answer": "In order to detect the dropping of dll files in system32 that may be used to retrieve user credentials from LSASS, you should: Focus on monitoring process creation events in Windows environments. Particularly, you need to keep an eye out for command line activities that exhibit specific patterns indicative of such malicious intent. The patterns to watch include the presence of 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa', 'scecli\\0*', and 'reg add' all together in the command line. This indicates an attempt to manipulate registry keys associated with the Local Security Authority Subsystem Service (LSASS), potentially for deploying or modifying Dynamic Link Libraries (DLLs) in a manner that primes them for credential theft. It's crucial to note, however, that as of the guidance provided, there are unknown scenarios that might lead to false positives. Thus, any detection at a medium level of confidence should prompt further investigation rather than immediate remediation action."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known suspicious (default) user-agents related to scanning/recon tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known suspicious (default) user-agents related to scanning/recon tools, you should: Monitor your webserver logs for any occurrences of specific user-agent strings that are commonly associated with scanning or reconnaissance tools. These include user-agent strings containing 'Wfuzz/', 'WPScan v', 'Recon-ng/v', or 'GIS - AppSec Team - Project Vision'. The detection of these strings may indicate an attempt to scan your webserver for vulnerabilities or gather information in preparation for an attack. It's important to note that while the identification of these user-agents can signal potentially malicious activity, there may also be unknown instances where these detections do not signify an actual threat. The severity level for these detections is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-user-agent|contains:\n            # Add more tools as you see fit\n            - 'Wfuzz/'\n            - 'WPScan v'\n            - 'Recon-ng/v'\n            - 'GIS - AppSec Team - Project Vision'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-user-agent|contains:\n            # Add more tools as you see fit\n            - 'Wfuzz/'\n            - 'WPScan v'\n            - 'Recon-ng/v'\n            - 'GIS - AppSec Team - Project Vision'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "known suspicious (default) user-agents related to scanning/recon tools",
      "answer": "In order to detect known suspicious (default) user-agents related to scanning/recon tools, you should: Monitor your webserver logs for any occurrences of specific user-agent strings that are commonly associated with scanning or reconnaissance tools. These include user-agent strings containing 'Wfuzz/', 'WPScan v', 'Recon-ng/v', or 'GIS - AppSec Team - Project Vision'. The detection of these strings may indicate an attempt to scan your webserver for vulnerabilities or gather information in preparation for an attack. It's important to note that while the identification of these user-agents can signal potentially malicious activity, there may also be unknown instances where these detections do not signify an actual threat. The severity level for these detections is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when PIM alerts are set to disabled..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when PIM (Privileged Identity Management) alerts are set to disabled, you should: Focus on monitoring the audit logs within Azure services. Specifically, look for instances where the message indicates a \"Disable PIM Alert\" action has occurred. This detection is crucial because it might signal an attacker's attempt to weaken security by turning off alerts for privileged account changes, which should otherwise be closely monitored. However, it's important to remember that there might be legitimate reasons for an administrator to disable these alerts, such as during a controlled maintenance period. Due to the potential severity of an attacker successfully disabling PIM alerts to conceal their activities, such events are classified with a high level of concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Disable PIM Alert\n    condition: selection\nfalsepositives:\n    - Administrator disabling PIM alerts as an active choice.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Disable PIM Alert\n    condition: selection\nfalsepositives:\n    - Administrator disabling PIM alerts as an active choice.\nlevel: high\n",
      "question": "when PIM alerts are set to disabled.",
      "answer": "In order to detect when PIM (Privileged Identity Management) alerts are set to disabled, you should: Focus on monitoring the audit logs within Azure services. Specifically, look for instances where the message indicates a \"Disable PIM Alert\" action has occurred. This detection is crucial because it might signal an attacker's attempt to weaken security by turning off alerts for privileged account changes, which should otherwise be closely monitored. However, it's important to remember that there might be legitimate reasons for an administrator to disable these alerts, such as during a controlled maintenance period. Due to the potential severity of an attacker successfully disabling PIM alerts to conceal their activities, such events are classified with a high level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting A General detection for the Get-Clipboard commands in PowerShell logs. This could be an adversary capturing clipboard contents..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an adversary capturing clipboard contents using Get-Clipboard commands in PowerShell logs, you should: Monitor Windows PowerShell modules for instances where the command 'Get-Clipboard' is executed. This activity is of medium severity and attempts to identify scenarios wherein attackers may be trying to access data copied to the clipboard, which could include sensitive information. It is essential to note that while specific false positives are not identified, occurrences that do not follow the typical pattern of an attack may arise, and each case should be evaluated on its own merits. This detection strategy falls under the practices designed to observe and mitigate tactics associated with credential access or information gathering techniques by malicious entities.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        Payload|contains: 'Get-Clipboard'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        Payload|contains: 'Get-Clipboard'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "A General detection for the Get-Clipboard commands in PowerShell logs. This could be an adversary capturing clipboard contents.",
      "answer": "In order to detect an adversary capturing clipboard contents using Get-Clipboard commands in PowerShell logs, you should: Monitor Windows PowerShell modules for instances where the command 'Get-Clipboard' is executed. This activity is of medium severity and attempts to identify scenarios wherein attackers may be trying to access data copied to the clipboard, which could include sensitive information. It is essential to note that while specific false positives are not identified, occurrences that do not follow the typical pattern of an attack may arise, and each case should be evaluated on its own merits. This detection strategy falls under the practices designed to observe and mitigate tactics associated with credential access or information gathering techniques by malicious entities.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\", you should: look for the process creation logs on Windows systems for command lines that contain specific base64 encoded patterns. These patterns represent different obfuscated combinations of the word \"LOAD\", a technique often used to evade detection mechanisms. The focus is on analyzing command lines to uncover the usage of \".NET reflection.assembly\" load method in an attempt to execute possibly malicious code. The detection of these encoded patterns in process creation activities can be critical in identifying attacks leveraging reflection techniques for evasion. The tags relevant to this detection strategy include Execution, Defense Evasion, and Command and Scripting Interpreter. Given the high level of potential threat and the sophistication of the obfuscation technique, such detections are considered to have a high level of importance, with unlikely chances of false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # ::(\"L\"+\"oad\")\n            - 'OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ'\n            - 'oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA'\n            - '6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA'\n            # ::(\"Lo\"+\"ad\")\n            - 'OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ'\n            - 'oAOgAoACIATABvACIAKwAiAGEAZAAiACkA'\n            - '6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA'\n            # ::(\"Loa\"+\"d\")\n            - 'OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ'\n            - 'oAOgAoACIATABvAGEAIgArACIAZAAiACkA'\n            - '6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA'\n            # ::('L'+'oad')\n            - 'OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ'\n            - 'oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA'\n            - '6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA'\n            # ::('Lo'+'ad')\n            - 'OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ'\n            - 'oAOgAoACcATABvACcAKwAnAGEAZAAnACkA'\n            - '6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA'\n            # ::('Loa'+'d')\n            - 'OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ'\n            - 'oAOgAoACcATABvAGEAJwArACcAZAAnACkA'\n            - '6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # ::(\"L\"+\"oad\")\n            - 'OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ'\n            - 'oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA'\n            - '6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA'\n            # ::(\"Lo\"+\"ad\")\n            - 'OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ'\n            - 'oAOgAoACIATABvACIAKwAiAGEAZAAiACkA'\n            - '6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA'\n            # ::(\"Loa\"+\"d\")\n            - 'OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ'\n            - 'oAOgAoACIATABvAGEAIgArACIAZAAiACkA'\n            - '6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA'\n            # ::('L'+'oad')\n            - 'OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ'\n            - 'oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA'\n            - '6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA'\n            # ::('Lo'+'ad')\n            - 'OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ'\n            - 'oAOgAoACcATABvACcAKwAnAGEAZAAnACkA'\n            - '6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA'\n            # ::('Loa'+'d')\n            - 'OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ'\n            - 'oAOgAoACcATABvAGEAJwArACcAZAAnACkA'\n            - '6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\"",
      "answer": "In order to detect suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\", you should: look for the process creation logs on Windows systems for command lines that contain specific base64 encoded patterns. These patterns represent different obfuscated combinations of the word \"LOAD\", a technique often used to evade detection mechanisms. The focus is on analyzing command lines to uncover the usage of \".NET reflection.assembly\" load method in an attempt to execute possibly malicious code. The detection of these encoded patterns in process creation activities can be critical in identifying attacks leveraging reflection techniques for evasion. The tags relevant to this detection strategy include Execution, Defense Evasion, and Command and Scripting Interpreter. Given the high level of potential threat and the sophistication of the obfuscation technique, such detections are considered to have a high level of importance, with unlikely chances of false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, which can reveal personal information about users or details about internal network resources, you should monitor Windows PowerShell script activities, specifically looking for the use of the `Get-ChildItem` cmdlet with a combination of parameters. These parameters include `-Recurse`, which allows the script to search through directories recursively; `-Path`, which specifies the directory path to search; `-Filter Bookmarks`, indicating the search specifically targets bookmark files; `-ErrorAction SilentlyContinue`, which suppresses error messages; and `-Force`, enabling the script to perform actions that it would otherwise not be allowed to, such as accessing hidden or system files. This monitoring requires that Script Block Logging be enabled on the Windows system, to ensure that detailed records of PowerShell script executions are kept. The detection of this particular pattern of script execution is associated with a low level of alert due to the potential for false positives, as there may be legitimate reasons for scripts to access bookmarks in this manner.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-ChildItem'\n            - ' -Recurse '\n            - ' -Path '\n            - ' -Filter Bookmarks'\n            - ' -ErrorAction SilentlyContinue'\n            - ' -Force'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-ChildItem'\n            - ' -Recurse '\n            - ' -Path '\n            - ' -Filter Bookmarks'\n            - ' -ErrorAction SilentlyContinue'\n            - ' -Force'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
      "answer": "In order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, which can reveal personal information about users or details about internal network resources, you should monitor Windows PowerShell script activities, specifically looking for the use of the `Get-ChildItem` cmdlet with a combination of parameters. These parameters include `-Recurse`, which allows the script to search through directories recursively; `-Path`, which specifies the directory path to search; `-Filter Bookmarks`, indicating the search specifically targets bookmark files; `-ErrorAction SilentlyContinue`, which suppresses error messages; and `-Force`, enabling the script to perform actions that it would otherwise not be allowed to, such as accessing hidden or system files. This monitoring requires that Script Block Logging be enabled on the Windows system, to ensure that detailed records of PowerShell script executions are kept. The detection of this particular pattern of script execution is associated with a low level of alert due to the potential for false positives, as there may be legitimate reasons for scripts to access bookmarks in this manner."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting command line parameters or strings often used by crypto miners.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect command line parameters or strings often used by crypto miners, you should focus on monitoring process creation events on Windows systems. Specifically, look for command line inputs that contain key indicators of cryptocurrency mining, such as setting the CPU priority, opting out of donation levels, specifying mining pool addresses, choosing mining algorithms, and connecting over specific protocols like TCP and UDP. Notable strings to watch for include ' --cpu-priority=', '--donate-level=0', ' -o pool.', ' --nicehash', ' --algo=rx/0 ', 'stratum+tcp://', and 'stratum+udp://'. Additionally, attention should be paid to the base64 encoded versions of '--donate-level=' and pool connection strings like 'stratum+tcp://' and 'stratum+udp://', which miners might use to obfuscate their activities.\n\nExclude detections that might come from legitimate use cases, especially where command lines involve common strings seen in legitimate scripts or applications, such as ' pool.c ', ' pool.o ', or when using the 'gcc -' compiler command, as these could represent legitimate development activities or use of mining software for authorized purposes. \n\nThis approach targets high-level indicators of mining activity through command line analysis, under the assumption that crypto mining operations will utilize specific parameters and protocols to optimize their mining efforts and connect to mining pools. Tags associated with this detection tactic include Resource Development, Command and Control, and Execution, specifically pertaining to techniques like User Execution and Command and Scripting Interpreter use. Awareness and monitoring of these indicators are crucial in identifying unauthorized cryptocurrency mining activities, which might otherwise go unnoticed and could lead to resource exploitation, increased costs, and potential security vulnerabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' --cpu-priority='\n            - '--donate-level=0'\n            - ' -o pool.'\n            - ' --nicehash'\n            - ' --algo=rx/0 '\n            - 'stratum+tcp://'\n            - 'stratum+udp://'\n            # base64 encoded: --donate-level=\n            - 'LS1kb25hdGUtbGV2ZWw9'\n            - '0tZG9uYXRlLWxldmVsP'\n            - 'tLWRvbmF0ZS1sZXZlbD'\n            # base64 encoded: stratum+tcp:// and stratum+udp://\n            - 'c3RyYXR1bSt0Y3A6Ly'\n            - 'N0cmF0dW0rdGNwOi8v'\n            - 'zdHJhdHVtK3RjcDovL'\n            - 'c3RyYXR1bSt1ZHA6Ly'\n            - 'N0cmF0dW0rdWRwOi8v'\n            - 'zdHJhdHVtK3VkcDovL'\n    filter:\n        CommandLine|contains:\n            - ' pool.c '\n            - ' pool.o '\n            - 'gcc -'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of crypto miners\n    - Some build frameworks\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' --cpu-priority='\n            - '--donate-level=0'\n            - ' -o pool.'\n            - ' --nicehash'\n            - ' --algo=rx/0 '\n            - 'stratum+tcp://'\n            - 'stratum+udp://'\n            # base64 encoded: --donate-level=\n            - 'LS1kb25hdGUtbGV2ZWw9'\n            - '0tZG9uYXRlLWxldmVsP'\n            - 'tLWRvbmF0ZS1sZXZlbD'\n            # base64 encoded: stratum+tcp:// and stratum+udp://\n            - 'c3RyYXR1bSt0Y3A6Ly'\n            - 'N0cmF0dW0rdGNwOi8v'\n            - 'zdHJhdHVtK3RjcDovL'\n            - 'c3RyYXR1bSt1ZHA6Ly'\n            - 'N0cmF0dW0rdWRwOi8v'\n            - 'zdHJhdHVtK3VkcDovL'\n    filter:\n        CommandLine|contains:\n            - ' pool.c '\n            - ' pool.o '\n            - 'gcc -'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of crypto miners\n    - Some build frameworks\nlevel: high\n",
      "question": "command line parameters or strings often used by crypto miners",
      "answer": "In order to detect command line parameters or strings often used by crypto miners, you should focus on monitoring process creation events on Windows systems. Specifically, look for command line inputs that contain key indicators of cryptocurrency mining, such as setting the CPU priority, opting out of donation levels, specifying mining pool addresses, choosing mining algorithms, and connecting over specific protocols like TCP and UDP. Notable strings to watch for include ' --cpu-priority=', '--donate-level=0', ' -o pool.', ' --nicehash', ' --algo=rx/0 ', 'stratum+tcp://', and 'stratum+udp://'. Additionally, attention should be paid to the base64 encoded versions of '--donate-level=' and pool connection strings like 'stratum+tcp://' and 'stratum+udp://', which miners might use to obfuscate their activities.\n\nExclude detections that might come from legitimate use cases, especially where command lines involve common strings seen in legitimate scripts or applications, such as ' pool.c ', ' pool.o ', or when using the 'gcc -' compiler command, as these could represent legitimate development activities or use of mining software for authorized purposes. \n\nThis approach targets high-level indicators of mining activity through command line analysis, under the assumption that crypto mining operations will utilize specific parameters and protocols to optimize their mining efforts and connect to mining pools. Tags associated with this detection tactic include Resource Development, Command and Control, and Execution, specifically pertaining to techniques like User Execution and Command and Scripting Interpreter use. Awareness and monitoring of these indicators are crucial in identifying unauthorized cryptocurrency mining activities, which might otherwise go unnoticed and could lead to resource exploitation, increased costs, and potential security vulnerabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of stdin to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should focus on monitoring Windows system service logs, specifically targeting events recorded by the Service Control Manager. Look for event ID 7045, which pertains to service installations. The critical indicator to watch for involves service installation commands that invoke PowerShell via the command line (cmd) using either the '/c' or '/r' switch to carry out commands. These commands are particularly suspicious when they include both 'cmd' and 'powershell' within the service's binary path or ImagePath.\n\nMoreover, signs of obfuscation and potential evasion techniques become apparent when the ImagePath contains specific patterns. These include the presence of 'noexit', which aims to keep the PowerShell session open, and sequences combining 'input' with the '$' character, suggesting the script is attempting to read from stdin in a manner that might not be straightforward. Such combinations are often employed to obscure the command's true nature, making it harder to detect malicious activities.\n\nTo efficiently detect these behaviors, ensure that your detection mechanisms capture all instances where the conditions mentioned above are met simultaneously. However, be aware that there might be rare legitimate uses that trigger these indicators, so consider these as high-level alerts that require manual verification to confirm their malicious intent.\n\nBy focusing on these specific patterns and behaviors in the Windows system service logs, you can identify attempts to execute PowerShell scripts in a manner that seeks to evade detection through obfuscation, which is a common tactic in various attack scenarios such as Initial Access, Execution, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_main:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\\\"'\n        # Example 1: c:\\windows\\sYstEm32\\CmD.eXE /C\"echO\\Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -NoEXiT -\"\n        # Example 2: c:\\WiNDOws\\sysTEm32\\cmd.EXe /C \" ECHo Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -nol ${EXEcUtIONCONTeXT}.INvOkEComMANd.InvOKEScRIPt( $InpUt )\"\n        ImagePath|contains|all:\n            - 'cmd'\n            - 'powershell'\n        ImagePath|contains:\n            - '/c'\n            - '/r'\n    selection_other:\n        - ImagePath|contains: 'noexit'\n        - ImagePath|contains|all:\n            - 'input'\n            - '$'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_main:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\\\"'\n        # Example 1: c:\\windows\\sYstEm32\\CmD.eXE /C\"echO\\Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -NoEXiT -\"\n        # Example 2: c:\\WiNDOws\\sysTEm32\\cmd.EXe /C \" ECHo Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -nol ${EXEcUtIONCONTeXT}.INvOkEComMANd.InvOKEScRIPt( $InpUt )\"\n        ImagePath|contains|all:\n            - 'cmd'\n            - 'powershell'\n        ImagePath|contains:\n            - '/c'\n            - '/r'\n    selection_other:\n        - ImagePath|contains: 'noexit'\n        - ImagePath|contains|all:\n            - 'input'\n            - '$'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should focus on monitoring Windows system service logs, specifically targeting events recorded by the Service Control Manager. Look for event ID 7045, which pertains to service installations. The critical indicator to watch for involves service installation commands that invoke PowerShell via the command line (cmd) using either the '/c' or '/r' switch to carry out commands. These commands are particularly suspicious when they include both 'cmd' and 'powershell' within the service's binary path or ImagePath.\n\nMoreover, signs of obfuscation and potential evasion techniques become apparent when the ImagePath contains specific patterns. These include the presence of 'noexit', which aims to keep the PowerShell session open, and sequences combining 'input' with the '$' character, suggesting the script is attempting to read from stdin in a manner that might not be straightforward. Such combinations are often employed to obscure the command's true nature, making it harder to detect malicious activities.\n\nTo efficiently detect these behaviors, ensure that your detection mechanisms capture all instances where the conditions mentioned above are met simultaneously. However, be aware that there might be rare legitimate uses that trigger these indicators, so consider these as high-level alerts that require manual verification to confirm their malicious intent.\n\nBy focusing on these specific patterns and behaviors in the Windows system service logs, you can identify attempts to execute PowerShell scripts in a manner that seeks to evade detection through obfuscation, which is a common tactic in various attack scenarios such as Initial Access, Execution, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of an executable by another executable.\nMore specifically, the Sigma rule should work as follows:\n\nTo detect the creation of an executable by another executable, you should monitor for events where an executable file creates another executable file within a Windows environment. This involves tracking file creation activities specifically where both the source (Image) and target (TargetFilename) elements end with '.exe', indicating the involvement of executable files. However, to reduce false positives and focus the detection, it's essential to exclude certain benign and system-related activities from triggering alarms. This includes ignoring file creation events initiated by known system processes like `msiexec.exe`, `cleanmgr.exe`, `explorer.exe`, among others, which are legitimate parts of Windows operations. Additionally, special attention should be given to exclude system-update-related activities, such as those involving `svchost.exe` interacting with Windows update directories or during Windows upgrade processes.\n\nKey exclusions also extend to activities involving common application update mechanisms, like those of Microsoft Teams or GitHub Desktop, where executable files might be created as part of their normal update process. Moreover, it's crucial to filter out processes associated with software installations, update utilities, and the execution of 32-bit applications launching their 64-bit counterparts to avoid misidentification of legitimate software behavior as malicious activities.\n\nIn essence, the detection aims to highlight unusual executable file creation occurrences that could indicate unauthorized or malicious software propagation. Still, it simultaneously avoids raising alerts on certified Windows update operations, legitimate software update processes, and recognized system activities to maintain a focus on potential security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '.exe'\n        TargetFilename|endswith: '.exe'\n    filter_whitelist:\n        Image:\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\system32\\cleanmgr.exe'\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\WINDOWS\\system32\\dxgiadaptercache.exe'\n            - 'C:\\WINDOWS\\system32\\Dism.exe'\n            - 'C:\\Windows\\System32\\wuauclt.exe'\n    filter_update:\n        # Security_UserID: S-1-5-18\n        # Example:\n        #   TargetFilename: C:\\Windows\\SoftwareDistribution\\Download\\803d1df4c931df4f3e50a022cda56e88\\WindowsUpdateBox.exe\n        Image: 'C:\\WINDOWS\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:\\Windows\\SoftwareDistribution\\Download\\'\n    filter_upgrade:\n        Image: 'C:\\Windows\\system32\\svchost.exe'\n        TargetFilename|contains|all:\n            # Example:\n            #   This example was seen during windows upgrade\n            #   TargetFilename: :\\WUDownloadCache\\803d1df4c931df4f3e50a022cda56e29\\WindowsUpdateBox.exe\n            - ':\\WUDownloadCache\\'\n            - '\\WindowsUpdateBox.exe'\n    filter_windows_update_box:\n        # This FP was seen during Windows Upgrade\n        # ParentCommandLine: C:\\WINDOWS\\system32\\svchost.exe -k netsvcs -p -s wuauserv\n        Image|startswith: 'C:\\WINDOWS\\SoftwareDistribution\\Download\\'\n        Image|endswith: '\\WindowsUpdateBox.Exe'\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\Sources\\'\n    filter_tiworker:\n        Image|startswith: 'C:\\Windows\\WinSxS\\'\n        Image|endswith: '\\TiWorker.exe'\n    filter_programfiles:\n        - Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        - TargetFilename|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    filter_defender:\n        Image|startswith:\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n            - 'C:\\Program Files\\Windows Defender\\'\n    filter_windows_apps:\n        TargetFilename|contains: '\\Microsoft\\WindowsApps\\'\n    filter_teams:\n        Image|endswith: '\\AppData\\Local\\Microsoft\\Teams\\Update.exe'\n        TargetFilename|endswith:\n            - '\\AppData\\Local\\Microsoft\\Teams\\stage\\Teams.exe'\n            - '\\AppData\\Local\\Microsoft\\Teams\\stage\\Squirrel.exe'\n            - '\\AppData\\Local\\Microsoft\\SquirrelTemp\\tempb\\'\n    filter_mscorsvw:\n        # Example:\n        #   ParentCommandLine: \"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\ngen.exe\" ExecuteQueuedItems /LegacyServiceBehavior\n        #   Image: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorsvw.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\4f8c-0\\MSBuild.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\49bc-0\\testhost.net47.x86.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\39d8-0\\fsc.exe\n        Image|startswith: 'C:\\Windows\\Microsoft.NET\\Framework\\'\n        Image|endswith: '\\mscorsvw.exe'\n        TargetFilename|startswith: 'C:\\Windows\\assembly\\NativeImages_'\n    filter_vscode:\n        Image|contains: '\\AppData\\Local\\'\n        Image|endswith: '\\Microsoft VS Code\\Code.exe'\n        TargetFilename|contains: '\\.vscode\\extensions\\'\n    filter_githubdesktop:\n        Image|endswith: '\\AppData\\Local\\GitHubDesktop\\Update.exe'\n        # Example TargetFileName:\n        #   \\AppData\\Local\\SquirrelTemp\\tempb\\lib\\net45\\GitHubDesktop_ExecutionStub.exe\n        #   \\AppData\\Local\\SquirrelTemp\\tempb\\lib\\net45\\squirrel.exe\n        TargetFilename|contains: '\\AppData\\Local\\SquirrelTemp\\'\n    filter_windows_temp:\n        TargetFilename|startswith: 'C:\\WINDOWS\\TEMP\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    #Please contribute to FP to increase the level\n    - Software installers\n    - Update utilities\n    - 32bit applications launching their 64bit versions\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '.exe'\n        TargetFilename|endswith: '.exe'\n    filter_whitelist:\n        Image:\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\system32\\cleanmgr.exe'\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\WINDOWS\\system32\\dxgiadaptercache.exe'\n            - 'C:\\WINDOWS\\system32\\Dism.exe'\n            - 'C:\\Windows\\System32\\wuauclt.exe'\n    filter_update:\n        # Security_UserID: S-1-5-18\n        # Example:\n        #   TargetFilename: C:\\Windows\\SoftwareDistribution\\Download\\803d1df4c931df4f3e50a022cda56e88\\WindowsUpdateBox.exe\n        Image: 'C:\\WINDOWS\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:\\Windows\\SoftwareDistribution\\Download\\'\n    filter_upgrade:\n        Image: 'C:\\Windows\\system32\\svchost.exe'\n        TargetFilename|contains|all:\n            # Example:\n            #   This example was seen during windows upgrade\n            #   TargetFilename: :\\WUDownloadCache\\803d1df4c931df4f3e50a022cda56e29\\WindowsUpdateBox.exe\n            - ':\\WUDownloadCache\\'\n            - '\\WindowsUpdateBox.exe'\n    filter_windows_update_box:\n        # This FP was seen during Windows Upgrade\n        # ParentCommandLine: C:\\WINDOWS\\system32\\svchost.exe -k netsvcs -p -s wuauserv\n        Image|startswith: 'C:\\WINDOWS\\SoftwareDistribution\\Download\\'\n        Image|endswith: '\\WindowsUpdateBox.Exe'\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\Sources\\'\n    filter_tiworker:\n        Image|startswith: 'C:\\Windows\\WinSxS\\'\n        Image|endswith: '\\TiWorker.exe'\n    filter_programfiles:\n        - Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        - TargetFilename|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    filter_defender:\n        Image|startswith:\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n            - 'C:\\Program Files\\Windows Defender\\'\n    filter_windows_apps:\n        TargetFilename|contains: '\\Microsoft\\WindowsApps\\'\n    filter_teams:\n        Image|endswith: '\\AppData\\Local\\Microsoft\\Teams\\Update.exe'\n        TargetFilename|endswith:\n            - '\\AppData\\Local\\Microsoft\\Teams\\stage\\Teams.exe'\n            - '\\AppData\\Local\\Microsoft\\Teams\\stage\\Squirrel.exe'\n            - '\\AppData\\Local\\Microsoft\\SquirrelTemp\\tempb\\'\n    filter_mscorsvw:\n        # Example:\n        #   ParentCommandLine: \"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\ngen.exe\" ExecuteQueuedItems /LegacyServiceBehavior\n        #   Image: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorsvw.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\4f8c-0\\MSBuild.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\49bc-0\\testhost.net47.x86.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\39d8-0\\fsc.exe\n        Image|startswith: 'C:\\Windows\\Microsoft.NET\\Framework\\'\n        Image|endswith: '\\mscorsvw.exe'\n        TargetFilename|startswith: 'C:\\Windows\\assembly\\NativeImages_'\n    filter_vscode:\n        Image|contains: '\\AppData\\Local\\'\n        Image|endswith: '\\Microsoft VS Code\\Code.exe'\n        TargetFilename|contains: '\\.vscode\\extensions\\'\n    filter_githubdesktop:\n        Image|endswith: '\\AppData\\Local\\GitHubDesktop\\Update.exe'\n        # Example TargetFileName:\n        #   \\AppData\\Local\\SquirrelTemp\\tempb\\lib\\net45\\GitHubDesktop_ExecutionStub.exe\n        #   \\AppData\\Local\\SquirrelTemp\\tempb\\lib\\net45\\squirrel.exe\n        TargetFilename|contains: '\\AppData\\Local\\SquirrelTemp\\'\n    filter_windows_temp:\n        TargetFilename|startswith: 'C:\\WINDOWS\\TEMP\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    #Please contribute to FP to increase the level\n    - Software installers\n    - Update utilities\n    - 32bit applications launching their 64bit versions\nlevel: low\n",
      "question": "creation of an executable by another executable",
      "answer": "To detect the creation of an executable by another executable, you should monitor for events where an executable file creates another executable file within a Windows environment. This involves tracking file creation activities specifically where both the source (Image) and target (TargetFilename) elements end with '.exe', indicating the involvement of executable files. However, to reduce false positives and focus the detection, it's essential to exclude certain benign and system-related activities from triggering alarms. This includes ignoring file creation events initiated by known system processes like `msiexec.exe`, `cleanmgr.exe`, `explorer.exe`, among others, which are legitimate parts of Windows operations. Additionally, special attention should be given to exclude system-update-related activities, such as those involving `svchost.exe` interacting with Windows update directories or during Windows upgrade processes.\n\nKey exclusions also extend to activities involving common application update mechanisms, like those of Microsoft Teams or GitHub Desktop, where executable files might be created as part of their normal update process. Moreover, it's crucial to filter out processes associated with software installations, update utilities, and the execution of 32-bit applications launching their 64-bit counterparts to avoid misidentification of legitimate software behavior as malicious activities.\n\nIn essence, the detection aims to highlight unusual executable file creation occurrences that could indicate unauthorized or malicious software propagation. Still, it simultaneously avoids raising alerts on certified Windows update operations, legitimate software update processes, and recognized system activities to maintain a focus on potential security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting programs on a Windows system that should not write executables to disk.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect programs on a Windows system that should not write executables to disk, you should monitor file event logs for instances where certain programs create or modify executable files (.exe, .dll, .ocx). Specifically, keep an eye on the activities of Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which do not typically involve dropping executables. Additionally, watch out for the use of legitimate Windows utilities (often referred to as LOLBINs - Living Off the Land Binaries) such as certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, and mshta.exe, as these can be abused to download or generate executable files but usually should not do so. Moreover, pay attention if executable files are created or altered by processes with names like AcroRd32.exe, RdrCEF.exe, hh.exe, and finger.exe; these are especially suspicious as they normally should never be involved in such actions, indicating potential process injection or masquerading malware. Be aware that detecting these activities necessitates a high level of alertness due to the potential for false positives being unknown, indicating that while anomalies might be rare, each detection should be investigated thoroughly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - '\\eqnedt32.exe'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n            # LOLBINs that can be used to download executables\n            - '\\certutil.exe'\n            - '\\certoc.exe'\n            - '\\CertReq.exe'\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - '\\Desktopimgdownldr.exe'\n            - '\\esentutl.exe'\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.exe'\n            - '.dll'\n            - '.ocx'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - '\\eqnedt32.exe'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n            # LOLBINs that can be used to download executables\n            - '\\certutil.exe'\n            - '\\certoc.exe'\n            - '\\CertReq.exe'\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - '\\Desktopimgdownldr.exe'\n            - '\\esentutl.exe'\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.exe'\n            - '.dll'\n            - '.ocx'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "programs on a Windows system that should not write executables to disk",
      "answer": "In order to detect programs on a Windows system that should not write executables to disk, you should monitor file event logs for instances where certain programs create or modify executable files (.exe, .dll, .ocx). Specifically, keep an eye on the activities of Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which do not typically involve dropping executables. Additionally, watch out for the use of legitimate Windows utilities (often referred to as LOLBINs - Living Off the Land Binaries) such as certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, and mshta.exe, as these can be abused to download or generate executable files but usually should not do so. Moreover, pay attention if executable files are created or altered by processes with names like AcroRd32.exe, RdrCEF.exe, hh.exe, and finger.exe; these are especially suspicious as they normally should never be involved in such actions, indicating potential process injection or masquerading malware. Be aware that detecting these activities necessitates a high level of alertness due to the potential for false positives being unknown, indicating that while anomalies might be rare, each detection should be investigated thoroughly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution, you should: Monitor Windows Registry modification events specifically targeting the registry key changes where the EventType is SetValue. Look out for modifications to TargetObjects that contain or have suffixes related to a set of specific tools - namely PsExec, ProcDump, Handle, LiveKd, Process Explorer, PsLoglist, PsPasswd, and Active Directory Explorer. These modifications become particularly suspicious when the TargetObject ends with '\\EulaAccepted'. Additionally, take into account instances where the main image name ends with specific executables associated with the listed tools, both in their standard and 64-bit versions. However, consider the scenario where the reported Image name might be null due to race conditions with some logging tools and exclude these from raising false alarms. This monitoring mechanism is aimed to identify attempts to use different software to mimic or bypass the normal behavior of Sysinternals tools, which typically set a registry key named \"accepteula\" as part of their execution process. This strategy heavily relies on registry set events and excludes known Sysinternals executable names to reduce the likelihood of false positives, which are considered unlikely given the specific nature of the detection criteria. This detailed observation helps in identifying malicious activities that try to exploit or simulate trusted Sysinternals tools by altering registry keys, a tactic often employed in sophisticated attacks aiming to stay under the radar.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\PsExec'\n            - '\\ProcDump'\n            - '\\Handle'\n            - '\\LiveKd'\n            - '\\Process Explorer'\n            - '\\PsLoglist'\n            - '\\PsPasswd'\n            - '\\Active Directory Explorer'\n        TargetObject|endswith: '\\EulaAccepted'\n    filter_main_image_names:\n        Image|endswith:\n            - '\\PsExec.exe'\n            - '\\PsExec64.exe'\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n            - '\\handle.exe'\n            - '\\handle64.exe'\n            - '\\livekd.exe'\n            - '\\livekd64.exe'\n            - '\\procexp.exe'\n            - '\\procexp64.exe'\n            - '\\psloglist.exe'\n            - '\\psloglist64.exe'\n            - '\\pspasswd.exe'\n            - '\\pspasswd64.exe'\n            - '\\ADExplorer.exe'\n            - '\\ADExplorer64.exe'\n    filter_optional_null:\n        Image: null # Race condition with some logging tools\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\PsExec'\n            - '\\ProcDump'\n            - '\\Handle'\n            - '\\LiveKd'\n            - '\\Process Explorer'\n            - '\\PsLoglist'\n            - '\\PsPasswd'\n            - '\\Active Directory Explorer'\n        TargetObject|endswith: '\\EulaAccepted'\n    filter_main_image_names:\n        Image|endswith:\n            - '\\PsExec.exe'\n            - '\\PsExec64.exe'\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n            - '\\handle.exe'\n            - '\\handle64.exe'\n            - '\\livekd.exe'\n            - '\\livekd64.exe'\n            - '\\procexp.exe'\n            - '\\procexp64.exe'\n            - '\\psloglist.exe'\n            - '\\psloglist64.exe'\n            - '\\pspasswd.exe'\n            - '\\pspasswd64.exe'\n            - '\\ADExplorer.exe'\n            - '\\ADExplorer64.exe'\n    filter_optional_null:\n        Image: null # Race condition with some logging tools\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution",
      "answer": "In order to detect non-sysinternals tools setting the \"accepteula\" key which normally is set on sysinternals tool execution, you should: Monitor Windows Registry modification events specifically targeting the registry key changes where the EventType is SetValue. Look out for modifications to TargetObjects that contain or have suffixes related to a set of specific tools - namely PsExec, ProcDump, Handle, LiveKd, Process Explorer, PsLoglist, PsPasswd, and Active Directory Explorer. These modifications become particularly suspicious when the TargetObject ends with '\\EulaAccepted'. Additionally, take into account instances where the main image name ends with specific executables associated with the listed tools, both in their standard and 64-bit versions. However, consider the scenario where the reported Image name might be null due to race conditions with some logging tools and exclude these from raising false alarms. This monitoring mechanism is aimed to identify attempts to use different software to mimic or bypass the normal behavior of Sysinternals tools, which typically set a registry key named \"accepteula\" as part of their execution process. This strategy heavily relies on registry set events and excludes known Sysinternals executable names to reduce the likelihood of false positives, which are considered unlikely given the specific nature of the detection criteria. This detailed observation helps in identifying malicious activities that try to exploit or simulate trusted Sysinternals tools by altering registry keys, a tactic often employed in sophisticated attacks aiming to stay under the radar."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of SDelete to erase a file not the free space.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of SDelete to erase a file not the free space, you should monitor the process creation logs on Windows systems for instances where the original file name is identified as `sdelete.exe`. However, it's important to exclude any command line instances that contain the parameters '-h', '-c', '-z', or '/\\?', as these are indicative of operations that do not target file erasure but rather pertain to free space cleansing or help commands. Focus on gathering information such as the computer name, user, full command line input, and parent command line input to thoroughly analyze potentially malicious activity. This approach is crucial for identifying the misuse of SDelete in a manner that aims to permanently delete files, bypassing recycle bin or standard delete functions, which could be indicative of an attempt to conceal illicit activities or remove evidence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: sdelete.exe\n    filter:\n        CommandLine|contains:\n            - ' -h'\n            - ' -c'\n            - ' -z'\n            - ' /\\?'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: sdelete.exe\n    filter:\n        CommandLine|contains:\n            - ' -h'\n            - ' -c'\n            - ' -z'\n            - ' /\\?'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of SDelete to erase a file not the free space",
      "answer": "In order to detect the use of SDelete to erase a file not the free space, you should monitor the process creation logs on Windows systems for instances where the original file name is identified as `sdelete.exe`. However, it's important to exclude any command line instances that contain the parameters '-h', '-c', '-z', or '/\\?', as these are indicative of operations that do not target file erasure but rather pertain to free space cleansing or help commands. Focus on gathering information such as the computer name, user, full command line input, and parent command line input to thoroughly analyze potentially malicious activity. This approach is crucial for identifying the misuse of SDelete in a manner that aims to permanently delete files, bypassing recycle bin or standard delete functions, which could be indicative of an attempt to conceal illicit activities or remove evidence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Environment Variables to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of environment variables to execute PowerShell, you should monitor PowerShell script block activity on Windows systems, ensuring that Script Block Logging is enabled. Look for specific patterns in the script text that are indicative of obfuscation tactics, such as the use of the \"cmd\" command with '/c' or '/r' options followed closely (up to 5 characters apart) by the word \"set\" and a variable name of 3 to 6 letters. This variable is then likely followed by a pattern that includes '{digit}' repeated at least once, indicating an attempt to obfuscate the command's purpose. This obfuscation is further indicated by a \"-f\" flag, suggesting the use of format strings to construct the final command dynamically. \n\nSuch activities are indicative of malicious attempts to obscure the true intent of PowerShell commands, often associated with Initial Access, Execution, and Defense Evasion techniques. Being vigilant for these patterns of script text allows you to identify potentially malicious activity that employs advanced obfuscation to execute commands via environment variables, a tactic attackers use to evade detection and maintain persistence on a compromised system. ",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|re: '.*cmd.{0,5}(?:/c|/r)(?:\\s|)\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\"\\s+?-f(?:.*\\)){1,}.*\"'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|re: '.*cmd.{0,5}(?:/c|/r)(?:\\s|)\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\"\\s+?-f(?:.*\\)){1,}.*\"'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Environment Variables to execute PowerShell",
      "answer": "In order to detect obfuscated use of environment variables to execute PowerShell, you should monitor PowerShell script block activity on Windows systems, ensuring that Script Block Logging is enabled. Look for specific patterns in the script text that are indicative of obfuscation tactics, such as the use of the \"cmd\" command with '/c' or '/r' options followed closely (up to 5 characters apart) by the word \"set\" and a variable name of 3 to 6 letters. This variable is then likely followed by a pattern that includes '{digit}' repeated at least once, indicating an attempt to obfuscate the command's purpose. This obfuscation is further indicated by a \"-f\" flag, suggesting the use of format strings to construct the final command dynamically. \n\nSuch activities are indicative of malicious attempts to obscure the true intent of PowerShell commands, often associated with Initial Access, Execution, and Defense Evasion techniques. Being vigilant for these patterns of script text allows you to identify potentially malicious activity that employs advanced obfuscation to execute commands via environment variables, a tactic attackers use to evade detection and maintain persistence on a compromised system. "
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via RUNDLL LAUNCHER.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated PowerShell via RUNDLL launcher, you should focus on monitoring Windows PowerShell modules. Specifically, look for events that include the execution of 'rundll32.exe' in conjunction with 'shell32.dll' and the specific command 'shellexec_rundll', which is often used to obfuscate the launching of PowerShell scripts. This method of execution is noteworthy as attackers frequently use it to bypass detection mechanisms by masking malicious PowerShell activity. The detection hinges on identifying these components together within the PowerShell module logs, marked under a unique definition ID. It's crucial to be aware that while this approach is effective for uncovering suspicious activities, there may be instances where legitimate applications trigger similar patterns, and these should be carefully considered as potential false positives. The severity of this detection is classified as medium, signifying the need for prompt investigation upon alert. This method is aligned with recognized cyber attack tactics and techniques, aiding in the broader strategy of defense against advanced threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to detect obfuscated PowerShell via RUNDLL launcher, you should focus on monitoring Windows PowerShell modules. Specifically, look for events that include the execution of 'rundll32.exe' in conjunction with 'shell32.dll' and the specific command 'shellexec_rundll', which is often used to obfuscate the launching of PowerShell scripts. This method of execution is noteworthy as attackers frequently use it to bypass detection mechanisms by masking malicious PowerShell activity. The detection hinges on identifying these components together within the PowerShell module logs, marked under a unique definition ID. It's crucial to be aware that while this approach is effective for uncovering suspicious activities, there may be instances where legitimate applications trigger similar patterns, and these should be carefully considered as potential false positives. The severity of this detection is classified as medium, signifying the need for prompt investigation upon alert. This method is aligned with recognized cyber attack tactics and techniques, aiding in the broader strategy of defense against advanced threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting that a vulnerable Netlogon secure channel connection was allowed, which could be an indicator of CVE-2020-1472..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect that a vulnerable Netlogon secure channel connection was allowed, which could be an indicator of CVE-2020-1472, you should focus on monitoring the Windows System event logs, specifically seeking out events generated by the NetLogon service. Look for events with the Provider Name set to NetLogon and an Event ID of 5829. This Event ID is crucial as it indicates that a vulnerable Netlogon secure channel connection was permitted, which is a potential sign of an exploit attempt related to CVE-2020-1472, a critical vulnerability often referred to as \"Zerologon.\" This attack takes advantage of flaws in the Netlogon authentication process to potentially allow attackers to breach or disrupt services. It's important to capture the SAMAccountName field in the logs, as it contains the Security Account Manager (SAM) account name of the user or service involved in the event, providing further context to the incident. The level of concern for these findings is categorized as high due to the severe implications associated with CVE-2020-1472 exploitation attempts. Since detection can involve false positives, although they are not specified, it implies a need for subsequent investigation to confirm any suspected exploit activity. Understanding and monitoring for this activity is crucial for maintaining the security and integrity of Windows environments, particularly those utilizing Active Directory services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: NetLogon  # Active Directory: NetLogon ETW GUID {F33959B4-DBEC-11D2-895B-00C04F79AB69}\n        EventID: 5829\n    condition: selection\nfalsepositives:\n    - Unknown\nfields:\n    - SAMAccountName\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: NetLogon  # Active Directory: NetLogon ETW GUID {F33959B4-DBEC-11D2-895B-00C04F79AB69}\n        EventID: 5829\n    condition: selection\nfalsepositives:\n    - Unknown\nfields:\n    - SAMAccountName\nlevel: high\n",
      "question": "that a vulnerable Netlogon secure channel connection was allowed, which could be an indicator of CVE-2020-1472.",
      "answer": "In order to detect that a vulnerable Netlogon secure channel connection was allowed, which could be an indicator of CVE-2020-1472, you should focus on monitoring the Windows System event logs, specifically seeking out events generated by the NetLogon service. Look for events with the Provider Name set to NetLogon and an Event ID of 5829. This Event ID is crucial as it indicates that a vulnerable Netlogon secure channel connection was permitted, which is a potential sign of an exploit attempt related to CVE-2020-1472, a critical vulnerability often referred to as \"Zerologon.\" This attack takes advantage of flaws in the Netlogon authentication process to potentially allow attackers to breach or disrupt services. It's important to capture the SAMAccountName field in the logs, as it contains the Security Account Manager (SAM) account name of the user or service involved in the event, providing further context to the incident. The level of concern for these findings is categorized as high due to the severe implications associated with CVE-2020-1472 exploitation attempts. Since detection can involve false positives, although they are not specified, it implies a need for subsequent investigation to confirm any suspected exploit activity. Understanding and monitoring for this activity is crucial for maintaining the security and integrity of Windows environments, particularly those utilizing Active Directory services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file type dropped by an Exchange component in IIS.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious file type dropped by an Exchange component in IIS, you should: Monitor Windows file event logs for instances where files with specific extensions (such as '.aspx', '.asp', '.ashx', '.ps1', '.bat', '.exe', '.dll', '.vbs') are created or modified by processes that end with '\\w3wp.exe' and contain 'MSExchange' in their command line parameters. This activity is indicative of potential malicious behavior associated with the web server's interaction with Exchange components, aiming to exploit or manipulate Exchange functionalities, possibly for command execution or persistence on the server. Be aware that while this detection strategy is tailored to capture a specific attack pattern, there could be instances that are not malicious (though these are currently unknown), thus it's crucial to investigate the context of the matches at a medium level of alert severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n            - '.ps1'\n            - '.bat'\n            - '.exe'\n            - '.dll'\n            - '.vbs'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n            - '.ps1'\n            - '.bat'\n            - '.exe'\n            - '.dll'\n            - '.vbs'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious file type dropped by an Exchange component in IIS",
      "answer": "In order to detect suspicious file type dropped by an Exchange component in IIS, you should: Monitor Windows file event logs for instances where files with specific extensions (such as '.aspx', '.asp', '.ashx', '.ps1', '.bat', '.exe', '.dll', '.vbs') are created or modified by processes that end with '\\w3wp.exe' and contain 'MSExchange' in their command line parameters. This activity is indicative of potential malicious behavior associated with the web server's interaction with Exchange components, aiming to exploit or manipulate Exchange functionalities, possibly for command execution or persistence on the server. Be aware that while this detection strategy is tailored to capture a specific attack pattern, there could be instances that are not malicious (though these are currently unknown), thus it's crucial to investigate the context of the matches at a medium level of alert severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block cited in the reference section below.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect all variations of obfuscated PowerShell IEX invocation code generated by the Invoke-Obfuscation framework from the code block cited in the reference section below, you should: Monitor Windows PowerShell module logs for specific patterns that suggest obfuscation attempts. Look for payloads containing unusual expressions or patterns such as combinations of `$PSHome`, `$ShellId`, `$env:Public`, `$env:ComSpec` array indexing, and concatenation, or specific regex patterns that include wildcard characters followed by 'mdr', explicit calls to `$VerbosePreference.ToString()`, or casting `$VerbosePreference` to a string `[String]`. These specific indicators are highly suggestive of obfuscated code typically used in attempts to evade detection while invoking PowerShell commands in a manner not typically seen in benign use cases. Given the high level of specificity and rarity of such patterns in legitimate scripts, alerts generated from these indicators should be considered with high suspicion, although the possibility of unknown false positives exists.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_payload:\n        - Payload|re: '\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\['\n        - Payload|re: '\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\['\n        - Payload|re: '\\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\['\n        - Payload|re: '\\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}'\n        - Payload|re: '\\*mdr\\*\\W\\s*\\)\\.Name'\n        - Payload|re: '\\$VerbosePreference\\.ToString\\('\n        - Payload|re: '\\[String\\]\\s*\\$VerbosePreference'\n    condition: selection_payload\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_payload:\n        - Payload|re: '\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\['\n        - Payload|re: '\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\['\n        - Payload|re: '\\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\['\n        - Payload|re: '\\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}'\n        - Payload|re: '\\*mdr\\*\\W\\s*\\)\\.Name'\n        - Payload|re: '\\$VerbosePreference\\.ToString\\('\n        - Payload|re: '\\[String\\]\\s*\\$VerbosePreference'\n    condition: selection_payload\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block cited in the reference section below",
      "answer": "In order to detect all variations of obfuscated PowerShell IEX invocation code generated by the Invoke-Obfuscation framework from the code block cited in the reference section below, you should: Monitor Windows PowerShell module logs for specific patterns that suggest obfuscation attempts. Look for payloads containing unusual expressions or patterns such as combinations of `$PSHome`, `$ShellId`, `$env:Public`, `$env:ComSpec` array indexing, and concatenation, or specific regex patterns that include wildcard characters followed by 'mdr', explicit calls to `$VerbosePreference.ToString()`, or casting `$VerbosePreference` to a string `[String]`. These specific indicators are highly suggestive of obfuscated code typically used in attempts to evade detection while invoking PowerShell commands in a manner not typically seen in benign use cases. Given the high level of specificity and rarity of such patterns in legitimate scripts, alerts generated from these indicators should be considered with high suspicion, although the possibility of unknown false positives exists."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of \"appcmd\" to create new global URL rewrite rules, which has been observed being used by threat actors to add new rules so they can access their webshells, you should: Monitor Windows process creation logs for instances of the application \"appcmd.exe\" being executed, especially focusing on commands that include 'set', 'config', 'section:system.webServer/rewrite/globalRules', and 'commit:' in the command line. This behavior is indicative of attempts to modify web server configurations, potentially to insert malicious URL rewrite rules that could facilitate unsanctioned access to webshells. It is important to note, though, that there might be legitimate cases where administrators use \"appcmd.exe\" to add new URL rewrite rules for valid reasons, which are considered as possible false positives that need to be carefully evaluated. The severity of this activity is assessed as medium, suggesting a balanced approach to monitoring and investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:system.webServer/rewrite/globalRules'\n            - 'commit:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of appcmd to add new URL rewrite rules\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:system.webServer/rewrite/globalRules'\n            - 'commit:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of appcmd to add new URL rewrite rules\nlevel: medium\n",
      "question": "usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.",
      "answer": "In order to detect usage of \"appcmd\" to create new global URL rewrite rules, which has been observed being used by threat actors to add new rules so they can access their webshells, you should: Monitor Windows process creation logs for instances of the application \"appcmd.exe\" being executed, especially focusing on commands that include 'set', 'config', 'section:system.webServer/rewrite/globalRules', and 'commit:' in the command line. This behavior is indicative of attempts to modify web server configurations, potentially to insert malicious URL rewrite rules that could facilitate unsanctioned access to webshells. It is important to note, though, that there might be legitimate cases where administrators use \"appcmd.exe\" to add new URL rewrite rules for valid reasons, which are considered as possible false positives that need to be carefully evaluated. The severity of this activity is assessed as medium, suggesting a balanced approach to monitoring and investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of NirCmd tool for command execution, which could be the result of legitimate administrative activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity, you should: Monitor process creation logs on Windows systems for the execution of the NirCmd utility. This involves looking for instances where the process image name ends with '\\NirCmd.exe' or where the original filename is exactly 'NirCmd.exe'. In addition, inspect the command line for specific patterns. These include the presence of strings such as 'execmd', '.exe script', '.exe shexec', or 'runinteractive', which suggest the execution of commands or scripts. Additionally, monitor for combinations of command line parameters that include 'exec' or 'exec2' along with 'show' or 'hide', indicating attempts to run commands in a certain manner, possibly to evade detection. It's important to record the full command line and the parent command line during these checks. Be aware, however, that NirCmd is a legitimate tool that can be used by administrators for valid reasons, so carefully evaluate the context of its use to distinguish between malicious activity and legitimate administrative actions. This monitoring is set at a medium severity level due to the potential legitimate use of NirCmd.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_org:\n        - Image|endswith: '\\NirCmd.exe'\n        - OriginalFileName: 'NirCmd.exe'\n    selection_cmd:\n        CommandLine|contains:\n            - ' execmd '\n            - '.exe script '\n            - '.exe shexec '\n            - ' runinteractive '\n    combo_exec:\n        CommandLine|contains:\n            - ' exec '\n            - ' exec2 '\n    combo_exec_params:\n        CommandLine|contains:\n            - ' show '\n            - ' hide '\n    condition: 1 of selection_* or all of combo_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use by administrators\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_org:\n        - Image|endswith: '\\NirCmd.exe'\n        - OriginalFileName: 'NirCmd.exe'\n    selection_cmd:\n        CommandLine|contains:\n            - ' execmd '\n            - '.exe script '\n            - '.exe shexec '\n            - ' runinteractive '\n    combo_exec:\n        CommandLine|contains:\n            - ' exec '\n            - ' exec2 '\n    combo_exec_params:\n        CommandLine|contains:\n            - ' show '\n            - ' hide '\n    condition: 1 of selection_* or all of combo_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use by administrators\nlevel: medium\n",
      "question": "use of NirCmd tool for command execution, which could be the result of legitimate administrative activity",
      "answer": "In order to detect the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity, you should: Monitor process creation logs on Windows systems for the execution of the NirCmd utility. This involves looking for instances where the process image name ends with '\\NirCmd.exe' or where the original filename is exactly 'NirCmd.exe'. In addition, inspect the command line for specific patterns. These include the presence of strings such as 'execmd', '.exe script', '.exe shexec', or 'runinteractive', which suggest the execution of commands or scripts. Additionally, monitor for combinations of command line parameters that include 'exec' or 'exec2' along with 'show' or 'hide', indicating attempts to run commands in a certain manner, possibly to evade detection. It's important to record the full command line and the parent command line during these checks. Be aware, however, that NirCmd is a legitimate tool that can be used by administrators for valid reasons, so carefully evaluate the context of its use to distinguish between malicious activity and legitimate administrative actions. This monitoring is set at a medium severity level due to the potential legitimate use of NirCmd."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of wmic utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the WMIC utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc., you should monitor process creation logs on Windows systems for the execution of the 'wmic.exe' application, specifically looking for instances where the command line includes the term 'computersystem'. This involves checking both the 'Image' path to ensure it ends with '\\wmic.exe' and the 'OriginalFileName' attribute for 'wmic.exe' to accurately identify the utility being used. Additionally, the presence of 'computersystem' within the CommandLine is a key indicator of the utility being used to gather machine information. This approach is necessary to detect potential reconnaissance activities where attackers gather important system information using WMIC. It is important to note that while this behavior might flag legitimate administrative use, such occurrences should be considered in the context of other suspicious activity to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'computersystem'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'computersystem'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of wmic utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc.",
      "answer": "In order to detect execution of the WMIC utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc., you should monitor process creation logs on Windows systems for the execution of the 'wmic.exe' application, specifically looking for instances where the command line includes the term 'computersystem'. This involves checking both the 'Image' path to ensure it ends with '\\wmic.exe' and the 'OriginalFileName' attribute for 'wmic.exe' to accurately identify the utility being used. Additionally, the presence of 'computersystem' within the CommandLine is a key indicator of the utility being used to gather machine information. This approach is necessary to detect potential reconnaissance activities where attackers gather important system information using WMIC. It is important to note that while this behavior might flag legitimate administrative use, such occurrences should be considered in the context of other suspicious activity to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting removal of folders from the \"ProtectedFolders\" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the removal of folders from the \"ProtectedFolders\" list of exploit guard, which could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder, you should monitor Windows registry deletions focusing on the specific event where values under the registry path \"SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders\" are being deleted. This action is tagged in the context of potential intrusion tactics where an attacker may attempt to bypass or disable protective measures around sensitive folders. These tactics align with manipulation of files and directories or an attempt to evade defenses. It is considered a high-level concern because alterations to the Controlled Folder Access settings can directly impact the security posture by allowing unauthorized access or changes to protected folders, potentially leading to data loss or compromise. However, be mindful that there are situations where legitimate administrators might remove applications or modify these settings for valid reasons, and such activities should always be investigated rather than automatically deemed malicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_delete\n    product: windows\ndetection:\n    selection:\n        EventType: DeleteValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders'\n    condition: selection\nfalsepositives:\n    - Legitimate administrators removing applications (should always be investigated)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_delete\n    product: windows\ndetection:\n    selection:\n        EventType: DeleteValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders'\n    condition: selection\nfalsepositives:\n    - Legitimate administrators removing applications (should always be investigated)\nlevel: high\n",
      "question": "removal of folders from the \"ProtectedFolders\" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder",
      "answer": "In order to detect the removal of folders from the \"ProtectedFolders\" list of exploit guard, which could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder, you should monitor Windows registry deletions focusing on the specific event where values under the registry path \"SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders\" are being deleted. This action is tagged in the context of potential intrusion tactics where an attacker may attempt to bypass or disable protective measures around sensitive folders. These tactics align with manipulation of files and directories or an attempt to evade defenses. It is considered a high-level concern because alterations to the Controlled Folder Access settings can directly impact the security posture by allowing unauthorized access or changes to protected folders, potentially leading to data loss or compromise. However, be mindful that there are situations where legitimate administrators might remove applications or modify these settings for valid reasons, and such activities should always be investigated rather than automatically deemed malicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exploitation attempts of CVE-2022-29072, a 7-Zip privilege escalation and command execution vulnerability.\n7-Zip version 21.07 and earlier on Windows allows privilege escalation (CVE-2022-29072) and command execution when a file with the .7z extension is dragged to the Help>Contents area. This is caused by misconfiguration of 7z.dll and a heap overflow.\nThe command runs in a child process under the 7zFM.exe process.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential exploitation attempts of CVE-2022-29072, a 7-Zip privilege escalation and command execution vulnerability, you should: Monitor Windows process creation logs for instances where the command prompt (cmd.exe) is launched, paying attention to commands that originate from or are associated with the 7-Zip File Manager (7zFM.exe). Specifically, commands should not include typical command-line invocations such as '/c', '/k', or '/r', nor should they lack a command line entirely. This approach helps in identifying unusual or suspicious command executions that could indicate an attempt to exploit the mentioned vulnerability in 7-Zip, where malicious actors could escalate privileges and execute commands through specially crafted .7z files. The monitoring is highly relevant due to the potential high impact of such an exploitation, given 7-Zip's widespread use and the severity of this specific vulnerability allowing privilege escalation and arbitrary command execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_parent:\n        ParentImage|endswith: '\\7zFM.exe'\n    filter_bat:\n        CommandLine|contains:\n            - ' /c '\n            - ' /k '\n            - ' /r '\n    filter_null:\n        CommandLine: null\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_parent:\n        ParentImage|endswith: '\\7zFM.exe'\n    filter_bat:\n        CommandLine|contains:\n            - ' /c '\n            - ' /k '\n            - ' /r '\n    filter_null:\n        CommandLine: null\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential exploitation attempts of CVE-2022-29072, a 7-Zip privilege escalation and command execution vulnerability.\n7-Zip version 21.07 and earlier on Windows allows privilege escalation (CVE-2022-29072) and command execution when a file with the .7z extension is dragged to the Help>Contents area. This is caused by misconfiguration of 7z.dll and a heap overflow.\nThe command runs in a child process under the 7zFM.exe process.\n",
      "answer": "In order to detect potential exploitation attempts of CVE-2022-29072, a 7-Zip privilege escalation and command execution vulnerability, you should: Monitor Windows process creation logs for instances where the command prompt (cmd.exe) is launched, paying attention to commands that originate from or are associated with the 7-Zip File Manager (7zFM.exe). Specifically, commands should not include typical command-line invocations such as '/c', '/k', or '/r', nor should they lack a command line entirely. This approach helps in identifying unusual or suspicious command executions that could indicate an attempt to exploit the mentioned vulnerability in 7-Zip, where malicious actors could escalate privileges and execute commands through specially crafted .7z files. The monitoring is highly relevant due to the potential high impact of such an exploitation, given 7-Zip's widespread use and the severity of this specific vulnerability allowing privilege escalation and arbitrary command execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect use of icacls to deny access for everyone in Users folder, sometimes used to hide malicious files, you should monitor for the creation of processes related to the execution of the 'icacls.exe' command, specifically under the Windows operating system. Look for instances where the original file name is marked as 'iCACLS.EXE' or the image path ends with '\\icacls.exe'. Additionally, pay close attention to the command line parameters, particularly commands that include paths starting with 'C:\\Users\\', coupled with the '/deny' parameter and the security identifier '*S-1-1-0:', which corresponds to denying access to the \"Everyone\" group. This combination of path, option, and identifier is a strong indicator that icacls is being used with potentially malicious intent, specifically to modify permissions in the User's folder to conceal unauthorized files. It's worth noting that there may be legitimate uses for these commands, so it is essential to consider the context in which they are being executed to reduce the number of false positives. The detection is based on process creation logs, making it critical to have a comprehensive logging mechanism on Windows machines to effectively monitor and react to such activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_icacls:\n        - OriginalFileName: 'iCACLS.EXE'\n        - Image|endswith: '\\icacls.exe'\n    selection_cmd: #icacls \"C:\\Users\\admin\\AppData\\Local\\37f92fe8-bcf0-4ee0-b8ba-561f797f5696\" /deny *S-1-1-0:(OI)(CI)(DE,DC)\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '/deny'\n            - '*S-1-1-0:'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_icacls:\n        - OriginalFileName: 'iCACLS.EXE'\n        - Image|endswith: '\\icacls.exe'\n    selection_cmd: #icacls \"C:\\Users\\admin\\AppData\\Local\\37f92fe8-bcf0-4ee0-b8ba-561f797f5696\" /deny *S-1-1-0:(OI)(CI)(DE,DC)\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '/deny'\n            - '*S-1-1-0:'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files",
      "answer": "In order to detect use of icacls to deny access for everyone in Users folder, sometimes used to hide malicious files, you should monitor for the creation of processes related to the execution of the 'icacls.exe' command, specifically under the Windows operating system. Look for instances where the original file name is marked as 'iCACLS.EXE' or the image path ends with '\\icacls.exe'. Additionally, pay close attention to the command line parameters, particularly commands that include paths starting with 'C:\\Users\\', coupled with the '/deny' parameter and the security identifier '*S-1-1-0:', which corresponds to denying access to the \"Everyone\" group. This combination of path, option, and identifier is a strong indicator that icacls is being used with potentially malicious intent, specifically to modify permissions in the User's folder to conceal unauthorized files. It's worth noting that there may be legitimate uses for these commands, so it is essential to consider the context in which they are being executed to reduce the number of false positives. The detection is based on process creation logs, making it critical to have a comprehensive logging mechanism on Windows machines to effectively monitor and react to such activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious execution of Regasm/Regsvcs utilities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious execution of Regasm/Regsvcs utilities, you should monitor for the creation of processes on Windows systems where the process image ends with \"\\Regsvcs.exe\" or \"\\Regasm.exe\", or where the OriginalFileName is exactly 'RegSvcs.exe' or 'RegAsm.exe'. Additionally, inspect the command line for references to certain directories that are commonly used by attackers as hiding spots for malicious files. These directories include '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\Downloads\\', '\\PerfLogs\\', '\\Windows\\Temp\\', and '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'. It's also crucial to apply a filter to catch executions that involve '.dll' files in the command line, indicating potential misuse of these utilities to load malicious DLLs. However, be mindful to not trigger alerts simply based on the image name appearing in the command line without additional suspicious parameters, as legitimate operations may occasionally align with these conditions. The detection logic aims to encompass various scenarios under which Regasm.exe or Regsvcs.exe execution could signal an attack, considering the high risk associated with the abuse of these utilities for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\Regsvcs.exe'\n            - '\\Regasm.exe'\n        - OriginalFileName:\n            - 'RegSvcs.exe'\n            - 'RegAsm.exe'\n    selection_dir:\n        CommandLine|contains:\n            # Add more suspicious directories\n            - '\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\PerfLogs\\'\n            - '\\Windows\\Temp\\'\n            - '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'\n    filter_main_dll:\n        CommandLine|contains: '.dll'\n    filter_main_no_cli:\n        # For when the CLI just contains the Image\n        CommandLine|endswith:\n            - '\\Regasm.exe\"'\n            - '\\Regasm.exe'\n            - '\\Regsvcs.exe\"'\n            - '\\Regsvcs.exe'\n    condition: all of selection_* or (selection_img and not 1 of filter_main_*)\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\Regsvcs.exe'\n            - '\\Regasm.exe'\n        - OriginalFileName:\n            - 'RegSvcs.exe'\n            - 'RegAsm.exe'\n    selection_dir:\n        CommandLine|contains:\n            # Add more suspicious directories\n            - '\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\PerfLogs\\'\n            - '\\Windows\\Temp\\'\n            - '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'\n    filter_main_dll:\n        CommandLine|contains: '.dll'\n    filter_main_no_cli:\n        # For when the CLI just contains the Image\n        CommandLine|endswith:\n            - '\\Regasm.exe\"'\n            - '\\Regasm.exe'\n            - '\\Regsvcs.exe\"'\n            - '\\Regsvcs.exe'\n    condition: all of selection_* or (selection_img and not 1 of filter_main_*)\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious execution of Regasm/Regsvcs utilities",
      "answer": "In order to detect suspicious execution of Regasm/Regsvcs utilities, you should monitor for the creation of processes on Windows systems where the process image ends with \"\\Regsvcs.exe\" or \"\\Regasm.exe\", or where the OriginalFileName is exactly 'RegSvcs.exe' or 'RegAsm.exe'. Additionally, inspect the command line for references to certain directories that are commonly used by attackers as hiding spots for malicious files. These directories include '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\Downloads\\', '\\PerfLogs\\', '\\Windows\\Temp\\', and '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'. It's also crucial to apply a filter to catch executions that involve '.dll' files in the command line, indicating potential misuse of these utilities to load malicious DLLs. However, be mindful to not trigger alerts simply based on the image name appearing in the command line without additional suspicious parameters, as legitimate operations may occasionally align with these conditions. The detection logic aims to encompass various scenarios under which Regasm.exe or Regsvcs.exe execution could signal an attack, considering the high risk associated with the abuse of these utilities for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting lolbas Cmdl32 is use to download a payload to evade antivirus.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to lolbas Cmdl32 is used to download a payload to evade antivirus, you should: Monitor the creation of processes on Windows operating systems, focusing on cases where the process image name ends with '\\cmdl32.exe' or the original file name is identified exactly as CMDL32.EXE. Additionally, watch for command-line parameters that contain both '/vpn ' and '/lan ', as these are characteristic of the technique being employed to download malicious payloads while attempting to bypass antivirus detection. Recognize that sightings of these indicators may not always be malicious in nature (thus considered as potential false positives) but warrant a medium level of attention due to their association with evasive tactics.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdl32.exe'\n        - OriginalFileName: CMDL32.EXE\n    selection_cli:\n        CommandLine|contains|all:\n            - '/vpn '\n            - '/lan '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdl32.exe'\n        - OriginalFileName: CMDL32.EXE\n    selection_cli:\n        CommandLine|contains|all:\n            - '/vpn '\n            - '/lan '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "lolbas Cmdl32 is use to download a payload to evade antivirus",
      "answer": "In order to lolbas Cmdl32 is used to download a payload to evade antivirus, you should: Monitor the creation of processes on Windows operating systems, focusing on cases where the process image name ends with '\\cmdl32.exe' or the original file name is identified exactly as CMDL32.EXE. Additionally, watch for command-line parameters that contain both '/vpn ' and '/lan ', as these are characteristic of the technique being employed to download malicious payloads while attempting to bypass antivirus detection. Recognize that sightings of these indicators may not always be malicious in nature (thus considered as potential false positives) but warrant a medium level of attention due to their association with evasive tactics."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443, you should: monitor network connections on Windows systems for specific patterns. Focus on connections where the process image ends with '\\svchost.exe', which is initiated by this service. Particularly, pay attention to instances where this process, acting as a host, initiates connections from source port 3389, which is traditionally used for remote desktop protocol (RDP) services, to destination ports 80 (commonly used for HTTP traffic) or 443 (used for HTTPS traffic). These connection attempts are unusual for svchost.exe involved in RDP activities, as they indicate possible misuse of RDP services to communicate with external systems over web ports, potentially for command and control or data exfiltration purposes. It's vital to consider all detections related to these patterns with a high level of suspicion due to the possibly unknown nature of false positives, indicating a critical need for immediate investigation upon detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n        Initiated: 'true'\n        SourcePort: 3389\n        DestinationPort:\n            - 80\n            - 443\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n        Initiated: 'true'\n        SourcePort: 3389\n        DestinationPort:\n            - 80\n            - 443\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443",
      "answer": "In order to detect svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443, you should: monitor network connections on Windows systems for specific patterns. Focus on connections where the process image ends with '\\svchost.exe', which is initiated by this service. Particularly, pay attention to instances where this process, acting as a host, initiates connections from source port 3389, which is traditionally used for remote desktop protocol (RDP) services, to destination ports 80 (commonly used for HTTP traffic) or 443 (used for HTTPS traffic). These connection attempts are unusual for svchost.exe involved in RDP activities, as they indicate possible misuse of RDP services to communicate with external systems over web ports, potentially for command and control or data exfiltration purposes. It's vital to consider all detections related to these patterns with a high level of suspicion due to the possibly unknown nature of false positives, indicating a critical need for immediate investigation upon detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting  when a firewall rule is modified or deleted in Google Cloud Platform (GCP)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a firewall rule is modified or deleted in Google Cloud Platform (GCP), you should monitor the Google Cloud Platform's audit logs, specifically within the GCP audit service. Look for the following method names indicating modifications to firewall rules: `v*.Compute.Firewalls.Delete`, `v*.Compute.Firewalls.Patch`, `v*.Compute.Firewalls.Update`, and `v*.Compute.Firewalls.Insert`. These activities represent the deletion, patching, updating, or insertion of firewall rules, respectively. It's significant to interpret these logs accurately because changes to firewall rules could potentially expose vulnerabilities or compromise the protected network infrastructure, possibly leading to unauthorized access.\n\nBe aware that modifications to firewall rules might originate from legitimate administrative actions. Therefore, it's crucial to verify whether any detected modification or deletion of a firewall rule was expected or authorized. This verification process can help in distinguishing between ordinary maintenance activities and potential security incidents. In cases where certain activities are identified as routine or expected, exceptions can be incorporated to refine the monitoring process, helping to reduce false positive alerts.\n\nThis monitoring strategy has a medium level of urgency, indicating that while modifications to firewall rules are significant, they may not always represent an immediate threat to the organization's security posture. However, given the potential impact of unauthorized changes to firewall rules, such activities should be closely scrutinized and investigated promptly to ensure the security and integrity of the Google Cloud Platform environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name:\n            - v*.Compute.Firewalls.Delete\n            - v*.Compute.Firewalls.Patch\n            - v*.Compute.Firewalls.Update\n            - v*.Compute.Firewalls.Insert\n    condition: selection\nfalsepositives:\n    - Firewall rules being modified or deleted may be performed by a system administrator. Verify that the firewall configuration change was expected.\n    - Exceptions can be added to this rule to filter expected behavior.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name:\n            - v*.Compute.Firewalls.Delete\n            - v*.Compute.Firewalls.Patch\n            - v*.Compute.Firewalls.Update\n            - v*.Compute.Firewalls.Insert\n    condition: selection\nfalsepositives:\n    - Firewall rules being modified or deleted may be performed by a system administrator. Verify that the firewall configuration change was expected.\n    - Exceptions can be added to this rule to filter expected behavior.\nlevel: medium\n",
      "question": " when a firewall rule is modified or deleted in Google Cloud Platform (GCP).",
      "answer": "In order to detect when a firewall rule is modified or deleted in Google Cloud Platform (GCP), you should monitor the Google Cloud Platform's audit logs, specifically within the GCP audit service. Look for the following method names indicating modifications to firewall rules: `v*.Compute.Firewalls.Delete`, `v*.Compute.Firewalls.Patch`, `v*.Compute.Firewalls.Update`, and `v*.Compute.Firewalls.Insert`. These activities represent the deletion, patching, updating, or insertion of firewall rules, respectively. It's significant to interpret these logs accurately because changes to firewall rules could potentially expose vulnerabilities or compromise the protected network infrastructure, possibly leading to unauthorized access.\n\nBe aware that modifications to firewall rules might originate from legitimate administrative actions. Therefore, it's crucial to verify whether any detected modification or deletion of a firewall rule was expected or authorized. This verification process can help in distinguishing between ordinary maintenance activities and potential security incidents. In cases where certain activities are identified as routine or expected, exceptions can be incorporated to refine the monitoring process, helping to reduce false positive alerts.\n\nThis monitoring strategy has a medium level of urgency, indicating that while modifications to firewall rules are significant, they may not always represent an immediate threat to the organization's security posture. However, given the potential impact of unauthorized changes to firewall rules, such activities should be closely scrutinized and investigated promptly to ensure the security and integrity of the Google Cloud Platform environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Monitor and alert for Bitlocker key retrieval..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to monitor and alert for Bitlocker key retrieval, you should focus on monitoring Azure audit logs for any activities related to key management. Specifically, pay attention to events within the KeyManagement category where the operation name is \"Read BitLocker key\". This activity could indicate someone is attempting to retrieve the BitLocker encryption keys, which can be a critical security concern. The detection of such activities is set to a medium severity level due to the potential impact and sensitivity of these encryption keys. Be aware that there might be cases where the detection could trigger on legitimate activities, but these instances are currently unknown. Keeping an eye on these specific operations within the Azure environment is essential for safeguarding against potential threats that seek to access sensitive encryption keys.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: KeyManagement\n        OperationName: Read BitLocker key\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: KeyManagement\n        OperationName: Read BitLocker key\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Monitor and alert for Bitlocker key retrieval.",
      "answer": "In order to monitor and alert for Bitlocker key retrieval, you should focus on monitoring Azure audit logs for any activities related to key management. Specifically, pay attention to events within the KeyManagement category where the operation name is \"Read BitLocker key\". This activity could indicate someone is attempting to retrieve the BitLocker encryption keys, which can be a critical security concern. The detection of such activities is set to a medium severity level due to the potential impact and sensitivity of these encryption keys. Be aware that there might be cases where the detection could trigger on legitimate activities, but these instances are currently unknown. Keeping an eye on these specific operations within the Azure environment is essential for safeguarding against potential threats that seek to access sensitive encryption keys."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process. This file is usually generated by Microsoft Powershell to test against Applocker..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process, which is typically generated by Microsoft PowerShell to test against Applocker, you should monitor Windows file event logs for the creation or modification of files containing the name \"__PSScriptPolicyTest_\". It is crucial to exclude events triggered by known and common PowerShell processes, including 'pwsh.exe', 'dsac.exe', 'ServerManager.exe', 'powershell_ise.exe', 'powershell.exe', and 'wsmprovhost.exe' located in their respective system directories within 'Program Files', 'System32', and 'SysWOW64'. These exclusions help in reducing false positives by filtering out legitimate instances of PowerShell use. The detection focuses on identifying potential evasion or bypass attempts of application control policies like Applocker, by pinpointing activities occurring from unusual or unexpected processes which are not typically associated with the generation of this specific PowerShell script file. Monitoring these events at a medium severity level is recommended due to the potential for false positives of unknown origin, yet the creation of such a script by atypical processes can signify malicious intent, such as attempting to assess or circumvent existing security policies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '__PSScriptPolicyTest_'\n    filter_main_generic:\n        Image|endswith:\n            - ':\\Program Files\\PowerShell\\7\\pwsh.exe'\n            - ':\\Windows\\System32\\dsac.exe'\n            - ':\\Windows\\System32\\ServerManager.exe'\n            - ':\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe'\n            - ':\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'\n            - ':\\Windows\\System32\\wsmprovhost.exe'\n            - ':\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe'\n            - ':\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '__PSScriptPolicyTest_'\n    filter_main_generic:\n        Image|endswith:\n            - ':\\Program Files\\PowerShell\\7\\pwsh.exe'\n            - ':\\Windows\\System32\\dsac.exe'\n            - ':\\Windows\\System32\\ServerManager.exe'\n            - ':\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe'\n            - ':\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'\n            - ':\\Windows\\System32\\wsmprovhost.exe'\n            - ':\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe'\n            - ':\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process. This file is usually generated by Microsoft Powershell to test against Applocker.",
      "answer": "In order to detect the creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process, which is typically generated by Microsoft PowerShell to test against Applocker, you should monitor Windows file event logs for the creation or modification of files containing the name \"__PSScriptPolicyTest_\". It is crucial to exclude events triggered by known and common PowerShell processes, including 'pwsh.exe', 'dsac.exe', 'ServerManager.exe', 'powershell_ise.exe', 'powershell.exe', and 'wsmprovhost.exe' located in their respective system directories within 'Program Files', 'System32', and 'SysWOW64'. These exclusions help in reducing false positives by filtering out legitimate instances of PowerShell use. The detection focuses on identifying potential evasion or bypass attempts of application control policies like Applocker, by pinpointing activities occurring from unusual or unexpected processes which are not typically associated with the generation of this specific PowerShell script file. Monitoring these events at a medium severity level is recommended due to the potential for false positives of unknown origin, yet the creation of such a script by atypical processes can signify malicious intent, such as attempting to assess or circumvent existing security policies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Transferring files with well-known filenames (sensitive files with credential data) using network shares.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities involving transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor SMB (Server Message Block) file share activities on systems using Zeek, focusing on file names that are commonly associated with sensitive information. These filenames include system and security files that attackers might target to obtain credential data, such as 'mimidrv', 'lsass', 'windows\\minidump\\', 'hiberfil', 'sqldmpr', 'sam', 'ntds.dit', and 'security'. A detection mechanism should be in place to flag activities involving these files when they are being accessed or transferred over the network.\n\nIt is essential to consider that there are legitimate reasons why an administrator might transfer such files during routine administration tasks. Therefore, while monitoring for these file name patterns, it is necessary to differentiate between malicious activities and legitimate administrative operations to reduce false positives. The detection level for this activity is medium, indicating that while it is not uncommon, careful analysis is recommended to accurately distinguish between normal and suspicious activities. Identifying such transfers can be pivotal in early detection of credential theft or other preliminary steps by attackers leveraging SMB file shares.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: smb_files\ndetection:\n    selection:\n        name:\n            - '\\mimidrv'\n            - '\\lsass'\n            - '\\windows\\minidump\\'\n            - '\\hiberfil'\n            - '\\sqldmpr'\n            - '\\sam'\n            - '\\ntds.dit'\n            - '\\security'\n    condition: selection\nfalsepositives:\n    - Transferring sensitive files for legitimate administration work by legitimate administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: smb_files\ndetection:\n    selection:\n        name:\n            - '\\mimidrv'\n            - '\\lsass'\n            - '\\windows\\minidump\\'\n            - '\\hiberfil'\n            - '\\sqldmpr'\n            - '\\sam'\n            - '\\ntds.dit'\n            - '\\security'\n    condition: selection\nfalsepositives:\n    - Transferring sensitive files for legitimate administration work by legitimate administrator\nlevel: medium\n",
      "question": "Transferring files with well-known filenames (sensitive files with credential data) using network shares",
      "answer": "In order to detect activities involving transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor SMB (Server Message Block) file share activities on systems using Zeek, focusing on file names that are commonly associated with sensitive information. These filenames include system and security files that attackers might target to obtain credential data, such as 'mimidrv', 'lsass', 'windows\\minidump\\', 'hiberfil', 'sqldmpr', 'sam', 'ntds.dit', and 'security'. A detection mechanism should be in place to flag activities involving these files when they are being accessed or transferred over the network.\n\nIt is essential to consider that there are legitimate reasons why an administrator might transfer such files during routine administration tasks. Therefore, while monitoring for these file name patterns, it is necessary to differentiate between malicious activities and legitimate administrative operations to reduce false positives. The detection level for this activity is medium, indicating that while it is not uncommon, careful analysis is recommended to accurately distinguish between normal and suspicious activities. Identifying such transfers can be pivotal in early detection of credential theft or other preliminary steps by attackers leveraging SMB file shares."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful RCE.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful Remote Code Execution (RCE), you should:\nMonitor DNS query logs for any requests that contain specific domain names known to be associated with external service interactions. These domains include '.interact.sh', '.oast.pro', '.oast.live', '.oast.site', '.oast.online', '.oast.fun', '.oast.me', '.burpcollaborator.net', '.oastify.com', '.canarytokens.com', '.requestbin.net', and '.dnslog.cn'. Any DNS queries containing these domains should be flagged as suspicious because they are often used by attackers for out-of-band data exfiltration or command and control (C2) communications following a successful RCE attack. The level of concern for such detections is categorized as high due to the potential implications of such activity indicating a breach. However, it's important to note there may be unknown false positives, and each detection should be thoroughly investigated to confirm malicious activity. This approach is aligned with detecting techniques categorized under the MITRE ATT&CK tactics of command and control, and exfiltration, aiming to identify and mitigate potential threats as early as possible.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: dns\ndetection:\n    selection:\n        query|contains:\n            - '.interact.sh'\n            - '.oast.pro'\n            - '.oast.live'\n            - '.oast.site'\n            - '.oast.online'\n            - '.oast.fun'\n            - '.oast.me'\n            - '.burpcollaborator.net'\n            - '.oastify.com'\n            - '.canarytokens.com'\n            - '.requestbin.net'\n            - '.dnslog.cn'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns\ndetection:\n    selection:\n        query|contains:\n            - '.interact.sh'\n            - '.oast.pro'\n            - '.oast.live'\n            - '.oast.site'\n            - '.oast.online'\n            - '.oast.fun'\n            - '.oast.me'\n            - '.burpcollaborator.net'\n            - '.oastify.com'\n            - '.canarytokens.com'\n            - '.requestbin.net'\n            - '.dnslog.cn'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful RCE",
      "answer": "In order to detect suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful Remote Code Execution (RCE), you should:\nMonitor DNS query logs for any requests that contain specific domain names known to be associated with external service interactions. These domains include '.interact.sh', '.oast.pro', '.oast.live', '.oast.site', '.oast.online', '.oast.fun', '.oast.me', '.burpcollaborator.net', '.oastify.com', '.canarytokens.com', '.requestbin.net', and '.dnslog.cn'. Any DNS queries containing these domains should be flagged as suspicious because they are often used by attackers for out-of-band data exfiltration or command and control (C2) communications following a successful RCE attack. The level of concern for such detections is categorized as high due to the potential implications of such activity indicating a breach. However, it's important to note there may be unknown false positives, and each detection should be thoroughly investigated to confirm malicious activity. This approach is aligned with detecting techniques categorized under the MITRE ATT&CK tactics of command and control, and exfiltration, aiming to identify and mitigate potential threats as early as possible."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to RCE..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to Remote Code Execution (RCE), you should: Focus on monitoring application error logs specifically within applications that use the velocity template rendering engine. Ensure that these logs have a log level of ERROR or above as specified in the requirements. Detection can be achieved by looking out for specific exception keywords that indicate a problematic state during the rendering process. These keywords include 'ParseErrorException', 'VelocityException', and 'TemplateInitException'. It is essential to monitor for these exceptions because they indicate that something went wrong during the dynamic rendering of user input, which might be an attempt at or indicative of a possible RCE attack. Be aware that there could be certain situations where these alerts might not signify an actual attack but rather stem from internal application bugs or issues like missing '.vm' (Velocity template) files, representing potential false positives. Given the severity of what these exceptions might represent, the alert level for such detections is marked as high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: application\n    product: velocity\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'ParseErrorException'\n        - 'VelocityException'\n        - 'TemplateInitException'\n    condition: keywords\nfalsepositives:\n    - Application bugs\n    - Missing .vm files\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: application\n    product: velocity\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'ParseErrorException'\n        - 'VelocityException'\n        - 'TemplateInitException'\n    condition: keywords\nfalsepositives:\n    - Application bugs\n    - Missing .vm files\nlevel: high\n",
      "question": "exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to RCE.",
      "answer": "In order to detect exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to Remote Code Execution (RCE), you should: Focus on monitoring application error logs specifically within applications that use the velocity template rendering engine. Ensure that these logs have a log level of ERROR or above as specified in the requirements. Detection can be achieved by looking out for specific exception keywords that indicate a problematic state during the rendering process. These keywords include 'ParseErrorException', 'VelocityException', and 'TemplateInitException'. It is essential to monitor for these exceptions because they indicate that something went wrong during the dynamic rendering of user input, which might be an attempt at or indicative of a possible RCE attack. Be aware that there could be certain situations where these alerts might not signify an actual attack but rather stem from internal application bugs or issues like missing '.vm' (Velocity template) files, representing potential false positives. Given the severity of what these exceptions might represent, the alert level for such detections is marked as high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Backdooring domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to backdoor domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer, you should: Monitor Windows security logs for event IDs related to changes in directory services. Specifically, watch for event ID 5136, which indicates a modification to an Active Directory object. This event becomes significant when the 'ntSecurityDescriptor' attribute is altered, especially if the change involves specific GUIDs ('1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'). These GUIDs represent permissions often sought in attacks aiming to grant DCSync rights, which could enable adversaries to replicate the contents of Active Directory, including password hashes, potentially leading to domain-wide escalation of privileges. Be sure to exclude events that pertain to 'dnsNode', 'dnsZoneScope', and 'dnsZone' object classes, as changes to these objects are less likely to be related to the described attack scenario.\n\nWhen investigating potential security events, it's important to consider the context of detected changes. For example, the creation of a new Domain Controller computer account could trigger similar alerts. When such events are detected, verify the user or machine account involved by inspecting the SID within the 'AttributeValue' of event 5136 to determine whether it's a regular user or Domain Controller computer account. This attack and defense technique typically involves MITRE ATT&CK tactics and techniques such as Privilege Escalation and Credential Access, focusing on replicating directory services to extract sensitive information like password hashes. Keep the alert level high due to the significant impact of successfully executing this type of attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)\ndetection:\n    selection:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'ntSecurityDescriptor'\n        AttributeValue|contains:\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '89e95b76-444d-4c62-991a-0facbeda640c'\n    filter1:\n        ObjectClass:\n            - 'dnsNode'\n            - 'dnsZoneScope'\n            - 'dnsZone'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - New Domain Controller computer account, check user SIDs within the value attribute of event 5136 and verify if it's a regular user or DC computer account.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)\ndetection:\n    selection:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'ntSecurityDescriptor'\n        AttributeValue|contains:\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '89e95b76-444d-4c62-991a-0facbeda640c'\n    filter1:\n        ObjectClass:\n            - 'dnsNode'\n            - 'dnsZoneScope'\n            - 'dnsZone'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - New Domain Controller computer account, check user SIDs within the value attribute of event 5136 and verify if it's a regular user or DC computer account.\nlevel: high\n",
      "question": "Backdooring domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer",
      "answer": "In order to backdoor domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer, you should: Monitor Windows security logs for event IDs related to changes in directory services. Specifically, watch for event ID 5136, which indicates a modification to an Active Directory object. This event becomes significant when the 'ntSecurityDescriptor' attribute is altered, especially if the change involves specific GUIDs ('1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'). These GUIDs represent permissions often sought in attacks aiming to grant DCSync rights, which could enable adversaries to replicate the contents of Active Directory, including password hashes, potentially leading to domain-wide escalation of privileges. Be sure to exclude events that pertain to 'dnsNode', 'dnsZoneScope', and 'dnsZone' object classes, as changes to these objects are less likely to be related to the described attack scenario.\n\nWhen investigating potential security events, it's important to consider the context of detected changes. For example, the creation of a new Domain Controller computer account could trigger similar alerts. When such events are detected, verify the user or machine account involved by inspecting the SID within the 'AttributeValue' of event 5136 to determine whether it's a regular user or Domain Controller computer account. This attack and defense technique typically involves MITRE ATT&CK tactics and techniques such as Privilege Escalation and Credential Access, focusing on replicating directory services to extract sensitive information like password hashes. Keep the alert level high due to the significant impact of successfully executing this type of attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of commands and binaries from the context of the program compatibility assistant (Pcalua.exe), which can be used as a LOLBIN to bypass application whitelisting, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the process image path ends with '\\pcalua.exe' and the command line includes ' -a', indicating that any parameter is accepted as long as it follows the '-a'. This observation is crucial as attackers might use Pcalua.exe, a legitimate Windows utility, for malicious purposes by passing commands that are otherwise blocked by application whitelisting. Be aware that there may be false positives, such as legitimate uses of Pcalua.exe via a batch script or by administrators. The severity level of this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\pcalua.exe'\n        CommandLine|contains: ' -a' # No space after the flag because it accepts anything as long as there a \"-a\"\n    condition: selection\nfalsepositives:\n    - Legitimate use by a via a batch script or by an administrator.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\pcalua.exe'\n        CommandLine|contains: ' -a' # No space after the flag because it accepts anything as long as there a \"-a\"\n    condition: selection\nfalsepositives:\n    - Legitimate use by a via a batch script or by an administrator.\nlevel: medium\n",
      "question": "execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting.",
      "answer": "In order to detect execution of commands and binaries from the context of the program compatibility assistant (Pcalua.exe), which can be used as a LOLBIN to bypass application whitelisting, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the process image path ends with '\\pcalua.exe' and the command line includes ' -a', indicating that any parameter is accepted as long as it follows the '-a'. This observation is crucial as attackers might use Pcalua.exe, a legitimate Windows utility, for malicious purposes by passing commands that are otherwise blocked by application whitelisting. Be aware that there may be false positives, such as legitimate uses of Pcalua.exe via a batch script or by administrators. The severity level of this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify the use of various commands to query a system's time, which may be indicative of an adversary attempting to understand the time zone or system time before executing scheduled tasks, you should monitor process creation logs on Windows systems for the execution of specific commands. Look for processes being created that end with \\net.exe or \\net1.exe which include the use of the word 'time' in their command line. Additionally, watch for processes ending in \\w32tm.exe that include 'tz' in their command line, as this can indicate an attempt to query the system's time zone. Be aware, however, that these system utilities might be used for legitimate reasons, such as discovering system time for authorized activities, which could result in false positives. The severity of this detection is considered low, but it is tied to the broader tactics and techniques of gathering reconnaissance information on a target system to facilitate other forms of attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_time:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'time'\n    selection_w32tm:\n        Image|endswith: '\\w32tm.exe'\n        CommandLine|contains: 'tz'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of the system utilities to discover system time for legitimate reason\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_time:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'time'\n    selection_w32tm:\n        Image|endswith: '\\w32tm.exe'\n        CommandLine|contains: 'tz'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of the system utilities to discover system time for legitimate reason\nlevel: low\n",
      "question": "Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system.",
      "answer": "In order to identify the use of various commands to query a system's time, which may be indicative of an adversary attempting to understand the time zone or system time before executing scheduled tasks, you should monitor process creation logs on Windows systems for the execution of specific commands. Look for processes being created that end with \\net.exe or \\net1.exe which include the use of the word 'time' in their command line. Additionally, watch for processes ending in \\w32tm.exe that include 'tz' in their command line, as this can indicate an attempt to query the system's time zone. Be aware, however, that these system utilities might be used for legitimate reasons, such as discovering system time for authorized activities, which could result in false positives. The severity of this detection is considered low, but it is tied to the broader tactics and techniques of gathering reconnaissance information on a target system to facilitate other forms of attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious user agent strings used by malware in proxy logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious user agent strings used by malware in proxy logs, you should: monitor proxy log sources for specific user agent strings that are commonly associated with various types of remote access tools (RATs), malware, and other potentially harmful software. These user agent strings include, but are not limited to, particular versions and formats masquerading as legitimate browsers, such as Internet Explorer, Mozilla Firefox, Chrome, and Safari, each of which might be an indicator of malicious activity. Certain strings are explicitly linked to known malware families like DragonOK, PlugX, HTTPBrowser RAT, and others including Emotet and Lockbit strains, as well as tools used for web shell interactions and other cyber threat activities. When these user agent strings are identified within the proxy logs, it indicates a high possibility of compromise or malicious attempt to communicate, signaling for further investigation. Detection involves capturing logs that contain these agent strings, alongside the requested URI and client IP address which can be critical for understanding the scope of a potential security breach or ongoing attack. Despite the specificity of the selection criteria, it's essential to remain aware of the small chance of false positives, where benign activities might inadvertently match the detection patterns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent:\n        # RATs\n            - 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Chrome /53.0' # DragonOK\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR  1.1.4322)' # Used by PlugX - old - https://goo.gl/Yfjtk5\n            - 'HttpBrowser/1.0' # HTTPBrowser RAT\n            - '*<|>*' # Houdini / Iniduoh / njRAT\n            - 'nsis_inetc (mozilla)' # ZeroAccess\n            - 'Wget/1.9+cvs-stable (Red Hat modified)' # Dyre / Upatre\n        # Ghost419 https://goo.gl/rW1yvZ\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; .NET CLR 1.1.4322)'\n        # Malware\n            - '*zeroup*' # W32/Renos.Downloader\n            - 'Mozilla/5.0 (Windows NT 5.1 ; v.*' # Kazy\n            - '* adlib/*' # https://goo.gl/gcAHoh\n            - '* tiny' # Trojan Downloader\n            - '* BGroom *' # Trojan Downloader\n            - '* changhuatong'\n            - '* CholTBAgent'\n            - 'Mozilla/5.0 WinInet'\n            - 'RookIE/1.0'\n            - 'M' # HkMain\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)' # Egamipload - old UA - probable prone to false positives\n            - 'Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6.0)' # Yakes\n            - 'backdoorbot'\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30731)' # Sality\n            - 'Opera/8.81 (Windows NT 6.0; U; en)' # Sality\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729)' # Sality\n            - 'Opera' # Trojan Keragany\n            - 'Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)' # Fareit\n            - 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)' # Webshell's back connect\n            - 'MSIE' # Toby web shell\n            - '*(Charon; Inferno)' # Loki Bot\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/5.0)' # Fareit / Pony\n            - 'Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)' # https://goo.gl/g43qjs\n            - 'Mozilla/4.0(compatible; MSIE 6.0; Windows NT 5.1)' # MacControl malware https://goo.gl/sqY3Ja https://www.symantec.com/connect/blogs/osxmacontrol-back-it-again\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' # used by Zebrocy malware https://app.any.run/tasks/7d7fa4a0-6970-4428-828b-29572abf9ceb/\n        # Ursnif\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64)'\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64)'\n        # Emotet\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.2; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3)' # https://twitter.com/webbthewombat/status/1225827092132179968\n        # Lockbit (https://twitter.com/kladblokje_88/status/1614673320124743681?s=12&t=joEpeVa5d58aHYNGA_To7Q)\n            - 'Mozilla/5.0 (Windows NT 6.1)'\n            - 'AppleWebkit/587.38 (KHTML, like Gecko)'\n            - 'Chrome/91.0.4472.77'\n            - 'Safari/537.36'\n            - 'Edge/91.0.864.37'\n            - 'Firefox/89.0'\n            - 'Gecko/20100101'\n        # Others\n            - '* pxyscand*'\n            - '* asd'\n            - '* mdms'\n            - 'sample'\n            - 'nocase'\n            - 'Moxilla'\n            - 'Win32 *'\n            - '*Microsoft Internet Explorer*'\n            - 'agent *'\n            - 'AutoIt' # Suspicious - base-lining recommended\n            - 'IczelionDownLoad'\n            - 'Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 10.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)' # https://unit42.paloaltonetworks.com/thor-plugx-variant/\n            - 'record' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'mozzzzzzzzzzz' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0' # Quasar RAT UA https://twitter.com/malmoeb/status/1559994820692672519?s=20&t=g3tkNL09dZZWbFN10qDVjg\n            - 'Havana/0.1' # https://www.cybereason.com/blog/threat-alert-havanacrypt-ransomware-masquerading-as-google-update\n            - 'antSword/v2.1' # AntSword Webshell UA\n            - 'rqwrwqrqwrqw'  # Racoon Stealer\n            - 'qwrqrwrqwrqwr'  # Racoon Stealer\n            - 'rc2.0/client'  # Racoon Stealer\n            - 'TakeMyPainBack'  # Racoon Stealer\n            - 'xxx' # Racoon Stealer\n            - '20112211' # Racoon Stealer\n            - '23591' # Racoon Stealer\n            - '901785252112' # Racoon Stealer\n            - '1235125521512' # Racoon Stealer\n            - '125122112551' # Racoon Stealer\n            - 'B1D3N_RIM_MY_ASS' # Racoon Stealer\n            - 'AYAYAYAY1337' # Racoon Stealer\n            - 'iMightJustPayMySelfForAFeature' # Racoon Stealer\n            - 'ForAFeature' # Racoon Stealer\n            - 'Ares_ldr_v_*' # AresLoader\n            # - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106' # seen used by AresLoader\n            - 'Microsoft Internet Explorer' # https://github.com/silence-is-best/c2db\n            - 'CLCTR' # https://github.com/silence-is-best/c2db\n            - 'uploader' # https://github.com/silence-is-best/c2db\n            - 'agent' # https://github.com/silence-is-best/c2db\n            - 'License' # https://github.com/silence-is-best/c2db\n            - 'vb wininet' # https://github.com/silence-is-best/c2db\n            - 'Client' # https://github.com/silence-is-best/c2db\n            - 'Lilith-Bot/3.0' # Lilith Stealer - https://twitter.com/suyog41/status/1558051450797690880\n            - 'svc/1.0' # SVC Loader - https://twitter.com/suyog41/status/1558051450797690880\n            - 'WSHRAT' # WSHRAT - https://twitter.com/suyog41/status/1558051450797690880\n            - 'ZeroStresser Botnet/1.5' # Zerobot - https://twitter.com/suyog41/status/1558051450797690880\n            - 'OK' #Nymaim - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1sqlite' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent:\n        # RATs\n            - 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Chrome /53.0' # DragonOK\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR  1.1.4322)' # Used by PlugX - old - https://goo.gl/Yfjtk5\n            - 'HttpBrowser/1.0' # HTTPBrowser RAT\n            - '*<|>*' # Houdini / Iniduoh / njRAT\n            - 'nsis_inetc (mozilla)' # ZeroAccess\n            - 'Wget/1.9+cvs-stable (Red Hat modified)' # Dyre / Upatre\n        # Ghost419 https://goo.gl/rW1yvZ\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; .NET CLR 1.1.4322)'\n        # Malware\n            - '*zeroup*' # W32/Renos.Downloader\n            - 'Mozilla/5.0 (Windows NT 5.1 ; v.*' # Kazy\n            - '* adlib/*' # https://goo.gl/gcAHoh\n            - '* tiny' # Trojan Downloader\n            - '* BGroom *' # Trojan Downloader\n            - '* changhuatong'\n            - '* CholTBAgent'\n            - 'Mozilla/5.0 WinInet'\n            - 'RookIE/1.0'\n            - 'M' # HkMain\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)' # Egamipload - old UA - probable prone to false positives\n            - 'Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6.0)' # Yakes\n            - 'backdoorbot'\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30731)' # Sality\n            - 'Opera/8.81 (Windows NT 6.0; U; en)' # Sality\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729)' # Sality\n            - 'Opera' # Trojan Keragany\n            - 'Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)' # Fareit\n            - 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)' # Webshell's back connect\n            - 'MSIE' # Toby web shell\n            - '*(Charon; Inferno)' # Loki Bot\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/5.0)' # Fareit / Pony\n            - 'Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)' # https://goo.gl/g43qjs\n            - 'Mozilla/4.0(compatible; MSIE 6.0; Windows NT 5.1)' # MacControl malware https://goo.gl/sqY3Ja https://www.symantec.com/connect/blogs/osxmacontrol-back-it-again\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' # used by Zebrocy malware https://app.any.run/tasks/7d7fa4a0-6970-4428-828b-29572abf9ceb/\n        # Ursnif\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64)'\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64)'\n        # Emotet\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.2; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3)' # https://twitter.com/webbthewombat/status/1225827092132179968\n        # Lockbit (https://twitter.com/kladblokje_88/status/1614673320124743681?s=12&t=joEpeVa5d58aHYNGA_To7Q)\n            - 'Mozilla/5.0 (Windows NT 6.1)'\n            - 'AppleWebkit/587.38 (KHTML, like Gecko)'\n            - 'Chrome/91.0.4472.77'\n            - 'Safari/537.36'\n            - 'Edge/91.0.864.37'\n            - 'Firefox/89.0'\n            - 'Gecko/20100101'\n        # Others\n            - '* pxyscand*'\n            - '* asd'\n            - '* mdms'\n            - 'sample'\n            - 'nocase'\n            - 'Moxilla'\n            - 'Win32 *'\n            - '*Microsoft Internet Explorer*'\n            - 'agent *'\n            - 'AutoIt' # Suspicious - base-lining recommended\n            - 'IczelionDownLoad'\n            - 'Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 10.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)' # https://unit42.paloaltonetworks.com/thor-plugx-variant/\n            - 'record' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'mozzzzzzzzzzz' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0' # Quasar RAT UA https://twitter.com/malmoeb/status/1559994820692672519?s=20&t=g3tkNL09dZZWbFN10qDVjg\n            - 'Havana/0.1' # https://www.cybereason.com/blog/threat-alert-havanacrypt-ransomware-masquerading-as-google-update\n            - 'antSword/v2.1' # AntSword Webshell UA\n            - 'rqwrwqrqwrqw'  # Racoon Stealer\n            - 'qwrqrwrqwrqwr'  # Racoon Stealer\n            - 'rc2.0/client'  # Racoon Stealer\n            - 'TakeMyPainBack'  # Racoon Stealer\n            - 'xxx' # Racoon Stealer\n            - '20112211' # Racoon Stealer\n            - '23591' # Racoon Stealer\n            - '901785252112' # Racoon Stealer\n            - '1235125521512' # Racoon Stealer\n            - '125122112551' # Racoon Stealer\n            - 'B1D3N_RIM_MY_ASS' # Racoon Stealer\n            - 'AYAYAYAY1337' # Racoon Stealer\n            - 'iMightJustPayMySelfForAFeature' # Racoon Stealer\n            - 'ForAFeature' # Racoon Stealer\n            - 'Ares_ldr_v_*' # AresLoader\n            # - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106' # seen used by AresLoader\n            - 'Microsoft Internet Explorer' # https://github.com/silence-is-best/c2db\n            - 'CLCTR' # https://github.com/silence-is-best/c2db\n            - 'uploader' # https://github.com/silence-is-best/c2db\n            - 'agent' # https://github.com/silence-is-best/c2db\n            - 'License' # https://github.com/silence-is-best/c2db\n            - 'vb wininet' # https://github.com/silence-is-best/c2db\n            - 'Client' # https://github.com/silence-is-best/c2db\n            - 'Lilith-Bot/3.0' # Lilith Stealer - https://twitter.com/suyog41/status/1558051450797690880\n            - 'svc/1.0' # SVC Loader - https://twitter.com/suyog41/status/1558051450797690880\n            - 'WSHRAT' # WSHRAT - https://twitter.com/suyog41/status/1558051450797690880\n            - 'ZeroStresser Botnet/1.5' # Zerobot - https://twitter.com/suyog41/status/1558051450797690880\n            - 'OK' #Nymaim - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1sqlite' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious user agent strings used by malware in proxy logs",
      "answer": "In order to detect suspicious user agent strings used by malware in proxy logs, you should: monitor proxy log sources for specific user agent strings that are commonly associated with various types of remote access tools (RATs), malware, and other potentially harmful software. These user agent strings include, but are not limited to, particular versions and formats masquerading as legitimate browsers, such as Internet Explorer, Mozilla Firefox, Chrome, and Safari, each of which might be an indicator of malicious activity. Certain strings are explicitly linked to known malware families like DragonOK, PlugX, HTTPBrowser RAT, and others including Emotet and Lockbit strains, as well as tools used for web shell interactions and other cyber threat activities. When these user agent strings are identified within the proxy logs, it indicates a high possibility of compromise or malicious attempt to communicate, signaling for further investigation. Detection involves capturing logs that contain these agent strings, alongside the requested URI and client IP address which can be critical for understanding the scope of a potential security breach or ongoing attack. Despite the specificity of the selection criteria, it's essential to remain aware of the small chance of false positives, where benign activities might inadvertently match the detection patterns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PsExec service installation and execution events (service and Sysmon).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PsExec service installation and execution events (service and Sysmon), you should monitor Windows System logs for specific activity related to the Service Control Manager. Specifically, look for events with the Provider_Name 'Service Control Manager' and EventIDs 7045 and 7036. These event IDs are crucial as they signal the creation of a service and changes in the service's status respectively. Additionally, pay close attention to service names and image paths that contain the following identifiers: 'WCESERVICE', 'WCE SERVICE', 'winexesvc', 'DumpSvc', 'pwdump', 'gsecdump', and 'cachedump'. These names are associated with tools and methods commonly used in attacks for dumping credentials. Moreover, any service image path containing the word 'bypass' should also raise suspicions as it might indicate attempts to circumvent security controls, based on known techniques. This monitoring activity aligns with the identification of tactics and techniques such as Execution through API, Service Execution, and Credential Dumping which are indicative of adversarial behaviors aiming to gain further foothold within the environment. Be aware that due to the nature of these identifiers and actions, false positives may occur, and should be considered when analyzing alerts with a high level of scrutiny.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    service:\n        Provider_Name: 'Service Control Manager'\n        EventID:\n            - 7045\n            - 7036\n    selection:\n        - ServiceName|contains:\n            - 'WCESERVICE'\n            - 'WCE SERVICE'\n            - 'winexesvc'\n            - 'DumpSvc'\n            - 'pwdump'\n            - 'gsecdump'\n            - 'cachedump'\n        - ImagePath|contains: 'bypass' # https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82#file-scmuacbypass-cpp-L159\n    condition: service and selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    service:\n        Provider_Name: 'Service Control Manager'\n        EventID:\n            - 7045\n            - 7036\n    selection:\n        - ServiceName|contains:\n            - 'WCESERVICE'\n            - 'WCE SERVICE'\n            - 'winexesvc'\n            - 'DumpSvc'\n            - 'pwdump'\n            - 'gsecdump'\n            - 'cachedump'\n        - ImagePath|contains: 'bypass' # https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82#file-scmuacbypass-cpp-L159\n    condition: service and selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "PsExec service installation and execution events (service and Sysmon)",
      "answer": "In order to detect PsExec service installation and execution events (service and Sysmon), you should monitor Windows System logs for specific activity related to the Service Control Manager. Specifically, look for events with the Provider_Name 'Service Control Manager' and EventIDs 7045 and 7036. These event IDs are crucial as they signal the creation of a service and changes in the service's status respectively. Additionally, pay close attention to service names and image paths that contain the following identifiers: 'WCESERVICE', 'WCE SERVICE', 'winexesvc', 'DumpSvc', 'pwdump', 'gsecdump', and 'cachedump'. These names are associated with tools and methods commonly used in attacks for dumping credentials. Moreover, any service image path containing the word 'bypass' should also raise suspicions as it might indicate attempts to circumvent security controls, based on known techniques. This monitoring activity aligns with the identification of tactics and techniques such as Execution through API, Service Execution, and Credential Dumping which are indicative of adversarial behaviors aiming to gain further foothold within the environment. Be aware that due to the nature of these identifiers and actions, false positives may occur, and should be considered when analyzing alerts with a high level of scrutiny."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths, you should: monitor Windows file event logs for the creation of executable files that either have misleading extensions such as '.bat.exe' or '.sys.exe', which may indicate an attempt to masquerade malicious files as innocent batch or system files. Additionally, watch for executable files being created with names that mimic critical Windows directories like 'C:\\$Recycle.Bin.exe', 'C:\\Documents and Settings.exe', 'C:\\MSOCache.exe', 'C:\\Recovery.exe', and 'C:\\PerfLogs.exe'. These names exploit unquoted service paths to potentially execute malicious code. Alerting on these conditions should be treated with high priority due to the likelihood of representing a malicious attempt to compromise the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_double:\n        TargetFilename|endswith:\n            - '.bat.exe'\n            - '.sys.exe'\n    selection_folder:\n        TargetFilename:\n            - 'C:\\$Recycle.Bin.exe'\n            - 'C:\\Documents and Settings.exe'\n            - 'C:\\MSOCache.exe'\n            - 'C:\\Recovery.exe'\n            - 'C:\\PerfLogs.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_double:\n        TargetFilename|endswith:\n            - '.bat.exe'\n            - '.sys.exe'\n    selection_folder:\n        TargetFilename:\n            - 'C:\\$Recycle.Bin.exe'\n            - 'C:\\Documents and Settings.exe'\n            - 'C:\\MSOCache.exe'\n            - 'C:\\Recovery.exe'\n            - 'C:\\PerfLogs.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths.",
      "answer": "In order to detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths, you should: monitor Windows file event logs for the creation of executable files that either have misleading extensions such as '.bat.exe' or '.sys.exe', which may indicate an attempt to masquerade malicious files as innocent batch or system files. Additionally, watch for executable files being created with names that mimic critical Windows directories like 'C:\\$Recycle.Bin.exe', 'C:\\Documents and Settings.exe', 'C:\\MSOCache.exe', 'C:\\Recovery.exe', and 'C:\\PerfLogs.exe'. These names exploit unquoted service paths to potentially execute malicious code. Alerting on these conditions should be treated with high priority due to the likelihood of representing a malicious attempt to compromise the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting default \"UserName\" used by the DiagTrackEoP POC.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the default \"UserName\" used by the DiagTrackEoP POC, you should monitor the security logs on Windows systems for specific activity patterns that match an attacker exploiting this point of compromise. Focus on scrutinizing events with the EventID 4624, which represents successful account logon events. Specifically, look for instances where the LogonType is set to 9, indicating a NewCredentials logon type, such as those used by runas with /netonly or by a Scheduled Task. An especially critical flag for this detection is the use of the TargetOutboundUserName set to 'thisisnotvaliduser'. This username is a distinct indicator of suspicious activity related to the DiagTrackEoP proof of concept (POC) attack. Given the nature of this detection, false positives are considered unlikely, and such events should be treated with a high level of scrutiny as they can indicate critical security breaches aligned with tactics and techniques observed in sophisticated cyber attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 9\n        TargetOutboundUserName: 'thisisnotvaliduser'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 9\n        TargetOutboundUserName: 'thisisnotvaliduser'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "default \"UserName\" used by the DiagTrackEoP POC",
      "answer": "In order to detect the default \"UserName\" used by the DiagTrackEoP POC, you should monitor the security logs on Windows systems for specific activity patterns that match an attacker exploiting this point of compromise. Focus on scrutinizing events with the EventID 4624, which represents successful account logon events. Specifically, look for instances where the LogonType is set to 9, indicating a NewCredentials logon type, such as those used by runas with /netonly or by a Scheduled Task. An especially critical flag for this detection is the use of the TargetOutboundUserName set to 'thisisnotvaliduser'. This username is a distinct indicator of suspicious activity related to the DiagTrackEoP proof of concept (POC) attack. Given the nature of this detection, false positives are considered unlikely, and such events should be treated with a high level of scrutiny as they can indicate critical security breaches aligned with tactics and techniques observed in sophisticated cyber attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious log entries in Linux log files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious log entries in Linux log files, you should: monitor Linux log sources for specific keywords that may indicate malicious activity or system misconfiguration. These suspicious keywords include \"entered promiscuous mode,\" which could suggest network eavesdropping or sniffing activities. Also, be on the lookout for log entries such as \"Deactivating service,\" which may indicate unauthorized attempts to disable critical services, potentially as a part of a larger attack strategy. Furthermore, the appearance of \"Oversized packet received from\" might signal an attempt at exploiting buffer overflow vulnerabilities, and the message \"imuxsock begins to drop messages\" could suggest a system is under stress or attack attempt, overwhelming the log message buffer. All these entries in the logs should be treated with caution, keeping in mind there is a potential for false positives. However, given the medium level of concern associated with these indicators, they warrant further investigation to ensure the system's integrity and security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        # Generic suspicious log lines\n        - entered promiscuous mode\n        # OSSEC https://github.com/ossec/ossec-hids/blob/master/etc/rules/syslog_rules.xml\n        - Deactivating service\n        - Oversized packet received from\n        - imuxsock begins to drop messages\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        # Generic suspicious log lines\n        - entered promiscuous mode\n        # OSSEC https://github.com/ossec/ossec-hids/blob/master/etc/rules/syslog_rules.xml\n        - Deactivating service\n        - Oversized packet received from\n        - imuxsock begins to drop messages\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious log entries in Linux log files",
      "answer": "In order to detect suspicious log entries in Linux log files, you should: monitor Linux log sources for specific keywords that may indicate malicious activity or system misconfiguration. These suspicious keywords include \"entered promiscuous mode,\" which could suggest network eavesdropping or sniffing activities. Also, be on the lookout for log entries such as \"Deactivating service,\" which may indicate unauthorized attempts to disable critical services, potentially as a part of a larger attack strategy. Furthermore, the appearance of \"Oversized packet received from\" might signal an attempt at exploiting buffer overflow vulnerabilities, and the message \"imuxsock begins to drop messages\" could suggest a system is under stress or attack attempt, overwhelming the log message buffer. All these entries in the logs should be treated with caution, keeping in mind there is a potential for false positives. However, given the medium level of concern associated with these indicators, they warrant further investigation to ensure the system's integrity and security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key, you should monitor Windows registry addition events specifically looking for the creation of a key. Focus on registry add events where the EventType is \"CreateKey\" and the TargetObject contains specific substrings related to Sysinternals tools, including 'Active Directory Explorer', 'Handle', 'LiveKd', 'Process Explorer', 'ProcDump', 'PsExec', 'PsLoglist', 'PsPasswd', 'SDelete', and 'Sysinternals'. Additionally, it's important to check if the TargetObject ends with '\\EulaAccepted', indicating the acceptance of a User Agreement typically associated with first-time running these tools. However, be aware that there may be legitimate uses of these tools within your environment, and filtering may be required to distinguish between benign and malicious activity. This monitoring strategy aims to identify potential security incidents involving the misuse of system administration tools, which could be indicative of Discovery, Lateral Movement, or Persistence techniques, without explicitly mentioning these methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains:\n            - '\\Active Directory Explorer'\n            - '\\Handle'\n            - '\\LiveKd'\n            - '\\Process Explorer'\n            - '\\ProcDump'\n            - '\\PsExec'\n            - '\\PsLoglist'\n            - '\\PsPasswd'\n            - '\\SDelete'\n            - '\\Sysinternals' # Global level https://twitter.com/leonzandman/status/1561736801953382400\n        TargetObject|endswith: '\\EulaAccepted'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SysInternals tools. Filter the legitimate paths used in your environnement\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains:\n            - '\\Active Directory Explorer'\n            - '\\Handle'\n            - '\\LiveKd'\n            - '\\Process Explorer'\n            - '\\ProcDump'\n            - '\\PsExec'\n            - '\\PsLoglist'\n            - '\\PsPasswd'\n            - '\\SDelete'\n            - '\\Sysinternals' # Global level https://twitter.com/leonzandman/status/1561736801953382400\n        TargetObject|endswith: '\\EulaAccepted'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SysInternals tools. Filter the legitimate paths used in your environnement\nlevel: medium\n",
      "question": "execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key.",
      "answer": "In order to detect the execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key, you should monitor Windows registry addition events specifically looking for the creation of a key. Focus on registry add events where the EventType is \"CreateKey\" and the TargetObject contains specific substrings related to Sysinternals tools, including 'Active Directory Explorer', 'Handle', 'LiveKd', 'Process Explorer', 'ProcDump', 'PsExec', 'PsLoglist', 'PsPasswd', 'SDelete', and 'Sysinternals'. Additionally, it's important to check if the TargetObject ends with '\\EulaAccepted', indicating the acceptance of a User Agreement typically associated with first-time running these tools. However, be aware that there may be legitimate uses of these tools within your environment, and filtering may be required to distinguish between benign and malicious activity. This monitoring strategy aims to identify potential security incidents involving the misuse of system administration tools, which could be indicative of Discovery, Lateral Movement, or Persistence techniques, without explicitly mentioning these methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7, you should: focus on monitoring Windows PowerShell script activities, specifically through Script Block Logging. This requires Script Block Logging to be enabled to capture the necessary data. Look for any instances where the script text includes the use of functions or files indicative of ADRecon tool usage, such as 'Function Get-ADRExcelComOb', 'Get-ADRGPO', 'Get-ADRDomainController', or references to 'ADRecon-Report.xlsx'. These elements are key indicators of the script in question being executed for Active Directory reconnaissance purposes. It's important to note that such detection holds a high level of importance due to the nature of the activities associated with the ADRecon.ps1 script and the capabilities of the actors, like FIN7, leveraging such tools.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Function Get-ADRExcelComOb'\n            - 'Get-ADRGPO'\n            - 'Get-ADRDomainController'\n            - 'ADRecon-Report.xlsx' #Default\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Function Get-ADRExcelComOb'\n            - 'Get-ADRGPO'\n            - 'Get-ADRDomainController'\n            - 'ADRecon-Report.xlsx' #Default\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7",
      "answer": "In order to detect execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7, you should: focus on monitoring Windows PowerShell script activities, specifically through Script Block Logging. This requires Script Block Logging to be enabled to capture the necessary data. Look for any instances where the script text includes the use of functions or files indicative of ADRecon tool usage, such as 'Function Get-ADRExcelComOb', 'Get-ADRGPO', 'Get-ADRDomainController', or references to 'ADRecon-Report.xlsx'. These elements are key indicators of the script in question being executed for Active Directory reconnaissance purposes. It's important to note that such detection holds a high level of importance due to the nature of the activities associated with the ADRecon.ps1 script and the capabilities of the actors, like FIN7, leveraging such tools."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance, you should: Monitor the creation of Linux processes for instances where command-line utilities such as 'cat', 'head', 'tail', or 'more' are used. Specifically, pay attention to when these utilities are employed to access or display the contents of shell history files like '/.bash_history', '/.zsh_history', or any files that end with '_history', '.history', or 'zhistory'. This activity can indicate an attempt to understand the victim's command-line usage, possibly for further malicious endeavours. It is crucial, however, to consider that such actions might also be a part of legitimate administration activities, which are recognized as potential false positives at a medium threat level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            - '/cat'\n            - '/head'\n            - '/tail'\n            - '/more'\n    selection_history:\n        - CommandLine|contains:\n            - '/.bash_history'\n            - '/.zsh_history'\n        - CommandLine|endswith:\n            - '_history'\n            - '.history'\n            - 'zhistory'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            - '/cat'\n            - '/head'\n            - '/tail'\n            - '/more'\n    selection_history:\n        - CommandLine|contains:\n            - '/.bash_history'\n            - '/.zsh_history'\n        - CommandLine|endswith:\n            - '_history'\n            - '.history'\n            - 'zhistory'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance",
      "answer": "In order to detect events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance, you should: Monitor the creation of Linux processes for instances where command-line utilities such as 'cat', 'head', 'tail', or 'more' are used. Specifically, pay attention to when these utilities are employed to access or display the contents of shell history files like '/.bash_history', '/.zsh_history', or any files that end with '_history', '.history', or 'zhistory'. This activity can indicate an attempt to understand the victim's command-line usage, possibly for further malicious endeavours. It is crucial, however, to consider that such actions might also be a part of legitimate administration activities, which are recognized as potential false positives at a medium threat level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user manipulates with Firmward Password on MacOS. NOTE - this command has been disabled on silicon-based apple computers..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user manipulates with Firmware Password on MacOS, you should: Monitor process creation logs on MacOS devices, especially focusing on activities involving the '/usr/sbin/firmwarepasswd' executable. Look for command line arguments that include 'setpasswd', 'full', 'delete', or 'check', which are indicative of operations that manipulate the firmware password. These actions might signify unauthorized attempts to change or query the firmware settings. However, be aware that activities related to these detections could sometimes originate from legitimate administrative tasks. The severity level of this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection1:\n        Image: '/usr/sbin/firmwarepasswd'\n        CommandLine|contains:\n            - 'setpasswd'\n            - 'full'\n            - 'delete'\n            - 'check'\n    condition: selection1\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection1:\n        Image: '/usr/sbin/firmwarepasswd'\n        CommandLine|contains:\n            - 'setpasswd'\n            - 'full'\n            - 'delete'\n            - 'check'\n    condition: selection1\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "user manipulates with Firmward Password on MacOS. NOTE - this command has been disabled on silicon-based apple computers.",
      "answer": "In order to detect when a user manipulates with Firmware Password on MacOS, you should: Monitor process creation logs on MacOS devices, especially focusing on activities involving the '/usr/sbin/firmwarepasswd' executable. Look for command line arguments that include 'setpasswd', 'full', 'delete', or 'check', which are indicative of operations that manipulate the firmware password. These actions might signify unauthorized attempts to change or query the firmware settings. However, be aware that activities related to these detections could sometimes originate from legitimate administrative tasks. The severity level of this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of known vulnerable drivers by hash value.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of known vulnerable drivers by hash value, you should monitor Windows systems for events related to driver loading, specifically focusing on the hash values of the drivers being loaded. An alert should be generated if any of the following specific MD5 or SHA1 hash values are observed, as these hashes have been identified as corresponding to vulnerable drivers:\n\n- MD5 Hashes:  \n  1b5c3c458e31bede55145d0644e88d75, 6f5d54ab483659ac78672440422ae3f1, and so forth, up to the provided list which includes 98763a3dee3cf03de334f00f95fc071a, e79c91c27df3eaf82fb7bd1280172517, and all others listed in the MD5 section.\n\n- SHA1 Hashes:  \n  f0c463d29a5914b01e4607889094f1b7d95e7aaf, a804ebec7e341b4d98d9e94f6e4860a55ea1638d, and so forth, through the remaining SHA1 hashes including 8fb149fc476cf5bf18dc575334edad7caf210996, e35a2b009d54e1a0b231d8a276251f64231b66a3, and any others provided in the SHA1 hashes list.\n\nKeeping track of the loaded drivers by their hash values helps in identifying potentially malicious activity related to known vulnerabilities. This detection mechanism is crucial for preventing security breaches that exploit these vulnerabilities. Monitoring should be performed specifically on the driver load category using tools like Sysmon, which can track and log the necessary information for detecting these vulnerabilities based on driver hash values.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'MD5=1b5c3c458e31bede55145d0644e88d75'\n            - 'MD5=6f5d54ab483659ac78672440422ae3f1'\n            - 'MD5=ee6b1a79cb6641aa44c762ee90786fe0'\n            - 'MD5=c02f70960fa934b8defa16a03d7f6556'\n            - 'MD5=839cbbc86453960e9eb6db814b776a40'\n            - 'MD5=acac842a46f3501fe407b1db1b247a0b'\n            - 'MD5=95e4c7b0384da89dce8ea6f31c3613d9'\n            - 'MD5=e700a820f117f65e813b216fccbf78c9'\n            - 'MD5=96b463b6fa426ae42c414177af550ba2'\n            - 'MD5=27bcbeec8a466178a6057b64bef66512'\n            - 'MD5=70dcd07d38017b43f710061f37cb4a91'\n            - 'MD5=db72def618cbc3c5f9aa82f091b54250'\n            - 'MD5=83601bbe5563d92c1fdb4e960d84dc77'\n            - 'MD5=5970e8de1b337ca665114511b9d10806'\n            - 'MD5=49fe3d1f3d5c2e50a0df0f6e8436d778'\n            - 'MD5=1493d342e7a36553c56b2adea150949e'\n            - 'MD5=4f191abc652d8f7442ca2636725e1ed6'\n            - 'MD5=0ae30291c6cbfa7be39320badd6e8de0'\n            - 'MD5=d104621c93213942b7b43d65b5d8d33e'\n            - 'MD5=b89b097b8b8aecb8341d05136f334ebb'\n            - 'MD5=14580bd59c55185115fd3abe73b016a2'\n            - 'MD5=992ded5b623be3c228f32edb4ca3f2d2'\n            - 'MD5=a26e600652c33dd054731b4693bf5b01'\n            - 'MD5=1f950cfd5ed8dd9de3de004f5416fe20'\n            - 'MD5=491aec2249ad8e2020f9f9b559ab68a8'\n            - 'MD5=e4266262a77fffdea2584283f6c4f51d'\n            - 'MD5=bd25be845c151370ff177509d95d5add'\n            - 'MD5=9638f265b1ddd5da6ecdf5c0619dcbe6'\n            - 'MD5=4e90cd77509738d30d3181a4d0880bfa'\n            - 'MD5=0a6a1c9a7f80a2a5dcced5c4c0473765'\n            - 'MD5=9aa7ed7809eec0d8bc6c545a1d18107a'\n            - 'MD5=aa1ed3917928f04d97d8a217fe9b5cb1'\n            - 'MD5=42f7cc4be348c3efd98b0f1233cf2d69'\n            - 'MD5=4cc3ddd5ae268d9a154a426af2c23ef9'\n            - 'MD5=2fed983ec44d1e7cffb0d516407746f2'\n            - 'MD5=f7cbbb5eb263ec9a35a1042f52e82ca4'\n            - 'MD5=ed6348707f177629739df73b97ba1b6e'\n            - 'MD5=40bc58b7615d00eb55ad9ba700c340c1'\n            - 'MD5=c3fea895fe95ea7a57d9f4d7abed5e71'\n            - 'MD5=2128e6c044ee86f822d952a261af0b48'\n            - 'MD5=3dbf69f935ea48571ea6b0f5a2878896'\n            - 'MD5=c6f8983dd3d75640c072a8459b8fa55a'\n            - 'MD5=6fcf56f6ca3210ec397e55f727353c4a'\n            - 'MD5=79f7e6f98a5d3ab6601622be4471027f'\n            - 'MD5=bae1f127c4ff21d8fe45e2bbfc59c180'\n            - 'MD5=c533d6d64b474ffc3169a0e0fc0a701a'\n            - 'MD5=3f39f013168428c8e505a7b9e6cba8a2'\n            - 'MD5=748cf64b95ca83abc35762ad2c25458f'\n            - 'MD5=bce7f34912ff59a3926216b206deb09f'\n            - 'MD5=2d8e4f38b36c334d0a32a7324832501d'\n            - 'MD5=47e6ac52431ca47da17248d80bf71389'\n            - 'MD5=3651a6990fe38711ebb285143f867a43'\n            - 'MD5=dc943bf367ae77016ae399df8e71d38a'\n            - 'MD5=02198692732722681f246c1b33f7a9d9'\n            - 'MD5=ddc2ffe0ab3fcd48db898ab13c38d88d'\n            - 'MD5=0ec361f2fba49c73260af351c39ff9cb'\n            - 'MD5=c1fce7aac4e9dd7a730997e2979fa1e2'\n            - 'MD5=49938383844ceec33dba794fb751c9a5'\n            - 'MD5=34069a15ae3aa0e879cd0d81708e4bcc'\n            - 'MD5=1c294146fc77565030603878fd0106f9'\n            - 'MD5=fd81af62964f5dd5eb4a828543a33dcf'\n            - 'MD5=bd5b0514f3b40f139d8079138d01b5f6'\n            - 'MD5=fa173832dca1b1faeba095e5c82a1559'\n            - 'MD5=5cc5c26fc99175997d84fe95c61ab2c2'\n            - 'MD5=1ed043249c21ab201edccb37f1d40af9'\n            - 'MD5=361a598d8bb92c13b18abb7cac850b01'\n            - 'MD5=9b359b722ac80c4e0a5235264e1e0156'\n            - 'MD5=296bde4d0ed32c6069eb90c502187d0d'\n            - 'MD5=d3e40644a91327da2b1a7241606fe559'\n            - 'MD5=12cecc3c14160f32b21279c1a36b8338'\n            - 'MD5=dd39a86852b498b891672ffbcd071c03'\n            - 'MD5=b2a9ac0600b12ec9819e049d7a6a0b75'\n            - 'MD5=444f538daa9f7b340cfd43974ed43690'\n            - 'MD5=7b43dfd84de5e81162ebcfafb764b769'\n            - 'MD5=13dda15ef67eb265869fc371c72d6ef0'\n            - 'MD5=300c5b1795c9b6cc1bc4d7d55c7bbe85'\n            - 'MD5=1392b92179b07b672720763d9b1028a5'\n            - 'MD5=2e1f8a2a80221deb93496a861693c565'\n            - 'MD5=8065a7659562005127673ac52898675f'\n            - 'MD5=b5ada7fd226d20ec6634fc24768f9e22'\n            - 'MD5=84fb76ee319073e77fb364bbbbff5461'\n            - 'MD5=daf800da15b33bf1a84ee7afc59f0656'\n            - 'MD5=f7393fb917aed182e4cbef25ce8af950'\n            - 'MD5=120b5bbb9d2eb35ff4f62d79507ea63a'\n            - 'MD5=73c98438ac64a68e88b7b0afd11ba140'\n            - 'MD5=51207adb8dab983332d6b22c29fe8129'\n            - 'MD5=4a23e0f2c6f926a41b28d574cbc6ac30'\n            - 'MD5=20125794b807116617d43f02b616e092'\n            - 'MD5=e8ebba56ea799e1e62748c59e1a4c586'\n            - 'MD5=8abbb12e61045984eda19e2dc77b235e'\n            - 'MD5=f66b96aa7ae430b56289409241645099'\n            - 'MD5=97e3a44ec4ae58c8cc38eefc613e950e'\n            - 'MD5=ff7b31fa6e9ab923bce8af31d1be5bb2'\n            - 'MD5=12908c285b9d68ee1f39186110df0f1e'\n            - 'MD5=6126065af2fc2639473d12ee3c0c198e'\n            - 'MD5=356bda2bf0f6899a2c08b2da3ec69f13'\n            - 'MD5=fd7de498a72b2daf89f321d23948c3c4'\n            - 'MD5=338a98e1c27bc76f09331fcd7ae413a5'\n            - 'MD5=c9a293762319d73c8ee84bcaaf81b7b3'\n            - 'MD5=e9e786bdba458b8b4f9e93d034f73d00'\n            - 'MD5=a17c58c0582ee560c72f60764ed63224'\n            - 'MD5=21e13f2cb269defeae5e1d09887d47bb'\n            - 'MD5=a57b47489febc552515778dd0fd1e51c'\n            - 'MD5=d6e9f6c67d9b3d790d592557a7d57c3c'\n            - 'MD5=76bb1a4332666222a8e3e1339e267179'\n            - 'MD5=1cd158a64f3d886357535382a6fdad75'\n            - 'MD5=d9e7e5bcc5b01915dbcef7762a7fc329'\n            - 'MD5=d253c19194a18030296ae62a10821640'\n            - 'MD5=b12d1630fd50b2a21fd91e45d522ba3a'\n            - 'MD5=50b39072d0ee9af5ef4824eca34be6e3'\n            - 'MD5=778b7feea3c750d44745d3bf294bd4ce'\n            - 'MD5=0761c357aed5f591142edaefdf0c89c8'\n            - 'MD5=23cf3da010497eb2bf39a5c5a57e437c'\n            - 'MD5=c49a1956a6a25ffc25ad97d6762b0989'\n            - 'MD5=f406c5536bcf9bacbeb7ce8a3c383bfa'\n            - 'MD5=f2f728d2f69765f5dfda913d407783d2'\n            - 'MD5=4b817d0e7714b9d43db43ae4a22a161e'\n            - 'MD5=715f8efab1d1c660e4188055c4b28eed'\n            - 'MD5=a01c412699b6f21645b2885c2bae4454'\n            - 'MD5=010c0e5ac584e3ab97a2daf84cf436f5'\n            - 'MD5=d5db81974ffda566fa821400419f59be'\n            - 'MD5=3247014ba35d406475311a2eab0c4657'\n            - 'MD5=4d487f77be4471900d6ccbc47242cc25'\n            - 'MD5=1f2888e57fdd6aee466962c25ba7d62d'\n            - 'MD5=507a649eb585d8d0447eab0532ef0c73'\n            - 'MD5=4ad8fd9e83d7200bd7f8d0d4a9abfb11'\n            - 'MD5=cd9f0fcecf1664facb3671c0130dc8bb'\n            - 'MD5=b10b210c5944965d0dc85e70a0b19a42'\n            - 'MD5=ae5eb2759305402821aeddc52ba9a6d6'\n            - 'MD5=f5051c756035ef5de9c4c48bacb0612b'\n            - 'MD5=1898ceda3247213c084f43637ef163b3'\n            - 'MD5=37086ae5244442ba552803984a11d6cb'\n            - 'MD5=825703c494e0d270f797f1ecf070f698'\n            - 'MD5=909f3fc221acbe999483c87d9ead024a'\n            - 'MD5=75d6c3469347de1cdfa3b1b9f1544208'\n            - 'MD5=9ab9f3b75a2eb87fafb1b7361be9dfb3'\n            - 'MD5=5f9785e7535f8f602cb294a54962c9e7'\n            - 'MD5=7d46d0ddaf8c7e1776a70c220bf47524'\n            - 'MD5=f9844524fb0009e5b784c21c7bad4220'\n            - 'MD5=828bb9cb1dd449cd65a29b18ec46055f'\n            - 'MD5=4d17b32be70ef39eae5d5edeb5e89877'\n            - 'MD5=2391fb461b061d0e5fccb050d4af7941'\n            - 'MD5=6d4159694e1754f262e326b52a3b305a'\n            - 'MD5=a60c9173563b940203cf4ad38ccf2082'\n            - 'MD5=63e333d64a8716e1ae59f914cb686ae8'\n            - 'MD5=a9f220b1507a3c9a327a99995ff99c82'\n            - 'MD5=c5f5d109f11aadebae94c77b27cb026f'\n            - 'MD5=5bab40019419a2713298a5c9173e5d30'\n            - 'MD5=c996d7971c49252c582171d9380360f2'\n            - 'MD5=98763a3dee3cf03de334f00f95fc071a'\n            - 'MD5=e79c91c27df3eaf82fb7bd1280172517'\n            - 'MD5=a42249a046182aaaf3a7a7db98bfa69d'\n            - 'MD5=803a371a78d528a44ef8777f67443b16'\n            - 'MD5=9007c94c9d91ccff8d7f5d4cdddcc403'\n            - 'MD5=11fb599312cb1cf43ca5e879ed6fb71e'\n            - 'MD5=7f9309f5e4defec132b622fadbcad511'\n            - 'MD5=04a88f5974caa621cee18f34300fc08a'\n            - 'MD5=8636fe3724f2bcba9399daffd6ef3c7e'\n            - 'MD5=9dfd73dadb2f1c7e9c9d2542981aaa63'\n            - 'MD5=490b1f404c4f31f4538b36736c990136'\n            - 'MD5=c1d063c9422a19944cdaa6714623f2ec'\n            - 'MD5=dacb62578b3ea191ea37486d15f4f83c'\n            - 'MD5=2da209dde8188076a9579bd256dc90d0'\n            - 'MD5=0ba6afe0ea182236f98365bd977adfdf'\n            - 'MD5=4c016fd76ed5c05e84ca8cab77993961'\n            - 'MD5=ad22a7b010de6f9c6f39c350a471a440'\n            - 'MD5=79483cb29a0c428e1362ec8642109eee'\n            - 'MD5=a179c4093d05a3e1ee73f6ff07f994aa'\n            - 'MD5=ccf523b951afaa0147f22e2a7aae4976'\n            - 'MD5=736c4b85ce346ddf3b49b1e3abb4e72a'\n            - 'MD5=b0baac4d6cbac384a633c71858b35a2e'\n            - 'MD5=798de15f187c1f013095bbbeb6fb6197'\n            - 'MD5=a86150f2e29b35369afa2cafd7aa9764'\n            - 'MD5=b941c8364308990ee4cc6eadf7214e0f'\n            - 'MD5=dd04cd3de0c19bede84e9c95a86b3ca8'\n            - 'MD5=6909b5e86e00b4033fedfca1775b0e33'\n            - 'MD5=9b91a44a488e4d539f2e55476b216024'\n            - 'MD5=8b287636041792f640f92e77e560725e'\n            - 'MD5=07f83829e7429e60298440cd1e601a6a'\n            - 'MD5=0395b4e0eb21693590ad1cfdf7044b8b'\n            - 'MD5=4b058945c9f2b8d8ebc485add1101ba5'\n            - 'MD5=0067c788e1cb174f008c325ebde56c22'\n            - 'MD5=c2c1b8c00b99e913d992a870ed478a24'\n            - 'MD5=84ba7af6ada1b3ea5efb9871a0613fc6'\n            - 'MD5=dbc415304403be25ac83047c170b0ec2'\n            - 'MD5=31469f1313871690e8dc2e8ee4799b22'\n            - 'MD5=2d465b4487dc81effaa84f122b71c24f'\n            - 'MD5=64efbffaa153b0d53dc1bccda4279299'\n            - 'MD5=b164daf106566f444dfb280d743bc2f7'\n            - 'MD5=7c72a7e1d42b0790773efd8700e24952'\n            - 'MD5=56a515173b211832e20fbc64e5a0447c'\n            - 'MD5=c2eb4539a4f6ab6edd01bdc191619975'\n            - 'MD5=d1bac75205c389d6d5d6418f0457c29b'\n            - 'MD5=68dde686d6999ad2e5d182b20403240b'\n            - 'MD5=a785b3bc4309d2eb111911c1b55e793f'\n            - 'MD5=6ab7b8ef0c44e7d2d5909fdb58d37fa5'\n            - 'MD5=d9ce18960c23f38706ae9c6584d9ac90'\n            - 'MD5=ab53d07f18a9697139ddc825b466f696'\n            - 'MD5=ba5f0f6347780c2ed911bbf888e75bef'\n            - 'MD5=13ee349c15ee5d6cf640b3d0111ffc0e'\n            - 'MD5=9a237fa07ce3ed06ea924a9bed4a6b99'\n            - 'MD5=fa222bed731713904320723b9c085b11'\n            - 'MD5=0898af0888d8f7a9544ef56e5e16354e'\n            - 'MD5=e076dadf37dd43a6b36aeed957abee9e'\n            - 'MD5=4f27c09cc8680e06b04d6a9c34ca1e08'\n            - 'MD5=1b32c54b95121ab1683c7b83b2db4b96'\n            - 'MD5=715572dfe6fb10b16f980bfa242f3fa5'\n            - 'MD5=4a06bcd96ef0b90a1753a805b4235f28'\n            - 'MD5=f242cffd9926c0ccf94af3bf16b6e527'\n            - 'MD5=7ed6030f14e66e743241f2c1fa783e69'\n            - 'MD5=0d6fef14f8e1ce5753424bd22c46b1ce'\n            - 'MD5=a4fda97f452b8f8705695a729f5969f7'\n            - 'MD5=62c18d61ed324088f963510bae43b831'\n            - 'MD5=d5a642329cce4df94b8dc1ba9660ae34'\n            - 'MD5=a641e3dccba765a10718c9cb0da7879e'\n            - 'MD5=ed07f1a8038596574184e09211dfc30f'\n            - 'MD5=3473faea65fba5d4fbe54c0898a3c044'\n            - 'MD5=708ac9f7b12b6ca4553fd8d0c7299296'\n            - 'MD5=bbe4f5f8b0c0f32f384a83ae31f49a00'\n            - 'MD5=257483d5d8b268d0d679956c7acdf02d'\n            - 'MD5=312e31851e0fc2072dbf9a128557d6ef'\n            - 'MD5=14eead4d42728e9340ec8399a225c124'\n            - 'MD5=de1cc5c266140bff9d964fab87a29421'\n            - 'MD5=9a9dbf5107848c254381be67a4c1b1dd'\n            - 'MD5=1dc94a6a82697c62a04e461d7a94d0b0'\n            - 'MD5=2850608430dd089f24386f3336c84729'\n            - 'MD5=6d131a7462e568213b44ef69156f10a5'\n            - 'MD5=b8b6686324f7aa77f570bc019ec214e6'\n            - 'MD5=22823fed979903f8dfe3b5d28537eb47'\n            - 'MD5=c1d3a6bb423739a5e781f7eee04c9cfd'\n            - 'MD5=0c0195c48b6b8582fa6f6373032118da'\n            - 'MD5=5228b7a738dc90a06ae4f4a7412cb1e9'\n            - 'MD5=62f02339fe267dc7438f603bfb5431a1'\n            - 'MD5=22949977ce5cd96ba674b403a9c81285'\n            - 'MD5=5ca1922ed5ee2b533b5f3dd9be20fd9a'\n            - 'MD5=1ed08a6264c5c92099d6d1dae5e8f530'\n            - 'MD5=b0770094c3c64250167b55e4db850c04'\n            - 'MD5=a6e9d6505f6d2326a8a9214667c61c67'\n            - 'MD5=8407ddfab85ae664e507c30314090385'\n            - 'MD5=9321a61a25c7961d9f36852ecaa86f55'\n            - 'MD5=a711e6ab17802fabf2e69e0cd57c54cd'\n            - 'MD5=29ccff428e5eb70ae429c3da8968e1ec'\n            - 'MD5=79df0eabbf2895e4e2dae15a4772868c'\n            - 'MD5=fb7c61ef427f9b2fdff3574ee6b1819b'\n            - 'MD5=f778489c7105a63e9e789a02412aaa5f'\n            - 'MD5=fef9dd9ea587f8886ade43c1befbdafe'\n            - 'MD5=43830326cd5fae66f5508e27cbec39a0'\n            - 'MD5=c7a57cd4bea07dadba2e2fb914379910'\n            - 'MD5=f1e054333cc40f79cfa78e5fbf3b54c2'\n            - 'MD5=dc564bac7258e16627b9de0ce39fae25'\n            - 'MD5=054299e09cea38df2b84e6b29348b418'\n            - 'MD5=97221e16e7a99a00592ca278c49ffbfc'\n            - 'MD5=8d63e1a9ff4cafee1af179c0c544365c'\n            - 'MD5=96421b56dbda73e9b965f027a3bda7ba'\n            - 'MD5=4ae55080ec8aed49343e40d08370195c'\n            - 'MD5=988dabdcf990b134b0ac1e00512c30c4'\n            - 'MD5=bbbc9a6cc488cfb0f6c6934b193891eb'\n            - 'MD5=76c643ab29d497317085e5db8c799960'\n            - 'MD5=e9a30edef1105b8a64218f892b2e56ed'\n            - 'MD5=7bd840ff7f15df79a9a71fec7db1243e'\n            - 'MD5=1cff7b947f8c3dea1d34dc791fc78cdc'\n            - 'MD5=2c54859a67306e20bfdc8887b537de72'\n            - 'MD5=a5f637d61719d37a5b4868c385e363c0'\n            - 'MD5=2509a71a02296aa65a3428ddfac22180'\n            - 'MD5=6cce5bb9c8c2a8293df2d3b1897941a2'\n            - 'MD5=7a16fca3d56c6038c692ec75b2bfee15'\n            - 'MD5=eaea9ccb40c82af8f3867cd0f4dd5e9d'\n            - 'MD5=d2588631d8aae2a3e54410eaf54f0679'\n            - 'MD5=b47dee29b5e6e1939567a926c7a3e6a4'\n            - 'MD5=fac8eb49e2fd541b81fcbdeb98a199cb'\n            - 'MD5=1a234f4643f5658bab07bfa611282267'\n            - 'MD5=0752f113d983030939b4ab98b0812cf0'\n            - 'SHA1=f0c463d29a5914b01e4607889094f1b7d95e7aaf'\n            - 'SHA1=a804ebec7e341b4d98d9e94f6e4860a55ea1638d'\n            - 'SHA1=ecb4d096a9c58643b02f328d2c7742a38e017cf0'\n            - 'SHA1=684786de4b3b3f53816eae9df5f943a22c89601f'\n            - 'SHA1=745335bcdf02fb42df7d890a24858e16094f48fd'\n            - 'SHA1=25d812a5ece19ea375178ef9d60415841087726e'\n            - 'SHA1=d417c0be261b0c6f44afdec3d5432100e420c3ed'\n            - 'SHA1=6afc6b04cf73dd461e4a4956365f25c1f1162387'\n            - 'SHA1=01a578a3a39697c4de8e3dab04dba55a4c35163e'\n            - 'SHA1=2b0bb408ff0e66bcdf6574f1ca52cbf4015b257b'\n            - 'SHA1=7e836dadc2e149a0b758c7e22c989cbfcce18684'\n            - 'SHA1=4a705af959af61bad48ef7579f839cb5ebd654d2'\n            - 'SHA1=bc2f3850c7b858340d7ed27b90e63b036881fd6c'\n            - 'SHA1=e22495d92ac3dcae5eeb1980549a9ead8155f98a'\n            - 'SHA1=c969f1f73922fd95db1992a5b552fbc488366a40'\n            - 'SHA1=4c18754dca481f107f0923fb8ef5e149d128525d'\n            - 'SHA1=2fc6845047abcf2a918fce89ab99e4955d08e72c'\n            - 'SHA1=4f7a8e26a97980544be634b26899afbefb0a833c'\n            - 'SHA1=21edff2937eb5cd6f6b0acb7ee5247681f624260'\n            - 'SHA1=89cd760e8cb19d29ee08c430fb17a5fd4455c741'\n            - 'SHA1=6c1bb3a72ebfb5359b9e22ca44d0a1ff825a68f2'\n            - 'SHA1=064de88dbbea67c149e779aac05228e5405985c7'\n            - 'SHA1=ea877092d57373cb466b44e7dbcad4ce9a547344'\n            - 'SHA1=55ab7e27412eca433d76513edc7e6e03bcdd7eda'\n            - 'SHA1=976777d39d73034df6b113dfce1aa6e1d00ffcfd'\n            - 'SHA1=1f7501e01d84a2297c85cb39880ec4e40ac3fe8a'\n            - 'SHA1=a6816949cd469b6e5c35858d19273936fab1bef6'\n            - 'SHA1=91f832f46e4c38ecc9335460d46f6f71352cffed'\n            - 'SHA1=43419df1f9a07430a18c5f3b3cc74de621be0f8e'\n            - 'SHA1=01779ee53f999464465ed690d823d160f73f10e7'\n            - 'SHA1=bfe55cacc7c56c9f7bd75bdb4b352c0b745d071b'\n            - 'SHA1=27d3ebea7655a72e6e8b95053753a25db944ec0f'\n            - 'SHA1=fcd615df88645d1f57ff5702bd6758b77efea6d0'\n            - 'SHA1=10115219e3595b93204c70eec6db3e68a93f3144'\n            - 'SHA1=33285b2e97a0aeb317166cce91f6733cf9c1ad53'\n            - 'SHA1=2c27abbbbcf10dfb75ad79557e30ace5ed314df8'\n            - 'SHA1=10e15ba8ff8ed926ddd3636cec66a0f08c9860a4'\n            - 'SHA1=291b4a88ffd2ac1d6bf812ecaedc2d934dc503cb'\n            - 'SHA1=05c0c49e8bcf11b883d41441ce87a2ee7a3aba1d'\n            - 'SHA1=8f5cd4a56e6e15935491aa40adb1ecad61eafe7c'\n            - 'SHA1=a7948a4e9a3a1a9ed0e4e41350e422464d8313cd'\n            - 'SHA1=19bd488fe54b011f387e8c5d202a70019a204adf'\n            - 'SHA1=eeff4ec4ebc12c6acd2c930dc2eaaf877cfec7ec'\n            - 'SHA1=c4d7fb9db3c3459f7e8c0e3d48c95c7c9c4cff60'\n            - 'SHA1=15d1a6a904c8409fb47a82aefa42f8c3c7d8c370'\n            - 'SHA1=d02403f85be6f243054395a873b41ef8a17ea279'\n            - 'SHA1=4243dbbf6e5719d723f24d0f862afd0fcb40bc35'\n            - 'SHA1=4789b910023a667bee70ff1f1a8f369cffb10fe8'\n            - 'SHA1=50e2bc41f0186fdce970b80e2a2cb296353af586'\n            - 'SHA1=b97a8d506be2e7eaa4385f70c009b22adbd071ba'\n            - 'SHA1=78b9481607ca6f3a80b4515c432ddfe6550b18a8'\n            - 'SHA1=e039c9dd21494dbd073b4823fc3a17fbb951ec6c'\n            - 'SHA1=806832983bb8cb1e26001e60ea3b7c3ade4d3471'\n            - 'SHA1=c1d5cf8c43e7679b782630e93f5e6420ca1749a7'\n            - 'SHA1=c9cbfdd0be7b35751a017ec59ff7237ffdc4df1f'\n            - 'SHA1=a3ed5cbfbc17b58243289f3cf575bf04be49591d'\n            - 'SHA1=7fb52290883a6b69a96d480f2867643396727e83'\n            - 'SHA1=5711c88e9e64e45b8fc4b90ab6f2dd6437dc5a8a'\n            - 'SHA1=da9cea92f996f938f699902482ac5313d5e8b28e'\n            - 'SHA1=dc7b022f8bd149efbcb2204a48dce75c72633526'\n            - 'SHA1=d979353d04bf65cc92ad3412605bc81edbb75ec2'\n            - 'SHA1=4b009e91bae8d27b160dc195f10c095f8a2441e1'\n            - 'SHA1=51b60eaa228458dee605430aae1bc26f3fc62325'\n            - 'SHA1=c6bd965300f07012d1b651a9b8776028c45b149a'\n            - 'SHA1=729a8675665c61824f22f06c7b954be4d14b52c4'\n            - 'SHA1=37364cb5f5cefd68e5eca56f95c0ab4aff43afcc'\n            - 'SHA1=e4436c8c42ba5ffabd58a3b2256f6e86ccc907ab'\n            - 'SHA1=7ba19a701c8af76988006d616a5f77484c13cb0a'\n            - 'SHA1=25bf4e30a94df9b8f8ab900d1a43fd056d285c9d'\n            - 'SHA1=d8498707f295082f6a95fd9d32c9782951f5a082'\n            - 'SHA1=5e6ddd2b39a3de0016385cbd7aa50e49451e376d'\n            - 'SHA1=943593e880b4d340f2548548e6e673ef6f61eed3'\n            - 'SHA1=2dfcb799b3c42ecb0472e27c19b24ac7532775ce'\n            - 'SHA1=b2f955b3e6107f831ebe67997f8586d4fe9f3e98'\n            - 'SHA1=6714380bc0b8ab09b9a0d2fa66d1b025b646b946'\n            - 'SHA1=4a7d66874a0472a47087fabaa033a85d47413379'\n            - 'SHA1=012db3a80faf1f7f727b538cbe5d94064e7159de'\n            - 'SHA1=5d6b9e80e12bfc595d4d26f6afb099b3cb471dd4'\n            - 'SHA1=c6d349823bbb1f5b44bae91357895dba653c5861'\n            - 'SHA1=643383938d5e0d4fd30d302af3e9293a4798e392'\n            - 'SHA1=ace6b9e34e3e2e73fe584f3bbdb4e4ec106e0a7d'\n            - 'SHA1=1d0df45ee3fa758f0470e055915004e6eae54c95'\n            - 'SHA1=3599ea2ac1fa78f423423a4cf90106ea0938dde8'\n            - 'SHA1=f42f28d164205d9f6dab9317c9fecad54c38d5d2'\n            - 'SHA1=d9c09dd725bc7bc3c19b4db37866015817a516ef'\n            - 'SHA1=d5fd9fe10405c4f90235e583526164cd0902ed86'\n            - 'SHA1=0c74d09da7baf7c05360346e4c3512d0cd433d59'\n            - 'SHA1=9c256edd10823ca76c0443a330e523027b70522d'\n            - 'SHA1=65d8a7c2e867b22d1c14592b020c548dd0665646'\n            - 'SHA1=7859e75580570e23a1ef7208b9a76f81738043d5'\n            - 'SHA1=b242b0332b9c9e8e17ec27ef10d75503d20d97b6'\n            - 'SHA1=6523b3fd87de39eb5db1332e4523ce99556077dc'\n            - 'SHA1=ac600a2bc06b312d92e649b7b55e3e91e9d63451'\n            - 'SHA1=fe10018af723986db50701c8532df5ed98b17c39'\n            - 'SHA1=b9807b8840327c6d7fbdde45fc27de921f1f1a82'\n            - 'SHA1=a3636986cdcd1d1cb8ab540f3d5c29dcc90bb8f0'\n            - 'SHA1=054a50293c7b4eea064c91ef59cf120d8100f237'\n            - 'SHA1=2e3de9bff43d7712707ef8a0b10f7e4ad8427fd8'\n            - 'SHA1=485c0b9710a196c7177b99ee95e5ddb35b26ddd1'\n            - 'SHA1=faa870b0cb15c9ac2b9bba5d0470bd501ccd4326'\n            - 'SHA1=4a235f0b84ff615e2879fa9e0ec0d745fcfdaa5c'\n            - 'SHA1=0291d0457acaf0fe8ed5c3137302390469ce8b35'\n            - 'SHA1=8183a341ba6c3ce1948bf9be49ab5320e0ee324d'\n            - 'SHA1=5a7dd0da0aee0bdedc14c1b7831b9ce9178a0346'\n            - 'SHA1=6debce728bcff73d9d1d334df0c6b1c3735e295c'\n            - 'SHA1=b25170e09c9fb7c0599bfba3cf617187f6a733ac'\n            - 'SHA1=19f3343bfad0ef3595f41d60272d21746c92ffca'\n            - 'SHA1=a48aa80942fc8e0699f518de4fd6512e341d4196'\n            - 'SHA1=f6f11ad2cd2b0cf95ed42324876bee1d83e01775'\n            - 'SHA1=9a35ae9a1f95ce4be64adc604c80079173e4a676'\n            - 'SHA1=ea360a9f23bb7cf67f08b88e6a185a699f0c5410'\n            - 'SHA1=6a3d3b9ab3d201cd6b0316a7f9c3fb4d34d0f403'\n            - 'SHA1=08596732304351b311970ff96b21f451f23b1e25'\n            - 'SHA1=29a190727140f40cea9514a6420f5a195e36386b'\n            - 'SHA1=b4d014b5edd6e19ce0e8395a64faedf49688ecb5'\n            - 'SHA1=31fac347aa26e92db4d8c9e1ba37a7c7a2234f08'\n            - 'SHA1=fcde5275ee1913509927ce5f0f85e6681064c9d2'\n            - 'SHA1=f052dc35b74a1a6246842fbb35eb481577537826'\n            - 'SHA1=c52cef5b9e1d4a78431b7af56a6fdb6aa1bcad65'\n            - 'SHA1=33cdab3bbc8b3adce4067a1b042778607dce2acd'\n            - 'SHA1=2d503a2457a787014a1fdd48a2ece2e6cbe98ea7'\n            - 'SHA1=f9519d033d75e1ab6b82b2e156eafe9607edbcfb'\n            - 'SHA1=89909fa481ff67d7449ee90d24c167b17b0612f1'\n            - 'SHA1=a7d827a41b2c4b7638495cd1d77926f1ba902978'\n            - 'SHA1=c23eeb6f18f626ce1fd840227f351fa7543bb167'\n            - 'SHA1=3805e4e08ad342d224973ecdade8b00c40ed31be'\n            - 'SHA1=8302802b709ad242a81b939b6c90b3230e1a1f1e'\n            - 'SHA1=ac13941f436139b909d105ad55637e1308f49d9a'\n            - 'SHA1=92f251358b3fe86fd5e7aa9b17330afa0d64a705'\n            - 'SHA1=623cd2abef6c92255f79cbbd3309cb59176771da'\n            - 'SHA1=af50109b112995f8c82be8ef3a88be404510cdde'\n            - 'SHA1=a00e444120449e35641d58e62ed64bb9c9f518d2'\n            - 'SHA1=9923c8f1e565a05b3c738d283cf5c0ed61a0b90f'\n            - 'SHA1=7eec3a1edf3b021883a4b5da450db63f7c0afeeb'\n            - 'SHA1=078ae07dec258db4376d5a2a05b9b508d68c0123'\n            - 'SHA1=ef80da613442047697bec35ea228cde477c09a3d'\n            - 'SHA1=6003184788cd3d2fc624ca801df291ccc4e225ee'\n            - 'SHA1=558aad879b6a47d94a968f39d0a4e3a3aaef1ef1'\n            - 'SHA1=877c6c36a155109888fe1f9797b93cb30b4957ef'\n            - 'SHA1=f3cce7e79ab5bd055f311bb3ac44a838779270b6'\n            - 'SHA1=80fa962bdfb76dfcb9e5d13efc38bb3d392f2e77'\n            - 'SHA1=3b6b35bca1b05fafbfc883a844df6d52af44ccdc'\n            - 'SHA1=351cbd352b3ec0d5f4f58c84af732a0bf41b4463'\n            - 'SHA1=609fa1efcf61e26d64a5ceb13b044175ab2b3a13'\n            - 'SHA1=dc0e97adb756c0f30b41840a59b85218cbdd198f'\n            - 'SHA1=71469dce9c2f38d0e0243a289f915131bf6dd2a8'\n            - 'SHA1=05ac1c64ca16ab0517fe85d4499d08199e63df26'\n            - 'SHA1=2261198385d62d2117f50f631652eded0ecc71db'\n            - 'SHA1=414cd15d6c991d19fb5be02e3b9fb0e6c5ce731c'\n            - 'SHA1=8626ab1da6bfbdf61bd327eb944b39fd9df33d1d'\n            - 'SHA1=5fb9421be8a8b08ec395d05e00fd45eb753b593a'\n            - 'SHA1=d702d88b12233be9413446c445f22fda4a92a1d9'\n            - 'SHA1=e74b6dda8bc53bc687fc21218bd34062a78d8467'\n            - 'SHA1=a197a02025946aca96d6e74746f84774df31249e'\n            - 'SHA1=1f25f54e9b289f76604e81e98483309612c5a471'\n            - 'SHA1=e3c1dd569aa4758552566b0213ee4d1fe6382c4b'\n            - 'SHA1=879fcc6795cebe67718388228e715c470de87dca'\n            - 'SHA1=3ae56ab63230d6d9552360845b4a37b5801cc5ea'\n            - 'SHA1=74e4e3006b644392f5fcea4a9bae1d9d84714b57'\n            - 'SHA1=ce549714a11bd43b52be709581c6e144957136ec'\n            - 'SHA1=3abb9d0a9d600200ae19c706e570465ef0a15643'\n            - 'SHA1=fbf8b0613a2f7039aeb9fa09bd3b40c8ff49ded2'\n            - 'SHA1=cc51be79ae56bc97211f6b73cc905c3492da8f9d'\n            - 'SHA1=b03b1996a40bfea72e4584b82f6b845c503a9748'\n            - 'SHA1=0307d76750dd98d707c699aee3b626643afb6936'\n            - 'SHA1=8db869c0674221a2d3280143cbb0807fac08e0cc'\n            - 'SHA1=2f991435a6f58e25c103a657d24ed892b99690b8'\n            - 'SHA1=c948ae14761095e4d76b55d9de86412258be7afd'\n            - 'SHA1=3ef30c95e40a854cc4ded94fc503d0c3dc3e620e'\n            - 'SHA1=152b6bb9ffd2ffec00cc46f5c6e29362d0e66e67'\n            - 'SHA1=a7bd05de737f8ea57857f1e0845a25677df01872'\n            - 'SHA1=aca8e53483b40a06dfdee81bb364b1622f9156fe'\n            - 'SHA1=f36a47edfacd85e0c6d4d22133dd386aee4eec15'\n            - 'SHA1=bf87e32a651bdfd9b9244a8cf24fca0e459eb614'\n            - 'SHA1=bc47e15537fa7c32dfefd23168d7e1741f8477ed'\n            - 'SHA1=3ee2fd08137e9262d2e911158090e4a7c7427ea0'\n            - 'SHA1=4e826430a1389032f3fe06e2cc292f643fb0c417'\n            - 'SHA1=745bad097052134548fe159f158c04be5616afc2'\n            - 'SHA1=28b1c0b91eb6afd2d26b239c9f93beb053867a1a'\n            - 'SHA1=0466e90bf0e83b776ca8716e01d35a8a2e5f96d3'\n            - 'SHA1=e6765d8866cad6193df1507c18f31fa7f723ca3e'\n            - 'SHA1=1fd7f881ea4a1dbb5c9aeb9e7ad659a85421745b'\n            - 'SHA1=57511ef5ff8162a9d793071b5bf7ebe8371759de'\n            - 'SHA1=d098600152e5ee6a8238d414d2a77a34da8afaaa'\n            - 'SHA1=16d7ecf09fc98798a6170e4cef2745e0bee3f5c7'\n            - 'SHA1=8b6aa5b2bff44766ef7afbe095966a71bc4183fa'\n            - 'SHA1=c834c4931b074665d56ccab437dfcc326649d612'\n            - 'SHA1=8d59fd14a445c8f3f0f7991fa6cd717d466b3754'\n            - 'SHA1=d94f2fb3198e14bfe69b44fb9f00f2551f7248b2'\n            - 'SHA1=64e4ac8b9ea2f050933b7ec76a55dd04e97773b4'\n            - 'SHA1=93aa3bb934b74160446df3a47fa085fd7f3a6be9'\n            - 'SHA1=14bf0eaa90e012169745b3e30c281a327751e316'\n            - 'SHA1=738b7918d85e5cb4395df9e3f6fc94ddad90e939'\n            - 'SHA1=8c377ab4eebc5f4d8dd7bb3f90c0187dfdd3349f'\n            - 'SHA1=fff4f28287677caabc60c8ab36786c370226588d'\n            - 'SHA1=34c85afe6d84cd3deec02c0a72e5abfa7a2886c3'\n            - 'SHA1=3f223581409492172a1e875f130f3485b90fbe5f'\n            - 'SHA1=282bb241bda5c4c1b8eb9bf56d018896649ca0e1'\n            - 'SHA1=f1c8c3926d0370459a1b7f0cf3d17b22ff9d0c7f'\n            - 'SHA1=e83458c4a6383223759cd8024e60c17be4e7c85f'\n            - 'SHA1=d569d4bab86e70efbcdfdac9d822139d6f477b7c'\n            - 'SHA1=2a6e6bd51c7062ad24c02a4d2c1b5e948908d131'\n            - 'SHA1=a65fabaf64aa1934314aae23f25cdf215cbaa4b6'\n            - 'SHA1=c257aa4094539719a3c7b7950598ef872dbf9518'\n            - 'SHA1=1292c7dd60214d96a71e7705e519006b9de7968f'\n            - 'SHA1=b4d1554ec19504215d27de0758e13c35ddd6db3e'\n            - 'SHA1=994dc79255aeb662a672a1814280de73d405617a'\n            - 'SHA1=5dd2c31c4357a8b76db095364952b3d0e3935e1d'\n            - 'SHA1=21e6c104fe9731c874fab5c9560c929b2857b918'\n            - 'SHA1=e92817a8744ebc4e4fa5383cdce2b2977f01ecd4'\n            - 'SHA1=35f1ba60ba0da8512a0b1b15ee8e30fe240d77cd'\n            - 'SHA1=bb962c9a8dda93e94fef504c4159de881e4706fe'\n            - 'SHA1=82ba5513c33e056c3f54152c8555abf555f3e745'\n            - 'SHA1=f50c6b84dfb8f2d53ba3bce000a55f0a486c0e79'\n            - 'SHA1=cb3de54667548a5c9abf5d8fa47db4097fcee9f1'\n            - 'SHA1=0c26ab1299adcd9a385b541ef1653728270aa23e'\n            - 'SHA1=f02af84393e9627ba808d4159841854a6601cf80'\n            - 'SHA1=cb22723faa5ae2809476e5c5e9b9a597b26cab9b'\n            - 'SHA1=f9feb60b23ca69072ce42264cd821fe588a186a6'\n            - 'SHA1=160c96b5e5db8c96b821895582b501e3c2d5d6e7'\n            - 'SHA1=0b8b83f245d94107cb802a285e6529161d9a834d'\n            - 'SHA1=d7e8aef8c8feb87ce722c0b9abf34a7e6bab6eb4'\n            - 'SHA1=d7f7594ff084201c0d9fa2f4ef1626635b67bce5'\n            - 'SHA1=7d7c03e22049a725ace2a9812c72b53a66c2548b'\n            - 'SHA1=589a7d4df869395601ba7538a65afae8c4616385'\n            - 'SHA1=1f3799fed3cf43254fe30dcdfdb8dc02d82e662b'\n            - 'SHA1=72966ca845759d239d09da0de7eebe3abe86fee3'\n            - 'SHA1=0f780b7ada5dd8464d9f2cc537d973f5ac804e9c'\n            - 'SHA1=26c4a7b392d7e7bd7f0a2a758534e45c0d9a56ab'\n            - 'SHA1=7c6cad6a268230f6e08417d278dda4d66bb00d13'\n            - 'SHA1=d04e5db5b6c848a29732bfd52029001f23c3da75'\n            - 'SHA1=a87d6eac2d70a3fbc04e59412326b28001c179de'\n            - 'SHA1=cce9b82f01ec68f450f5fe4312f40d929c6a506e'\n            - 'SHA1=8cc8974a05e81678e3d28acfe434e7804abd019c'\n            - 'SHA1=1e7c241b9a9ea79061b50fb19b3d141dee175c27'\n            - 'SHA1=00b4e8b7644d1bf93f5ddb5740b444b445e81b02'\n            - 'SHA1=4d41248078181c7f61e6e4906aa96bbdea320dc2'\n            - 'SHA1=f3db629cfe37a73144d5258e64d9dd8b38084cf4'\n            - 'SHA1=d2e6fc9259420f0c9b6b1769be3b1f63eb36dc57'\n            - 'SHA1=99201c9555e5faf6e8d82da793b148311f8aa4b8'\n            - 'SHA1=a2e0b3162cfa336cd4ab40a2acc95abe7dc53843'\n            - 'SHA1=12d38abbc5391369a4c14f3431715b5b76ac5a2a'\n            - 'SHA1=b4dcdbd97f38b24d729b986f84a9cdb3fc34d59f'\n            - 'SHA1=490109fa6739f114651f4199196c5121d1c6bdf2'\n            - 'SHA1=e5021a98e55d514e2376aa573d143631e5ee1c13'\n            - 'SHA1=af6e1f2cfb230907476e8b2d676129b6d6657124'\n            - 'SHA1=ddbe809b731a0962e404a045ab9e65a0b64917ad'\n            - 'SHA1=b480c54391a2a2f917a44f91a5e9e4590648b332'\n            - 'SHA1=a21c84c6bf2e21d69fa06daaf19b4cc34b589347'\n            - 'SHA1=dc55217b6043d819eadebd423ff07704ee103231'\n            - 'SHA1=6053d258096bccb07cb0057d700fe05233ab1fbb'\n            - 'SHA1=b0032b8d8e6f4bd19a31619ce38d8e010f29a816'\n            - 'SHA1=eb93d2f564fea9b3dc350f386b45de2cd9a3e001'\n            - 'SHA1=8692274681e8d10c26ddf2b993f31974b04f5bf0'\n            - 'SHA1=f5696fb352a3fbd14fb1a89ad21a71776027f9ab'\n            - 'SHA1=5db61d00a001fd493591dc919f69b14713889fc5'\n            - 'SHA1=2b4d0dead4c1a7cc95543748b3565cfa802e5256'\n            - 'SHA1=205c69f078a563f54f4c0da2d02a25e284370251'\n            - 'SHA1=7c1b25518dee1e30b5a6eaa1ea8e4a3780c24d0c'\n            - 'SHA1=35829e096a15e559fcbabf3441d99e580ca3b26e'\n            - 'SHA1=17fa047c1f979b180644906fe9265f21af5b0509'\n            - 'SHA1=ec4cc6de4c779bb1ca1dd32ee3a03f7e8d633a9b'\n            - 'SHA1=461882bd59887617cadc1c7b2b22d0a45458c070'\n            - 'SHA1=7838fb56fdab816bc1900a4720eea2fc9972ef7a'\n            - 'SHA1=1f3a9265963b660392c4053329eb9436deeed339'\n            - 'SHA1=e09b5e80805b8fe853ea27d8773e31bff262e3f7'\n            - 'SHA1=5f8356ffa8201f338dd2ea979eb47881a6db9f03'\n            - 'SHA1=37e6450c7cd6999d080da94b867ba23faa8c32fe'\n            - 'SHA1=7ab4565ba24268f0adadb03a5506d4eb1dc7c181'\n            - 'SHA1=00a442a4305c62cefa8105c0b4c4a9a5f4d1e93b'\n            - 'SHA1=9c24dd75e4074041dbe03bf21f050c77d748b8e9'\n            - 'SHA1=3270720a066492b046d7180ca6e60602c764cac7'\n            - 'SHA1=0b6ec2aedc518849a1c61a70b1f9fb068ede2bc3'\n            - 'SHA1=814200191551faec65b21f5f6819b46c8fc227a3'\n            - 'SHA1=696d68bdbe1d684029aaad2861c49af56694473a'\n            - 'SHA1=b89a8eef5aeae806af5ba212a8068845cafdab6f'\n            - 'SHA1=15df139494d2c40a645fb010908551185c27f3c5'\n            - 'SHA1=947db58d6f36a8df9fa2a1057f3a7f653ccbc42e'\n            - 'SHA1=fe1d909ab38de1389a2a48352fd1c8415fd2eab0'\n            - 'SHA1=7667b72471689151e176baeba4e1cd9cd006a09a'\n            - 'SHA1=d25340ae8e92a6d29f599fef426a2bc1b5217299'\n            - 'SHA1=6abbc3003c7aa69ce79cbbcd2e3210b07f21d202'\n            - 'SHA1=d34a7c497c603f3f7fcad546dc4097c2da17c430'\n            - 'SHA1=b8de3a1aeeda9deea43e3f768071125851c85bd0'\n            - 'SHA1=9c6749fc6c1127f8788bff70e0ce9062959637c9'\n            - 'SHA1=4268f30b79ce125a81d0d588bef0d4e2ad409bbb'\n            - 'SHA1=213ba055863d4226da26a759e8a254062ea77814'\n            - 'SHA1=a4b2c56c12799855162ca3b004b4b2078c6ecf77'\n            - 'SHA1=27eab595ec403580236e04101172247c4f5d5426'\n            - 'SHA1=d62fa51e520022483bdc5847141658de689c0c29'\n            - 'SHA1=ccdd3a1ebe9a1c8f8a72af20a05a10f11da1d308'\n            - 'SHA1=8fb149fc476cf5bf18dc575334edad7caf210996'\n            - 'SHA1=e35a2b009d54e1a0b231d8a276251f64231b66a3'\n            - 'SHA1=d0d39e1061f30946141b6ecfa0957f8cc3ddeb63'\n       ",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'MD5=1b5c3c458e31bede55145d0644e88d75'\n            - 'MD5=6f5d54ab483659ac78672440422ae3f1'\n            - 'MD5=ee6b1a79cb6641aa44c762ee90786fe0'\n            - 'MD5=c02f70960fa934b8defa16a03d7f6556'\n            - 'MD5=839cbbc86453960e9eb6db814b776a40'\n            - 'MD5=acac842a46f3501fe407b1db1b247a0b'\n            - 'MD5=95e4c7b0384da89dce8ea6f31c3613d9'\n            - 'MD5=e700a820f117f65e813b216fccbf78c9'\n            - 'MD5=96b463b6fa426ae42c414177af550ba2'\n            - 'MD5=27bcbeec8a466178a6057b64bef66512'\n            - 'MD5=70dcd07d38017b43f710061f37cb4a91'\n            - 'MD5=db72def618cbc3c5f9aa82f091b54250'\n            - 'MD5=83601bbe5563d92c1fdb4e960d84dc77'\n            - 'MD5=5970e8de1b337ca665114511b9d10806'\n            - 'MD5=49fe3d1f3d5c2e50a0df0f6e8436d778'\n            - 'MD5=1493d342e7a36553c56b2adea150949e'\n            - 'MD5=4f191abc652d8f7442ca2636725e1ed6'\n            - 'MD5=0ae30291c6cbfa7be39320badd6e8de0'\n            - 'MD5=d104621c93213942b7b43d65b5d8d33e'\n            - 'MD5=b89b097b8b8aecb8341d05136f334ebb'\n            - 'MD5=14580bd59c55185115fd3abe73b016a2'\n            - 'MD5=992ded5b623be3c228f32edb4ca3f2d2'\n            - 'MD5=a26e600652c33dd054731b4693bf5b01'\n            - 'MD5=1f950cfd5ed8dd9de3de004f5416fe20'\n            - 'MD5=491aec2249ad8e2020f9f9b559ab68a8'\n            - 'MD5=e4266262a77fffdea2584283f6c4f51d'\n            - 'MD5=bd25be845c151370ff177509d95d5add'\n            - 'MD5=9638f265b1ddd5da6ecdf5c0619dcbe6'\n            - 'MD5=4e90cd77509738d30d3181a4d0880bfa'\n            - 'MD5=0a6a1c9a7f80a2a5dcced5c4c0473765'\n            - 'MD5=9aa7ed7809eec0d8bc6c545a1d18107a'\n            - 'MD5=aa1ed3917928f04d97d8a217fe9b5cb1'\n            - 'MD5=42f7cc4be348c3efd98b0f1233cf2d69'\n            - 'MD5=4cc3ddd5ae268d9a154a426af2c23ef9'\n            - 'MD5=2fed983ec44d1e7cffb0d516407746f2'\n            - 'MD5=f7cbbb5eb263ec9a35a1042f52e82ca4'\n            - 'MD5=ed6348707f177629739df73b97ba1b6e'\n            - 'MD5=40bc58b7615d00eb55ad9ba700c340c1'\n            - 'MD5=c3fea895fe95ea7a57d9f4d7abed5e71'\n            - 'MD5=2128e6c044ee86f822d952a261af0b48'\n            - 'MD5=3dbf69f935ea48571ea6b0f5a2878896'\n            - 'MD5=c6f8983dd3d75640c072a8459b8fa55a'\n            - 'MD5=6fcf56f6ca3210ec397e55f727353c4a'\n            - 'MD5=79f7e6f98a5d3ab6601622be4471027f'\n            - 'MD5=bae1f127c4ff21d8fe45e2bbfc59c180'\n            - 'MD5=c533d6d64b474ffc3169a0e0fc0a701a'\n            - 'MD5=3f39f013168428c8e505a7b9e6cba8a2'\n            - 'MD5=748cf64b95ca83abc35762ad2c25458f'\n            - 'MD5=bce7f34912ff59a3926216b206deb09f'\n            - 'MD5=2d8e4f38b36c334d0a32a7324832501d'\n            - 'MD5=47e6ac52431ca47da17248d80bf71389'\n            - 'MD5=3651a6990fe38711ebb285143f867a43'\n            - 'MD5=dc943bf367ae77016ae399df8e71d38a'\n            - 'MD5=02198692732722681f246c1b33f7a9d9'\n            - 'MD5=ddc2ffe0ab3fcd48db898ab13c38d88d'\n            - 'MD5=0ec361f2fba49c73260af351c39ff9cb'\n            - 'MD5=c1fce7aac4e9dd7a730997e2979fa1e2'\n            - 'MD5=49938383844ceec33dba794fb751c9a5'\n            - 'MD5=34069a15ae3aa0e879cd0d81708e4bcc'\n            - 'MD5=1c294146fc77565030603878fd0106f9'\n            - 'MD5=fd81af62964f5dd5eb4a828543a33dcf'\n            - 'MD5=bd5b0514f3b40f139d8079138d01b5f6'\n            - 'MD5=fa173832dca1b1faeba095e5c82a1559'\n            - 'MD5=5cc5c26fc99175997d84fe95c61ab2c2'\n            - 'MD5=1ed043249c21ab201edccb37f1d40af9'\n            - 'MD5=361a598d8bb92c13b18abb7cac850b01'\n            - 'MD5=9b359b722ac80c4e0a5235264e1e0156'\n            - 'MD5=296bde4d0ed32c6069eb90c502187d0d'\n            - 'MD5=d3e40644a91327da2b1a7241606fe559'\n            - 'MD5=12cecc3c14160f32b21279c1a36b8338'\n            - 'MD5=dd39a86852b498b891672ffbcd071c03'\n            - 'MD5=b2a9ac0600b12ec9819e049d7a6a0b75'\n            - 'MD5=444f538daa9f7b340cfd43974ed43690'\n            - 'MD5=7b43dfd84de5e81162ebcfafb764b769'\n            - 'MD5=13dda15ef67eb265869fc371c72d6ef0'\n            - 'MD5=300c5b1795c9b6cc1bc4d7d55c7bbe85'\n            - 'MD5=1392b92179b07b672720763d9b1028a5'\n            - 'MD5=2e1f8a2a80221deb93496a861693c565'\n            - 'MD5=8065a7659562005127673ac52898675f'\n            - 'MD5=b5ada7fd226d20ec6634fc24768f9e22'\n            - 'MD5=84fb76ee319073e77fb364bbbbff5461'\n            - 'MD5=daf800da15b33bf1a84ee7afc59f0656'\n            - 'MD5=f7393fb917aed182e4cbef25ce8af950'\n            - 'MD5=120b5bbb9d2eb35ff4f62d79507ea63a'\n            - 'MD5=73c98438ac64a68e88b7b0afd11ba140'\n            - 'MD5=51207adb8dab983332d6b22c29fe8129'\n            - 'MD5=4a23e0f2c6f926a41b28d574cbc6ac30'\n            - 'MD5=20125794b807116617d43f02b616e092'\n            - 'MD5=e8ebba56ea799e1e62748c59e1a4c586'\n            - 'MD5=8abbb12e61045984eda19e2dc77b235e'\n            - 'MD5=f66b96aa7ae430b56289409241645099'\n            - 'MD5=97e3a44ec4ae58c8cc38eefc613e950e'\n            - 'MD5=ff7b31fa6e9ab923bce8af31d1be5bb2'\n            - 'MD5=12908c285b9d68ee1f39186110df0f1e'\n            - 'MD5=6126065af2fc2639473d12ee3c0c198e'\n            - 'MD5=356bda2bf0f6899a2c08b2da3ec69f13'\n            - 'MD5=fd7de498a72b2daf89f321d23948c3c4'\n            - 'MD5=338a98e1c27bc76f09331fcd7ae413a5'\n            - 'MD5=c9a293762319d73c8ee84bcaaf81b7b3'\n            - 'MD5=e9e786bdba458b8b4f9e93d034f73d00'\n            - 'MD5=a17c58c0582ee560c72f60764ed63224'\n            - 'MD5=21e13f2cb269defeae5e1d09887d47bb'\n            - 'MD5=a57b47489febc552515778dd0fd1e51c'\n            - 'MD5=d6e9f6c67d9b3d790d592557a7d57c3c'\n            - 'MD5=76bb1a4332666222a8e3e1339e267179'\n            - 'MD5=1cd158a64f3d886357535382a6fdad75'\n            - 'MD5=d9e7e5bcc5b01915dbcef7762a7fc329'\n            - 'MD5=d253c19194a18030296ae62a10821640'\n            - 'MD5=b12d1630fd50b2a21fd91e45d522ba3a'\n            - 'MD5=50b39072d0ee9af5ef4824eca34be6e3'\n            - 'MD5=778b7feea3c750d44745d3bf294bd4ce'\n            - 'MD5=0761c357aed5f591142edaefdf0c89c8'\n            - 'MD5=23cf3da010497eb2bf39a5c5a57e437c'\n            - 'MD5=c49a1956a6a25ffc25ad97d6762b0989'\n            - 'MD5=f406c5536bcf9bacbeb7ce8a3c383bfa'\n            - 'MD5=f2f728d2f69765f5dfda913d407783d2'\n            - 'MD5=4b817d0e7714b9d43db43ae4a22a161e'\n            - 'MD5=715f8efab1d1c660e4188055c4b28eed'\n            - 'MD5=a01c412699b6f21645b2885c2bae4454'\n            - 'MD5=010c0e5ac584e3ab97a2daf84cf436f5'\n            - 'MD5=d5db81974ffda566fa821400419f59be'\n            - 'MD5=3247014ba35d406475311a2eab0c4657'\n            - 'MD5=4d487f77be4471900d6ccbc47242cc25'\n            - 'MD5=1f2888e57fdd6aee466962c25ba7d62d'\n            - 'MD5=507a649eb585d8d0447eab0532ef0c73'\n            - 'MD5=4ad8fd9e83d7200bd7f8d0d4a9abfb11'\n            - 'MD5=cd9f0fcecf1664facb3671c0130dc8bb'\n            - 'MD5=b10b210c5944965d0dc85e70a0b19a42'\n            - 'MD5=ae5eb2759305402821aeddc52ba9a6d6'\n            - 'MD5=f5051c756035ef5de9c4c48bacb0612b'\n            - 'MD5=1898ceda3247213c084f43637ef163b3'\n            - 'MD5=37086ae5244442ba552803984a11d6cb'\n            - 'MD5=825703c494e0d270f797f1ecf070f698'\n            - 'MD5=909f3fc221acbe999483c87d9ead024a'\n            - 'MD5=75d6c3469347de1cdfa3b1b9f1544208'\n            - 'MD5=9ab9f3b75a2eb87fafb1b7361be9dfb3'\n            - 'MD5=5f9785e7535f8f602cb294a54962c9e7'\n            - 'MD5=7d46d0ddaf8c7e1776a70c220bf47524'\n            - 'MD5=f9844524fb0009e5b784c21c7bad4220'\n            - 'MD5=828bb9cb1dd449cd65a29b18ec46055f'\n            - 'MD5=4d17b32be70ef39eae5d5edeb5e89877'\n            - 'MD5=2391fb461b061d0e5fccb050d4af7941'\n            - 'MD5=6d4159694e1754f262e326b52a3b305a'\n            - 'MD5=a60c9173563b940203cf4ad38ccf2082'\n            - 'MD5=63e333d64a8716e1ae59f914cb686ae8'\n            - 'MD5=a9f220b1507a3c9a327a99995ff99c82'\n            - 'MD5=c5f5d109f11aadebae94c77b27cb026f'\n            - 'MD5=5bab40019419a2713298a5c9173e5d30'\n            - 'MD5=c996d7971c49252c582171d9380360f2'\n            - 'MD5=98763a3dee3cf03de334f00f95fc071a'\n            - 'MD5=e79c91c27df3eaf82fb7bd1280172517'\n            - 'MD5=a42249a046182aaaf3a7a7db98bfa69d'\n            - 'MD5=803a371a78d528a44ef8777f67443b16'\n            - 'MD5=9007c94c9d91ccff8d7f5d4cdddcc403'\n            - 'MD5=11fb599312cb1cf43ca5e879ed6fb71e'\n            - 'MD5=7f9309f5e4defec132b622fadbcad511'\n            - 'MD5=04a88f5974caa621cee18f34300fc08a'\n            - 'MD5=8636fe3724f2bcba9399daffd6ef3c7e'\n            - 'MD5=9dfd73dadb2f1c7e9c9d2542981aaa63'\n            - 'MD5=490b1f404c4f31f4538b36736c990136'\n            - 'MD5=c1d063c9422a19944cdaa6714623f2ec'\n            - 'MD5=dacb62578b3ea191ea37486d15f4f83c'\n            - 'MD5=2da209dde8188076a9579bd256dc90d0'\n            - 'MD5=0ba6afe0ea182236f98365bd977adfdf'\n            - 'MD5=4c016fd76ed5c05e84ca8cab77993961'\n            - 'MD5=ad22a7b010de6f9c6f39c350a471a440'\n            - 'MD5=79483cb29a0c428e1362ec8642109eee'\n            - 'MD5=a179c4093d05a3e1ee73f6ff07f994aa'\n            - 'MD5=ccf523b951afaa0147f22e2a7aae4976'\n            - 'MD5=736c4b85ce346ddf3b49b1e3abb4e72a'\n            - 'MD5=b0baac4d6cbac384a633c71858b35a2e'\n            - 'MD5=798de15f187c1f013095bbbeb6fb6197'\n            - 'MD5=a86150f2e29b35369afa2cafd7aa9764'\n            - 'MD5=b941c8364308990ee4cc6eadf7214e0f'\n            - 'MD5=dd04cd3de0c19bede84e9c95a86b3ca8'\n            - 'MD5=6909b5e86e00b4033fedfca1775b0e33'\n            - 'MD5=9b91a44a488e4d539f2e55476b216024'\n            - 'MD5=8b287636041792f640f92e77e560725e'\n            - 'MD5=07f83829e7429e60298440cd1e601a6a'\n            - 'MD5=0395b4e0eb21693590ad1cfdf7044b8b'\n            - 'MD5=4b058945c9f2b8d8ebc485add1101ba5'\n            - 'MD5=0067c788e1cb174f008c325ebde56c22'\n            - 'MD5=c2c1b8c00b99e913d992a870ed478a24'\n            - 'MD5=84ba7af6ada1b3ea5efb9871a0613fc6'\n            - 'MD5=dbc415304403be25ac83047c170b0ec2'\n            - 'MD5=31469f1313871690e8dc2e8ee4799b22'\n            - 'MD5=2d465b4487dc81effaa84f122b71c24f'\n            - 'MD5=64efbffaa153b0d53dc1bccda4279299'\n            - 'MD5=b164daf106566f444dfb280d743bc2f7'\n            - 'MD5=7c72a7e1d42b0790773efd8700e24952'\n            - 'MD5=56a515173b211832e20fbc64e5a0447c'\n            - 'MD5=c2eb4539a4f6ab6edd01bdc191619975'\n            - 'MD5=d1bac75205c389d6d5d6418f0457c29b'\n            - 'MD5=68dde686d6999ad2e5d182b20403240b'\n            - 'MD5=a785b3bc4309d2eb111911c1b55e793f'\n            - 'MD5=6ab7b8ef0c44e7d2d5909fdb58d37fa5'\n            - 'MD5=d9ce18960c23f38706ae9c6584d9ac90'\n            - 'MD5=ab53d07f18a9697139ddc825b466f696'\n            - 'MD5=ba5f0f6347780c2ed911bbf888e75bef'\n            - 'MD5=13ee349c15ee5d6cf640b3d0111ffc0e'\n            - 'MD5=9a237fa07ce3ed06ea924a9bed4a6b99'\n            - 'MD5=fa222bed731713904320723b9c085b11'\n            - 'MD5=0898af0888d8f7a9544ef56e5e16354e'\n            - 'MD5=e076dadf37dd43a6b36aeed957abee9e'\n            - 'MD5=4f27c09cc8680e06b04d6a9c34ca1e08'\n            - 'MD5=1b32c54b95121ab1683c7b83b2db4b96'\n            - 'MD5=715572dfe6fb10b16f980bfa242f3fa5'\n            - 'MD5=4a06bcd96ef0b90a1753a805b4235f28'\n            - 'MD5=f242cffd9926c0ccf94af3bf16b6e527'\n            - 'MD5=7ed6030f14e66e743241f2c1fa783e69'\n            - 'MD5=0d6fef14f8e1ce5753424bd22c46b1ce'\n            - 'MD5=a4fda97f452b8f8705695a729f5969f7'\n            - 'MD5=62c18d61ed324088f963510bae43b831'\n            - 'MD5=d5a642329cce4df94b8dc1ba9660ae34'\n            - 'MD5=a641e3dccba765a10718c9cb0da7879e'\n            - 'MD5=ed07f1a8038596574184e09211dfc30f'\n            - 'MD5=3473faea65fba5d4fbe54c0898a3c044'\n            - 'MD5=708ac9f7b12b6ca4553fd8d0c7299296'\n            - 'MD5=bbe4f5f8b0c0f32f384a83ae31f49a00'\n            - 'MD5=257483d5d8b268d0d679956c7acdf02d'\n            - 'MD5=312e31851e0fc2072dbf9a128557d6ef'\n            - 'MD5=14eead4d42728e9340ec8399a225c124'\n            - 'MD5=de1cc5c266140bff9d964fab87a29421'\n            - 'MD5=9a9dbf5107848c254381be67a4c1b1dd'\n            - 'MD5=1dc94a6a82697c62a04e461d7a94d0b0'\n            - 'MD5=2850608430dd089f24386f3336c84729'\n            - 'MD5=6d131a7462e568213b44ef69156f10a5'\n            - 'MD5=b8b6686324f7aa77f570bc019ec214e6'\n            - 'MD5=22823fed979903f8dfe3b5d28537eb47'\n            - 'MD5=c1d3a6bb423739a5e781f7eee04c9cfd'\n            - 'MD5=0c0195c48b6b8582fa6f6373032118da'\n            - 'MD5=5228b7a738dc90a06ae4f4a7412cb1e9'\n            - 'MD5=62f02339fe267dc7438f603bfb5431a1'\n            - 'MD5=22949977ce5cd96ba674b403a9c81285'\n            - 'MD5=5ca1922ed5ee2b533b5f3dd9be20fd9a'\n            - 'MD5=1ed08a6264c5c92099d6d1dae5e8f530'\n            - 'MD5=b0770094c3c64250167b55e4db850c04'\n            - 'MD5=a6e9d6505f6d2326a8a9214667c61c67'\n            - 'MD5=8407ddfab85ae664e507c30314090385'\n            - 'MD5=9321a61a25c7961d9f36852ecaa86f55'\n            - 'MD5=a711e6ab17802fabf2e69e0cd57c54cd'\n            - 'MD5=29ccff428e5eb70ae429c3da8968e1ec'\n            - 'MD5=79df0eabbf2895e4e2dae15a4772868c'\n            - 'MD5=fb7c61ef427f9b2fdff3574ee6b1819b'\n            - 'MD5=f778489c7105a63e9e789a02412aaa5f'\n            - 'MD5=fef9dd9ea587f8886ade43c1befbdafe'\n            - 'MD5=43830326cd5fae66f5508e27cbec39a0'\n            - 'MD5=c7a57cd4bea07dadba2e2fb914379910'\n            - 'MD5=f1e054333cc40f79cfa78e5fbf3b54c2'\n            - 'MD5=dc564bac7258e16627b9de0ce39fae25'\n            - 'MD5=054299e09cea38df2b84e6b29348b418'\n            - 'MD5=97221e16e7a99a00592ca278c49ffbfc'\n            - 'MD5=8d63e1a9ff4cafee1af179c0c544365c'\n            - 'MD5=96421b56dbda73e9b965f027a3bda7ba'\n            - 'MD5=4ae55080ec8aed49343e40d08370195c'\n            - 'MD5=988dabdcf990b134b0ac1e00512c30c4'\n            - 'MD5=bbbc9a6cc488cfb0f6c6934b193891eb'\n            - 'MD5=76c643ab29d497317085e5db8c799960'\n            - 'MD5=e9a30edef1105b8a64218f892b2e56ed'\n            - 'MD5=7bd840ff7f15df79a9a71fec7db1243e'\n            - 'MD5=1cff7b947f8c3dea1d34dc791fc78cdc'\n            - 'MD5=2c54859a67306e20bfdc8887b537de72'\n            - 'MD5=a5f637d61719d37a5b4868c385e363c0'\n            - 'MD5=2509a71a02296aa65a3428ddfac22180'\n            - 'MD5=6cce5bb9c8c2a8293df2d3b1897941a2'\n            - 'MD5=7a16fca3d56c6038c692ec75b2bfee15'\n            - 'MD5=eaea9ccb40c82af8f3867cd0f4dd5e9d'\n            - 'MD5=d2588631d8aae2a3e54410eaf54f0679'\n            - 'MD5=b47dee29b5e6e1939567a926c7a3e6a4'\n            - 'MD5=fac8eb49e2fd541b81fcbdeb98a199cb'\n            - 'MD5=1a234f4643f5658bab07bfa611282267'\n            - 'MD5=0752f113d983030939b4ab98b0812cf0'\n            - 'SHA1=f0c463d29a5914b01e4607889094f1b7d95e7aaf'\n            - 'SHA1=a804ebec7e341b4d98d9e94f6e4860a55ea1638d'\n            - 'SHA1=ecb4d096a9c58643b02f328d2c7742a38e017cf0'\n            - 'SHA1=684786de4b3b3f53816eae9df5f943a22c89601f'\n            - 'SHA1=745335bcdf02fb42df7d890a24858e16094f48fd'\n            - 'SHA1=25d812a5ece19ea375178ef9d60415841087726e'\n            - 'SHA1=d417c0be261b0c6f44afdec3d5432100e420c3ed'\n            - 'SHA1=6afc6b04cf73dd461e4a4956365f25c1f1162387'\n            - 'SHA1=01a578a3a39697c4de8e3dab04dba55a4c35163e'\n            - 'SHA1=2b0bb408ff0e66bcdf6574f1ca52cbf4015b257b'\n            - 'SHA1=7e836dadc2e149a0b758c7e22c989cbfcce18684'\n            - 'SHA1=4a705af959af61bad48ef7579f839cb5ebd654d2'\n            - 'SHA1=bc2f3850c7b858340d7ed27b90e63b036881fd6c'\n            - 'SHA1=e22495d92ac3dcae5eeb1980549a9ead8155f98a'\n            - 'SHA1=c969f1f73922fd95db1992a5b552fbc488366a40'\n            - 'SHA1=4c18754dca481f107f0923fb8ef5e149d128525d'\n            - 'SHA1=2fc6845047abcf2a918fce89ab99e4955d08e72c'\n            - 'SHA1=4f7a8e26a97980544be634b26899afbefb0a833c'\n            - 'SHA1=21edff2937eb5cd6f6b0acb7ee5247681f624260'\n            - 'SHA1=89cd760e8cb19d29ee08c430fb17a5fd4455c741'\n            - 'SHA1=6c1bb3a72ebfb5359b9e22ca44d0a1ff825a68f2'\n            - 'SHA1=064de88dbbea67c149e779aac05228e5405985c7'\n            - 'SHA1=ea877092d57373cb466b44e7dbcad4ce9a547344'\n            - 'SHA1=55ab7e27412eca433d76513edc7e6e03bcdd7eda'\n            - 'SHA1=976777d39d73034df6b113dfce1aa6e1d00ffcfd'\n            - 'SHA1=1f7501e01d84a2297c85cb39880ec4e40ac3fe8a'\n            - 'SHA1=a6816949cd469b6e5c35858d19273936fab1bef6'\n            - 'SHA1=91f832f46e4c38ecc9335460d46f6f71352cffed'\n            - 'SHA1=43419df1f9a07430a18c5f3b3cc74de621be0f8e'\n            - 'SHA1=01779ee53f999464465ed690d823d160f73f10e7'\n            - 'SHA1=bfe55cacc7c56c9f7bd75bdb4b352c0b745d071b'\n            - 'SHA1=27d3ebea7655a72e6e8b95053753a25db944ec0f'\n            - 'SHA1=fcd615df88645d1f57ff5702bd6758b77efea6d0'\n            - 'SHA1=10115219e3595b93204c70eec6db3e68a93f3144'\n            - 'SHA1=33285b2e97a0aeb317166cce91f6733cf9c1ad53'\n            - 'SHA1=2c27abbbbcf10dfb75ad79557e30ace5ed314df8'\n            - 'SHA1=10e15ba8ff8ed926ddd3636cec66a0f08c9860a4'\n            - 'SHA1=291b4a88ffd2ac1d6bf812ecaedc2d934dc503cb'\n            - 'SHA1=05c0c49e8bcf11b883d41441ce87a2ee7a3aba1d'\n            - 'SHA1=8f5cd4a56e6e15935491aa40adb1ecad61eafe7c'\n            - 'SHA1=a7948a4e9a3a1a9ed0e4e41350e422464d8313cd'\n            - 'SHA1=19bd488fe54b011f387e8c5d202a70019a204adf'\n            - 'SHA1=eeff4ec4ebc12c6acd2c930dc2eaaf877cfec7ec'\n            - 'SHA1=c4d7fb9db3c3459f7e8c0e3d48c95c7c9c4cff60'\n            - 'SHA1=15d1a6a904c8409fb47a82aefa42f8c3c7d8c370'\n            - 'SHA1=d02403f85be6f243054395a873b41ef8a17ea279'\n            - 'SHA1=4243dbbf6e5719d723f24d0f862afd0fcb40bc35'\n            - 'SHA1=4789b910023a667bee70ff1f1a8f369cffb10fe8'\n            - 'SHA1=50e2bc41f0186fdce970b80e2a2cb296353af586'\n            - 'SHA1=b97a8d506be2e7eaa4385f70c009b22adbd071ba'\n            - 'SHA1=78b9481607ca6f3a80b4515c432ddfe6550b18a8'\n            - 'SHA1=e039c9dd21494dbd073b4823fc3a17fbb951ec6c'\n            - 'SHA1=806832983bb8cb1e26001e60ea3b7c3ade4d3471'\n            - 'SHA1=c1d5cf8c43e7679b782630e93f5e6420ca1749a7'\n            - 'SHA1=c9cbfdd0be7b35751a017ec59ff7237ffdc4df1f'\n            - 'SHA1=a3ed5cbfbc17b58243289f3cf575bf04be49591d'\n            - 'SHA1=7fb52290883a6b69a96d480f2867643396727e83'\n            - 'SHA1=5711c88e9e64e45b8fc4b90ab6f2dd6437dc5a8a'\n            - 'SHA1=da9cea92f996f938f699902482ac5313d5e8b28e'\n            - 'SHA1=dc7b022f8bd149efbcb2204a48dce75c72633526'\n            - 'SHA1=d979353d04bf65cc92ad3412605bc81edbb75ec2'\n            - 'SHA1=4b009e91bae8d27b160dc195f10c095f8a2441e1'\n            - 'SHA1=51b60eaa228458dee605430aae1bc26f3fc62325'\n            - 'SHA1=c6bd965300f07012d1b651a9b8776028c45b149a'\n            - 'SHA1=729a8675665c61824f22f06c7b954be4d14b52c4'\n            - 'SHA1=37364cb5f5cefd68e5eca56f95c0ab4aff43afcc'\n            - 'SHA1=e4436c8c42ba5ffabd58a3b2256f6e86ccc907ab'\n            - 'SHA1=7ba19a701c8af76988006d616a5f77484c13cb0a'\n            - 'SHA1=25bf4e30a94df9b8f8ab900d1a43fd056d285c9d'\n            - 'SHA1=d8498707f295082f6a95fd9d32c9782951f5a082'\n            - 'SHA1=5e6ddd2b39a3de0016385cbd7aa50e49451e376d'\n            - 'SHA1=943593e880b4d340f2548548e6e673ef6f61eed3'\n            - 'SHA1=2dfcb799b3c42ecb0472e27c19b24ac7532775ce'\n            - 'SHA1=b2f955b3e6107f831ebe67997f8586d4fe9f3e98'\n            - 'SHA1=6714380bc0b8ab09b9a0d2fa66d1b025b646b946'\n            - 'SHA1=4a7d66874a0472a47087fabaa033a85d47413379'\n            - 'SHA1=012db3a80faf1f7f727b538cbe5d94064e7159de'\n            - 'SHA1=5d6b9e80e12bfc595d4d26f6afb099b3cb471dd4'\n            - 'SHA1=c6d349823bbb1f5b44bae91357895dba653c5861'\n            - 'SHA1=643383938d5e0d4fd30d302af3e9293a4798e392'\n            - 'SHA1=ace6b9e34e3e2e73fe584f3bbdb4e4ec106e0a7d'\n            - 'SHA1=1d0df45ee3fa758f0470e055915004e6eae54c95'\n            - 'SHA1=3599ea2ac1fa78f423423a4cf90106ea0938dde8'\n            - 'SHA1=f42f28d164205d9f6dab9317c9fecad54c38d5d2'\n            - 'SHA1=d9c09dd725bc7bc3c19b4db37866015817a516ef'\n            - 'SHA1=d5fd9fe10405c4f90235e583526164cd0902ed86'\n            - 'SHA1=0c74d09da7baf7c05360346e4c3512d0cd433d59'\n            - 'SHA1=9c256edd10823ca76c0443a330e523027b70522d'\n            - 'SHA1=65d8a7c2e867b22d1c14592b020c548dd0665646'\n            - 'SHA1=7859e75580570e23a1ef7208b9a76f81738043d5'\n            - 'SHA1=b242b0332b9c9e8e17ec27ef10d75503d20d97b6'\n            - 'SHA1=6523b3fd87de39eb5db1332e4523ce99556077dc'\n            - 'SHA1=ac600a2bc06b312d92e649b7b55e3e91e9d63451'\n            - 'SHA1=fe10018af723986db50701c8532df5ed98b17c39'\n            - 'SHA1=b9807b8840327c6d7fbdde45fc27de921f1f1a82'\n            - 'SHA1=a3636986cdcd1d1cb8ab540f3d5c29dcc90bb8f0'\n            - 'SHA1=054a50293c7b4eea064c91ef59cf120d8100f237'\n            - 'SHA1=2e3de9bff43d7712707ef8a0b10f7e4ad8427fd8'\n            - 'SHA1=485c0b9710a196c7177b99ee95e5ddb35b26ddd1'\n            - 'SHA1=faa870b0cb15c9ac2b9bba5d0470bd501ccd4326'\n            - 'SHA1=4a235f0b84ff615e2879fa9e0ec0d745fcfdaa5c'\n            - 'SHA1=0291d0457acaf0fe8ed5c3137302390469ce8b35'\n            - 'SHA1=8183a341ba6c3ce1948bf9be49ab5320e0ee324d'\n            - 'SHA1=5a7dd0da0aee0bdedc14c1b7831b9ce9178a0346'\n            - 'SHA1=6debce728bcff73d9d1d334df0c6b1c3735e295c'\n            - 'SHA1=b25170e09c9fb7c0599bfba3cf617187f6a733ac'\n            - 'SHA1=19f3343bfad0ef3595f41d60272d21746c92ffca'\n            - 'SHA1=a48aa80942fc8e0699f518de4fd6512e341d4196'\n            - 'SHA1=f6f11ad2cd2b0cf95ed42324876bee1d83e01775'\n            - 'SHA1=9a35ae9a1f95ce4be64adc604c80079173e4a676'\n            - 'SHA1=ea360a9f23bb7cf67f08b88e6a185a699f0c5410'\n            - 'SHA1=6a3d3b9ab3d201cd6b0316a7f9c3fb4d34d0f403'\n            - 'SHA1=08596732304351b311970ff96b21f451f23b1e25'\n            - 'SHA1=29a190727140f40cea9514a6420f5a195e36386b'\n            - 'SHA1=b4d014b5edd6e19ce0e8395a64faedf49688ecb5'\n            - 'SHA1=31fac347aa26e92db4d8c9e1ba37a7c7a2234f08'\n            - 'SHA1=fcde5275ee1913509927ce5f0f85e6681064c9d2'\n            - 'SHA1=f052dc35b74a1a6246842fbb35eb481577537826'\n            - 'SHA1=c52cef5b9e1d4a78431b7af56a6fdb6aa1bcad65'\n            - 'SHA1=33cdab3bbc8b3adce4067a1b042778607dce2acd'\n            - 'SHA1=2d503a2457a787014a1fdd48a2ece2e6cbe98ea7'\n            - 'SHA1=f9519d033d75e1ab6b82b2e156eafe9607edbcfb'\n            - 'SHA1=89909fa481ff67d7449ee90d24c167b17b0612f1'\n            - 'SHA1=a7d827a41b2c4b7638495cd1d77926f1ba902978'\n            - 'SHA1=c23eeb6f18f626ce1fd840227f351fa7543bb167'\n            - 'SHA1=3805e4e08ad342d224973ecdade8b00c40ed31be'\n            - 'SHA1=8302802b709ad242a81b939b6c90b3230e1a1f1e'\n            - 'SHA1=ac13941f436139b909d105ad55637e1308f49d9a'\n            - 'SHA1=92f251358b3fe86fd5e7aa9b17330afa0d64a705'\n            - 'SHA1=623cd2abef6c92255f79cbbd3309cb59176771da'\n            - 'SHA1=af50109b112995f8c82be8ef3a88be404510cdde'\n            - 'SHA1=a00e444120449e35641d58e62ed64bb9c9f518d2'\n            - 'SHA1=9923c8f1e565a05b3c738d283cf5c0ed61a0b90f'\n            - 'SHA1=7eec3a1edf3b021883a4b5da450db63f7c0afeeb'\n            - 'SHA1=078ae07dec258db4376d5a2a05b9b508d68c0123'\n            - 'SHA1=ef80da613442047697bec35ea228cde477c09a3d'\n            - 'SHA1=6003184788cd3d2fc624ca801df291ccc4e225ee'\n            - 'SHA1=558aad879b6a47d94a968f39d0a4e3a3aaef1ef1'\n            - 'SHA1=877c6c36a155109888fe1f9797b93cb30b4957ef'\n            - 'SHA1=f3cce7e79ab5bd055f311bb3ac44a838779270b6'\n            - 'SHA1=80fa962bdfb76dfcb9e5d13efc38bb3d392f2e77'\n            - 'SHA1=3b6b35bca1b05fafbfc883a844df6d52af44ccdc'\n            - 'SHA1=351cbd352b3ec0d5f4f58c84af732a0bf41b4463'\n            - 'SHA1=609fa1efcf61e26d64a5ceb13b044175ab2b3a13'\n            - 'SHA1=dc0e97adb756c0f30b41840a59b85218cbdd198f'\n            - 'SHA1=71469dce9c2f38d0e0243a289f915131bf6dd2a8'\n            - 'SHA1=05ac1c64ca16ab0517fe85d4499d08199e63df26'\n            - 'SHA1=2261198385d62d2117f50f631652eded0ecc71db'\n            - 'SHA1=414cd15d6c991d19fb5be02e3b9fb0e6c5ce731c'\n            - 'SHA1=8626ab1da6bfbdf61bd327eb944b39fd9df33d1d'\n            - 'SHA1=5fb9421be8a8b08ec395d05e00fd45eb753b593a'\n            - 'SHA1=d702d88b12233be9413446c445f22fda4a92a1d9'\n            - 'SHA1=e74b6dda8bc53bc687fc21218bd34062a78d8467'\n            - 'SHA1=a197a02025946aca96d6e74746f84774df31249e'\n            - 'SHA1=1f25f54e9b289f76604e81e98483309612c5a471'\n            - 'SHA1=e3c1dd569aa4758552566b0213ee4d1fe6382c4b'\n            - 'SHA1=879fcc6795cebe67718388228e715c470de87dca'\n            - 'SHA1=3ae56ab63230d6d9552360845b4a37b5801cc5ea'\n            - 'SHA1=74e4e3006b644392f5fcea4a9bae1d9d84714b57'\n            - 'SHA1=ce549714a11bd43b52be709581c6e144957136ec'\n            - 'SHA1=3abb9d0a9d600200ae19c706e570465ef0a15643'\n            - 'SHA1=fbf8b0613a2f7039aeb9fa09bd3b40c8ff49ded2'\n            - 'SHA1=cc51be79ae56bc97211f6b73cc905c3492da8f9d'\n            - 'SHA1=b03b1996a40bfea72e4584b82f6b845c503a9748'\n            - 'SHA1=0307d76750dd98d707c699aee3b626643afb6936'\n            - 'SHA1=8db869c0674221a2d3280143cbb0807fac08e0cc'\n            - 'SHA1=2f991435a6f58e25c103a657d24ed892b99690b8'\n            - 'SHA1=c948ae14761095e4d76b55d9de86412258be7afd'\n            - 'SHA1=3ef30c95e40a854cc4ded94fc503d0c3dc3e620e'\n            - 'SHA1=152b6bb9ffd2ffec00cc46f5c6e29362d0e66e67'\n            - 'SHA1=a7bd05de737f8ea57857f1e0845a25677df01872'\n            - 'SHA1=aca8e53483b40a06dfdee81bb364b1622f9156fe'\n            - 'SHA1=f36a47edfacd85e0c6d4d22133dd386aee4eec15'\n            - 'SHA1=bf87e32a651bdfd9b9244a8cf24fca0e459eb614'\n            - 'SHA1=bc47e15537fa7c32dfefd23168d7e1741f8477ed'\n            - 'SHA1=3ee2fd08137e9262d2e911158090e4a7c7427ea0'\n            - 'SHA1=4e826430a1389032f3fe06e2cc292f643fb0c417'\n            - 'SHA1=745bad097052134548fe159f158c04be5616afc2'\n            - 'SHA1=28b1c0b91eb6afd2d26b239c9f93beb053867a1a'\n            - 'SHA1=0466e90bf0e83b776ca8716e01d35a8a2e5f96d3'\n            - 'SHA1=e6765d8866cad6193df1507c18f31fa7f723ca3e'\n            - 'SHA1=1fd7f881ea4a1dbb5c9aeb9e7ad659a85421745b'\n            - 'SHA1=57511ef5ff8162a9d793071b5bf7ebe8371759de'\n            - 'SHA1=d098600152e5ee6a8238d414d2a77a34da8afaaa'\n            - 'SHA1=16d7ecf09fc98798a6170e4cef2745e0bee3f5c7'\n            - 'SHA1=8b6aa5b2bff44766ef7afbe095966a71bc4183fa'\n            - 'SHA1=c834c4931b074665d56ccab437dfcc326649d612'\n            - 'SHA1=8d59fd14a445c8f3f0f7991fa6cd717d466b3754'\n            - 'SHA1=d94f2fb3198e14bfe69b44fb9f00f2551f7248b2'\n            - 'SHA1=64e4ac8b9ea2f050933b7ec76a55dd04e97773b4'\n            - 'SHA1=93aa3bb934b74160446df3a47fa085fd7f3a6be9'\n            - 'SHA1=14bf0eaa90e012169745b3e30c281a327751e316'\n            - 'SHA1=738b7918d85e5cb4395df9e3f6fc94ddad90e939'\n            - 'SHA1=8c377ab4eebc5f4d8dd7bb3f90c0187dfdd3349f'\n            - 'SHA1=fff4f28287677caabc60c8ab36786c370226588d'\n            - 'SHA1=34c85afe6d84cd3deec02c0a72e5abfa7a2886c3'\n            - 'SHA1=3f223581409492172a1e875f130f3485b90fbe5f'\n            - 'SHA1=282bb241bda5c4c1b8eb9bf56d018896649ca0e1'\n            - 'SHA1=f1c8c3926d0370459a1b7f0cf3d17b22ff9d0c7f'\n            - 'SHA1=e83458c4a6383223759cd8024e60c17be4e7c85f'\n            - 'SHA1=d569d4bab86e70efbcdfdac9d822139d6f477b7c'\n            - 'SHA1=2a6e6bd51c7062ad24c02a4d2c1b5e948908d131'\n            - 'SHA1=a65fabaf64aa1934314aae23f25cdf215cbaa4b6'\n            - 'SHA1=c257aa4094539719a3c7b7950598ef872dbf9518'\n            - 'SHA1=1292c7dd60214d96a71e7705e519006b9de7968f'\n            - 'SHA1=b4d1554ec19504215d27de0758e13c35ddd6db3e'\n            - 'SHA1=994dc79255aeb662a672a1814280de73d405617a'\n            - 'SHA1=5dd2c31c4357a8b76db095364952b3d0e3935e1d'\n            - 'SHA1=21e6c104fe9731c874fab5c9560c929b2857b918'\n            - 'SHA1=e92817a8744ebc4e4fa5383cdce2b2977f01ecd4'\n            - 'SHA1=35f1ba60ba0da8512a0b1b15ee8e30fe240d77cd'\n            - 'SHA1=bb962c9a8dda93e94fef504c4159de881e4706fe'\n            - 'SHA1=82ba5513c33e056c3f54152c8555abf555f3e745'\n            - 'SHA1=f50c6b84dfb8f2d53ba3bce000a55f0a486c0e79'\n            - 'SHA1=cb3de54667548a5c9abf5d8fa47db4097fcee9f1'\n            - 'SHA1=0c26ab1299adcd9a385b541ef1653728270aa23e'\n            - 'SHA1=f02af84393e9627ba808d4159841854a6601cf80'\n            - 'SHA1=cb22723faa5ae2809476e5c5e9b9a597b26cab9b'\n            - 'SHA1=f9feb60b23ca69072ce42264cd821fe588a186a6'\n            - 'SHA1=160c96b5e5db8c96b821895582b501e3c2d5d6e7'\n            - 'SHA1=0b8b83f245d94107cb802a285e6529161d9a834d'\n            - 'SHA1=d7e8aef8c8feb87ce722c0b9abf34a7e6bab6eb4'\n            - 'SHA1=d7f7594ff084201c0d9fa2f4ef1626635b67bce5'\n            - 'SHA1=7d7c03e22049a725ace2a9812c72b53a66c2548b'\n            - 'SHA1=589a7d4df869395601ba7538a65afae8c4616385'\n            - 'SHA1=1f3799fed3cf43254fe30dcdfdb8dc02d82e662b'\n            - 'SHA1=72966ca845759d239d09da0de7eebe3abe86fee3'\n            - 'SHA1=0f780b7ada5dd8464d9f2cc537d973f5ac804e9c'\n            - 'SHA1=26c4a7b392d7e7bd7f0a2a758534e45c0d9a56ab'\n            - 'SHA1=7c6cad6a268230f6e08417d278dda4d66bb00d13'\n            - 'SHA1=d04e5db5b6c848a29732bfd52029001f23c3da75'\n            - 'SHA1=a87d6eac2d70a3fbc04e59412326b28001c179de'\n            - 'SHA1=cce9b82f01ec68f450f5fe4312f40d929c6a506e'\n            - 'SHA1=8cc8974a05e81678e3d28acfe434e7804abd019c'\n            - 'SHA1=1e7c241b9a9ea79061b50fb19b3d141dee175c27'\n            - 'SHA1=00b4e8b7644d1bf93f5ddb5740b444b445e81b02'\n            - 'SHA1=4d41248078181c7f61e6e4906aa96bbdea320dc2'\n            - 'SHA1=f3db629cfe37a73144d5258e64d9dd8b38084cf4'\n            - 'SHA1=d2e6fc9259420f0c9b6b1769be3b1f63eb36dc57'\n            - 'SHA1=99201c9555e5faf6e8d82da793b148311f8aa4b8'\n            - 'SHA1=a2e0b3162cfa336cd4ab40a2acc95abe7dc53843'\n            - 'SHA1=12d38abbc5391369a4c14f3431715b5b76ac5a2a'\n            - 'SHA1=b4dcdbd97f38b24d729b986f84a9cdb3fc34d59f'\n            - 'SHA1=490109fa6739f114651f4199196c5121d1c6bdf2'\n            - 'SHA1=e5021a98e55d514e2376aa573d143631e5ee1c13'\n            - 'SHA1=af6e1f2cfb230907476e8b2d676129b6d6657124'\n            - 'SHA1=ddbe809b731a0962e404a045ab9e65a0b64917ad'\n            - 'SHA1=b480c54391a2a2f917a44f91a5e9e4590648b332'\n            - 'SHA1=a21c84c6bf2e21d69fa06daaf19b4cc34b589347'\n            - 'SHA1=dc55217b6043d819eadebd423ff07704ee103231'\n            - 'SHA1=6053d258096bccb07cb0057d700fe05233ab1fbb'\n            - 'SHA1=b0032b8d8e6f4bd19a31619ce38d8e010f29a816'\n            - 'SHA1=eb93d2f564fea9b3dc350f386b45de2cd9a3e001'\n            - 'SHA1=8692274681e8d10c26ddf2b993f31974b04f5bf0'\n            - 'SHA1=f5696fb352a3fbd14fb1a89ad21a71776027f9ab'\n            - 'SHA1=5db61d00a001fd493591dc919f69b14713889fc5'\n            - 'SHA1=2b4d0dead4c1a7cc95543748b3565cfa802e5256'\n            - 'SHA1=205c69f078a563f54f4c0da2d02a25e284370251'\n            - 'SHA1=7c1b25518dee1e30b5a6eaa1ea8e4a3780c24d0c'\n            - 'SHA1=35829e096a15e559fcbabf3441d99e580ca3b26e'\n            - 'SHA1=17fa047c1f979b180644906fe9265f21af5b0509'\n            - 'SHA1=ec4cc6de4c779bb1ca1dd32ee3a03f7e8d633a9b'\n            - 'SHA1=461882bd59887617cadc1c7b2b22d0a45458c070'\n            - 'SHA1=7838fb56fdab816bc1900a4720eea2fc9972ef7a'\n            - 'SHA1=1f3a9265963b660392c4053329eb9436deeed339'\n            - 'SHA1=e09b5e80805b8fe853ea27d8773e31bff262e3f7'\n            - 'SHA1=5f8356ffa8201f338dd2ea979eb47881a6db9f03'\n            - 'SHA1=37e6450c7cd6999d080da94b867ba23faa8c32fe'\n            - 'SHA1=7ab4565ba24268f0adadb03a5506d4eb1dc7c181'\n            - 'SHA1=00a442a4305c62cefa8105c0b4c4a9a5f4d1e93b'\n            - 'SHA1=9c24dd75e4074041dbe03bf21f050c77d748b8e9'\n            - 'SHA1=3270720a066492b046d7180ca6e60602c764cac7'\n            - 'SHA1=0b6ec2aedc518849a1c61a70b1f9fb068ede2bc3'\n            - 'SHA1=814200191551faec65b21f5f6819b46c8fc227a3'\n            - 'SHA1=696d68bdbe1d684029aaad2861c49af56694473a'\n            - 'SHA1=b89a8eef5aeae806af5ba212a8068845cafdab6f'\n            - 'SHA1=15df139494d2c40a645fb010908551185c27f3c5'\n            - 'SHA1=947db58d6f36a8df9fa2a1057f3a7f653ccbc42e'\n            - 'SHA1=fe1d909ab38de1389a2a48352fd1c8415fd2eab0'\n            - 'SHA1=7667b72471689151e176baeba4e1cd9cd006a09a'\n            - 'SHA1=d25340ae8e92a6d29f599fef426a2bc1b5217299'\n            - 'SHA1=6abbc3003c7aa69ce79cbbcd2e3210b07f21d202'\n            - 'SHA1=d34a7c497c603f3f7fcad546dc4097c2da17c430'\n            - 'SHA1=b8de3a1aeeda9deea43e3f768071125851c85bd0'\n            - 'SHA1=9c6749fc6c1127f8788bff70e0ce9062959637c9'\n            - 'SHA1=4268f30b79ce125a81d0d588bef0d4e2ad409bbb'\n            - 'SHA1=213ba055863d4226da26a759e8a254062ea77814'\n            - 'SHA1=a4b2c56c12799855162ca3b004b4b2078c6ecf77'\n            - 'SHA1=27eab595ec403580236e04101172247c4f5d5426'\n            - 'SHA1=d62fa51e520022483bdc5847141658de689c0c29'\n            - 'SHA1=ccdd3a1ebe9a1c8f8a72af20a05a10f11da1d308'\n            - 'SHA1=8fb149fc476cf5bf18dc575334edad7caf210996'\n            - 'SHA1=e35a2b009d54e1a0b231d8a276251f64231b66a3'\n            - 'SHA1=d0d39e1061f30946141b6ecfa0957f8cc3ddeb63'\n       ",
      "question": "load of known vulnerable drivers by hash value",
      "answer": "In order to detect the load of known vulnerable drivers by hash value, you should monitor Windows systems for events related to driver loading, specifically focusing on the hash values of the drivers being loaded. An alert should be generated if any of the following specific MD5 or SHA1 hash values are observed, as these hashes have been identified as corresponding to vulnerable drivers:\n\n- MD5 Hashes:  \n  1b5c3c458e31bede55145d0644e88d75, 6f5d54ab483659ac78672440422ae3f1, and so forth, up to the provided list which includes 98763a3dee3cf03de334f00f95fc071a, e79c91c27df3eaf82fb7bd1280172517, and all others listed in the MD5 section.\n\n- SHA1 Hashes:  \n  f0c463d29a5914b01e4607889094f1b7d95e7aaf, a804ebec7e341b4d98d9e94f6e4860a55ea1638d, and so forth, through the remaining SHA1 hashes including 8fb149fc476cf5bf18dc575334edad7caf210996, e35a2b009d54e1a0b231d8a276251f64231b66a3, and any others provided in the SHA1 hashes list.\n\nKeeping track of the loaded drivers by their hash values helps in identifying potentially malicious activity related to known vulnerabilities. This detection mechanism is crucial for preventing security breaches that exploit these vulnerabilities. Monitoring should be performed specifically on the driver load category using tools like Sysmon, which can track and log the necessary information for detecting these vulnerabilities based on driver hash values."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor. As seen used in the DAMP project..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor, as seen used in the DAMP project, you should: Focus on the monitoring of PowerShell scripts within Windows environments by ensuring that Script Block Logging is enabled. Specifically, watch for scripts that contain the terms 'win32_Trustee', 'win32_Ace', '.AccessMask', '.AceType', and '.SetSecurityDescriptor'. These terms are indicative of actions taken to manipulate security descriptors. Additionally, the presence of strings such as '\\Lsa\\JD', '\\Lsa\\Skew1', '\\Lsa\\Data', '\\Lsa\\GBG' within the scripts should also raise alerts. These are associated with attempts to interact with or manipulate Windows Security Accounts Manager (SAM) database files, potentially to create backdoors. Given the sophisticated nature of these techniques, this monitoring approach is set to a high alert level due to the rarity and potential impact of such actions, although it acknowledges the possibility of unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'win32_Trustee'\n            - 'win32_Ace'\n            - '.AccessMask'\n            - '.AceType'\n            - '.SetSecurityDescriptor'\n        ScriptBlockText|contains:\n            - '\\Lsa\\JD'\n            - '\\Lsa\\Skew1'\n            - '\\Lsa\\Data'\n            - '\\Lsa\\GBG'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'win32_Trustee'\n            - 'win32_Ace'\n            - '.AccessMask'\n            - '.AceType'\n            - '.SetSecurityDescriptor'\n        ScriptBlockText|contains:\n            - '\\Lsa\\JD'\n            - '\\Lsa\\Skew1'\n            - '\\Lsa\\Data'\n            - '\\Lsa\\GBG'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor. As seen used in the DAMP project.",
      "answer": "In order to detect usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor, as seen used in the DAMP project, you should: Focus on the monitoring of PowerShell scripts within Windows environments by ensuring that Script Block Logging is enabled. Specifically, watch for scripts that contain the terms 'win32_Trustee', 'win32_Ace', '.AccessMask', '.AceType', and '.SetSecurityDescriptor'. These terms are indicative of actions taken to manipulate security descriptors. Additionally, the presence of strings such as '\\Lsa\\JD', '\\Lsa\\Skew1', '\\Lsa\\Data', '\\Lsa\\GBG' within the scripts should also raise alerts. These are associated with attempts to interact with or manipulate Windows Security Accounts Manager (SAM) database files, potentially to create backdoors. Given the sophisticated nature of these techniques, this monitoring approach is set to a high alert level due to the rarity and potential impact of such actions, although it acknowledges the possibility of unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt using the JDNIExploiit Kit.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts using the JNDIExploit Kit, you should monitor web server logs for specific keywords that indicate an attack attempt. These keywords are paths or strings that are commonly used by attackers leveraging the JNDIExploit Kit. The focus should be on various pathways that attackers may employ, including basic commands, reverse shell commands, and memory shell injections targeting several Java-based web servers and applications like Tomcat, Jetty, Weblogic, JBoss, Websphere, and Spring framework, among others. Additionally, look for signs of deserialization attacks and methods used to bypass security in Tomcat and Websphere, including DNS logging, command execution, and file upload paths encoded in Base64.\n\nThe attack indicators cover a range of techniques from simple command execution, reverse shells, and memory shell injections to more sophisticated deserialization attacks and bypasses exploiting Groovy scripting and specific vulnerabilities in Java environments. Each keyword represents a tactic or technique an attacker might use to exploit vulnerabilities within the web server or application framework.\n\nThe log source of interest here is the web server, as the exploitation attempts by the JNDIExploit Kit are likely to leave traces in the web server's access or error logs when the attacker attempts to inject malicious payloads.\n\nIt is essential to be aware of potential false positives, as legitimate applications might use paths or functionalities that mimic malicious activity covered by these keywords. This detection strategy tags various tactics and techniques associated with the exploitation attempts, including execution, defense evasion, and privilege escalation, without directly referencing the MITRE ATT&CK framework.\n\nBy keeping an eye on these specific keywords within web server logs and understanding the context in which they may appear, defenders can effectively identify and respond to attempts to exploit vulnerabilities using the JNDIExploit Kit. This comprehensive monitoring is crucial for maintaining the security and integrity of web applications and their underlying servers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    keywords:\n        - '/Basic/Command/Base64/'\n        - '/Basic/ReverseShell/'\n        - '/Basic/TomcatMemshell'\n        - '/Basic/JettyMemshell'\n        - '/Basic/WeblogicMemshell'\n        - '/Basic/JBossMemshell'\n        - '/Basic/WebsphereMemshell'\n        - '/Basic/SpringMemshell'\n        - '/Deserialization/URLDNS/'\n        - '/Deserialization/CommonsCollections1/Dnslog/'\n        - '/Deserialization/CommonsCollections2/Command/Base64/'\n        - '/Deserialization/CommonsBeanutils1/ReverseShell/'\n        - '/Deserialization/Jre8u20/TomcatMemshell'\n        - '/TomcatBypass/Dnslog/'\n        - '/TomcatBypass/Command/'\n        - '/TomcatBypass/ReverseShell/'\n        - '/TomcatBypass/TomcatMemshell'\n        - '/TomcatBypass/SpringMemshell'\n        - '/GroovyBypass/Command/'\n        - '/WebsphereBypass/Upload/'\n    condition: keywords\nfalsepositives:\n    - Legitimate apps the use these paths\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    keywords:\n        - '/Basic/Command/Base64/'\n        - '/Basic/ReverseShell/'\n        - '/Basic/TomcatMemshell'\n        - '/Basic/JettyMemshell'\n        - '/Basic/WeblogicMemshell'\n        - '/Basic/JBossMemshell'\n        - '/Basic/WebsphereMemshell'\n        - '/Basic/SpringMemshell'\n        - '/Deserialization/URLDNS/'\n        - '/Deserialization/CommonsCollections1/Dnslog/'\n        - '/Deserialization/CommonsCollections2/Command/Base64/'\n        - '/Deserialization/CommonsBeanutils1/ReverseShell/'\n        - '/Deserialization/Jre8u20/TomcatMemshell'\n        - '/TomcatBypass/Dnslog/'\n        - '/TomcatBypass/Command/'\n        - '/TomcatBypass/ReverseShell/'\n        - '/TomcatBypass/TomcatMemshell'\n        - '/TomcatBypass/SpringMemshell'\n        - '/GroovyBypass/Command/'\n        - '/WebsphereBypass/Upload/'\n    condition: keywords\nfalsepositives:\n    - Legitimate apps the use these paths\nlevel: high\n",
      "question": "exploitation attempt using the JDNIExploiit Kit",
      "answer": "In order to detect exploitation attempts using the JNDIExploit Kit, you should monitor web server logs for specific keywords that indicate an attack attempt. These keywords are paths or strings that are commonly used by attackers leveraging the JNDIExploit Kit. The focus should be on various pathways that attackers may employ, including basic commands, reverse shell commands, and memory shell injections targeting several Java-based web servers and applications like Tomcat, Jetty, Weblogic, JBoss, Websphere, and Spring framework, among others. Additionally, look for signs of deserialization attacks and methods used to bypass security in Tomcat and Websphere, including DNS logging, command execution, and file upload paths encoded in Base64.\n\nThe attack indicators cover a range of techniques from simple command execution, reverse shells, and memory shell injections to more sophisticated deserialization attacks and bypasses exploiting Groovy scripting and specific vulnerabilities in Java environments. Each keyword represents a tactic or technique an attacker might use to exploit vulnerabilities within the web server or application framework.\n\nThe log source of interest here is the web server, as the exploitation attempts by the JNDIExploit Kit are likely to leave traces in the web server's access or error logs when the attacker attempts to inject malicious payloads.\n\nIt is essential to be aware of potential false positives, as legitimate applications might use paths or functionalities that mimic malicious activity covered by these keywords. This detection strategy tags various tactics and techniques associated with the exploitation attempts, including execution, defense evasion, and privilege escalation, without directly referencing the MITRE ATT&CK framework.\n\nBy keeping an eye on these specific keywords within web server logs and understanding the context in which they may appear, defenders can effectively identify and respond to attempts to exploit vulnerabilities using the JNDIExploit Kit. This comprehensive monitoring is crucial for maintaining the security and integrity of web applications and their underlying servers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell scripts that try to access the default Windows MailApp MailBox. This indicates manipulation of or access to the stored emails of a user. E.g. this could be used by an attacker to exfiltrate or delete the content of the emails..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell scripts that try to access the default Windows MailApp MailBox, indicating manipulation of or access to the stored emails of a user, such as potentially allowing an attacker to exfiltrate or delete the content of the emails, you should monitor Windows PowerShell script activities. Focus on identifying scripts engaging with the directory path that includes '\\Comms\\Unistore\\data', which is associated with the location where Windows MailApp stores emails. This surveillance should be implemented under the ps_script category for Windows, ensuring the monitoring aligns with the needed detection of unauthorized access or manipulation attempts directed at a user's stored email content. The identification process should rely on recognizing specific script text patterns that contain the mentioned directory path. While detections at this level are rated with a medium level of confidence, it is essential to consider that there might be scenarios where legitimate activities could cause similar detections, though such cases are usually labeled as unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: bade5735-5ab0-4aa7-a642-a11be0e40872\ndetection:\n    selection:\n        ScriptBlockText|contains: '\\Comms\\Unistore\\data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: bade5735-5ab0-4aa7-a642-a11be0e40872\ndetection:\n    selection:\n        ScriptBlockText|contains: '\\Comms\\Unistore\\data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "PowerShell scripts that try to access the default Windows MailApp MailBox. This indicates manipulation of or access to the stored emails of a user. E.g. this could be used by an attacker to exfiltrate or delete the content of the emails.",
      "answer": "In order to detect PowerShell scripts that try to access the default Windows MailApp MailBox, indicating manipulation of or access to the stored emails of a user, such as potentially allowing an attacker to exfiltrate or delete the content of the emails, you should monitor Windows PowerShell script activities. Focus on identifying scripts engaging with the directory path that includes '\\Comms\\Unistore\\data', which is associated with the location where Windows MailApp stores emails. This surveillance should be implemented under the ps_script category for Windows, ensuring the monitoring aligns with the needed detection of unauthorized access or manipulation attempts directed at a user's stored email content. The identification process should rely on recognizing specific script text patterns that contain the mentioned directory path. While detections at this level are rated with a medium level of confidence, it is essential to consider that there might be scenarios where legitimate activities could cause similar detections, though such cases are usually labeled as unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\gup.exe'\n        ImageLoaded|endswith: '\\libcurl.dll'\n    filter_main_notepad_plusplus:\n        Image|endswith: '\\Notepad++\\updater\\GUP.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\gup.exe'\n        ImageLoaded|endswith: '\\libcurl.dll'\n    filter_main_notepad_plusplus:\n        Image|endswith: '\\Notepad++\\updater\\GUP.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location",
      "answer": "In order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting processes setting a new DLL in DllName in under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nAdversaries may abuse time providers to execute DLLs when the system boots.\nThe Windows Time service (W32Time) enables time synchronization across and within domains.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect processes setting a new DLL in DllName under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider, as adversaries may abuse time providers to execute DLLs when the system boots, you should: Focus on monitoring registry set actions within Windows systems, specifically looking at events where the type is SetValue. This involves scrutinizing any changes made to the \u2018DllName\u2019 fields that start with 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders' and end with 'DllName'. It is crucial to exclude any events that specifically alter the Details to \u2018C:\\Windows\\SYSTEM32\\w32time.DLL\u2019 as this is considered a legitimate action and not part of this targeted detection process. No known false positives have been identified, indicating the high specificity of the conditions outlined, which underscores the importance of this monitoring in securing against adversaries exploiting the Windows Time service for malicious DLL execution as part of their initial access strategy or persistence mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders'\n        TargetObject|endswith: 'DllName'\n    filter:\n        Details: 'C:\\Windows\\SYSTEM32\\w32time.DLL'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders'\n        TargetObject|endswith: 'DllName'\n    filter:\n        Details: 'C:\\Windows\\SYSTEM32\\w32time.DLL'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "processes setting a new DLL in DllName in under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nAdversaries may abuse time providers to execute DLLs when the system boots.\nThe Windows Time service (W32Time) enables time synchronization across and within domains.\n",
      "answer": "In order to detect processes setting a new DLL in DllName under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider, as adversaries may abuse time providers to execute DLLs when the system boots, you should: Focus on monitoring registry set actions within Windows systems, specifically looking at events where the type is SetValue. This involves scrutinizing any changes made to the \u2018DllName\u2019 fields that start with 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders' and end with 'DllName'. It is crucial to exclude any events that specifically alter the Details to \u2018C:\\Windows\\SYSTEM32\\w32time.DLL\u2019 as this is considered a legitimate action and not part of this targeted detection process. No known false positives have been identified, indicating the high specificity of the conditions outlined, which underscores the importance of this monitoring in securing against adversaries exploiting the Windows Time service for malicious DLL execution as part of their initial access strategy or persistence mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands, you should monitor application logs for specific events related to this activity. The focus is on the Windows environment, particularly the MSSQL audit policy, which needs to be configured to record activities associated with the 'xp_cmdshell' stored procedure. This enables the capture of relevant events in the application log.\n\nFor effective monitoring, look for logs generated under the 'MSSQLSERVER' provider name, specifically events with the ID 33205. These logs should contain data indicating both the use of 'xp_cmdshell' and the execution of a command, signified by 'object_name:xp_cmdshell' and 'statement:EXEC' within the data field of the event. It's essential to ensure that the MSSQL audit policy is properly set up to track 'xp_cmdshell' usage as detailed in guides and tutorials focused on this topic.\n\nSince there's a possibility of encountering records that are not indicative of malicious activity, be aware of potential false positives. However, given the high level of concern associated with the unauthorized use of 'xp_cmdshell' to execute commands, any detection of such events should be treated with a high level of scrutiny. \n\nTags associated with this detection focus on the tactics and techniques commonly used by attackers, explicitly invoking command and script interpreters to execute commands via 'xp_cmdshell', which aligns with the detection goal. Monitoring for these specific conditions in the application logs is critical for identifying potentially malicious activities involving the misuse of stored procedures to execute system-level commands.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy to monitor for 'xp_cmdshell' must be enabled in order to receive this event in the application log (Follow this tutorial https://dba.stackexchange.com/questions/103183/is-there-any-way-to-monitor-execution-of-xp-cmdshell-in-sql-server-2012)\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains|all:\n            # You can modify this to include specific commands\n            - 'object_name:xp_cmdshell'\n            - 'statement:EXEC'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy to monitor for 'xp_cmdshell' must be enabled in order to receive this event in the application log (Follow this tutorial https://dba.stackexchange.com/questions/103183/is-there-any-way-to-monitor-execution-of-xp-cmdshell-in-sql-server-2012)\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains|all:\n            # You can modify this to include specific commands\n            - 'object_name:xp_cmdshell'\n            - 'statement:EXEC'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands",
      "answer": "In order to detect when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands, you should monitor application logs for specific events related to this activity. The focus is on the Windows environment, particularly the MSSQL audit policy, which needs to be configured to record activities associated with the 'xp_cmdshell' stored procedure. This enables the capture of relevant events in the application log.\n\nFor effective monitoring, look for logs generated under the 'MSSQLSERVER' provider name, specifically events with the ID 33205. These logs should contain data indicating both the use of 'xp_cmdshell' and the execution of a command, signified by 'object_name:xp_cmdshell' and 'statement:EXEC' within the data field of the event. It's essential to ensure that the MSSQL audit policy is properly set up to track 'xp_cmdshell' usage as detailed in guides and tutorials focused on this topic.\n\nSince there's a possibility of encountering records that are not indicative of malicious activity, be aware of potential false positives. However, given the high level of concern associated with the unauthorized use of 'xp_cmdshell' to execute commands, any detection of such events should be treated with a high level of scrutiny. \n\nTags associated with this detection focus on the tactics and techniques commonly used by attackers, explicitly invoking command and script interpreters to execute commands via 'xp_cmdshell', which aligns with the detection goal. Monitoring for these specific conditions in the application logs is critical for identifying potentially malicious activities involving the misuse of stored procedures to execute system-level commands."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc), you should monitor Windows images loaded for occurrences when `wmic.exe` is executed in conjunction with either `jscript.dll` or `vbscript.dll`. These libraries are indicative of script execution which can be an attempt to execute arbitrary JavaScript or VBScript code through wmic's ability to process XSL files. However, note that not all instances where `wmic.exe` loads `vbscript.dll` or `jscript.dll` are malicious. For example, legitimate commands like `wmic os get lastboottuptime` or `wmic os get locale`, which also load `vbscript.dll`, should not be considered indicators of this attack. Consequently, to mitigate potential false positives and gain further insight into the context of the `wmic.exe` execution, it's advisable to investigate related process creation events, command line arguments, and the parent-child process relationships. This approach ensures a more accurate determination of whether the activity is malevolent, especially since the sole image load event data may not provide sufficient context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        ImageLoaded|endswith:\n            - '\\jscript.dll'\n            - '\\vbscript.dll'\n    condition: selection\nfalsepositives:\n    - The command wmic os get lastboottuptime loads vbscript.dll\n    - The command wmic os get locale loads vbscript.dll\n    - Since the ImageLoad event doesn't have enough information in this case. It's better to look at the recent process creation events that spawned the WMIC process and investigate the command line and parent/child processes to get more insights\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        ImageLoaded|endswith:\n            - '\\jscript.dll'\n            - '\\vbscript.dll'\n    condition: selection\nfalsepositives:\n    - The command wmic os get lastboottuptime loads vbscript.dll\n    - The command wmic os get locale loads vbscript.dll\n    - Since the ImageLoad event doesn't have enough information in this case. It's better to look at the recent process creation events that spawned the WMIC process and investigate the command line and parent/child processes to get more insights\nlevel: medium\n",
      "question": "threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc).",
      "answer": "In order to detect threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc), you should monitor Windows images loaded for occurrences when `wmic.exe` is executed in conjunction with either `jscript.dll` or `vbscript.dll`. These libraries are indicative of script execution which can be an attempt to execute arbitrary JavaScript or VBScript code through wmic's ability to process XSL files. However, note that not all instances where `wmic.exe` loads `vbscript.dll` or `jscript.dll` are malicious. For example, legitimate commands like `wmic os get lastboottuptime` or `wmic os get locale`, which also load `vbscript.dll`, should not be considered indicators of this attack. Consequently, to mitigate potential false positives and gain further insight into the context of the `wmic.exe` execution, it's advisable to investigate related process creation events, command line arguments, and the parent-child process relationships. This approach ensures a more accurate determination of whether the activity is malevolent, especially since the sole image load event data may not provide sufficient context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of rundll32.exe that has been renamed to a different name to avoid detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of rundll32.exe that has been renamed to a different name to avoid detection, you should monitor the creation of processes on Windows systems. Specifically, look for occurrences where a process is started with an original filename indicating it is 'RUNDLL32.EXE', but the actual image (executable path) does not end with '\\rundll32.exe'. This discrepancy suggests that the file might have been renamed to bypass security measures. It's important to pay close attention to such activities, although it's worth noting that cases not fitting this pattern could occur, their rarity warrants a high level of scrutiny owing to the potential security implications.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'RUNDLL32.EXE'\n    filter:\n        Image|endswith: '\\rundll32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'RUNDLL32.EXE'\n    filter:\n        Image|endswith: '\\rundll32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of rundll32.exe that has been renamed to a different name to avoid detection",
      "answer": "In order to detect the execution of rundll32.exe that has been renamed to a different name to avoid detection, you should monitor the creation of processes on Windows systems. Specifically, look for occurrences where a process is started with an original filename indicating it is 'RUNDLL32.EXE', but the actual image (executable path) does not end with '\\rundll32.exe'. This discrepancy suggests that the file might have been renamed to bypass security measures. It's important to pay close attention to such activities, although it's worth noting that cases not fitting this pattern could occur, their rarity warrants a high level of scrutiny owing to the potential security implications.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting flags often used with the LOLBAS Esentutl for malicious activity. It could be used in rare cases by administrators to access locked files or during maintenance..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect flags often used with the LOLBAS Esentutl for malicious activity, which could be used in rare cases by administrators to access locked files or during maintenance, you should: Monitor process creation logs in Windows systems for command lines that contain both the '/vss' and '/y' flags. These specific arguments are typically associated with potentially malicious utilization of the Esentutl utility to manipulate or access locked files, which is a behavior often observed in various attack scenarios. It's important to note significant occurrences when these command line arguments are present together, as they could indicate an ongoing or attempted compromise. However, also be aware that these flags could appear in legitimate administrative or maintenance tasks. Therefore, while detections at this level are considered high importance, it's necessary to investigate and differentiate between malicious activities and benign, administrative use to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' /vss '\n            - ' /y '\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' /vss '\n            - ' /y '\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
      "question": "flags often used with the LOLBAS Esentutl for malicious activity. It could be used in rare cases by administrators to access locked files or during maintenance.",
      "answer": "In order to detect flags often used with the LOLBAS Esentutl for malicious activity, which could be used in rare cases by administrators to access locked files or during maintenance, you should: Monitor process creation logs in Windows systems for command lines that contain both the '/vss' and '/y' flags. These specific arguments are typically associated with potentially malicious utilization of the Esentutl utility to manipulate or access locked files, which is a behavior often observed in various attack scenarios. It's important to note significant occurrences when these command line arguments are present together, as they could indicate an ongoing or attempted compromise. However, also be aware that these flags could appear in legitimate administrative or maintenance tasks. Therefore, while detections at this level are considered high importance, it's necessary to investigate and differentiate between malicious activities and benign, administrative use to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities. Notable capabilities could be \"OpenSSH\" and others..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities, notably OpenSSH among others, you should: Monitor for process creation events within Windows systems, specifically focusing on executions of PowerShell (either the traditional PowerShell.exe or the newer pwsh.exe, which can also be identified by the original file names PowerShell.EXE and pwsh.dll). Additionally, it's critical to examine the command lines of these instances for specific indicators. Look for the presence of the 'Add-WindowsCapability' cmdlet which signifies an attempt to add new capabilities to the system. Furthermore, pay attention to command lines containing references to 'OpenSSH.', encompassing both \"OpenSSH.Server\" and \"OpenSSH.Client\" installations. This method captures a broad spectrum of potentially unauthorized or malicious modifications to the system's capabilities. However, be aware that there may be legitimate reasons for users or administrators to use these commands and capabilities, necessitating refined filters or verification steps to distinguish between malignant and benign activities. The detected activities are associated with MITRE ATT&CK tactics and techniques related to system privileges escalation and persistence through adding new software or capabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cmdlet:\n        CommandLine|contains: 'Add-WindowsCapability'\n    selection_capa:\n        CommandLine|contains: 'OpenSSH.' # For both \"OpenSSH.Server\" and \"OpenSSH.Client\"\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the capabilities by administrators or users. Add additional filters accordingly.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cmdlet:\n        CommandLine|contains: 'Add-WindowsCapability'\n    selection_capa:\n        CommandLine|contains: 'OpenSSH.' # For both \"OpenSSH.Server\" and \"OpenSSH.Client\"\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the capabilities by administrators or users. Add additional filters accordingly.\nlevel: medium\n",
      "question": "usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities. Notable capabilities could be \"OpenSSH\" and others.",
      "answer": "In order to detect the usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities, notably OpenSSH among others, you should: Monitor for process creation events within Windows systems, specifically focusing on executions of PowerShell (either the traditional PowerShell.exe or the newer pwsh.exe, which can also be identified by the original file names PowerShell.EXE and pwsh.dll). Additionally, it's critical to examine the command lines of these instances for specific indicators. Look for the presence of the 'Add-WindowsCapability' cmdlet which signifies an attempt to add new capabilities to the system. Furthermore, pay attention to command lines containing references to 'OpenSSH.', encompassing both \"OpenSSH.Server\" and \"OpenSSH.Client\" installations. This method captures a broad spectrum of potentially unauthorized or malicious modifications to the system's capabilities. However, be aware that there may be legitimate reasons for users or administrators to use these commands and capabilities, necessitating refined filters or verification steps to distinguish between malignant and benign activities. The detected activities are associated with MITRE ATT&CK tactics and techniques related to system privileges escalation and persistence through adding new software or capabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT, you should: focus on Windows registry settings as the primary log source. Monitor any 'SetValue' EventType within Windows Registry, specifically targeting changes made to the registry keys that fall under '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\S-1-5-21-' combined with '\\ProfileImagePath'. Look for modifications that include the terms 'ANONYMOUS' or '_DomainUser_' within the details of these registry changes. These specific modifications are indicative of the creation of a new user profile, which can be tied to malicious activities, particularly to tactics and techniques employed by COLDSTEEL RAT variants. It's important to note that while this detection strategy is set at a high level of importance, there may still be occurrences where legitimate activities could trigger a false positive, though such instances are currently unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\S-1-5-21-'\n            - '\\ProfileImagePath'\n        Details|contains:\n            - 'ANONYMOUS'\n            - '_DomainUser_'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\S-1-5-21-'\n            - '\\ProfileImagePath'\n        Details|contains:\n            - 'ANONYMOUS'\n            - '_DomainUser_'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT.",
      "answer": "In order to detect the creation of a new user profile with a specific username, seen being used by some variants of the COLDSTEEL RAT, you should: focus on Windows registry settings as the primary log source. Monitor any 'SetValue' EventType within Windows Registry, specifically targeting changes made to the registry keys that fall under '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\S-1-5-21-' combined with '\\ProfileImagePath'. Look for modifications that include the terms 'ANONYMOUS' or '_DomainUser_' within the details of these registry changes. These specific modifications are indicative of the creation of a new user profile, which can be tied to malicious activities, particularly to tactics and techniques employed by COLDSTEEL RAT variants. It's important to note that while this detection strategy is set at a high level of importance, there may still be occurrences where legitimate activities could trigger a false positive, though such instances are currently unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product and OriginalFileName strings.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product, and OriginalFileName strings, you should: Look for process creation events in Windows systems that indicate the execution of NetSupport Remote Control software. Specifically, monitor for processes where the Product name includes 'NetSupport Remote Control', the OriginalFileName contains 'client32.exe', or the Imphash matches 'a9d50692e95b79723f3e76fcf70d023e'. Additionally, check for processes where IMPHASH is 'A9D50692E95B79723F3E76FCF70D023E'. It's critical to exclude any events where the Image path ends with '\\client32.exe' to avoid detecting the legitimate use of client32.exe. This approach aims to identify attempts to use the NetSupport Remote Administration Tool (RAT) in a malicious manner by renaming its executable, which is a common tactic to evade detection by security software. Attention to these details can help in identifying unauthorized remote control activities, which could be indicative of a broader cyber attack or malicious activity within the network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Product|contains: 'NetSupport Remote Control'\n        - OriginalFileName|contains: 'client32.exe'\n        - Imphash: a9d50692e95b79723f3e76fcf70d023e\n        - Hashes|contains: IMPHASH=A9D50692E95B79723F3E76FCF70D023E\n    filter:\n        Image|endswith: '\\client32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Product|contains: 'NetSupport Remote Control'\n        - OriginalFileName|contains: 'client32.exe'\n        - Imphash: a9d50692e95b79723f3e76fcf70d023e\n        - Hashes|contains: IMPHASH=A9D50692E95B79723F3E76FCF70D023E\n    filter:\n        Image|endswith: '\\client32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product and OriginalFileName strings",
      "answer": "In order to detect the execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product, and OriginalFileName strings, you should: Look for process creation events in Windows systems that indicate the execution of NetSupport Remote Control software. Specifically, monitor for processes where the Product name includes 'NetSupport Remote Control', the OriginalFileName contains 'client32.exe', or the Imphash matches 'a9d50692e95b79723f3e76fcf70d023e'. Additionally, check for processes where IMPHASH is 'A9D50692E95B79723F3E76FCF70D023E'. It's critical to exclude any events where the Image path ends with '\\client32.exe' to avoid detecting the legitimate use of client32.exe. This approach aims to identify attempts to use the NetSupport Remote Administration Tool (RAT) in a malicious manner by renaming its executable, which is a common tactic to evade detection by security software. Attention to these details can help in identifying unauthorized remote control activities, which could be indicative of a broader cyber attack or malicious activity within the network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service ticket requests using RC4 encryption type.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect service ticket requests using RC4 encryption type, you should focus on Windows security event logs. Specifically, monitor for event ID 4769, which indicates a service ticket request. The detection hinges on identifying instances where the ticket options field equals '0x40810000' and the ticket encryption type field is set to '0x17', which corresponds to RC4 encryption. However, it's important to filter out and not alert on events where the service name ends with a '$' sign, as these are often legitimate service account activities, particularly on legacy systems or within Windows Domains with Domain Functional Level (DFL) 2003. Be aware of potential false positives, especially concerning service accounts used on legacy systems like NetApp, or in environments with older Windows Domain configurations. The severity level for this activity is considered medium, indicating it's important but not an immediate critical threat. This approach is aligned with understanding the usage of deprecated or less secure encryption types in service ticket requests, which can be indicative of an attacker's attempt to exploit weaker encryption for credential access or lateral movement within a network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4769\n        TicketOptions: '0x40810000'\n        TicketEncryptionType: '0x17'\n    reduction:\n        ServiceName|endswith: '$'\n    condition: selection and not reduction\nfalsepositives:\n    - Service accounts used on legacy systems (e.g. NetApp)\n    - Windows Domains with DFL 2003 and legacy systems\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4769\n        TicketOptions: '0x40810000'\n        TicketEncryptionType: '0x17'\n    reduction:\n        ServiceName|endswith: '$'\n    condition: selection and not reduction\nfalsepositives:\n    - Service accounts used on legacy systems (e.g. NetApp)\n    - Windows Domains with DFL 2003 and legacy systems\nlevel: medium\n",
      "question": "service ticket requests using RC4 encryption type",
      "answer": "In order to detect service ticket requests using RC4 encryption type, you should focus on Windows security event logs. Specifically, monitor for event ID 4769, which indicates a service ticket request. The detection hinges on identifying instances where the ticket options field equals '0x40810000' and the ticket encryption type field is set to '0x17', which corresponds to RC4 encryption. However, it's important to filter out and not alert on events where the service name ends with a '$' sign, as these are often legitimate service account activities, particularly on legacy systems or within Windows Domains with Domain Functional Level (DFL) 2003. Be aware of potential false positives, especially concerning service accounts used on legacy systems like NetApp, or in environments with older Windows Domain configurations. The severity level for this activity is considered medium, indicating it's important but not an immediate critical threat. This approach is aligned with understanding the usage of deprecated or less secure encryption types in service ticket requests, which can be indicative of an attacker's attempt to exploit weaker encryption for credential access or lateral movement within a network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Download and compress a remote file and store it in a cab file on local machine..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to download and compress a remote file and store it in a cab file on local machine, you should: Monitor Windows process creation logs for instances where 'diantz.exe' is executed with command-line parameters that include both a network path (indicated by '\\\\') and a reference to a '.cab' file. This combination suggests an operation where a remote file might be fetched, compressed, and stored locally in a cabinet file format, aligning with techniques commonly used in malicious activities for data collection or staging. The detection focus on these specific command-line artifacts is crucial for identifying potential unauthorized or malicious file manipulation on the system. Be aware that the level of confidence in identifications based on this criteria is considered medium, due to the possibility of legitimate system or application processes using similar patterns, although such cases are unspecified.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - ' \\\\\\\\'\n            - '.cab'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - ' \\\\\\\\'\n            - '.cab'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Download and compress a remote file and store it in a cab file on local machine.",
      "answer": "In order to download and compress a remote file and store it in a cab file on local machine, you should: Monitor Windows process creation logs for instances where 'diantz.exe' is executed with command-line parameters that include both a network path (indicated by '\\\\') and a reference to a '.cab' file. This combination suggests an operation where a remote file might be fetched, compressed, and stored locally in a cabinet file format, aligning with techniques commonly used in malicious activities for data collection or staging. The detection focus on these specific command-line artifacts is crucial for identifying potential unauthorized or malicious file manipulation on the system. Be aware that the level of confidence in identifications based on this criteria is considered medium, due to the possibility of legitimate system or application processes using similar patterns, although such cases are unspecified."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect attempt to enable auditing of TTY input.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_path_events:\n        type: PATH\n        name:\n            - '/etc/pam.d/system-auth'\n            - '/etc/pam.d/password-auth'\n    selection_tty_events:\n        type:\n            - 'TTY'\n            - 'USER_TTY'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative work\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_path_events:\n        type: PATH\n        name:\n            - '/etc/pam.d/system-auth'\n            - '/etc/pam.d/password-auth'\n    selection_tty_events:\n        type:\n            - 'TTY'\n            - 'USER_TTY'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative work\nlevel: high\n",
      "question": "Detect attempt to enable auditing of TTY input",
      "answer": "In order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Elise backdoor activity used by APT32.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Elise backdoor activity used by APT32, you should: focus on monitoring Windows process creation logs. Specifically, look for the generation of suspicious processes related to the misused svchost.exe path, where instances are observed with an image path ending in '\\Microsoft\\Network\\svchost.exe'. Additionally, you should be vigilant for command lines that exhibit both the presence of a DLL file located in '\\Windows\\Caches\\NavShExt.dll' and the command '/c del', which indicates an attempt to delete this file - a common tactic to evade detection or analysis. It is crucial also to note command lines that terminate with paths pointing to 'NavShExt.dll' within the '\\AppData\\Roaming\\MICROS~1\\Windows\\Caches\\' or '\\AppData\\Roaming\\Microsoft\\Windows\\Caches\\' directories. Indications of the command line involving ',Setting' in conjunction with the previous DLL paths are a strong signal of the backdoor activity. Any of the behaviors related to misusing `svchost.exe` are sufficient for alerting, while all the conditions related to the suspicious use of `NavShExt.dll` need to be met concurrently to trigger an alert. Due to the critical nature of this rule, there are hardly any conditions under which these signals would be considered false positives. This focused approach allows IT security teams to effectively counter the tactics and techniques employed by APT32 to leverage the Elise backdoor, ensuring a higher security posture against this sophisticated threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other_svchost:\n        Image|endswith: '\\Microsoft\\Network\\svchost.exe'\n    selection_other_del:\n        CommandLine|contains|all:\n            - '\\Windows\\Caches\\NavShExt.dll'\n            - '/c del'\n    selection_dll_path:\n        CommandLine|endswith:\n            - '\\AppData\\Roaming\\MICROS~1\\Windows\\Caches\\NavShExt.dll'\n            - '\\AppData\\Roaming\\Microsoft\\Windows\\Caches\\NavShExt.dll'\n    selection_dll_function:\n        CommandLine|contains: ',Setting'\n    condition: 1 of selection_other_* or all of selection_dll_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other_svchost:\n        Image|endswith: '\\Microsoft\\Network\\svchost.exe'\n    selection_other_del:\n        CommandLine|contains|all:\n            - '\\Windows\\Caches\\NavShExt.dll'\n            - '/c del'\n    selection_dll_path:\n        CommandLine|endswith:\n            - '\\AppData\\Roaming\\MICROS~1\\Windows\\Caches\\NavShExt.dll'\n            - '\\AppData\\Roaming\\Microsoft\\Windows\\Caches\\NavShExt.dll'\n    selection_dll_function:\n        CommandLine|contains: ',Setting'\n    condition: 1 of selection_other_* or all of selection_dll_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "Elise backdoor activity used by APT32",
      "answer": "In order to detect Elise backdoor activity used by APT32, you should: focus on monitoring Windows process creation logs. Specifically, look for the generation of suspicious processes related to the misused svchost.exe path, where instances are observed with an image path ending in '\\Microsoft\\Network\\svchost.exe'. Additionally, you should be vigilant for command lines that exhibit both the presence of a DLL file located in '\\Windows\\Caches\\NavShExt.dll' and the command '/c del', which indicates an attempt to delete this file - a common tactic to evade detection or analysis. It is crucial also to note command lines that terminate with paths pointing to 'NavShExt.dll' within the '\\AppData\\Roaming\\MICROS~1\\Windows\\Caches\\' or '\\AppData\\Roaming\\Microsoft\\Windows\\Caches\\' directories. Indications of the command line involving ',Setting' in conjunction with the previous DLL paths are a strong signal of the backdoor activity. Any of the behaviors related to misusing `svchost.exe` are sufficient for alerting, while all the conditions related to the suspicious use of `NavShExt.dll` need to be met concurrently to trigger an alert. Due to the critical nature of this rule, there are hardly any conditions under which these signals would be considered false positives. This focused approach allows IT security teams to effectively counter the tactics and techniques employed by APT32 to leverage the Elise backdoor, ensuring a higher security posture against this sophisticated threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Atbroker executing non-deafualt Assistive Technology applications.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Atbroker executing non-default Assistive Technology applications, you should focus on monitoring process creation events in Windows systems. Specifically, watch for instances where the process image name ends with 'AtBroker.exe' and its command line includes the text 'start'. However, it is crucial to filter out any command line options that are associated with legitimate, default assistive technology applications, such as various accessibility settings (e.g., animations, high contrast, Narrator, etc.). By applying this approach, you aim to identify potentially malicious activities involving AtBroker.exe while minimizing false positives related to legitimate use of assistive technologies. This method is instrumental in protecting against attacks leveraging Atbroker for executing unauthorized applications under the guise of assistive technologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'AtBroker.exe'\n        CommandLine|contains: 'start'\n    filter:\n        CommandLine|contains:\n            - animations\n            - audiodescription\n            - caretbrowsing\n            - caretwidth\n            - colorfiltering\n            - cursorscheme\n            - filterkeys\n            - focusborderheight\n            - focusborderwidth\n            - highcontrast\n            - keyboardcues\n            - keyboardpref\n            - magnifierpane\n            - messageduration\n            - minimumhitradius\n            - mousekeys\n            - Narrator\n            - osk\n            - overlappedcontent\n            - showsounds\n            - soundsentry\n            - stickykeys\n            - togglekeys\n            - windowarranging\n            - windowtracking\n            - windowtrackingtimeout\n            - windowtrackingzorder\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate, non-default assistive technology applications execution\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'AtBroker.exe'\n        CommandLine|contains: 'start'\n    filter:\n        CommandLine|contains:\n            - animations\n            - audiodescription\n            - caretbrowsing\n            - caretwidth\n            - colorfiltering\n            - cursorscheme\n            - filterkeys\n            - focusborderheight\n            - focusborderwidth\n            - highcontrast\n            - keyboardcues\n            - keyboardpref\n            - magnifierpane\n            - messageduration\n            - minimumhitradius\n            - mousekeys\n            - Narrator\n            - osk\n            - overlappedcontent\n            - showsounds\n            - soundsentry\n            - stickykeys\n            - togglekeys\n            - windowarranging\n            - windowtracking\n            - windowtrackingtimeout\n            - windowtrackingzorder\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate, non-default assistive technology applications execution\nlevel: high\n",
      "question": "Atbroker executing non-deafualt Assistive Technology applications",
      "answer": "In order to detect Atbroker executing non-default Assistive Technology applications, you should focus on monitoring process creation events in Windows systems. Specifically, watch for instances where the process image name ends with 'AtBroker.exe' and its command line includes the text 'start'. However, it is crucial to filter out any command line options that are associated with legitimate, default assistive technology applications, such as various accessibility settings (e.g., animations, high contrast, Narrator, etc.). By applying this approach, you aim to identify potentially malicious activities involving AtBroker.exe while minimizing false positives related to legitimate use of assistive technologies. This method is instrumental in protecting against attacks leveraging Atbroker for executing unauthorized applications under the guise of assistive technologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting wscript/cscript executions of scripts located in user directories.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect wscript/cscript executions of scripts located in user directories, you should look for the creation of processes on Windows systems that manifest a specific pattern in their execution. These processes are initiated by the Windows Script Host engines, wscript.exe or cscript.exe, indicating the use of Windows scripting. The identifiers to watch out for include these engines launching scripts present within either 'C:\\Users\\' or 'C:\\ProgramData\\' directories.\n\nMoreover, the command lines initiating these processes may have references to file types like .jse, .vbe, .js, .vba, or .vbs, which are all script formats that can potentially be used for malicious purposes when executed in such a context. This combination of factors\u2014script host engines executing scripts from user directories in specific script formats\u2014is indicative of suspicious activity potentially related to scripting attacks.\n\nHowever, it's crucial to consider exceptions to rule out false positives effectively. If the process lineage (ParentImage) includes utilities like Winzip or other self-extractors, which might legitimately execute scripts as part of their operation, such instances should not be considered malicious.\n\nThe data crucial for this analysis includes the CommandLine and ParentCommandLine, which provide context on how and why a particular script is being executed. Being vigilant about such process creation events is critical, although it's also necessary to be aware of common benign software operations (like those involving Winzip) to avoid misinterpreting legitimate activities as threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        CommandLine|contains:\n            - 'C:\\Users\\'\n            - 'C:\\ProgramData\\'\n    selection2:\n        CommandLine|contains:\n            - '.jse'\n            - '.vbe'\n            - '.js'\n            - '.vba'\n            - '.vbs'\n    falsepositive:\n        ParentImage|contains: '\\winzip'\n    condition: selection1 and selection2 and not falsepositive\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Winzip\n    - Other self-extractors\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        CommandLine|contains:\n            - 'C:\\Users\\'\n            - 'C:\\ProgramData\\'\n    selection2:\n        CommandLine|contains:\n            - '.jse'\n            - '.vbe'\n            - '.js'\n            - '.vba'\n            - '.vbs'\n    falsepositive:\n        ParentImage|contains: '\\winzip'\n    condition: selection1 and selection2 and not falsepositive\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Winzip\n    - Other self-extractors\nlevel: high\n",
      "question": "wscript/cscript executions of scripts located in user directories",
      "answer": "In order to detect wscript/cscript executions of scripts located in user directories, you should look for the creation of processes on Windows systems that manifest a specific pattern in their execution. These processes are initiated by the Windows Script Host engines, wscript.exe or cscript.exe, indicating the use of Windows scripting. The identifiers to watch out for include these engines launching scripts present within either 'C:\\Users\\' or 'C:\\ProgramData\\' directories.\n\nMoreover, the command lines initiating these processes may have references to file types like .jse, .vbe, .js, .vba, or .vbs, which are all script formats that can potentially be used for malicious purposes when executed in such a context. This combination of factors\u2014script host engines executing scripts from user directories in specific script formats\u2014is indicative of suspicious activity potentially related to scripting attacks.\n\nHowever, it's crucial to consider exceptions to rule out false positives effectively. If the process lineage (ParentImage) includes utilities like Winzip or other self-extractors, which might legitimately execute scripts as part of their operation, such instances should not be considered malicious.\n\nThe data crucial for this analysis includes the CommandLine and ParentCommandLine, which provide context on how and why a particular script is being executed. Being vigilant about such process creation events is critical, although it's also necessary to be aware of common benign software operations (like those involving Winzip) to avoid misinterpreting legitimate activities as threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exfiltration attempt via audio file using PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential exfiltration attempt via audio file using PowerShell, you should monitor Windows Script Block Logging for PowerShell scripts that contain specific characteristics indicating such attempts. Specifically, look for scripts that access the System.Math class, utilize the FileMode enumeration, and create instances of the BinaryWriter class. These elements together suggest code that may be manipulating or creating binary files, possibly for malicious purposes.\n\nAdditionally, be vigilant for scripts that contain sequences of bytes matching the header of WAV audio files (represented as '0x52', '0x49', '0x46', '0x57', '0x41', '0x56', '0x45', '0xAC'). These could denote scripts attempting to exfiltrate data camouflaged as audio files.\n\nConsidering these detection strategies cover relatively advanced and specific methods of data manipulation and exfiltration using PowerShell, the occurrence of false positives is unknown but potentially low given the specificity of the signatures. As such, any detection should trigger a medium-priority investigation into the context of the script execution to confirm any suspicion of unauthorized data exfiltration efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_main:\n        ScriptBlockText|contains|all:\n            - '[System.Math]::'\n            - '[IO.FileMode]::'\n            - 'BinaryWriter'\n    selection_header_wav:\n        ScriptBlockText|contains|all:\n            # Byte chunks from the WAV header used in the example POC\n            # You can extend this for different audio formats by adding different selections\n            - '0x52'\n            - '0x49'\n            - '0x46'\n            - '0x57'\n            - '0x41'\n            - '0x56'\n            - '0x45'\n            - '0xAC'\n    condition: selection_main and 1 of selection_header_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_main:\n        ScriptBlockText|contains|all:\n            - '[System.Math]::'\n            - '[IO.FileMode]::'\n            - 'BinaryWriter'\n    selection_header_wav:\n        ScriptBlockText|contains|all:\n            # Byte chunks from the WAV header used in the example POC\n            # You can extend this for different audio formats by adding different selections\n            - '0x52'\n            - '0x49'\n            - '0x46'\n            - '0x57'\n            - '0x41'\n            - '0x56'\n            - '0x45'\n            - '0xAC'\n    condition: selection_main and 1 of selection_header_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential exfiltration attempt via audio file using PowerShell",
      "answer": "In order to detect potential exfiltration attempt via audio file using PowerShell, you should monitor Windows Script Block Logging for PowerShell scripts that contain specific characteristics indicating such attempts. Specifically, look for scripts that access the System.Math class, utilize the FileMode enumeration, and create instances of the BinaryWriter class. These elements together suggest code that may be manipulating or creating binary files, possibly for malicious purposes.\n\nAdditionally, be vigilant for scripts that contain sequences of bytes matching the header of WAV audio files (represented as '0x52', '0x49', '0x46', '0x57', '0x41', '0x56', '0x45', '0xAC'). These could denote scripts attempting to exfiltrate data camouflaged as audio files.\n\nConsidering these detection strategies cover relatively advanced and specific methods of data manipulation and exfiltration using PowerShell, the occurrence of false positives is unknown but potentially low given the specificity of the signatures. As such, any detection should trigger a medium-priority investigation into the context of the script execution to confirm any suspicion of unauthorized data exfiltration efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file type dropped by an Exchange component in IIS into a suspicious folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n        TargetFilename|contains:\n            - 'FrontEnd\\HttpProxy\\'           # from GTSC and MSTI reports\n            - '\\inetpub\\wwwroot\\aspnet_client\\' # from GTSC report\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n        TargetFilename|contains:\n            - 'FrontEnd\\HttpProxy\\'           # from GTSC and MSTI reports\n            - '\\inetpub\\wwwroot\\aspnet_client\\' # from GTSC report\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious file type dropped by an Exchange component in IIS into a suspicious folder",
      "answer": "In order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting LockerGoga ransomware activity via specific command line..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect LockerGoga ransomware activity via specific command line, you should: Monitor the creation of processes on Windows systems, focusing specifically on instances where the command line includes the sequence '-i SM-tgytutrc -s'. This specific pattern in the command line is indicative of potential LockerGoga ransomware activity. Since the likelihood of this occurring by chance or through legitimate applications is considered unlikely, any detection of this command line pattern should be treated as critical and investigated promptly. This monitoring strategy is aimed at identifying and responding to techniques associated with ransomware deployment and execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '-i SM-tgytutrc -s'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '-i SM-tgytutrc -s'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "LockerGoga ransomware activity via specific command line.",
      "answer": "In order to detect LockerGoga ransomware activity via specific command line, you should: Monitor the creation of processes on Windows systems, focusing specifically on instances where the command line includes the sequence '-i SM-tgytutrc -s'. This specific pattern in the command line is indicative of potential LockerGoga ransomware activity. Since the likelihood of this occurring by chance or through legitimate applications is considered unlikely, any detection of this command line pattern should be treated as critical and investigated promptly. This monitoring strategy is aimed at identifying and responding to techniques associated with ransomware deployment and execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should monitor the process creation logs on Windows systems for the execution of specific binaries that are commonly manipulated by attackers. These binaries include 'Cmd.Exe', 'CONHOST.EXE', '7z.exe', 'WinRAR.exe', 'wevtutil.exe', 'net.exe', 'net1.exe', 'netsh.exe', and 'InstallUtil.exe'. It's crucial to distinguish authentic binary executions from malicious ones. This can be achieved by checking if the executing binary\u2019s name exactly matches the standard file names or if there is a deviation, indicating potential tampering or misuse. However, be aware of potential false positives that can arise from legitimate applications which may rename these binaries for their own use. Such instances should be thoroughly investigated and, if confirmed to be benign, added to a whitelist to refine the detection process. This approach aims to enhance the security posture by identifying and responding to methods employed in various cyber attack techniques, without being misled by superficial changes to binary names.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'Cmd.Exe'\n            - 'CONHOST.EXE'\n            - '7z.exe'\n            - 'WinRAR.exe'\n            - 'wevtutil.exe'\n            - 'net.exe'\n            - 'net1.exe'\n            - 'netsh.exe'\n            - 'InstallUtil.exe'\n    filter:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\conhost.exe'\n            - '\\7z.exe'\n            - '\\WinRAR.exe'\n            - '\\wevtutil.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netsh.exe'\n            - '\\InstallUtil.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Custom applications use renamed binaries adding slight change to binary name. Typically this is easy to spot and add to whitelist\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'Cmd.Exe'\n            - 'CONHOST.EXE'\n            - '7z.exe'\n            - 'WinRAR.exe'\n            - 'wevtutil.exe'\n            - 'net.exe'\n            - 'net1.exe'\n            - 'netsh.exe'\n            - 'InstallUtil.exe'\n    filter:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\conhost.exe'\n            - '\\7z.exe'\n            - '\\WinRAR.exe'\n            - '\\wevtutil.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netsh.exe'\n            - '\\InstallUtil.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Custom applications use renamed binaries adding slight change to binary name. Typically this is easy to spot and add to whitelist\nlevel: medium\n",
      "question": "execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
      "answer": "In order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should monitor the process creation logs on Windows systems for the execution of specific binaries that are commonly manipulated by attackers. These binaries include 'Cmd.Exe', 'CONHOST.EXE', '7z.exe', 'WinRAR.exe', 'wevtutil.exe', 'net.exe', 'net1.exe', 'netsh.exe', and 'InstallUtil.exe'. It's crucial to distinguish authentic binary executions from malicious ones. This can be achieved by checking if the executing binary\u2019s name exactly matches the standard file names or if there is a deviation, indicating potential tampering or misuse. However, be aware of potential false positives that can arise from legitimate applications which may rename these binaries for their own use. Such instances should be thoroughly investigated and, if confirmed to be benign, added to a whitelist to refine the detection process. This approach aims to enhance the security posture by identifying and responding to methods employed in various cyber attack techniques, without being misled by superficial changes to binary names."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting activity when a security-enabled global group is deleted.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activity when a security-enabled global group is deleted, you should monitor the security logs from Windows systems for events with Event ID 4730 or 634. These specific Event IDs indicate that a security-enabled global group was deleted. By tracking these Event IDs within the Windows security service logs, it's possible to identify when such significant changes occur within group management activities. It's important to note, however, that the confidence in these detections might be considered low due to the potential for unknown false positives. This activity can be linked with tactics and techniques focused on undermining security control and manipulating user group configurations, which could be indicative of unauthorized access or malicious influence on security protocols.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4730 # A security-enabled global group was deleted\n            - 634 # Security Enabled Global Group Deleted\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4730 # A security-enabled global group was deleted\n            - 634 # Security Enabled Global Group Deleted\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "activity when a security-enabled global group is deleted",
      "answer": "In order to detect activity when a security-enabled global group is deleted, you should monitor the security logs from Windows systems for events with Event ID 4730 or 634. These specific Event IDs indicate that a security-enabled global group was deleted. By tracking these Event IDs within the Windows security service logs, it's possible to identify when such significant changes occur within group management activities. It's important to note, however, that the confidence in these detections might be considered low due to the potential for unknown false positives. This activity can be linked with tactics and techniques focused on undermining security control and manipulating user group configurations, which could be indicative of unauthorized access or malicious influence on security protocols."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential abuse of ntdsutil to dump ntds.dit database.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential abuse of ntdsutil to dump ntds.dit database, you should: Monitor Windows application logs for specific event IDs associated with the ESENT provider. The relevant event IDs to look out for are 216, 325, 326, and 327. Additionally, scrutinize these events for any references to 'ntds.dit'. This file is critical as it contains the Active Directory database, and its unauthorized duplication or access could indicate an ongoing attack to extract sensitive domain information. Be aware, however, that seeing these indicators may also coincide with legitimate backup operations or the creation of shadow copies, which are considered normal false positives in this context. The severity of this monitoring strategy is categorized as medium, signifying a significant level of importance in detecting and mitigating potential threats that exploit ntdsutil for malicious purposes. This detection method aligns with securing against tactics that involve Credential Access through techniques such as OS Credential Dumping.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'ESENT'\n        EventID:\n            - 216\n            - 325\n            - 326\n            - 327\n        Data|contains: 'ntds.dit'\n    condition: selection\nfalsepositives:\n    - Legitimate backup operation/creating shadow copies\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'ESENT'\n        EventID:\n            - 216\n            - 325\n            - 326\n            - 327\n        Data|contains: 'ntds.dit'\n    condition: selection\nfalsepositives:\n    - Legitimate backup operation/creating shadow copies\nlevel: medium\n",
      "question": "potential abuse of ntdsutil to dump ntds.dit database",
      "answer": "In order to detect potential abuse of ntdsutil to dump ntds.dit database, you should: Monitor Windows application logs for specific event IDs associated with the ESENT provider. The relevant event IDs to look out for are 216, 325, 326, and 327. Additionally, scrutinize these events for any references to 'ntds.dit'. This file is critical as it contains the Active Directory database, and its unauthorized duplication or access could indicate an ongoing attack to extract sensitive domain information. Be aware, however, that seeing these indicators may also coincide with legitimate backup operations or the creation of shadow copies, which are considered normal false positives in this context. The severity of this monitoring strategy is categorized as medium, signifying a significant level of importance in detecting and mitigating potential threats that exploit ntdsutil for malicious purposes. This detection method aligns with securing against tactics that involve Credential Access through techniques such as OS Credential Dumping."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting macOS Gatekeeper bypass via xattr utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect macOS Gatekeeper bypass via xattr utility, you should: Monitor the creation of processes on macOS systems, specifically looking for the execution of the 'xattr' command. The primary focus is on instances where the 'xattr' command is used with the '-r' flag in conjunction with 'com.apple.quarantine' within the command line arguments. This pattern of usage could indicate an attempt to manipulate file attributes to bypass Gatekeeper checks, a security feature in macOS designed to ensure only trusted software runs on the system. While there may be legitimate uses of these command line options, such activities should be scrutinized for potential security implications, keeping in mind that the detection has a low level of confidence due to the possibility of false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith: '/xattr'\n        CommandLine|contains|all:\n            - '-r'\n            - 'com.apple.quarantine'\n    condition: selection\nfalsepositives:\n    - Legitimate activities\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith: '/xattr'\n        CommandLine|contains|all:\n            - '-r'\n            - 'com.apple.quarantine'\n    condition: selection\nfalsepositives:\n    - Legitimate activities\nlevel: low\n",
      "question": "macOS Gatekeeper bypass via xattr utility",
      "answer": "In order to detect macOS Gatekeeper bypass via xattr utility, you should: Monitor the creation of processes on macOS systems, specifically looking for the execution of the 'xattr' command. The primary focus is on instances where the 'xattr' command is used with the '-r' flag in conjunction with 'com.apple.quarantine' within the command line arguments. This pattern of usage could indicate an attempt to manipulate file attributes to bypass Gatekeeper checks, a security feature in macOS designed to ensure only trusted software runs on the system. While there may be legitimate uses of these command line options, such activities should be scrutinized for potential security implications, keeping in mind that the detection has a low level of confidence due to the possibility of false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc., you should: Monitor the creation of processes on Windows systems, specifically focusing on the execution of the ntdsutil.exe file. This utility can be identified either by its image path ending in '\\ntdsutil.exe' or by its original filename 'ntdsutil.exe'. Pay special attention to the command line used during execution, looking for two critical activities: the first involves commands containing both 'snapshot' and 'mount', which indicates the mounting of a specific snapshot, a potential indicator of an attack. The second activity focuses on variations of the command line containing fragments like 'ac', ' i', and ' ntds', showcasing attempts to activate instances related to NTDS, which is the AD database. These signs can be indicators of malicious actions, although be aware that they might also stem from legitimate administrative tasks such as snapshot restoration. The detection is tagged with medium level importance due to its potential for false positives, including legitimate administrative or restoration activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ntdsutil.exe'\n        - OriginalFileName: 'ntdsutil.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - 'snapshot'\n            - 'mount ' # mounts a specific snapshot - Ex: ntdsutil snapshot \"mount c2b3e2c6-1ffb-4625-ba8e-3503c27a9fcb\" quit quit\n        - CommandLine|contains|all:\n            # This offers more coverage to the \"selection_oneliner_1\" case in rule 8bc64091-6875-4881-aaf9-7bd25b5dda08\n            # The shorest form of \"activate\" can \"ac\". But \"act\", \"acti\"...etc are also valid forms\n            # Same case with the \"instance\" flag\n            - 'ac'\n            - ' i'\n            - ' ntds'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage to restore snapshots\n    - Legitimate admin activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ntdsutil.exe'\n        - OriginalFileName: 'ntdsutil.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - 'snapshot'\n            - 'mount ' # mounts a specific snapshot - Ex: ntdsutil snapshot \"mount c2b3e2c6-1ffb-4625-ba8e-3503c27a9fcb\" quit quit\n        - CommandLine|contains|all:\n            # This offers more coverage to the \"selection_oneliner_1\" case in rule 8bc64091-6875-4881-aaf9-7bd25b5dda08\n            # The shorest form of \"activate\" can \"ac\". But \"act\", \"acti\"...etc are also valid forms\n            # Same case with the \"instance\" flag\n            - 'ac'\n            - ' i'\n            - ' ntds'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage to restore snapshots\n    - Legitimate admin activity\nlevel: medium\n",
      "question": "execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc.",
      "answer": "In order to detect execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc., you should: Monitor the creation of processes on Windows systems, specifically focusing on the execution of the ntdsutil.exe file. This utility can be identified either by its image path ending in '\\ntdsutil.exe' or by its original filename 'ntdsutil.exe'. Pay special attention to the command line used during execution, looking for two critical activities: the first involves commands containing both 'snapshot' and 'mount', which indicates the mounting of a specific snapshot, a potential indicator of an attack. The second activity focuses on variations of the command line containing fragments like 'ac', ' i', and ' ntds', showcasing attempts to activate instances related to NTDS, which is the AD database. These signs can be indicators of malicious actions, although be aware that they might also stem from legitimate administrative tasks such as snapshot restoration. The detection is tagged with medium level importance due to its potential for false positives, including legitimate administrative or restoration activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when attackers or tools disable Windows Defender functionalities via the Windows registry.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when attackers or tools disable Windows Defender functionalities via the Windows registry, you should monitor the Windows registry for specific changes that indicate such activities. These activities can be identified by watching for the 'SetValue' event type within the registry, specifically targeting modifications in the Windows Defender configurations. The changes of interest involve modifications to registry paths that include: \n\n1. Directories related to Windows Defender and Windows Defender Security Center settings under the '\\SOFTWARE\\Microsoft\\Windows Defender\\' and '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'.\n2. Potential modifications to key configurations that are critical for the functioning of Windows Defender's antivirus and anti-spyware capabilities, real-time protection features, reporting mechanisms, and spyware protections. These changes can be in the form of enabling or disabling functionalities such as disabling anti-virus, anti-spyware, behavior monitoring, intrusion prevention system, IOAV protection (Input Output Anti-Virus), on-access protection, real-time monitoring, script scanning, enhanced notifications, block at first seen in SpyNet, and tamper protection features among others.\n\nChanges are considered suspicious if they involve setting certain registry values that effectively disable these protections. For instance, setting a registry value to 'DWORD (0x00000001)' in paths that end with configurations like '\\DisableAntiSpyware', '\\Real-Time Protection\\DisableRealtimeMonitoring' signifies the disabling of these respective features. Conversely, setting a value to 'DWORD (0x00000000)' in paths related to enabling protection features like '\\App and Browser protection\\DisallowExploitProtectionOverride' or '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess' could be legitimate actions but also need monitoring as they might indicate attempts to tamper with the system's default security posture.\n\nMonitoring these changes is critical for maintaining the integrity of Windows Defender as a key component of the system's security posture against malware and other threats. However, it's important to consider that some of these registry changes could result from legitimate administrative actions via the Windows Defender interface. Therefore, a high level of vigilance in the analysis of these events is recommended to differentiate between legitimate and malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection_main:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Windows Defender\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\'\n    selection_dword_1:\n        TargetObject|endswith:\n            - '\\DisableAntiSpyware'\n            - '\\DisableAntiVirus'\n            - '\\Real-Time Protection\\DisableBehaviorMonitoring'\n            - '\\Real-Time Protection\\DisableIntrusionPreventionSystem'\n            - '\\Real-Time Protection\\DisableIOAVProtection'\n            - '\\Real-Time Protection\\DisableOnAccessProtection'\n            - '\\Real-Time Protection\\DisableRealtimeMonitoring'\n            - '\\Real-Time Protection\\DisableScanOnRealtimeEnable'\n            - '\\Real-Time Protection\\DisableScriptScanning'\n            - '\\Reporting\\DisableEnhancedNotifications'\n            - '\\SpyNet\\DisableBlockAtFirstSeen'\n        Details: 'DWORD (0x00000001)'\n    selection_dword_0:\n        TargetObject|endswith:\n            - '\\App and Browser protection\\DisallowExploitProtectionOverride'\n            - '\\Features\\TamperProtection'\n            - '\\MpEngine\\MpEnablePus'\n            - '\\PUAProtection'\n            - '\\Signature Update\\ForceUpdateFromMU'\n            - '\\SpyNet\\SpynetReporting'\n            - '\\SpyNet\\SubmitSamplesConsent'\n            - '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess'\n        Details: 'DWORD (0x00000000)'\n    condition: selection_main and 1 of selection_dword_*\nfalsepositives:\n    - Administrator actions via the Windows Defender interface\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection_main:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Windows Defender\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\'\n    selection_dword_1:\n        TargetObject|endswith:\n            - '\\DisableAntiSpyware'\n            - '\\DisableAntiVirus'\n            - '\\Real-Time Protection\\DisableBehaviorMonitoring'\n            - '\\Real-Time Protection\\DisableIntrusionPreventionSystem'\n            - '\\Real-Time Protection\\DisableIOAVProtection'\n            - '\\Real-Time Protection\\DisableOnAccessProtection'\n            - '\\Real-Time Protection\\DisableRealtimeMonitoring'\n            - '\\Real-Time Protection\\DisableScanOnRealtimeEnable'\n            - '\\Real-Time Protection\\DisableScriptScanning'\n            - '\\Reporting\\DisableEnhancedNotifications'\n            - '\\SpyNet\\DisableBlockAtFirstSeen'\n        Details: 'DWORD (0x00000001)'\n    selection_dword_0:\n        TargetObject|endswith:\n            - '\\App and Browser protection\\DisallowExploitProtectionOverride'\n            - '\\Features\\TamperProtection'\n            - '\\MpEngine\\MpEnablePus'\n            - '\\PUAProtection'\n            - '\\Signature Update\\ForceUpdateFromMU'\n            - '\\SpyNet\\SpynetReporting'\n            - '\\SpyNet\\SubmitSamplesConsent'\n            - '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess'\n        Details: 'DWORD (0x00000000)'\n    condition: selection_main and 1 of selection_dword_*\nfalsepositives:\n    - Administrator actions via the Windows Defender interface\nlevel: high\n",
      "question": "when attackers or tools disable Windows Defender functionalities via the Windows registry",
      "answer": "In order to detect when attackers or tools disable Windows Defender functionalities via the Windows registry, you should monitor the Windows registry for specific changes that indicate such activities. These activities can be identified by watching for the 'SetValue' event type within the registry, specifically targeting modifications in the Windows Defender configurations. The changes of interest involve modifications to registry paths that include: \n\n1. Directories related to Windows Defender and Windows Defender Security Center settings under the '\\SOFTWARE\\Microsoft\\Windows Defender\\' and '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'.\n2. Potential modifications to key configurations that are critical for the functioning of Windows Defender's antivirus and anti-spyware capabilities, real-time protection features, reporting mechanisms, and spyware protections. These changes can be in the form of enabling or disabling functionalities such as disabling anti-virus, anti-spyware, behavior monitoring, intrusion prevention system, IOAV protection (Input Output Anti-Virus), on-access protection, real-time monitoring, script scanning, enhanced notifications, block at first seen in SpyNet, and tamper protection features among others.\n\nChanges are considered suspicious if they involve setting certain registry values that effectively disable these protections. For instance, setting a registry value to 'DWORD (0x00000001)' in paths that end with configurations like '\\DisableAntiSpyware', '\\Real-Time Protection\\DisableRealtimeMonitoring' signifies the disabling of these respective features. Conversely, setting a value to 'DWORD (0x00000000)' in paths related to enabling protection features like '\\App and Browser protection\\DisallowExploitProtectionOverride' or '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess' could be legitimate actions but also need monitoring as they might indicate attempts to tamper with the system's default security posture.\n\nMonitoring these changes is critical for maintaining the integrity of Windows Defender as a key component of the system's security posture against malware and other threats. However, it's important to consider that some of these registry changes could result from legitimate administrative actions via the Windows Defender interface. Therefore, a high level of vigilance in the analysis of these events is recommended to differentiate between legitimate and malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a method often used by ransomware, which combines the use of \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question to hide the file responsible for the initial infection for example, you should: monitor process creation logs on Windows systems for command lines that contain specific patterns indicative of this attack method. These patterns include the presence of ' -n ' or ' /n ' which are used in ping commands to specify the number of echo requests to send, and the term 'Nul' indicating that the output of the command is being discarded. Additionally, look for command lines that contain ' /f ', ' -f ', ' /q ', or ' -q ' which are parameters for the 'del' command used to force delete files without prompting for confirmation and to delete files quietly without displaying output. For a command line to be considered suspect under this rule, it must contain all the following: the 'ping' command, which is used here to create a delay, the 'del' command signaling the deletion of files, and the aforementioned parameters and conditions that suggest an attempt to delete evidence of an initial infection stealthily. This detection strategy is tagged with ransomware, indicating its relevance in identifying attempts by such malware to operate undetected on infected systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: \"C:\\Windows\\System32\\cmd.exe\"  /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\" & Del /f /q \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\".\n    selection_count:\n        CommandLine|contains:\n            - ' -n '\n            - ' /n '\n    selection_nul:\n        CommandLine|contains: 'Nul' # Covers \"> Nul\" and \">Nul \"\n    selection_del_param:\n        CommandLine|contains:\n            - ' /f '\n            - ' -f '\n            - ' /q '\n            - ' -q '\n    selection_all:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'del '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: \"C:\\Windows\\System32\\cmd.exe\"  /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\" & Del /f /q \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\".\n    selection_count:\n        CommandLine|contains:\n            - ' -n '\n            - ' /n '\n    selection_nul:\n        CommandLine|contains: 'Nul' # Covers \"> Nul\" and \">Nul \"\n    selection_del_param:\n        CommandLine|contains:\n            - ' /f '\n            - ' -f '\n            - ' /q '\n            - ' -q '\n    selection_all:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'del '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example",
      "answer": "In order to detect a method often used by ransomware, which combines the use of \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question to hide the file responsible for the initial infection for example, you should: monitor process creation logs on Windows systems for command lines that contain specific patterns indicative of this attack method. These patterns include the presence of ' -n ' or ' /n ' which are used in ping commands to specify the number of echo requests to send, and the term 'Nul' indicating that the output of the command is being discarded. Additionally, look for command lines that contain ' /f ', ' -f ', ' /q ', or ' -q ' which are parameters for the 'del' command used to force delete files without prompting for confirmation and to delete files quietly without displaying output. For a command line to be considered suspect under this rule, it must contain all the following: the 'ping' command, which is used here to create a delay, the 'del' command signaling the deletion of files, and the aforementioned parameters and conditions that suggest an attempt to delete evidence of an initial infection stealthily. This detection strategy is tagged with ransomware, indicating its relevance in identifying attempts by such malware to operate undetected on infected systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious output redirection to the local admins share, this technique is often found in malicious scripts or hacktool stagers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious output redirection to the local admins share, this technique is often found in malicious scripts or hacktool stagers, you should: Focus on monitoring process creations within Windows environments. Specifically, look for occurrences where the command line contains output redirection symbols ('>'), which may indicate an attempt to redirect the output of commands. Additionally, pay special attention to process creations that involve access to the local administrator share via paths resembling '\\\\\\\\127.0.0.1\\\\admin$\\\\' or '\\\\\\\\localhost\\\\admin$\\\\'. Such patterns are indicative of suspicious behavior, potentially related to malicious activities such as the execution of scripts or the use of hacktools that attempt to discretely manipulate or steal information by redirecting command output to a location typically reserved for administrative purposes on the local machine. While identifying these patterns, be aware that there might be unknown scenarios that could trigger similar behavior, thus being categorized as false positives. Given the high-risk level associated with this behavior, it's crucial to thoroughly investigate and validate any detected occurrences to mitigate potential security threats efficiently.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_redirect:\n        CommandLine|contains: '>'\n    selection_share:\n        - '\\\\\\\\127.0.0.1\\\\admin$\\\\'\n        - '\\\\\\\\localhost\\\\admin$\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_redirect:\n        CommandLine|contains: '>'\n    selection_share:\n        - '\\\\\\\\127.0.0.1\\\\admin$\\\\'\n        - '\\\\\\\\localhost\\\\admin$\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious output redirection to the local admins share, this technique is often found in malicious scripts or hacktool stagers",
      "answer": "In order to detect a suspicious output redirection to the local admins share, this technique is often found in malicious scripts or hacktool stagers, you should: Focus on monitoring process creations within Windows environments. Specifically, look for occurrences where the command line contains output redirection symbols ('>'), which may indicate an attempt to redirect the output of commands. Additionally, pay special attention to process creations that involve access to the local administrator share via paths resembling '\\\\\\\\127.0.0.1\\\\admin$\\\\' or '\\\\\\\\localhost\\\\admin$\\\\'. Such patterns are indicative of suspicious behavior, potentially related to malicious activities such as the execution of scripts or the use of hacktools that attempt to discretely manipulate or steal information by redirecting command output to a location typically reserved for administrative purposes on the local machine. While identifying these patterns, be aware that there might be unknown scenarios that could trigger similar behavior, thus being categorized as false positives. Given the high-risk level associated with this behavior, it's crucial to thoroughly investigate and validate any detected occurrences to mitigate potential security threats efficiently."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line, you should: focus on monitoring the process creation logs on Windows systems. Look for occurrences where the command line includes the specific base64 encoded string '::FromBase64String' or its variations in UTF-16 LE encoding. The presence of these strings in the process command line is a strong indicator of an attempt to execute a command or payload that was obfuscated using base64 encoding. This technique might be used by attackers to evade detection mechanisms by hiding the true nature of the command being executed. It\u2019s important to be vigilant for these signs as they can suggest a high-risk activity, although it's worth noting there could be unknown benign cases leading to false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|base64offset|contains: '::FromBase64String'\n        # UTF-16 LE\n        - CommandLine|contains:\n            - 'OgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcA'\n            - 'oAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnA'\n            - '6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZw'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|base64offset|contains: '::FromBase64String'\n        # UTF-16 LE\n        - CommandLine|contains:\n            - 'OgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcA'\n            - 'oAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnA'\n            - '6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZw'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line",
      "answer": "In order to detect usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line, you should: focus on monitoring the process creation logs on Windows systems. Look for occurrences where the command line includes the specific base64 encoded string '::FromBase64String' or its variations in UTF-16 LE encoding. The presence of these strings in the process command line is a strong indicator of an attempt to execute a command or payload that was obfuscated using base64 encoding. This technique might be used by attackers to evade detection mechanisms by hiding the true nature of the command being executed. It\u2019s important to be vigilant for these signs as they can suggest a high-risk activity, although it's worth noting there could be unknown benign cases leading to false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of 7zip utilities (7z.exe, 7za.exe and 7zr.exe) to extract password protected zip files..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of 7zip utilities (7z.exe, 7za.exe and 7zr.exe) to extract password protected zip files, you should: Focus on monitoring the process creation log source in Windows environments. Look for events where the description contains '7-Zip', or where the image path ends with '\\7z.exe', '\\7zr.exe', or '\\7za.exe', indicating the use of 7zip utilities. Additionally, pay attention to the OriginalFileName field for instances of '7z.exe' or '7za.exe' to accurately identify the execution of these utilities. To specifically catch the extraction of password-protected files, examine the CommandLine for the simultaneous presence of '-p' (indicating the use of a password), 'x' (denoting extract command), and '-o' (specifying the output directory). This combination of conditions ensures that the focus is on activities related to the extraction of files from password-protected archives using 7zip. Be mindful that legitimate use of these commands for extracting password-protected files is common in some environments, which could lead to false positives. The detection level is considered medium, highlighting the potential security risk without overstating the likelihood of malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Description|contains: '7-Zip'\n        - Image|endswith:\n            - '\\7z.exe'\n            - '\\7zr.exe'\n            - '\\7za.exe'\n        - OriginalFileName:\n            - '7z.exe'\n            - '7za.exe'\n    selection_password:\n        CommandLine|contains|all:\n            - ' -p'\n            - ' x '\n            - ' -o'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate activity is expected since extracting files with a password can be common in some environement.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Description|contains: '7-Zip'\n        - Image|endswith:\n            - '\\7z.exe'\n            - '\\7zr.exe'\n            - '\\7za.exe'\n        - OriginalFileName:\n            - '7z.exe'\n            - '7za.exe'\n    selection_password:\n        CommandLine|contains|all:\n            - ' -p'\n            - ' x '\n            - ' -o'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate activity is expected since extracting files with a password can be common in some environement.\nlevel: medium\n",
      "question": "usage of 7zip utilities (7z.exe, 7za.exe and 7zr.exe) to extract password protected zip files.",
      "answer": "In order to detect usage of 7zip utilities (7z.exe, 7za.exe and 7zr.exe) to extract password protected zip files, you should: Focus on monitoring the process creation log source in Windows environments. Look for events where the description contains '7-Zip', or where the image path ends with '\\7z.exe', '\\7zr.exe', or '\\7za.exe', indicating the use of 7zip utilities. Additionally, pay attention to the OriginalFileName field for instances of '7z.exe' or '7za.exe' to accurately identify the execution of these utilities. To specifically catch the extraction of password-protected files, examine the CommandLine for the simultaneous presence of '-p' (indicating the use of a password), 'x' (denoting extract command), and '-o' (specifying the output directory). This combination of conditions ensures that the focus is on activities related to the extraction of files from password-protected archives using 7zip. Be mindful that legitimate use of these commands for extracting password-protected files is common in some environments, which could lead to false positives. The detection level is considered medium, highlighting the potential security risk without overstating the likelihood of malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile setup.\nWith this alert, it is used to detect anyone is changing password on behalf of other users.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect anyone changing the password on behalf of other users, which indicates that an attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile set up, you should focus on monitoring AWS CloudTrail logs. Look for events where the event source is IAM (iam.amazonaws.com) specifically with the event name \"UpdateLoginProfile\". This indicates an attempt to update a login profile, which is a key part of this detection. \n\nFurthermore, it's important to apply a filter to identify suspicious behavior accurately. This involves checking if the ARN (Amazon Resource Name) of the user identity making the request contains the username in the request parameters. If the ARN of the user initiating the request does not match the username for which the login profile is being updated, this can signify malicious activity, such as an unauthorized user attempting to change another user's password. \n\nHowever, it is important to note that certain activities that match these criteria might be legitimate, such as administrators performing routine account maintenance. These are considered potential false positives, specifically actions categorized under legit user account administration.\n\nFor effective monitoring, the following fields should be included in the analysis: the ARN of the user identity (`userIdentity.arn`), the username in the request parameters (`requestParameters.userName`), the error code (`errorCode`), and the error message (`errorMessage`). These fields can provide additional context to distinguish between legitimate and malicious activities.\n\nThe detection of such activities is crucial and is flagged at a high level due to the severity of the potential impact, including unauthorized access to AWS resources.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: iam.amazonaws.com\n        eventName: UpdateLoginProfile\n    filter:\n        userIdentity.arn|contains: requestParameters.userName\n    condition: selection_source and not filter\nfields:\n    - userIdentity.arn\n    - requestParameters.userName\n    - errorCode\n    - errorMessage\nfalsepositives:\n    - Legit User Account Administration\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: iam.amazonaws.com\n        eventName: UpdateLoginProfile\n    filter:\n        userIdentity.arn|contains: requestParameters.userName\n    condition: selection_source and not filter\nfields:\n    - userIdentity.arn\n    - requestParameters.userName\n    - errorCode\n    - errorMessage\nfalsepositives:\n    - Legit User Account Administration\nlevel: high\n",
      "question": "An attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile setup.\nWith this alert, it is used to detect anyone is changing password on behalf of other users.\n",
      "answer": "In order to detect anyone changing the password on behalf of other users, which indicates that an attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile set up, you should focus on monitoring AWS CloudTrail logs. Look for events where the event source is IAM (iam.amazonaws.com) specifically with the event name \"UpdateLoginProfile\". This indicates an attempt to update a login profile, which is a key part of this detection. \n\nFurthermore, it's important to apply a filter to identify suspicious behavior accurately. This involves checking if the ARN (Amazon Resource Name) of the user identity making the request contains the username in the request parameters. If the ARN of the user initiating the request does not match the username for which the login profile is being updated, this can signify malicious activity, such as an unauthorized user attempting to change another user's password. \n\nHowever, it is important to note that certain activities that match these criteria might be legitimate, such as administrators performing routine account maintenance. These are considered potential false positives, specifically actions categorized under legit user account administration.\n\nFor effective monitoring, the following fields should be included in the analysis: the ARN of the user identity (`userIdentity.arn`), the username in the request parameters (`requestParameters.userName`), the error code (`errorCode`), and the error message (`errorMessage`). These fields can provide additional context to distinguish between legitimate and malicious activities.\n\nThe detection of such activities is crucial and is flagged at a high level due to the severity of the potential impact, including unauthorized access to AWS resources."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities where adversaries install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor for the creation of processes on Windows systems where the command line contains specific indicators. These indicators include the use of 'Import-Certificate' along with ' -FilePath ' and the path 'Cert:\\LocalMachine\\Root', suggesting the installation of a certificate into the system's root store. Additionally, the command line may contain references to common temporary and user directories, such as '\\AppData\\Local\\Temp\\', ':\\Windows\\TEMP\\', '\\Desktop\\', '\\Downloads\\', '\\Perflogs\\', and ':\\Users\\Public\\'. These directories are often used by adversaries to temporarily store malicious files. Monitoring for these command-line patterns is crucial for identifying potentially malicious activities related to the installation of unauthorized root certificates. Such activities are flagged with a high level of concern due to their rare legitimate use, making false positives unlikely. This detection strategy is focused on identifying the tactics and techniques associated with credential access, persistence, and defense evasion by monitoring process creation logs in Windows environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Import-Certificate'\n            - ' -FilePath '\n            - 'Cert:\\LocalMachine\\Root'\n        CommandLine|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - ':\\Windows\\TEMP\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Perflogs\\'\n            - ':\\Users\\Public\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Import-Certificate'\n            - ' -FilePath '\n            - 'Cert:\\LocalMachine\\Root'\n        CommandLine|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - ':\\Windows\\TEMP\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Perflogs\\'\n            - ':\\Users\\Public\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.",
      "answer": "In order to detect activities where adversaries install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor for the creation of processes on Windows systems where the command line contains specific indicators. These indicators include the use of 'Import-Certificate' along with ' -FilePath ' and the path 'Cert:\\LocalMachine\\Root', suggesting the installation of a certificate into the system's root store. Additionally, the command line may contain references to common temporary and user directories, such as '\\AppData\\Local\\Temp\\', ':\\Windows\\TEMP\\', '\\Desktop\\', '\\Downloads\\', '\\Perflogs\\', and ':\\Users\\Public\\'. These directories are often used by adversaries to temporarily store malicious files. Monitoring for these command-line patterns is crucial for identifying potentially malicious activities related to the installation of unauthorized root certificates. Such activities are flagged with a high level of concern due to their rare legitimate use, making false positives unlikely. This detection strategy is focused on identifying the tactics and techniques associated with credential access, persistence, and defense evasion by monitoring process creation logs in Windows environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious change of file privileges with chown and chmod commands.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious change of file privileges with chown and chmod commands, you should: Monitor Linux system logs, specifically focusing on the creation of processes. Within this monitoring, look for activities where the command line includes either the 'chown root' command to change the ownership of a file or directory to the root user or the commands 'chmod u+s' or 'chmod g+s' which are used to set the SUID (Set owner User ID up on execution) or SGID (Set Group ID) permissions on a file, respectively. These actions can potentially indicate an attempt to alter file or directory permissions in a way that could compromise system security. It's important to consider that such changes might sometimes be a part of legitimate administrative tasks, hence this kind of activity is classified with a low level of alertness.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_root:\n        CommandLine|contains: 'chown root'\n    selection_perm:\n        CommandLine|contains:\n            - ' chmod u+s'\n            - ' chmod g+s'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_root:\n        CommandLine|contains: 'chown root'\n    selection_perm:\n        CommandLine|contains:\n            - ' chmod u+s'\n            - ' chmod g+s'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
      "question": "suspicious change of file privileges with chown and chmod commands",
      "answer": "In order to detect suspicious change of file privileges with chown and chmod commands, you should: Monitor Linux system logs, specifically focusing on the creation of processes. Within this monitoring, look for activities where the command line includes either the 'chown root' command to change the ownership of a file or directory to the root user or the commands 'chmod u+s' or 'chmod g+s' which are used to set the SUID (Set owner User ID up on execution) or SGID (Set Group ID) permissions on a file, respectively. These actions can potentially indicate an attempt to alter file or directory permissions in a way that could compromise system security. It's important to consider that such changes might sometimes be a part of legitimate administrative tasks, hence this kind of activity is classified with a low level of alertness."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Alert on when legecy authentication has been used on an account.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to alert on when legacy authentication has been used on an account, you should monitor sign-in logs from Azure. Specifically, look for sign-in activities where the client application used falls under categories like Other clients, IMAP, POP3, MAPI, SMTP, Exchange ActiveSync, or Exchange Web Services. These are considered forms of legacy authentication. The username should be noted in the format of 'UPN' (User Principal Name) to correctly identify the account in question. Generally, any use of these specified client applications for signing in could indicate that legacy authentication methods are being used. \n\nBe aware of situations where a user has been explicitly allowed to use legacy authentication, as these cases would be considered false positives. Such exceptions usually involve the user being placed in a specific acceptance group that permits the use of these older authentication methods. The significance of detecting the use of legacy authentication methods is high, given that these methods are typically less secure and more vulnerable to attack compared to modern authentication techniques. Recognizing the usage of these methods could point towards potential security risks or active security breaches, which necessitate prompt attention and action.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        ActivityDetails: Sign-ins\n        ClientApp:\n            - Other client\n            - IMAP\n            - POP3\n            - MAPI\n            - SMTP\n            - Exchange ActiveSync\n            - Exchange Web Services\n        Username: 'UPN'\n    condition: selection\nfalsepositives:\n    - User has been put in acception group so they can use legacy authentication\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        ActivityDetails: Sign-ins\n        ClientApp:\n            - Other client\n            - IMAP\n            - POP3\n            - MAPI\n            - SMTP\n            - Exchange ActiveSync\n            - Exchange Web Services\n        Username: 'UPN'\n    condition: selection\nfalsepositives:\n    - User has been put in acception group so they can use legacy authentication\nlevel: high\n",
      "question": "Alert on when legecy authentication has been used on an account",
      "answer": "In order to alert on when legacy authentication has been used on an account, you should monitor sign-in logs from Azure. Specifically, look for sign-in activities where the client application used falls under categories like Other clients, IMAP, POP3, MAPI, SMTP, Exchange ActiveSync, or Exchange Web Services. These are considered forms of legacy authentication. The username should be noted in the format of 'UPN' (User Principal Name) to correctly identify the account in question. Generally, any use of these specified client applications for signing in could indicate that legacy authentication methods are being used. \n\nBe aware of situations where a user has been explicitly allowed to use legacy authentication, as these cases would be considered false positives. Such exceptions usually involve the user being placed in a specific acceptance group that permits the use of these older authentication methods. The significance of detecting the use of legacy authentication methods is high, given that these methods are typically less secure and more vulnerable to attack compared to modern authentication techniques. Recognizing the usage of these methods could point towards potential security risks or active security breaches, which necessitate prompt attention and action."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting command used by conti to dump database.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a command used by conti to dump database, you should monitor process creation events on Windows systems for the execution of sqlcmd.exe or any command-line interaction that includes 'sqlcmd' or 'sqlcmd.exe'. Specifically, look for command lines that attempt to connect to the localhost using the switch '-S localhost' which indicates an attempt to access the local server. Additionally, be vigilant for queries that target system processes, databases, or actions such as 'sys.sysprocesses', 'master.dbo.sysdatabases', and 'BACKUP DATABASE', which are indicative of attempts to interact with, gather information from, or backup databases respectively. This activity should be regarded with a high level of suspicion due to its potential association with malicious database dumping activities, often utilized in attacks aimed at data theft or sabotage.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools:\n        - Image|endswith: '\\sqlcmd.exe'\n        - CommandLine|contains:\n            - 'sqlcmd '\n            - 'sqlcmd.exe'\n    selection_svr:\n        CommandLine|contains: ' -S localhost '\n    selection_query:\n        CommandLine|contains:\n            - 'sys.sysprocesses'\n            - 'master.dbo.sysdatabases'\n            - 'BACKUP DATABASE'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools:\n        - Image|endswith: '\\sqlcmd.exe'\n        - CommandLine|contains:\n            - 'sqlcmd '\n            - 'sqlcmd.exe'\n    selection_svr:\n        CommandLine|contains: ' -S localhost '\n    selection_query:\n        CommandLine|contains:\n            - 'sys.sysprocesses'\n            - 'master.dbo.sysdatabases'\n            - 'BACKUP DATABASE'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "command used by conti to dump database",
      "answer": "In order to detect a command used by conti to dump database, you should monitor process creation events on Windows systems for the execution of sqlcmd.exe or any command-line interaction that includes 'sqlcmd' or 'sqlcmd.exe'. Specifically, look for command lines that attempt to connect to the localhost using the switch '-S localhost' which indicates an attempt to access the local server. Additionally, be vigilant for queries that target system processes, databases, or actions such as 'sys.sysprocesses', 'master.dbo.sysdatabases', and 'BACKUP DATABASE', which are indicative of attempts to interact with, gather information from, or backup databases respectively. This activity should be regarded with a high level of suspicion due to its potential association with malicious database dumping activities, often utilized in attacks aimed at data theft or sabotage."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain, which are used to host the DNS records for a particular domain, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for any processes that are initiated where the image name ends with '\\dnscmd.exe'. Additionally, check if the command line used to start these processes includes any of the following arguments: '/enumrecords', '/enumzones', '/ZonePrint', or '/info'. These particular arguments are indicative of actions that could be used maliciously to gather information about DNS zones and records. It's important to be aware that these detections could also trigger on legitimate administration activities. Therefore, such detections have been assigned a medium level of importance, implying that while they are noteworthy, they should not be considered definitive proof of malicious behavior without further investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\dnscmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '/enumrecords'\n            - '/enumzones'\n            - '/ZonePrint'\n            - '/info'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\dnscmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '/enumrecords'\n            - '/enumzones'\n            - '/ZonePrint'\n            - '/info'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration use\nlevel: medium\n",
      "question": "an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.",
      "answer": "In order to detect an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain, which are used to host the DNS records for a particular domain, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for any processes that are initiated where the image name ends with '\\dnscmd.exe'. Additionally, check if the command line used to start these processes includes any of the following arguments: '/enumrecords', '/enumzones', '/ZonePrint', or '/info'. These particular arguments are indicative of actions that could be used maliciously to gather information about DNS zones and records. It's important to be aware that these detections could also trigger on legitimate administration activities. Therefore, such detections have been assigned a medium level of importance, implying that while they are noteworthy, they should not be considered definitive proof of malicious behavior without further investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential powershell Base64 encoded Shellcode.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential powershell Base64 encoded Shellcode, you should focus on monitoring the creation of processes within Windows. Specifically, look for instances where the command line execution includes certain Base64 encoded strings, such as 'OiCAAAAYInlM' or 'OiJAAAAYInlM'. These strings are indicative of an attempt to run encoded shellcode via PowerShell, a technique often exploited by attackers to execute arbitrary code without triggering traditional signature-based detections. It's important to note that while this detection provides a valuable security insight, the possibility of false positives exists and is categorized as unknown. The severity level of this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'OiCAAAAYInlM'\n            - 'OiJAAAAYInlM'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'OiCAAAAYInlM'\n            - 'OiJAAAAYInlM'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential powershell Base64 encoded Shellcode",
      "answer": "In order to detect potential powershell Base64 encoded Shellcode, you should focus on monitoring the creation of processes within Windows. Specifically, look for instances where the command line execution includes certain Base64 encoded strings, such as 'OiCAAAAYInlM' or 'OiJAAAAYInlM'. These strings are indicative of an attempt to run encoded shellcode via PowerShell, a technique often exploited by attackers to execute arbitrary code without triggering traditional signature-based detections. It's important to note that while this detection provides a valuable security insight, the possibility of false positives exists and is categorized as unknown. The severity level of this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287, you should: Monitor webserver logs for specific patterns in the query section of URLs that are indicative of exploitation attempts. Initially, look for queries containing '?search=%00{.' which points toward an attempt to inject malicious code or commands. Additionally, pay attention to URLs that include certain key terms in their query part, such as 'save|', an indication of an attempt to save a file in an unauthorized manner, or various command execution tools and paths like 'powershell', 'cmd.exe', 'cmd /c', 'cmd /r', 'cmd /k', 'cscript', 'wscript', 'python', and even specific paths like 'C:\\Users\\Public\\'. Another critical pattern to watch for is the presence of '%comspec%' within the query, indicating the exploitation of command processor invocation. The detection method hinges on identifying all these patterns simultaneously to ensure a comprehensive approach to identifying potential exploitation attempts. Be mindful that there might be unknown instances resulting in false positives. The severity of such detection is considered high, highlighting the critical nature of preventing or swiftly responding to these exploitation attempts, as they relate to executing unauthorized commands or scripts on the server, thereby compromising its security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection_search:\n        cs-uri-query|contains: '?search=%00{.'\n    selection_payload:\n        cs-uri-query|contains:\n            - 'save|' # Indication of saving a file which shouldn't be tested by vuln scanners\n            - 'powershell'\n            - 'cmd.exe'\n            - 'cmd /c'\n            - 'cmd /r'\n            - 'cmd /k'\n            - 'cscript'\n            - 'wscript'\n            - 'python'\n            - 'C:\\Users\\Public\\'\n            - '%comspec%'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection_search:\n        cs-uri-query|contains: '?search=%00{.'\n    selection_payload:\n        cs-uri-query|contains:\n            - 'save|' # Indication of saving a file which shouldn't be tested by vuln scanners\n            - 'powershell'\n            - 'cmd.exe'\n            - 'cmd /c'\n            - 'cmd /r'\n            - 'cmd /k'\n            - 'cscript'\n            - 'wscript'\n            - 'python'\n            - 'C:\\Users\\Public\\'\n            - '%comspec%'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287",
      "answer": "In order to detect attempts to exploit a Rejetto HTTP File Server (HFS) via CVE-2014-6287, you should: Monitor webserver logs for specific patterns in the query section of URLs that are indicative of exploitation attempts. Initially, look for queries containing '?search=%00{.' which points toward an attempt to inject malicious code or commands. Additionally, pay attention to URLs that include certain key terms in their query part, such as 'save|', an indication of an attempt to save a file in an unauthorized manner, or various command execution tools and paths like 'powershell', 'cmd.exe', 'cmd /c', 'cmd /r', 'cmd /k', 'cscript', 'wscript', 'python', and even specific paths like 'C:\\Users\\Public\\'. Another critical pattern to watch for is the presence of '%comspec%' within the query, indicating the exploitation of command processor invocation. The detection method hinges on identifying all these patterns simultaneously to ensure a comprehensive approach to identifying potential exploitation attempts. Be mindful that there might be unknown instances resulting in false positives. The severity of such detection is considered high, highlighting the critical nature of preventing or swiftly responding to these exploitation attempts, as they relate to executing unauthorized commands or scripts on the server, thereby compromising its security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an attempt to execute code or create service on remote host via winrm.vbs..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attempt to execute code or create service on a remote host via winrm.vbs, you should focus on monitoring process creation events within Windows environments. Specifically, be on the lookout for instances where the 'cscript.exe' process is initiated, as indicated by either the image path ending with '\\cscript.exe' or the original file name being 'cscript.exe'. Furthermore, pay close attention to the command line arguments used with these process executions. The presence of 'winrm', 'invoke Create wmicimv2/Win32_', and '-r:http' within the same command line suggests an attempt to leverage Windows Remote Management (WinRM) for potentially malicious remote code execution or service creation. The necessity to match all specified command line conditions underlines the sophistication of this detection method, aiming at reducing the likelihood of false positives, although some unknown cases may still occur. This analysis technique is of medium severity and aligns with the understanding of MITRE ATT&CK\u2019s tactics and techniques, specifically focusing on execution and command and control aspects of cyber threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # Note: winrm.vbs can only be run by a process named cscript (see \"IsCScriptEnv\" function)\n        - Image|endswith: '\\cscript.exe'\n        - OriginalFileName: 'cscript.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'winrm'\n            - 'invoke Create wmicimv2/Win32_'\n            - '-r:http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # Note: winrm.vbs can only be run by a process named cscript (see \"IsCScriptEnv\" function)\n        - Image|endswith: '\\cscript.exe'\n        - OriginalFileName: 'cscript.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'winrm'\n            - 'invoke Create wmicimv2/Win32_'\n            - '-r:http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "an attempt to execute code or create service on remote host via winrm.vbs.",
      "answer": "In order to detect an attempt to execute code or create service on a remote host via winrm.vbs, you should focus on monitoring process creation events within Windows environments. Specifically, be on the lookout for instances where the 'cscript.exe' process is initiated, as indicated by either the image path ending with '\\cscript.exe' or the original file name being 'cscript.exe'. Furthermore, pay close attention to the command line arguments used with these process executions. The presence of 'winrm', 'invoke Create wmicimv2/Win32_', and '-r:http' within the same command line suggests an attempt to leverage Windows Remote Management (WinRM) for potentially malicious remote code execution or service creation. The necessity to match all specified command line conditions underlines the sophistication of this detection method, aiming at reducing the likelihood of false positives, although some unknown cases may still occur. This analysis technique is of medium severity and aligns with the understanding of MITRE ATT&CK\u2019s tactics and techniques, specifically focusing on execution and command and control aspects of cyber threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe, you should monitor the creation of processes on Windows systems specifically for occurrences where the ftp.exe utility is invoked. Look for any process where the parent process ends with '\\ftp.exe', indicating that a child process is being spawned from ftp.exe. Additionally, keep an eye out for any execution of the ftp.exe utility itself, either by direct invocation or through its original file name. It is particularly noteworthy if the command line includes the '-s:' flag as this flag is used to specify a script to be executed by the ftp.exe application, which could potentially be leveraged in an attack. Watch out for these indicators and capture relevant information such as the command line and the parent image path of the process. While monitoring for such behaviors, bear in mind that there might be legitimate uses of these techniques, although they are not commonly encountered in regular operations. The severity level for these detections is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\ftp.exe'\n    selection_ftp_img:\n        - Image|endswith: '\\ftp.exe'\n        - OriginalFileName: 'ftp.exe'\n    selection_ftp_cli:\n        CommandLine|contains: '-s:'\n    condition: selection_parent or all of selection_ftp_*\nfields:\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\ftp.exe'\n    selection_ftp_img:\n        - Image|endswith: '\\ftp.exe'\n        - OriginalFileName: 'ftp.exe'\n    selection_ftp_cli:\n        CommandLine|contains: '-s:'\n    condition: selection_parent or all of selection_ftp_*\nfields:\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe",
      "answer": "In order to detect execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe, you should monitor the creation of processes on Windows systems specifically for occurrences where the ftp.exe utility is invoked. Look for any process where the parent process ends with '\\ftp.exe', indicating that a child process is being spawned from ftp.exe. Additionally, keep an eye out for any execution of the ftp.exe utility itself, either by direct invocation or through its original file name. It is particularly noteworthy if the command line includes the '-s:' flag as this flag is used to specify a script to be executed by the ftp.exe application, which could potentially be leveraged in an attack. Watch out for these indicators and capture relevant information such as the command line and the parent image path of the process. While monitoring for such behaviors, bear in mind that there might be legitimate uses of these techniques, although they are not commonly encountered in regular operations. The severity level for these detections is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Environment Variables to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of environment variables to execute PowerShell, you should look for events generated by the Service Control Manager in the Windows system logs. Specifically, focus on event ID 7045, which is related to new service installations. This event is crucial because attackers might use the service installation process to execute malicious commands. \n\nPay particular attention to the command line (referenced as ImagePath in the logs) for instances where 'cmd.exe' is invoked. Within the command line, look for complex character patterns that indicate an attempt to obfuscate the execution, such as the presence of \"/c\" or \"/r\" followed closely by \"set\" and \"-f\", which are indicative of setting environment variables and formatting strings, respectively. These characteristics are often used by attackers to hide their true intentions and make the command harder to understand or detect by simple text matching. \n\nGiven these patterns, any command line containing 'cmd', '\"set', and '-f', along with either '/c' or '/r', should raise suspicions. These elements together suggest an attempt to obscure the use of environment variables for executing PowerShell commands, which can be a tactic used by attackers to bypass security measures and execute malicious scripts.\n\nIt's essential to monitor for such activities with a high level of scrutiny due to the sophisticated nature of the obfuscation techniques involved. However, be aware that there might be unknown false positives, given the complexity of detecting obfuscated commands without accidentally flagging benign activities that coincidentally match the patterns described.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r)(?:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?:.*\\)){1,}.*\\\"'\n        # Example 1: C:\\winDoWs\\SySTeM32\\cmd.Exe /C\"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\\\"{2}{3}{0}{1}\\\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\\\"IN`VO`KecOmMaND\\\".\\\"inVo`KES`crIPt\\\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\\\"{1}{4}{2}{3}{0}\\\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \\\"{0}{1}\\\"-f'n','oti' ),( \\\"{0}{1}\\\" -f'pRoC','esS') )) )\"\n        # Example 2: cMD.exe /C \"seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\\\"{1}{0}{2}{3}\\\" -f 'eT-vaR','G','iab','lE' ) (\\\"{0}{1}\\\" -f '*m','DR*' ) ).\\\"na`ME\\\"[3,11,2]-JOIN'' ) ( ( ^&(\\\"{0}{1}\\\" -f'g','CI' ) (\\\"{0}{1}\\\" -f 'ENV',':SlDb' ) ).\\\"VA`luE\\\" ) \"\n        ImagePath|contains|all:\n            - 'cmd'\n            - '\"set'\n            - '-f'\n        ImagePath|contains:\n            - '/c'\n            - '/r'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r)(?:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?:.*\\)){1,}.*\\\"'\n        # Example 1: C:\\winDoWs\\SySTeM32\\cmd.Exe /C\"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\\\"{2}{3}{0}{1}\\\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\\\"IN`VO`KecOmMaND\\\".\\\"inVo`KES`crIPt\\\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\\\"{1}{4}{2}{3}{0}\\\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \\\"{0}{1}\\\"-f'n','oti' ),( \\\"{0}{1}\\\" -f'pRoC','esS') )) )\"\n        # Example 2: cMD.exe /C \"seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\\\"{1}{0}{2}{3}\\\" -f 'eT-vaR','G','iab','lE' ) (\\\"{0}{1}\\\" -f '*m','DR*' ) ).\\\"na`ME\\\"[3,11,2]-JOIN'' ) ( ( ^&(\\\"{0}{1}\\\" -f'g','CI' ) (\\\"{0}{1}\\\" -f 'ENV',':SlDb' ) ).\\\"VA`luE\\\" ) \"\n        ImagePath|contains|all:\n            - 'cmd'\n            - '\"set'\n            - '-f'\n        ImagePath|contains:\n            - '/c'\n            - '/r'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Environment Variables to execute PowerShell",
      "answer": "In order to detect obfuscated use of environment variables to execute PowerShell, you should look for events generated by the Service Control Manager in the Windows system logs. Specifically, focus on event ID 7045, which is related to new service installations. This event is crucial because attackers might use the service installation process to execute malicious commands. \n\nPay particular attention to the command line (referenced as ImagePath in the logs) for instances where 'cmd.exe' is invoked. Within the command line, look for complex character patterns that indicate an attempt to obfuscate the execution, such as the presence of \"/c\" or \"/r\" followed closely by \"set\" and \"-f\", which are indicative of setting environment variables and formatting strings, respectively. These characteristics are often used by attackers to hide their true intentions and make the command harder to understand or detect by simple text matching. \n\nGiven these patterns, any command line containing 'cmd', '\"set', and '-f', along with either '/c' or '/r', should raise suspicions. These elements together suggest an attempt to obscure the use of environment variables for executing PowerShell commands, which can be a tactic used by attackers to bypass security measures and execute malicious scripts.\n\nIt's essential to monitor for such activities with a high level of scrutiny due to the sophisticated nature of the obfuscation techniques involved. However, be aware that there might be unknown false positives, given the complexity of detecting obfuscated commands without accidentally flagging benign activities that coincidentally match the patterns described."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie. This could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server) or potentially a sign of exploitation of CVE-2023-23397\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie, which could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server) or potentially a sign of exploitation of CVE-2023-23397, you should: Monitor Windows process creation events for instances where the parent process image name ends with '\\svchost.exe' and includes the command line argument '-s WebClient'. Specifically, look for the child process image name ending with '\\rundll32.exe' that contains the command line argument 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'. Additionally, inspect for command line patterns that match a URL pointing to an IP address format. Exclude detections where the command line includes references to commonly used local IP address spaces to reduce false positives. This approach helps in identifying suspicious activities potentially related to malicious code execution or exfiltration activities leveraging WebDav.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        ParentCommandLine|contains: '-s WebClient'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'\n        CommandLine|re: '://\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'\n    filter_local_ips:\n        CommandLine|contains:\n            - '://10.' #10.0.0.0/8\n            - '://192.168.' #192.168.0.0/16\n            - '://172.16.' #172.16.0.0/12\n            - '://172.17.'\n            - '://172.18.'\n            - '://172.19.'\n            - '://172.20.'\n            - '://172.21.'\n            - '://172.22.'\n            - '://172.23.'\n            - '://172.24.'\n            - '://172.25.'\n            - '://172.26.'\n            - '://172.27.'\n            - '://172.28.'\n            - '://172.29.'\n            - '://172.30.'\n            - '://172.31.'\n            - '://127.' #127.0.0.0/8\n            - '://169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        ParentCommandLine|contains: '-s WebClient'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'\n        CommandLine|re: '://\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'\n    filter_local_ips:\n        CommandLine|contains:\n            - '://10.' #10.0.0.0/8\n            - '://192.168.' #192.168.0.0/16\n            - '://172.16.' #172.16.0.0/12\n            - '://172.17.'\n            - '://172.18.'\n            - '://172.19.'\n            - '://172.20.'\n            - '://172.21.'\n            - '://172.22.'\n            - '://172.23.'\n            - '://172.24.'\n            - '://172.25.'\n            - '://172.26.'\n            - '://172.27.'\n            - '://172.28.'\n            - '://172.29.'\n            - '://172.30.'\n            - '://172.31.'\n            - '://127.' #127.0.0.0/8\n            - '://169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "\"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie. This could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server) or potentially a sign of exploitation of CVE-2023-23397\n",
      "answer": "In order to detect \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie, which could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server) or potentially a sign of exploitation of CVE-2023-23397, you should: Monitor Windows process creation events for instances where the parent process image name ends with '\\svchost.exe' and includes the command line argument '-s WebClient'. Specifically, look for the child process image name ending with '\\rundll32.exe' that contains the command line argument 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'. Additionally, inspect for command line patterns that match a URL pointing to an IP address format. Exclude detections where the command line includes references to commonly used local IP address spaces to reduce false positives. This approach helps in identifying suspicious activities potentially related to malicious code execution or exfiltration activities leveraging WebDav."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Netcat. Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of Netcat, which adversaries may use for communication between host and command and control (C2) server or among infected hosts within a network, you should: Monitor the process creation logs on Windows systems for signs of Netcat execution. Specifically, watch for the appearance of processes whose image names end with '\\nc.exe', '\\ncat.exe', or '\\netcat.exe'. Additionally, pay close attention to the command line parameters used with these processes. Commonly, Netcat is executed with specific command line arguments that enable listening modes or specify verbose output, such as ' -lvp ', ' -lvnp', ' -l -v -p ', ' -lv -p ', ' -l --proxy-type http ', ' -vnl --exec ', ' -vnl -e ', ' --lua-exec ', or ' --sh-exec '. It's important to note that some uses of Netcat are legitimate, so occurrences might not always indicate malicious activity. However, given the right context, these execution patterns can signify hostile actions aiming to establish unauthorized network communications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # can not use OriginalFileName as is empty\n        Image|endswith:\n            - '\\nc.exe'\n            - '\\ncat.exe'\n            - '\\netcat.exe'\n    selection_cmdline:\n        # Typical command lines\n        CommandLine|contains:\n            - ' -lvp '\n            - ' -lvnp'\n            - ' -l -v -p '\n            - ' -lv -p '\n            - ' -l --proxy-type http '\n            #- ' --exec cmd.exe ' # Not specific enough for netcat\n            - ' -vnl --exec '\n            - ' -vnl -e '\n            - ' --lua-exec '\n            - ' --sh-exec '\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate ncat use\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # can not use OriginalFileName as is empty\n        Image|endswith:\n            - '\\nc.exe'\n            - '\\ncat.exe'\n            - '\\netcat.exe'\n    selection_cmdline:\n        # Typical command lines\n        CommandLine|contains:\n            - ' -lvp '\n            - ' -lvnp'\n            - ' -l -v -p '\n            - ' -lv -p '\n            - ' -l --proxy-type http '\n            #- ' --exec cmd.exe ' # Not specific enough for netcat\n            - ' -vnl --exec '\n            - ' -vnl -e '\n            - ' --lua-exec '\n            - ' --sh-exec '\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate ncat use\nlevel: high\n",
      "question": "execution of Netcat. Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network",
      "answer": "In order to detect execution of Netcat, which adversaries may use for communication between host and command and control (C2) server or among infected hosts within a network, you should: Monitor the process creation logs on Windows systems for signs of Netcat execution. Specifically, watch for the appearance of processes whose image names end with '\\nc.exe', '\\ncat.exe', or '\\netcat.exe'. Additionally, pay close attention to the command line parameters used with these processes. Commonly, Netcat is executed with specific command line arguments that enable listening modes or specify verbose output, such as ' -lvp ', ' -lvnp', ' -l -v -p ', ' -lv -p ', ' -l --proxy-type http ', ' -vnl --exec ', ' -vnl -e ', ' --lua-exec ', or ' --sh-exec '. It's important to note that some uses of Netcat are legitimate, so occurrences might not always indicate malicious activity. However, given the right context, these execution patterns can signify hostile actions aiming to establish unauthorized network communications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations, you should: Monitor process creation events on Windows systems for instances of the Remote Desktop Protocol (RDP) client process, mstsc.exe, being initiated. Specifically, look for the executable image name ending with '\\mstsc.exe' or where the OriginalFileName attribute is 'mstsc.exe'. Additionally, pay close attention to the command line arguments of these processes, especially focusing on instances where the command line ends with a reference to a '.rdp' file, indicating the use of a local RDP configuration file for the connection. Such '.rdp' files should raise suspicion if they are located in certain directories that are uncommon for legitimate RDP file storage. These directories include various system and temporary file paths such as ':\\Users\\Public\\', ':\\Windows\\System32\\spool\\drivers\\color', ':\\Windows\\System32\\Tasks_Migrated', ':\\Windows\\Tasks\\', ':\\Windows\\Temp\\', ':\\Windows\\Tracing\\', '\\AppData\\Local\\Temp\\', and '\\Downloads\\'. Monitoring for RDP connections initiated from or involving these paths can be critical for identifying unauthorized remote access attempts. However, it's important to adjust the scrutiny of these detection criteria based on the legitimate use of these paths in your environment, as the likelihood of false positives can vary. The detection of such activities is associated with high concern due to the potential for misuse in tactics like lateral movement and persistence.\n\nThis approach encapsulates the concept of monitoring for suspicious behavior associated with RDP usage, aiming to uncover potentially malicious activities attempting to exploit remote desktop protocols for unauthorized access or control within a Windows environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mstsc.exe'\n        - OriginalFileName: 'mstsc.exe'\n    selection_extension:\n        CommandLine|endswith:\n            - '.rdp'\n            - '.rdp\"'\n    selection_paths:\n        # Note: This list of paths is better transformed into a whitelist where you only exclude legitimate locations you use in your env\n        CommandLine|contains:\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\System32\\spool\\drivers\\color'\n            - ':\\Windows\\System32\\Tasks_Migrated '\n            - ':\\Windows\\Tasks\\'\n            - ':\\Windows\\Temp\\'\n            - ':\\Windows\\Tracing\\'\n            - '\\AppData\\Local\\Temp\\'\n            # - '\\Desktop\\' # Could be source of FP depending on the environment\n            - '\\Downloads\\' # Could be source of FP depending on the environment\n    condition: all of selection_*\nfalsepositives:\n    - Likelihood is related to how often the paths are used in the environment\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mstsc.exe'\n        - OriginalFileName: 'mstsc.exe'\n    selection_extension:\n        CommandLine|endswith:\n            - '.rdp'\n            - '.rdp\"'\n    selection_paths:\n        # Note: This list of paths is better transformed into a whitelist where you only exclude legitimate locations you use in your env\n        CommandLine|contains:\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\System32\\spool\\drivers\\color'\n            - ':\\Windows\\System32\\Tasks_Migrated '\n            - ':\\Windows\\Tasks\\'\n            - ':\\Windows\\Temp\\'\n            - ':\\Windows\\Tracing\\'\n            - '\\AppData\\Local\\Temp\\'\n            # - '\\Desktop\\' # Could be source of FP depending on the environment\n            - '\\Downloads\\' # Could be source of FP depending on the environment\n    condition: all of selection_*\nfalsepositives:\n    - Likelihood is related to how often the paths are used in the environment\nlevel: high\n",
      "question": "potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
      "answer": "In order to detect potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations, you should: Monitor process creation events on Windows systems for instances of the Remote Desktop Protocol (RDP) client process, mstsc.exe, being initiated. Specifically, look for the executable image name ending with '\\mstsc.exe' or where the OriginalFileName attribute is 'mstsc.exe'. Additionally, pay close attention to the command line arguments of these processes, especially focusing on instances where the command line ends with a reference to a '.rdp' file, indicating the use of a local RDP configuration file for the connection. Such '.rdp' files should raise suspicion if they are located in certain directories that are uncommon for legitimate RDP file storage. These directories include various system and temporary file paths such as ':\\Users\\Public\\', ':\\Windows\\System32\\spool\\drivers\\color', ':\\Windows\\System32\\Tasks_Migrated', ':\\Windows\\Tasks\\', ':\\Windows\\Temp\\', ':\\Windows\\Tracing\\', '\\AppData\\Local\\Temp\\', and '\\Downloads\\'. Monitoring for RDP connections initiated from or involving these paths can be critical for identifying unauthorized remote access attempts. However, it's important to adjust the scrutiny of these detection criteria based on the legitimate use of these paths in your environment, as the likelihood of false positives can vary. The detection of such activities is associated with high concern due to the potential for misuse in tactics like lateral movement and persistence.\n\nThis approach encapsulates the concept of monitoring for suspicious behavior associated with RDP usage, aiming to uncover potentially malicious activities attempting to exploit remote desktop protocols for unauthorized access or control within a Windows environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to prevent adversaries from abusing PowerShell commands and scripts for execution, you should monitor PowerShell script activities specifically for patterns that might indicate malicious behavior. This involves looking for the use of certain PowerShell cmdlets and syntaxes. To do this effectively, ensure that Script Block Logging is enabled on Windows systems, as this will allow for the detailed logging of PowerShell script executions.\n\nPay close attention to scripts that attempt to create new objects using the `New-Object` command, especially those involving `System.Xml.XmlDocument` and subsequently call the `.Load` method. This pattern can be indicative of scripts trying to load and parse XML content, which might be used in various attack scenarios, such as downloading and executing malicious code.\n\nAdditionally, watch for the utilization of `Invoke-Expression`, `Invoke-Command`, or abbreviated versions like `IEX` and `ICM -`. These commands can execute strings as PowerShell code, which is a common technique used by attackers to run malicious code on a system without writing it to disk, thus evading traditional antivirus detections.\n\nBe aware that while monitoring for these specific command patterns can significantly aid in detecting potential PowerShell abuse, it can also lead to false positives. For instance, legitimate administrative activities might make use of these commands and scripts for valid purposes. Therefore, context and additional investigation are key to distinguishing between malicious activities and legitimate ones. The detection effort is considered to have a medium level of urgency, meaning while it's important to address, it should be balanced against other security priorities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_xml:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'System.Xml.XmlDocument'\n            - '.Load'\n    selection_exec:\n        ScriptBlockText|contains:\n            - 'IEX '\n            - 'Invoke-Expression '\n            - 'Invoke-Command '\n            - 'ICM -'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_xml:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'System.Xml.XmlDocument'\n            - '.Load'\n    selection_exec:\n        ScriptBlockText|contains:\n            - 'IEX '\n            - 'Invoke-Expression '\n            - 'Invoke-Command '\n            - 'ICM -'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
      "answer": "In order to prevent adversaries from abusing PowerShell commands and scripts for execution, you should monitor PowerShell script activities specifically for patterns that might indicate malicious behavior. This involves looking for the use of certain PowerShell cmdlets and syntaxes. To do this effectively, ensure that Script Block Logging is enabled on Windows systems, as this will allow for the detailed logging of PowerShell script executions.\n\nPay close attention to scripts that attempt to create new objects using the `New-Object` command, especially those involving `System.Xml.XmlDocument` and subsequently call the `.Load` method. This pattern can be indicative of scripts trying to load and parse XML content, which might be used in various attack scenarios, such as downloading and executing malicious code.\n\nAdditionally, watch for the utilization of `Invoke-Expression`, `Invoke-Command`, or abbreviated versions like `IEX` and `ICM -`. These commands can execute strings as PowerShell code, which is a common technique used by attackers to run malicious code on a system without writing it to disk, thus evading traditional antivirus detections.\n\nBe aware that while monitoring for these specific command patterns can significantly aid in detecting potential PowerShell abuse, it can also lead to false positives. For instance, legitimate administrative activities might make use of these commands and scripts for valid purposes. Therefore, context and additional investigation are key to distinguishing between malicious activities and legitimate ones. The detection effort is considered to have a medium level of urgency, meaning while it's important to address, it should be balanced against other security priorities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Russian group activity as described in Global Threat Report 2019 by Crowdstrike.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Russian group activity as described in Global Threat Report 2019 by Crowdstrike, you should: Focus on monitoring process creation events in Windows systems for specific suspicious activities. These activities include the use of the `xcopy` command with parameters \"/S /E /C /Q /H\" followed by a network path that contains \"\\sysvol\\\", indicating an attempt to copy sensitive data stealthily. Another significant indicator of malicious activity is the execution of `adexplorer -snapshot` command with paths directing to the users' downloads folder and targeting files with the \".snp\" extension, suggesting exfiltration or snapshotting of Active Directory data. Due to the specificity of these command lines, such activities are flagged as critical and unlikely to be false positives, pointing directly towards tactics and techniques employed by sophisticated threat actors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_xcopy:\n        CommandLine|contains|all:\n            - 'xcopy /S /E /C /Q /H \\\\\\\\'\n            - '\\sysvol\\'\n    selection_adexplorer:\n        CommandLine|contains|all:\n            - 'adexplorer -snapshot \"\" c:\\users\\'\n            - '\\downloads\\'\n            - '.snp'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_xcopy:\n        CommandLine|contains|all:\n            - 'xcopy /S /E /C /Q /H \\\\\\\\'\n            - '\\sysvol\\'\n    selection_adexplorer:\n        CommandLine|contains|all:\n            - 'adexplorer -snapshot \"\" c:\\users\\'\n            - '\\downloads\\'\n            - '.snp'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "Russian group activity as described in Global Threat Report 2019 by Crowdstrike",
      "answer": "In order to detect Russian group activity as described in Global Threat Report 2019 by Crowdstrike, you should: Focus on monitoring process creation events in Windows systems for specific suspicious activities. These activities include the use of the `xcopy` command with parameters \"/S /E /C /Q /H\" followed by a network path that contains \"\\sysvol\\\", indicating an attempt to copy sensitive data stealthily. Another significant indicator of malicious activity is the execution of `adexplorer -snapshot` command with paths directing to the users' downloads folder and targeting files with the \".snp\" extension, suggesting exfiltration or snapshotting of Active Directory data. Due to the specificity of these command lines, such activities are flagged as critical and unlikely to be false positives, pointing directly towards tactics and techniques employed by sophisticated threat actors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unauthorized network sniffing activities on a Linux system monitored by auditd, which is a technique used by adversaries to monitor or capture information sent over a connection by placing a network interface in promiscuous mode or using span ports, you should observe the execution of specific network sniffing tools, such as `tcpdump` and `tshark`. Specifically, focus on the instances where these tools are invoked with command-line arguments indicating an intent to capture network packets (-c flag) and specifying a network interface to listen on (indicated by `-i`). The detection is based on logs from the auditd service, focusing on `execve` type events where the first argument (`a0`) matches the name of the network sniffing tool (`tcpdump` or `tshark`), the second argument (`a1`) is `-c`, indicating a capture is to be performed, and the fourth argument (`a3`) contains or matches `-i`, specifying the interface to listen on. It's important to consider potential legitimate uses of these network sniffing tools by administrators or users for diagnostic or monitoring purposes, which may result in false positives. The severity level for this activity is considered low due to the possibility of legitimate use cases.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_1:\n        type: 'execve'\n        a0: 'tcpdump'\n        a1: '-c'\n        a3|contains: '-i'\n    selection_2:\n        type: 'execve'\n        a0: 'tshark'\n        a1: '-c'\n        a3: '-i'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrator or user uses network sniffing tool for legitimate reasons.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_1:\n        type: 'execve'\n        a0: 'tcpdump'\n        a1: '-c'\n        a3|contains: '-i'\n    selection_2:\n        type: 'execve'\n        a0: 'tshark'\n        a1: '-c'\n        a3: '-i'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrator or user uses network sniffing tool for legitimate reasons.\nlevel: low\n",
      "question": "Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
      "answer": "In order to detect unauthorized network sniffing activities on a Linux system monitored by auditd, which is a technique used by adversaries to monitor or capture information sent over a connection by placing a network interface in promiscuous mode or using span ports, you should observe the execution of specific network sniffing tools, such as `tcpdump` and `tshark`. Specifically, focus on the instances where these tools are invoked with command-line arguments indicating an intent to capture network packets (-c flag) and specifying a network interface to listen on (indicated by `-i`). The detection is based on logs from the auditd service, focusing on `execve` type events where the first argument (`a0`) matches the name of the network sniffing tool (`tcpdump` or `tshark`), the second argument (`a1`) is `-c`, indicating a capture is to be performed, and the fourth argument (`a3`) contains or matches `-i`, specifying the interface to listen on. It's important to consider potential legitimate uses of these network sniffing tools by administrators or users for diagnostic or monitoring purposes, which may result in false positives. The severity level for this activity is considered low due to the possibility of legitimate use cases."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of a scanner by zerosum0x0 that discovers targets vulnerable to  CVE-2019-0708 RDP RCE aka BlueKeep.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of a scanner by zerosum0x0 that discovers targets vulnerable to CVE-2019-0708 RDP RCE aka BlueKeep, you should: focus on monitoring Windows security event logs, specifically for events with the ID 4625 which represent failed login attempts. Particularly, you should watch for attempts that involve the username \"AAAAAAA\". This specific scenario is indicative of a scanning activity aiming to identify systems susceptible to the BlueKeep vulnerability by using a particular signature approach in scanning attempts. Considering the event's significance, false positives are deemed unlikely, indicating a high level of confidence in the correlation between detecting such events and the presence of scanning activity targeting this vulnerability.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4625\n        TargetUserName: AAAAAAA\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4625\n        TargetUserName: AAAAAAA\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "use of a scanner by zerosum0x0 that discovers targets vulnerable to  CVE-2019-0708 RDP RCE aka BlueKeep",
      "answer": "In order to detect the use of a scanner by zerosum0x0 that discovers targets vulnerable to CVE-2019-0708 RDP RCE aka BlueKeep, you should: focus on monitoring Windows security event logs, specifically for events with the ID 4625 which represent failed login attempts. Particularly, you should watch for attempts that involve the username \"AAAAAAA\". This specific scenario is indicative of a scanning activity aiming to identify systems susceptible to the BlueKeep vulnerability by using a particular signature approach in scanning attempts. Considering the event's significance, false positives are deemed unlikely, indicating a high level of confidence in the correlation between detecting such events and the presence of scanning activity targeting this vulnerability."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a malicious DLL file in the location where the OneDrive or Team applications\nUpon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect creation of a malicious DLL file in the location where the OneDrive or Team applications upon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded, you should: monitor file events within Windows systems specifically focusing on the creation of files. Look for the creation of files named 'iphlpapi.dll' within the '\\AppData\\Local\\Microsoft' directory. This activity is indicative of an attempt to exploit the legitimate loading of the 'iphlpapi.dll' file by either OneDrive or Teams applications for malicious purposes, known as DLL sideloading. Such actions might not have known false positives due to the specific nature of the file and its uncommon directory for legitimate use. The risk level for this detection is considered high, underscoring the importance of monitoring for this activity to prevent potential security breaches or malware execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains|all:\n            - 'iphlpapi.dll'\n            - '\\AppData\\Local\\Microsoft'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains|all:\n            - 'iphlpapi.dll'\n            - '\\AppData\\Local\\Microsoft'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "creation of a malicious DLL file in the location where the OneDrive or Team applications\nUpon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded\n",
      "answer": "In order to detect creation of a malicious DLL file in the location where the OneDrive or Team applications upon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded, you should: monitor file events within Windows systems specifically focusing on the creation of files. Look for the creation of files named 'iphlpapi.dll' within the '\\AppData\\Local\\Microsoft' directory. This activity is indicative of an attempt to exploit the legitimate loading of the 'iphlpapi.dll' file by either OneDrive or Teams applications for malicious purposes, known as DLL sideloading. Such actions might not have known false positives due to the specific nature of the file and its uncommon directory for legitimate use. The risk level for this detection is considered high, underscoring the importance of monitoring for this activity to prevent potential security breaches or malware execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell script blocks logs to identify instances where 'SyncAppvPublishingServer.exe' is mentioned. This monitoring is predicated on Script Block Logging being enabled on the system. When 'SyncAppvPublishingServer.exe' is detected within these script block texts, it may indicate an attempt to bypass PowerShell execution restrictions typically employed by adversaries. It's important to note, however, that legitimate App-V clients may also trigger this detection, so these instances should be considered as potential false positives. This strategy is aimed at identifying medium-level security threats associated with this particular tactic.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\n",
      "question": "SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
      "answer": "In order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell script blocks logs to identify instances where 'SyncAppvPublishingServer.exe' is mentioned. This monitoring is predicated on Script Block Logging being enabled on the system. When 'SyncAppvPublishingServer.exe' is detected within these script block texts, it may indicate an attempt to bypass PowerShell execution restrictions typically employed by adversaries. It's important to note, however, that legitimate App-V clients may also trigger this detection, so these instances should be considered as potential false positives. This strategy is aimed at identifying medium-level security threats associated with this particular tactic."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious encoded User-Agent strings, as seen used by some malware..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious encoded User-Agent strings, as seen used by some malware, you should: focus on analyzing proxy logs specifically looking for encoded user-agent strings that may indicate malicious activity. You need to search for user-agent strings that start with specific encoded values. These values correspond to the encodings for 'Chrome', 'AppleWebKit', 'Dalvik', and 'Mozilla' as they often appear in encoded formats in malicious requests. The detection should trigger if any of these encoded patterns are found at the beginning of the user-agent string, signalling potential malware communication or activity attempting to masquerade as legitimate web traffic. The tags associated with this detection activity pertain to techniques and tactics that involve command and control and initial access attempts by various types of malware.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith:\n            - 'Q2hyb21l' # Chrome Encoded with offset to not include padding\n            - 'QXBwbGVXZWJLaX' # AppleWebKit Encoded with offset to not include padding\n            - 'RGFsdmlr' # Dalvik Encoded with offset to not include padding\n            - 'TW96aWxsY'  # Mozilla Encoded with offset to not include padding (as used by YamaBot)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith:\n            - 'Q2hyb21l' # Chrome Encoded with offset to not include padding\n            - 'QXBwbGVXZWJLaX' # AppleWebKit Encoded with offset to not include padding\n            - 'RGFsdmlr' # Dalvik Encoded with offset to not include padding\n            - 'TW96aWxsY'  # Mozilla Encoded with offset to not include padding (as used by YamaBot)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious encoded User-Agent strings, as seen used by some malware.",
      "answer": "In order to detect suspicious encoded User-Agent strings, as seen used by some malware, you should: focus on analyzing proxy logs specifically looking for encoded user-agent strings that may indicate malicious activity. You need to search for user-agent strings that start with specific encoded values. These values correspond to the encodings for 'Chrome', 'AppleWebKit', 'Dalvik', and 'Mozilla' as they often appear in encoded formats in malicious requests. The detection should trigger if any of these encoded patterns are found at the beginning of the user-agent string, signalling potential malware communication or activity attempting to masquerade as legitimate web traffic. The tags associated with this detection activity pertain to techniques and tactics that involve command and control and initial access attempts by various types of malware."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of PowerShell via creation of named pipe starting with PSHost.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of PowerShell via creation of named pipe starting with PSHost, you should: Focus on monitoring the creation of named pipes in Windows environments, specifically looking for any instances where the pipe name begins with '\\PSHost'. This detection requires you to have logging for Named Pipe Events enabled in your Sysmon configuration, particularly looking out for Event ID 17 and Event ID 18. It's recommended to use or verify against popular Sysmon configurations available online, such as those by SwiftOnSecurity, Neo23x0, or Olaf Hartong. These configurations need to be in place as they are instrumental in capturing the required event data. Testing the detection can be achieved through the use of specific PowerShell scripts designed to simulate named pipe creation that follows the patterns attackers might use. It's important to note that while this method aims to identify malicious activity related to PowerShell execution, the possibility of encountering unknown false positives exists - meaning that not all detections might represent genuine threats. The focus is on providing informational level insights into potential suspicious activities involving PowerShell and named pipes, aiding in the broader strategy of mitigating tactics that involve the execution and automation based on PowerShell scripts, particularly those initiated by adversaries through named pipes that adhere to a naming convention starting with 'PSHost'.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PSHost'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PSHost'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: informational\n",
      "question": "execution of PowerShell via creation of named pipe starting with PSHost",
      "answer": "In order to detect execution of PowerShell via creation of named pipe starting with PSHost, you should: Focus on monitoring the creation of named pipes in Windows environments, specifically looking for any instances where the pipe name begins with '\\PSHost'. This detection requires you to have logging for Named Pipe Events enabled in your Sysmon configuration, particularly looking out for Event ID 17 and Event ID 18. It's recommended to use or verify against popular Sysmon configurations available online, such as those by SwiftOnSecurity, Neo23x0, or Olaf Hartong. These configurations need to be in place as they are instrumental in capturing the required event data. Testing the detection can be achieved through the use of specific PowerShell scripts designed to simulate named pipe creation that follows the patterns attackers might use. It's important to note that while this method aims to identify malicious activity related to PowerShell execution, the possibility of encountering unknown false positives exists - meaning that not all detections might represent genuine threats. The focus is on providing informational level insights into potential suspicious activities involving PowerShell and named pipes, aiding in the broader strategy of mitigating tactics that involve the execution and automation based on PowerShell scripts, particularly those initiated by adversaries through named pipes that adhere to a naming convention starting with 'PSHost'."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of PowerShell to identify the current logged user..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of PowerShell to identify the current logged user, you should: Focus on monitoring PowerShell script activities in the Windows environment where Script Block Logging is enabled. Look for scripts containing specific snippets like '[System.Environment]::UserName', '$env:UserName', or '[System.Security.Principal.WindowsIdentity]::GetCurrent()' as these are indicators of attempts to retrieve the current user's name. It's important to note, however, that there could be legitimate PowerShell scripts that perform similar actions, so the detection has a low level of confidence. The main goal is to identify potential reconnaissance efforts where adversaries might be trying to gather information about user accounts on the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - '[System.Environment]::UserName'\n            - '$env:UserName'\n            - '[System.Security.Principal.WindowsIdentity]::GetCurrent()'\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - '[System.Environment]::UserName'\n            - '$env:UserName'\n            - '[System.Security.Principal.WindowsIdentity]::GetCurrent()'\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
      "question": "use of PowerShell to identify the current logged user.",
      "answer": "In order to detect the use of PowerShell to identify the current logged user, you should: Focus on monitoring PowerShell script activities in the Windows environment where Script Block Logging is enabled. Look for scripts containing specific snippets like '[System.Environment]::UserName', '$env:UserName', or '[System.Security.Principal.WindowsIdentity]::GetCurrent()' as these are indicators of attempts to retrieve the current user's name. It's important to note, however, that there could be legitimate PowerShell scripts that perform similar actions, so the detection has a low level of confidence. The main goal is to identify potential reconnaissance efforts where adversaries might be trying to gather information about user accounts on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential malicious modification of run keys by winekey or team9 backdoor.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential malicious modification of run keys by winekey or team9 backdoor, you should: Monitor registry event logs in Windows systems for any modifications targeting object paths that end with 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'. This focus is critical as attackers commonly manipulate registry run keys to achieve persistence by ensuring their malware or backdoor programs launch automatically at system startup. When such an activity is identified, it is pertinent to examine the associated computer name, the image involved in the modification, the type of event that occurred, and the specific registry object targeted. Nonetheless, it's important to acknowledge that there might be instances deemed as false positives due to unidentified reasons; hence, a high level of caution and verification is recommended in the analysis process to ascertain the legitimacy of the registry modifications observed.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'\n    condition: selection\nfields:\n    - ComputerName\n    - Image\n    - EventType\n    - TargetObject\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'\n    condition: selection\nfields:\n    - ComputerName\n    - Image\n    - EventType\n    - TargetObject\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential malicious modification of run keys by winekey or team9 backdoor",
      "answer": "In order to detect potential malicious modification of run keys by winekey or team9 backdoor, you should: Monitor registry event logs in Windows systems for any modifications targeting object paths that end with 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'. This focus is critical as attackers commonly manipulate registry run keys to achieve persistence by ensuring their malware or backdoor programs launch automatically at system startup. When such an activity is identified, it is pertinent to examine the associated computer name, the image involved in the modification, the type of event that occurred, and the specific registry object targeted. Nonetheless, it's important to acknowledge that there might be instances deemed as false positives due to unidentified reasons; hence, a high level of caution and verification is recommended in the analysis process to ascertain the legitimacy of the registry modifications observed."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting certain parent child patterns found in cases in which a webshell is used to perform certain credential dumping or exfiltration activities on a compromised system.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect certain parent-child patterns found in cases in which a webshell is used to perform certain credential dumping or exfiltration activities on a compromised system, you should monitor process creation logs on Windows systems for specific patterns of activity. Focus on observing processes originating from known web server executables like `w3wp.exe`, `php-cgi.exe`, `nginx.exe`, `httpd.exe`, `caddy.exe`, and `ws_tomcatservice.exe`. Additionally, pay close attention to processes initiated by or related to `java.exe` and `javaw.exe` that have a connection with Tomcat, signified by the presence of \"-tomcat-\" in their paths or command lines including references to `catalina.jar` or `CATALINA_HOME`.\n\nKeep an eye out for suspicious child processes that might indicate malicious activity. This includes processes associated with process dumping efforts (`rundll32`, `comsvcs`); data exfiltration attempts using Winrar (`-hp`, `a`, `-m` in the command line); user account manipulation through commands like adding new users (`net user /add`) or adding users to the administrators group (`net localgroup administrators /add`); as well as processes typical for credential theft, Active Directory recon, process dumping, and system destruction or ransomware actions (`ntdsutil.exe`, `ldifde.exe`, `adfind.exe`, `procdump.exe`, `Nanodump.exe`, `vssadmin.exe`, `fsutil.exe`).\n\nAlso, remain vigilant for suspicious command line patterns often used in malicious PowerShell commands (`-NoP`, `-W Hidden`), decoding activities (with `certutil` or `PowerShell`), registry operations indicative of syskey extraction (`reg save`), methods to download or execute encoded payloads within PowerShell, and techniques related to ticket or credentials theft and manipulation (`/ticket:`, `sekurlsa`). \n\nDetection should trigger if at least one pattern from the specified web server processes is observed alongside one indication of suspicious child process activity. False positives are considered unlikely due to the specificity of these patterns, indicating a high level of certainty when such activities are flagged.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n   # Webserver\n    selection_webserver_image:\n        ParentImage|endswith:\n            - '\\w3wp.exe'\n            - '\\php-cgi.exe'\n            - '\\nginx.exe'\n            - '\\httpd.exe'\n            - '\\caddy.exe'\n            - '\\ws_tomcatservice.exe'\n    selection_webserver_characteristics_tomcat1:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentImage|contains:\n            - '-tomcat-'\n            - '\\tomcat'\n    selection_webserver_characteristics_tomcat2:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        CommandLine|contains:\n            - 'catalina.jar'\n            - 'CATALINA_HOME'\n    # Suspicious child processes\n    selection_child_1:\n        # Process dumping\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'comsvcs'\n    selection_child_2:\n        # Winrar exfil\n        CommandLine|contains|all:\n            - ' -hp'\n            - ' a '\n            - ' -m'\n    selection_child_3:\n        # User add\n        CommandLine|contains|all:\n            - 'net'\n            - ' user '\n            - ' /add'\n    selection_child_4:\n        CommandLine|contains|all:\n            - 'net'\n            - ' localgroup '\n            - ' administrators '\n            - '/add'\n    selection_child_5:\n        Image|endswith:\n            # Credential stealing\n            - '\\ntdsutil.exe'\n            # AD recon\n            - '\\ldifde.exe'\n            - '\\adfind.exe'\n            # Process dumping\n            - '\\procdump.exe'\n            - '\\Nanodump.exe'\n            # Destruction / ransom groups\n            - '\\vssadmin.exe'\n            - '\\fsutil.exe'\n    selection_child_6:\n        # SUspicious patterns\n        CommandLine|contains:\n            - ' -NoP '  # Often used in malicious PowerShell commands\n            - ' -W Hidden '  # Often used in malicious PowerShell commands\n            - ' -decode '  # Used with certutil\n            - ' /decode '  # Used with certutil\n            - 'reg save '  # save registry SAM - syskey extraction\n            - '.downloadstring('  # PowerShell download command\n            - '.downloadfile('  # PowerShell download command\n            - 'FromBase64String' # PowerShell encoded payload\n            - ' /ticket:'  # Rubeus\n            - ' sekurlsa'  # Mimikatz\n            - '.dmp full'  # Process dumping method apart from procdump\n            - 'process call create' # WMIC process creation\n            - 'whoami /priv'\n    condition: 1 of selection_webserver* and 1 of selection_child*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n   # Webserver\n    selection_webserver_image:\n        ParentImage|endswith:\n            - '\\w3wp.exe'\n            - '\\php-cgi.exe'\n            - '\\nginx.exe'\n            - '\\httpd.exe'\n            - '\\caddy.exe'\n            - '\\ws_tomcatservice.exe'\n    selection_webserver_characteristics_tomcat1:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentImage|contains:\n            - '-tomcat-'\n            - '\\tomcat'\n    selection_webserver_characteristics_tomcat2:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        CommandLine|contains:\n            - 'catalina.jar'\n            - 'CATALINA_HOME'\n    # Suspicious child processes\n    selection_child_1:\n        # Process dumping\n        CommandLine|contains|all:\n            - 'rundll32'\n            - 'comsvcs'\n    selection_child_2:\n        # Winrar exfil\n        CommandLine|contains|all:\n            - ' -hp'\n            - ' a '\n            - ' -m'\n    selection_child_3:\n        # User add\n        CommandLine|contains|all:\n            - 'net'\n            - ' user '\n            - ' /add'\n    selection_child_4:\n        CommandLine|contains|all:\n            - 'net'\n            - ' localgroup '\n            - ' administrators '\n            - '/add'\n    selection_child_5:\n        Image|endswith:\n            # Credential stealing\n            - '\\ntdsutil.exe'\n            # AD recon\n            - '\\ldifde.exe'\n            - '\\adfind.exe'\n            # Process dumping\n            - '\\procdump.exe'\n            - '\\Nanodump.exe'\n            # Destruction / ransom groups\n            - '\\vssadmin.exe'\n            - '\\fsutil.exe'\n    selection_child_6:\n        # SUspicious patterns\n        CommandLine|contains:\n            - ' -NoP '  # Often used in malicious PowerShell commands\n            - ' -W Hidden '  # Often used in malicious PowerShell commands\n            - ' -decode '  # Used with certutil\n            - ' /decode '  # Used with certutil\n            - 'reg save '  # save registry SAM - syskey extraction\n            - '.downloadstring('  # PowerShell download command\n            - '.downloadfile('  # PowerShell download command\n            - 'FromBase64String' # PowerShell encoded payload\n            - ' /ticket:'  # Rubeus\n            - ' sekurlsa'  # Mimikatz\n            - '.dmp full'  # Process dumping method apart from procdump\n            - 'process call create' # WMIC process creation\n            - 'whoami /priv'\n    condition: 1 of selection_webserver* and 1 of selection_child*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "certain parent child patterns found in cases in which a webshell is used to perform certain credential dumping or exfiltration activities on a compromised system",
      "answer": "In order to detect certain parent-child patterns found in cases in which a webshell is used to perform certain credential dumping or exfiltration activities on a compromised system, you should monitor process creation logs on Windows systems for specific patterns of activity. Focus on observing processes originating from known web server executables like `w3wp.exe`, `php-cgi.exe`, `nginx.exe`, `httpd.exe`, `caddy.exe`, and `ws_tomcatservice.exe`. Additionally, pay close attention to processes initiated by or related to `java.exe` and `javaw.exe` that have a connection with Tomcat, signified by the presence of \"-tomcat-\" in their paths or command lines including references to `catalina.jar` or `CATALINA_HOME`.\n\nKeep an eye out for suspicious child processes that might indicate malicious activity. This includes processes associated with process dumping efforts (`rundll32`, `comsvcs`); data exfiltration attempts using Winrar (`-hp`, `a`, `-m` in the command line); user account manipulation through commands like adding new users (`net user /add`) or adding users to the administrators group (`net localgroup administrators /add`); as well as processes typical for credential theft, Active Directory recon, process dumping, and system destruction or ransomware actions (`ntdsutil.exe`, `ldifde.exe`, `adfind.exe`, `procdump.exe`, `Nanodump.exe`, `vssadmin.exe`, `fsutil.exe`).\n\nAlso, remain vigilant for suspicious command line patterns often used in malicious PowerShell commands (`-NoP`, `-W Hidden`), decoding activities (with `certutil` or `PowerShell`), registry operations indicative of syskey extraction (`reg save`), methods to download or execute encoded payloads within PowerShell, and techniques related to ticket or credentials theft and manipulation (`/ticket:`, `sekurlsa`). \n\nDetection should trigger if at least one pattern from the specified web server processes is observed alongside one indication of suspicious child process activity. False positives are considered unlikely due to the specificity of these patterns, indicating a high level of certainty when such activities are flagged."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known WMI recon method to look for unquoted service paths, often used by pentest inside of powershell scripts attackers enum scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known WMI recon method to look for unquoted service paths, often used by pentest inside of PowerShell scripts attackers enum scripts, you should: Monitor Windows Script Block Logging, which needs to be enabled for this detection to work. Specifically, keep an eye out for the use of PowerShell scripts that contain text indicating the usage of either 'Get-WmiObject ' or the shorthand 'gwmi ' command. These commands are red flags especially when they are used in conjunction with querying ' Win32_Service ' along with properties like 'Name', 'DisplayName', 'PathName', and 'StartMode'. These patterns are indicative of reconnaissance activities aiming to identify unquoted service paths, a common vector for privilege escalation or persistent access by attackers. Be mindful though, that this alert could trigger on benign activities, and as such, some instances flagged by this detection may not be malicious and would require further investigation to ascertain their nature. The alert level for this activity is set to medium, reflecting its potential severity while acknowledging the possibility of false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject '\n            - 'gwmi '\n        ScriptBlockText|contains|all:\n            - ' Win32_Service '\n            - 'Name'\n            - 'DisplayName'\n            - 'PathName'\n            - 'StartMode'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject '\n            - 'gwmi '\n        ScriptBlockText|contains|all:\n            - ' Win32_Service '\n            - 'Name'\n            - 'DisplayName'\n            - 'PathName'\n            - 'StartMode'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "known WMI recon method to look for unquoted service paths, often used by pentest inside of powershell scripts attackers enum scripts",
      "answer": "In order to detect known WMI recon method to look for unquoted service paths, often used by pentest inside of PowerShell scripts attackers enum scripts, you should: Monitor Windows Script Block Logging, which needs to be enabled for this detection to work. Specifically, keep an eye out for the use of PowerShell scripts that contain text indicating the usage of either 'Get-WmiObject ' or the shorthand 'gwmi ' command. These commands are red flags especially when they are used in conjunction with querying ' Win32_Service ' along with properties like 'Name', 'DisplayName', 'PathName', and 'StartMode'. These patterns are indicative of reconnaissance activities aiming to identify unquoted service paths, a common vector for privilege escalation or persistent access by attackers. Be mindful though, that this alert could trigger on benign activities, and as such, some instances flagged by this detection may not be malicious and would require further investigation to ascertain their nature. The alert level for this activity is set to medium, reflecting its potential severity while acknowledging the possibility of false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of stdin to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should monitor security logs on Windows systems. Specifically, focus on events with ID 4697, which records service installations. This scrutiny becomes effective only when the 'System Security Extension' audit subcategory is enabled, as it allows the logging of these events. Look for services being installed where the service file name incorporates 'cmd' or 'powershell' along with either the presence of 'noexit' or the explicit command invocation patterns ' /c ' and ' /r '. This combination is indicative of an attempt to obfuscate the execution of PowerShell via standard input mechanisms, a tactic often employed to avoid detection by simple command line monitoring tools.\n\nPay attention to services that contain both 'cmd' and 'powershell' in their installation path or command line because this is a common method employed by adversaries to execute PowerShell scripts in a way that might not be immediately apparent to casual observation or basic detection mechanisms. Additionally, the use of 'noexit', ' /c ', or ' /r ' further suggests an attempt to control the PowerShell interpreter's behavior, typically to ensure that scripts execute in a particular context or to hide their execution.\n\nDue to the sophisticated nature of these detection methods, any hits on these criteria should be treated with a high level of suspicion. However, maintain awareness of potential unknown false positives, which could arise from legitimate administrative activities or unique software installation practices within your environment. Tags associated with this detection tactic include techniques and tactics around the execution of scripts, obfuscation, and potentially undesired or unauthorized service installation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - 'powershell'\n    selection2:\n        ServiceFileName|contains:\n            - '${input}'\n            - 'noexit'\n    selection3:\n        ServiceFileName|contains:\n            - ' /c '\n            - ' /r '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - 'powershell'\n    selection2:\n        ServiceFileName|contains:\n            - '${input}'\n            - 'noexit'\n    selection3:\n        ServiceFileName|contains:\n            - ' /c '\n            - ' /r '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should monitor security logs on Windows systems. Specifically, focus on events with ID 4697, which records service installations. This scrutiny becomes effective only when the 'System Security Extension' audit subcategory is enabled, as it allows the logging of these events. Look for services being installed where the service file name incorporates 'cmd' or 'powershell' along with either the presence of 'noexit' or the explicit command invocation patterns ' /c ' and ' /r '. This combination is indicative of an attempt to obfuscate the execution of PowerShell via standard input mechanisms, a tactic often employed to avoid detection by simple command line monitoring tools.\n\nPay attention to services that contain both 'cmd' and 'powershell' in their installation path or command line because this is a common method employed by adversaries to execute PowerShell scripts in a way that might not be immediately apparent to casual observation or basic detection mechanisms. Additionally, the use of 'noexit', ' /c ', or ' /r ' further suggests an attempt to control the PowerShell interpreter's behavior, typically to ensure that scripts execute in a particular context or to hide their execution.\n\nDue to the sophisticated nature of these detection methods, any hits on these criteria should be treated with a high level of suspicion. However, maintain awareness of potential unknown false positives, which could arise from legitimate administrative activities or unique software installation practices within your environment. Tags associated with this detection tactic include techniques and tactics around the execution of scripts, obfuscation, and potentially undesired or unauthorized service installation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server, you should: Monitor your web server logs for POST requests containing the specific query '/analytics/telemetry/ph/api/hyper/send?' in the URI. These types of requests could indicate an attempt to exploit the file upload vulnerability present in the VMWare vCenter Server, as identified by CVE-2021-22005. Be aware that receiving alerts on such patterns does not always mean an attack is successful; sometimes, vulnerability scanning activities can trigger these alerts, marking them as false positives. However, due to the high risk associated with this vulnerability, any detection should be treated with caution and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains: '/analytics/telemetry/ph/api/hyper/send?'\n    condition: selection\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains: '/analytics/telemetry/ph/api/hyper/send?'\n    condition: selection\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
      "question": "exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server.",
      "answer": "In order to detect exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server, you should: Monitor your web server logs for POST requests containing the specific query '/analytics/telemetry/ph/api/hyper/send?' in the URI. These types of requests could indicate an attempt to exploit the file upload vulnerability present in the VMWare vCenter Server, as identified by CVE-2021-22005. Be aware that receiving alerts on such patterns does not always mean an attack is successful; sometimes, vulnerability scanning activities can trigger these alerts, marking them as false positives. However, due to the high risk associated with this vulnerability, any detection should be treated with caution and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exploitation attempt of CVE-2023-25157 a SQL injection in GeoServer.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a potential exploitation attempt of CVE-2023-25157, a SQL injection vulnerability in GeoServer, you should: Monitor web server logs, particularly focusing on GET requests that query the GeoServer (signified by '/geoserver/ows' in the URI query). Look for the presence of 'CQL_FILTER=' within these requests, indicating a filtering condition is being specified. Be alert for specific filter/function usages which include 'PropertyIsLike', 'strEndsWith', 'strStartsWith', 'FeatureId', 'jsonArrayContains', 'DWithin', these are considered abusable and may point towards exploitation attempts if used maliciously.\n\nIn addition to the abusable filters and functions, also track any URI queries that contain SQL-related keywords such as '+--' (indicating a comment), '+AS+', '+OR+', 'FROM', 'ORDER BY', 'SELECT', 'sleep%28' (indicating a time-delaying function for testing SQL injection), 'substring%28', 'UNION', 'WHERE'. These are often used in constructing SQL injection attacks to manipulate or exfiltrate data.\n\nThe analysis encompasses detecting both the specific attempt to exploit the GeoServer through its query parameters and a general SQL injection attempt via the payload. It is set at a high-level importance due to the significant risk SQL injection attacks pose. Note that during monitorization, results generated by vulnerability scanners might appear as false positives, indicating benign attempts to detect vulnerabilities rather than actual exploits.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection_url:\n        cs-method: 'GET'\n        cs-uri-query|contains|all:\n            - '/geoserver/ows'\n            - 'CQL_FILTER='\n        cs-uri-query|contains:\n            # Abusable Filters/Function as reported in the Advisory\n            - 'PropertyIsLike'\n            - 'strEndsWith'\n            - 'strStartsWith'\n            - 'FeatureId'\n            - 'jsonArrayContains'\n            - 'DWithin'\n    selection_payload:\n        cs-uri-query|contains:\n            - '+--'\n            - '+AS+'\n            - '+OR+'\n            - 'FROM'\n            - 'ORDER+BY'\n            - 'SELECT'\n            - 'sleep%28'\n            - 'substring%28'\n            - 'UNION'\n            - 'WHERE'\n    condition: all of selection_*\nfalsepositives:\n    - Vulnerability scanners\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection_url:\n        cs-method: 'GET'\n        cs-uri-query|contains|all:\n            - '/geoserver/ows'\n            - 'CQL_FILTER='\n        cs-uri-query|contains:\n            # Abusable Filters/Function as reported in the Advisory\n            - 'PropertyIsLike'\n            - 'strEndsWith'\n            - 'strStartsWith'\n            - 'FeatureId'\n            - 'jsonArrayContains'\n            - 'DWithin'\n    selection_payload:\n        cs-uri-query|contains:\n            - '+--'\n            - '+AS+'\n            - '+OR+'\n            - 'FROM'\n            - 'ORDER+BY'\n            - 'SELECT'\n            - 'sleep%28'\n            - 'substring%28'\n            - 'UNION'\n            - 'WHERE'\n    condition: all of selection_*\nfalsepositives:\n    - Vulnerability scanners\nlevel: high\n",
      "question": "potential exploitation attempt of CVE-2023-25157 a SQL injection in GeoServer",
      "answer": "In order to detect a potential exploitation attempt of CVE-2023-25157, a SQL injection vulnerability in GeoServer, you should: Monitor web server logs, particularly focusing on GET requests that query the GeoServer (signified by '/geoserver/ows' in the URI query). Look for the presence of 'CQL_FILTER=' within these requests, indicating a filtering condition is being specified. Be alert for specific filter/function usages which include 'PropertyIsLike', 'strEndsWith', 'strStartsWith', 'FeatureId', 'jsonArrayContains', 'DWithin', these are considered abusable and may point towards exploitation attempts if used maliciously.\n\nIn addition to the abusable filters and functions, also track any URI queries that contain SQL-related keywords such as '+--' (indicating a comment), '+AS+', '+OR+', 'FROM', 'ORDER BY', 'SELECT', 'sleep%28' (indicating a time-delaying function for testing SQL injection), 'substring%28', 'UNION', 'WHERE'. These are often used in constructing SQL injection attacks to manipulate or exfiltrate data.\n\nThe analysis encompasses detecting both the specific attempt to exploit the GeoServer through its query parameters and a general SQL injection attempt via the payload. It is set at a high-level importance due to the significant risk SQL injection attacks pose. Note that during monitorization, results generated by vulnerability scanners might appear as false positives, indicating benign attempts to detect vulnerabilities rather than actual exploits."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of local users via the net.exe command with the option \"never expire\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of local users via the net.exe command with the option \"never expire\", you should: Focus on monitoring process creation logs within Windows environments. Look specifically for processes that are initiated by 'net.exe' or 'net1.exe', which can be identified not only by their image paths ending with '\\net.exe' or '\\net1.exe' but also by checking the OriginalFileName attribute for 'net.exe' or 'net1.exe'. Moreover, scrutinize the command line arguments accompanying these process creations for the presence of 'user', 'add', and 'expires:never' simultaneously. This detection strategy is crucial as it is aimed at identifying malicious activities characterized by the creation of local user accounts configured to never expire, which could imply unauthorised persistence mechanisms set up by attackers. The false positive rate for these detections is considered unlikely, indicating a high level of confidence in this approach. The associated tactics and techniques for this activity would include Persistence, Privilege Escalation, and potentially Initial Access, due to the use of these tactics in maintaining access to compromised systems and escalating privileges within them.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'user'\n            - 'add'\n            - 'expires:never'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'user'\n            - 'add'\n            - 'expires:never'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "creation of local users via the net.exe command with the option \"never expire\"",
      "answer": "In order to detect the creation of local users via the net.exe command with the option \"never expire\", you should: Focus on monitoring process creation logs within Windows environments. Look specifically for processes that are initiated by 'net.exe' or 'net1.exe', which can be identified not only by their image paths ending with '\\net.exe' or '\\net1.exe' but also by checking the OriginalFileName attribute for 'net.exe' or 'net1.exe'. Moreover, scrutinize the command line arguments accompanying these process creations for the presence of 'user', 'add', and 'expires:never' simultaneously. This detection strategy is crucial as it is aimed at identifying malicious activities characterized by the creation of local user accounts configured to never expire, which could imply unauthorised persistence mechanisms set up by attackers. The false positive rate for these detections is considered unlikely, indicating a high level of confidence in this approach. The associated tactics and techniques for this activity would include Persistence, Privilege Escalation, and potentially Initial Access, due to the use of these tactics in maintaining access to compromised systems and escalating privileges within them."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a file named \"ntds.dit\" (Active Directory Database).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a file named \"ntds.dit\" (Active Directory Database), you should monitor file event logs on Windows systems. Specifically, look for events where a file has been created that ends with the name 'ntds.dit'. Given the context of this action occurring within Windows environments, it is pertinent to analyze the file event logs to spot any instance of this significant event. It is noteworthy that this behaviour might occasionally flag false positives, though they are unspecified, indicating that not every detection might represent a genuine threat. Nonetheless, owing to the critical nature linked with the 'ntds.dit' file, which is central to Active Directory operations and data storage, any creation event for a file with this name is tagged with a low level of threat indication but should not be disregarded without proper investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: 'ntds.dit'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: 'ntds.dit'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "creation of a file named \"ntds.dit\" (Active Directory Database)",
      "answer": "In order to detect the creation of a file named \"ntds.dit\" (Active Directory Database), you should monitor file event logs on Windows systems. Specifically, look for events where a file has been created that ends with the name 'ntds.dit'. Given the context of this action occurring within Windows environments, it is pertinent to analyze the file event logs to spot any instance of this significant event. It is noteworthy that this behaviour might occasionally flag false positives, though they are unspecified, indicating that not every detection might represent a genuine threat. Nonetheless, owing to the critical nature linked with the 'ntds.dit' file, which is central to Active Directory operations and data storage, any creation event for a file with this name is tagged with a low level of threat indication but should not be disregarded without proper investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting base64 encoded listing Win32_Shadowcopy.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect base64 encoded listing Win32_Shadowcopy, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain base64 encoded strings indicative of operations associated with Win32_Shadowcopy, potentially wrapped within a ForEach-Object PowerShell cmdlet. These strings are highly unique and their presence in the command line is a strong indicator of an attempt to interact with or exploit Windows Shadow Copy capabilities, possibly for malicious purposes like data theft, ransomware preparation, or evasion. Given the encoded nature of the command lines being searched for and the specificity of the operation, this type of activity is considered highly suspicious and false positives are unlikely. Monitoring for these encoded command lines is crucial for early detection of such malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Win32_Shadowcopy | ForEach-Object\n        CommandLine|contains:\n            - 'VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA'\n            - 'cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A'\n            - 'XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Win32_Shadowcopy | ForEach-Object\n        CommandLine|contains:\n            - 'VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA'\n            - 'cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A'\n            - 'XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "base64 encoded listing Win32_Shadowcopy",
      "answer": "In order to detect base64 encoded listing Win32_Shadowcopy, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain base64 encoded strings indicative of operations associated with Win32_Shadowcopy, potentially wrapped within a ForEach-Object PowerShell cmdlet. These strings are highly unique and their presence in the command line is a strong indicator of an attempt to interact with or exploit Windows Shadow Copy capabilities, possibly for malicious purposes like data theft, ransomware preparation, or evasion. Given the encoded nature of the command lines being searched for and the specificity of the operation, this type of activity is considered highly suspicious and false positives are unlikely. Monitoring for these encoded command lines is crucial for early detection of such malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Clip.exe to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of Clip.exe to execute PowerShell, you should: focus on monitoring Windows Security logs, specifically searching for Event ID 4697 which involves service installation activities. It\u2019s essential that the 'System Security Extension' audit subcategory is enabled to properly log these events. The key indicator of a potential attack is the creation or modification of services that include the 'cmd', '&&', and 'clipboard]::' strings in the Service File Name, suggesting an attempt to execute PowerShell commands in a concealed manner using Clip.exe. It is important to treat every detection as highly suspicious, although there might be cases where the activity is not malicious (though such false positives are unknown). This activity is associated with tactics and techniques that include Execution and Defense Evasion, specifically focusing on the use of PowerShell and obfuscated commands to evade detection mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - '&&'\n            - 'clipboard]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - '&&'\n            - 'clipboard]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should: focus on monitoring Windows Security logs, specifically searching for Event ID 4697 which involves service installation activities. It\u2019s essential that the 'System Security Extension' audit subcategory is enabled to properly log these events. The key indicator of a potential attack is the creation or modification of services that include the 'cmd', '&&', and 'clipboard]::' strings in the Service File Name, suggesting an attempt to execute PowerShell commands in a concealed manner using Clip.exe. It is important to treat every detection as highly suspicious, although there might be cases where the activity is not malicious (though such false positives are unknown). This activity is associated with tactics and techniques that include Execution and Defense Evasion, specifically focusing on the use of PowerShell and obfuscated commands to evade detection mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Attackers may change the file creation time of a backdoor to make it look like it was installed with the operating system.\nNote that many processes legitimately change the creation time of a file; it does not necessarily indicate malicious activity.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attackers who may change the file creation time of a backdoor to make it look like it was installed with the operating system, you should focus on monitoring for specific changes in files within a Windows environment. Specifically, attention should be given to files within the file_change category, indicating a modification of file metadata, which might suggest nefarious activity when examined within a certain context.\n\nThe primary detection criteria involve scrutinizing the `PreviousCreationUtcTime` attribute of files. If the `PreviousCreationUtcTime` begins with '2022', yet there has not been a corresponding change in `CreationUtcTime` that also starts with '2022', there's a hint of potential tampering akin to what attackers might do to disguise a backdoor. This anomaly could suggest an attempt to alter timestamp data to blend malicious files with legitimate system installations from that period. Similarly, any `PreviousCreationUtcTime` starting with '202' not matching a similar pattern in `CreationUtcTime` indicates a broader scope of this detection strategy, covering the entire decade to catch discrepancies in file creation times.\n\nHowever, not all changes to file creation times are malicious. The explanation specifically accounts for legitimate system processes that could alter file timestamps or create files during their operations. Whitelisted processes include `ProvTool.exe`, `usocoreworker.exe`, and `SystemSettings.exe` located within the Windows System directory, which are known to interact with system configuration and updates legitimately. Additionally, updates stored in `C:\\ProgramData\\USOPrivate\\UpdateStore\\` ending with `.tmp` or `.temp` and changes by `TiWorker.exe` resulting in `.cab` files in Windows directory paths are considered non-malicious and filtered out from alerts to reduce false positives.\n\nFurthermore, it recognizes that changes made to or by the local NTP service are legitimate, indicating an awareness that time synchronization activities might inadvertently trigger criteria that otherwise suggest tampering.\n\nThis detection strategy is classified at a high level of concern due to the sensitivity of the behavior it aims to catch, emphasizing the importance of accurately distinguishing between malicious activity and legitimate system or application functions that could exhibit similar characteristics in logs. Monitoring for these specific patterns of file creation time changes, while excluding known legitimate behaviors, is crucial in identifying potential backdoor installations that attackers have disguised to appear as if they were part of the initial operating system setup.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_change\n    product: windows\ndetection:\n    selection1:\n        PreviousCreationUtcTime|startswith: '2022'\n    filter1:\n        CreationUtcTime|startswith: '2022'\n    selection2:\n        PreviousCreationUtcTime|startswith: '202'\n    filter2:\n        CreationUtcTime|startswith: '202'\n    gen_filter_updates:\n        - Image:\n            - 'C:\\Windows\\system32\\ProvTool.exe'\n            - 'C:\\Windows\\System32\\usocoreworker.exe'\n            - 'C:\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'\n        - TargetFilename|startswith: 'C:\\ProgramData\\USOPrivate\\UpdateStore\\'\n        - TargetFilename|endswith:\n            - '.tmp'\n            - '.temp'\n    gen_filter_tiworker:\n        Image|startswith: 'C:\\WINDOWS\\'\n        Image|endswith: '\\TiWorker.exe'\n        TargetFilename|endswith: '.cab'\n    condition: (( selection1 and not filter1 ) or ( selection2 and not filter2 )) and not 1 of gen_filter*\nfalsepositives:\n    - Changes made to or by the local NTP service\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_change\n    product: windows\ndetection:\n    selection1:\n        PreviousCreationUtcTime|startswith: '2022'\n    filter1:\n        CreationUtcTime|startswith: '2022'\n    selection2:\n        PreviousCreationUtcTime|startswith: '202'\n    filter2:\n        CreationUtcTime|startswith: '202'\n    gen_filter_updates:\n        - Image:\n            - 'C:\\Windows\\system32\\ProvTool.exe'\n            - 'C:\\Windows\\System32\\usocoreworker.exe'\n            - 'C:\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'\n        - TargetFilename|startswith: 'C:\\ProgramData\\USOPrivate\\UpdateStore\\'\n        - TargetFilename|endswith:\n            - '.tmp'\n            - '.temp'\n    gen_filter_tiworker:\n        Image|startswith: 'C:\\WINDOWS\\'\n        Image|endswith: '\\TiWorker.exe'\n        TargetFilename|endswith: '.cab'\n    condition: (( selection1 and not filter1 ) or ( selection2 and not filter2 )) and not 1 of gen_filter*\nfalsepositives:\n    - Changes made to or by the local NTP service\nlevel: high\n",
      "question": "Attackers may change the file creation time of a backdoor to make it look like it was installed with the operating system.\nNote that many processes legitimately change the creation time of a file; it does not necessarily indicate malicious activity.\n",
      "answer": "In order to detect attackers who may change the file creation time of a backdoor to make it look like it was installed with the operating system, you should focus on monitoring for specific changes in files within a Windows environment. Specifically, attention should be given to files within the file_change category, indicating a modification of file metadata, which might suggest nefarious activity when examined within a certain context.\n\nThe primary detection criteria involve scrutinizing the `PreviousCreationUtcTime` attribute of files. If the `PreviousCreationUtcTime` begins with '2022', yet there has not been a corresponding change in `CreationUtcTime` that also starts with '2022', there's a hint of potential tampering akin to what attackers might do to disguise a backdoor. This anomaly could suggest an attempt to alter timestamp data to blend malicious files with legitimate system installations from that period. Similarly, any `PreviousCreationUtcTime` starting with '202' not matching a similar pattern in `CreationUtcTime` indicates a broader scope of this detection strategy, covering the entire decade to catch discrepancies in file creation times.\n\nHowever, not all changes to file creation times are malicious. The explanation specifically accounts for legitimate system processes that could alter file timestamps or create files during their operations. Whitelisted processes include `ProvTool.exe`, `usocoreworker.exe`, and `SystemSettings.exe` located within the Windows System directory, which are known to interact with system configuration and updates legitimately. Additionally, updates stored in `C:\\ProgramData\\USOPrivate\\UpdateStore\\` ending with `.tmp` or `.temp` and changes by `TiWorker.exe` resulting in `.cab` files in Windows directory paths are considered non-malicious and filtered out from alerts to reduce false positives.\n\nFurthermore, it recognizes that changes made to or by the local NTP service are legitimate, indicating an awareness that time synchronization activities might inadvertently trigger criteria that otherwise suggest tampering.\n\nThis detection strategy is classified at a high level of concern due to the sensitivity of the behavior it aims to catch, emphasizing the importance of accurately distinguishing between malicious activity and legitimate system or application functions that could exhibit similar characteristics in logs. Monitoring for these specific patterns of file creation time changes, while excluding known legitimate behaviors, is crucial in identifying potential backdoor installations that attackers have disguised to appear as if they were part of the initial operating system setup."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting wceaux.dll access while WCE pass-the-hash remote command execution on source host.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect wceaux.dll access while WCE pass-the-hash remote command execution on source host, you should: Monitor Windows security event logs for occurrences of event IDs 4656, 4658, 4660, and 4663 that are specifically related to attempts to access an object named wceaux.dll, which may indicate an attempt to use a pass-the-hash technique for remote command execution on the source host. This detection is critical due to the potential severity of pass-the-hash attacks, which can allow unauthorized access to systems by exploiting hashed credentials.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4656\n            - 4658\n            - 4660\n            - 4663\n        ObjectName|endswith: '\\wceaux.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4656\n            - 4658\n            - 4660\n            - 4663\n        ObjectName|endswith: '\\wceaux.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "wceaux.dll access while WCE pass-the-hash remote command execution on source host",
      "answer": "In order to detect wceaux.dll access while WCE pass-the-hash remote command execution on source host, you should: Monitor Windows security event logs for occurrences of event IDs 4656, 4658, 4660, and 4663 that are specifically related to attempts to access an object named wceaux.dll, which may indicate an attempt to use a pass-the-hash technique for remote command execution on the source host. This detection is critical due to the potential severity of pass-the-hash attacks, which can allow unauthorized access to systems by exploiting hashed credentials."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may communicate using a protocol and port paring that are typically not associated.\nFor example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who may be communicating using a protocol and port pairing that are usually not associated, such as HTTPS over unconventional ports like 8088 or 587 instead of the standard port 443, you should focus on monitoring Windows PowerShell script activity. Specifically, you need to ensure Script Block Logging is enabled to capture PowerShell script executions. Look for instances where PowerShell scripts contain commands like `Test-NetConnection` along with parameters specifying `-ComputerName` and `-port`. These elements together might indicate attempts to test network connections to unusual ports, which could signify malicious activity based on the technique of leveraging different protocol and port combinations to evade detection or firewall rules. However, it's important to exclude scripts that are explicitly testing or using standard ports like 443 and 80 in their connection attempts, as these are typically associated with legitimate activities. This approach aims to strike a balance between identifying potential threats and reducing false positives, bearing in mind that legitimate administrative scripts could sometimes use similar patterns for valid purposes. The sensitivity of the detection is set to a medium level, acknowledging that while this method can effectively indicate suspicious behavior, it might not catch all variants of such activities and could occasionally flag benign actions as suspicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Test-NetConnection\n            - '-ComputerName '\n            - '-port '\n    filter:\n        ScriptBlockText|contains:\n            - ' 443 '\n            - ' 80 '\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Test-NetConnection\n            - '-ComputerName '\n            - '-port '\n    filter:\n        ScriptBlockText|contains:\n            - ' 443 '\n            - ' 80 '\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Adversaries may communicate using a protocol and port paring that are typically not associated.\nFor example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.\n",
      "answer": "In order to detect adversaries who may be communicating using a protocol and port pairing that are usually not associated, such as HTTPS over unconventional ports like 8088 or 587 instead of the standard port 443, you should focus on monitoring Windows PowerShell script activity. Specifically, you need to ensure Script Block Logging is enabled to capture PowerShell script executions. Look for instances where PowerShell scripts contain commands like `Test-NetConnection` along with parameters specifying `-ComputerName` and `-port`. These elements together might indicate attempts to test network connections to unusual ports, which could signify malicious activity based on the technique of leveraging different protocol and port combinations to evade detection or firewall rules. However, it's important to exclude scripts that are explicitly testing or using standard ports like 443 and 80 in their connection attempts, as these are typically associated with legitimate activities. This approach aims to strike a balance between identifying potential threats and reducing false positives, bearing in mind that legitimate administrative scripts could sometimes use similar patterns for valid purposes. The sensitivity of the detection is set to a medium level, acknowledging that while this method can effectively indicate suspicious behavior, it might not catch all variants of such activities and could occasionally flag benign actions as suspicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting (failed) outbound connection attempts to internet facing SMB servers. This could be a sign of potential exploitation attempts of CVE-2023-23397..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect (failed) outbound connection attempts to internet facing SMB servers, which could be a sign of potential exploitation attempts of CVE-2023-23397, you should: Monitor Windows SMB client connectivity logs for specific events that indicate a network connection failure, disconnection, or re-establishment with a server. Pay attention to events with IDs 30803 (indicating a failed network connection), 30804 (indicating a network disconnection), and 30806 (indicating re-establishment of a session to the server). It is crucial to filter out connections to main local IP addresses to reduce noise and increase the focus on outbound connections to internet-facing servers. This involves excluding IP addresses that start with '10.', indicating they are part of a private network within the 10.0.0.0/8 range, '192.168.', for the 192.168.0.0/16 private network range, and '172.16.' through '172.31.', covering the private network ranges from 172.16.0.0/12 to 172.31.0.0/12. Connections to loopback addresses ('127.') and link-local addresses ('169.254.') should also be ignored. Be aware that there may be false positives, especially from trusted external servers, and consider applying additional filters to refine detections. This detection process focuses on network connection issues to SMB servers which could be indicative of an attempted exploitation, specifically addressing concerns related to CVE-2023-23397.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: smbclient-connectivity\ndetection:\n    selection:\n        # Author Note: You could adapt this rule to use the \"ServerName\" field and uncomment the commented EventIDs. But you need to provide your own filter for \"trusted server names\"\n        EventID:\n            #- 30800 # The server name cannot be resolved. (Doesn't contain the \"ServerAddress\" field)\n            - 30803 # Failed to establish a network connection.\n            - 30804 # A network connection was disconnected.\n            - 30806 # The client re-established its session to the server.\n            #- 31001 # Error (Doesn't contain the \"ServerAddress\" field)\n    filter_main_local_ips:\n        ServerAddress|startswith:\n            - '10.' #10.0.0.0/8\n            - '192.168.' #192.168.0.0/16\n            - '172.16.' #172.16.0.0/12\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.' #127.0.0.0/8\n            - '169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives may occur from external trusted servers. Apply additional filters accordingly\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: smbclient-connectivity\ndetection:\n    selection:\n        # Author Note: You could adapt this rule to use the \"ServerName\" field and uncomment the commented EventIDs. But you need to provide your own filter for \"trusted server names\"\n        EventID:\n            #- 30800 # The server name cannot be resolved. (Doesn't contain the \"ServerAddress\" field)\n            - 30803 # Failed to establish a network connection.\n            - 30804 # A network connection was disconnected.\n            - 30806 # The client re-established its session to the server.\n            #- 31001 # Error (Doesn't contain the \"ServerAddress\" field)\n    filter_main_local_ips:\n        ServerAddress|startswith:\n            - '10.' #10.0.0.0/8\n            - '192.168.' #192.168.0.0/16\n            - '172.16.' #172.16.0.0/12\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.' #127.0.0.0/8\n            - '169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives may occur from external trusted servers. Apply additional filters accordingly\nlevel: medium\n",
      "question": "(failed) outbound connection attempts to internet facing SMB servers. This could be a sign of potential exploitation attempts of CVE-2023-23397.",
      "answer": "In order to detect (failed) outbound connection attempts to internet facing SMB servers, which could be a sign of potential exploitation attempts of CVE-2023-23397, you should: Monitor Windows SMB client connectivity logs for specific events that indicate a network connection failure, disconnection, or re-establishment with a server. Pay attention to events with IDs 30803 (indicating a failed network connection), 30804 (indicating a network disconnection), and 30806 (indicating re-establishment of a session to the server). It is crucial to filter out connections to main local IP addresses to reduce noise and increase the focus on outbound connections to internet-facing servers. This involves excluding IP addresses that start with '10.', indicating they are part of a private network within the 10.0.0.0/8 range, '192.168.', for the 192.168.0.0/16 private network range, and '172.16.' through '172.31.', covering the private network ranges from 172.16.0.0/12 to 172.31.0.0/12. Connections to loopback addresses ('127.') and link-local addresses ('169.254.') should also be ignored. Be aware that there may be false positives, especially from trusted external servers, and consider applying additional filters to refine detections. This detection process focuses on network connection issues to SMB servers which could be indicative of an attempted exploitation, specifically addressing concerns related to CVE-2023-23397."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB, you should monitor DNS query logs for requests to specific domains that have been identified as indicators of compromise. These domains include 'addatamarket.net', 'ans7tv.net', 'anstv.net', 'backuprabbit.com', 'businessvideonews.com', 'cloudsponcer.com', 'datamarketplace.net', 'growthtransport.com', 'mobilegamerstats.com', 'snoweeanalytics.com', 'tagclick-cdn.com', 'topographyupdates.com', 'unlimitedteacup.com', 'virtuallaughing.com', and 'web-trackers.com'. Any DNS queries to these domains should be considered suspicious and warrant further investigation, as they could signal an ongoing attack or compromise involving iOS devices. This monitoring is crucial for identifying potential security breaches early on, allowing for a timely response to mitigate any damage. Note that while this detection has a high importance level, there may be unknown false positives, and not all detections may signify malicious activity. However, given these domains' association with sophisticated attacks, any hits on these indicators should be taken seriously and investigated accordingly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: dns\ndetection:\n    selection:\n        query:\n            - 'addatamarket.net'\n            - 'ans7tv.net'\n            - 'anstv.net'\n            - 'backuprabbit.com'\n            - 'businessvideonews.com'\n            - 'cloudsponcer.com'\n            - 'datamarketplace.net'\n            - 'growthtransport.com'\n            - 'mobilegamerstats.com'\n            - 'snoweeanalytics.com'\n            - 'tagclick-cdn.com'\n            - 'topographyupdates.com'\n            - 'unlimitedteacup.com'\n            - 'virtuallaughing.com'\n            - 'web-trackers.com'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns\ndetection:\n    selection:\n        query:\n            - 'addatamarket.net'\n            - 'ans7tv.net'\n            - 'anstv.net'\n            - 'backuprabbit.com'\n            - 'businessvideonews.com'\n            - 'cloudsponcer.com'\n            - 'datamarketplace.net'\n            - 'growthtransport.com'\n            - 'mobilegamerstats.com'\n            - 'snoweeanalytics.com'\n            - 'tagclick-cdn.com'\n            - 'topographyupdates.com'\n            - 'unlimitedteacup.com'\n            - 'virtuallaughing.com'\n            - 'web-trackers.com'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB",
      "answer": "In order to detect potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB, you should monitor DNS query logs for requests to specific domains that have been identified as indicators of compromise. These domains include 'addatamarket.net', 'ans7tv.net', 'anstv.net', 'backuprabbit.com', 'businessvideonews.com', 'cloudsponcer.com', 'datamarketplace.net', 'growthtransport.com', 'mobilegamerstats.com', 'snoweeanalytics.com', 'tagclick-cdn.com', 'topographyupdates.com', 'unlimitedteacup.com', 'virtuallaughing.com', and 'web-trackers.com'. Any DNS queries to these domains should be considered suspicious and warrant further investigation, as they could signal an ongoing attack or compromise involving iOS devices. This monitoring is crucial for identifying potential security breaches early on, allowing for a timely response to mitigate any damage. Note that while this detection has a high importance level, there may be unknown false positives, and not all detections may signify malicious activity. However, given these domains' association with sophisticated attacks, any hits on these indicators should be taken seriously and investigated accordingly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Execution via SyncInvoke in CL_Invocation.ps1 module.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Execution via SyncInvoke in CL_Invocation.ps1 module, you should monitor PowerShell script activities on Windows systems with a specific focus on the Script Block Logging feature. To effectively detect malicious activities, ensure that Script Block Logging is enabled to catch detailed execution traces of PowerShell scripts. Pay particular attention to PowerShell scripts that contain both the 'CL_Invocation.ps1' module and the 'SyncInvoke' method within their script blocks. The presence of these indicators suggests a high probability of an attack attempt leveraging the synchronous invocation capabilities in PowerShell for potentially malicious executions. Be wary as false positives can be indicated as \"Unknown\", meaning there might be legitimate uses of these indicators, so investigative judgment is required when these conditions are met.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'CL_Invocation.ps1'\n            - 'SyncInvoke'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'CL_Invocation.ps1'\n            - 'SyncInvoke'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Execution via SyncInvoke in CL_Invocation.ps1 module",
      "answer": "In order to Detect Execution via SyncInvoke in CL_Invocation.ps1 module, you should monitor PowerShell script activities on Windows systems with a specific focus on the Script Block Logging feature. To effectively detect malicious activities, ensure that Script Block Logging is enabled to catch detailed execution traces of PowerShell scripts. Pay particular attention to PowerShell scripts that contain both the 'CL_Invocation.ps1' module and the 'SyncInvoke' method within their script blocks. The presence of these indicators suggests a high probability of an attack attempt leveraging the synchronous invocation capabilities in PowerShell for potentially malicious executions. Be wary as false positives can be indicated as \"Unknown\", meaning there might be legitimate uses of these indicators, so investigative judgment is required when these conditions are met."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting executing python with keywords related to network activity that could indicate a potential reverse shell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect executing python with keywords related to network activity that could indicate a potential reverse shell, you should: Identify and monitor the creation of processes on Linux systems, specifically focusing on those initiated by Python. Look for command lines that contain a combination of '-c', indicating execution of Python code; 'import', suggesting the inclusion of additional Python libraries; 'pty', hinting at pseudo-terminal operations; 'spawn(', which could be used to start another process; and '.connect', a method often associated with making network connections. These particular elements together raise suspicions of a reverse shell attempt, characterized by external control over a system shell. The detection criteria are set to a high level of importance due to the potential severity of this activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: 'python'\n        CommandLine|contains|all:\n            - ' -c '\n            - 'import'\n            - 'pty'\n            - 'spawn('\n            - '.connect'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: 'python'\n        CommandLine|contains|all:\n            - ' -c '\n            - 'import'\n            - 'pty'\n            - 'spawn('\n            - '.connect'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "executing python with keywords related to network activity that could indicate a potential reverse shell",
      "answer": "In order to detect executing python with keywords related to network activity that could indicate a potential reverse shell, you should: Identify and monitor the creation of processes on Linux systems, specifically focusing on those initiated by Python. Look for command lines that contain a combination of '-c', indicating execution of Python code; 'import', suggesting the inclusion of additional Python libraries; 'pty', hinting at pseudo-terminal operations; 'spawn(', which could be used to start another process; and '.connect', a method often associated with making network connections. These particular elements together raise suspicions of a reverse shell attempt, characterized by external control over a system shell. The detection criteria are set to a high level of importance due to the potential severity of this activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an access to authentication tokens and accounts of Microsoft Teams desktop application..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an access to authentication tokens and accounts of Microsoft Teams desktop application, you should: Monitor Windows process creation logs for any commands executed that involve the Cookies or Local Storage leveldb directories associated with the Microsoft Teams application. It's important to specifically look for action paths that contain '\\Microsoft\\Teams\\Cookies' or '\\Microsoft\\Teams\\Local Storage\\leveldb', as these paths are indicative of activities that may be trying to access or manipulate the authentication tokens and account details stored by the Teams desktop app. However, to reduce the likelihood of false positives, any process that is an instance of '\\Microsoft\\Teams\\current\\Teams.exe' accessing these paths should not be flagged, since this behavior can be considered legitimate use by the application itself. This distinction helps in precisely targeting malicious attempts to access sensitive information while excluding the application's regular operations. This analysis is crucial for identifying potential compromises or unauthorized access attempts targeting user credentials or session tokens stored within the Teams application, aligning with detection strategies for unauthorized access, credential theft, or information disclosure types of security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '\\Microsoft\\Teams\\Cookies'\n            - '\\Microsoft\\Teams\\Local Storage\\leveldb'\n    filter:\n        Image|endswith: '\\Microsoft\\Teams\\current\\Teams.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '\\Microsoft\\Teams\\Cookies'\n            - '\\Microsoft\\Teams\\Local Storage\\leveldb'\n    filter:\n        Image|endswith: '\\Microsoft\\Teams\\current\\Teams.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "an access to authentication tokens and accounts of Microsoft Teams desktop application.",
      "answer": "In order to detect an access to authentication tokens and accounts of Microsoft Teams desktop application, you should: Monitor Windows process creation logs for any commands executed that involve the Cookies or Local Storage leveldb directories associated with the Microsoft Teams application. It's important to specifically look for action paths that contain '\\Microsoft\\Teams\\Cookies' or '\\Microsoft\\Teams\\Local Storage\\leveldb', as these paths are indicative of activities that may be trying to access or manipulate the authentication tokens and account details stored by the Teams desktop app. However, to reduce the likelihood of false positives, any process that is an instance of '\\Microsoft\\Teams\\current\\Teams.exe' accessing these paths should not be flagged, since this behavior can be considered legitimate use by the application itself. This distinction helps in precisely targeting malicious attempts to access sensitive information while excluding the application's regular operations. This analysis is crucial for identifying potential compromises or unauthorized access attempts targeting user credentials or session tokens stored within the Teams application, aligning with detection strategies for unauthorized access, credential theft, or information disclosure types of security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DLL sideloading of system dlls that are not present on the system by default. Usually to achieve techniques such as UAC bypass and privilege escalation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DLL sideloading of system dlls that are not present on the system by default, usually to achieve techniques such as UAC bypass and privilege escalation, you should: Focus on monitoring image load events within Windows environments, specifically targeting the loading of certain system DLLs that are inherently not present by default on the system. These DLLs include 'C:\\Windows\\System32\\WLBSCTRL.dll', 'C:\\Windows\\System32\\TSMSISrv.dll', 'C:\\Windows\\System32\\TSVIPSrv.dll', 'C:\\Windows\\System32\\wow64log.dll', 'C:\\Windows\\System32\\WptsExtensions.dll', and 'C:\\Windows\\System32\\wbem\\wbemcomn.dll'. Additionally, it is critical to differentiate between legitimate and illegitimate loading of these DLLs by filtering out the events where the loaded DLLs are signed by Microsoft Windows. This ensures that the focus remains only on potentially malicious activity, reducing the chances of flagging legitimate system processes. Be aware that due to the nature of this detection method, there may be unknown false positives. The overarching goal is to capture attempts at escalation of privileges or bypassing of User Account Control (UAC) by malicious actors through the sideloading technique. This method is associated with tactics and techniques such as privilege escalation and defense evasion but always remain alert to the possibility of legitimate software behavior erroneously triggering an alert.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded:\n            # Add other DLLs\n            - 'C:\\Windows\\System32\\WLBSCTRL.dll'\n            - 'C:\\Windows\\System32\\TSMSISrv.dll'\n            - 'C:\\Windows\\System32\\TSVIPSrv.dll'\n            - 'C:\\Windows\\System32\\wow64log.dll'\n            - 'C:\\Windows\\System32\\WptsExtensions.dll'\n            - 'C:\\Windows\\System32\\wbem\\wbemcomn.dll'\n    filter_ms_signed:\n        Signed: 'true'\n        # There could be other signatures (please add when found)\n        Signature: 'Microsoft Windows'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded:\n            # Add other DLLs\n            - 'C:\\Windows\\System32\\WLBSCTRL.dll'\n            - 'C:\\Windows\\System32\\TSMSISrv.dll'\n            - 'C:\\Windows\\System32\\TSVIPSrv.dll'\n            - 'C:\\Windows\\System32\\wow64log.dll'\n            - 'C:\\Windows\\System32\\WptsExtensions.dll'\n            - 'C:\\Windows\\System32\\wbem\\wbemcomn.dll'\n    filter_ms_signed:\n        Signed: 'true'\n        # There could be other signatures (please add when found)\n        Signature: 'Microsoft Windows'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "DLL sideloading of system dlls that are not present on the system by default. Usually to achieve techniques such as UAC bypass and privilege escalation",
      "answer": "In order to detect DLL sideloading of system dlls that are not present on the system by default, usually to achieve techniques such as UAC bypass and privilege escalation, you should: Focus on monitoring image load events within Windows environments, specifically targeting the loading of certain system DLLs that are inherently not present by default on the system. These DLLs include 'C:\\Windows\\System32\\WLBSCTRL.dll', 'C:\\Windows\\System32\\TSMSISrv.dll', 'C:\\Windows\\System32\\TSVIPSrv.dll', 'C:\\Windows\\System32\\wow64log.dll', 'C:\\Windows\\System32\\WptsExtensions.dll', and 'C:\\Windows\\System32\\wbem\\wbemcomn.dll'. Additionally, it is critical to differentiate between legitimate and illegitimate loading of these DLLs by filtering out the events where the loaded DLLs are signed by Microsoft Windows. This ensures that the focus remains only on potentially malicious activity, reducing the chances of flagging legitimate system processes. Be aware that due to the nature of this detection method, there may be unknown false positives. The overarching goal is to capture attempts at escalation of privileges or bypassing of User Account Control (UAC) by malicious actors through the sideloading technique. This method is associated with tactics and techniques such as privilege escalation and defense evasion but always remain alert to the possibility of legitimate software behavior erroneously triggering an alert."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of renamed version of PAExec. Often used by attackers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of renamed version of PAExec, often used by attackers, you should: Monitor Windows process creation logs for evidence of PAExec application activity. Look for processes described as \"PAExec Application\" or originally filed as \"PAExec.exe\". Additionally, any product containing the term \"PAExec\" should raise suspicions. There are specific import hashes (imphash) listed, namely 11D40A7B7876288F919AB819CC2D9802, 6444f8a34e99b8f7d9647de66aabe516, dfd6aa3f7b2b1035b76b718f1ddc689f, and 1a6cca4d5460b1710a12dea39e4a592c, that are associated with PAExec and should be carefully monitored. Moreover, detection should include checking for these import hashes within the process creation logs.\n\nIt\u2019s important to note, though, that there are legitimate uses of PAExec that might lead to false positives. For example, administrators might rename their PAExec tools, or software companies could bundle PAExec with their software under a different name to avoid embarrassment. Also, when executed with the \"-s\" flag, PAExec copies itself to the \"C:\\Windows\\\" directory but with a different name, following the pattern \"PAExec-[XXXXX]-[ComputerName]\".\n\nThe filtering criteria exclude processes where the image path ends with '\\paexec.exe' or starts with \"C:\\Windows\\PAExec-\u201d to further refine detection and reduce false positives. This focused approach to monitoring, combined with the awareness of potential legitimate use cases, is crucial in identifying malicious use of renamed PAExec tools without overwhelming the system with false alerts. The high level of caution is advised due to the implications of detecting such activity, which is indicative of an attacker\u2019s actions within a network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'PAExec Application'\n        - OriginalFileName: 'PAExec.exe'\n        - Product|contains: 'PAExec'\n        - Imphash:\n            - 11D40A7B7876288F919AB819CC2D9802\n            - 6444f8a34e99b8f7d9647de66aabe516\n            - dfd6aa3f7b2b1035b76b718f1ddc689f\n            - 1a6cca4d5460b1710a12dea39e4a592c\n        - Hashes|contains:\n            - IMPHASH=11D40A7B7876288F919AB819CC2D9802\n            - IMPHASH=6444f8a34e99b8f7d9647de66aabe516\n            - IMPHASH=dfd6aa3f7b2b1035b76b718f1ddc689f\n            - IMPHASH=1a6cca4d5460b1710a12dea39e4a592c\n    filter:\n        - Image|endswith: '\\paexec.exe'\n        - Image|startswith: 'C:\\Windows\\PAExec-'\n    condition: selection and not filter\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PAExec with their software and rename it, so that it is less embarrassing\n    - When executed with the \"-s\" flag. PAExec will copy itself to the \"C:\\Windows\\\" directory with a different name. Usually like this \"PAExec-[XXXXX]-[ComputerName]\"\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'PAExec Application'\n        - OriginalFileName: 'PAExec.exe'\n        - Product|contains: 'PAExec'\n        - Imphash:\n            - 11D40A7B7876288F919AB819CC2D9802\n            - 6444f8a34e99b8f7d9647de66aabe516\n            - dfd6aa3f7b2b1035b76b718f1ddc689f\n            - 1a6cca4d5460b1710a12dea39e4a592c\n        - Hashes|contains:\n            - IMPHASH=11D40A7B7876288F919AB819CC2D9802\n            - IMPHASH=6444f8a34e99b8f7d9647de66aabe516\n            - IMPHASH=dfd6aa3f7b2b1035b76b718f1ddc689f\n            - IMPHASH=1a6cca4d5460b1710a12dea39e4a592c\n    filter:\n        - Image|endswith: '\\paexec.exe'\n        - Image|startswith: 'C:\\Windows\\PAExec-'\n    condition: selection and not filter\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PAExec with their software and rename it, so that it is less embarrassing\n    - When executed with the \"-s\" flag. PAExec will copy itself to the \"C:\\Windows\\\" directory with a different name. Usually like this \"PAExec-[XXXXX]-[ComputerName]\"\nlevel: high\n",
      "question": "execution of renamed version of PAExec. Often used by attackers",
      "answer": "In order to detect execution of renamed version of PAExec, often used by attackers, you should: Monitor Windows process creation logs for evidence of PAExec application activity. Look for processes described as \"PAExec Application\" or originally filed as \"PAExec.exe\". Additionally, any product containing the term \"PAExec\" should raise suspicions. There are specific import hashes (imphash) listed, namely 11D40A7B7876288F919AB819CC2D9802, 6444f8a34e99b8f7d9647de66aabe516, dfd6aa3f7b2b1035b76b718f1ddc689f, and 1a6cca4d5460b1710a12dea39e4a592c, that are associated with PAExec and should be carefully monitored. Moreover, detection should include checking for these import hashes within the process creation logs.\n\nIt\u2019s important to note, though, that there are legitimate uses of PAExec that might lead to false positives. For example, administrators might rename their PAExec tools, or software companies could bundle PAExec with their software under a different name to avoid embarrassment. Also, when executed with the \"-s\" flag, PAExec copies itself to the \"C:\\Windows\\\" directory but with a different name, following the pattern \"PAExec-[XXXXX]-[ComputerName]\".\n\nThe filtering criteria exclude processes where the image path ends with '\\paexec.exe' or starts with \"C:\\Windows\\PAExec-\u201d to further refine detection and reduce false positives. This focused approach to monitoring, combined with the awareness of potential legitimate use cases, is crucial in identifying malicious use of renamed PAExec tools without overwhelming the system with false alerts. The high level of caution is advised due to the implications of detecting such activity, which is indicative of an attacker\u2019s actions within a network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_stream:\n        CommandLine|contains: 'txt:'\n    selection_tools_type:\n        CommandLine|contains|all:\n            - 'type '\n            - ' > '\n    selection_tools_makecab:\n        CommandLine|contains|all:\n            - 'makecab '\n            - '.cab'\n    selection_tools_reg:\n        CommandLine|contains|all:\n            - 'reg '\n            - ' export '\n    selection_tools_regedit:\n        CommandLine|contains|all:\n            - 'regedit '\n            - ' /E '\n    selection_tools_esentutl:\n        CommandLine|contains|all:\n            - 'esentutl '\n            - ' /y '\n            - ' /d '\n            - ' /o '\n    condition: selection_stream and (1 of selection_tools_*)\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_stream:\n        CommandLine|contains: 'txt:'\n    selection_tools_type:\n        CommandLine|contains|all:\n            - 'type '\n            - ' > '\n    selection_tools_makecab:\n        CommandLine|contains|all:\n            - 'makecab '\n            - '.cab'\n    selection_tools_reg:\n        CommandLine|contains|all:\n            - 'reg '\n            - ' export '\n    selection_tools_regedit:\n        CommandLine|contains|all:\n            - 'regedit '\n            - ' /E '\n    selection_tools_esentutl:\n        CommandLine|contains|all:\n            - 'esentutl '\n            - ' /y '\n            - ' /d '\n            - ' /o '\n    condition: selection_stream and (1 of selection_tools_*)\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection",
      "answer": "In order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries, you should: Monitor process creation events on Windows systems for instances where the original file name is identified as 'Microsoft.NodejsTools.PressAnyKey.exe'. It is crucial to distinguish between benign and malicious activities by excluding any process where the image path ends with '\\Microsoft.NodejsTools.PressAnyKey.exe', as this path is associated with legitimate usage of the file. This approach is designed to catch attempts where attackers might rename or repurpose 'Microsoft.NodejsTools.PressAnyKey.exe' to execute malicious binaries, leveraging it as a Living Off The Land Binary (LOLBIN). It's important to note that there might be unknown false positives, and the threat level associated with this activity is deemed medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'Microsoft.NodejsTools.PressAnyKey.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\Microsoft.NodejsTools.PressAnyKey.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'Microsoft.NodejsTools.PressAnyKey.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\Microsoft.NodejsTools.PressAnyKey.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries",
      "answer": "In order to detect renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries, you should: Monitor process creation events on Windows systems for instances where the original file name is identified as 'Microsoft.NodejsTools.PressAnyKey.exe'. It is crucial to distinguish between benign and malicious activities by excluding any process where the image path ends with '\\Microsoft.NodejsTools.PressAnyKey.exe', as this path is associated with legitimate usage of the file. This approach is designed to catch attempts where attackers might rename or repurpose 'Microsoft.NodejsTools.PressAnyKey.exe' to execute malicious binaries, leveraging it as a Living Off The Land Binary (LOLBIN). It's important to note that there might be unknown false positives, and the threat level associated with this activity is deemed medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it, you should monitor registry settings particularly focusing on changes within the Windows environment. Keep an eye on the registry set category, specifically targeting instances where the event type is 'SetValue'. This indicates a modification action on the registry.\n\nFocus on modifications targeting objects within the '\\System\\CurrentControlSet\\Services\\' directory that also include '\\NetworkProvider'. These areas are critical because they involve the configuration of network services, where malicious modifications can serve as a mechanism for credential theft.\n\nHowever, it's important to apply certain filters to avoid false positives and focus on potentially malicious activity. Exclude modifications targeting the WebClient, LanmanWorkstation, and RDPNP services under the '\\NetworkProvider' path because changes to these might not necessarily indicate malicious behavior and are sometimes part of legitimate network configurations. These exclusions are essential to narrow down the detection to alterations more closely associated with attack techniques that involve the addition of rogue network providers.\n\nMoreover, take into consideration the process responsible for making the registry changes. Specifically, if the changes come from 'C:\\Windows\\System32\\poqexec.exe', it might not be considered suspicious under certain circumstances. This process, when involved in legitimate operations, can help mitigate false positives, given its potential use in benign system configurations.\n\nThese monitoring and filtering strategies involve working with tags correlated with MITRE ATT&CK tactics and techniques, although specific technique identifiers should be derived from the nature of logged events and the context of observed changes. \n\nBe aware that there can be instances where legitimate software or configurations could trigger these detections. Hence, maintaining an up-to-date filter list and understanding the operational environment are critical to distinguishing between genuine threats and operational noise. This approach ensures heightened vigilance against methods employed for credential theft through unauthorized network provider modifications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\System\\CurrentControlSet\\Services\\'\n            - '\\NetworkProvider'\n    filter:\n        TargetObject|contains:\n            - '\\System\\CurrentControlSet\\Services\\WebClient\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\RDPNP\\NetworkProvider'\n            #- '\\System\\CurrentControlSet\\Services\\P9NP\\NetworkProvider' # Related to WSL remove the comment if you use WSL in your ENV\n    filter_valid_procs:\n        Image: C:\\Windows\\System32\\poqexec.exe\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Other legitimate network providers used and not filtred in this rule\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\System\\CurrentControlSet\\Services\\'\n            - '\\NetworkProvider'\n    filter:\n        TargetObject|contains:\n            - '\\System\\CurrentControlSet\\Services\\WebClient\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\RDPNP\\NetworkProvider'\n            #- '\\System\\CurrentControlSet\\Services\\P9NP\\NetworkProvider' # Related to WSL remove the comment if you use WSL in your ENV\n    filter_valid_procs:\n        Image: C:\\Windows\\System32\\poqexec.exe\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Other legitimate network providers used and not filtred in this rule\nlevel: medium\n",
      "question": "when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it",
      "answer": "In order to detect when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it, you should monitor registry settings particularly focusing on changes within the Windows environment. Keep an eye on the registry set category, specifically targeting instances where the event type is 'SetValue'. This indicates a modification action on the registry.\n\nFocus on modifications targeting objects within the '\\System\\CurrentControlSet\\Services\\' directory that also include '\\NetworkProvider'. These areas are critical because they involve the configuration of network services, where malicious modifications can serve as a mechanism for credential theft.\n\nHowever, it's important to apply certain filters to avoid false positives and focus on potentially malicious activity. Exclude modifications targeting the WebClient, LanmanWorkstation, and RDPNP services under the '\\NetworkProvider' path because changes to these might not necessarily indicate malicious behavior and are sometimes part of legitimate network configurations. These exclusions are essential to narrow down the detection to alterations more closely associated with attack techniques that involve the addition of rogue network providers.\n\nMoreover, take into consideration the process responsible for making the registry changes. Specifically, if the changes come from 'C:\\Windows\\System32\\poqexec.exe', it might not be considered suspicious under certain circumstances. This process, when involved in legitimate operations, can help mitigate false positives, given its potential use in benign system configurations.\n\nThese monitoring and filtering strategies involve working with tags correlated with MITRE ATT&CK tactics and techniques, although specific technique identifiers should be derived from the nature of logged events and the context of observed changes. \n\nBe aware that there can be instances where legitimate software or configurations could trigger these detections. Hence, maintaining an up-to-date filter list and understanding the operational environment are critical to distinguishing between genuine threats and operational noise. This approach ensures heightened vigilance against methods employed for credential theft through unauthorized network provider modifications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting key vault is modified or deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a key vault is modified or deleted, you should: Monitor Azure Activity Logs for operations indicating changes to Key Vaults. Specifically, look for events where the operation name is one of the following: `MICROSOFT.KEYVAULT/VAULTS/WRITE`, `MICROSOFT.KEYVAULT/VAULTS/DELETE`, `MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION`, or `MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE`. These activities suggest that a Key Vault is either being written to, deleted, deployed, or its access policies are being modified. While detecting these operations can signal potentially malicious actions, it's also important to consider legitimate administrative activities. False positives may occur, such as when a system administrator is performing expected maintenance or updates. In such cases, verify the actions by cross-referencing the user identity, user agent, and hostname involved in making these changes. Should these modifications originate from unfamiliar users or systems, further investigation is warranted. Known behaviors that lead to false positives should be documented and adjusted in monitoring strategies to avoid unnecessary alerts. By implementing these monitoring strategies, organizations can enhance their security posture by ensuring that modifications to key vaults are authorized and traceable, maintaining the integrity and confidentiality of their stored secrets.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KEYVAULT/VAULTS/WRITE\n            - MICROSOFT.KEYVAULT/VAULTS/DELETE\n            - MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE\n    condition: selection\nfalsepositives:\n    - Key Vault being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Key Vault modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KEYVAULT/VAULTS/WRITE\n            - MICROSOFT.KEYVAULT/VAULTS/DELETE\n            - MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE\n    condition: selection\nfalsepositives:\n    - Key Vault being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Key Vault modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "key vault is modified or deleted.",
      "answer": "In order to identify when a key vault is modified or deleted, you should: Monitor Azure Activity Logs for operations indicating changes to Key Vaults. Specifically, look for events where the operation name is one of the following: `MICROSOFT.KEYVAULT/VAULTS/WRITE`, `MICROSOFT.KEYVAULT/VAULTS/DELETE`, `MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION`, or `MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE`. These activities suggest that a Key Vault is either being written to, deleted, deployed, or its access policies are being modified. While detecting these operations can signal potentially malicious actions, it's also important to consider legitimate administrative activities. False positives may occur, such as when a system administrator is performing expected maintenance or updates. In such cases, verify the actions by cross-referencing the user identity, user agent, and hostname involved in making these changes. Should these modifications originate from unfamiliar users or systems, further investigation is warranted. Known behaviors that lead to false positives should be documented and adjusted in monitoring strategies to avoid unnecessary alerts. By implementing these monitoring strategies, organizations can enhance their security posture by ensuring that modifications to key vaults are authorized and traceable, maintaining the integrity and confidentiality of their stored secrets."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of EvtMuteHook.dll, a key component of SharpEvtHook, a tool that tampers with the Windows event logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of EvtMuteHook.dll, a key component of SharpEvtHook, a tool that tampers with the Windows event logs, you should monitor for instances where specific images (DLLs) are loaded into a system, particularly on Windows platforms. Look for the unique identifier known as an \"imphash\" (Import Hash), which helps to identify specific DLL files based on the libraries they import. Specifically, you should be alert for any image load event where the imphash is `330768A4F172E10ACB6287B87289D83B`. This hash is a unique fingerprint of the EvtMuteHook.dll, indicating that SharpEvtHook, which can manipulate Windows event logs, might be active on the system. It's important to note that there might be false positives, such as other DLLs generating the same imphash, so further investigation is recommended upon detection. The severity level for this type of detection is considered high due to the implications of tampering with event logs for evasive or malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        - Hashes|contains: 'IMPHASH=330768A4F172E10ACB6287B87289D83B'\n        - Imphash: '330768a4f172e10acb6287b87289d83b'\n    condition: selection\nfalsepositives:\n    - Other DLLs with the same Imphash\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        - Hashes|contains: 'IMPHASH=330768A4F172E10ACB6287B87289D83B'\n        - Imphash: '330768a4f172e10acb6287b87289d83b'\n    condition: selection\nfalsepositives:\n    - Other DLLs with the same Imphash\nlevel: high\n",
      "question": "load of EvtMuteHook.dll, a key component of SharpEvtHook, a tool that tampers with the Windows event logs",
      "answer": "In order to detect the load of EvtMuteHook.dll, a key component of SharpEvtHook, a tool that tampers with the Windows event logs, you should monitor for instances where specific images (DLLs) are loaded into a system, particularly on Windows platforms. Look for the unique identifier known as an \"imphash\" (Import Hash), which helps to identify specific DLL files based on the libraries they import. Specifically, you should be alert for any image load event where the imphash is `330768A4F172E10ACB6287B87289D83B`. This hash is a unique fingerprint of the EvtMuteHook.dll, indicating that SharpEvtHook, which can manipulate Windows event logs, might be active on the system. It's important to note that there might be false positives, such as other DLLs generating the same imphash, so further investigation is recommended upon detection. The severity level for this type of detection is considered high due to the implications of tampering with event logs for evasive or malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell script file creation with specific name or suffix which was seen being used often by FIN7 PowerShell scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell script file creation with specific name or suffix which was seen being used often by FIN7 PowerShell scripts, you should: Monitor for the creation of files with names ending in '_64refl.ps1' or exactly named 'host_ip.ps1' within the Windows file system events. This action targets identifying potential malicious activity related to the use of PowerShell scripts commonly employed by the FIN7 group, indicating an advanced persistent threat (APT). The detection of these specific filenames as part of the file events in the Windows environment serves as a high-confidence indicator of compromise, aiding in the early identification and response to potential security incidents linked to known attack methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        - TargetFilename|endswith: '_64refl.ps1'\n        - TargetFilename: 'host_ip.ps1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        - TargetFilename|endswith: '_64refl.ps1'\n        - TargetFilename: 'host_ip.ps1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "PowerShell script file creation with specific name or suffix which was seen being used often by FIN7 PowerShell scripts",
      "answer": "In order to detect PowerShell script file creation with specific name or suffix which was seen being used often by FIN7 PowerShell scripts, you should: Monitor for the creation of files with names ending in '_64refl.ps1' or exactly named 'host_ip.ps1' within the Windows file system events. This action targets identifying potential malicious activity related to the use of PowerShell scripts commonly employed by the FIN7 group, indicating an advanced persistent threat (APT). The detection of these specific filenames as part of the file events in the Windows environment serves as a high-confidence indicator of compromise, aiding in the early identification and response to potential security incidents linked to known attack methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of the anydesk software service. Which could be an indication of anydesk abuse if you the software isn't already used..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the installation of the anydesk software service, which could be an indication of anydesk abuse if the software isn't already used, you should: Monitor Windows system service logs for events that signal the installation of the AnyDesk Service. The detection focuses on logs from the Service Control Manager, specifically looking for an event with the ID 7045 indicating a service installation. The critical attribute to watch is the ServiceName, and any occurrence of 'AnyDesk Service' under this attribute should raise attention. While monitoring for this activity, it's important to remember that not every installation of AnyDesk represents malicious intent; there could be legitimate uses of the tool. The alert level for this activity is considered medium, suggesting a balanced approach in response, investigating the context in which AnyDesk was installed to discern between benign and malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'AnyDesk Service'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the anydesk tool\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'AnyDesk Service'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the anydesk tool\nlevel: medium\n",
      "question": "installation of the anydesk software service. Which could be an indication of anydesk abuse if you the software isn't already used.",
      "answer": "In order to detect the installation of the anydesk software service, which could be an indication of anydesk abuse if the software isn't already used, you should: Monitor Windows system service logs for events that signal the installation of the AnyDesk Service. The detection focuses on logs from the Service Control Manager, specifically looking for an event with the ID 7045 indicating a service installation. The critical attribute to watch is the ServiceName, and any occurrence of 'AnyDesk Service' under this attribute should raise attention. While monitoring for this activity, it's important to remember that not every installation of AnyDesk represents malicious intent; there could be legitimate uses of the tool. The alert level for this activity is considered medium, suggesting a balanced approach in response, investigating the context in which AnyDesk was installed to discern between benign and malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting High rate of unique Fully Qualified Domain Names (FQDN) requests per root domain (eTLD+1) in short period of time.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a high rate of unique Fully Qualified Domain Names (FQDN) requests per root domain (eTLD+1) in a short period of time, you should monitor DNS traffic for an unusual number of queries to different subdomains of well-known domains within a 15-minute timeframe. Specifically, focus on DNS logs and look for more than 200 unique subdomain queries for each root domain (eTLD+1) that do not match a predefined list of commonly queried domains. This list includes popular and legitimate services such as \"akadns.net\", \"akamaiedge.net\", \"amazonaws.com\", \"apple.com\", \"apple-dns.net\", \"cloudfront.net\", \"icloud.com\", \"in-addr.arpa\", \"google.com\", \"yahoo.com\", \"dropbox.com\", \"windowsupdate.com\", \"microsoftonline.com\", \"s-microsoft.com\", \"office365.com\", and \"linkedin.com\". If the number of unique queries exceeds this threshold and the queried root domain is not part of the aforementioned list, it may indicate a potential security threat. Be mindful that legitimate domain name requests which are not part of the predefined list could cause false positives and should be whitelisted accordingly. This detection strategy is associated with tactics and techniques related to discovery and command and control, as the high volume of unique DNS queries could be indicative of an actor performing reconnaissance or using DNS for command and control communications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: dns\ndetection:\n    dns_question_name:\n        query: \"*\"\n    default_list_of_well_known_domains:\n        query_etld_plus_one: \n            - \"akadns.net\"\n            - \"akamaiedge.net\"\n            - \"amazonaws.com\"\n            - \"apple.com\"\n            - \"apple-dns.net\"\n            - \"cloudfront.net\"\n            - \"icloud.com\"\n            - \"in-addr.arpa\"\n            - \"google.com\"\n            - \"yahoo.com\"\n            - \"dropbox.com\"\n            - \"windowsupdate.com\"\n            - \"microsoftonline.com\"\n            - \"s-microsoft.com\"\n            - \"office365.com\"\n            - \"linkedin.com\"\n    timeframe: 15m\n    condition: count(subdomain) per query_etld_plus_one per computer_name > 200 and not default_list_of_well_known_domains\n    #    for each host in timeframe\n    #                for each dns_question_etld_plus_one\n    #                    if number of dns_question_name > 200\n    #                        dns_question_etld_plus_one is not in default_list_of_well_known_domains\nfalsepositives:\n    - Legitimate domain name requested, which should be added to whitelist\nlevel: high\nstatus: unsupported\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns\ndetection:\n    dns_question_name:\n        query: \"*\"\n    default_list_of_well_known_domains:\n        query_etld_plus_one: \n            - \"akadns.net\"\n            - \"akamaiedge.net\"\n            - \"amazonaws.com\"\n            - \"apple.com\"\n            - \"apple-dns.net\"\n            - \"cloudfront.net\"\n            - \"icloud.com\"\n            - \"in-addr.arpa\"\n            - \"google.com\"\n            - \"yahoo.com\"\n            - \"dropbox.com\"\n            - \"windowsupdate.com\"\n            - \"microsoftonline.com\"\n            - \"s-microsoft.com\"\n            - \"office365.com\"\n            - \"linkedin.com\"\n    timeframe: 15m\n    condition: count(subdomain) per query_etld_plus_one per computer_name > 200 and not default_list_of_well_known_domains\n    #    for each host in timeframe\n    #                for each dns_question_etld_plus_one\n    #                    if number of dns_question_name > 200\n    #                        dns_question_etld_plus_one is not in default_list_of_well_known_domains\nfalsepositives:\n    - Legitimate domain name requested, which should be added to whitelist\nlevel: high\nstatus: unsupported\n",
      "question": "High rate of unique Fully Qualified Domain Names (FQDN) requests per root domain (eTLD+1) in short period of time",
      "answer": "In order to detect a high rate of unique Fully Qualified Domain Names (FQDN) requests per root domain (eTLD+1) in a short period of time, you should monitor DNS traffic for an unusual number of queries to different subdomains of well-known domains within a 15-minute timeframe. Specifically, focus on DNS logs and look for more than 200 unique subdomain queries for each root domain (eTLD+1) that do not match a predefined list of commonly queried domains. This list includes popular and legitimate services such as \"akadns.net\", \"akamaiedge.net\", \"amazonaws.com\", \"apple.com\", \"apple-dns.net\", \"cloudfront.net\", \"icloud.com\", \"in-addr.arpa\", \"google.com\", \"yahoo.com\", \"dropbox.com\", \"windowsupdate.com\", \"microsoftonline.com\", \"s-microsoft.com\", \"office365.com\", and \"linkedin.com\". If the number of unique queries exceeds this threshold and the queried root domain is not part of the aforementioned list, it may indicate a potential security threat. Be mindful that legitimate domain name requests which are not part of the predefined list could cause false positives and should be whitelisted accordingly. This detection strategy is associated with tactics and techniques related to discovery and command and control, as the high volume of unique DNS queries could be indicative of an actor performing reconnaissance or using DNS for command and control communications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an ElastiCache security group has been created..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an ElastiCache security group has been created, you should monitor AWS CloudTrail logs for events where a new ElastiCache security group is created. Specifically, look for the event source \"elasticache.amazonaws.com\" combined with the event name \"CreateCacheSecurityGroup.\" It's important to note that while some of these events could be flagged, not all instances are malicious. Often, a system or network administrator might legitimately create an ElastiCache security group as part of routine operations. Therefore, it's crucial to check whether the creation comes from expected users, using known user agents, or occurs from known hosts within your environment. Any creation activity from unfamiliar sources should prompt an investigation. To minimize distractions from alerts that are not actual threats, known legitimate behavior causing alerts can be configured to bypass or be exempted from monitoring under this specific criterion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName: 'CreateCacheSecurityGroup'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group may be created by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security group creations from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName: 'CreateCacheSecurityGroup'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group may be created by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security group creations from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
      "question": "when an ElastiCache security group has been created.",
      "answer": "In order to detect when an ElastiCache security group has been created, you should monitor AWS CloudTrail logs for events where a new ElastiCache security group is created. Specifically, look for the event source \"elasticache.amazonaws.com\" combined with the event name \"CreateCacheSecurityGroup.\" It's important to note that while some of these events could be flagged, not all instances are malicious. Often, a system or network administrator might legitimately create an ElastiCache security group as part of routine operations. Therefore, it's crucial to check whether the creation comes from expected users, using known user agents, or occurs from known hosts within your environment. Any creation activity from unfamiliar sources should prompt an investigation. To minimize distractions from alerts that are not actual threats, known legitimate behavior causing alerts can be configured to bypass or be exempted from monitoring under this specific criterion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting default filename used in PoC code against print spooler vulnerability CVE-2021-1675.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the default filename used in PoC code against print spooler vulnerability CVE-2021-1675, you should: Monitor file events on Windows systems, specifically focusing on the creation or modification of files within the directory `C:\\Windows\\System32\\spool\\drivers\\x64\\3\\old\\1\\`. The critical file to watch for includes the filename `123` within this specific path. This activity is indicative of attempts to exploit the known CVE-2021-1675 vulnerability targeting the Windows Print Spooler service. It's important to log and analyze the `ComputerName` and `TargetFilename` for any occurrences. Be aware that there might be no known false positive cases, underlining the critical nature of this detection effort.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\3\\old\\1\\123'\n    condition: selection\nfalsepositives:\n    - Unknown\nfields:\n    - ComputerName\n    - TargetFilename\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\3\\old\\1\\123'\n    condition: selection\nfalsepositives:\n    - Unknown\nfields:\n    - ComputerName\n    - TargetFilename\nlevel: critical\n",
      "question": "default filename used in PoC code against print spooler vulnerability CVE-2021-1675",
      "answer": "In order to detect the default filename used in PoC code against print spooler vulnerability CVE-2021-1675, you should: Monitor file events on Windows systems, specifically focusing on the creation or modification of files within the directory `C:\\Windows\\System32\\spool\\drivers\\x64\\3\\old\\1\\`. The critical file to watch for includes the filename `123` within this specific path. This activity is indicative of attempts to exploit the known CVE-2021-1675 vulnerability targeting the Windows Print Spooler service. It's important to log and analyze the `ComputerName` and `TargetFilename` for any occurrences. Be aware that there might be no known false positive cases, underlining the critical nature of this detection effort."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a named pipe with a pattern found in CobaltStrike malleable C2 profiles.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a named pipe with a pattern found in CobaltStrike malleable C2 profiles, you should monitor for the creation of named pipes in Windows systems. This involves looking out for specific named pipe creation events that could be indicative of Cobalt Strike activities, a tool commonly used by attackers for command and control (C2) infrastructure. The monitoring process requires having logging for Named Pipe Events (Event ID 17 and Event ID 18) configured in Sysmon, a Windows system monitoring tool. \n\nThe detection should focus on named pipes that start with certain patterns, which are typically associated with Cobalt Strike based on their malleable Command and Control (C2) profiles. These patterns include various specific strings like '\\mojo.5688.8052.xxxx', '\\mypipe-f', '\\msrpc_', '\\win\\msrpc_', and several others. Additionally, any pipes that begin with '\\Winsock2\\CatalogChangeListener-' and end with '-0,' should also be monitored, as they pertain to another selection criterion related to Cobalt Strike's malleable C2 profiles.\n\nHowever, it's crucial to exclude certain named pipes during detection, such as '\\wkssvc', '\\spoolss', '\\scerpc', '\\ntsvcs', '\\SearchTextHarvester', '\\PGMessagePipe', and '\\MsFteWds', as these could lead to false positives, including specific instances where Chrome uses similar naming conventions for its pipes (e.g., \"mojo.something\").\n\nMonitoring for these specific named pipe creation patterns and applying the mentioned filters can significantly aid in identifying potential Cobalt Strike C2 activities, giving cybersecurity defenders a high level of alert when such patterns are detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection_malleable_profiles:\n        - PipeName|startswith:\n            - '\\mojo.5688.8052.183894939787088877'\n            - '\\mojo.5688.8052.35780273329370473'\n            - '\\mypipe-f'\n            - '\\mypipe-h'\n            - '\\ntsvcs'\n            - '\\scerpc'\n            - '\\win_svc'\n            - '\\spoolss'\n            - '\\msrpc_'\n            - '\\win\\msrpc_'\n            - '\\wkssvc'\n            - '\\f53f'\n            - '\\windows.update.manager'\n            - '\\SearchTextHarvester'\n            - '\\DserNamePipe'\n            - '\\PGMessagePipe'\n            - '\\MsFteWds'\n            - '\\f4c3'\n            - '\\fullduplex_'\n            - '\\rpc_'\n        - PipeName:\n            - '\\demoagent_11'\n            - '\\demoagent_22'\n    selection_malleable_profile_CatalogChangeListener:\n        PipeName|startswith: '\\Winsock2\\CatalogChangeListener-'\n        PipeName|endswith: '-0,'\n    filter:\n        PipeName:\n            - '\\wkssvc'\n            - '\\spoolss'\n            - '\\scerpc'\n            - '\\ntsvcs'\n            - '\\SearchTextHarvester'\n            - '\\PGMessagePipe'\n            - '\\MsFteWds'\n    condition: 1 of selection_malleable_profile* and not filter\nfalsepositives:\n    - Chrome instances using the exact same pipe name \"mojo.something\"\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection_malleable_profiles:\n        - PipeName|startswith:\n            - '\\mojo.5688.8052.183894939787088877'\n            - '\\mojo.5688.8052.35780273329370473'\n            - '\\mypipe-f'\n            - '\\mypipe-h'\n            - '\\ntsvcs'\n            - '\\scerpc'\n            - '\\win_svc'\n            - '\\spoolss'\n            - '\\msrpc_'\n            - '\\win\\msrpc_'\n            - '\\wkssvc'\n            - '\\f53f'\n            - '\\windows.update.manager'\n            - '\\SearchTextHarvester'\n            - '\\DserNamePipe'\n            - '\\PGMessagePipe'\n            - '\\MsFteWds'\n            - '\\f4c3'\n            - '\\fullduplex_'\n            - '\\rpc_'\n        - PipeName:\n            - '\\demoagent_11'\n            - '\\demoagent_22'\n    selection_malleable_profile_CatalogChangeListener:\n        PipeName|startswith: '\\Winsock2\\CatalogChangeListener-'\n        PipeName|endswith: '-0,'\n    filter:\n        PipeName:\n            - '\\wkssvc'\n            - '\\spoolss'\n            - '\\scerpc'\n            - '\\ntsvcs'\n            - '\\SearchTextHarvester'\n            - '\\PGMessagePipe'\n            - '\\MsFteWds'\n    condition: 1 of selection_malleable_profile* and not filter\nfalsepositives:\n    - Chrome instances using the exact same pipe name \"mojo.something\"\nlevel: high\n",
      "question": "creation of a named pipe with a pattern found in CobaltStrike malleable C2 profiles",
      "answer": "In order to detect the creation of a named pipe with a pattern found in CobaltStrike malleable C2 profiles, you should monitor for the creation of named pipes in Windows systems. This involves looking out for specific named pipe creation events that could be indicative of Cobalt Strike activities, a tool commonly used by attackers for command and control (C2) infrastructure. The monitoring process requires having logging for Named Pipe Events (Event ID 17 and Event ID 18) configured in Sysmon, a Windows system monitoring tool. \n\nThe detection should focus on named pipes that start with certain patterns, which are typically associated with Cobalt Strike based on their malleable Command and Control (C2) profiles. These patterns include various specific strings like '\\mojo.5688.8052.xxxx', '\\mypipe-f', '\\msrpc_', '\\win\\msrpc_', and several others. Additionally, any pipes that begin with '\\Winsock2\\CatalogChangeListener-' and end with '-0,' should also be monitored, as they pertain to another selection criterion related to Cobalt Strike's malleable C2 profiles.\n\nHowever, it's crucial to exclude certain named pipes during detection, such as '\\wkssvc', '\\spoolss', '\\scerpc', '\\ntsvcs', '\\SearchTextHarvester', '\\PGMessagePipe', and '\\MsFteWds', as these could lead to false positives, including specific instances where Chrome uses similar naming conventions for its pipes (e.g., \"mojo.something\").\n\nMonitoring for these specific named pipe creation patterns and applying the mentioned filters can significantly aid in identifying potential Cobalt Strike C2 activities, giving cybersecurity defenders a high level of alert when such patterns are detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros, you should focus on monitoring changes within the Windows registry specifically targeting registry set actions. Look for events where the EventType is marked as \"SetValue\" which indicates a modification attempt. Narrow this monitoring further by specifically targeting registry keys that contain the following path segments: '\\SOFTWARE\\', '\\Microsoft\\Office\\', and '\\Common\\Security'. Additionally, ensure that these registry changes conclude with the '\\MacroRuntimeScanScope' to accurately pinpoint attempts at disabling macro scanning. Pay particular attention to modifications where the Details are set to a DWORD value of 0x00000000, as this indicates the disarming of macro runtime scans.\n\nIt's essential to have this monitoring in place despite the potential for unknown false positives, given this activity's high threat level. This approach aligns with identifying tactics and techniques such as defense evasion and execution through the manipulation of security-critical registry keys to bypass the runtime scanning of macros. This ensures a robust defense mechanism is in place to detect attempts at undermining security features designed to prevent the execution of potentially malicious macros.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\'\n            - '\\Microsoft\\Office\\'\n            - '\\Common\\Security'\n        TargetObject|endswith: '\\MacroRuntimeScanScope'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\'\n            - '\\Microsoft\\Office\\'\n            - '\\Common\\Security'\n        TargetObject|endswith: '\\MacroRuntimeScanScope'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros",
      "answer": "In order to detect tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros, you should focus on monitoring changes within the Windows registry specifically targeting registry set actions. Look for events where the EventType is marked as \"SetValue\" which indicates a modification attempt. Narrow this monitoring further by specifically targeting registry keys that contain the following path segments: '\\SOFTWARE\\', '\\Microsoft\\Office\\', and '\\Common\\Security'. Additionally, ensure that these registry changes conclude with the '\\MacroRuntimeScanScope' to accurately pinpoint attempts at disabling macro scanning. Pay particular attention to modifications where the Details are set to a DWORD value of 0x00000000, as this indicates the disarming of macro runtime scans.\n\nIt's essential to have this monitoring in place despite the potential for unknown false positives, given this activity's high threat level. This approach aligns with identifying tactics and techniques such as defense evasion and execution through the manipulation of security-critical registry keys to bypass the runtime scanning of macros. This ensures a robust defense mechanism is in place to detect attempts at undermining security features designed to prevent the execution of potentially malicious macros."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user tampers with S3 data management in Amazon Web Services..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user tampers with S3 data management in Amazon Web Services, you should: Observe AWS CloudTrail logs for actions that modify S3 bucket configurations. Specifically, look for events where the `eventSource` is `s3.amazonaws.com` and the `eventName` includes activities such as enabling bucket logging (`PutBucketLogging`), setting up a bucket to serve a website (`PutBucketWebsite`), changing the bucket's encryption settings (`PutEncryptionConfiguration`), adjusting lifecycle configurations (`PutLifecycleConfiguration`), modifying replication settings (`PutReplicationConfiguration`), replicating objects (`ReplicateObject`), or restoring objects (`RestoreObject`). These activities could indicate unauthorized attempts to alter how S3 data is managed, stored, or accessed. It\u2019s important to note that while these events can be indicative of tampering, changes to S3 configurations might sometimes be performed by system or network administrators as part of legitimate operations. Therefore, it\u2019s essential to verify if the changes were made by recognized and authorized entities in your environment. Suspicious activities, especially those initiated by unfamiliar users or hosts, should be investigated thoroughly. Known legitimate behaviors causing alerts should be documented and can be configured to bypass this detection mechanism to reduce false positives. This observation has a low level of alert severity but is critical for maintaining the integrity and security of S3 data management.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: s3.amazonaws.com\n        eventName:\n            - PutBucketLogging\n            - PutBucketWebsite\n            - PutEncryptionConfiguration\n            - PutLifecycleConfiguration\n            - PutReplicationConfiguration\n            - ReplicateObject\n            - RestoreObject\n    condition: selection\nfalsepositives:\n    - A S3 configuration change may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. S3 configuration change from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: s3.amazonaws.com\n        eventName:\n            - PutBucketLogging\n            - PutBucketWebsite\n            - PutEncryptionConfiguration\n            - PutLifecycleConfiguration\n            - PutReplicationConfiguration\n            - ReplicateObject\n            - RestoreObject\n    condition: selection\nfalsepositives:\n    - A S3 configuration change may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. S3 configuration change from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
      "question": "user tampers with S3 data management in Amazon Web Services.",
      "answer": "In order to detect when a user tampers with S3 data management in Amazon Web Services, you should: Observe AWS CloudTrail logs for actions that modify S3 bucket configurations. Specifically, look for events where the `eventSource` is `s3.amazonaws.com` and the `eventName` includes activities such as enabling bucket logging (`PutBucketLogging`), setting up a bucket to serve a website (`PutBucketWebsite`), changing the bucket's encryption settings (`PutEncryptionConfiguration`), adjusting lifecycle configurations (`PutLifecycleConfiguration`), modifying replication settings (`PutReplicationConfiguration`), replicating objects (`ReplicateObject`), or restoring objects (`RestoreObject`). These activities could indicate unauthorized attempts to alter how S3 data is managed, stored, or accessed. It\u2019s important to note that while these events can be indicative of tampering, changes to S3 configurations might sometimes be performed by system or network administrators as part of legitimate operations. Therefore, it\u2019s essential to verify if the changes were made by recognized and authorized entities in your environment. Suspicious activities, especially those initiated by unfamiliar users or hosts, should be investigated thoroughly. Known legitimate behaviors causing alerts should be documented and can be configured to bypass this detection mechanism to reduce false positives. This observation has a low level of alert severity but is critical for maintaining the integrity and security of S3 data management."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files, which can be abused by attackers to decode an encoded payload before execution, you should: Monitor Windows process creation logs for instances where the process image ends with '\\certutil.exe' or has an OriginalFileName of 'CertUtil.exe'. Additionally, look for command-line executions containing either '-decode ', '/decode ', '-decodehex ', or '/decodehex ' to identify the specific use of certutil for decoding base64 or hex encoded files. It's important to consider all these selection criteria together to accurately identify potential malicious activity. While monitoring, be aware that there can be legitimate uses of these certutil commands, so unknown instances should be considered as potential false positives, rated at a medium level of concern. This approach aids in recognizing tactics and techniques resembling the usage of encoding/decoding in the attack lifecycle, without labeling it under specific MITRE ATT&CK taxonomy.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            # Decode Base64\n            - '-decode '\n            - '/decode '\n            # Decode Hex\n            - '-decodehex '\n            - '/decodehex '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            # Decode Base64\n            - '-decode '\n            - '/decode '\n            # Decode Hex\n            - '-decodehex '\n            - '/decodehex '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution",
      "answer": "In order to detect the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files, which can be abused by attackers to decode an encoded payload before execution, you should: Monitor Windows process creation logs for instances where the process image ends with '\\certutil.exe' or has an OriginalFileName of 'CertUtil.exe'. Additionally, look for command-line executions containing either '-decode ', '/decode ', '-decodehex ', or '/decodehex ' to identify the specific use of certutil for decoding base64 or hex encoded files. It's important to consider all these selection criteria together to accurately identify potential malicious activity. While monitoring, be aware that there can be legitimate uses of these certutil commands, so unknown instances should be considered as potential false positives, rated at a medium level of concern. This approach aids in recognizing tactics and techniques resembling the usage of encoding/decoding in the attack lifecycle, without labeling it under specific MITRE ATT&CK taxonomy."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious powershell command line parameters used in Empire.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell command line parameters used in Empire, you should monitor for process creation events on Windows systems for specific command line patterns. Look for executions of PowerShell commands that include parameters indicative of an attempt to evade detection and execute encoded commands. These parameters are often used by attackers to launch scripts without leaving easily traceable evidence. Specifically, watch out for PowerShell commands that contain any of the following strings: '-NoP -sta -NonI -W Hidden -Enc ', '-noP -sta -w 1 -enc ', '-NoP -NonI -W Hidden -enc ', '-noP -sta -w 1 -enc', '-enc  SQB', or '-nop -exec bypass -EncodedCommand '. These command line arguments are synonymous with stealth techniques, aiming to run processes in a hidden window, bypass execution policies, or execute encoded commands, which are common tactics in attacks leveraging the Empire framework. Be cautious, however, as there might be false positives where benign tools use similar command line parameters for legitimate purposes. Due to the high risk associated with these command patterns, this activity is classified with a high level of concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' -NoP -sta -NonI -W Hidden -Enc '\n            - ' -noP -sta -w 1 -enc '\n            - ' -NoP -NonI -W Hidden -enc '\n            - ' -noP -sta -w 1 -enc'\n            - ' -enc  SQB'\n            - ' -nop -exec bypass -EncodedCommand '\n    condition: selection\nfalsepositives:\n    - Other tools that incidentally use the same command line parameters\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' -NoP -sta -NonI -W Hidden -Enc '\n            - ' -noP -sta -w 1 -enc '\n            - ' -NoP -NonI -W Hidden -enc '\n            - ' -noP -sta -w 1 -enc'\n            - ' -enc  SQB'\n            - ' -nop -exec bypass -EncodedCommand '\n    condition: selection\nfalsepositives:\n    - Other tools that incidentally use the same command line parameters\nlevel: high\n",
      "question": "suspicious powershell command line parameters used in Empire",
      "answer": "In order to detect suspicious PowerShell command line parameters used in Empire, you should monitor for process creation events on Windows systems for specific command line patterns. Look for executions of PowerShell commands that include parameters indicative of an attempt to evade detection and execute encoded commands. These parameters are often used by attackers to launch scripts without leaving easily traceable evidence. Specifically, watch out for PowerShell commands that contain any of the following strings: '-NoP -sta -NonI -W Hidden -Enc ', '-noP -sta -w 1 -enc ', '-NoP -NonI -W Hidden -enc ', '-noP -sta -w 1 -enc', '-enc  SQB', or '-nop -exec bypass -EncodedCommand '. These command line arguments are synonymous with stealth techniques, aiming to run processes in a hidden window, bypass execution policies, or execute encoded commands, which are common tactics in attacks leveraging the Empire framework. Be cautious, however, as there might be false positives where benign tools use similar command line parameters for legitimate purposes. Due to the high risk associated with these command patterns, this activity is classified with a high level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious execution of Sysinternals PsSuspend, where the utility is used to suspend critical processes such as AV or EDR to bypass defenses.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious execution of Sysinternals PsSuspend, where the utility is used to suspend critical processes such as AV or EDR to bypass defenses, you should: monitor Windows process creation logs for the execution of 'pssuspend.exe' or 'pssuspend64.exe'. Specifically, look for cases where the original file name or the image path ends with these exe names. Additionally, pay close attention to the command line arguments to identify if 'msmpeng.exe', which is a critical process associated with Windows Defender, is being targeted. This approach helps in identifying attempts to suspend important security processes, thereby providing an indicator of malicious activity aiming to bypass system defenses. The probability of false positives is considered unlikely, and the threat level associated with this detection is rated as high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'pssuspend.exe'\n        - Image|endswith:\n            - '\\pssuspend.exe'\n            - '\\pssuspend64.exe'\n    selection_cli:\n        # Add more interesting/critical processes\n        CommandLine|contains: 'msmpeng.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'pssuspend.exe'\n        - Image|endswith:\n            - '\\pssuspend.exe'\n            - '\\pssuspend64.exe'\n    selection_cli:\n        # Add more interesting/critical processes\n        CommandLine|contains: 'msmpeng.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "suspicious execution of Sysinternals PsSuspend, where the utility is used to suspend critical processes such as AV or EDR to bypass defenses",
      "answer": "In order to detect suspicious execution of Sysinternals PsSuspend, where the utility is used to suspend critical processes such as AV or EDR to bypass defenses, you should: monitor Windows process creation logs for the execution of 'pssuspend.exe' or 'pssuspend64.exe'. Specifically, look for cases where the original file name or the image path ends with these exe names. Additionally, pay close attention to the command line arguments to identify if 'msmpeng.exe', which is a critical process associated with Windows Defender, is being targeted. This approach helps in identifying attempts to suspend important security processes, thereby providing an indicator of malicious activity aiming to bypass system defenses. The probability of false positives is considered unlikely, and the threat level associated with this detection is rated as high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of a signed and vulnerable GIGABYTE driver often used by threat actors or malware for privilege escalation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of a signed and vulnerable GIGABYTE driver often used by threat actors or malware for privilege escalation, you should monitor for specific driver loads on Windows systems. This involves tracking the loading of drivers using their hash values to identify potentially malicious activities. The hash values include specific MD5, SHA1, and SHA256 hashes that have been associated with the GIGABYTE driver in question. The detection process is primarily based on Sysmon events related to driver loads, but it also covers other unspecified logging mechanisms that could capture driver loading activities. This approach is aimed at identifying instances where this vulnerable driver might be exploited by attackers to gain elevated privileges on a system. Identifying such events is critical as they are indicative of possible system compromise or an ongoing attack. The severity level for these detections is categorized as high, signaling the importance of promptly addressing any matches found during monitoring.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'MD5=9AB9F3B75A2EB87FAFB1B7361BE9DFB3'\n            - 'MD5=C832A4313FF082258240B61B88EFA025'\n            - 'SHA1=FE10018AF723986DB50701C8532DF5ED98B17C39'\n            - 'SHA1=1F1CE28C10453ACBC9D3844B4604C59C0AB0AD46'\n            - 'SHA256=31F4CFB4C71DA44120752721103A16512444C13C2AC2D857A7E6F13CB679B427'\n            - 'SHA256=CFC5C585DD4E592DD1A08887DED28B92D9A5820587B6F4F8FA4F56D60289259B'\n    selection_other:\n        - md5:\n            - '9ab9f3b75a2eb87fafb1b7361be9dfb3'\n            - 'c832a4313ff082258240b61b88efa025'\n        - sha1:\n            - 'fe10018af723986db50701c8532df5ed98b17c39'\n            - '1f1ce28c10453acbc9d3844b4604c59c0ab0ad46'\n        - sha256:\n            - '31f4cfb4c71da44120752721103a16512444c13c2ac2d857a7e6f13cb679b427'\n            - 'cfc5c585dd4e592dd1a08887ded28b92d9a5820587b6f4f8fa4f56d60289259b'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'MD5=9AB9F3B75A2EB87FAFB1B7361BE9DFB3'\n            - 'MD5=C832A4313FF082258240B61B88EFA025'\n            - 'SHA1=FE10018AF723986DB50701C8532DF5ED98B17C39'\n            - 'SHA1=1F1CE28C10453ACBC9D3844B4604C59C0AB0AD46'\n            - 'SHA256=31F4CFB4C71DA44120752721103A16512444C13C2AC2D857A7E6F13CB679B427'\n            - 'SHA256=CFC5C585DD4E592DD1A08887DED28B92D9A5820587B6F4F8FA4F56D60289259B'\n    selection_other:\n        - md5:\n            - '9ab9f3b75a2eb87fafb1b7361be9dfb3'\n            - 'c832a4313ff082258240b61b88efa025'\n        - sha1:\n            - 'fe10018af723986db50701c8532df5ed98b17c39'\n            - '1f1ce28c10453acbc9d3844b4604c59c0ab0ad46'\n        - sha256:\n            - '31f4cfb4c71da44120752721103a16512444c13c2ac2d857a7e6f13cb679b427'\n            - 'cfc5c585dd4e592dd1a08887ded28b92d9a5820587b6f4f8fa4f56d60289259b'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "load of a signed and vulnerable GIGABYTE driver often used by threat actors or malware for privilege escalation",
      "answer": "In order to detect the load of a signed and vulnerable GIGABYTE driver often used by threat actors or malware for privilege escalation, you should monitor for specific driver loads on Windows systems. This involves tracking the loading of drivers using their hash values to identify potentially malicious activities. The hash values include specific MD5, SHA1, and SHA256 hashes that have been associated with the GIGABYTE driver in question. The detection process is primarily based on Sysmon events related to driver loads, but it also covers other unspecified logging mechanisms that could capture driver loading activities. This approach is aimed at identifying instances where this vulnerable driver might be exploited by attackers to gain elevated privileges on a system. Identifying such events is critical as they are indicative of possible system compromise or an ongoing attack. The severity level for these detections is categorized as high, signaling the importance of promptly addressing any matches found during monitoring."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of Tor or Tor-Browser to connect to onion routing networks.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Tor or Tor-Browser to connect to onion routing networks, you should: Monitor Windows process creation logs for any processes that end with either '\\tor.exe' or '\\Tor Browser\\Browser\\firefox.exe'. These executable paths are indicative of the Tor application or Tor Browser being launched, which are commonly utilized for anonymous communication through the Tor onion routing network. Given that these activities can be tied to efforts to maintain anonymity online, identifying the execution of these specific files is crucial for detection. It's important to note that there might be instances where these detections could be false positives, although the likelihood is unknown. The severity of this rule is considered high due to the potential implication of Tor usage in circumventing network monitoring and engaging in covert communication.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\tor.exe'\n            - '\\Tor Browser\\Browser\\firefox.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\tor.exe'\n            - '\\Tor Browser\\Browser\\firefox.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of Tor or Tor-Browser to connect to onion routing networks",
      "answer": "In order to detect the use of Tor or Tor-Browser to connect to onion routing networks, you should: Monitor Windows process creation logs for any processes that end with either '\\tor.exe' or '\\Tor Browser\\Browser\\firefox.exe'. These executable paths are indicative of the Tor application or Tor Browser being launched, which are commonly utilized for anonymous communication through the Tor onion routing network. Given that these activities can be tied to efforts to maintain anonymity online, identifying the execution of these specific files is crucial for detection. It's important to note that there might be instances where these detections could be false positives, although the likelihood is unknown. The severity of this rule is considered high due to the potential implication of Tor usage in circumventing network monitoring and engaging in covert communication."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation, you should: monitor Windows driver load activity for the loading of specific drivers or libraries that are known to be utilized by malicious software for gaining elevated privileges. Focus on detecting the loading of files with names that end with '\\WinRing0x64.sys', '\\WinRing0.sys', '\\WinRing0.dll', and '\\WinRing0x64.dll', or the alternative form '\\winring00x64.sys'. Additionally, pay attention to the presence of a specific hash ('IMPHASH=D41FA95D4642DC981F10DE36F4DC8CD7' or with a lowercase equivalent) that is associated with these suspicious files. This hash indicates a potentially malicious driver or library being loaded. Such activities should raise suspicion, as they are indicative of actions related to privilege escalation attempts by unauthorized software or individuals. It is crucial to investigate these detections with high priority due to their serious nature and potential impact.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_name:\n        ImageLoaded|endswith:\n            - '\\WinRing0x64.sys'\n            - '\\WinRing0.sys'\n            - '\\WinRing0.dll'\n            - '\\WinRing0x64.dll'\n            - '\\winring00x64.sys'\n    selection_sysmon:\n        Hashes|contains: 'IMPHASH=D41FA95D4642DC981F10DE36F4DC8CD7'\n    selection_other:\n        Imphash: 'd41fa95d4642dc981f10de36f4dc8cd7'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_name:\n        ImageLoaded|endswith:\n            - '\\WinRing0x64.sys'\n            - '\\WinRing0.sys'\n            - '\\WinRing0.dll'\n            - '\\WinRing0x64.dll'\n            - '\\winring00x64.sys'\n    selection_sysmon:\n        Hashes|contains: 'IMPHASH=D41FA95D4642DC981F10DE36F4DC8CD7'\n    selection_other:\n        Imphash: 'd41fa95d4642dc981f10de36f4dc8cd7'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation",
      "answer": "In order to detect the load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation, you should: monitor Windows driver load activity for the loading of specific drivers or libraries that are known to be utilized by malicious software for gaining elevated privileges. Focus on detecting the loading of files with names that end with '\\WinRing0x64.sys', '\\WinRing0.sys', '\\WinRing0.dll', and '\\WinRing0x64.dll', or the alternative form '\\winring00x64.sys'. Additionally, pay attention to the presence of a specific hash ('IMPHASH=D41FA95D4642DC981F10DE36F4DC8CD7' or with a lowercase equivalent) that is associated with these suspicious files. This hash indicates a potentially malicious driver or library being loaded. Such activities should raise suspicion, as they are indicative of actions related to privilege escalation attempts by unauthorized software or individuals. It is crucial to investigate these detections with high priority due to their serious nature and potential impact."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of bitsadmin downloading a file to a suspicious target folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of bitsadmin downloading a file to a suspicious target folder, you should: Monitor process creation events on Windows systems for any activity related to the use of the bitsadmin.exe utility. Specifically, look for processes where the image ends with '\\bitsadmin.exe' or where the OriginalFileName is exactly 'bitsadmin.exe'. Furthermore, pay close attention to the command line arguments accompanying these processes. Be on the lookout for command lines that include '/transfer', '/create', or '/addfile' parameters, as these are indicative of bitsadmin being used to manipulate or transfer files. Equally important is to examine the command lines for paths pointing to suspicious folders. Such folders include, but are not limited to, '\\Perflogs', '\\ProgramData\\', '\\Temp\\', '\\Users\\Public\\', '\\Windows\\', '\\AppData\\Local\\Temp\\', '\\AppData\\Roaming\\', '\\Desktop\\', '%ProgramData%', and '%public%'. If all these conditions are met, it likely indicates the misuse of bitsadmin for downloading files to suspicious locations, and such activity should be investigated promptly due to its high-risk nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_flags:\n        CommandLine|contains:\n            - ' /transfer '\n            - ' /create '\n            - ' /addfile '\n    selection_folder:\n        CommandLine|contains:\n            - ':\\Perflogs'\n            - ':\\ProgramData\\'\n            - ':\\Temp\\'\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Desktop\\'\n            - '%ProgramData%'\n            - '%public%'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_flags:\n        CommandLine|contains:\n            - ' /transfer '\n            - ' /create '\n            - ' /addfile '\n    selection_folder:\n        CommandLine|contains:\n            - ':\\Perflogs'\n            - ':\\ProgramData\\'\n            - ':\\Temp\\'\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Desktop\\'\n            - '%ProgramData%'\n            - '%public%'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of bitsadmin downloading a file to a suspicious target folder",
      "answer": "In order to detect usage of bitsadmin downloading a file to a suspicious target folder, you should: Monitor process creation events on Windows systems for any activity related to the use of the bitsadmin.exe utility. Specifically, look for processes where the image ends with '\\bitsadmin.exe' or where the OriginalFileName is exactly 'bitsadmin.exe'. Furthermore, pay close attention to the command line arguments accompanying these processes. Be on the lookout for command lines that include '/transfer', '/create', or '/addfile' parameters, as these are indicative of bitsadmin being used to manipulate or transfer files. Equally important is to examine the command lines for paths pointing to suspicious folders. Such folders include, but are not limited to, '\\Perflogs', '\\ProgramData\\', '\\Temp\\', '\\Users\\Public\\', '\\Windows\\', '\\AppData\\Local\\Temp\\', '\\AppData\\Roaming\\', '\\Desktop\\', '%ProgramData%', and '%public%'. If all these conditions are met, it likely indicates the misuse of bitsadmin for downloading files to suspicious locations, and such activity should be investigated promptly due to its high-risk nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a \"rundll32\" process from the ColdSteel persistence service to initiate the cleanup command by calling one of its own exports. This functionality is not present in \"MileStone2017\" and some \"MileStone2016\" samples.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a \"rundll32\" process from the ColdSteel persistence service to initiate the cleanup command by calling one of its own exports, a functionality not present in \"MileStone2017\" and some \"MileStone2016\" samples, you should monitor the creation of processes on Windows systems with specific characteristics. Look for the creation of processes where the parent process image ends with '\\svchost.exe' and its command line includes either ' -k msupdate', ' -k msupdate2', or ' -k alg'. Additionally, the created process should be 'rundll32.exe' with a command line that contains 'UpdateDriverForPlugAndPlayDevicesW', 'ServiceMain', or 'DiUninstallDevice'. These particular patterns are indicative of an attack scenario involving the execution of commands that are not typically present in legitimate use cases, making false positives unlikely. Due to the critical nature of spotting such activities, which are often linked to malicious persistence mechanisms, oversight of these process creation events is crucial for maintaining the integrity of the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        ParentCommandLine|contains:\n            - ' -k msupdate'\n            - ' -k msupdate2'\n            - ' -k alg'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            - 'UpdateDriverForPlugAndPlayDevicesW'\n            - 'ServiceMain'\n            - 'DiUninstallDevice'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        ParentCommandLine|contains:\n            - ' -k msupdate'\n            - ' -k msupdate2'\n            - ' -k alg'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            - 'UpdateDriverForPlugAndPlayDevicesW'\n            - 'ServiceMain'\n            - 'DiUninstallDevice'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "creation of a \"rundll32\" process from the ColdSteel persistence service to initiate the cleanup command by calling one of its own exports. This functionality is not present in \"MileStone2017\" and some \"MileStone2016\" samples",
      "answer": "In order to detect the creation of a \"rundll32\" process from the ColdSteel persistence service to initiate the cleanup command by calling one of its own exports, a functionality not present in \"MileStone2017\" and some \"MileStone2016\" samples, you should monitor the creation of processes on Windows systems with specific characteristics. Look for the creation of processes where the parent process image ends with '\\svchost.exe' and its command line includes either ' -k msupdate', ' -k msupdate2', or ' -k alg'. Additionally, the created process should be 'rundll32.exe' with a command line that contains 'UpdateDriverForPlugAndPlayDevicesW', 'ServiceMain', or 'DiUninstallDevice'. These particular patterns are indicative of an attack scenario involving the execution of commands that are not typically present in legitimate use cases, making false positives unlikely. Due to the critical nature of spotting such activities, which are often linked to malicious persistence mechanisms, oversight of these process creation events is crucial for maintaining the integrity of the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Clip.exe to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring the PowerShell module activity within the Windows environment. Specifically, look for events where the command line execution patterns match the use of 'cmd' followed by either '/c' or '/r' parameters, and closely thereafter, involves 'clip.exe' or 'clip' command. The detection becomes particularly specific with the inclusion of patterns that combine 'clip' with PowerShell commands that seem to manipulate the clipboard content in a sophisticated manner, indicated by the complex regex pattern provided. These patterns also include the use of '&&' operator, suggesting an attempt to chain commands in a manner that's not typical for regular system or user operations. \n\nMonitoring should be performed with high sensitivity due to the high level of potential impact, but it\u2019s important to note that as of now, the potential for unknown false positives exists, indicating that not all matched patterns could lead to genuine threats. However, given the obfuscated nature of the execution method, any hits on these patterns should be considered with a degree of caution. \n\nThis activity aligns with techniques known in cybersecurity frameworks which describe tactics such as Execution, Defense Evasion, and Command and Control, showing the attacker's efforts to execute commands covertly, evade detection mechanisms, and maintain control over the compromised system through unusual use of system utilities like Clip.exe in conjunction with PowerShell scripting.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|re: '.*cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\"'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|re: '.*cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\"'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring the PowerShell module activity within the Windows environment. Specifically, look for events where the command line execution patterns match the use of 'cmd' followed by either '/c' or '/r' parameters, and closely thereafter, involves 'clip.exe' or 'clip' command. The detection becomes particularly specific with the inclusion of patterns that combine 'clip' with PowerShell commands that seem to manipulate the clipboard content in a sophisticated manner, indicated by the complex regex pattern provided. These patterns also include the use of '&&' operator, suggesting an attempt to chain commands in a manner that's not typical for regular system or user operations. \n\nMonitoring should be performed with high sensitivity due to the high level of potential impact, but it\u2019s important to note that as of now, the potential for unknown false positives exists, indicating that not all matched patterns could lead to genuine threats. However, given the obfuscated nature of the execution method, any hits on these patterns should be considered with a degree of caution. \n\nThis activity aligns with techniques known in cybersecurity frameworks which describe tactics such as Execution, Defense Evasion, and Command and Control, showing the attacker's efforts to execute commands covertly, evade detection mechanisms, and maintain control over the compromised system through unusual use of system utilities like Clip.exe in conjunction with PowerShell scripting."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting XML parsing issues, if the application expects to work with XML make sure that the parser is initialized safely..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect XML parsing issues, if the application expects to work with XML make sure that the parser is initialized safely, you should: Monitor application error logs from the Java Virtual Machine (JVM) environment where application error logs are collected with a LOG_LEVEL of ERROR or above. Look for specific keywords within these logs that indicate potential XML parsing issues. The keywords to look out for are 'SAXParseException' and 'DOMException'. These keywords suggest there might be issues with XML parsing that could potentially point to unsafe initialization of the parser, which is a critical aspect of securing applications that process XML data. However, bear in mind that these indicators might not always signify a security issue. There could be false positives, especially in scenarios where the application is designed to work with XML and may encounter parsing issues as part of its normal operation. Therefore, while these keywords can be strong indicators of XML parsing issues that necessitate a closer look to ensure the parser is initialized safely, they should be evaluated in the context of the application's expected behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: application\n    product: jvm\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'SAXParseException'\n        - 'DOMException'\n    condition: keywords\nfalsepositives:\n    - If the application expects to work with XML there may be parsing issues that don't necessarily mean XXE.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: application\n    product: jvm\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'SAXParseException'\n        - 'DOMException'\n    condition: keywords\nfalsepositives:\n    - If the application expects to work with XML there may be parsing issues that don't necessarily mean XXE.\nlevel: high\n",
      "question": "XML parsing issues, if the application expects to work with XML make sure that the parser is initialized safely.",
      "answer": "In order to detect XML parsing issues, if the application expects to work with XML make sure that the parser is initialized safely, you should: Monitor application error logs from the Java Virtual Machine (JVM) environment where application error logs are collected with a LOG_LEVEL of ERROR or above. Look for specific keywords within these logs that indicate potential XML parsing issues. The keywords to look out for are 'SAXParseException' and 'DOMException'. These keywords suggest there might be issues with XML parsing that could potentially point to unsafe initialization of the parser, which is a critical aspect of securing applications that process XML data. However, bear in mind that these indicators might not always signify a security issue. There could be false positives, especially in scenarios where the application is designed to work with XML and may encounter parsing issues as part of its normal operation. Therefore, while these keywords can be strong indicators of XML parsing issues that necessitate a closer look to ensure the parser is initialized safely, they should be evaluated in the context of the application's expected behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious DNS queries to api.telegram.org used by Telegram Bots of any kind.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious DNS queries to api.telegram.org used by Telegram Bots of any kind, you should: Focus on monitoring DNS query logs for instances where requests are made to \"api.telegram.org\". This activity points towards interaction with the Telegram Bot API, which could range from benign to malicious use cases, depending on the context within your organization. Consider examining the context in which these requests occur to differentiate between legitimate business use of Telegram bots and potentially malicious activities aiming to exploit Telegram bots for nefarious purposes. It's crucial to remain aware that not all hits might indicate a security threat; some may represent legitimate use of Telegram bots by the company. The severity level associated with detecting this activity is considered medium, highlighting the need for further investigation upon detection to ascertain the nature of the requests.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: dns\ndetection:\n    selection:\n        query: 'api.telegram.org'   # Telegram Bot API Request https://core.telegram.org/bots/faq\n    condition: selection\nfalsepositives:\n    - Legitimate use of Telegram bots in the company\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns\ndetection:\n    selection:\n        query: 'api.telegram.org'   # Telegram Bot API Request https://core.telegram.org/bots/faq\n    condition: selection\nfalsepositives:\n    - Legitimate use of Telegram bots in the company\nlevel: medium\n",
      "question": "suspicious DNS queries to api.telegram.org used by Telegram Bots of any kind",
      "answer": "In order to detect suspicious DNS queries to api.telegram.org used by Telegram Bots of any kind, you should: Focus on monitoring DNS query logs for instances where requests are made to \"api.telegram.org\". This activity points towards interaction with the Telegram Bot API, which could range from benign to malicious use cases, depending on the context within your organization. Consider examining the context in which these requests occur to differentiate between legitimate business use of Telegram bots and potentially malicious activities aiming to exploit Telegram bots for nefarious purposes. It's crucial to remain aware that not all hits might indicate a security threat; some may represent legitimate use of Telegram bots by the company. The severity level associated with detecting this activity is considered medium, highlighting the need for further investigation upon detection to ascertain the nature of the requests."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the PowerShell execution policy in order to bypass signing requirements for script execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the PowerShell execution policy in order to bypass signing requirements for script execution, you should monitor the Windows registry for modifications that adjust how PowerShell scripts are executed, particularly focusing on changes that lower security settings. Specifically, watch for the \"SetValue\" event type within registry events, as this indicates a value being changed. Keep an eye on modifications to areas of the registry responsible for handling PowerShell's execution policy, which can be found under keys such as \"\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy\" and \"\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy\". These locations are pivotal, as they control the execution policies that dictate what scripts can run in PowerShell, including whether scripts must be digitally signed to execute. Attackers may attempt to set these policies to \"Bypass\", \"RemoteSigned\", or \"Unrestricted\" to allow the execution of unsigned or untrusted scripts, a common technique in various attacks to facilitate malicious activities. Additionally, it's crucial to exclude changes made by the system processes running from \"C:\\Windows\\System32\\\" and \"C:\\Windows\\SysWOW64\\\" directories to minimize false positives, as these are typically legitimate changes made by the system. This detection strategy is aligned with mitigation and detection tactics against the abuse of scripting environments and execution policies, commonly observed in tactics employed for privilege escalation, persistence, and execution of malicious payloads.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith:\n            # Note for future readers: For PowerShell 7+ the ExecutionPolicy is handled via a setting file due to the fact that PWSH7 is available for mac and linux\n            # Attackers can create a per-user setting file (powershell.config.json) and set the execution policy there\n            # Learn more here: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_powershell_config?view=powershell-7.3\n            - '\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy'\n            - '\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy'\n        Details|contains:\n            - 'Bypass'\n            - 'RemoteSigned'\n            - 'Unrestricted'\n    filter_svchost:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith:\n            # Note for future readers: For PowerShell 7+ the ExecutionPolicy is handled via a setting file due to the fact that PWSH7 is available for mac and linux\n            # Attackers can create a per-user setting file (powershell.config.json) and set the execution policy there\n            # Learn more here: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_powershell_config?view=powershell-7.3\n            - '\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy'\n            - '\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy'\n        Details|contains:\n            - 'Bypass'\n            - 'RemoteSigned'\n            - 'Unrestricted'\n    filter_svchost:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "changes to the PowerShell execution policy in order to bypass signing requirements for script execution",
      "answer": "In order to detect changes to the PowerShell execution policy in order to bypass signing requirements for script execution, you should monitor the Windows registry for modifications that adjust how PowerShell scripts are executed, particularly focusing on changes that lower security settings. Specifically, watch for the \"SetValue\" event type within registry events, as this indicates a value being changed. Keep an eye on modifications to areas of the registry responsible for handling PowerShell's execution policy, which can be found under keys such as \"\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy\" and \"\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy\". These locations are pivotal, as they control the execution policies that dictate what scripts can run in PowerShell, including whether scripts must be digitally signed to execute. Attackers may attempt to set these policies to \"Bypass\", \"RemoteSigned\", or \"Unrestricted\" to allow the execution of unsigned or untrusted scripts, a common technique in various attacks to facilitate malicious activities. Additionally, it's crucial to exclude changes made by the system processes running from \"C:\\Windows\\System32\\\" and \"C:\\Windows\\SysWOW64\\\" directories to minimize false positives, as these are typically legitimate changes made by the system. This detection strategy is aligned with mitigation and detection tactics against the abuse of scripting environments and execution policies, commonly observed in tactics employed for privilege escalation, persistence, and execution of malicious payloads."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The FSharp Interpreters, FsiAnyCpu.exe and FSi.exe, can be used for AWL bypass and is listed in Microsoft recommended block rules..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the utilization of FSharp Interpreters (FsiAnyCpu.exe and FSi.exe) for AWL (Application Allowlisting) bypass, which is highlighted in Microsoft's recommended block rules, you should monitor for the creation of processes on Windows systems that are linked to these interpreters. This involves looking for instances where either 'fsianycpu.exe' or 'fsi.exe' are executed, indicated by the end portion of the process image path or the original file name used during process creation. Regarding considerations to avoid false positives, it's important to note that the legitimate use of these interpreters by software developers can occur; therefore, such instances should be carefully assessed. The severity level associated with detecting this activity is classified as medium, emphasizing the necessity for attention while also considering possible legitimate use cases. This strategy is aimed at identifying potential misuse of these interpreters which could circumvent application allowlisting defenses, a tactic attackers might use to execute unauthorized code on a system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\fsianycpu.exe'\n        - OriginalFileName: 'fsianycpu.exe'\n        - Image|endswith: '\\fsi.exe'\n        - OriginalFileName: 'fsi.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\fsianycpu.exe'\n        - OriginalFileName: 'fsianycpu.exe'\n        - Image|endswith: '\\fsi.exe'\n        - OriginalFileName: 'fsi.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer.\nlevel: medium\n",
      "question": "The FSharp Interpreters, FsiAnyCpu.exe and FSi.exe, can be used for AWL bypass and is listed in Microsoft recommended block rules.",
      "answer": "In order to detect the utilization of FSharp Interpreters (FsiAnyCpu.exe and FSi.exe) for AWL (Application Allowlisting) bypass, which is highlighted in Microsoft's recommended block rules, you should monitor for the creation of processes on Windows systems that are linked to these interpreters. This involves looking for instances where either 'fsianycpu.exe' or 'fsi.exe' are executed, indicated by the end portion of the process image path or the original file name used during process creation. Regarding considerations to avoid false positives, it's important to note that the legitimate use of these interpreters by software developers can occur; therefore, such instances should be carefully assessed. The severity level associated with detecting this activity is classified as medium, emphasizing the necessity for attention while also considering possible legitimate use cases. This strategy is aimed at identifying potential misuse of these interpreters which could circumvent application allowlisting defenses, a tactic attackers might use to execute unauthorized code on a system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus, you should: focus on monitoring image load events within Windows environments. Specifically, look for instances where the DLLs named 'SmadHook32c.dll' or 'SmadHook64c.dll' are loaded. These filenames ending with these specific DLLs could indicate an attempt to sideload a malicious DLL using the legitimate SmadAV antivirus software as a cover.\n\nHowever, it's important to distinguish between legitimate and potentially malicious activity. To reduce false positives, exclude any events where these DLLs are loaded by the official SmadAV executable paths, which include 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect32.exe', 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect64.exe', 'C:\\Program Files\\SMADAV\\SmadavProtect32.exe', and 'C:\\Program Files\\SMADAV\\SmadavProtect64.exe'. Also, exclude any instances where the loaded image starts with the legitimate SmadAV directory paths, either under 'C:\\Program Files (x86)\\SMADAV\\' or 'C:\\Program Files\\SMADAV\\'.\n\nThis is considered a high-level alert due to the rarity of false positives and the serious implications of successful DLL sideloading attacks, allowing attackers to execute malicious code under the guise of a trusted application.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\SmadHook32c.dll'\n            - '\\SmadHook64c.dll'\n    filter_main_legit_path:\n        Image:\n            - 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect32.exe'\n            - 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect64.exe'\n            - 'C:\\Program Files\\SMADAV\\SmadavProtect32.exe'\n            - 'C:\\Program Files\\SMADAV\\SmadavProtect64.exe'\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\SMADAV\\'\n            - 'C:\\Program Files\\SMADAV\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\SmadHook32c.dll'\n            - '\\SmadHook64c.dll'\n    filter_main_legit_path:\n        Image:\n            - 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect32.exe'\n            - 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect64.exe'\n            - 'C:\\Program Files\\SMADAV\\SmadavProtect32.exe'\n            - 'C:\\Program Files\\SMADAV\\SmadavProtect64.exe'\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\SMADAV\\'\n            - 'C:\\Program Files\\SMADAV\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus",
      "answer": "In order to detect potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus, you should: focus on monitoring image load events within Windows environments. Specifically, look for instances where the DLLs named 'SmadHook32c.dll' or 'SmadHook64c.dll' are loaded. These filenames ending with these specific DLLs could indicate an attempt to sideload a malicious DLL using the legitimate SmadAV antivirus software as a cover.\n\nHowever, it's important to distinguish between legitimate and potentially malicious activity. To reduce false positives, exclude any events where these DLLs are loaded by the official SmadAV executable paths, which include 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect32.exe', 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect64.exe', 'C:\\Program Files\\SMADAV\\SmadavProtect32.exe', and 'C:\\Program Files\\SMADAV\\SmadavProtect64.exe'. Also, exclude any instances where the loaded image starts with the legitimate SmadAV directory paths, either under 'C:\\Program Files (x86)\\SMADAV\\' or 'C:\\Program Files\\SMADAV\\'.\n\nThis is considered a high-level alert due to the rarity of false positives and the serious implications of successful DLL sideloading attacks, allowing attackers to execute malicious code under the guise of a trusted application."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indciates WMI ActiveScriptEventConsumers EventConsumers activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indicate WMI ActiveScriptEventConsumers EventConsumers activity, you should monitor Windows image load events for instances where the \"scrcons.exe\" is involved alongside the loading of specific scripting Dynamic Link Libraries (DLLs). These libraries include 'vbscript.dll', 'wbemdisp.dll', 'wshom.ocx', and 'scrrun.dll'. The presence of these activities may signal the malicious use of Windows Management Instrumentation (WMI) for executing scripts, a technique often utilized by attackers for persistence, lateral movement, or information gathering. It is important to note that there may be legitimate uses of these DLLs, and certain devices, such as Dell computers, might trigger these alerts under normal operations, like adjusting screen brightness via the keyboard. The alert level for these findings is classified as medium, indicating a need for investigations to ascertain the nature of these events further.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\scrcons.exe'\n        ImageLoaded|endswith:\n            - '\\vbscript.dll'\n            - '\\wbemdisp.dll'\n            - '\\wshom.ocx'\n            - '\\scrrun.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\scrcons.exe'\n        ImageLoaded|endswith:\n            - '\\vbscript.dll'\n            - '\\wbemdisp.dll'\n            - '\\wshom.ocx'\n            - '\\scrrun.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n",
      "question": "signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indciates WMI ActiveScriptEventConsumers EventConsumers activity.",
      "answer": "In order to detect signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indicate WMI ActiveScriptEventConsumers EventConsumers activity, you should monitor Windows image load events for instances where the \"scrcons.exe\" is involved alongside the loading of specific scripting Dynamic Link Libraries (DLLs). These libraries include 'vbscript.dll', 'wbemdisp.dll', 'wshom.ocx', and 'scrrun.dll'. The presence of these activities may signal the malicious use of Windows Management Instrumentation (WMI) for executing scripts, a technique often utilized by attackers for persistence, lateral movement, or information gathering. It is important to note that there may be legitimate uses of these DLLs, and certain devices, such as Dell computers, might trigger these alerts under normal operations, like adjusting screen brightness via the keyboard. The alert level for these findings is classified as medium, indicating a need for investigations to ascertain the nature of these events further."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries can migrate cobalt strike/metasploit/C2 beacons on compromised systems to legitimate werfault.exe process to avoid detection..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who migrate cobalt strike/metasploit/C2 beacons on compromised systems to legitimate werfault.exe processes to avoid detection, you should:\n\nMonitor network connections from Windows systems, specifically focusing on connections initiated by the werfault.exe process. This detection requires overlooking cases where the parent process of werfault.exe is svchost.exe to avoid common legitimate scenarios. Additionally, connections to certain IP addresses (such as '104.42.151.234', '104.43.193.48', and several others, including specific IPv6 addresses as well as broad IPv4 ranges like '10.*', '192.168.*', and '127.*') and domains (*.windowsupdate.com and *.microsoft.com) should be excluded to reduce the number of false positives, as these could represent legitimate communication or other corporate systems using IP addresses from public and Microsoft IP spaces. The focus is on identifying unusual or malicious network activity by werfault.exe that doesn't fall under these filtered conditions, indicating potential adversary tactics to migrate malicious payloads through this trusted Windows process. This strategy addresses various tactics and techniques commonly associated with command and control activities and initial access persistence by closely scrutinizing werfault.exe's network behavior and filtering out known good patterns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n  product: windows\n  category: network_connection\ndetection:\n  selection:\n    Image: 'werfault.exe'\n  filter1:\n    ParentImage: 'svchost.exe'\n  filter2:\n    DestinationIp:\n        - '104.42.151.234'\n        - '104.43.193.48'\n        - '52.255.188.83'\n        - '13.64.90.137'\n        - '168.61.161.212'\n        - '13.88.21.125'\n        - '40.88.32.150'\n        - '52.147.198.201'\n        - '52.239.207.100'\n        - '52.176.224.96'\n        - '2607:7700:0:24:0:1:287e:1894'\n        - '10.*'\n        - '192.168.*'\n        - '127.*'\n  filter3:\n    DestinationHostname|contains:\n        - '*.windowsupdate.com'\n        - '*.microsoft.com'\n  condition: selection and not ( filter1 and filter2 and filter3 )\nfalsepositives:\n    - Communication to other corporate systems that use IP addresses from public address spaces and Microsoft IP spaces\nlevel: medium",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n  product: windows\n  category: network_connection\ndetection:\n  selection:\n    Image: 'werfault.exe'\n  filter1:\n    ParentImage: 'svchost.exe'\n  filter2:\n    DestinationIp:\n        - '104.42.151.234'\n        - '104.43.193.48'\n        - '52.255.188.83'\n        - '13.64.90.137'\n        - '168.61.161.212'\n        - '13.88.21.125'\n        - '40.88.32.150'\n        - '52.147.198.201'\n        - '52.239.207.100'\n        - '52.176.224.96'\n        - '2607:7700:0:24:0:1:287e:1894'\n        - '10.*'\n        - '192.168.*'\n        - '127.*'\n  filter3:\n    DestinationHostname|contains:\n        - '*.windowsupdate.com'\n        - '*.microsoft.com'\n  condition: selection and not ( filter1 and filter2 and filter3 )\nfalsepositives:\n    - Communication to other corporate systems that use IP addresses from public address spaces and Microsoft IP spaces\nlevel: medium",
      "question": "Adversaries can migrate cobalt strike/metasploit/C2 beacons on compromised systems to legitimate werfault.exe process to avoid detection.",
      "answer": "In order to detect adversaries who migrate cobalt strike/metasploit/C2 beacons on compromised systems to legitimate werfault.exe processes to avoid detection, you should:\n\nMonitor network connections from Windows systems, specifically focusing on connections initiated by the werfault.exe process. This detection requires overlooking cases where the parent process of werfault.exe is svchost.exe to avoid common legitimate scenarios. Additionally, connections to certain IP addresses (such as '104.42.151.234', '104.43.193.48', and several others, including specific IPv6 addresses as well as broad IPv4 ranges like '10.*', '192.168.*', and '127.*') and domains (*.windowsupdate.com and *.microsoft.com) should be excluded to reduce the number of false positives, as these could represent legitimate communication or other corporate systems using IP addresses from public and Microsoft IP spaces. The focus is on identifying unusual or malicious network activity by werfault.exe that doesn't fall under these filtered conditions, indicating potential adversary tactics to migrate malicious payloads through this trusted Windows process. This strategy addresses various tactics and techniques commonly associated with command and control activities and initial access persistence by closely scrutinizing werfault.exe's network behavior and filtering out known good patterns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an Elastic Container Service (ECS) Task Definition includes a command to query the credential endpoint.\nThis can indicate a potential adversary adding a backdoor to establish persistence or escalate privileges.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an Elastic Container Service (ECS) Task Definition includes a command to query the credential endpoint, which can indicate a potential adversary adding a backdoor to establish persistence or escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look for logs where the `eventSource` is `ecs.amazonaws.com`, which means the activity is related to Elastic Container Services. The critical events to watch for include `DescribeTaskDefinition`, `RegisterTaskDefinition`, and `RunTask`. These events represent actions that query, register, or run task definitions within ECS.\n\nAn essential part of the detection is noticing when any `requestParameters.containerDefinitions.command` field contains the string `$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI`. This specific command is used to request credentials from the Task Metadata Service, which could be abused by attackers to gain access to AWS credentials.\n\nHowever, be aware of potential false positives, such as legitimate modifications to the task definition that include querying the credential endpoint for valid reasons. The threat level for this activity is considered medium, suggesting that while it's important to monitor for these indicators, they could occasionally represent legitimate usage. \n\nThis monitoring strategy is crucial for indentifying and mitigating unauthorized access or modifications to ECS Task Definitions that could lead to persistence or privilege escalation by adversaries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'ecs.amazonaws.com'\n        eventName:\n            - 'DescribeTaskDefinition'\n            - 'RegisterTaskDefinition'\n            - 'RunTask'\n        requestParameters.containerDefinitions.command|contains: '$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI'\n    condition: selection\nfalsepositives:\n    - Task Definition being modified to request credentials from the Task Metadata Service for valid reasons\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'ecs.amazonaws.com'\n        eventName:\n            - 'DescribeTaskDefinition'\n            - 'RegisterTaskDefinition'\n            - 'RunTask'\n        requestParameters.containerDefinitions.command|contains: '$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI'\n    condition: selection\nfalsepositives:\n    - Task Definition being modified to request credentials from the Task Metadata Service for valid reasons\nlevel: medium\n",
      "question": "when an Elastic Container Service (ECS) Task Definition includes a command to query the credential endpoint.\nThis can indicate a potential adversary adding a backdoor to establish persistence or escalate privileges.\n",
      "answer": "In order to detect when an Elastic Container Service (ECS) Task Definition includes a command to query the credential endpoint, which can indicate a potential adversary adding a backdoor to establish persistence or escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look for logs where the `eventSource` is `ecs.amazonaws.com`, which means the activity is related to Elastic Container Services. The critical events to watch for include `DescribeTaskDefinition`, `RegisterTaskDefinition`, and `RunTask`. These events represent actions that query, register, or run task definitions within ECS.\n\nAn essential part of the detection is noticing when any `requestParameters.containerDefinitions.command` field contains the string `$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI`. This specific command is used to request credentials from the Task Metadata Service, which could be abused by attackers to gain access to AWS credentials.\n\nHowever, be aware of potential false positives, such as legitimate modifications to the task definition that include querying the credential endpoint for valid reasons. The threat level for this activity is considered medium, suggesting that while it's important to monitor for these indicators, they could occasionally represent legitimate usage. \n\nThis monitoring strategy is crucial for indentifying and mitigating unauthorized access or modifications to ECS Task Definitions that could lead to persistence or privilege escalation by adversaries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"edputil.dll\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"edputil.dll\", you should focus on monitoring image load activities within Windows systems. Specifically, watch for instances where \"edputil.dll\" is loaded outside the standard Windows directories, which include \"C:\\Windows\\System32\\\", \"C:\\Windows\\SysWOW64\\\", and \"C\\Windows\\WinSxS\\\". This monitoring is achieved by examining if the loaded image's path ends with \"\\edputil.dll\" but does not start with any of the aforementioned trusted Windows paths. Such activities are often associated with malicious efforts to sideload DLLs, which can be a technique used by adversaries to execute arbitrary code or compromise systems. The likelihood of these observations being false positives is considered low, and the associated risk level is rated high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\edputil.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C\\Windows\\WinSxS\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\edputil.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C\\Windows\\WinSxS\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential DLL sideloading of \"edputil.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"edputil.dll\", you should focus on monitoring image load activities within Windows systems. Specifically, watch for instances where \"edputil.dll\" is loaded outside the standard Windows directories, which include \"C:\\Windows\\System32\\\", \"C:\\Windows\\SysWOW64\\\", and \"C\\Windows\\WinSxS\\\". This monitoring is achieved by examining if the loaded image's path ends with \"\\edputil.dll\" but does not start with any of the aforementioned trusted Windows paths. Such activities are often associated with malicious efforts to sideload DLLs, which can be a technique used by adversaries to execute arbitrary code or compromise systems. The likelihood of these observations being false positives is considered low, and the associated risk level is rated high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting loading of \"Amsi.dll\" by a living of the land process. This could be an indication of a \"PowerShell without PowerShell\" attack.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect loading of \"Amsi.dll\" by a living off the land process, which could be an indication of a \"PowerShell without PowerShell\" attack, you should monitor for the loading of the AMSI (Anti-Malware Scan Interface) DLL ('amsi.dll') by specific Windows processes that are typically used by adversaries to execute commands without directly invoking PowerShell. These processes include 'ExtExport.exe', 'odbcconf.exe', 'regsvr32.exe', and 'rundll32.exe'. Such activity should be closely monitored within the Windows environment, particularly in the context of image load events. Doing so is crucial because adversaries often leverage living off the land binaries (LOLBins) like these to bypass detection mechanisms and execute malicious commands. It's important to note, however, that due to the legitimate use of these processes and DLLs in various scenarios, some benign activities might be misidentified as malicious, though these occurrences are currently undefined ('Unknown' false positives). The detection of such an event is considered high severity, indicating the critical nature of this behavior in the context of an attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\amsi.dll'\n        Image|endswith:\n            - '\\ExtExport.exe'\n            - '\\odbcconf.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\amsi.dll'\n        Image|endswith:\n            - '\\ExtExport.exe'\n            - '\\odbcconf.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "loading of \"Amsi.dll\" by a living of the land process. This could be an indication of a \"PowerShell without PowerShell\" attack",
      "answer": "In order to detect loading of \"Amsi.dll\" by a living off the land process, which could be an indication of a \"PowerShell without PowerShell\" attack, you should monitor for the loading of the AMSI (Anti-Malware Scan Interface) DLL ('amsi.dll') by specific Windows processes that are typically used by adversaries to execute commands without directly invoking PowerShell. These processes include 'ExtExport.exe', 'odbcconf.exe', 'regsvr32.exe', and 'rundll32.exe'. Such activity should be closely monitored within the Windows environment, particularly in the context of image load events. Doing so is crucial because adversaries often leverage living off the land binaries (LOLBins) like these to bypass detection mechanisms and execute malicious commands. It's important to note, however, that due to the legitimate use of these processes and DLLs in various scenarios, some benign activities might be misidentified as malicious, though these occurrences are currently undefined ('Unknown' false positives). The detection of such an event is considered high severity, indicating the critical nature of this behavior in the context of an attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation or patching of potential malicious RoleBinding. This includes RoleBindings and ClusterRoleBinding..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation or patching of potential malicious RoleBinding, including RoleBindings and ClusterRoleBindings, you should monitor Google Cloud Platform (GCP) audit logs specifically for activities related to Kubernetes (k8s) authorization. Focus on records indicating creation, patching, updating, or deletion of ClusterRoleBindings and RoleBindings. The significant events to look out for include:\n\n- Creation (`create`) of `ClusterRoleBindings` and `RoleBindings`.\n- Patching (`patch`) of existing `ClusterRoleBindings` and `RoleBindings`.\n- Updating (`update`) of `ClusterRoleBindings` and `RoleBindings`.\n- Deletion (`delete`) of `ClusterRoleBindings` and `RoleBindings`.\n\nThese operations are part of the Kubernetes RBAC (Role-Based Access Control) and are identified in the audit logs via method names such as `io.k8s.authorization.rbac.v*.clusterrolebindings.create` for creating ClusterRoleBindings, with variations corresponding to role bindings creation, patching, updating, and deletion. The `v*` in the method name indicates that this detection covers multiple versions of Kubernetes interfaces.\n\nThe log source for this activity is the GCP audit log (`gcp.audit`), indicating that monitoring should be focused on the audit logs provided by Google Cloud Platform services.\n\nFalse positives might occur, especially if the actions being monitored are part of regular administrative tasks. For instance, a system administrator might legitimately modify RoleBindings or ClusterRoleBindings as part of their duties. It's essential to verify the identity of the user, the user agent, and/or hostname making these changes to determine if they should indeed be making changes in your environment. Modifications or deletions by unfamiliar users should be investigated further. Known behavior causing false positives can be exempted to refine detection accuracy.\n\nThis detection strategy maps to specific MITRE ATT&CK tactics and techniques, primarily related to privilege escalation and persistence by exploiting the Kubernetes environment.\n\nThrough vigilant monitoring of these specific events and careful consideration of the context in which they occur, it is possible to identify potentially malicious activities related to RoleBindings and ClusterRoleBindings, which could indicate attempts at privilege escalation or maintaining unauthorized access within a Kubernetes cluster.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name:\n            - io.k8s.authorization.rbac.v*.clusterrolebindings.create\n            - io.k8s.authorization.rbac.v*.rolebindings.create\n            - io.k8s.authorization.rbac.v*.clusterrolebindings.patch\n            - io.k8s.authorization.rbac.v*.rolebindings.patch\n            - io.k8s.authorization.rbac.v*.clusterrolebindings.update\n            - io.k8s.authorization.rbac.v*.rolebindings.update\n            - io.k8s.authorization.rbac.v*.clusterrolebindings.delete\n            - io.k8s.authorization.rbac.v*.rolebindings.delete\n    condition: selection\nfalsepositives:\n    - RoleBindings and ClusterRoleBinding being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - RoleBindings and ClusterRoleBinding modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name:\n            - io.k8s.authorization.rbac.v*.clusterrolebindings.create\n            - io.k8s.authorization.rbac.v*.rolebindings.create\n            - io.k8s.authorization.rbac.v*.clusterrolebindings.patch\n            - io.k8s.authorization.rbac.v*.rolebindings.patch\n            - io.k8s.authorization.rbac.v*.clusterrolebindings.update\n            - io.k8s.authorization.rbac.v*.rolebindings.update\n            - io.k8s.authorization.rbac.v*.clusterrolebindings.delete\n            - io.k8s.authorization.rbac.v*.rolebindings.delete\n    condition: selection\nfalsepositives:\n    - RoleBindings and ClusterRoleBinding being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - RoleBindings and ClusterRoleBinding modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "creation or patching of potential malicious RoleBinding. This includes RoleBindings and ClusterRoleBinding.",
      "answer": "In order to detect the creation or patching of potential malicious RoleBinding, including RoleBindings and ClusterRoleBindings, you should monitor Google Cloud Platform (GCP) audit logs specifically for activities related to Kubernetes (k8s) authorization. Focus on records indicating creation, patching, updating, or deletion of ClusterRoleBindings and RoleBindings. The significant events to look out for include:\n\n- Creation (`create`) of `ClusterRoleBindings` and `RoleBindings`.\n- Patching (`patch`) of existing `ClusterRoleBindings` and `RoleBindings`.\n- Updating (`update`) of `ClusterRoleBindings` and `RoleBindings`.\n- Deletion (`delete`) of `ClusterRoleBindings` and `RoleBindings`.\n\nThese operations are part of the Kubernetes RBAC (Role-Based Access Control) and are identified in the audit logs via method names such as `io.k8s.authorization.rbac.v*.clusterrolebindings.create` for creating ClusterRoleBindings, with variations corresponding to role bindings creation, patching, updating, and deletion. The `v*` in the method name indicates that this detection covers multiple versions of Kubernetes interfaces.\n\nThe log source for this activity is the GCP audit log (`gcp.audit`), indicating that monitoring should be focused on the audit logs provided by Google Cloud Platform services.\n\nFalse positives might occur, especially if the actions being monitored are part of regular administrative tasks. For instance, a system administrator might legitimately modify RoleBindings or ClusterRoleBindings as part of their duties. It's essential to verify the identity of the user, the user agent, and/or hostname making these changes to determine if they should indeed be making changes in your environment. Modifications or deletions by unfamiliar users should be investigated further. Known behavior causing false positives can be exempted to refine detection accuracy.\n\nThis detection strategy maps to specific MITRE ATT&CK tactics and techniques, primarily related to privilege escalation and persistence by exploiting the Kubernetes environment.\n\nThrough vigilant monitoring of these specific events and careful consideration of the context in which they occur, it is possible to identify potentially malicious activities related to RoleBindings and ClusterRoleBindings, which could indicate attempts at privilege escalation or maintaining unauthorized access within a Kubernetes cluster."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via RUNDLL LAUNCHER.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should:\nMonitor Windows process creation logs for instances where the command line contains specific sequences indicative of an obfuscation tactic. It involves looking for the invocation of 'rundll32.exe' along with 'shell32.dll', 'shellexec_rundll', and 'powershell'. When these elements are detected together in the command line arguments, it serves as an indicator of an attempt to obfuscate PowerShell scripts via a rundll32 launcher. This detection mechanism hinges on PowerShell being launched in a way that is less straightforward to interpret, possibly to evade detection tools or for stealthier execution of potentially malicious scripts. It's vital to note that some legitimate applications may use similar command lines, leading to potential false positives, hence the importance of contextual evaluation of each incident flagged under this criterion. This detection falls under a medium alert level due to its association with techniques employed for stealthy executions and obfuscation, commonly linked with tactics such as execution and defense evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should:\nMonitor Windows process creation logs for instances where the command line contains specific sequences indicative of an obfuscation tactic. It involves looking for the invocation of 'rundll32.exe' along with 'shell32.dll', 'shellexec_rundll', and 'powershell'. When these elements are detected together in the command line arguments, it serves as an indicator of an attempt to obfuscate PowerShell scripts via a rundll32 launcher. This detection mechanism hinges on PowerShell being launched in a way that is less straightforward to interpret, possibly to evade detection tools or for stealthier execution of potentially malicious scripts. It's vital to note that some legitimate applications may use similar command lines, leading to potential false positives, hence the importance of contextual evaluation of each incident flagged under this criterion. This detection falls under a medium alert level due to its association with techniques employed for stealthy executions and obfuscation, commonly linked with tactics such as execution and defense evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of the bcdedit command to tamper with the boot configuration data. This technique is often times used by malware or attackers as a destructive way before launching ransomware..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the bcdedit command to tamper with the boot configuration data, a technique often used by malware or attackers as a destructive way before launching ransomware, you should: focus on monitoring process creation logs within Windows systems. Specifically, look for instances where the process image ends with '\\bcdedit.exe' or the OriginalFileName is identified as 'bcdedit.exe'. Pay close attention to the command line arguments. If the command line includes 'set' in combination with either 'bootstatuspolicy' and 'ignoreallfailures' or 'recoveryenabled' and 'no', this indicates a potential tampering with the boot configuration data. Monitoring these activities can help in identifying attempts to disable recovery options or set the system to ignore boot errors, which are typical precursors to ransomware attacks. It's important to capture the ComputerName, User, and CommandLine involved in these processes to aid in further investigation. The likelihood of false positives is considered low, suggesting a high confidence level in the detection of this specific activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bcdedit.exe'\n        - OriginalFileName: 'bcdedit.exe'\n    selection_set:\n        CommandLine|contains: 'set'\n    selection_cli:\n        - CommandLine|contains|all:\n            - 'bootstatuspolicy'\n            - 'ignoreallfailures'\n        - CommandLine|contains|all:\n            - 'recoveryenabled'\n            - 'no'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bcdedit.exe'\n        - OriginalFileName: 'bcdedit.exe'\n    selection_set:\n        CommandLine|contains: 'set'\n    selection_cli:\n        - CommandLine|contains|all:\n            - 'bootstatuspolicy'\n            - 'ignoreallfailures'\n        - CommandLine|contains|all:\n            - 'recoveryenabled'\n            - 'no'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "use of the bcdedit command to tamper with the boot configuration data. This technique is often times used by malware or attackers as a destructive way before launching ransomware.",
      "answer": "In order to detect the use of the bcdedit command to tamper with the boot configuration data, a technique often used by malware or attackers as a destructive way before launching ransomware, you should: focus on monitoring process creation logs within Windows systems. Specifically, look for instances where the process image ends with '\\bcdedit.exe' or the OriginalFileName is identified as 'bcdedit.exe'. Pay close attention to the command line arguments. If the command line includes 'set' in combination with either 'bootstatuspolicy' and 'ignoreallfailures' or 'recoveryenabled' and 'no', this indicates a potential tampering with the boot configuration data. Monitoring these activities can help in identifying attempts to disable recovery options or set the system to ignore boot errors, which are typical precursors to ransomware attacks. It's important to capture the ComputerName, User, and CommandLine involved in these processes to aid in further investigation. The likelihood of false positives is considered low, suggesting a high confidence level in the detection of this specific activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect browsers starting with the remote debugging flags, which is a technique often used to perform browser injection attacks, you should:\n\nMonitor the process creation logs on Windows operating systems for specific command line parameters that indicate a browser (such as Chromium-based browsers or Firefox) is being started with remote debugging enabled. Look for Chromium-based browsers being launched with any command line argument that includes '--remote-debugging-', which covers flags related to remote debugging addresses, ports, socket names, and debugging pipes among others. Additionally, for Firefox, pay attention to processes where the image path ends with '\\firefox.exe' and the command line includes '-start-debugger-server'. Detection relies on identifying at least one of these conditions being true. Be aware of potential unknown false positives, and assess the detected activities with a medium level of scrutiny.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_chromium_based:\n        # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n        CommandLine|contains: ' --remote-debugging-'\n    selection_firefox:\n        Image|endswith: '\\firefox.exe'\n        CommandLine|contains: ' -start-debugger-server'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_chromium_based:\n        # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n        CommandLine|contains: ' --remote-debugging-'\n    selection_firefox:\n        Image|endswith: '\\firefox.exe'\n        CommandLine|contains: ' -start-debugger-server'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks",
      "answer": "In order to detect browsers starting with the remote debugging flags, which is a technique often used to perform browser injection attacks, you should:\n\nMonitor the process creation logs on Windows operating systems for specific command line parameters that indicate a browser (such as Chromium-based browsers or Firefox) is being started with remote debugging enabled. Look for Chromium-based browsers being launched with any command line argument that includes '--remote-debugging-', which covers flags related to remote debugging addresses, ports, socket names, and debugging pipes among others. Additionally, for Firefox, pay attention to processes where the image path ends with '\\firefox.exe' and the command line includes '-start-debugger-server'. Detection relies on identifying at least one of these conditions being true. Be aware of potential unknown false positives, and assess the detected activities with a medium level of scrutiny."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps, you should: Monitor the creation of processes on Windows systems for command lines that contain specific strings, which could indicate an attempt to search for or manipulate JWT tokens associated with Office applications or similar software. The targeted strings to watch for in the command line inputs include 'eyJ0eXAiOi', ' eyJ0eX', ' \"eyJ0eX\"', and \" 'eyJ0eX'\". These strings are part of the structure of JWT tokens and their presence in command lines could signify malicious attempts to interact with these tokens. The detection of such actions is of medium level importance and should be further analyzed, although it's acknowledged that some legitimate actions might be mistakenly identified (false positives are unknown).",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'eyJ0eXAiOi' # {\"typ\":\n            - ' eyJ0eX'\n            - ' \"eyJ0eX\"'\n            - \" 'eyJ0eX'\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'eyJ0eXAiOi' # {\"typ\":\n            - ' eyJ0eX'\n            - ' \"eyJ0eX\"'\n            - \" 'eyJ0eX'\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps.",
      "answer": "In order to detect possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps, you should: Monitor the creation of processes on Windows systems for command lines that contain specific strings, which could indicate an attempt to search for or manipulate JWT tokens associated with Office applications or similar software. The targeted strings to watch for in the command line inputs include 'eyJ0eXAiOi', ' eyJ0eX', ' \"eyJ0eX\"', and \" 'eyJ0eX'\". These strings are part of the structure of JWT tokens and their presence in command lines could signify malicious attempts to interact with these tokens. The detection of such actions is of medium level importance and should be further analyzed, although it's acknowledged that some legitimate actions might be mistakenly identified (false positives are unknown)."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of wsudo (Windows Sudo Utility), which is a tool that lets the user execute programs with different permissions (System, Trusted Installer, Administrator, etc), you should focus on monitoring process creation logs within Windows environments. Specifically, you should look for instances where a process named 'wsudo.exe' is created, as indicated by either the image name ending with '\\wsudo.exe' or having an original file name of 'wsudo.exe'. Additionally, when the description of the process explicitly mentions 'Windows sudo utility', or when the parent image of the process ends with '\\wsudo-bridge.exe', these are key indicators of wsudo usage.\n\nMoreover, the command lines associated with these processes should be scrutinized for specific flags that denote elevation of privilege or execution as a particular user type. Command-line arguments to watch for include '-u System', '-uSystem', '-u TrustedInstaller', '-uTrustedInstaller', or the presence of ' --ti ', as these indicate attempts to execute programs with elevated permissions or as specific system-level users.\n\nGiven the potential for this tool to be used in both legitimate and malicious contexts, there are not many known false positives; however, any unexpected or unauthorized use of wsudo within a Windows environment should be considered suspicious, especially at a high alert level. Identifying such activity revolves around the close examination of process creation logs, command-line arguments, and the relationship between parent and child processes related to wsudo activity. Monitoring for these specific indicators helps in promptly detecting and responding to unauthorized or malicious use of the Windows sudo utility, thereby mitigating the risks associated with privilege escalation and system compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\wsudo.exe'\n        - OriginalFileName: 'wsudo.exe'\n        - Description: 'Windows sudo utility'\n        - ParentImage|endswith: '\\wsudo-bridge.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-u System'\n            - '-uSystem'\n            - '-u TrustedInstaller'\n            - '-uTrustedInstaller'\n            - ' --ti '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\wsudo.exe'\n        - OriginalFileName: 'wsudo.exe'\n        - Description: 'Windows sudo utility'\n        - ParentImage|endswith: '\\wsudo-bridge.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-u System'\n            - '-uSystem'\n            - '-u TrustedInstaller'\n            - '-uTrustedInstaller'\n            - ' --ti '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc)",
      "answer": "In order to detect usage of wsudo (Windows Sudo Utility), which is a tool that lets the user execute programs with different permissions (System, Trusted Installer, Administrator, etc), you should focus on monitoring process creation logs within Windows environments. Specifically, you should look for instances where a process named 'wsudo.exe' is created, as indicated by either the image name ending with '\\wsudo.exe' or having an original file name of 'wsudo.exe'. Additionally, when the description of the process explicitly mentions 'Windows sudo utility', or when the parent image of the process ends with '\\wsudo-bridge.exe', these are key indicators of wsudo usage.\n\nMoreover, the command lines associated with these processes should be scrutinized for specific flags that denote elevation of privilege or execution as a particular user type. Command-line arguments to watch for include '-u System', '-uSystem', '-u TrustedInstaller', '-uTrustedInstaller', or the presence of ' --ti ', as these indicate attempts to execute programs with elevated permissions or as specific system-level users.\n\nGiven the potential for this tool to be used in both legitimate and malicious contexts, there are not many known false positives; however, any unexpected or unauthorized use of wsudo within a Windows environment should be considered suspicious, especially at a high alert level. Identifying such activity revolves around the close examination of process creation logs, command-line arguments, and the relationship between parent and child processes related to wsudo activity. Monitoring for these specific indicators helps in promptly detecting and responding to unauthorized or malicious use of the Windows sudo utility, thereby mitigating the risks associated with privilege escalation and system compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Cobalt Strike module/commands accidentally entered in CMD shell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Cobalt Strike module/commands accidentally entered in CMD shell, you should focus on monitoring Windows process creation logs for specific patterns that indicate the execution of these modules or commands. Look for processes that have been initiated from 'Cmd.Exe' or any process that ends with '\\cmd.exe' as part of their file path. Additionally, pay close attention to the command line arguments of these processes. If you notice any of the following command strings: 'Invoke-UserHunter', 'Invoke-ShareFinder', 'Invoke-Kerberoast', 'Invoke-SMBAutoBrute', 'Invoke-Nightmare', 'zerologon', or 'av_query', it's indicative of Cobalt Strike activity. This detection mechanism requires both conditions to be met, meaning that a process must originate from the command shell and include one of the specified malicious command line arguments. Due to the nature of these commands and their association with Cobalt Strike, this detection is flagged with a high level of confidence, although you should consider that there might be scenarios where these commands could be used in a benign context, although such cases are unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'Cmd.Exe'\n        - Image|endswith: '\\cmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'Invoke-UserHunter'\n            - 'Invoke-ShareFinder'\n            - 'Invoke-Kerberoast'\n            - 'Invoke-SMBAutoBrute'\n            - 'Invoke-Nightmare'\n            - 'zerologon'\n            - 'av_query'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'Cmd.Exe'\n        - Image|endswith: '\\cmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'Invoke-UserHunter'\n            - 'Invoke-ShareFinder'\n            - 'Invoke-Kerberoast'\n            - 'Invoke-SMBAutoBrute'\n            - 'Invoke-Nightmare'\n            - 'zerologon'\n            - 'av_query'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Cobalt Strike module/commands accidentally entered in CMD shell",
      "answer": "In order to detect Cobalt Strike module/commands accidentally entered in CMD shell, you should focus on monitoring Windows process creation logs for specific patterns that indicate the execution of these modules or commands. Look for processes that have been initiated from 'Cmd.Exe' or any process that ends with '\\cmd.exe' as part of their file path. Additionally, pay close attention to the command line arguments of these processes. If you notice any of the following command strings: 'Invoke-UserHunter', 'Invoke-ShareFinder', 'Invoke-Kerberoast', 'Invoke-SMBAutoBrute', 'Invoke-Nightmare', 'zerologon', or 'av_query', it's indicative of Cobalt Strike activity. This detection mechanism requires both conditions to be met, meaning that a process must originate from the command shell and include one of the specified malicious command line arguments. Due to the nature of these commands and their association with Cobalt Strike, this detection is flagged with a high level of confidence, although you should consider that there might be scenarios where these commands could be used in a benign context, although such cases are unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting update to a scheduled task event that contain suspicious keywords..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect updates to a scheduled task event that contain suspicious keywords, you should monitor security logs generated by the Windows operating system, specifically focusing on the security service logs. The detection relies on having the Advanced Audit Policy configured to audit Other Object Access Events. This configuration is essential for identifying potential security threats related to scheduled task modifications.\n\nLook for event ID 4702, which signifies updates made to scheduled tasks. The modification details in these events are critical for analysis. Pay special attention to tasks that have been updated to include paths commonly associated with temporary or commonly exploited directories, such as \"\\AppData\\Local\\Temp\\\", \"\\AppData\\Roaming\\\", \"\\Users\\Public\\\", \"\\WINDOWS\\Temp\\\", \"C:\\Temp\\\", \"\\Desktop\\\", \"\\Downloads\\\", \"\\Temporary Internet Files\\\", \"C:\\ProgramData\\\", and \"C:\\Perflogs\\\". These paths are often used by attackers to execute malicious scripts or programs without drawing attention.\n\nAdditionally, analyze the commands associated with the updated tasks. Suspicious commands include but are not limited to \"regsvr32\", \"rundll32\", \"cmd.exe\", \"powershell\", \"pwsh\", \"mshta\", \"wscript\", \"cscript\", \"certutil\", \"bitsadmin\", \"bash.exe\", \"scrcons\", \"wmic\", \"forfiles\", \"scriptrunner\", and \"hh.exe\". These commands are commonly utilized in various attack techniques to execute scripts, manipulate processes, or download and run malicious payloads.\n\nThe detection of such activities in scheduled task updates is associated with several tactics and techniques, including Execution, Persistence, Privilege Escalation, and Defense Evasion. Identifying these modifications and command executions in the specified paths can be indicative of malicious activities attempting to gain a foothold, maintain persistence, escalate privileges, or evade detection mechanisms within a network.\n\nIt's important to exercise caution and thoroughly investigate these detections, as there can be unknown false positives due to legitimate administrative tasks that may use similar methods for valid purposes. The level of threat associated with these findings is considered high, emphasizing the importance of prompt and detailed investigation to prevent potential security breaches or system compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The Advanced Audit Policy setting Object Access > Audit Other Object Access Events has to be configured to allow this detection. We also recommend extracting the Command field from the embedded XML in the event data.'\ndetection:\n    selection_eid:\n        EventID: 4702\n    selection_paths:\n        TaskContentNew|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Users\\Public\\'\n            - '\\WINDOWS\\Temp\\'\n            - 'C:\\Temp\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Temporary Internet'\n            - 'C:\\ProgramData\\'\n            - 'C:\\Perflogs\\'\n    selection_commands:\n        TaskContentNew|contains:\n            - 'regsvr32'\n            - 'rundll32'\n            - 'cmd.exe</Command>'\n            - 'cmd</Command>'\n            - '<Arguments>/c '\n            - '<Arguments>/k '\n            - '<Arguments>/r '\n            - 'powershell'\n            - 'pwsh'\n            - 'mshta'\n            - 'wscript'\n            - 'cscript'\n            - 'certutil'\n            - 'bitsadmin'\n            - 'bash.exe'\n            - 'bash '\n            - 'scrcons'\n            - 'wmic '\n            - 'wmic.exe'\n            - 'forfiles'\n            - 'scriptrunner'\n            - 'hh.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The Advanced Audit Policy setting Object Access > Audit Other Object Access Events has to be configured to allow this detection. We also recommend extracting the Command field from the embedded XML in the event data.'\ndetection:\n    selection_eid:\n        EventID: 4702\n    selection_paths:\n        TaskContentNew|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Users\\Public\\'\n            - '\\WINDOWS\\Temp\\'\n            - 'C:\\Temp\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Temporary Internet'\n            - 'C:\\ProgramData\\'\n            - 'C:\\Perflogs\\'\n    selection_commands:\n        TaskContentNew|contains:\n            - 'regsvr32'\n            - 'rundll32'\n            - 'cmd.exe</Command>'\n            - 'cmd</Command>'\n            - '<Arguments>/c '\n            - '<Arguments>/k '\n            - '<Arguments>/r '\n            - 'powershell'\n            - 'pwsh'\n            - 'mshta'\n            - 'wscript'\n            - 'cscript'\n            - 'certutil'\n            - 'bitsadmin'\n            - 'bash.exe'\n            - 'bash '\n            - 'scrcons'\n            - 'wmic '\n            - 'wmic.exe'\n            - 'forfiles'\n            - 'scriptrunner'\n            - 'hh.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "update to a scheduled task event that contain suspicious keywords.",
      "answer": "In order to detect updates to a scheduled task event that contain suspicious keywords, you should monitor security logs generated by the Windows operating system, specifically focusing on the security service logs. The detection relies on having the Advanced Audit Policy configured to audit Other Object Access Events. This configuration is essential for identifying potential security threats related to scheduled task modifications.\n\nLook for event ID 4702, which signifies updates made to scheduled tasks. The modification details in these events are critical for analysis. Pay special attention to tasks that have been updated to include paths commonly associated with temporary or commonly exploited directories, such as \"\\AppData\\Local\\Temp\\\", \"\\AppData\\Roaming\\\", \"\\Users\\Public\\\", \"\\WINDOWS\\Temp\\\", \"C:\\Temp\\\", \"\\Desktop\\\", \"\\Downloads\\\", \"\\Temporary Internet Files\\\", \"C:\\ProgramData\\\", and \"C:\\Perflogs\\\". These paths are often used by attackers to execute malicious scripts or programs without drawing attention.\n\nAdditionally, analyze the commands associated with the updated tasks. Suspicious commands include but are not limited to \"regsvr32\", \"rundll32\", \"cmd.exe\", \"powershell\", \"pwsh\", \"mshta\", \"wscript\", \"cscript\", \"certutil\", \"bitsadmin\", \"bash.exe\", \"scrcons\", \"wmic\", \"forfiles\", \"scriptrunner\", and \"hh.exe\". These commands are commonly utilized in various attack techniques to execute scripts, manipulate processes, or download and run malicious payloads.\n\nThe detection of such activities in scheduled task updates is associated with several tactics and techniques, including Execution, Persistence, Privilege Escalation, and Defense Evasion. Identifying these modifications and command executions in the specified paths can be indicative of malicious activities attempting to gain a foothold, maintain persistence, escalate privileges, or evade detection mechanisms within a network.\n\nIt's important to exercise caution and thoroughly investigate these detections, as there can be unknown false positives due to legitimate administrative tasks that may use similar methods for valid purposes. The level of threat associated with these findings is considered high, emphasizing the importance of prompt and detailed investigation to prevent potential security breaches or system compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options, and other low-level stuff, you should monitor Windows process creation logs for instances where processes match specific patterns indicating the use of PCHunter. Look for processes that have been created with the image names ending in '\\PCHunter64.exe' or '\\PCHunter32.exe'. Additionally, pay attention to processes that contain certain properties, such as files named 'PCHunter.exe' or those described as 'Epoolsoft Windows Information View Tools'. Moreover, it is critical to scrutinize processes with specific hash values, which include a variety of SHA1, MD5, SHA256, and IMPHASH identifiers such as '5F1CBC3D99558307BC1250D084FA968521482025', '987B65CD9B9F4E9A1AFD8F8B48CF64A7', '2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32', among others listed. These characteristics strongly indicate the execution or manipulation of processes using the PCHunter tool, which can be an essential part of diagnosing or intervening in potentially malicious activity aimed at manipulating system processes or obtaining sensitive information at a low level. It is important to note that false positives are unlikely, indicating that detection of these specific patterns should be treated with high priority and investigated accordingly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_image:\n        Image|endswith:\n            - '\\PCHunter64.exe'\n            - '\\PCHunter32.exe'\n    selection_pe:\n        - OriginalFileName: 'PCHunter.exe'\n        - Description: 'Epoolsoft Windows Information View Tools'\n    selection_hashes:\n        Hashes|contains:\n            - 'SHA1=5F1CBC3D99558307BC1250D084FA968521482025'\n            - 'MD5=987B65CD9B9F4E9A1AFD8F8B48CF64A7'\n            - 'SHA256=2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32'\n            - 'IMPHASH=444D210CEA1FF8112F256A4997EED7FF'\n            - 'SHA1=3FB89787CB97D902780DA080545584D97FB1C2EB'\n            - 'MD5=228DD0C2E6287547E26FFBD973A40F14'\n            - 'SHA256=55F041BF4E78E9BFA6D4EE68BE40E496CE3A1353E1CA4306598589E19802522C'\n            - 'IMPHASH=0479F44DF47CFA2EF1CCC4416A538663'\n    selection_hash_values:\n        - md5:\n            - '228dd0c2e6287547e26ffbd973a40f14'\n            - '987b65cd9b9f4e9a1afd8f8b48cf64a7'\n        - sha1:\n            - '5f1cbc3d99558307bc1250d084fa968521482025'\n            - '3fb89787cb97d902780da080545584d97fb1c2eb'\n        - sha256:\n            - '2b214bddaab130c274de6204af6dba5aeec7433da99aa950022fa306421a6d32'\n            - '55f041bf4e78e9bfa6d4ee68be40e496ce3a1353e1ca4306598589e19802522c'\n        - Imphash:\n            - '444d210cea1ff8112f256a4997eed7ff'\n            - '0479f44df47cfa2ef1ccc4416a538663'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_image:\n        Image|endswith:\n            - '\\PCHunter64.exe'\n            - '\\PCHunter32.exe'\n    selection_pe:\n        - OriginalFileName: 'PCHunter.exe'\n        - Description: 'Epoolsoft Windows Information View Tools'\n    selection_hashes:\n        Hashes|contains:\n            - 'SHA1=5F1CBC3D99558307BC1250D084FA968521482025'\n            - 'MD5=987B65CD9B9F4E9A1AFD8F8B48CF64A7'\n            - 'SHA256=2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32'\n            - 'IMPHASH=444D210CEA1FF8112F256A4997EED7FF'\n            - 'SHA1=3FB89787CB97D902780DA080545584D97FB1C2EB'\n            - 'MD5=228DD0C2E6287547E26FFBD973A40F14'\n            - 'SHA256=55F041BF4E78E9BFA6D4EE68BE40E496CE3A1353E1CA4306598589E19802522C'\n            - 'IMPHASH=0479F44DF47CFA2EF1CCC4416A538663'\n    selection_hash_values:\n        - md5:\n            - '228dd0c2e6287547e26ffbd973a40f14'\n            - '987b65cd9b9f4e9a1afd8f8b48cf64a7'\n        - sha1:\n            - '5f1cbc3d99558307bc1250d084fa968521482025'\n            - '3fb89787cb97d902780da080545584d97fb1c2eb'\n        - sha256:\n            - '2b214bddaab130c274de6204af6dba5aeec7433da99aa950022fa306421a6d32'\n            - '55f041bf4e78e9bfa6d4ee68be40e496ce3a1353e1ca4306598589e19802522c'\n        - Imphash:\n            - '444d210cea1ff8112f256a4997eed7ff'\n            - '0479f44df47cfa2ef1ccc4416a538663'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff",
      "answer": "In order to detect suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options, and other low-level stuff, you should monitor Windows process creation logs for instances where processes match specific patterns indicating the use of PCHunter. Look for processes that have been created with the image names ending in '\\PCHunter64.exe' or '\\PCHunter32.exe'. Additionally, pay attention to processes that contain certain properties, such as files named 'PCHunter.exe' or those described as 'Epoolsoft Windows Information View Tools'. Moreover, it is critical to scrutinize processes with specific hash values, which include a variety of SHA1, MD5, SHA256, and IMPHASH identifiers such as '5F1CBC3D99558307BC1250D084FA968521482025', '987B65CD9B9F4E9A1AFD8F8B48CF64A7', '2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32', among others listed. These characteristics strongly indicate the execution or manipulation of processes using the PCHunter tool, which can be an essential part of diagnosing or intervening in potentially malicious activity aimed at manipulating system processes or obtaining sensitive information at a low level. It is important to note that false positives are unlikely, indicating that detection of these specific patterns should be treated with high priority and investigated accordingly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of certutil with certain flags that allow the utility to download files from direct IPs..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of certutil with certain flags that allow the utility to download files from direct IPs, you should monitor the creation of processes on Windows systems. Specifically, look for instances where the process image ends with '\\certutil.exe' or has an original filename of 'CertUtil.exe'. Additionally, watch for command lines that contain flags such as 'urlcache ' or 'verifyctl ', which are indicative of certutil being used for file manipulation or certificate verification tasks. Moreover, it's important to scrutinize any command line that includes direct IP addresses, signified by '://1' through '://9', as these could signal an attempt to download files directly using IPs, bypassing typical DNS resolution methods. However, be cautious of command lines that contain '://7-', as this might refer to legitimate usage related to the 7-zip utility, and thus, should be excluded to reduce false positives. This approach targets the identification of potential misuse of certutil for suspicious file download activities, aligning with defense tactics against Execution and Command and Control techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains:\n            - '://1'\n            - '://2'\n            - '://3'\n            - '://4'\n            - '://5'\n            - '://6'\n            - '://7'\n            - '://8'\n            - '://9'\n    #filter_local_ips:\n    #    # Note: Uncomment this filter if you want to exclude local IPs\n    #    CommandLine|contains:\n    #        - '://10.' #10.0.0.0/8\n    #        - '://192.168.' #192.168.0.0/16\n    #        - '://172.16.' #172.16.0.0/12\n    #        - '://172.17.'\n    #        - '://172.18.'\n    #        - '://172.19.'\n    #        - '://172.20.'\n    #        - '://172.21.'\n    #        - '://172.22.'\n    #        - '://172.23.'\n    #        - '://172.24.'\n    #        - '://172.25.'\n    #        - '://172.26.'\n    #        - '://172.27.'\n    #        - '://172.28.'\n    #        - '://172.29.'\n    #        - '://172.30.'\n    #        - '://172.31.'\n    #        - '://127.' #127.0.0.0/8\n    #        - '://169.254.' #169.254.0.0/16\n    filter_seven_zip:\n        CommandLine|contains: '://7-' # For https://7-zip.org/\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains:\n            - '://1'\n            - '://2'\n            - '://3'\n            - '://4'\n            - '://5'\n            - '://6'\n            - '://7'\n            - '://8'\n            - '://9'\n    #filter_local_ips:\n    #    # Note: Uncomment this filter if you want to exclude local IPs\n    #    CommandLine|contains:\n    #        - '://10.' #10.0.0.0/8\n    #        - '://192.168.' #192.168.0.0/16\n    #        - '://172.16.' #172.16.0.0/12\n    #        - '://172.17.'\n    #        - '://172.18.'\n    #        - '://172.19.'\n    #        - '://172.20.'\n    #        - '://172.21.'\n    #        - '://172.22.'\n    #        - '://172.23.'\n    #        - '://172.24.'\n    #        - '://172.25.'\n    #        - '://172.26.'\n    #        - '://172.27.'\n    #        - '://172.28.'\n    #        - '://172.29.'\n    #        - '://172.30.'\n    #        - '://172.31.'\n    #        - '://127.' #127.0.0.0/8\n    #        - '://169.254.' #169.254.0.0/16\n    filter_seven_zip:\n        CommandLine|contains: '://7-' # For https://7-zip.org/\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of certutil with certain flags that allow the utility to download files from direct IPs.",
      "answer": "In order to detect the execution of certutil with certain flags that allow the utility to download files from direct IPs, you should monitor the creation of processes on Windows systems. Specifically, look for instances where the process image ends with '\\certutil.exe' or has an original filename of 'CertUtil.exe'. Additionally, watch for command lines that contain flags such as 'urlcache ' or 'verifyctl ', which are indicative of certutil being used for file manipulation or certificate verification tasks. Moreover, it's important to scrutinize any command line that includes direct IP addresses, signified by '://1' through '://9', as these could signal an attempt to download files directly using IPs, bypassing typical DNS resolution methods. However, be cautious of command lines that contain '://7-', as this might refer to legitimate usage related to the 7-zip utility, and thus, should be excluded to reduce false positives. This approach targets the identification of potential misuse of certutil for suspicious file download activities, aligning with defense tactics against Execution and Command and Control techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting code page switch in command line or batch scripts to a rare language.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a code page switch in command line or batch scripts to a rare language, you should: Monitor Windows process creation logs for executions of 'chcp.com' where the command line ends with arguments indicating a switch to less commonly used code pages, specifically Chinese ('936') or Vietnamese ('1258'). It's essential to track the parent command line that initiated this process as it might provide context or evidence of malicious intent. Be aware that while this detection aims to spot unusual activity potentially indicative of an attacker trying to evade detection by leveraging uncommon character sets, legitimate administrative activities may also trigger this alert if code page changes are part of normal operations for users who work with these languages. It's categorized at a medium level of importance, suggesting that while not all detections will be malicious, they warrant investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\chcp.com'\n        CommandLine|endswith:\n            - ' 936'    # Chinese\n            # - ' 1256' # Arabic\n            - ' 1258'   # Vietnamese\n            # - ' 855'  # Russian\n            # - ' 866'  # Russian\n            # - ' 864'  # Arabic\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity (adjust code pages according to your organization's region)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\chcp.com'\n        CommandLine|endswith:\n            - ' 936'    # Chinese\n            # - ' 1256' # Arabic\n            - ' 1258'   # Vietnamese\n            # - ' 855'  # Russian\n            # - ' 866'  # Russian\n            # - ' 864'  # Arabic\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity (adjust code pages according to your organization's region)\nlevel: medium\n",
      "question": "code page switch in command line or batch scripts to a rare language",
      "answer": "In order to detect a code page switch in command line or batch scripts to a rare language, you should: Monitor Windows process creation logs for executions of 'chcp.com' where the command line ends with arguments indicating a switch to less commonly used code pages, specifically Chinese ('936') or Vietnamese ('1258'). It's essential to track the parent command line that initiated this process as it might provide context or evidence of malicious intent. Be aware that while this detection aims to spot unusual activity potentially indicative of an attacker trying to evade detection by leveraging uncommon character sets, legitimate administrative activities may also trigger this alert if code page changes are part of normal operations for users who work with these languages. It's categorized at a medium level of importance, suggesting that while not all detections will be malicious, they warrant investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempts to enable the guest account using the sysadminctl utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to enable the guest account using the sysadminctl utility, you should: Look for the creation of process events specifically on macOS systems that involve the use of the sysadminctl command. Specifically, focus on instances where the command line includes activating the guest account, which is characterized by the presence of the '-guestAccount' argument followed immediately by 'on'. This detection is aimed at logging instances where attempts are made to enable a guest account, which is generally not active by default on macOS systems. It is important to note that this detection operates with a low level of confidence, indicating that while it is targeted, there might be scenarios where legitimate use or other activities could trigger the same conditions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith: '/sysadminctl'\n        CommandLine|contains|all:\n            # By default the guest account is not active\n            - ' -guestAccount'\n            - ' on'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith: '/sysadminctl'\n        CommandLine|contains|all:\n            # By default the guest account is not active\n            - ' -guestAccount'\n            - ' on'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "attempts to enable the guest account using the sysadminctl utility",
      "answer": "In order to detect attempts to enable the guest account using the sysadminctl utility, you should: Look for the creation of process events specifically on macOS systems that involve the use of the sysadminctl command. Specifically, focus on instances where the command line includes activating the guest account, which is characterized by the presence of the '-guestAccount' argument followed immediately by 'on'. This detection is aimed at logging instances where attempts are made to enable a guest account, which is generally not active by default on macOS systems. It is important to note that this detection operates with a low level of confidence, indicating that while it is targeted, there might be scenarios where legitimate use or other activities could trigger the same conditions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection of sc.exe utility adding a new service with special permission which hides that service..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the sc.exe utility adding a new service with special permission which hides that service, you should: monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image either ends with '\\sc.exe' or has an original file name of 'sc.exe'. Additionally, you should look for command line arguments containing 'sdset'. Both of these conditions should be met to confidently identify the suspicious activity. This monitoring is aimed at identifying malicious attempts to manipulate services, a technique that could be utilized to maintain persistence, evade detection, or gain unauthorized access to system resources.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'sdset'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'sdset'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detection of sc.exe utility adding a new service with special permission which hides that service.",
      "answer": "In order to detect the sc.exe utility adding a new service with special permission which hides that service, you should: monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image either ends with '\\sc.exe' or has an original file name of 'sc.exe'. Additionally, you should look for command line arguments containing 'sdset'. Both of these conditions should be met to confidently identify the suspicious activity. This monitoring is aimed at identifying malicious attempts to manipulate services, a technique that could be utilized to maintain persistence, evade detection, or gain unauthorized access to system resources."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempted file load events that did not meet the signing level requirements. It often means the file's signature is revoked or a signature with the Lifetime Signing EKU has expired.\nThis event is best correlated with EID 3089 to determine the error of the validation.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempted file load events that did not meet the signing level requirements, indicating that the file's signature is revoked or a signature with the Lifetime Signing EKU has expired, you should monitor code integrity events in the Windows Code Integrity operational log. This entails tracking specific Event IDs that signify an attempt by a process to load a file not meeting the required signing level or violating code integrity policy. The events of interest are Event ID 3033, indicating a failed attempt due to signing level requirements, and Event ID 3034, which shows a failed attempt but the image was allowed to load due to auditing policy.\n\nTo refine detection and reduce false positives, several optional filters exclude known benign occurrences related to specific processes and files. For instance, detections involving the DTrace tool, antivirus software processes like those of Windows Defender or Avast, electron-based applications, Microsoft Office components, and common third-party applications like Slack or Firefox have their own set of conditions based on file names or processes involved. This refining process relies on matching file and process names, requested and validated signing policies to identify suspicious activities correctly. Additionally, the Global Assembly Cache (GAC) is monitored for loads by the .NET optimization service, considering certain policy conditions to filter out standard operations from potential threats.\n\nIt is crucial to apply additional filters to account for legitimate activities by antivirus and third-party products to mitigate false positives. High-level monitoring coupled with detailed exclusion criteria ensures effective identification of malicious attempts to bypass code signing verification processes, crucial for maintaining system integrity and security. This detection mechanism is particularly beneficial when correlated with Event ID 3089 to understand the specific cause of the signature validation failure, enhancing incident response and forensic capabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID:\n            - 3033 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements.\n            - 3034 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements or violated code integrity policy. However, due to code integrity auditing policy, the image was allowed to load.\n    filter_optional_dtrace:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Windows\\System32\\svchost.exe) attempted to load \\Device\\HarddiskVolume5\\Program Files\\DTrace\\dtrace.dll that did not meet the Windows signing level requirements.\n        FileNameBuffer|endswith: '\\Program Files\\DTrace\\dtrace.dll'\n        ProcessNameBuffer|endswith: '\\Windows\\System32\\svchost.exe'\n        RequestedPolicy: 12\n        ValidatedPolicy: 1\n    filter_optional_av_generic:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2207.7-0\\MsMpEng.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\DriverStore\\FileRepository\\iigd_dch.inf_amd64_36fb67bd6dbd887d\\igd10iumd64.dll that did not meet the Custom 3 / Antimalware signing level requirements.\n        FileNameBuffer|contains: '\\Windows\\System32\\DriverStore\\FileRepository\\'\n        FileNameBuffer|endswith: '\\igd10iumd64.dll'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_electron_based_app:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Users\\user\\AppData\\Local\\Keybase\\Gui\\Keybase.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\nvspcap64.dll that did not meet the Microsoft signing level requirements.\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|endswith:\n            - '\\AppData\\Local\\Keybase\\Gui\\Keybase.exe'\n            - '\\Microsoft\\Teams\\stage\\Teams.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_bonjour:\n        FileNameBuffer|endswith: '\\Program Files\\Bonjour\\mdnsNSP.dll'\n        ProcessNameBuffer|endswith:\n            - '\\Windows\\System32\\svchost.exe'\n            - '\\Windows\\System32\\SIHClient.exe'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_optional_msoffice:\n        FileNameBuffer|contains: '\\Microsoft Office\\root\\vfs\\ProgramFilesCommonX64\\Microsoft Shared\\OFFICE'\n        FileNameBuffer|endswith: '\\MSOXMLMF.DLL'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_slack:\n        # Example: https://user-images.githubusercontent.com/112784902/197407680-96d4b662-8a59-4289-a483-b24d630ac2a9.png\n        # Even though it's the same DLL as the one used in the electron based app filter. We need to do a separate selection due to slack's folder naming convention with the version number :)\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|contains: '\\AppData\\Local\\slack\\app-'\n        ProcessNameBuffer|endswith: '\\slack.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_firefox:\n        # Example: https://user-images.githubusercontent.com/62423083/197451483-70e89010-ed96-4357-8079-b5a061a239d6.png\n        FileNameBuffer|endswith:\n            - '\\Mozilla Firefox\\mozavcodec.dll'\n            - '\\Mozilla Firefox\\mozavutil.dll'\n        ProcessNameBuffer|endswith: '\\Mozilla Firefox\\firefox.exe'\n        RequestedPolicy: 8\n    filter_optional_avast:\n        FileNameBuffer|endswith:\n            - '\\Program Files\\Avast Software\\Avast\\aswAMSI.dll'\n            - '\\Program Files (x86)\\Avast Software\\Avast\\aswAMSI.dll'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_main_gac:\n        # Filtering the path containing this string because of multiple possible DLLs in that location\n        FileNameBuffer|contains: '\\Windows\\assembly\\GAC\\'\n        ProcessNameBuffer|endswith: '\\mscorsvw.exe'\n        ProcessNameBuffer|contains: '\\Windows\\Microsoft.NET\\'\n        RequestedPolicy: 8\n        ValidatedPolicy:\n            - 1\n            - 2\n    filter_optional_google_drive:\n        # Example: \\Program Files\\Google\\Drive File Stream\\67.0.2.0\\crashpad_handler.exe\n        FileNameBuffer|contains: '\\Program Files\\Google\\Drive File Stream\\'\n        FileNameBuffer|endswith: '\\crashpad_handler.exe'\n        ProcessNameBuffer|endswith: '\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_trend_micro:\n        FileNameBuffer|endswith: '\\Trend Micro\\Client Server Security Agent\\perficrcperfmonmgr.dll'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Antivirus and other third party products. Apply additional filters accordingly\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID:\n            - 3033 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements.\n            - 3034 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements or violated code integrity policy. However, due to code integrity auditing policy, the image was allowed to load.\n    filter_optional_dtrace:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Windows\\System32\\svchost.exe) attempted to load \\Device\\HarddiskVolume5\\Program Files\\DTrace\\dtrace.dll that did not meet the Windows signing level requirements.\n        FileNameBuffer|endswith: '\\Program Files\\DTrace\\dtrace.dll'\n        ProcessNameBuffer|endswith: '\\Windows\\System32\\svchost.exe'\n        RequestedPolicy: 12\n        ValidatedPolicy: 1\n    filter_optional_av_generic:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2207.7-0\\MsMpEng.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\DriverStore\\FileRepository\\iigd_dch.inf_amd64_36fb67bd6dbd887d\\igd10iumd64.dll that did not meet the Custom 3 / Antimalware signing level requirements.\n        FileNameBuffer|contains: '\\Windows\\System32\\DriverStore\\FileRepository\\'\n        FileNameBuffer|endswith: '\\igd10iumd64.dll'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_electron_based_app:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Users\\user\\AppData\\Local\\Keybase\\Gui\\Keybase.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\nvspcap64.dll that did not meet the Microsoft signing level requirements.\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|endswith:\n            - '\\AppData\\Local\\Keybase\\Gui\\Keybase.exe'\n            - '\\Microsoft\\Teams\\stage\\Teams.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_bonjour:\n        FileNameBuffer|endswith: '\\Program Files\\Bonjour\\mdnsNSP.dll'\n        ProcessNameBuffer|endswith:\n            - '\\Windows\\System32\\svchost.exe'\n            - '\\Windows\\System32\\SIHClient.exe'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_optional_msoffice:\n        FileNameBuffer|contains: '\\Microsoft Office\\root\\vfs\\ProgramFilesCommonX64\\Microsoft Shared\\OFFICE'\n        FileNameBuffer|endswith: '\\MSOXMLMF.DLL'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_slack:\n        # Example: https://user-images.githubusercontent.com/112784902/197407680-96d4b662-8a59-4289-a483-b24d630ac2a9.png\n        # Even though it's the same DLL as the one used in the electron based app filter. We need to do a separate selection due to slack's folder naming convention with the version number :)\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|contains: '\\AppData\\Local\\slack\\app-'\n        ProcessNameBuffer|endswith: '\\slack.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_firefox:\n        # Example: https://user-images.githubusercontent.com/62423083/197451483-70e89010-ed96-4357-8079-b5a061a239d6.png\n        FileNameBuffer|endswith:\n            - '\\Mozilla Firefox\\mozavcodec.dll'\n            - '\\Mozilla Firefox\\mozavutil.dll'\n        ProcessNameBuffer|endswith: '\\Mozilla Firefox\\firefox.exe'\n        RequestedPolicy: 8\n    filter_optional_avast:\n        FileNameBuffer|endswith:\n            - '\\Program Files\\Avast Software\\Avast\\aswAMSI.dll'\n            - '\\Program Files (x86)\\Avast Software\\Avast\\aswAMSI.dll'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_main_gac:\n        # Filtering the path containing this string because of multiple possible DLLs in that location\n        FileNameBuffer|contains: '\\Windows\\assembly\\GAC\\'\n        ProcessNameBuffer|endswith: '\\mscorsvw.exe'\n        ProcessNameBuffer|contains: '\\Windows\\Microsoft.NET\\'\n        RequestedPolicy: 8\n        ValidatedPolicy:\n            - 1\n            - 2\n    filter_optional_google_drive:\n        # Example: \\Program Files\\Google\\Drive File Stream\\67.0.2.0\\crashpad_handler.exe\n        FileNameBuffer|contains: '\\Program Files\\Google\\Drive File Stream\\'\n        FileNameBuffer|endswith: '\\crashpad_handler.exe'\n        ProcessNameBuffer|endswith: '\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_trend_micro:\n        FileNameBuffer|endswith: '\\Trend Micro\\Client Server Security Agent\\perficrcperfmonmgr.dll'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Antivirus and other third party products. Apply additional filters accordingly\nlevel: high\n",
      "question": "attempted file load events that did not meet the signing level requirements. It often means the file's signature is revoked or a signature with the Lifetime Signing EKU has expired.\nThis event is best correlated with EID 3089 to determine the error of the validation.\n",
      "answer": "In order to detect attempted file load events that did not meet the signing level requirements, indicating that the file's signature is revoked or a signature with the Lifetime Signing EKU has expired, you should monitor code integrity events in the Windows Code Integrity operational log. This entails tracking specific Event IDs that signify an attempt by a process to load a file not meeting the required signing level or violating code integrity policy. The events of interest are Event ID 3033, indicating a failed attempt due to signing level requirements, and Event ID 3034, which shows a failed attempt but the image was allowed to load due to auditing policy.\n\nTo refine detection and reduce false positives, several optional filters exclude known benign occurrences related to specific processes and files. For instance, detections involving the DTrace tool, antivirus software processes like those of Windows Defender or Avast, electron-based applications, Microsoft Office components, and common third-party applications like Slack or Firefox have their own set of conditions based on file names or processes involved. This refining process relies on matching file and process names, requested and validated signing policies to identify suspicious activities correctly. Additionally, the Global Assembly Cache (GAC) is monitored for loads by the .NET optimization service, considering certain policy conditions to filter out standard operations from potential threats.\n\nIt is crucial to apply additional filters to account for legitimate activities by antivirus and third-party products to mitigate false positives. High-level monitoring coupled with detailed exclusion criteria ensures effective identification of malicious attempts to bypass code signing verification processes, crucial for maintaining system integrity and security. This detection mechanism is particularly beneficial when correlated with Event ID 3089 to understand the specific cause of the signature validation failure, enhancing incident response and forensic capabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting transfer lock was removed from a Route 53 domain. It is recommended to refrain from performing this action unless intending to transfer the domain to a different registrar..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a transfer lock was removed from a Route 53 domain, which is not advised unless there is an intention to transfer the domain to a different registrar, you should monitor AWS CloudTrail logs for any activity related to the disabling of a domain transfer lock. Specifically, look for events where the source is identified as route53.amazonaws.com with the event name DisableDomainTransferLock. It is crucial to consider that sometimes a domain transfer lock may be disabled legitimately by a system or network administrator. Therefore, verify if the user identity, user agent, and/or hostname that initiated the action is recognized and should have the authority to make such changes within your environment. Any activity conducted by unfamiliar users or systems should be scrutinized. If certain activities are known and expected, causing false alarms, they can be excluded to avoid unnecessary alerts. This approach is established with a low level of alarm due to the potential for legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: route53.amazonaws.com\n        eventName: DisableDomainTransferLock\n    condition: selection\nfalsepositives:\n    - A domain transfer lock may be disabled by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Activity from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: route53.amazonaws.com\n        eventName: DisableDomainTransferLock\n    condition: selection\nfalsepositives:\n    - A domain transfer lock may be disabled by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Activity from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
      "question": "transfer lock was removed from a Route 53 domain. It is recommended to refrain from performing this action unless intending to transfer the domain to a different registrar.",
      "answer": "In order to detect when a transfer lock was removed from a Route 53 domain, which is not advised unless there is an intention to transfer the domain to a different registrar, you should monitor AWS CloudTrail logs for any activity related to the disabling of a domain transfer lock. Specifically, look for events where the source is identified as route53.amazonaws.com with the event name DisableDomainTransferLock. It is crucial to consider that sometimes a domain transfer lock may be disabled legitimately by a system or network administrator. Therefore, verify if the user identity, user agent, and/or hostname that initiated the action is recognized and should have the authority to make such changes within your environment. Any activity conducted by unfamiliar users or systems should be scrutinized. If certain activities are known and expected, causing false alarms, they can be excluded to avoid unnecessary alerts. This approach is established with a low level of alarm due to the potential for legitimate administrative actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process discovery commands. Adversaries may attempt to get information about running processes on a system.\nInformation obtained could be used to gain an understanding of common software/applications running on systems within the network\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process discovery commands, where adversaries may attempt to get information about running processes on a system which could then be used to gain an understanding of common software/applications running on systems within the network, you should: Focus on monitoring Linux system logs, particularly those related to process creation. Specifically, look for instances where process creation events end with '/ps' or '/top', as these are common commands used for viewing active processes on a Linux system. It is important to note that while detecting these commands can indicate an attempt at process discovery by an adversary, such detections can also be triggered by legitimate system administration activities. Therefore, these detections should be considered informational and require further investigation to determine their nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith:\n            - '/ps'\n            - '/top'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith:\n            - '/ps'\n            - '/top'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
      "question": "process discovery commands. Adversaries may attempt to get information about running processes on a system.\nInformation obtained could be used to gain an understanding of common software/applications running on systems within the network\n",
      "answer": "In order to detect process discovery commands, where adversaries may attempt to get information about running processes on a system which could then be used to gain an understanding of common software/applications running on systems within the network, you should: Focus on monitoring Linux system logs, particularly those related to process creation. Specifically, look for instances where process creation events end with '/ps' or '/top', as these are common commands used for viewing active processes on a Linux system. It is important to note that while detecting these commands can indicate an attempt at process discovery by an adversary, such detections can also be triggered by legitimate system administration activities. Therefore, these detections should be considered informational and require further investigation to determine their nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows Update get some error Check if need a 0-days KB.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to check if Windows Update errors indicate a need for a zero-day KB (Knowledge Base update), you should monitor the Windows System log, specifically the Microsoft-Windows-WindowsUpdateClient/Operational log. Look for events generated by the provider named 'Microsoft-Windows-WindowsUpdateClient' with specific Event IDs that indicate various types of update failures:\n\n- Event ID 16, which indicates that Windows was unable to connect to the automatic updates service, preventing the system from downloading and installing updates according to its schedule.\n- Event ID 20, denoting installation failure, where Windows couldn't install an update due to an error.\n- Event ID 24, which signifies an uninstallation failure, meaning Windows failed to uninstall an update with an error.\n- Event ID 213, pointing to a revert failure where Windows struggled to revert an update due to an error.\n- Event ID 217, indicating a commit failure, as Windows was unable to commit an update with an error.\n\nThese specific event IDs are crucial for identifying issues with the Windows Update process, which could hint at underlying vulnerabilities or the need for a zero-day patch to address newly discovered security risks. It's important to note that there may be false positives, as not every failure is indicative of a critical issue needing a zero-day solution. The detection level is considered low, suggesting that while these events are worth noting, they should be contextualized within a broader investigation to ascertain their significance correctly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\n    definition: Other error are in Microsoft-Windows-WindowsUpdateClient/Operational\ndetection:\n    selection:\n        Provider_Name: Microsoft-Windows-WindowsUpdateClient\n        EventID:\n            - 16 # Unable to Connect: Windows is unable to connect to the automatic updates service and therefore cannot download and install updates according to the set schedule\n            - 20 # Installation Failure: Windows failed to install the following update with error\n            - 24 # Uninstallation Failure: Windows failed to uninstall the following update with error\n            - 213 # Revert Failure: Windows failed to revert the following update with error\n            - 217 # Commit Failure: Windows failed to commit the following update with error\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\n    definition: Other error are in Microsoft-Windows-WindowsUpdateClient/Operational\ndetection:\n    selection:\n        Provider_Name: Microsoft-Windows-WindowsUpdateClient\n        EventID:\n            - 16 # Unable to Connect: Windows is unable to connect to the automatic updates service and therefore cannot download and install updates according to the set schedule\n            - 20 # Installation Failure: Windows failed to install the following update with error\n            - 24 # Uninstallation Failure: Windows failed to uninstall the following update with error\n            - 213 # Revert Failure: Windows failed to revert the following update with error\n            - 217 # Commit Failure: Windows failed to commit the following update with error\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Windows Update get some error Check if need a 0-days KB",
      "answer": "In order to check if Windows Update errors indicate a need for a zero-day KB (Knowledge Base update), you should monitor the Windows System log, specifically the Microsoft-Windows-WindowsUpdateClient/Operational log. Look for events generated by the provider named 'Microsoft-Windows-WindowsUpdateClient' with specific Event IDs that indicate various types of update failures:\n\n- Event ID 16, which indicates that Windows was unable to connect to the automatic updates service, preventing the system from downloading and installing updates according to its schedule.\n- Event ID 20, denoting installation failure, where Windows couldn't install an update due to an error.\n- Event ID 24, which signifies an uninstallation failure, meaning Windows failed to uninstall an update with an error.\n- Event ID 213, pointing to a revert failure where Windows struggled to revert an update due to an error.\n- Event ID 217, indicating a commit failure, as Windows was unable to commit an update with an error.\n\nThese specific event IDs are crucial for identifying issues with the Windows Update process, which could hint at underlying vulnerabilities or the need for a zero-day patch to address newly discovered security risks. It's important to note that there may be false positives, as not every failure is indicative of a critical issue needing a zero-day solution. The detection level is considered low, suggesting that while these events are worth noting, they should be contextualized within a broader investigation to ascertain their significance correctly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect the Hybrid Connection Manager service installation..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the Hybrid Connection Manager service installation, you should focus on monitoring Windows security logs specifically for the event ID 4697, which is logged when a new service is installed on the system. The service of interest in this context is the \"HybridConnectionManager.\" You should look for instances where both the service name is \"HybridConnectionManager\" and the service file name contains the text \"HybridConnectionManager.\" This event logging is contingent upon having the 'System Security Extension' audit subcategory enabled, as this allows for the logging of such events. Be aware that there might be legitimate uses of the Hybrid Connection Manager, especially in scenarios involving Azure function apps, which can result in false positive alerts. Given the nature of this detection and its specificity in targeting a service installation related to potential cybersecurity threats, the level of alert is considered high. Identifying and monitoring for this specific event involves understanding intrusion tactics, but it directly ties into recognizing potential unauthorized or malicious service installations, which could be indicative of a broader attack campaign or infrastructure compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceName: HybridConnectionManager\n        ServiceFileName|contains: HybridConnectionManager\n    condition: selection\nfalsepositives:\n    - Legitimate use of Hybrid Connection Manager via Azure function apps.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceName: HybridConnectionManager\n        ServiceFileName|contains: HybridConnectionManager\n    condition: selection\nfalsepositives:\n    - Legitimate use of Hybrid Connection Manager via Azure function apps.\nlevel: high\n",
      "question": "Rule to detect the Hybrid Connection Manager service installation.",
      "answer": "In order to detect the Hybrid Connection Manager service installation, you should focus on monitoring Windows security logs specifically for the event ID 4697, which is logged when a new service is installed on the system. The service of interest in this context is the \"HybridConnectionManager.\" You should look for instances where both the service name is \"HybridConnectionManager\" and the service file name contains the text \"HybridConnectionManager.\" This event logging is contingent upon having the 'System Security Extension' audit subcategory enabled, as this allows for the logging of such events. Be aware that there might be legitimate uses of the Hybrid Connection Manager, especially in scenarios involving Azure function apps, which can result in false positive alerts. Given the nature of this detection and its specificity in targeting a service installation related to potential cybersecurity threats, the level of alert is considered high. Identifying and monitoring for this specific event involves understanding intrusion tactics, but it directly ties into recognizing potential unauthorized or malicious service installations, which could be indicative of a broader attack campaign or infrastructure compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific malware patterns used by FurBall malware linked to Iranian Domestic Kitten APT group.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific malware patterns used by FurBall malware linked to Iranian Domestic Kitten APT group, you should monitor proxy logs for web requests that contain certain suspicious patterns in the URI. Specifically, look for URIs that include the strings 'Get~~~AllBrowser', 'Get~~~HardwareInfo', 'Take~~RecordCall', or 'Reset~~~AllCommand'. These patterns are indicative of the malware's activities, such as attempting to gather information from all browsers, fetch hardware information, record calls, or reset all commands. These indicators should be taken seriously, with the IP address and the full request URI being critical pieces of information to gather. This approach is based on a high confidence level that such patterns are unlikely to generate false positives, indicating a significant risk when detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains:\n            - 'Get~~~AllBrowser'\n            - 'Get~~~HardwareInfo'\n            - 'Take~~RecordCall'\n            - 'Reset~~~AllCommand'\n    condition: selection\nfields:\n    - c-ip\n    - c-uri\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains:\n            - 'Get~~~AllBrowser'\n            - 'Get~~~HardwareInfo'\n            - 'Take~~RecordCall'\n            - 'Reset~~~AllCommand'\n    condition: selection\nfields:\n    - c-ip\n    - c-uri\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "specific malware patterns used by FurBall malware linked to Iranian Domestic Kitten APT group",
      "answer": "In order to detect specific malware patterns used by FurBall malware linked to Iranian Domestic Kitten APT group, you should monitor proxy logs for web requests that contain certain suspicious patterns in the URI. Specifically, look for URIs that include the strings 'Get~~~AllBrowser', 'Get~~~HardwareInfo', 'Take~~RecordCall', or 'Reset~~~AllCommand'. These patterns are indicative of the malware's activities, such as attempting to gather information from all browsers, fetch hardware information, record calls, or reset all commands. These indicators should be taken seriously, with the IP address and the full request URI being critical pieces of information to gather. This approach is based on a high confidence level that such patterns are unlikely to generate false positives, indicating a significant risk when detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting highly relevant Antivirus alert that reports a hack tool or other attack tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a highly relevant Antivirus alert that reports a hack tool or other attack tool, you should monitor antivirus logs for alerts that identify the presence of known hacking tools or attack tools. Specifically, look for signatures that start with 'HTOOL', 'HKTL', 'SecurityTool', 'Adfind', 'ATK/', 'Exploit.Script.CVE', 'PWS.', or 'PWSX'. Additionally, pay attention to signatures that contain the following strings: 'Hacktool', 'ATK/' (specifically noted for Sophos antivirus), 'Potato', 'Rozena', 'Sbelt', 'Seatbelt', 'SecurityTool', 'SharpDump', 'Sliver', 'Splinter', 'Swrort', 'Impacket', 'Koadic', 'Lazagne', 'Metasploit', 'Meterpreter', 'MeteTool', 'Mimikatz', 'Mpreter', 'Nighthawk', 'PentestPowerShell', 'PowerSploit', 'PowerSSH', 'PshlSpy', 'PSWTool', 'PWCrack', 'Brutel', 'BruteR', 'Cobalt', 'COBEACON', 'Cometer', 'DumpCreds', 'FastReverseProxy', and 'PWDump'.\n\nEnsure that for any detected alert, you collect at least the file name associated with the tool and the user account involved. Given the nature of these signatures, which are closely associated with intrusion tools and frameworks used in cyber attacks, it's highly unlikely that detections would be false positives. Such detections are critical for identifying potential breaches or unauthorized activities within a network, as they may involve attempts at privilege escalation, lateral movement, credential theft, or deploying additional payloads. This monitoring strategy aligns with MITRE ATT&CK tactics and techniques related to the use of credential access tools, discovery tools, defense evasion mechanisms, and execution techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        - Signature|startswith:\n            - 'HTOOL'\n            - 'HKTL'\n            - 'SecurityTool'\n            - 'Adfind'\n            - 'ATK/'\n            - 'Exploit.Script.CVE'\n            # - 'FRP.'\n            - 'PWS.'\n            - 'PWSX'\n        - Signature|contains:\n            - 'Hacktool'\n            - 'ATK/'  # Sophos\n            - 'Potato'\n            - 'Rozena'\n            - 'Sbelt'\n            - 'Seatbelt'\n            - 'SecurityTool'\n            - 'SharpDump'\n            - 'Sliver'\n            - 'Splinter'\n            - 'Swrort'\n            - 'Impacket'\n            - 'Koadic'\n            - 'Lazagne'\n            - 'Metasploit'\n            - 'Meterpreter'\n            - 'MeteTool'\n            - 'Mimikatz'\n            - 'Mpreter'\n            - 'Nighthawk'\n            - 'PentestPowerShell'\n            - 'PowerSploit'\n            - 'PowerSSH'\n            - 'PshlSpy'\n            - 'PSWTool'\n            - 'PWCrack'\n            - 'Brutel'\n            - 'BruteR'\n            - 'Cobalt'\n            - 'COBEACON'\n            - 'Cometer'\n            - 'DumpCreds'\n            - 'FastReverseProxy'\n            - 'PWDump'\n    condition: selection\nfields:\n    - FileName\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: antivirus\ndetection:\n    selection:\n        - Signature|startswith:\n            - 'HTOOL'\n            - 'HKTL'\n            - 'SecurityTool'\n            - 'Adfind'\n            - 'ATK/'\n            - 'Exploit.Script.CVE'\n            # - 'FRP.'\n            - 'PWS.'\n            - 'PWSX'\n        - Signature|contains:\n            - 'Hacktool'\n            - 'ATK/'  # Sophos\n            - 'Potato'\n            - 'Rozena'\n            - 'Sbelt'\n            - 'Seatbelt'\n            - 'SecurityTool'\n            - 'SharpDump'\n            - 'Sliver'\n            - 'Splinter'\n            - 'Swrort'\n            - 'Impacket'\n            - 'Koadic'\n            - 'Lazagne'\n            - 'Metasploit'\n            - 'Meterpreter'\n            - 'MeteTool'\n            - 'Mimikatz'\n            - 'Mpreter'\n            - 'Nighthawk'\n            - 'PentestPowerShell'\n            - 'PowerSploit'\n            - 'PowerSSH'\n            - 'PshlSpy'\n            - 'PSWTool'\n            - 'PWCrack'\n            - 'Brutel'\n            - 'BruteR'\n            - 'Cobalt'\n            - 'COBEACON'\n            - 'Cometer'\n            - 'DumpCreds'\n            - 'FastReverseProxy'\n            - 'PWDump'\n    condition: selection\nfields:\n    - FileName\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "highly relevant Antivirus alert that reports a hack tool or other attack tool",
      "answer": "In order to detect a highly relevant Antivirus alert that reports a hack tool or other attack tool, you should monitor antivirus logs for alerts that identify the presence of known hacking tools or attack tools. Specifically, look for signatures that start with 'HTOOL', 'HKTL', 'SecurityTool', 'Adfind', 'ATK/', 'Exploit.Script.CVE', 'PWS.', or 'PWSX'. Additionally, pay attention to signatures that contain the following strings: 'Hacktool', 'ATK/' (specifically noted for Sophos antivirus), 'Potato', 'Rozena', 'Sbelt', 'Seatbelt', 'SecurityTool', 'SharpDump', 'Sliver', 'Splinter', 'Swrort', 'Impacket', 'Koadic', 'Lazagne', 'Metasploit', 'Meterpreter', 'MeteTool', 'Mimikatz', 'Mpreter', 'Nighthawk', 'PentestPowerShell', 'PowerSploit', 'PowerSSH', 'PshlSpy', 'PSWTool', 'PWCrack', 'Brutel', 'BruteR', 'Cobalt', 'COBEACON', 'Cometer', 'DumpCreds', 'FastReverseProxy', and 'PWDump'.\n\nEnsure that for any detected alert, you collect at least the file name associated with the tool and the user account involved. Given the nature of these signatures, which are closely associated with intrusion tools and frameworks used in cyber attacks, it's highly unlikely that detections would be false positives. Such detections are critical for identifying potential breaches or unauthorized activities within a network, as they may involve attempts at privilege escalation, lateral movement, credential theft, or deploying additional payloads. This monitoring strategy aligns with MITRE ATT&CK tactics and techniques related to the use of credential access tools, discovery tools, defense evasion mechanisms, and execution techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\'\n        TargetObject|endswith:\n            - '\\Internet'\n            - '\\LocalIntranet'\n            - '\\MyComputer'\n            - '\\TrustedSites'\n            - '\\UntrustedSites'\n        Details: 'Enabled'\n    condition: selection\nfalsepositives:\n    - Legitimate internal requirements.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\'\n        TargetObject|endswith:\n            - '\\Internet'\n            - '\\LocalIntranet'\n            - '\\MyComputer'\n            - '\\TrustedSites'\n            - '\\UntrustedSites'\n        Details: 'Enabled'\n    condition: selection\nfalsepositives:\n    - Legitimate internal requirements.\nlevel: medium\n",
      "question": "changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
      "answer": "In order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when 'DllRegisterServer' is called in the commandline and the image is not rundll32. This could mean that the 'rundll32' utility has been renamed in order to avoid detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when 'DllRegisterServer' is called in the commandline and the image is not rundll32, which could mean that the 'rundll32' utility has been renamed in order to avoid detection, you should: Monitor process creation logs within Windows environments for any instances where the command line involves the use of 'DllRegisterServer'. It's critical, however, to exclude any events where the image path ends with '\\rundll32.exe' to avoid false positives. This approach focuses on identifying potentially malicious activities where attackers might rename common system utilities to bypass security measures. Given that false positives are unlikely for this detection method and the level of threat is considered high, it plays a crucial role in recognizing tactics and techniques related to evasion and execution without relying on usual system utilities names.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'DllRegisterServer'\n    filter:\n        Image|endswith: '\\rundll32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'DllRegisterServer'\n    filter:\n        Image|endswith: '\\rundll32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "when 'DllRegisterServer' is called in the commandline and the image is not rundll32. This could mean that the 'rundll32' utility has been renamed in order to avoid detection",
      "answer": "In order to detect when 'DllRegisterServer' is called in the commandline and the image is not rundll32, which could mean that the 'rundll32' utility has been renamed in order to avoid detection, you should: Monitor process creation logs within Windows environments for any instances where the command line involves the use of 'DllRegisterServer'. It's critical, however, to exclude any events where the image path ends with '\\rundll32.exe' to avoid false positives. This approach focuses on identifying potentially malicious activities where attackers might rename common system utilities to bypass security measures. Given that false positives are unlikely for this detection method and the level of threat is considered high, it plays a crucial role in recognizing tactics and techniques related to evasion and execution without relying on usual system utilities names."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the Conti recommendation to its affiliates to use esentutl to access NTDS dumped files, and the utilization of this utility by Trickbot to obtain MSEdge information via its module pwgrab, you should: Monitor the creation of processes on Windows systems for the execution of the command line tool 'esentutl' with the parameter '/p'. This detection is crucial as the use of 'esentutl', specifically with the parameter '/p', can be indicative of unauthorized attempts to repair or manipulate the NTDS.dit database file, which stores Active Directory data, including user accounts. Logging the user, the exact command line used, and the parent command line process can provide valuable context for investigating potentially malicious activity. Given that this behavior is associated with known threat actor techniques, any detection of such activity should be treated with a medium level of suspicion, although it is important to consider potential legitimate use cases that may lead to false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'esentutl'\n            - ' /p'\n    condition: selection\nfields:\n    - User\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - To be determined\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'esentutl'\n            - ' /p'\n    condition: selection\nfields:\n    - User\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - To be determined\nlevel: medium\n",
      "question": "Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.",
      "answer": "In order to detect the Conti recommendation to its affiliates to use esentutl to access NTDS dumped files, and the utilization of this utility by Trickbot to obtain MSEdge information via its module pwgrab, you should: Monitor the creation of processes on Windows systems for the execution of the command line tool 'esentutl' with the parameter '/p'. This detection is crucial as the use of 'esentutl', specifically with the parameter '/p', can be indicative of unauthorized attempts to repair or manipulate the NTDS.dit database file, which stores Active Directory data, including user accounts. Logging the user, the exact command line used, and the parent command line process can provide valuable context for investigating potentially malicious activity. Given that this behavior is associated with known threat actor techniques, any detection of such activity should be treated with a medium level of suspicion, although it is important to consider potential legitimate use cases that may lead to false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting A General detection for WebDav user-agent being used to PUT files on a WebDav network share. This could be an indicator of exfiltration..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a scenario where a WebDav user-agent is being used to PUT files on a WebDav network share, which could indicate data exfiltration, you should observe network traffic logs generated by Zeek that are specifically related to HTTP protocols. Look for instances where the User-Agent string contains 'WebDAV' in combination with the HTTP method 'PUT,' indicating an attempt to upload or modify files on a server.\n\nHowever, to reduce false alarms and avoid detecting benign activity within your organizational network, you should exclude any activity that originates from IP addresses within the private address space, namely 192.168.0.0/16, 172.16.0.0/12, and 10.0.0.0/8. This ensures that only potentially malicious external activities are considered.\n\nKeep in mind that while this detection strategy is important for spotting potential data exfiltration attempts using WebDav, there is a possibility of encountering activities that might not be malicious (unknown false positives). Therefore, the confidence level for alerts generated based on these criteria is rated low, suggesting that further investigation is necessary to confirm malicious intent.\n\nThe underlying motive for this detection strategy aligns with identifying tactics and techniques such as 'Exfiltration Over Alternative Protocol' which might be employed by attackers to move data out of the network surreptitiously.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: http\ndetection:\n    selection:\n        user_agent|contains: 'WebDAV'\n        method: 'PUT'\n    filter:\n        id.resp_h:\n            - 192.168.0.0/16\n            - 172.16.0.0/12\n            - 10.0.0.0/8\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: http\ndetection:\n    selection:\n        user_agent|contains: 'WebDAV'\n        method: 'PUT'\n    filter:\n        id.resp_h:\n            - 192.168.0.0/16\n            - 172.16.0.0/12\n            - 10.0.0.0/8\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "A General detection for WebDav user-agent being used to PUT files on a WebDav network share. This could be an indicator of exfiltration.",
      "answer": "In order to detect a scenario where a WebDav user-agent is being used to PUT files on a WebDav network share, which could indicate data exfiltration, you should observe network traffic logs generated by Zeek that are specifically related to HTTP protocols. Look for instances where the User-Agent string contains 'WebDAV' in combination with the HTTP method 'PUT,' indicating an attempt to upload or modify files on a server.\n\nHowever, to reduce false alarms and avoid detecting benign activity within your organizational network, you should exclude any activity that originates from IP addresses within the private address space, namely 192.168.0.0/16, 172.16.0.0/12, and 10.0.0.0/8. This ensures that only potentially malicious external activities are considered.\n\nKeep in mind that while this detection strategy is important for spotting potential data exfiltration attempts using WebDav, there is a possibility of encountering activities that might not be malicious (unknown false positives). Therefore, the confidence level for alerts generated based on these criteria is rated low, suggesting that further investigation is necessary to confirm malicious intent.\n\nThe underlying motive for this detection strategy aligns with identifying tactics and techniques such as 'Exfiltration Over Alternative Protocol' which might be employed by attackers to move data out of the network surreptitiously."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deletion of local audit logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the deletion of local audit logs, you should: focus on monitoring macOS process creation logs for instances where command line utilities typically used for file deletion, such as '/rm', '/unlink', and '/shred', are executed. Pay special attention to commands that target directories associated with logging, specifically '/var/log' and paths that include both '/Users/' and '/Library/Logs/'. The presence of these commands, especially when coupled, is indicative of a user attempting to erase local audit logs, which can be a sign of malicious activity aimed at covering tracks or undermining system auditing capabilities. Be mindful that legitimate administration activities might also trigger these detections, so additional context and investigation are recommended to differentiate between harmful actions and benign administrative tasks. The security level for this kind of activity is considered to be medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection1:\n        Image|endswith:\n            - '/rm'\n            - '/unlink'\n            - '/shred'\n    selection_cli_1:\n        CommandLine|contains: '/var/log'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - '/Users/'\n            - '/Library/Logs/'\n    condition: selection1 and 1 of selection_cli*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection1:\n        Image|endswith:\n            - '/rm'\n            - '/unlink'\n            - '/shred'\n    selection_cli_1:\n        CommandLine|contains: '/var/log'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - '/Users/'\n            - '/Library/Logs/'\n    condition: selection1 and 1 of selection_cli*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "deletion of local audit logs",
      "answer": "In order to detect the deletion of local audit logs, you should: focus on monitoring macOS process creation logs for instances where command line utilities typically used for file deletion, such as '/rm', '/unlink', and '/shred', are executed. Pay special attention to commands that target directories associated with logging, specifically '/var/log' and paths that include both '/Users/' and '/Library/Logs/'. The presence of these commands, especially when coupled, is indicative of a user attempting to erase local audit logs, which can be a sign of malicious activity aimed at covering tracks or undermining system auditing capabilities. Be mindful that legitimate administration activities might also trigger these detections, so additional context and investigation are recommended to differentiate between harmful actions and benign administrative tasks. The security level for this kind of activity is considered to be medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Powershell process that opens network connections - check for suspicious target ports and target systems - adjust to your environment (e.g. extend filters with company's ip range').\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a Powershell process that opens network connections - check for suspicious target ports and target systems - adjust to your environment (e.g. extend filters with company's ip range'), you should monitor network connections on Windows systems for instances where a process image ends with '\\powershell.exe' or '\\pwsh.exe'. These instances should also indicate that a new connection was initiated ('Initiated: true') and that the destination of the connection is not an IPv6 address ('DestinationIsIpv6: false'). \n\nAdditionally, to reduce false positives and focus on external network connections, connections to common internal IP address ranges (such as 10.x.x.x, 192.168.x.x, and various 172.16.x.x - 172.31.x.x ranges) should be filtered out. This filtration should also apply to connections to localhost ('127.0.0.1') and equivalent IPv6 addresses including the loopback address ('::1') and link-local ('fe80:') addresses. Similarly, connections to private IPv6 address ranges ('fc' and 'fd') and specified Microsoft IP ranges, which cover specific subnets such as 20.184.0.0/13 and others highlighted within the detection logic, should not trigger alerts.\n\nAlerts should be treated with a low level of priority initially due to potential false positives, which could include administrative scripts or legitimate connections to Microsoft services. It's crucial to further investigate any detection to determine its nature accurately and adjust the detection mechanism accordingly to accommodate legitimate internal or Microsoft range traffic, based on your specific environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Initiated: 'true'\n        DestinationIsIpv6: 'false'\n    filter_internal_ip:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.0.0.1'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    filter_ipv6:\n        DestinationIp|startswith:\n            - '::1'  # IPv6 loopback variant\n            - '0:0:0:0:0:0:0:1'  # IPv6 loopback variant\n            - 'fe80:'  # link-local address\n            - 'fc'  # private address range fc00::/7\n            - 'fd'  # private address range fc00::/7\n    filter_msrange:\n        DestinationIp|startswith:\n            # Subnet: 20.184.0.0/13\n            - '20.184.'\n            - '20.185.'\n            - '20.186.'\n            - '20.187.'\n            - '20.188.'\n            - '20.189.'\n            - '20.190.'\n            - '20.191.'\n            - '23.79.'\n            - '51.10.'\n            # Subnet: 51.103.210.0/23\n            - '51.103.'\n            - '51.104.'\n            - '51.105.'\n            - '52.239.'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Administrative scripts\n    - Microsoft IP range\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Initiated: 'true'\n        DestinationIsIpv6: 'false'\n    filter_internal_ip:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.0.0.1'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    filter_ipv6:\n        DestinationIp|startswith:\n            - '::1'  # IPv6 loopback variant\n            - '0:0:0:0:0:0:0:1'  # IPv6 loopback variant\n            - 'fe80:'  # link-local address\n            - 'fc'  # private address range fc00::/7\n            - 'fd'  # private address range fc00::/7\n    filter_msrange:\n        DestinationIp|startswith:\n            # Subnet: 20.184.0.0/13\n            - '20.184.'\n            - '20.185.'\n            - '20.186.'\n            - '20.187.'\n            - '20.188.'\n            - '20.189.'\n            - '20.190.'\n            - '20.191.'\n            - '23.79.'\n            - '51.10.'\n            # Subnet: 51.103.210.0/23\n            - '51.103.'\n            - '51.104.'\n            - '51.105.'\n            - '52.239.'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Administrative scripts\n    - Microsoft IP range\nlevel: low\n",
      "question": "Powershell process that opens network connections - check for suspicious target ports and target systems - adjust to your environment (e.g. extend filters with company's ip range')",
      "answer": "In order to detect a Powershell process that opens network connections - check for suspicious target ports and target systems - adjust to your environment (e.g. extend filters with company's ip range'), you should monitor network connections on Windows systems for instances where a process image ends with '\\powershell.exe' or '\\pwsh.exe'. These instances should also indicate that a new connection was initiated ('Initiated: true') and that the destination of the connection is not an IPv6 address ('DestinationIsIpv6: false'). \n\nAdditionally, to reduce false positives and focus on external network connections, connections to common internal IP address ranges (such as 10.x.x.x, 192.168.x.x, and various 172.16.x.x - 172.31.x.x ranges) should be filtered out. This filtration should also apply to connections to localhost ('127.0.0.1') and equivalent IPv6 addresses including the loopback address ('::1') and link-local ('fe80:') addresses. Similarly, connections to private IPv6 address ranges ('fc' and 'fd') and specified Microsoft IP ranges, which cover specific subnets such as 20.184.0.0/13 and others highlighted within the detection logic, should not trigger alerts.\n\nAlerts should be treated with a low level of priority initially due to potential false positives, which could include administrative scripts or legitimate connections to Microsoft services. It's crucial to further investigate any detection to determine its nature accurately and adjust the detection mechanism accordingly to accommodate legitimate internal or Microsoft range traffic, based on your specific environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to Microsoft Office protected view registry keys with which the attacker disables this feature..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to Microsoft Office protected view registry keys with which the attacker disables this feature, you should monitor the Windows Registry for specific SetValue events that target keys related to the Microsoft Office Protected View feature. Specifically, focus on registry events where the EventType is SetValue and the TargetObject includes the path '\\SOFTWARE\\Microsoft\\Office\\' combined with '\\Security\\ProtectedView\\'. \n\nThere are two main scenarios to watch for. Firstly, look for changes where the Details field indicates a DWORD value of '0x00000001', signifying the feature's disablement, and the TargetObject ends with any of the following: '\\DisableAttachementsInPV', which turns off Protected View for attachments opened from Outlook; '\\DisableInternetFilesInPV', turning off Protected View for files downloaded from the Internet zone; '\\DisableIntranetCheck', deactivating Protected View for files located in UNC paths; or '\\DisableUnsafeLocationsInPV', which disables Protected View for files from deemed unsafe locations.\n\nSecondly, be alert to the scenarios where the Details show a DWORD value of '0x00000000', which could indicate an attempt to enable protected view under certain conditions, but with the specific TargetObjects ending with '\\enabledatabasefileprotectedview' and '\\enableforeigntextfileprotectedview'.\n\nThese registry modifications are considered highly suspicious, with a low likelihood of false positives, and are tied to sophisticated attack tactics aiming to weaken the security posture of Microsoft Office installations by reducing safeguards against potentially malicious files. Monitoring for these changes is critical in maintaining the integrity of system defenses and is aligned with various MITRE ATT&CK tactics such as Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection_path:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Office\\'\n            - '\\Security\\ProtectedView\\'\n    selection_values_1:\n        Details: 'DWORD (0x00000001)'\n        TargetObject|endswith:\n            - '\\DisableAttachementsInPV' # Turn off Protected View for attachments opened from Outlook\n            - '\\DisableInternetFilesInPV' # Turn off Protected View for files downloaded from Internet zone\n            - '\\DisableIntranetCheck' # Turn off Protected View for file located in UNC paths\n            - '\\DisableUnsafeLocationsInPV' # Turn off Protected View for unsafe locations\n    selection_values_0:\n        Details: 'DWORD (0x00000000)'\n        TargetObject|endswith:\n            - '\\enabledatabasefileprotectedview'\n            - '\\enableforeigntextfileprotectedview'\n    condition: selection_path and 1 of selection_values_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection_path:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Office\\'\n            - '\\Security\\ProtectedView\\'\n    selection_values_1:\n        Details: 'DWORD (0x00000001)'\n        TargetObject|endswith:\n            - '\\DisableAttachementsInPV' # Turn off Protected View for attachments opened from Outlook\n            - '\\DisableInternetFilesInPV' # Turn off Protected View for files downloaded from Internet zone\n            - '\\DisableIntranetCheck' # Turn off Protected View for file located in UNC paths\n            - '\\DisableUnsafeLocationsInPV' # Turn off Protected View for unsafe locations\n    selection_values_0:\n        Details: 'DWORD (0x00000000)'\n        TargetObject|endswith:\n            - '\\enabledatabasefileprotectedview'\n            - '\\enableforeigntextfileprotectedview'\n    condition: selection_path and 1 of selection_values_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "changes to Microsoft Office protected view registry keys with which the attacker disables this feature.",
      "answer": "In order to detect changes to Microsoft Office protected view registry keys with which the attacker disables this feature, you should monitor the Windows Registry for specific SetValue events that target keys related to the Microsoft Office Protected View feature. Specifically, focus on registry events where the EventType is SetValue and the TargetObject includes the path '\\SOFTWARE\\Microsoft\\Office\\' combined with '\\Security\\ProtectedView\\'. \n\nThere are two main scenarios to watch for. Firstly, look for changes where the Details field indicates a DWORD value of '0x00000001', signifying the feature's disablement, and the TargetObject ends with any of the following: '\\DisableAttachementsInPV', which turns off Protected View for attachments opened from Outlook; '\\DisableInternetFilesInPV', turning off Protected View for files downloaded from the Internet zone; '\\DisableIntranetCheck', deactivating Protected View for files located in UNC paths; or '\\DisableUnsafeLocationsInPV', which disables Protected View for files from deemed unsafe locations.\n\nSecondly, be alert to the scenarios where the Details show a DWORD value of '0x00000000', which could indicate an attempt to enable protected view under certain conditions, but with the specific TargetObjects ending with '\\enabledatabasefileprotectedview' and '\\enableforeigntextfileprotectedview'.\n\nThese registry modifications are considered highly suspicious, with a low likelihood of false positives, and are tied to sophisticated attack tactics aiming to weaken the security posture of Microsoft Office installations by reducing safeguards against potentially malicious files. Monitoring for these changes is critical in maintaining the integrity of system defenses and is aligned with various MITRE ATT&CK tactics such as Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect AD credential dumping using impacket secretdump HKTL. Based on the SIGMA rules/windows/builtin/win_impacket_secretdump.yml.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect AD credential dumping using impacket secretdump HKTL, you should focus on monitoring SMB file activities from Zeek logs. Specifically, look out for file activities where the file path contains a backslash '\\' and 'ADMIN$' indicating access to an administrative share typically used in this attack context. Additionally, be vigilant for files within the 'SYSTEM32\\' directory that have a '.tmp' extension, as these are often signs of illicit activity related to dumping credentials. It's important to note that while these indicators can be significant, there might be rare cases where they do not signify malicious behavior; however, such instances are currently unknown, lending a high level of confidence to these detection criteria. This approach aligns with understanding tactics and techniques such as Credential Access through Credential Dumping, leveraging the tools like the 'impacket secretdump' utility often used by attackers to extract sensitive information from a compromised system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: smb_files\ndetection:\n    selection:\n        path|contains|all:\n            - '\\'\n            - 'ADMIN$'\n        name|contains: 'SYSTEM32\\'\n        name|endswith: '.tmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: smb_files\ndetection:\n    selection:\n        path|contains|all:\n            - '\\'\n            - 'ADMIN$'\n        name|contains: 'SYSTEM32\\'\n        name|endswith: '.tmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect AD credential dumping using impacket secretdump HKTL. Based on the SIGMA rules/windows/builtin/win_impacket_secretdump.yml",
      "answer": "In order to detect AD credential dumping using impacket secretdump HKTL, you should focus on monitoring SMB file activities from Zeek logs. Specifically, look out for file activities where the file path contains a backslash '\\' and 'ADMIN$' indicating access to an administrative share typically used in this attack context. Additionally, be vigilant for files within the 'SYSTEM32\\' directory that have a '.tmp' extension, as these are often signs of illicit activity related to dumping credentials. It's important to note that while these indicators can be significant, there might be rare cases where they do not signify malicious behavior; however, such instances are currently unknown, lending a high level of confidence to these detection criteria. This approach aligns with understanding tactics and techniques such as Credential Access through Credential Dumping, leveraging the tools like the 'impacket secretdump' utility often used by attackers to extract sensitive information from a compromised system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an internet hosted webdav share is mounted using the \"net.exe\" utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an internet hosted webdav share is mounted using the \"net.exe\" utility, you should: Monitor process creation events on Windows systems for the execution of \"net.exe\" or \"net1.exe\". Specifically, check for occurrences where the process image ends with '\\net.exe' or '\\net1.exe', and also verify the OriginalFileName attribute for these exact names. Furthermore, examine the command line arguments looking for instances containing ' use ' or ' http', as these are indicative of attempts to access or mount a webdav share over the internet. All of these conditions must be met simultaneously for an alert to be generated. Bear in mind that there might be legitimate uses of these commands that could trigger false positives, although no specific common false positive scenarios have been identified. The severity level for this detection is considered high due to the potential misuse of the net utility for mounting unauthorized or malicious webdav shares.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' use '\n            - ' http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' use '\n            - ' http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "when an internet hosted webdav share is mounted using the \"net.exe\" utility",
      "answer": "In order to detect when an internet hosted webdav share is mounted using the \"net.exe\" utility, you should: Monitor process creation events on Windows systems for the execution of \"net.exe\" or \"net1.exe\". Specifically, check for occurrences where the process image ends with '\\net.exe' or '\\net1.exe', and also verify the OriginalFileName attribute for these exact names. Furthermore, examine the command line arguments looking for instances containing ' use ' or ' http', as these are indicative of attempts to access or mount a webdav share over the internet. All of these conditions must be met simultaneously for an alert to be generated. Bear in mind that there might be legitimate uses of these commands that could trigger false positives, although no specific common false positive scenarios have been identified. The severity level for this detection is considered high due to the potential misuse of the net utility for mounting unauthorized or malicious webdav shares."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as\na precursor for Collection and to identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify adversaries looking for folders and drives shared on remote systems as a means of finding information sources for collection and spotting potential targets for lateral movement, you should monitor Windows PowerShell script logs, specifically focusing on instances where the command `get-smbshare` is used. This command is usually employed to retrieve shared folders and drives on the network, which could indicate someone is scanning for shared resources. Enabling Script Block Logging on Windows systems is essential for capturing the relevant details needed for this detection. It's important to note that while this method of detection has a low level of false positives, unanticipated or unknown benign activities could trigger an alert. This approach aligns with understanding tactics related to Discovery and Lateral Movement by looking for techniques that involve collection from remote systems and movement within the network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as\na precursor for Collection and to identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
      "answer": "In order to identify adversaries looking for folders and drives shared on remote systems as a means of finding information sources for collection and spotting potential targets for lateral movement, you should monitor Windows PowerShell script logs, specifically focusing on instances where the command `get-smbshare` is used. This command is usually employed to retrieve shared folders and drives on the network, which could indicate someone is scanning for shared resources. Enabling Script Block Logging on Windows systems is essential for capturing the relevant details needed for this detection. It's important to note that while this method of detection has a low level of false positives, unanticipated or unknown benign activities could trigger an alert. This approach aligns with understanding tactics related to Discovery and Lateral Movement by looking for techniques that involve collection from remote systems and movement within the network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempts of Sitecore Experience Platform Pre-Auth RCE CVE-2021-42237 found in Report.ashx.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts of Sitecore Experience Platform Pre-Auth RCE CVE-2021-42237 found in Report.ashx, you should: Monitor web server logs for specific patterns of attack that signify unauthorized attempts to exploit the vulnerability in the Sitecore Experience Platform. Specifically, watch for POST requests to the '/sitecore/shell/ClientBin/Reporting/Report.ashx' URI. These requests must successfully complete with HTTP status code 200 to be considered as potential exploitation attempts. Be aware that some benign activities, like vulnerability scanning, might generate similar traffic patterns and could be mistakenly flagged as false positives. Therefore, it's essential to investigate flagged events to rule out legitimate activities. This approach is crucial for identifying and mitigating attempts to exploit this specific vulnerability, tagged with tactics and techniques such as Execution and Command and Control, within the environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains: '/sitecore/shell/ClientBin/Reporting/Report.ashx'\n        sc-status: 200\n    condition: selection\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains: '/sitecore/shell/ClientBin/Reporting/Report.ashx'\n        sc-status: 200\n    condition: selection\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
      "question": "exploitation attempts of Sitecore Experience Platform Pre-Auth RCE CVE-2021-42237 found in Report.ashx",
      "answer": "In order to detect exploitation attempts of Sitecore Experience Platform Pre-Auth RCE CVE-2021-42237 found in Report.ashx, you should: Monitor web server logs for specific patterns of attack that signify unauthorized attempts to exploit the vulnerability in the Sitecore Experience Platform. Specifically, watch for POST requests to the '/sitecore/shell/ClientBin/Reporting/Report.ashx' URI. These requests must successfully complete with HTTP status code 200 to be considered as potential exploitation attempts. Be aware that some benign activities, like vulnerability scanning, might generate similar traffic patterns and could be mistakenly flagged as false positives. Therefore, it's essential to investigate flagged events to rule out legitimate activities. This approach is crucial for identifying and mitigating attempts to exploit this specific vulnerability, tagged with tactics and techniques such as Execution and Command and Control, within the environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting abuse of custom file open handler, executing powershell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the abuse of custom file open handler, executing PowerShell, you should: Focus on monitoring Windows registry settings modifications. Specifically, watch for any changes to registry entries associated with file open commands (`shell\\open\\command\\`). These entries, when altered, might be leveraged by attackers to execute arbitrary PowerShell commands. A key indicator of such malicious activity includes modifications where both 'powershell' and '-command' strings are present in the details of the registry setting change, under the event type 'SetValue'. It's important to pay attention to these signs as they represent a high-level threat. Though there may be instances where these modifications don't signify malicious activity (unknown false positives), vigilance in tracking these specific alterations in registry settings is crucial for identifying potential abuse of file handlers to execute unauthorized PowerShell commands.\n\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: 'shell\\open\\command\\'\n        Details|contains|all:\n            - 'powershell'\n            - '-command'\n        EventType: SetValue\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: 'shell\\open\\command\\'\n        Details|contains|all:\n            - 'powershell'\n            - '-command'\n        EventType: SetValue\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "abuse of custom file open handler, executing powershell",
      "answer": "In order to detect the abuse of custom file open handler, executing PowerShell, you should: Focus on monitoring Windows registry settings modifications. Specifically, watch for any changes to registry entries associated with file open commands (`shell\\open\\command\\`). These entries, when altered, might be leveraged by attackers to execute arbitrary PowerShell commands. A key indicator of such malicious activity includes modifications where both 'powershell' and '-command' strings are present in the details of the registry setting change, under the event type 'SetValue'. It's important to pay attention to these signs as they represent a high-level threat. Though there may be instances where these modifications don't signify malicious activity (unknown false positives), vigilance in tracking these specific alterations in registry settings is crucial for identifying potential abuse of file handlers to execute unauthorized PowerShell commands.\n\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"odbcconf\" with the \"REGSVR\" action where the DLL in question doesn't contain a \".dll\" extension. Which is often used as a method to evade defenses..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"odbcconf\" with the \"REGSVR\" action where the DLL in question doesn't contain a \".dll\" extension, which is often used as a method to evade defenses, you should: Monitor process creation events on Windows systems, focusing on the execution of 'odbcconf.exe'. Specifically, look for instances where the process image ends with '\\odbcconf.exe' or the OriginalFileName attribute is 'odbcconf.exe'. Additionally, examine the command line for usage of the 'REGSVR ' string, which indicates an attempt to register a DLL. However, to accurately identify malicious behavior, ensure that the command line does not contain references to a legitimate \".dll\" file extension. This detection strategy helps in identifying attempts to misuse 'odbcconf.exe' for registering malicious code without the typical DLL extension, thereby aiming to bypass security measures. The likelihood of false positives for this behavior is considered to be unlikely, and the severity is regarded as high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains: 'REGSVR '\n    filter_main_dll_ext:\n        CommandLine|contains: '.dll'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains: 'REGSVR '\n    filter_main_dll_ext:\n        CommandLine|contains: '.dll'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of \"odbcconf\" with the \"REGSVR\" action where the DLL in question doesn't contain a \".dll\" extension. Which is often used as a method to evade defenses.",
      "answer": "In order to detect execution of \"odbcconf\" with the \"REGSVR\" action where the DLL in question doesn't contain a \".dll\" extension, which is often used as a method to evade defenses, you should: Monitor process creation events on Windows systems, focusing on the execution of 'odbcconf.exe'. Specifically, look for instances where the process image ends with '\\odbcconf.exe' or the OriginalFileName attribute is 'odbcconf.exe'. Additionally, examine the command line for usage of the 'REGSVR ' string, which indicates an attempt to register a DLL. However, to accurately identify malicious behavior, ensure that the command line does not contain references to a legitimate \".dll\" file extension. This detection strategy helps in identifying attempts to misuse 'odbcconf.exe' for registering malicious code without the typical DLL extension, thereby aiming to bypass security measures. The likelihood of false positives for this behavior is considered to be unlikely, and the severity is regarded as high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting High DNS queries bytes amount from host per short period of time.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect high DNS queries bytes amount from a host per short period of time, you should: Monitor DNS logs for any source IP address that generates a total sum of DNS query lengths exceeding 300,000 bytes within a timeframe of 1 minute. It's important to pay attention to any DNS activity that unusually uses a large amount of data in short intervals, as this could indicate a potential security threat. However, be mindful that there might be legitimate scenarios where high DNS bytes out rate to a domain name occurs, and such cases should be added to a whitelist to avoid false positives. This detection process is crucial for identifying possible data exfiltration or command and control communication attempts, linked to tactics and techniques such as Command and Control and Exfiltration. The severity level for this kind of activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: dns\ndetection:\n    selection:\n        query: '*'\n    timeframe: 1m\n    condition: selection | sum(question_length) by src_ip > 300000\nfalsepositives:\n    - Legitimate high DNS bytes out rate to domain name which should be added to whitelist\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns\ndetection:\n    selection:\n        query: '*'\n    timeframe: 1m\n    condition: selection | sum(question_length) by src_ip > 300000\nfalsepositives:\n    - Legitimate high DNS bytes out rate to domain name which should be added to whitelist\nlevel: medium\n",
      "question": "High DNS queries bytes amount from host per short period of time",
      "answer": "In order to detect high DNS queries bytes amount from a host per short period of time, you should: Monitor DNS logs for any source IP address that generates a total sum of DNS query lengths exceeding 300,000 bytes within a timeframe of 1 minute. It's important to pay attention to any DNS activity that unusually uses a large amount of data in short intervals, as this could indicate a potential security threat. However, be mindful that there might be legitimate scenarios where high DNS bytes out rate to a domain name occurs, and such cases should be added to a whitelist to avoid false positives. This detection process is crucial for identifying possible data exfiltration or command and control communication attempts, linked to tactics and techniques such as Command and Control and Exfiltration. The severity level for this kind of activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Ransomware create txt file in the user Desktop.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a ransomware attempt to create a txt file on the user's desktop, you should: Monitor Windows file events specifically looking for instances where the command prompt (cmd.exe) is involved in creating files. Pay special attention to files that have a '.txt' extension and are located within the Desktop directory of any user profile. The detection framework should raise an alert at a high level when these specific conditions are met, indicating a possible ransomware activity. This monitoring strategy relies on the premise that legitimate software and user activities seldom use the command prompt to create text files on the desktop, making this behavior suspicious and worth investigating further.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        TargetFilename|contains|all:\n            - '\\Users\\'\n            - '\\Desktop\\'\n        TargetFilename|endswith: '.txt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        TargetFilename|contains|all:\n            - '\\Users\\'\n            - '\\Desktop\\'\n        TargetFilename|endswith: '.txt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Ransomware create txt file in the user Desktop",
      "answer": "In order to detect a ransomware attempt to create a txt file on the user's desktop, you should: Monitor Windows file events specifically looking for instances where the command prompt (cmd.exe) is involved in creating files. Pay special attention to files that have a '.txt' extension and are located within the Desktop directory of any user profile. The detection framework should raise an alert at a high level when these specific conditions are met, indicating a possible ransomware activity. This monitoring strategy relies on the premise that legitimate software and user activities seldom use the command prompt to create text files on the desktop, making this behavior suspicious and worth investigating further."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting kerberos TGS request using RC4 encryption which may be indicative of kerberoasting.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect kerberos TGS request using RC4 encryption which may be indicative of kerberoasting, you should: Focus on analyzing Zeek logs specifically from the Kerberos service. Look for Ticket-Granting Service (TGS) requests that use RC4-HMAC encryption. It's important to filter out any service account requests that start with a '$', as these are generally considered normal enterprise Service Principal Name (SPN) request activities and not part of this detection strategy. Recognize that events meeting these criteria might indicate a potential kerberoasting attack, aiming to crack service account passwords. This detection strategy is of a medium level of urgency and helps in identifying possible malicious activities related to credential theft and lateral movement, aligning with tactics and techniques such as Credential Access through Kerberoasting. Keep in mind that while this method can be effective, it may also yield false positives in the form of normal enterprise SPN requests activity, requiring further investigation to confirm malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: kerberos\ndetection:\n    selection:\n        request_type: 'TGS'\n        cipher: 'rc4-hmac'\n    computer_acct:\n        service|startswith: '$'\n    condition: selection and not computer_acct\nfalsepositives:\n    - Normal enterprise SPN requests activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: kerberos\ndetection:\n    selection:\n        request_type: 'TGS'\n        cipher: 'rc4-hmac'\n    computer_acct:\n        service|startswith: '$'\n    condition: selection and not computer_acct\nfalsepositives:\n    - Normal enterprise SPN requests activity\nlevel: medium\n",
      "question": "kerberos TGS request using RC4 encryption which may be indicative of kerberoasting",
      "answer": "In order to detect kerberos TGS request using RC4 encryption which may be indicative of kerberoasting, you should: Focus on analyzing Zeek logs specifically from the Kerberos service. Look for Ticket-Granting Service (TGS) requests that use RC4-HMAC encryption. It's important to filter out any service account requests that start with a '$', as these are generally considered normal enterprise Service Principal Name (SPN) request activities and not part of this detection strategy. Recognize that events meeting these criteria might indicate a potential kerberoasting attack, aiming to crack service account passwords. This detection strategy is of a medium level of urgency and helps in identifying possible malicious activities related to credential theft and lateral movement, aligning with tactics and techniques such as Credential Access through Kerberoasting. Keep in mind that while this method can be effective, it may also yield false positives in the form of normal enterprise SPN requests activity, requiring further investigation to confirm malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting enumeration of local network configuration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect enumeration of local network configuration, you should monitor process creation logs on Linux systems for the execution of command-line tools typically used for network configuration and monitoring. These tools include `firewall-cmd`, `ufw`, `iptables`, `netstat`, `ss`, `ip`, `ifconfig`, `systemd-resolve`, and `route`. Additionally, watch for any commands that contain references to `/etc/resolv.conf`, as manipulation or querying of DNS settings can be indicative of an attacker trying to understand the local network better. It's important to consider that such activities could also reflect legitimate administration tasks. The analysis of logs should focus on identifying unauthorized or unexpected invocations of these utilities, which might suggest an adversary is trying to gather information about the network's configuration and defenses. This monitoring is categorized as informational due to the possibility of false positives, which could arise from regular system administration work.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/firewall-cmd'\n            - '/ufw'\n            - '/iptables'\n            - '/netstat'\n            - '/ss'\n            - '/ip'\n            - '/ifconfig'\n            - '/systemd-resolve'\n            - '/route'\n    selection_cli:\n        CommandLine|contains: '/etc/resolv.conf'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/firewall-cmd'\n            - '/ufw'\n            - '/iptables'\n            - '/netstat'\n            - '/ss'\n            - '/ip'\n            - '/ifconfig'\n            - '/systemd-resolve'\n            - '/route'\n    selection_cli:\n        CommandLine|contains: '/etc/resolv.conf'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
      "question": "enumeration of local network configuration",
      "answer": "In order to detect enumeration of local network configuration, you should monitor process creation logs on Linux systems for the execution of command-line tools typically used for network configuration and monitoring. These tools include `firewall-cmd`, `ufw`, `iptables`, `netstat`, `ss`, `ip`, `ifconfig`, `systemd-resolve`, and `route`. Additionally, watch for any commands that contain references to `/etc/resolv.conf`, as manipulation or querying of DNS settings can be indicative of an attacker trying to understand the local network better. It's important to consider that such activities could also reflect legitimate administration tasks. The analysis of logs should focus on identifying unauthorized or unexpected invocations of these utilities, which might suggest an adversary is trying to gather information about the network's configuration and defenses. This monitoring is categorized as informational due to the possibility of false positives, which could arise from regular system administration work."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting extraction of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect extraction of files with the usage of steghide binary, as adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for audit logs that capture execution events (EXECVE) specifically involving the 'steghide' command line tool. Look for instances where this tool is used to execute the 'extract' command, indicating an attempt to extract hidden information. This should particularly raise attention when the '-sf' argument is spotted, followed by a file name that ends with '.jpg' or '.png'. These file types are commonly associated with this form of information hiding. This behavior, while suspicious, is considered to have a low level of certainty regarding maliciousness, due to potential legitimate uses of steganography. Therefore, it's crucial to investigate these events when they occur to determine if they are part of a security incident or a benign activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: steghide\n        a1: extract\n        a2: '-sf'\n        a3|endswith:\n            - '.jpg'\n            - '.png'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: steghide\n        a1: extract\n        a2: '-sf'\n        a3|endswith:\n            - '.jpg'\n            - '.png'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "extraction of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information.",
      "answer": "In order to detect extraction of files with the usage of steghide binary, as adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for audit logs that capture execution events (EXECVE) specifically involving the 'steghide' command line tool. Look for instances where this tool is used to execute the 'extract' command, indicating an attempt to extract hidden information. This should particularly raise attention when the '-sf' argument is spotted, followed by a file name that ends with '.jpg' or '.png'. These file types are commonly associated with this form of information hiding. This behavior, while suspicious, is considered to have a low level of certainty regarding maliciousness, due to potential legitimate uses of steganography. Therefore, it's crucial to investigate these events when they occur to determine if they are part of a security incident or a benign activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Code Integrity (CI) engine blocking processes from loading unsigned DLLs residing in suspicious locations.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Code Integrity (CI) engine blocking processes from loading unsigned DLLs residing in suspicious locations, you should: Monitor for event ID 11 and 12 from Windows security mitigations service, which indicates an attempt to load DLLs. Specifically, watch for DLLs that are being loaded from locations that are commonly used by attackers to store malicious files. These locations include user public folders (`\\Users\\Public\\`), performance logs (`\\PerfLogs\\`), desktop folders (`\\Desktop\\`), downloads folders (`\\Downloads\\`), local application data temporary folders (`\\AppData\\Local\\Temp\\`), and Windows temporary folder (`C:\\Windows\\TEMP\\`). Any DLL load attempt from these paths should be scrutinized, as they signify a high risk of a Code Integrity policy preventing a process from executing potentially harmful unsigned DLLs.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security-mitigations\ndetection:\n    selection:\n        EventID:\n            - 11\n            - 12\n        ImageName|contains:\n            - '\\Users\\Public\\'\n            - '\\PerfLogs\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Windows\\TEMP\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security-mitigations\ndetection:\n    selection:\n        EventID:\n            - 11\n            - 12\n        ImageName|contains:\n            - '\\Users\\Public\\'\n            - '\\PerfLogs\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Windows\\TEMP\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Code Integrity (CI) engine blocking processes from loading unsigned DLLs residing in suspicious locations",
      "answer": "In order to detect Code Integrity (CI) engine blocking processes from loading unsigned DLLs residing in suspicious locations, you should: Monitor for event ID 11 and 12 from Windows security mitigations service, which indicates an attempt to load DLLs. Specifically, watch for DLLs that are being loaded from locations that are commonly used by attackers to store malicious files. These locations include user public folders (`\\Users\\Public\\`), performance logs (`\\PerfLogs\\`), desktop folders (`\\Desktop\\`), downloads folders (`\\Downloads\\`), local application data temporary folders (`\\AppData\\Local\\Temp\\`), and Windows temporary folder (`C:\\Windows\\TEMP\\`). Any DLL load attempt from these paths should be scrutinized, as they signify a high risk of a Code Integrity policy preventing a process from executing potentially harmful unsigned DLLs."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName|startswith: \n            - 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH'\n            - 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH'\n        operationName|endswith:\n            - '/CRONJOBS/WRITE'\n            - '/JOBS/WRITE'\n    condition: selection\nfalsepositives:\n    - Azure Kubernetes CronJob/Job may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName|startswith: \n            - 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH'\n            - 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH'\n        operationName|endswith:\n            - '/CRONJOBS/WRITE'\n            - '/JOBS/WRITE'\n    condition: selection\nfalsepositives:\n    - Azure Kubernetes CronJob/Job may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n",
      "answer": "In order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of known vulnerable drivers via their names only..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of known vulnerable drivers via their names only, you should monitor driver load activities on Windows operating systems for any instances where specific file names, associated with vulnerable drivers, are being loaded. These file names include a broad list, such as \u2018mtcbsv64.sys\u2019, \u2018bs_def64.sys\u2019, \u2018gameink.sys\u2019, and many others, which might indicate a potentially malicious activity if these files are being used exploitatively due to their known vulnerabilities. It is crucial to be aware that some false positives may occur, especially if a legitimate driver shares a name with one listed without having updated its name across versions. Ensuring the drivers being loaded are the legitimate and non-vulnerable versions is essential to accurately distinguish between genuine and malicious activities. The detection is tagged under tactics that often involve the exploitation of these vulnerabilities to execute code or perform actions with malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\mtcbsv64.sys'\n            - '\\bs_def64.sys'\n            - '\\gameink.sys'\n            - '\\81.sys'\n            - '\\bs_rcio.sys'\n            - '\\sense5ext.sys'\n            - '\\asrdrv10.sys'\n            - '\\gvcidrv64.sys'\n            - '\\wantd_5.sys'\n            - '\\driver7-x86-withoutdbg.sys'\n            - '\\atillk64.sys'\n            - '\\lurker.sys'\n            - '\\segwindrvx64.sys'\n            - '\\nt3.sys'\n            - '\\enetechio64.sys'\n            - '\\asio64.sys'\n            - '\\inpoutx64.sys'\n            - '\\windows8-10-32.sys'\n            - '\\directio.sys'\n            - '\\rtkio.sys'\n            - '\\corsairllaccess64.sys'\n            - '\\nt6.sys'\n            - '\\winflash64.sys'\n            - '\\paniox64.sys'\n            - '\\blackbonedrv10.sys'\n            - '\\msio32.sys'\n            - '\\fiddrv.sys'\n            - '\\asio.sys'\n            - '\\dbutildrv2.sys'\n            - '\\my.sys'\n            - '\\wantd_3.sys'\n            - '\\winio32a.sys'\n            - '\\wyproxy64.sys'\n            - '\\ni.sys'\n            - '\\bs_i2cio.sys'\n            - '\\kprocesshacker.sys'\n            - '\\protects.sys'\n            - '\\phymem64.sys'\n            - '\\proxy32.sys'\n            - '\\b.sys'\n            - '\\netproxydriver.sys'\n            - '\\bs_hwmio64_w10.sys'\n            - '\\physmem.sys'\n            - '\\asrsmartconnectdrv.sys'\n            - '\\b3.sys'\n            - '\\monitor_win10_x64.sys'\n            - '\\poortry2.sys'\n            - '\\amdryzenmasterdriver.sys'\n            - '\\t.sys'\n            - '\\sandra.sys'\n            - '\\bsmix64.sys'\n            - '\\bs_i2c64.sys'\n            - '\\wantd_6.sys'\n            - '\\bs_rcio64.sys'\n            - '\\zam64.sys'\n            - '\\viragt64.sys'\n            - '\\winio32b.sys'\n            - '\\poortry1.sys'\n            - '\\msio64.sys'\n            - '\\winio32.sys'\n            - '\\ncpl.sys'\n            - '\\nchgbios2x64.sys'\n            - '\\bwrsh.sys'\n            - '\\panio.sys'\n            - '\\lha.sys'\n            - '\\ntbios.sys'\n            - '\\blacklotus_driver.sys'\n            - '\\fidpcidrv.sys'\n            - '\\b4.sys'\n            - '\\mhyprot3.sys'\n            - '\\ucorew64.sys'\n            - '\\hwos2ec7x64.sys'\n            - '\\bsmemx64.sys'\n            - '\\windows7-32.sys'\n            - '\\asrdrv106.sys'\n            - '\\elbycdio.sys'\n            - '\\iomem64.sys'\n            - '\\asupio.sys'\n            - '\\otipcibus.sys'\n            - '\\windows-xp-64.sys'\n            - '\\aswarpot.sys'\n            - '\\amdpowerprofiler.sys'\n            - '\\d.sys'\n            - '\\2.sys'\n            - '\\tgsafe.sys'\n            - '\\ntiolib_x64.sys'\n            - '\\asrrapidstartdrv.sys'\n            - '\\1.sys'\n            - '\\hwos2ec10x64.sys'\n            - '\\daxin_blank5.sys'\n            - '\\viraglt64.sys'\n            - '\\iomap64.sys'\n            - '\\lv561av.sys'\n            - '\\nscm.sys'\n            - '\\c.sys'\n            - '\\asribdrv.sys'\n            - '\\b1.sys'\n            - '\\eneio64.sys'\n            - '\\capcom.sys'\n            - '\\80.sys'\n            - '\\asio32.sys'\n            - '\\iobitunlocker.sys'\n            - '\\zamguard64.sys'\n            - '\\nstrwsk.sys'\n            - '\\wiseunlo.sys'\n            - '\\t7.sys'\n            - '\\bs_hwmio64.sys'\n            - '\\hostnt.sys'\n            - '\\glckio2.sys'\n            - '\\hpportiox64.sys'\n            - '\\citmdrv_amd64.sys'\n            - '\\kevp64.sys'\n            - '\\bsmixp64.sys'\n            - '\\nbiolib_x64.sys'\n            - '\\d3.sys'\n            - '\\full.sys'\n            - '\\nvflash.sys'\n            - '\\rtcore64.sys'\n            - '\\speedfan.sys'\n            - '\\fidpcidrv64.sys'\n            - '\\hwrwdrv.sys'\n            - '\\msrhook.sys'\n            - '\\proxy64.sys'\n            - '\\7.sys'\n            - '\\winring0.sys'\n            - '\\hw_sys'\n            - '\\winio64b.sys'\n            - '\\semav6msr64.sys'\n            - '\\bandai.sys'\n            - '\\piddrv.sys'\n            - '\\t8.sys'\n            - '\\asrdrv103.sys'\n            - '\\adv64drv.sys'\n            - '\\asrsetupdrv103.sys'\n            - '\\bwrs.sys'\n            - '\\d4.sys'\n            - '\\dbk64.sys'\n            - '\\fiddrv64.sys'\n            - '\\goad.sys'\n            - '\\gametersafe.sys'\n            - '\\mhyprot2.sys'\n            - '\\lenovodiagnosticsdriver.sys'\n            - '\\netflt.sys'\n            - '\\bw.sys'\n            - '\\ntbios_2.sys'\n            - '\\dbutil.sys'\n            - '\\dh_kernel.sys'\n            - '\\rtkiow8x64.sys'\n            - '\\daxin_blank.sys'\n            - '\\superbmc.sys'\n            - '\\nodedriver.sys'\n            - '\\cpuz141.sys'\n            - '\\gftkyj64.sys'\n            - '\\d2.sys'\n            - '\\4.sys'\n            - '\\dh_kernel_10.sys'\n            - '\\naldrv.sys'\n            - '\\winiodrv.sys'\n            - '\\asmmap64.sys'\n            - '\\smep_namco.sys'\n            - '\\mhyprot.sys'\n            - '\\iqvw64e.sys'\n            - '\\nstr.sys'\n            - '\\ntiolib.sys'\n            - '\\pciecubed.sys'\n            - '\\vmdrv.sys'\n            - '\\daxin_blank2.sys'\n            - '\\atszio.sys'\n            - '\\agent64.sys'\n            - '\\cpupress.sys'\n            - '\\driver7-x86.sys'\n            - '\\krpocesshacker.sys'\n            - '\\asrdrv102.sys'\n            - '\\aswvmm.sys'\n            - '\\tmcomm.sys'\n            - '\\bs_def.sys'\n            - '\\bsmi.sys'\n            - '\\alsysio64.sys'\n            - '\\cpuz.sys'\n            - '\\daxin_blank1.sys'\n            - '\\amifldrv64.sys'\n            - '\\rwdrv.sys'\n            - '\\testbone.sys'\n            - '\\winio64c.sys'\n            - '\\winring0x64.sys'\n            - '\\nt4.sys'\n            - '\\procexp.sys'\n            - '\\winio64.sys'\n            - '\\se64a.sys'\n            - '\\air_system10.sys'\n            - '\\wantd.sys'\n            - '\\wcpu.sys'\n            - '\\nicm.sys'\n            - '\\daxin_blank6.sys'\n            - '\\kbdcap64.sys'\n            - '\\lctka.sys'\n            - '\\nvflsh64.sys'\n            - '\\phlashnt.sys'\n            - '\\viragt.sys'\n            - '\\atszio64.sys'\n            - '\\dbutil_2_3.sys'\n            - '\\phymemx64.sys'\n            - '\\wantd_4.sys'\n            - '\\ndislan.sys'\n            - '\\panmonfltx64.sys'\n            - '\\t3.sys'\n            - '\\panmonflt.sys'\n            - '\\daxin_blank3.sys'\n            - '\\gdrv.sys'\n            - '\\smep_capcom.sys'\n            - '\\wyproxy32.sys'\n            - '\\black.sys'\n            - '\\vboxdrv.sys'\n            - '\\cpuz_x64.sys'\n            - '\\poortry.sys'\n            - '\\mydrivers.sys'\n            - '\\winio64a.sys'\n            - '\\openlibsys.sys'\n            - '\\bs_flash64.sys'\n            - '\\vproeventmonitor.sys'\n            - '\\piddrv64.sys'\n            - '\\wantd_2.sys'\n            - '\\sysinfo.sys'\n            - '\\asrdrv104.sys'\n            - '\\netfilterdrv.sys'\n            - '\\libnicm.sys'\n            - '\\driver7-x64.sys'\n            - '\\semav6msr.sys'\n            - '\\pchunter.sys'\n            - '\\asupio64.sys'\n            - '\\rtkio64.sys'\n            - '\\rzpnk.sys'\n            - '\\magdrvamd64.sys'\n            - '\\elrawdsk.sys'\n            - '\\amp.sys'\n            - '\\asrautochkupddrv.sys'\n            - '\\lgdcatcher.sys'\n            - '\\fairplaykd.sys'\n            - '\\daxin_blank4.sys'\n            - '\\rtkiow10x64.sys'\n            - '\\citmdrv_ia64.sys'\n            - '\\nt5.sys'\n            - '\\asromgdrv.sys'\n            - '\\nt2.sys'\n            - '\\asrdrv101.sys'\n    condition: selection\nfalsepositives:\n    - False positives may occur if one of the vulnerable driver names mentioned above didn't change its name between versions. So always make sure that the driver being loaded is the legitimate one and the non vulnerable version.\n    - If you experience a lot of FP you could comment the driver name or its exact known legitimate location (when possible)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\mtcbsv64.sys'\n            - '\\bs_def64.sys'\n            - '\\gameink.sys'\n            - '\\81.sys'\n            - '\\bs_rcio.sys'\n            - '\\sense5ext.sys'\n            - '\\asrdrv10.sys'\n            - '\\gvcidrv64.sys'\n            - '\\wantd_5.sys'\n            - '\\driver7-x86-withoutdbg.sys'\n            - '\\atillk64.sys'\n            - '\\lurker.sys'\n            - '\\segwindrvx64.sys'\n            - '\\nt3.sys'\n            - '\\enetechio64.sys'\n            - '\\asio64.sys'\n            - '\\inpoutx64.sys'\n            - '\\windows8-10-32.sys'\n            - '\\directio.sys'\n            - '\\rtkio.sys'\n            - '\\corsairllaccess64.sys'\n            - '\\nt6.sys'\n            - '\\winflash64.sys'\n            - '\\paniox64.sys'\n            - '\\blackbonedrv10.sys'\n            - '\\msio32.sys'\n            - '\\fiddrv.sys'\n            - '\\asio.sys'\n            - '\\dbutildrv2.sys'\n            - '\\my.sys'\n            - '\\wantd_3.sys'\n            - '\\winio32a.sys'\n            - '\\wyproxy64.sys'\n            - '\\ni.sys'\n            - '\\bs_i2cio.sys'\n            - '\\kprocesshacker.sys'\n            - '\\protects.sys'\n            - '\\phymem64.sys'\n            - '\\proxy32.sys'\n            - '\\b.sys'\n            - '\\netproxydriver.sys'\n            - '\\bs_hwmio64_w10.sys'\n            - '\\physmem.sys'\n            - '\\asrsmartconnectdrv.sys'\n            - '\\b3.sys'\n            - '\\monitor_win10_x64.sys'\n            - '\\poortry2.sys'\n            - '\\amdryzenmasterdriver.sys'\n            - '\\t.sys'\n            - '\\sandra.sys'\n            - '\\bsmix64.sys'\n            - '\\bs_i2c64.sys'\n            - '\\wantd_6.sys'\n            - '\\bs_rcio64.sys'\n            - '\\zam64.sys'\n            - '\\viragt64.sys'\n            - '\\winio32b.sys'\n            - '\\poortry1.sys'\n            - '\\msio64.sys'\n            - '\\winio32.sys'\n            - '\\ncpl.sys'\n            - '\\nchgbios2x64.sys'\n            - '\\bwrsh.sys'\n            - '\\panio.sys'\n            - '\\lha.sys'\n            - '\\ntbios.sys'\n            - '\\blacklotus_driver.sys'\n            - '\\fidpcidrv.sys'\n            - '\\b4.sys'\n            - '\\mhyprot3.sys'\n            - '\\ucorew64.sys'\n            - '\\hwos2ec7x64.sys'\n            - '\\bsmemx64.sys'\n            - '\\windows7-32.sys'\n            - '\\asrdrv106.sys'\n            - '\\elbycdio.sys'\n            - '\\iomem64.sys'\n            - '\\asupio.sys'\n            - '\\otipcibus.sys'\n            - '\\windows-xp-64.sys'\n            - '\\aswarpot.sys'\n            - '\\amdpowerprofiler.sys'\n            - '\\d.sys'\n            - '\\2.sys'\n            - '\\tgsafe.sys'\n            - '\\ntiolib_x64.sys'\n            - '\\asrrapidstartdrv.sys'\n            - '\\1.sys'\n            - '\\hwos2ec10x64.sys'\n            - '\\daxin_blank5.sys'\n            - '\\viraglt64.sys'\n            - '\\iomap64.sys'\n            - '\\lv561av.sys'\n            - '\\nscm.sys'\n            - '\\c.sys'\n            - '\\asribdrv.sys'\n            - '\\b1.sys'\n            - '\\eneio64.sys'\n            - '\\capcom.sys'\n            - '\\80.sys'\n            - '\\asio32.sys'\n            - '\\iobitunlocker.sys'\n            - '\\zamguard64.sys'\n            - '\\nstrwsk.sys'\n            - '\\wiseunlo.sys'\n            - '\\t7.sys'\n            - '\\bs_hwmio64.sys'\n            - '\\hostnt.sys'\n            - '\\glckio2.sys'\n            - '\\hpportiox64.sys'\n            - '\\citmdrv_amd64.sys'\n            - '\\kevp64.sys'\n            - '\\bsmixp64.sys'\n            - '\\nbiolib_x64.sys'\n            - '\\d3.sys'\n            - '\\full.sys'\n            - '\\nvflash.sys'\n            - '\\rtcore64.sys'\n            - '\\speedfan.sys'\n            - '\\fidpcidrv64.sys'\n            - '\\hwrwdrv.sys'\n            - '\\msrhook.sys'\n            - '\\proxy64.sys'\n            - '\\7.sys'\n            - '\\winring0.sys'\n            - '\\hw_sys'\n            - '\\winio64b.sys'\n            - '\\semav6msr64.sys'\n            - '\\bandai.sys'\n            - '\\piddrv.sys'\n            - '\\t8.sys'\n            - '\\asrdrv103.sys'\n            - '\\adv64drv.sys'\n            - '\\asrsetupdrv103.sys'\n            - '\\bwrs.sys'\n            - '\\d4.sys'\n            - '\\dbk64.sys'\n            - '\\fiddrv64.sys'\n            - '\\goad.sys'\n            - '\\gametersafe.sys'\n            - '\\mhyprot2.sys'\n            - '\\lenovodiagnosticsdriver.sys'\n            - '\\netflt.sys'\n            - '\\bw.sys'\n            - '\\ntbios_2.sys'\n            - '\\dbutil.sys'\n            - '\\dh_kernel.sys'\n            - '\\rtkiow8x64.sys'\n            - '\\daxin_blank.sys'\n            - '\\superbmc.sys'\n            - '\\nodedriver.sys'\n            - '\\cpuz141.sys'\n            - '\\gftkyj64.sys'\n            - '\\d2.sys'\n            - '\\4.sys'\n            - '\\dh_kernel_10.sys'\n            - '\\naldrv.sys'\n            - '\\winiodrv.sys'\n            - '\\asmmap64.sys'\n            - '\\smep_namco.sys'\n            - '\\mhyprot.sys'\n            - '\\iqvw64e.sys'\n            - '\\nstr.sys'\n            - '\\ntiolib.sys'\n            - '\\pciecubed.sys'\n            - '\\vmdrv.sys'\n            - '\\daxin_blank2.sys'\n            - '\\atszio.sys'\n            - '\\agent64.sys'\n            - '\\cpupress.sys'\n            - '\\driver7-x86.sys'\n            - '\\krpocesshacker.sys'\n            - '\\asrdrv102.sys'\n            - '\\aswvmm.sys'\n            - '\\tmcomm.sys'\n            - '\\bs_def.sys'\n            - '\\bsmi.sys'\n            - '\\alsysio64.sys'\n            - '\\cpuz.sys'\n            - '\\daxin_blank1.sys'\n            - '\\amifldrv64.sys'\n            - '\\rwdrv.sys'\n            - '\\testbone.sys'\n            - '\\winio64c.sys'\n            - '\\winring0x64.sys'\n            - '\\nt4.sys'\n            - '\\procexp.sys'\n            - '\\winio64.sys'\n            - '\\se64a.sys'\n            - '\\air_system10.sys'\n            - '\\wantd.sys'\n            - '\\wcpu.sys'\n            - '\\nicm.sys'\n            - '\\daxin_blank6.sys'\n            - '\\kbdcap64.sys'\n            - '\\lctka.sys'\n            - '\\nvflsh64.sys'\n            - '\\phlashnt.sys'\n            - '\\viragt.sys'\n            - '\\atszio64.sys'\n            - '\\dbutil_2_3.sys'\n            - '\\phymemx64.sys'\n            - '\\wantd_4.sys'\n            - '\\ndislan.sys'\n            - '\\panmonfltx64.sys'\n            - '\\t3.sys'\n            - '\\panmonflt.sys'\n            - '\\daxin_blank3.sys'\n            - '\\gdrv.sys'\n            - '\\smep_capcom.sys'\n            - '\\wyproxy32.sys'\n            - '\\black.sys'\n            - '\\vboxdrv.sys'\n            - '\\cpuz_x64.sys'\n            - '\\poortry.sys'\n            - '\\mydrivers.sys'\n            - '\\winio64a.sys'\n            - '\\openlibsys.sys'\n            - '\\bs_flash64.sys'\n            - '\\vproeventmonitor.sys'\n            - '\\piddrv64.sys'\n            - '\\wantd_2.sys'\n            - '\\sysinfo.sys'\n            - '\\asrdrv104.sys'\n            - '\\netfilterdrv.sys'\n            - '\\libnicm.sys'\n            - '\\driver7-x64.sys'\n            - '\\semav6msr.sys'\n            - '\\pchunter.sys'\n            - '\\asupio64.sys'\n            - '\\rtkio64.sys'\n            - '\\rzpnk.sys'\n            - '\\magdrvamd64.sys'\n            - '\\elrawdsk.sys'\n            - '\\amp.sys'\n            - '\\asrautochkupddrv.sys'\n            - '\\lgdcatcher.sys'\n            - '\\fairplaykd.sys'\n            - '\\daxin_blank4.sys'\n            - '\\rtkiow10x64.sys'\n            - '\\citmdrv_ia64.sys'\n            - '\\nt5.sys'\n            - '\\asromgdrv.sys'\n            - '\\nt2.sys'\n            - '\\asrdrv101.sys'\n    condition: selection\nfalsepositives:\n    - False positives may occur if one of the vulnerable driver names mentioned above didn't change its name between versions. So always make sure that the driver being loaded is the legitimate one and the non vulnerable version.\n    - If you experience a lot of FP you could comment the driver name or its exact known legitimate location (when possible)\nlevel: medium\n",
      "question": "load of known vulnerable drivers via their names only.",
      "answer": "In order to detect the load of known vulnerable drivers via their names only, you should monitor driver load activities on Windows operating systems for any instances where specific file names, associated with vulnerable drivers, are being loaded. These file names include a broad list, such as \u2018mtcbsv64.sys\u2019, \u2018bs_def64.sys\u2019, \u2018gameink.sys\u2019, and many others, which might indicate a potentially malicious activity if these files are being used exploitatively due to their known vulnerabilities. It is crucial to be aware that some false positives may occur, especially if a legitimate driver shares a name with one listed without having updated its name across versions. Ensuring the drivers being loaded are the legitimate and non-vulnerable versions is essential to accurately distinguish between genuine and malicious activities. The detection is tagged under tactics that often involve the exploitation of these vulnerabilities to execute code or perform actions with malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Access to Domain Group Policies stored in SYSVOL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect access to Domain Group Policies stored in SYSVOL, you should monitor for the creation of processes on Windows systems that involve command lines containing both '\\SYSVOL\\' and '\\policies\\' paths. This is indicative of activities related to accessing or manipulating Domain Group Policies which are typically stored within the SYSVOL folder on domain controllers. Be aware that genuine administrative activities can also trigger this detection due to legitimate access to the SYSVOL directory, thus these should be considered as potential false positives. The severity of this rule is deemed medium, reflecting the importance of vigilance against unauthorized attempts to access or alter domain policies, which could signify a security threat or an attempt to assert control over domain resources and settings.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SYSVOL\\'\n            - '\\policies\\'\n    condition: selection\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SYSVOL\\'\n            - '\\policies\\'\n    condition: selection\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
      "question": "Access to Domain Group Policies stored in SYSVOL",
      "answer": "In order to detect access to Domain Group Policies stored in SYSVOL, you should monitor for the creation of processes on Windows systems that involve command lines containing both '\\SYSVOL\\' and '\\policies\\' paths. This is indicative of activities related to accessing or manipulating Domain Group Policies which are typically stored within the SYSVOL folder on domain controllers. Be aware that genuine administrative activities can also trigger this detection due to legitimate access to the SYSVOL directory, thus these should be considered as potential false positives. The severity of this rule is deemed medium, reflecting the importance of vigilance against unauthorized attempts to access or alter domain policies, which could signify a security threat or an attempt to assert control over domain resources and settings."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect potential adversaries leveraging WMI ActiveScriptEventConsumers remotely to move laterally in a network.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential adversaries leveraging WMI ActiveScriptEventConsumers remotely to move laterally in a network, you should: Focus on monitoring Windows security event logs for specific activities. Look for events with an ID of 4624, which indicates a successful account logon event. This event alone isn't unusual, but when it includes a Logon Type of 3, it points to a network logon, which is often used in lateral movement. Moreover, pay special attention when the logon event is associated with the process name ending in 'scrcons.exe'. This executable is related to WMI (Windows Management Instrumentation), and its involvement in a network logon event can indicate adversaries are executing scripts or commands remotely, possibly to move laterally within the network. However, be cautious with events where the TargetLogonId is '0x3e7' as these can be legitimate system activities and should not be considered in this detection logic to avoid false positives. Recognize that legitimate operations, like those performed by SCCM (System Center Configuration Manager), might generate similar events, thus they should be acknowledged as potential sources of false positives. The detection strategy is underpinned by MITRE ATT&CK tactics and techniques, notably those associated with lateral movement.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 3\n        ProcessName|endswith: 'scrcons.exe'\n    filter:\n        TargetLogonId: '0x3e7'\n    condition: selection and not filter\nfalsepositives:\n    - SCCM\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 3\n        ProcessName|endswith: 'scrcons.exe'\n    filter:\n        TargetLogonId: '0x3e7'\n    condition: selection and not filter\nfalsepositives:\n    - SCCM\nlevel: high\n",
      "question": "Detect potential adversaries leveraging WMI ActiveScriptEventConsumers remotely to move laterally in a network",
      "answer": "In order to detect potential adversaries leveraging WMI ActiveScriptEventConsumers remotely to move laterally in a network, you should: Focus on monitoring Windows security event logs for specific activities. Look for events with an ID of 4624, which indicates a successful account logon event. This event alone isn't unusual, but when it includes a Logon Type of 3, it points to a network logon, which is often used in lateral movement. Moreover, pay special attention when the logon event is associated with the process name ending in 'scrcons.exe'. This executable is related to WMI (Windows Management Instrumentation), and its involvement in a network logon event can indicate adversaries are executing scripts or commands remotely, possibly to move laterally within the network. However, be cautious with events where the TargetLogonId is '0x3e7' as these can be legitimate system activities and should not be considered in this detection logic to avoid false positives. Recognize that legitimate operations, like those performed by SCCM (System Center Configuration Manager), might generate similar events, thus they should be acknowledged as potential sources of false positives. The detection strategy is underpinned by MITRE ATT&CK tactics and techniques, notably those associated with lateral movement."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process execution related exceptions in JVM based apps, often relates to RCE.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process execution related exceptions in JVM based apps, often relates to RCE, you should: Focus on application error logs from Java Virtual Machine (JVM) based applications, ensuring these logs are collected at an error level of LOG_LEVEL=ERROR and above. Look specifically for entries that contain any of the following keywords: 'Cannot run program', 'java.lang.ProcessImpl', or 'java.lang.ProcessBuilder'. These particular phrases are strong indicators of exceptions related to process execution attempts, which can be associated with remote code execution (RCE) attacks. It's important to note that while these detections are set at a high level of importance due to their potential security implications, there might be false positives arising from bugs within the application itself.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: application\n    product: jvm\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'Cannot run program'\n        - 'java.lang.ProcessImpl'\n        - 'java.lang.ProcessBuilder'\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: application\n    product: jvm\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'Cannot run program'\n        - 'java.lang.ProcessImpl'\n        - 'java.lang.ProcessBuilder'\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: high\n",
      "question": "process execution related exceptions in JVM based apps, often relates to RCE",
      "answer": "In order to detect process execution related exceptions in JVM based apps, often relates to RCE, you should: Focus on application error logs from Java Virtual Machine (JVM) based applications, ensuring these logs are collected at an error level of LOG_LEVEL=ERROR and above. Look specifically for entries that contain any of the following keywords: 'Cannot run program', 'java.lang.ProcessImpl', or 'java.lang.ProcessBuilder'. These particular phrases are strong indicators of exceptions related to process execution attempts, which can be associated with remote code execution (RCE) attacks. It's important to note that while these detections are set at a high level of importance due to their potential security implications, there might be false positives arising from bugs within the application itself."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious files created by Microsoft Sync Center (mobsync).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious files created by Microsoft Sync Center (mobsync), you should: monitor file event logs on Windows systems, focusing specifically on events where the Microsoft Sync Center executable ('mobsync.exe') is involved. Pay particular attention to the creation of new files with extensions '.dll' or '.exe' that are associated with this process. This focus is essential because the creation of these file types by mobsync.exe may indicate malicious activity where adversaries attempt to leverage or mimic the behavior of Microsoft Sync Center for nefarious purposes. It is advised to keep an alert level at medium due to the potential for unknown false positives, indicating that while this activity is suspicious, it may not always represent a definitive threat and should be investigated further when detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_mobsync:\n        Image|endswith: '\\mobsync.exe'\n    filter_created_file:\n        TargetFilename|endswith:\n            - '.dll'\n            - '.exe'\n    condition: selection_mobsync and filter_created_file\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_mobsync:\n        Image|endswith: '\\mobsync.exe'\n    filter_created_file:\n        TargetFilename|endswith:\n            - '.dll'\n            - '.exe'\n    condition: selection_mobsync and filter_created_file\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious files created by Microsoft Sync Center (mobsync)",
      "answer": "In order to detect suspicious files created by Microsoft Sync Center (mobsync), you should: monitor file event logs on Windows systems, focusing specifically on events where the Microsoft Sync Center executable ('mobsync.exe') is involved. Pay particular attention to the creation of new files with extensions '.dll' or '.exe' that are associated with this process. This focus is essential because the creation of these file types by mobsync.exe may indicate malicious activity where adversaries attempt to leverage or mimic the behavior of Microsoft Sync Center for nefarious purposes. It is advised to keep an alert level at medium due to the potential for unknown false positives, indicating that while this activity is suspicious, it may not always represent a definitive threat and should be investigated further when detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential PwnKit exploitation CVE-2021-4034 in auth logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential PwnKit exploitation CVE-2021-4034 in auth logs, you should: Focus on authentication log files generated by Linux systems. Specifically, look for any of the following suspicious activities: usage of the 'pkexec' command, indications that the environment variable XAUTHORITY contains suspicious content, or logs containing both '[USER=root]' and '[TTY=/dev/pts/0]'. The detection of any of these activities may signify potential exploitation of the vulnerability. The tags related to this type of attack include Persistence, Privilege Escalation, and Defense Evasion techniques. It's important to note that while this method aims for precise identification of malicious behavior, some legitimate actions might occasionally trigger these indicators, though such false positives are currently unknown. This approach is tagged as high level due to the severity implication of successful exploitation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auth\ndetection:\n    keywords:\n        '|all':\n            - 'pkexec'\n            - 'The value for environment variable XAUTHORITY contains suscipious content'\n            - '[USER=root] [TTY=/dev/pts/0]'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auth\ndetection:\n    keywords:\n        '|all':\n            - 'pkexec'\n            - 'The value for environment variable XAUTHORITY contains suscipious content'\n            - '[USER=root] [TTY=/dev/pts/0]'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential PwnKit exploitation CVE-2021-4034 in auth logs",
      "answer": "In order to detect potential PwnKit exploitation CVE-2021-4034 in auth logs, you should: Focus on authentication log files generated by Linux systems. Specifically, look for any of the following suspicious activities: usage of the 'pkexec' command, indications that the environment variable XAUTHORITY contains suspicious content, or logs containing both '[USER=root]' and '[TTY=/dev/pts/0]'. The detection of any of these activities may signify potential exploitation of the vulnerability. The tags related to this type of attack include Persistence, Privilege Escalation, and Defense Evasion techniques. It's important to note that while this method aims for precise identification of malicious behavior, some legitimate actions might occasionally trigger these indicators, though such false positives are currently unknown. This approach is tagged as high level due to the severity implication of successful exploitation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new office macro files on the systems via an application (browser, mail client)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of new office macro files on the systems via an application (browser, mail client), you should: Monitor file events on Windows systems focusing on the processes associated with email clients and browsers, such as RuntimeBroker.exe, outlook.exe, thunderbird.exe for email clients, and various common browsers including brave.exe, chrome.exe, firefox.exe, among others. Specifically, this involves tracking the creation of files with macro-enabled extensions like .docm, .dotm, .xlsm, .xltm, .potm, .pptm. It also includes detecting these macro files when they contain specific markers indicating they were downloaded from the internet (e.g., '.docm:Zone'). However, it is important to remember that not all detections are malicious. Legitimate macro files downloaded from the internet or sent as email attachments can trigger false positives. The overall risk level associated with these detections is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_processes:\n        Image|endswith:\n            # Email clients\n            - '\\RuntimeBroker.exe' # Windows Email clients uses RuntimeBroker to create the files\n            - '\\outlook.exe'\n            - '\\thunderbird.exe'\n            # Browsers\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\firefox.exe'\n            - '\\iexplore.exe'\n            - '\\maxthon.exe'\n            - '\\MicrosoftEdge.exe'\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n            - '\\opera.exe'\n            - '\\safari.exe'\n            - '\\seamonkey.exe'\n            - '\\vivaldi.exe'\n            - '\\whale.exe'\n    selection_ext:\n        - TargetFilename|endswith:\n            - '.docm'\n            - '.dotm'\n            - '.xlsm'\n            - '.xltm'\n            - '.potm'\n            - '.pptm'\n        - TargetFilename|contains:\n            - '.docm:Zone'\n            - '.dotm:Zone'\n            - '.xlsm:Zone'\n            - '.xltm:Zone'\n            - '.potm:Zone'\n            - '.pptm:Zone'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate macro files downloaded from the internet\n    - Legitimate macro files sent as attachments via emails\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_processes:\n        Image|endswith:\n            # Email clients\n            - '\\RuntimeBroker.exe' # Windows Email clients uses RuntimeBroker to create the files\n            - '\\outlook.exe'\n            - '\\thunderbird.exe'\n            # Browsers\n            - '\\brave.exe'\n            - '\\chrome.exe'\n            - '\\firefox.exe'\n            - '\\iexplore.exe'\n            - '\\maxthon.exe'\n            - '\\MicrosoftEdge.exe'\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n            - '\\opera.exe'\n            - '\\safari.exe'\n            - '\\seamonkey.exe'\n            - '\\vivaldi.exe'\n            - '\\whale.exe'\n    selection_ext:\n        - TargetFilename|endswith:\n            - '.docm'\n            - '.dotm'\n            - '.xlsm'\n            - '.xltm'\n            - '.potm'\n            - '.pptm'\n        - TargetFilename|contains:\n            - '.docm:Zone'\n            - '.dotm:Zone'\n            - '.xlsm:Zone'\n            - '.xltm:Zone'\n            - '.potm:Zone'\n            - '.pptm:Zone'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate macro files downloaded from the internet\n    - Legitimate macro files sent as attachments via emails\nlevel: medium\n",
      "question": "creation of a new office macro files on the systems via an application (browser, mail client).",
      "answer": "In order to detect the creation of new office macro files on the systems via an application (browser, mail client), you should: Monitor file events on Windows systems focusing on the processes associated with email clients and browsers, such as RuntimeBroker.exe, outlook.exe, thunderbird.exe for email clients, and various common browsers including brave.exe, chrome.exe, firefox.exe, among others. Specifically, this involves tracking the creation of files with macro-enabled extensions like .docm, .dotm, .xlsm, .xltm, .potm, .pptm. It also includes detecting these macro files when they contain specific markers indicating they were downloaded from the internet (e.g., '.docm:Zone'). However, it is important to remember that not all detections are malicious. Legitimate macro files downloaded from the internet or sent as email attachments can trigger false positives. The overall risk level associated with these detections is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect download by BITS jobs via PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect download by BITS jobs via PowerShell, you should: Monitor the creation of processes on Windows systems. Specifically, focus on instances where either 'powershell.exe' or 'pwsh.exe' are being executed. It is critical to pay attention to the command line used during these executions and look for the presence of the 'Start-BitsTransfer' command. This command is a clear indicator of the Background Intelligent Transfer Service (BITS) being used, potentially to download files in the context of the PowerShell session. Important information such as the name of the computer and the user executing the command should also be logged. Despite the high importance of this monitoring, be aware of potential false positives, as not all usage of 'Start-BitsTransfer' might be malicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains: 'Start-BitsTransfer'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains: 'Start-BitsTransfer'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect download by BITS jobs via PowerShell",
      "answer": "In order to detect download by BITS jobs via PowerShell, you should: Monitor the creation of processes on Windows systems. Specifically, focus on instances where either 'powershell.exe' or 'pwsh.exe' are being executed. It is critical to pay attention to the command line used during these executions and look for the presence of the 'Start-BitsTransfer' command. This command is a clear indicator of the Background Intelligent Transfer Service (BITS) being used, potentially to download files in the context of the PowerShell session. Important information such as the name of the computer and the user executing the command should also be logged. Despite the high importance of this monitoring, be aware of potential false positives, as not all usage of 'Start-BitsTransfer' might be malicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detecting Emotet DLL loading by looking for rundll32.exe processes with command lines ending in ,RunDLL or ,Control_RunDLL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Emotet DLL loading by looking for rundll32.exe processes with command lines ending in ,RunDLL or ,Control_RunDLL, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the 'Image' path ends with '\\rundll32.exe' or where the 'OriginalFileName' is explicitly 'RUNDLL32.EXE'. Additionally, pay close attention to the command line arguments of these processes, particularly those ending with ',RunDLL' or ',Control_RunDLL'. It is crucial to exclude any legitimate occurrences where the command line ends with '.dll,Control_RunDLL', '.dll\",Control_RunDLL', or '.dll'',Control_RunDLL' to minimize false positives. Moreover, understand that some development environments like Visual Studio might legitimately create processes with these command lines during software build tasks, especially when 'ParentImage' ends with '\\tracker.exe'. This context helps in distinguishing malicious uses of rundll32.exe specifically associated with the Emotet malware from legitimate software development practices. The detection of such patterns is critical, given the severity of the potential threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|endswith:\n            - ',RunDLL'\n            - ',Control_RunDLL'\n            # - ',#1'  too generic - function load by ordinal is not Emotet specific\n    filter_legitimate_dll:\n        CommandLine|endswith:\n            - '.dll,Control_RunDLL'\n            - '.dll\",Control_RunDLL'\n            - '.dll'',Control_RunDLL'\n    filter_ide:\n        ParentImage|endswith: '\\tracker.exe' #When Visual Studio compile NodeJS program, it might use MSBuild to create tracker.exe and then, the tracker.exe fork rundll32.exe\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|endswith:\n            - ',RunDLL'\n            - ',Control_RunDLL'\n            # - ',#1'  too generic - function load by ordinal is not Emotet specific\n    filter_legitimate_dll:\n        CommandLine|endswith:\n            - '.dll,Control_RunDLL'\n            - '.dll\",Control_RunDLL'\n            - '.dll'',Control_RunDLL'\n    filter_ide:\n        ParentImage|endswith: '\\tracker.exe' #When Visual Studio compile NodeJS program, it might use MSBuild to create tracker.exe and then, the tracker.exe fork rundll32.exe\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "Detecting Emotet DLL loading by looking for rundll32.exe processes with command lines ending in ,RunDLL or ,Control_RunDLL",
      "answer": "In order to detect Emotet DLL loading by looking for rundll32.exe processes with command lines ending in ,RunDLL or ,Control_RunDLL, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the 'Image' path ends with '\\rundll32.exe' or where the 'OriginalFileName' is explicitly 'RUNDLL32.EXE'. Additionally, pay close attention to the command line arguments of these processes, particularly those ending with ',RunDLL' or ',Control_RunDLL'. It is crucial to exclude any legitimate occurrences where the command line ends with '.dll,Control_RunDLL', '.dll\",Control_RunDLL', or '.dll'',Control_RunDLL' to minimize false positives. Moreover, understand that some development environments like Visual Studio might legitimately create processes with these command lines during software build tasks, especially when 'ParentImage' ends with '\\tracker.exe'. This context helps in distinguishing malicious uses of rundll32.exe specifically associated with the Emotet malware from legitimate software development practices. The detection of such patterns is critical, given the severity of the potential threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exploitation of CVE-2023-21554 (dubbed QueueJumper).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential exploitation of CVE-2023-21554 (dubbed QueueJumper), you should: monitor the process creation logs on Windows systems, specifically looking for events where the Microsoft Message Queue Service (`mqsvc.exe`), located in the `Windows\\System32` directory, spawns known command execution or scripting tools. These tools include `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. Identifying such a pattern is critical as it might indicate an attempt to exploit QueueJumper, leveraging `mqsvc.exe` as a parent process to execute potentially malicious commands or scripts. It's important to have vigilant monitoring in place due to the high impact of this vulnerability, while also being aware of possible unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\Windows\\System32\\mqsvc.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\Windows\\System32\\mqsvc.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential exploitation of CVE-2023-21554 (dubbed QueueJumper)",
      "answer": "In order to detect potential exploitation of CVE-2023-21554 (dubbed QueueJumper), you should: monitor the process creation logs on Windows systems, specifically looking for events where the Microsoft Message Queue Service (`mqsvc.exe`), located in the `Windows\\System32` directory, spawns known command execution or scripting tools. These tools include `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. Identifying such a pattern is critical as it might indicate an attempt to exploit QueueJumper, leveraging `mqsvc.exe` as a parent process to execute potentially malicious commands or scripts. It's important to have vigilant monitoring in place due to the high impact of this vulnerability, while also being aware of possible unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process behavior observed with Devil Bait samples.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process behavior observed with Devil Bait samples, you should: Focus on monitoring the creation of processes in the Windows environment. Specifically, look for instances where a script execution process (wscript.exe) spawns a command shell process (cmd.exe). This can be identified when the command line of the latter process directs its output to either an XML or TXT file within the user's Microsoft AppData folder using the redirection operator '>>'. Additionally, keep an eye out for command lines within these processes that execute common reconnaissance commands like 'dir', 'ipconfig /all', 'systeminfo', and 'tasklist'. Such behavior, when found together, is considered highly suspicious and indicative of the tactics and techniques used in the deployment of Devil Bait malware. These techniques are related to various tactics including execution, persistence, and discovery.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_redirect:\n        ParentImage|endswith: '\\wscript.exe'\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: '>>%APPDATA%\\Microsoft\\'\n        CommandLine|endswith:\n            - '.xml'\n            - '.txt'\n    selection_recon_cmd:\n        CommandLine|contains:\n            # Taken from a6f9043627f8be2452153b5dbf6278e9b91763c3b5c2aea537a859e0c8c6b504\n            # If you find samples using other commands please add them\n            - 'dir'\n            - 'ipconfig /all'\n            - 'systeminfo'\n            - 'tasklist'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_redirect:\n        ParentImage|endswith: '\\wscript.exe'\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: '>>%APPDATA%\\Microsoft\\'\n        CommandLine|endswith:\n            - '.xml'\n            - '.txt'\n    selection_recon_cmd:\n        CommandLine|contains:\n            # Taken from a6f9043627f8be2452153b5dbf6278e9b91763c3b5c2aea537a859e0c8c6b504\n            # If you find samples using other commands please add them\n            - 'dir'\n            - 'ipconfig /all'\n            - 'systeminfo'\n            - 'tasklist'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "specific process behavior observed with Devil Bait samples",
      "answer": "In order to detect specific process behavior observed with Devil Bait samples, you should: Focus on monitoring the creation of processes in the Windows environment. Specifically, look for instances where a script execution process (wscript.exe) spawns a command shell process (cmd.exe). This can be identified when the command line of the latter process directs its output to either an XML or TXT file within the user's Microsoft AppData folder using the redirection operator '>>'. Additionally, keep an eye out for command lines within these processes that execute common reconnaissance commands like 'dir', 'ipconfig /all', 'systeminfo', and 'tasklist'. Such behavior, when found together, is considered highly suspicious and indicative of the tactics and techniques used in the deployment of Devil Bait malware. These techniques are related to various tactics including execution, persistence, and discovery."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use MSHTA in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Monitor Windows system logs for events generated by the Service Control Manager, focusing specifically on event ID 7045. This event signals the creation of a new service, which can be a common tactic used by attackers to execute obfuscated PowerShell commands. Pay particular attention to the 'ImagePath' field within these events. An occurrence is considered suspicious if the 'ImagePath' contains both 'mshta' and 'vbscript:createobject' segments. These elements are indicative of an attempt to leverage the Microsoft HTML Application Host (mshta) to execute VBScript code that, in turn, can create and manipulate objects; this is a method commonly employed to bypass traditional detection mechanisms by obfuscating PowerShell scripts. Although the detection of this activity is set at a high level due to its potential severity, be aware that there might be legitimate use cases that result in false positives. It is important to investigate these occurrences to differentiate between malicious actions and legitimate administrative tasks. The tactics and techniques associated with this behavior include Execution and Command and Scripting Interpreter, underlining its relevance to cybersecurity practices aimed at identifying sophisticated attack methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains|all:\n            - 'mshta'\n            - 'vbscript:createobject'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains|all:\n            - 'mshta'\n            - 'vbscript:createobject'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use MSHTA in Scripts",
      "answer": "In order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Monitor Windows system logs for events generated by the Service Control Manager, focusing specifically on event ID 7045. This event signals the creation of a new service, which can be a common tactic used by attackers to execute obfuscated PowerShell commands. Pay particular attention to the 'ImagePath' field within these events. An occurrence is considered suspicious if the 'ImagePath' contains both 'mshta' and 'vbscript:createobject' segments. These elements are indicative of an attempt to leverage the Microsoft HTML Application Host (mshta) to execute VBScript code that, in turn, can create and manipulate objects; this is a method commonly employed to bypass traditional detection mechanisms by obfuscating PowerShell scripts. Although the detection of this activity is set at a high level due to its potential severity, be aware that there might be legitimate use cases that result in false positives. It is important to investigate these occurrences to differentiate between malicious actions and legitimate administrative tasks. The tactics and techniques associated with this behavior include Execution and Command and Scripting Interpreter, underlining its relevance to cybersecurity practices aimed at identifying sophisticated attack methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious Microsoft certutil execution with sub commands like 'decode' sub command, which is sometimes used to decode malicious code.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious Microsoft certutil execution with sub commands like 'decode' sub command, which is sometimes used to decode malicious code, you should: Monitor the creation of processes on Windows systems for specific occurrences where the certutil.exe utility is executed. Focus particularly on the instances where its command line arguments include operations such as decoding (both '-decode' and '/decode'), decoding hexadecimal data ('-decodehex' and '/decodehex'), caching URLs ('-urlcache' and '/urlcache'), verifying certificate trust lists ('-verifyctl' and '/verifyctl'), encoding ('-encode' and '/encode'), and exporting to PFX format ('-exportPFX' and '/exportPFX'). These particular functions of certutil.exe are noteworthy because they can potentially be exploited by an attacker to manipulate or retrieve malicious code. The detection pertains strongly to monitoring both the image name and original filename for instances of \u2018certutil.exe\u2019 as well as examining the command line parameters for the above-mentioned flags. Important fields to observe in the audit logs include the command line arguments and the parent command line arguments, to better understand the context in which certutil.exe was executed. Be aware that certain administrative tasks may legitimately use these certutil.exe features, thus some alerts might be benign and should be evaluated within the context of your environment to reduce false positives. The significance of monitoring these activities is marked as high due to the potential misuse of certutil.exe in malicious operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -decode '\n            - ' -decodehex '\n            - ' -urlcache '\n            - ' -verifyctl '\n            - ' -encode '\n            - ' -exportPFX '\n            - ' /decode '\n            - ' /decodehex '\n            - ' /urlcache '\n            - ' /verifyctl '\n            - ' /encode '\n            - ' /exportPFX '\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -decode '\n            - ' -decodehex '\n            - ' -urlcache '\n            - ' -verifyctl '\n            - ' -encode '\n            - ' -exportPFX '\n            - ' /decode '\n            - ' /decodehex '\n            - ' /urlcache '\n            - ' /verifyctl '\n            - ' /encode '\n            - ' /exportPFX '\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high\n",
      "question": "suspicious Microsoft certutil execution with sub commands like 'decode' sub command, which is sometimes used to decode malicious code",
      "answer": "In order to detect a suspicious Microsoft certutil execution with sub commands like 'decode' sub command, which is sometimes used to decode malicious code, you should: Monitor the creation of processes on Windows systems for specific occurrences where the certutil.exe utility is executed. Focus particularly on the instances where its command line arguments include operations such as decoding (both '-decode' and '/decode'), decoding hexadecimal data ('-decodehex' and '/decodehex'), caching URLs ('-urlcache' and '/urlcache'), verifying certificate trust lists ('-verifyctl' and '/verifyctl'), encoding ('-encode' and '/encode'), and exporting to PFX format ('-exportPFX' and '/exportPFX'). These particular functions of certutil.exe are noteworthy because they can potentially be exploited by an attacker to manipulate or retrieve malicious code. The detection pertains strongly to monitoring both the image name and original filename for instances of \u2018certutil.exe\u2019 as well as examining the command line parameters for the above-mentioned flags. Important fields to observe in the audit logs include the command line arguments and the parent command line arguments, to better understand the context in which certutil.exe was executed. Be aware that certain administrative tasks may legitimately use these certutil.exe features, thus some alerts might be benign and should be evaluated within the context of your environment to reduce false positives. The significance of monitoring these activities is marked as high due to the potential misuse of certutil.exe in malicious operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\", you should: Monitor Windows image load events to identify instances where \"libvlc.dll\" is loaded outside the standard VLC installation paths. Specifically, look for events where a process has loaded \"libvlc.dll\" but ensure it is not loaded from either \"C:\\Program Files (x86)\\VideoLAN\\VLC\\\" or \"C:\\Program Files\\VideoLAN\\VLC\\\" directories. Be aware that false alerts may occur if the VLC media player is installed in a non-standard directory. This approach aims at spotting malicious activities where attackers might attempt to misuse \"libvlc.dll\" for nefarious purposes, leveraging DLL sideloading techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\libvlc.dll'\n    filter_main_vlc:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\VideoLAN\\VLC\\'\n            - 'C:\\Program Files\\VideoLAN\\VLC\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - False positives are expected if VLC is installed in non-default locations\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\libvlc.dll'\n    filter_main_vlc:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\VideoLAN\\VLC\\'\n            - 'C:\\Program Files\\VideoLAN\\VLC\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - False positives are expected if VLC is installed in non-default locations\nlevel: medium\n",
      "question": "potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\"",
      "answer": "In order to detect potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\", you should: Monitor Windows image load events to identify instances where \"libvlc.dll\" is loaded outside the standard VLC installation paths. Specifically, look for events where a process has loaded \"libvlc.dll\" but ensure it is not loaded from either \"C:\\Program Files (x86)\\VideoLAN\\VLC\\\" or \"C:\\Program Files\\VideoLAN\\VLC\\\" directories. Be aware that false alerts may occur if the VLC media player is installed in a non-standard directory. This approach aims at spotting malicious activities where attackers might attempt to misuse \"libvlc.dll\" for nefarious purposes, leveraging DLL sideloading techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting rare service installs that only appear a few times per time frame and could reveal password dumpers, backdoor installs or other types of malicious services.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect rare service installs that only appear a few times per timeframe and could reveal password dumpers, backdoor installs, or other types of malicious services, you should:\nMonitor Windows System event logs, particularly focusing on events generated by the Service Control Manager (Provider_Name: 'Service Control Manager') with an Event ID of 7045. This Event ID is indicative of service installations on a Windows system. Analyze the occurrences of these events over a period of 7 days (timeframe: 7d) and identify services that have been installed fewer than 5 times within this timeframe (condition: selection | count() by ServiceName < 5). Such rare installations could potentially be an indicator of malicious activity, including but not limited to the deployment of password dumpers or backdoors. Be aware that some legitimate activities, such as software installations or updates, might also trigger these events (false positives: Software installation, Software updates). The level of confidence in this detection technique is categorized as low, indicating that while it can be a helpful indicator of suspicious activity, it should be used in conjunction with other assessment tools or techniques for a more definitive analysis.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    timeframe: 7d\n    condition: selection | count() by ServiceName < 5\nfalsepositives:\n    - Software installation\n    - Software updates\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    timeframe: 7d\n    condition: selection | count() by ServiceName < 5\nfalsepositives:\n    - Software installation\n    - Software updates\nlevel: low\n",
      "question": "rare service installs that only appear a few times per time frame and could reveal password dumpers, backdoor installs or other types of malicious services",
      "answer": "In order to detect rare service installs that only appear a few times per timeframe and could reveal password dumpers, backdoor installs, or other types of malicious services, you should:\nMonitor Windows System event logs, particularly focusing on events generated by the Service Control Manager (Provider_Name: 'Service Control Manager') with an Event ID of 7045. This Event ID is indicative of service installations on a Windows system. Analyze the occurrences of these events over a period of 7 days (timeframe: 7d) and identify services that have been installed fewer than 5 times within this timeframe (condition: selection | count() by ServiceName < 5). Such rare installations could potentially be an indicator of malicious activity, including but not limited to the deployment of password dumpers or backdoors. Be aware that some legitimate activities, such as software installations or updates, might also trigger these events (false positives: Software installation, Software updates). The level of confidence in this detection technique is categorized as low, indicating that while it can be a helpful indicator of suspicious activity, it should be used in conjunction with other assessment tools or techniques for a more definitive analysis."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators, you should: Look for logs from applications on Windows systems. Specifically, pay attention to events with the ID 1033 that originate from the MsiInstaller provider. Within these events, focus on messages that contain the term \"AteraAgent.\" This detection is significant because it can indicate the installation of the Atera RMM agent, which has been utilized by Conti operators in their operations. Keep in mind that there may be legitimate installations of the Atera agent, so it's important to differentiate between malicious and authorized activities. The severity of this kind of detection is considered high due to its association with known cyber threat actors and their tactics.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: application\n    product: windows\ndetection:\n    selection:\n        EventID: 1033\n        Provider_Name: MsiInstaller\n        Message|contains: AteraAgent\n    condition: selection\nfalsepositives:\n    - Legitimate Atera agent installation\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: application\n    product: windows\ndetection:\n    selection:\n        EventID: 1033\n        Provider_Name: MsiInstaller\n        Message|contains: AteraAgent\n    condition: selection\nfalsepositives:\n    - Legitimate Atera agent installation\nlevel: high\n",
      "question": "successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators",
      "answer": "In order to detect successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators, you should: Look for logs from applications on Windows systems. Specifically, pay attention to events with the ID 1033 that originate from the MsiInstaller provider. Within these events, focus on messages that contain the term \"AteraAgent.\" This detection is significant because it can indicate the installation of the Atera RMM agent, which has been utilized by Conti operators in their operations. Keep in mind that there may be legitimate installations of the Atera agent, so it's important to differentiate between malicious and authorized activities. The severity of this kind of detection is considered high due to its association with known cyber threat actors and their tactics."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting WMI script event consumers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect WMI script event consumers, you should: monitor the creation of processes in Windows systems, specifically targeting instances where the \"scrcons.exe\" executable, located in the C:\\WINDOWS\\system32\\wbem\\ directory, is initiated by the \"svchost.exe\" process from the C:\\Windows\\System32\\ directory. This scenario is indicative of WMI (Windows Management Instrumentation) script event consumers being used, potentially for malicious purposes. It's important to note, however, that there might be legitimate uses of this behavior, such as events generated by legitimate software or system functionalities (e.g., Dell computer systems adjusting brightness using a specific keyboard button might trigger such events and lead to false positives). The risk level associated with this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image: C:\\WINDOWS\\system32\\wbem\\scrcons.exe\n        ParentImage: C:\\Windows\\System32\\svchost.exe\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image: C:\\WINDOWS\\system32\\wbem\\scrcons.exe\n        ParentImage: C:\\Windows\\System32\\svchost.exe\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n",
      "question": "WMI script event consumers",
      "answer": "In order to detect WMI script event consumers, you should: monitor the creation of processes in Windows systems, specifically targeting instances where the \"scrcons.exe\" executable, located in the C:\\WINDOWS\\system32\\wbem\\ directory, is initiated by the \"svchost.exe\" process from the C:\\Windows\\System32\\ directory. This scenario is indicative of WMI (Windows Management Instrumentation) script event consumers being used, potentially for malicious purposes. It's important to note, however, that there might be legitimate uses of this behavior, such as events generated by legitimate software or system functionalities (e.g., Dell computer systems adjusting brightness using a specific keyboard button might trigger such events and lead to false positives). The risk level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attack technique pass the hash which is used to move laterally inside the network.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the attack technique pass the hash which is used to move laterally inside the network, you should monitor specific events and conditions within Windows security logs. Focus on capturing event IDs 4624, which signify a successful logon, and 4625, which indicate a failed logon attempt. These events are particularly relevant when the logon type is 3, representing a network logon which is commonly used during lateral movement attempts. Additionally, the logon process name should be 'NtLmSsp', which is indicative of NTLM (NT LAN Manager) authentication, often exploited in pass the hash attacks.\n\nIt is crucial to pay attention to the originating and target workstation names in these events. The condition implies that both the workstation from where the logon attempt was made and the target computer should match your network's workstation naming conventions (referred here as '%Workstations%'). This helps in pinpointing the attempts that are specifically targeted at moving laterally within your network.\n\nHowever, it's important to exclude any logon attempts that are recorded with the target username as 'ANONYMOUS LOGON'. These might not be related to malicious activity and can lead to false positives. Speaking of which, legitimate administrator activities could also trigger these conditions and should be considered when evaluating alerts.\n\nThis focused monitoring approach, by analyzing network logon attempts via the NTLM authentication involving specific workstations, aids in discerning potential lateral movement activities facilitated by pass the hash attacks. It stands on the medium level of alert severity due to the balance between the necessity of detecting malicious activities and the potential for false positives, such as routine administrator tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The successful use of PtH for lateral movement between workstations would trigger event ID 4624, a failed logon attempt would trigger an event ID 4625\ndetection:\n    selection:\n        EventID:\n            - 4624\n            - 4625\n        LogonType: 3\n        LogonProcessName: 'NtLmSsp'\n        WorkstationName: '%Workstations%'\n        ComputerName: '%Workstations%'\n    filter:\n        TargetUserName: 'ANONYMOUS LOGON'\n    condition: selection and not filter\nfalsepositives:\n    - Administrator activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The successful use of PtH for lateral movement between workstations would trigger event ID 4624, a failed logon attempt would trigger an event ID 4625\ndetection:\n    selection:\n        EventID:\n            - 4624\n            - 4625\n        LogonType: 3\n        LogonProcessName: 'NtLmSsp'\n        WorkstationName: '%Workstations%'\n        ComputerName: '%Workstations%'\n    filter:\n        TargetUserName: 'ANONYMOUS LOGON'\n    condition: selection and not filter\nfalsepositives:\n    - Administrator activity\nlevel: medium\n",
      "question": "attack technique pass the hash which is used to move laterally inside the network",
      "answer": "In order to detect the attack technique pass the hash which is used to move laterally inside the network, you should monitor specific events and conditions within Windows security logs. Focus on capturing event IDs 4624, which signify a successful logon, and 4625, which indicate a failed logon attempt. These events are particularly relevant when the logon type is 3, representing a network logon which is commonly used during lateral movement attempts. Additionally, the logon process name should be 'NtLmSsp', which is indicative of NTLM (NT LAN Manager) authentication, often exploited in pass the hash attacks.\n\nIt is crucial to pay attention to the originating and target workstation names in these events. The condition implies that both the workstation from where the logon attempt was made and the target computer should match your network's workstation naming conventions (referred here as '%Workstations%'). This helps in pinpointing the attempts that are specifically targeted at moving laterally within your network.\n\nHowever, it's important to exclude any logon attempts that are recorded with the target username as 'ANONYMOUS LOGON'. These might not be related to malicious activity and can lead to false positives. Speaking of which, legitimate administrator activities could also trigger these conditions and should be considered when evaluating alerts.\n\nThis focused monitoring approach, by analyzing network logon attempts via the NTLM authentication involving specific workstations, aids in discerning potential lateral movement activities facilitated by pass the hash attacks. It stands on the medium level of alert severity due to the balance between the necessity of detecting malicious activities and the potential for false positives, such as routine administrator tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process access to LSASS memory with suspicious access flags and from a potentially suspicious folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process access to LSASS memory with suspicious access flags and from a potentially suspicious folder, you should: Focus on monitoring process access within Windows operating systems, specifically observing any process that attempts to access the memory of the Local Security Authority Subsystem Service (LSASS) executable. This observation should be narrowed down to access attempts where the target image ends with '\\lsass.exe' and the granted access flags end with a set of specific hexadecimal values which could indicate suspicious activities such as unauthorized memory read or write operations.\n\nFurther refine the detection by scrutinizing the source of the access attempt, particularly if it originates from directories often used by legitimate programs but can be abused by attackers, like temporary folders or public user folders. These include paths containing '\\Temp\\', '\\Users\\Public\\', '\\PerfLogs\\', '\\AppData\\', and '\\Temporary'. The detection becomes more credible if these access attempts do not originate from software updaters or installers known to occasionally perform similar actions for legitimate reasons, such as updates from Visual Studio Code, Dropbox, the Microsoft Bootstrapper for Visual Studio, the Google Chrome updater, Keybase, or antivirus software updates like Avira, as these are typically marked as false positives.\n\nTo successfully implement this detection strategy, concentrate on logs that fall under the process access category for Windows products. Tag this activity with relevant MITRE ATT&CK tactics and techniques associated with credential access attempts, especially those attempting to access critical system processes memory like LSASS for credential dumping purposes. Pay attention to access attempts that do not align with expected behavior from known and trusted applications by using exclusions for certain paths and access patterns that are associated with known benign software behavior, thereby reducing false positives. Monitor fields such as User, SourceImage, and GrantedAccess in your log data to effectively identify and respond to potential threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            - '10'\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n            - 'FF'\n        SourceImage|contains:\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '\\PerfLogs\\'\n            - '\\AppData\\'\n            - '\\Temporary'\n    filter_optional_generic_appdata:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\'\n        SourceImage|endswith:\n            - '\\Microsoft VS Code\\Code.exe'\n            - '\\software_reporter_tool.exe'\n            - '\\DropboxUpdate.exe'\n            - '\\MBAMInstallerService.exe'\n            - '\\WebexMTA.exe'\n            - '\\WebEx\\WebexHost.exe'\n            - '\\JetBrains\\Toolbox\\bin\\jetbrains-toolbox.exe'\n        GrantedAccess: '0x410'\n    filter_optional_dropbox_1:\n        SourceImage|startswith: 'C:\\Windows\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_dropbox_2:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_dropbox_3:\n        SourceImage|startswith:\n            - 'C:\\Program Files (x86)\\Dropbox\\'\n            - 'C:\\Program Files\\Dropbox\\'\n        SourceImage|endswith: '\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_nextron:\n        SourceImage|startswith:\n            - 'C:\\Windows\\Temp\\asgard2-agent\\'\n            - 'C:\\Windows\\Temp\\asgard2-agent-sc\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n            - '\\aurora-agent-64.exe'\n            - '\\aurora-agent.exe'\n        GrantedAccess:\n            - '0x1fffff'\n            - '0x1010'\n            - '0x101010'\n    filter_optional_ms_products:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\vs_bootstrapper_'\n        GrantedAccess: '0x1410'\n    filter_optional_chrome_update:\n        SourceImage|startswith: 'C:\\Program Files (x86)\\Google\\Temp\\'\n        SourceImage|endswith: '.tmp\\GoogleUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_keybase:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: \\AppData\\Local\\Keybase\\keybase.exe\n        GrantedAccess: '0x1fffff'\n    filter_optional_avira:\n        SourceImage|contains: '\\AppData\\Local\\Temp\\is-'\n        SourceImage|endswith: '.tmp\\avira_system_speedup.tmp'\n        GrantedAccess: '0x1410'\n    filter_optional_viberpc_updater:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Roaming\\ViberPC\\'\n        SourceImage|endswith: '\\updater.exe'\n        TargetImage|endswith: '\\winlogon.exe'\n        GrantedAccess: '0x1fffff'\n    filter_optional_adobe_arm_helper:\n        SourceImage|startswith:  # Example path: 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\1.0\\Temp\\2092867405\\AdobeARMHelper.exe'\n            - 'C:\\Program Files\\Common Files\\Adobe\\ARM\\'\n            - 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\'\n        SourceImage|endswith: '\\AdobeARMHelper.exe'\n        GrantedAccess: '0x1410'\n    condition: selection and not 1 of filter_optional_*\nfields:\n    - User\n    - SourceImage\n    - GrantedAccess\nfalsepositives:\n    - Updaters and installers are typical false positives. Apply custom filters depending on your environment\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            - '10'\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n            - 'FF'\n        SourceImage|contains:\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '\\PerfLogs\\'\n            - '\\AppData\\'\n            - '\\Temporary'\n    filter_optional_generic_appdata:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\'\n        SourceImage|endswith:\n            - '\\Microsoft VS Code\\Code.exe'\n            - '\\software_reporter_tool.exe'\n            - '\\DropboxUpdate.exe'\n            - '\\MBAMInstallerService.exe'\n            - '\\WebexMTA.exe'\n            - '\\WebEx\\WebexHost.exe'\n            - '\\JetBrains\\Toolbox\\bin\\jetbrains-toolbox.exe'\n        GrantedAccess: '0x410'\n    filter_optional_dropbox_1:\n        SourceImage|startswith: 'C:\\Windows\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_dropbox_2:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_dropbox_3:\n        SourceImage|startswith:\n            - 'C:\\Program Files (x86)\\Dropbox\\'\n            - 'C:\\Program Files\\Dropbox\\'\n        SourceImage|endswith: '\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_nextron:\n        SourceImage|startswith:\n            - 'C:\\Windows\\Temp\\asgard2-agent\\'\n            - 'C:\\Windows\\Temp\\asgard2-agent-sc\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n            - '\\aurora-agent-64.exe'\n            - '\\aurora-agent.exe'\n        GrantedAccess:\n            - '0x1fffff'\n            - '0x1010'\n            - '0x101010'\n    filter_optional_ms_products:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\vs_bootstrapper_'\n        GrantedAccess: '0x1410'\n    filter_optional_chrome_update:\n        SourceImage|startswith: 'C:\\Program Files (x86)\\Google\\Temp\\'\n        SourceImage|endswith: '.tmp\\GoogleUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_keybase:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: \\AppData\\Local\\Keybase\\keybase.exe\n        GrantedAccess: '0x1fffff'\n    filter_optional_avira:\n        SourceImage|contains: '\\AppData\\Local\\Temp\\is-'\n        SourceImage|endswith: '.tmp\\avira_system_speedup.tmp'\n        GrantedAccess: '0x1410'\n    filter_optional_viberpc_updater:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Roaming\\ViberPC\\'\n        SourceImage|endswith: '\\updater.exe'\n        TargetImage|endswith: '\\winlogon.exe'\n        GrantedAccess: '0x1fffff'\n    filter_optional_adobe_arm_helper:\n        SourceImage|startswith:  # Example path: 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\1.0\\Temp\\2092867405\\AdobeARMHelper.exe'\n            - 'C:\\Program Files\\Common Files\\Adobe\\ARM\\'\n            - 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\'\n        SourceImage|endswith: '\\AdobeARMHelper.exe'\n        GrantedAccess: '0x1410'\n    condition: selection and not 1 of filter_optional_*\nfields:\n    - User\n    - SourceImage\n    - GrantedAccess\nfalsepositives:\n    - Updaters and installers are typical false positives. Apply custom filters depending on your environment\nlevel: medium\n",
      "question": "process access to LSASS memory with suspicious access flags and from a potentially suspicious folder",
      "answer": "In order to detect process access to LSASS memory with suspicious access flags and from a potentially suspicious folder, you should: Focus on monitoring process access within Windows operating systems, specifically observing any process that attempts to access the memory of the Local Security Authority Subsystem Service (LSASS) executable. This observation should be narrowed down to access attempts where the target image ends with '\\lsass.exe' and the granted access flags end with a set of specific hexadecimal values which could indicate suspicious activities such as unauthorized memory read or write operations.\n\nFurther refine the detection by scrutinizing the source of the access attempt, particularly if it originates from directories often used by legitimate programs but can be abused by attackers, like temporary folders or public user folders. These include paths containing '\\Temp\\', '\\Users\\Public\\', '\\PerfLogs\\', '\\AppData\\', and '\\Temporary'. The detection becomes more credible if these access attempts do not originate from software updaters or installers known to occasionally perform similar actions for legitimate reasons, such as updates from Visual Studio Code, Dropbox, the Microsoft Bootstrapper for Visual Studio, the Google Chrome updater, Keybase, or antivirus software updates like Avira, as these are typically marked as false positives.\n\nTo successfully implement this detection strategy, concentrate on logs that fall under the process access category for Windows products. Tag this activity with relevant MITRE ATT&CK tactics and techniques associated with credential access attempts, especially those attempting to access critical system processes memory like LSASS for credential dumping purposes. Pay attention to access attempts that do not align with expected behavior from known and trusted applications by using exclusions for certain paths and access patterns that are associated with known benign software behavior, thereby reducing false positives. Monitor fields such as User, SourceImage, and GrantedAccess in your log data to effectively identify and respond to potential threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe'.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe', you should: Monitor the creation of processes on Windows systems, focusing on identifying instances where a process named 'CustomShellHost.exe' initiates another process. However, any initiated process that is exactly 'C:\\Windows\\explorer.exe' should be excluded from suspicions. This approach aims to spot potentially malicious activities while minimizing false positives, though it's important to note that some unrelated activities may still be incorrectly flagged as suspicious. The monitoring is guided by medium-level alerts, indicating a balanced sensitivity towards detecting potentially harmful actions without overwhelming the system with false alarms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\CustomShellHost.exe'\n    filter:\n        Image: 'C:\\Windows\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\CustomShellHost.exe'\n    filter:\n        Image: 'C:\\Windows\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe'",
      "answer": "In order to detect the execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe', you should: Monitor the creation of processes on Windows systems, focusing on identifying instances where a process named 'CustomShellHost.exe' initiates another process. However, any initiated process that is exactly 'C:\\Windows\\explorer.exe' should be excluded from suspicions. This approach aims to spot potentially malicious activities while minimizing false positives, though it's important to note that some unrelated activities may still be incorrectly flagged as suspicious. The monitoring is guided by medium-level alerts, indicating a balanced sensitivity towards detecting potentially harmful actions without overwhelming the system with false alarms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible exploitation activity or bugs in a web application.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible exploitation activity or bugs in a web application, you should monitor web server logs for multiple occurrences of specific HTTP status codes that could indicate abusive behavior or errors within the application. Focus on tracking client IP addresses that generate more than ten requests resulting in the following HTTP status codes within a ten-minute timeframe: 400 (Bad Request), 401 (Unauthorized), 403 (Forbidden), and 500 (Internal Server Error). These status codes can serve as indicators of potential attacks, such as attempting to access unauthorized areas, triggering server errors, or exploiting known vulnerabilities. Keeping an eye on the fields like client IP, virtual host, requested URL, and the response status can help identify the source of these activities. Be aware of legitimate circumstances that might lead to similar patterns, such as unstable applications or applications that commonly return these status codes under normal operation, as these could lead to false positives. The detection of these activities is considered to be of medium severity level and suggests an analyst's review to determine whether it represents a genuine threat or flaw in the web application.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        sc-status:\n            - 400\n            - 401\n            - 403\n            - 500\n    timeframe: 10m\n    condition: selection | count() by clientip > 10\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unstable application\n    - Application that misuses the response codes\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        sc-status:\n            - 400\n            - 401\n            - 403\n            - 500\n    timeframe: 10m\n    condition: selection | count() by clientip > 10\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unstable application\n    - Application that misuses the response codes\nlevel: medium\n",
      "question": "possible exploitation activity or bugs in a web application",
      "answer": "In order to detect possible exploitation activity or bugs in a web application, you should monitor web server logs for multiple occurrences of specific HTTP status codes that could indicate abusive behavior or errors within the application. Focus on tracking client IP addresses that generate more than ten requests resulting in the following HTTP status codes within a ten-minute timeframe: 400 (Bad Request), 401 (Unauthorized), 403 (Forbidden), and 500 (Internal Server Error). These status codes can serve as indicators of potential attacks, such as attempting to access unauthorized areas, triggering server errors, or exploiting known vulnerabilities. Keeping an eye on the fields like client IP, virtual host, requested URL, and the response status can help identify the source of these activities. Be aware of legitimate circumstances that might lead to similar patterns, such as unstable applications or applications that commonly return these status codes under normal operation, as these could lead to false positives. The detection of these activities is considered to be of medium severity level and suggests an analyst's review to determine whether it represents a genuine threat or flaw in the web application."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file, you should: monitor process creation logs in Windows for instances where the command line execution includes both the use of 'diantz.exe' and the '.cab' file extension together. Furthermore, it's crucial to watch for command lines matching a regular expression pattern that indicates the use of a colon followed by any character except a backslash, which is a typical method for specifying Alternate Data Streams (ADS) in Windows file systems. Be advised that there's a substantial chance of encountering false positives with this detection strategy, and the risk level associated with this activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - .cab\n        CommandLine|re: ':[^\\\\]'\n    condition: selection\nfalsepositives:\n    - Very Possible\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - .cab\n        CommandLine|re: ':[^\\\\]'\n    condition: selection\nfalsepositives:\n    - Very Possible\nlevel: medium\n",
      "question": "Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file.",
      "answer": "In order to compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file, you should: monitor process creation logs in Windows for instances where the command line execution includes both the use of 'diantz.exe' and the '.cab' file extension together. Furthermore, it's crucial to watch for command lines matching a regular expression pattern that indicates the use of a colon followed by any character except a backslash, which is a typical method for specifying Alternate Data Streams (ADS) in Windows file systems. Be advised that there's a substantial chance of encountering false positives with this detection strategy, and the risk level associated with this activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious start of rundll32.exe with a parent process of Explorer.exe. Variant of Raspberry Robin, as first reported by Red Canary..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious start of rundll32.exe with a parent process of Explorer.exe, indicative of the variant of Raspberry Robin, as first reported by Red Canary, you should observe for process creation events in Windows environments. Specifically, monitor for instances where rundll32.exe is started and has explorer.exe as its parent process. Be cautious of selections based on the image name ending with '\\rundll32.exe' or having the original file name 'RUNDLL32.EXE', while also ensuring that the parent image ends with '\\explorer.exe'. However, to avoid false positives and enhance accuracy, exclude any command line instances that contain ' C:\\Windows\\System32\\' or end with ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617', as these might indicate legitimate usage of rundll32.exe, such as Windows 10 volume control. This method is essential for identifying potentially malicious activity related to the execution of rundll32.exe under common parent processes which might otherwise seem benign. This detection logic specifically aids in identifying and mitigating strategies employed in the Raspberry Robin malware activity without immediately flagging regular system behaviors as threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_parent:\n        ParentImage|endswith: '\\explorer.exe'\n    filter:\n        - CommandLine|contains: ' C:\\Windows\\System32\\' # The space at the start is required\n        - CommandLine|endswith: ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617' # Windows 10 volume control\n    condition: all of selection_* and not filter\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_parent:\n        ParentImage|endswith: '\\explorer.exe'\n    filter:\n        - CommandLine|contains: ' C:\\Windows\\System32\\' # The space at the start is required\n        - CommandLine|endswith: ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617' # Windows 10 volume control\n    condition: all of selection_* and not filter\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious start of rundll32.exe with a parent process of Explorer.exe. Variant of Raspberry Robin, as first reported by Red Canary.",
      "answer": "In order to detect suspicious start of rundll32.exe with a parent process of Explorer.exe, indicative of the variant of Raspberry Robin, as first reported by Red Canary, you should observe for process creation events in Windows environments. Specifically, monitor for instances where rundll32.exe is started and has explorer.exe as its parent process. Be cautious of selections based on the image name ending with '\\rundll32.exe' or having the original file name 'RUNDLL32.EXE', while also ensuring that the parent image ends with '\\explorer.exe'. However, to avoid false positives and enhance accuracy, exclude any command line instances that contain ' C:\\Windows\\System32\\' or end with ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617', as these might indicate legitimate usage of rundll32.exe, such as Windows 10 volume control. This method is essential for identifying potentially malicious activity related to the execution of rundll32.exe under common parent processes which might otherwise seem benign. This detection logic specifically aids in identifying and mitigating strategies employed in the Raspberry Robin malware activity without immediately flagging regular system behaviors as threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Write-EventLog'\n            - '-RawData '\n    condition: selection\nfalsepositives:\n    - Legitimate applications writing events via this cmdlet. Investigate alerts to determine if the action is benign\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Write-EventLog'\n            - '-RawData '\n    condition: selection\nfalsepositives:\n    - Legitimate applications writing events via this cmdlet. Investigate alerts to determine if the action is benign\nlevel: medium\n",
      "question": "usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use",
      "answer": "In order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the SysInternals Procdump utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the SysInternals Procdump utility, you should: Monitor process creation logs in Windows systems for instances where processes end with '\\procdump.exe' or '\\procdump64.exe', indicating the execution of the SysInternals Procdump utility. It is essential to be aware that this utility can also be used legitimately by developers or administrators, so not all detections necessarily represent malicious activity. The detection significance is considered medium due to the potential for both benign and malicious use of Procdump.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium\n",
      "question": "usage of the SysInternals Procdump utility",
      "answer": "In order to detect usage of the SysInternals Procdump utility, you should: Monitor process creation logs in Windows systems for instances where processes end with '\\procdump.exe' or '\\procdump64.exe', indicating the execution of the SysInternals Procdump utility. It is essential to be aware that this utility can also be used legitimately by developers or administrators, so not all detections necessarily represent malicious activity. The detection significance is considered medium due to the potential for both benign and malicious use of Procdump."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Advanced IP Scanner, which seems to be a popular tool for ransomware groups, you should: \n\nLook for events related to file activities within Windows systems, specifically focusing on the category that captures file events. Monitor any instances where files are created, modified, or otherwise manipulated within the directory path `\\AppData\\Local\\Temp\\Advanced IP Scanner 2`. This specific path inclusion is pivotal because it's indicative of the Advanced IP Scanner tool's operation, a tool frequently utilized by ransomware groups for reconnaissance or network mapping before launching an attack. However, it's crucial to account for possible legitimate administrative uses of this tool within your environment, marking them as expected exceptions to reduce false positives. This monitoring is deemed to have a medium level of importance in identifying potential security threats related to ransomware activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\Advanced IP Scanner 2'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\Advanced IP Scanner 2'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium\n",
      "question": "use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.",
      "answer": "In order to detect the use of Advanced IP Scanner, which seems to be a popular tool for ransomware groups, you should: \n\nLook for events related to file activities within Windows systems, specifically focusing on the category that captures file events. Monitor any instances where files are created, modified, or otherwise manipulated within the directory path `\\AppData\\Local\\Temp\\Advanced IP Scanner 2`. This specific path inclusion is pivotal because it's indicative of the Advanced IP Scanner tool's operation, a tool frequently utilized by ransomware groups for reconnaissance or network mapping before launching an attack. However, it's crucial to account for possible legitimate administrative uses of this tool within your environment, marking them as expected exceptions to reduce false positives. This monitoring is deemed to have a medium level of importance in identifying potential security threats related to ransomware activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a registry value in the \".wav\\OpenWithProgIds\" key with an uncommon name. This could be related to SNAKE Malware as reported by CISA.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a registry value in the \".wav\\OpenWithProgIds\" key with an uncommon name, which could be related to SNAKE Malware as reported by CISA, you should:\n\nMonitor the Windows Registry for \"SetValue\" events where the target object falls under the path '\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\\'. This is pivotal since attackers aiming to exploit the system might create or modify registry entries associated with file associations, in this case, WAV audio files, to execute malicious payloads. Specific attention should be directed towards entries that do not end with '.AssocFile.WAV' and do not contain '.wav.' within their names. These particular constraints help in distinguishing potential malicious activities from regular changes, reducing the likelihood of false positives. However, it's important to note that some legitimate processes might also write to this key by default, indicating that fine-tuning may be necessary to accurately discriminate between benign and malicious modifications. This monitoring strategy is essential in identifying unusual activities that could signify the presence of SNAKE Malware or similar threats attempting to leverage file association manipulations within the Windows operating system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\\'\n    filter_main_wav:\n        - TargetObject|endswith: '.AssocFile.WAV'\n        - TargetObject|contains: '.wav.'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some additional tuning might be required to tune out legitimate processes that write to this key by default\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\\'\n    filter_main_wav:\n        - TargetObject|endswith: '.AssocFile.WAV'\n        - TargetObject|contains: '.wav.'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some additional tuning might be required to tune out legitimate processes that write to this key by default\nlevel: medium\n",
      "question": "creation of a registry value in the \".wav\\OpenWithProgIds\" key with an uncommon name. This could be related to SNAKE Malware as reported by CISA",
      "answer": "In order to detect the creation of a registry value in the \".wav\\OpenWithProgIds\" key with an uncommon name, which could be related to SNAKE Malware as reported by CISA, you should:\n\nMonitor the Windows Registry for \"SetValue\" events where the target object falls under the path '\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\\'. This is pivotal since attackers aiming to exploit the system might create or modify registry entries associated with file associations, in this case, WAV audio files, to execute malicious payloads. Specific attention should be directed towards entries that do not end with '.AssocFile.WAV' and do not contain '.wav.' within their names. These particular constraints help in distinguishing potential malicious activities from regular changes, reducing the likelihood of false positives. However, it's important to note that some legitimate processes might also write to this key by default, indicating that fine-tuning may be necessary to accurately discriminate between benign and malicious modifications. This monitoring strategy is essential in identifying unusual activities that could signify the presence of SNAKE Malware or similar threats attempting to leverage file association manipulations within the Windows operating system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting processes loading the non-existent DLL \"ShellChromeAPI\". One known example is the \"DeviceEnroller\" binary in combination with the \"PhoneDeepLink\" flag tries to load this DLL.\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect processes loading the non-existent DLL \"ShellChromeAPI\", which could indicate that adversaries are attempting to execute their own malicious DLL via legitimate Windows processes like DeviceEnroller.exe by misusing the \"PhoneDeepLink\" flag, you should focus on monitoring image loading activities within Windows environments. Specifically, you should pay attention to any instances where a DLL ending with the name \"\\ShellChromeAPI.dll\" is loaded. This DLL should not exist on modern Windows systems, and any attempt to load it should be considered suspicious and possibly indicative of an attack where an adversary is leveraging a renamed malicious DLL to compromise the system. It is important to remain vigilant for false positives, although they are currently unknown, and treat any detection at a high severity level due to the potential for significant system compromise. This technique is a telltale sign of adversaries trying to discreetly execute malicious code under the guise of legitimate operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        # The DLL shouldn't exist on Windows anymore. If for some reason you still have it. You could filter out legitimate calls\n        ImageLoaded|endswith: '\\ShellChromeAPI.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        # The DLL shouldn't exist on Windows anymore. If for some reason you still have it. You could filter out legitimate calls\n        ImageLoaded|endswith: '\\ShellChromeAPI.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "processes loading the non-existent DLL \"ShellChromeAPI\". One known example is the \"DeviceEnroller\" binary in combination with the \"PhoneDeepLink\" flag tries to load this DLL.\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
      "answer": "In order to detect processes loading the non-existent DLL \"ShellChromeAPI\", which could indicate that adversaries are attempting to execute their own malicious DLL via legitimate Windows processes like DeviceEnroller.exe by misusing the \"PhoneDeepLink\" flag, you should focus on monitoring image loading activities within Windows environments. Specifically, you should pay attention to any instances where a DLL ending with the name \"\\ShellChromeAPI.dll\" is loaded. This DLL should not exist on modern Windows systems, and any attempt to load it should be considered suspicious and possibly indicative of an attack where an adversary is leveraging a renamed malicious DLL to compromise the system. It is important to remain vigilant for false positives, although they are currently unknown, and treat any detection at a high severity level due to the potential for significant system compromise. This technique is a telltale sign of adversaries trying to discreetly execute malicious code under the guise of legitimate operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries leveraging legitimate desktop support and remote access software for establishing an interactive command and control channel within networks, you should focus on monitoring process creations within Windows environments. Specifically, look out for processes that involve the \"LMIGuardianSvc\" in either their description, product name, or are associated with the company \"LogMeIn, Inc.\" This focuses on identifying potentially malicious usage of LogMeIn, a known remote access tool that might be exploited by an attacker to gain or maintain access within a compromised system.\n\nKeep in mind that while this activity can indicate malicious intent, there can also be legitimate uses of LogMeIn within your environment for authorized remote support or administrative activities. Therefore, any detection requires careful analysis to differentiate between legitimate use and potential misuse by adversaries. Continuously monitor these indicators with a medium level of alertness, ensuring to investigate the context in which these processes are created, such as the time of the day they are run, the user account executing them, and network traffic associated with remote session initiation.\n\nThis analysis is particularly crucial as tools like LogMeIn and other similar legitimate remote access services are often whitelisted in organizational networks. These tools have been noted for their frequent misuse compared to other legitimate software for establishing a foothold or maintaining presence on targeted systems, as highlighted in various threat intelligence reports, including those from Symantec.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: LMIGuardianSvc\n        - Product: LMIGuardianSvc\n        - Company: LogMeIn, Inc.\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: LMIGuardianSvc\n        - Product: LMIGuardianSvc\n        - Company: LogMeIn, Inc.\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect adversaries leveraging legitimate desktop support and remote access software for establishing an interactive command and control channel within networks, you should focus on monitoring process creations within Windows environments. Specifically, look out for processes that involve the \"LMIGuardianSvc\" in either their description, product name, or are associated with the company \"LogMeIn, Inc.\" This focuses on identifying potentially malicious usage of LogMeIn, a known remote access tool that might be exploited by an attacker to gain or maintain access within a compromised system.\n\nKeep in mind that while this activity can indicate malicious intent, there can also be legitimate uses of LogMeIn within your environment for authorized remote support or administrative activities. Therefore, any detection requires careful analysis to differentiate between legitimate use and potential misuse by adversaries. Continuously monitor these indicators with a medium level of alertness, ensuring to investigate the context in which these processes are created, such as the time of the day they are run, the user account executing them, and network traffic associated with remote session initiation.\n\nThis analysis is particularly crucial as tools like LogMeIn and other similar legitimate remote access services are often whitelisted in organizational networks. These tools have been noted for their frequent misuse compared to other legitimate software for establishing a foothold or maintaining presence on targeted systems, as highlighted in various threat intelligence reports, including those from Symantec."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential SpEL Injection exploitation, which may lead to RCE..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential SpEL Injection exploitation, which may lead to RCE, you should focus on monitoring application error logs specifically from applications using the Spring framework. This detection relies on the presence of certain keywords within the logs that indicate a potential SpEL (Spring Expression Language) Injection attack. One critical keyword to look out for is 'org.springframework.expression.ExpressionException'. If this keyword appears in the application logs, it signals a possible attack attempt. It's important to ensure that the logs being monitored are filtered to include only entries with a severity of ERROR or above to increase the relevance of the detection.\n\nBe aware that not every occurrence of 'org.springframework.expression.ExpressionException' is indicative of an attack. Some instances may arise due to application bugs. Therefore, occurrences flagged by this detection technique should be further investigated to confirm whether they are indeed malicious attempts to exploit SpEL Injection vulnerabilities. This approach helps identify attackers attempting to execute code remotely by exploiting SpEL injection vulnerabilities, contributing to a robust cybersecurity posture against such advanced threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: application\n    product: spring\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'org.springframework.expression.ExpressionException'\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: application\n    product: spring\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'org.springframework.expression.ExpressionException'\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: high\n",
      "question": "potential SpEL Injection exploitation, which may lead to RCE.",
      "answer": "In order to detect potential SpEL Injection exploitation, which may lead to RCE, you should focus on monitoring application error logs specifically from applications using the Spring framework. This detection relies on the presence of certain keywords within the logs that indicate a potential SpEL (Spring Expression Language) Injection attack. One critical keyword to look out for is 'org.springframework.expression.ExpressionException'. If this keyword appears in the application logs, it signals a possible attack attempt. It's important to ensure that the logs being monitored are filtered to include only entries with a severity of ERROR or above to increase the relevance of the detection.\n\nBe aware that not every occurrence of 'org.springframework.expression.ExpressionException' is indicative of an attack. Some instances may arise due to application bugs. Therefore, occurrences flagged by this detection technique should be further investigated to confirm whether they are indeed malicious attempts to exploit SpEL Injection vulnerabilities. This approach helps identify attackers attempting to execute code remotely by exploiting SpEL injection vulnerabilities, contributing to a robust cybersecurity posture against such advanced threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection, you should: Monitor process creation events on Windows systems, especially focusing on the execution of \"reg.exe\". Look specifically for command lines that modify registry paths related to Windows Defender, encompassing both settings for Windows Defender itself and its additional security features like Windows Defender Security Center. Pay close attention when \"reg.exe\" is used to manipulate registry keys by adding '0' values to critical settings such as exploit protection overrides, folder access control, potentially unwanted application (PUA) protection, sample submission consent, and tamper protection, which generally weaken the system's defensive capabilities. Equally important is to identify when '1' values are added to disable a wide array of protection features including anti-spyware, antivirus, archive scanning, behavior monitoring, and realtime monitoring, among others. This activity requires rigorous scrutiny because, although there might be rare legitimate uses by administrators for testing purposes, any occurrence of these registry modifications could point toward an attacker's attempt to undermine the system's security posture.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_root_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_root_path:\n        CommandLine|contains:\n            - 'SOFTWARE\\Microsoft\\Windows Defender\\'\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center'\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows Defender\\'\n    selection_dword_0:\n        CommandLine|contains|all:\n            - ' add '\n            - 'd 0'\n        CommandLine|contains:\n            - 'DisallowExploitProtectionOverride'\n            - 'EnableControlledFolderAccess'\n            - 'MpEnablePus'\n            - 'PUAProtection'\n            - 'SpynetReporting'\n            - 'SubmitSamplesConsent'\n            - 'TamperProtection'\n    selection_dword_1:\n        CommandLine|contains|all:\n            - ' add '\n            - 'd 1'\n        CommandLine|contains:\n            - 'DisableAntiSpyware'\n            - 'DisableAntiSpywareRealtimeProtection'\n            - 'DisableAntiVirus'\n            - 'DisableArchiveScanning'\n            - 'DisableBehaviorMonitoring'\n            - 'DisableBlockAtFirstSeen'\n            - 'DisableConfig'\n            - 'DisableEnhancedNotifications'\n            - 'DisableIntrusionPreventionSystem'\n            - 'DisableIOAVProtection'\n            - 'DisableOnAccessProtection'\n            - 'DisablePrivacyMode'\n            - 'DisableRealtimeMonitoring'\n            - 'DisableRoutinelyTakingAction'\n            - 'DisableScanOnRealtimeEnable'\n            - 'DisableScriptScanning'\n            - 'Notification_Suppress'\n            - 'SignatureDisableUpdateOnStartupWithoutEngine'\n    condition: all of selection_root_* and 1 of selection_dword_*\nfalsepositives:\n    - Rare legitimate use by administrators to test software (should always be investigated)\nlevel: high\n\n            ",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_root_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_root_path:\n        CommandLine|contains:\n            - 'SOFTWARE\\Microsoft\\Windows Defender\\'\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center'\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows Defender\\'\n    selection_dword_0:\n        CommandLine|contains|all:\n            - ' add '\n            - 'd 0'\n        CommandLine|contains:\n            - 'DisallowExploitProtectionOverride'\n            - 'EnableControlledFolderAccess'\n            - 'MpEnablePus'\n            - 'PUAProtection'\n            - 'SpynetReporting'\n            - 'SubmitSamplesConsent'\n            - 'TamperProtection'\n    selection_dword_1:\n        CommandLine|contains|all:\n            - ' add '\n            - 'd 1'\n        CommandLine|contains:\n            - 'DisableAntiSpyware'\n            - 'DisableAntiSpywareRealtimeProtection'\n            - 'DisableAntiVirus'\n            - 'DisableArchiveScanning'\n            - 'DisableBehaviorMonitoring'\n            - 'DisableBlockAtFirstSeen'\n            - 'DisableConfig'\n            - 'DisableEnhancedNotifications'\n            - 'DisableIntrusionPreventionSystem'\n            - 'DisableIOAVProtection'\n            - 'DisableOnAccessProtection'\n            - 'DisablePrivacyMode'\n            - 'DisableRealtimeMonitoring'\n            - 'DisableRoutinelyTakingAction'\n            - 'DisableScanOnRealtimeEnable'\n            - 'DisableScriptScanning'\n            - 'Notification_Suppress'\n            - 'SignatureDisableUpdateOnStartupWithoutEngine'\n    condition: all of selection_root_* and 1 of selection_dword_*\nfalsepositives:\n    - Rare legitimate use by administrators to test software (should always be investigated)\nlevel: high\n\n            ",
      "question": "usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection",
      "answer": "In order to detect the usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection, you should: Monitor process creation events on Windows systems, especially focusing on the execution of \"reg.exe\". Look specifically for command lines that modify registry paths related to Windows Defender, encompassing both settings for Windows Defender itself and its additional security features like Windows Defender Security Center. Pay close attention when \"reg.exe\" is used to manipulate registry keys by adding '0' values to critical settings such as exploit protection overrides, folder access control, potentially unwanted application (PUA) protection, sample submission consent, and tamper protection, which generally weaken the system's defensive capabilities. Equally important is to identify when '1' values are added to disable a wide array of protection features including anti-spyware, antivirus, archive scanning, behavior monitoring, and realtime monitoring, among others. This activity requires rigorous scrutiny because, although there might be rare legitimate uses by administrators for testing purposes, any occurrence of these registry modifications could point toward an attacker's attempt to undermine the system's security posture."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting access to DEWMODE webshell as described in FIREEYE report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect access to DEWMODE webshell as described in FIREEYE report, you should: Monitor your webserver logs for queries that match specific patterns indicating an attempt to interact with the DEWMODE webshell. These patterns are identified by searching for specific parameters in the query string of the URL. Two primary patterns are defined for detection:\n\n1. The query must contain all of the following elements: '?dwn=', '&fn=', and '.html?'.\n2. Alternatively, the query must include '&dwn=', '?fn=', and '.html?'.\n\nIf any of these patterns are detected in the query string of a URL request, it suggests that the DEWMODE webshell is being accessed or attempted to be accessed. It is essential to capture and analyze the client IP address and the server's response for further investigation because of the high severity level associated with this detection. Be aware that while this rule is crucial for identifying potential webshell access, there may be unknown false positives, hence additional verification might be required.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains|all:\n            - '?dwn='\n            - '&fn='\n            - '.html?'\n    selection2:\n        cs-uri-query|contains|all:\n            - '&dwn='\n            - '?fn='\n            - '.html?'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - response\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains|all:\n            - '?dwn='\n            - '&fn='\n            - '.html?'\n    selection2:\n        cs-uri-query|contains|all:\n            - '&dwn='\n            - '?fn='\n            - '.html?'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - response\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "access to DEWMODE webshell as described in FIREEYE report",
      "answer": "In order to detect access to DEWMODE webshell as described in FIREEYE report, you should: Monitor your webserver logs for queries that match specific patterns indicating an attempt to interact with the DEWMODE webshell. These patterns are identified by searching for specific parameters in the query string of the URL. Two primary patterns are defined for detection:\n\n1. The query must contain all of the following elements: '?dwn=', '&fn=', and '.html?'.\n2. Alternatively, the query must include '&dwn=', '?fn=', and '.html?'.\n\nIf any of these patterns are detected in the query string of a URL request, it suggests that the DEWMODE webshell is being accessed or attempted to be accessed. It is essential to capture and analyze the client IP address and the server's response for further investigation because of the high severity level associated with this detection. Be aware that while this rule is crucial for identifying potential webshell access, there may be unknown false positives, hence additional verification might be required."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the Impersonate tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should monitor for specific activity indicative of this tool's operation within Windows process creation logs. Look for the execution of a process named \"impersonate.exe\" in the command line. Additionally, watch for command-line options indicative of the tool's use, such as 'list', 'exec', and 'adduser'. To enhance the detection accuracy, also check for the presence of specific hash values associated with the Impersonate tool. These hash values include an MD5 hash of '9520714AB576B0ED01D1513691377D01', a SHA256 hash of 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A', and an IMPHASH of '0A358FFC1697B7A07D0E817AC740DF62'. The detection should trigger if any of the command-line criteria are met or if one of the specified hashes is identified. Maintaining a cautious approach to potential false positives is advised, as their occurrence is currently deemed unknown. This observance is evaluated at a medium level of importance in the context of cybersecurity efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_commandline_exe:\n        CommandLine|contains: 'impersonate.exe'\n    selection_commandline_opt:\n        CommandLine|contains:\n            - ' list '\n            - ' exec '\n            - ' adduser '\n    selection_hash_plain:\n        Hashes|contains:\n            - 'MD5=9520714AB576B0ED01D1513691377D01'\n            - 'SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n            - 'IMPHASH=0A358FFC1697B7A07D0E817AC740DF62'\n    selection_hash_ext:\n        - md5: '9520714AB576B0ED01D1513691377D01'\n        - sha256: 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n        - Imphash: '0A358FFC1697B7A07D0E817AC740DF62'\n    condition: all of selection_commandline_* or 1 of selection_hash_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_commandline_exe:\n        CommandLine|contains: 'impersonate.exe'\n    selection_commandline_opt:\n        CommandLine|contains:\n            - ' list '\n            - ' exec '\n            - ' adduser '\n    selection_hash_plain:\n        Hashes|contains:\n            - 'MD5=9520714AB576B0ED01D1513691377D01'\n            - 'SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n            - 'IMPHASH=0A358FFC1697B7A07D0E817AC740DF62'\n    selection_hash_ext:\n        - md5: '9520714AB576B0ED01D1513691377D01'\n        - sha256: 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n        - Imphash: '0A358FFC1697B7A07D0E817AC740DF62'\n    condition: all of selection_commandline_* or 1 of selection_hash_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
      "answer": "In order to detect execution of the Impersonate tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should monitor for specific activity indicative of this tool's operation within Windows process creation logs. Look for the execution of a process named \"impersonate.exe\" in the command line. Additionally, watch for command-line options indicative of the tool's use, such as 'list', 'exec', and 'adduser'. To enhance the detection accuracy, also check for the presence of specific hash values associated with the Impersonate tool. These hash values include an MD5 hash of '9520714AB576B0ED01D1513691377D01', a SHA256 hash of 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A', and an IMPHASH of '0A358FFC1697B7A07D0E817AC740DF62'. The detection should trigger if any of the command-line criteria are met or if one of the specified hashes is identified. Maintaining a cautious approach to potential false positives is advised, as their occurrence is currently deemed unknown. This observance is evaluated at a medium level of importance in the context of cybersecurity efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"MSPUB\" (Microsoft Publisher) to download arbitrary files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of \"MSPUB\" (Microsoft Publisher) to download arbitrary files, you should: identify when the Microsoft Publisher application launches with specific command lines that indicate an attempt to download files from the internet. Monitor process creation logs on Windows systems for instances where MSPUB.exe is executed. Specifically, look for situations where the 'Image' path ends with '\\MSPUB.exe' or the 'OriginalFileName' is exactly 'MSPUB.exe'. Additionally, scrutinize the command line arguments accompanying the execution of Microsoft Publisher for URLs that begin with 'http://', 'https://', or 'ftp://'. These URLs suggest that the application might be used to download files from the internet, which is an unusual activity for this type of software. Bear in mind that while this detection strategy is set at a medium threat level, not all instances identified may represent malicious activity, and some might be false positives. The overall aim is to monitor and identify potential misuse of a legitimate application (Microsoft Publisher) to perform actions that could be indicative of a security compromise or an attempted compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSPUB.exe'\n        - OriginalFileName: 'MSPUB.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSPUB.exe'\n        - OriginalFileName: 'MSPUB.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of \"MSPUB\" (Microsoft Publisher) to download arbitrary files",
      "answer": "In order to detect usage of \"MSPUB\" (Microsoft Publisher) to download arbitrary files, you should: identify when the Microsoft Publisher application launches with specific command lines that indicate an attempt to download files from the internet. Monitor process creation logs on Windows systems for instances where MSPUB.exe is executed. Specifically, look for situations where the 'Image' path ends with '\\MSPUB.exe' or the 'OriginalFileName' is exactly 'MSPUB.exe'. Additionally, scrutinize the command line arguments accompanying the execution of Microsoft Publisher for URLs that begin with 'http://', 'https://', or 'ftp://'. These URLs suggest that the application might be used to download files from the internet, which is an unusual activity for this type of software. Bear in mind that while this detection strategy is set at a medium threat level, not all instances identified may represent malicious activity, and some might be false positives. The overall aim is to monitor and identify potential misuse of a legitimate application (Microsoft Publisher) to perform actions that could be indicative of a security compromise or an attempted compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section, you should: Monitor the process creation logs in Windows systems for any instances where the process 'C:\\Windows\\System32\\wpbbin.exe' is initiated. This specific file execution is associated with sophisticated persistence mechanisms that leverage the Unified Extensible Firmware Interface (UEFI), making it a critical point of detection for potential security breaches. Given the nature of this detection, it's tagged with tactics and techniques commonly observed in system persistence efforts and may include manipulation of UEFI firmware. Be aware that there are scenarios where this file may be legitimately used, particularly by certain hardware manufacturers like Lenovo. Therefore, while this detection is set to a high level of alert, it's important to investigate the context of its execution to rule out false positives associated with valid usage.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wpbbin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the file by hardware manufacturer such as lenovo (Thanks @0gtweet for the tip)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wpbbin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the file by hardware manufacturer such as lenovo (Thanks @0gtweet for the tip)\nlevel: high\n",
      "question": "execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section",
      "answer": "In order to detect execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section, you should: Monitor the process creation logs in Windows systems for any instances where the process 'C:\\Windows\\System32\\wpbbin.exe' is initiated. This specific file execution is associated with sophisticated persistence mechanisms that leverage the Unified Extensible Firmware Interface (UEFI), making it a critical point of detection for potential security breaches. Given the nature of this detection, it's tagged with tactics and techniques commonly observed in system persistence efforts and may include manipulation of UEFI firmware. Be aware that there are scenarios where this file may be legitimately used, particularly by certain hardware manufacturers like Lenovo. Therefore, while this detection is set to a high level of alert, it's important to investigate the context of its execution to rule out false positives associated with valid usage."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"MSOHTMED\" to download arbitrary files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of \"MSOHTMED\" to download arbitrary files, you should: Monitor for the process creation events on Windows systems that indicate the execution of MSOHTMED.exe (also noted by its original file name 'MsoHtmEd.exe'). Pay special attention to instances where the command line includes URLs starting with 'http://', 'https://', or 'ftp://', as this suggests an attempt to download files from the internet. Such activities should be flagged when both the specific process created and the characteristic command line patterns are observed simultaneously. Be aware that there might be occurrences where these signals do not imply malicious activity, but these cases are currently undetermined. The risk level associated with this detection is considered medium. This method aligns with strategies to identify and mitigate malicious file download attempts and unauthorized access to resources over the internet.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSOHTMED.exe'\n        - OriginalFileName: 'MsoHtmEd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\MSOHTMED.exe'\n        - OriginalFileName: 'MsoHtmEd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of \"MSOHTMED\" to download arbitrary files",
      "answer": "In order to detect usage of \"MSOHTMED\" to download arbitrary files, you should: Monitor for the process creation events on Windows systems that indicate the execution of MSOHTMED.exe (also noted by its original file name 'MsoHtmEd.exe'). Pay special attention to instances where the command line includes URLs starting with 'http://', 'https://', or 'ftp://', as this suggests an attempt to download files from the internet. Such activities should be flagged when both the specific process created and the characteristic command line patterns are observed simultaneously. Be aware that there might be occurrences where these signals do not imply malicious activity, but these cases are currently undetermined. The risk level associated with this detection is considered medium. This method aligns with strategies to identify and mitigate malicious file download attempts and unauthorized access to resources over the internet."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting LSASS process access by pypykatz for credential dumping..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect LSASS process access by pypykatz for credential dumping, you should: Monitor process access logs on Windows systems for instances where there is an attempt to access the Local Security Authority Subsystem Service (LSASS) executable. Specifically, look for access attempts to the 'lsass.exe' file. Verify that the access attempts include call traces to 'C:\\Windows\\SYSTEM32\\ntdll.dll+', 'C:\\Windows\\System32\\KERNELBASE.dll+', 'libffi-7.dll', '_ctypes.pyd+', and any 'python3*.dll+' indicating the use of Python, particularly versions 3.6 or newer as required by pypykatz. Additionally, ensure these access attempts request extensive privileges ('0x1FFFFF'), which is indicative of malicious intent such as credential dumping. This activity is classified as critical due to the sensitive nature of the information potentially being compromised.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        CallTrace|contains|all:\n            - 'C:\\Windows\\SYSTEM32\\ntdll.dll+'\n            - 'C:\\Windows\\System32\\KERNELBASE.dll+'\n            - 'libffi-7.dll'\n            - '_ctypes.pyd+'\n            - 'python3*.dll+'   # Pypy requires python>=3.6\n        GrantedAccess: '0x1FFFFF'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        CallTrace|contains|all:\n            - 'C:\\Windows\\SYSTEM32\\ntdll.dll+'\n            - 'C:\\Windows\\System32\\KERNELBASE.dll+'\n            - 'libffi-7.dll'\n            - '_ctypes.pyd+'\n            - 'python3*.dll+'   # Pypy requires python>=3.6\n        GrantedAccess: '0x1FFFFF'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "LSASS process access by pypykatz for credential dumping.",
      "answer": "In order to detect LSASS process access by pypykatz for credential dumping, you should: Monitor process access logs on Windows systems for instances where there is an attempt to access the Local Security Authority Subsystem Service (LSASS) executable. Specifically, look for access attempts to the 'lsass.exe' file. Verify that the access attempts include call traces to 'C:\\Windows\\SYSTEM32\\ntdll.dll+', 'C:\\Windows\\System32\\KERNELBASE.dll+', 'libffi-7.dll', '_ctypes.pyd+', and any 'python3*.dll+' indicating the use of Python, particularly versions 3.6 or newer as required by pypykatz. Additionally, ensure these access attempts request extensive privileges ('0x1FFFFF'), which is indicative of malicious intent such as credential dumping. This activity is classified as critical due to the sensitive nature of the information potentially being compromised."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting processes loading modules related to PCRE.NET package.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect processes loading modules related to PCRE.NET package, you should: Monitor Windows image load events for any instances where modules are loaded from a specific path within the AppData\\Local\\Temp directory, notably when the path includes \"\\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\\". This activity is noteworthy as it could indicate an attempt to use or abuse PCRE.NET package functionalities in a potentially malicious manner. Given the high level of concern, any detection of such activity should be carefully investigated despite the possibility of unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|contains: \\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|contains: \\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "processes loading modules related to PCRE.NET package",
      "answer": "In order to detect processes loading modules related to PCRE.NET package, you should: Monitor Windows image load events for any instances where modules are loaded from a specific path within the AppData\\Local\\Temp directory, notably when the path includes \"\\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\\". This activity is noteworthy as it could indicate an attempt to use or abuse PCRE.NET package functionalities in a potentially malicious manner. Given the high level of concern, any detection of such activity should be carefully investigated despite the possibility of unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of cmdkey to add generic credentials. As an example, this has to be used before connecting to an RDP session via command line interface..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of cmdkey to add generic credentials, which is a common preparation step before connecting to an RDP session via command line interface, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'cmdkey.exe'. Pay close attention when the command line for 'cmdkey.exe' includes the parameters '/g' (generic credential), '/u' (user), and '/p' (password). This unusual combination of parameters suggests an attempt to add generic credentials, and while it can be a legitimate administrative action, it could also indicate malicious activity aiming to establish persistence or facilitate lateral movement within a network. It's critical to evaluate these incidents in the context of other related activity on the system to distinguish between benign and suspicious uses.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' /g'\n            - ' /u'\n            - ' /p'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate usage for administration purposes\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' /g'\n            - ' /u'\n            - ' /p'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate usage for administration purposes\nlevel: medium\n",
      "question": "usage of cmdkey to add generic credentials. As an example, this has to be used before connecting to an RDP session via command line interface.",
      "answer": "In order to detect usage of cmdkey to add generic credentials, which is a common preparation step before connecting to an RDP session via command line interface, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'cmdkey.exe'. Pay close attention when the command line for 'cmdkey.exe' includes the parameters '/g' (generic credential), '/u' (user), and '/p' (password). This unusual combination of parameters suggests an attempt to add generic credentials, and while it can be a legitimate administrative action, it could also indicate malicious activity aiming to establish persistence or facilitate lateral movement within a network. It's critical to evaluate these incidents in the context of other related activity on the system to distinguish between benign and suspicious uses."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Transferring files with well-known filenames (sensitive files with credential data) using network shares.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts at transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor Windows Security logs for EventID 5145, which corresponds to a network share object was accessed. This EventID is crucial as it indicates file access within shared folders that might be subjected to unauthorized access attempts or data exfiltration activities. Specifically, look for accesses to files containing the following substrings in their paths: '\\mimidrv', '\\lsass', '\\windows\\minidump\\', '\\hiberfil', '\\sqldmpr', '\\sam', '\\ntds.dit', and '\\security'. These paths often include sensitive files that contain credential data and other important information. It's essential to be aware that false positives can occur, especially when sensitive files are being transferred over the network for legitimate administrative purposes by authorized administrators. The severity of this monitoring rule is considered medium, suggesting that while this activity is suspicious, further investigation is needed to confirm malicious intent. Keep in mind, ongoing vigilance and analysis of this type of activity can potentially unveil indicators of techniques tied to Initial Access, Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Discovery, and Lateral Movement - all of which are crucial aspects to understand in the realm of cybersecurity defense.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains:\n            - '\\mimidrv'\n            - '\\lsass'\n            - '\\windows\\minidump\\'\n            - '\\hiberfil'\n            - '\\sqldmpr'\n            - '\\sam'\n            - '\\ntds.dit'\n            - '\\security'\n    condition: selection\nfalsepositives:\n    - Transferring sensitive files for legitimate administration work by legitimate administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains:\n            - '\\mimidrv'\n            - '\\lsass'\n            - '\\windows\\minidump\\'\n            - '\\hiberfil'\n            - '\\sqldmpr'\n            - '\\sam'\n            - '\\ntds.dit'\n            - '\\security'\n    condition: selection\nfalsepositives:\n    - Transferring sensitive files for legitimate administration work by legitimate administrator\nlevel: medium\n",
      "question": "Transferring files with well-known filenames (sensitive files with credential data) using network shares",
      "answer": "In order to detect attempts at transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor Windows Security logs for EventID 5145, which corresponds to a network share object was accessed. This EventID is crucial as it indicates file access within shared folders that might be subjected to unauthorized access attempts or data exfiltration activities. Specifically, look for accesses to files containing the following substrings in their paths: '\\mimidrv', '\\lsass', '\\windows\\minidump\\', '\\hiberfil', '\\sqldmpr', '\\sam', '\\ntds.dit', and '\\security'. These paths often include sensitive files that contain credential data and other important information. It's essential to be aware that false positives can occur, especially when sensitive files are being transferred over the network for legitimate administrative purposes by authorized administrators. The severity of this monitoring rule is considered medium, suggesting that while this activity is suspicious, further investigation is needed to confirm malicious intent. Keep in mind, ongoing vigilance and analysis of this type of activity can potentially unveil indicators of techniques tied to Initial Access, Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Discovery, and Lateral Movement - all of which are crucial aspects to understand in the realm of cybersecurity defense."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed), you should monitor the creation of processes on Windows systems with a focus on those processes that involve command-line arguments containing specific patterns, particularly around the use of 'format:pretty', 'format:\"pretty\"', 'format:\"text\"', and 'format:text'. These patterns are indicative of an attempt to use the Windows Remote Management (WinRM) service in a manner that is often leveraged by attackers to execute scripts such as WsmPty.xsl or WsmTxt.xsl. \n\nAttention should also be given to the originating folder of the executable (Image) that is running the command. In normal circumstances, the WinRM service (winrm.vbs) and the Windows Script Host (cscript.exe) are located in system folders like 'C:\\Windows\\System32\\' and 'C:\\Windows\\SysWOW64\\'. However, in an attack scenario, an attacker may copy and rename these executables to non-system folders to evade detection. As such, detection mechanisms should be more suspicious of command-line activity involving 'winrm' that does not originate from these system folders.\n\nConsidering these factors, activities of interest are those where the command line contains references to 'winrm', alongside the aforementioned format arguments, but where the initiating executable is not located in the default system directories. This pattern is less likely to represent legitimate usage of Windows administrative tools and more likely to be an indicator of a cybersecurity threat, specifically an attempt at remote execution or persistence by an attacker.\n\nGiven the complexity of these behaviors and their associations with sophisticated attack vectors, such activities are considered medium-level threats, albeit unlikely to be false positives. This approach allows for a focused detection of potential malicious activity while minimizing the noise typically associated with the broader use of administrative tools on Windows systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    contains_format_pretty_arg:\n        CommandLine|contains:\n            - 'format:pretty'\n            - 'format:\"pretty\"'\n            - 'format:\"text\"'\n            - 'format:text'\n    image_from_system_folder:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n    contains_winrm:\n        CommandLine|contains: 'winrm'\n    condition: contains_winrm and (contains_format_pretty_arg and not image_from_system_folder)\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    contains_format_pretty_arg:\n        CommandLine|contains:\n            - 'format:pretty'\n            - 'format:\"pretty\"'\n            - 'format:\"text\"'\n            - 'format:text'\n    image_from_system_folder:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n    contains_winrm:\n        CommandLine|contains: 'winrm'\n    condition: contains_winrm and (contains_format_pretty_arg and not image_from_system_folder)\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
      "question": "execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)",
      "answer": "In order to detect execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed), you should monitor the creation of processes on Windows systems with a focus on those processes that involve command-line arguments containing specific patterns, particularly around the use of 'format:pretty', 'format:\"pretty\"', 'format:\"text\"', and 'format:text'. These patterns are indicative of an attempt to use the Windows Remote Management (WinRM) service in a manner that is often leveraged by attackers to execute scripts such as WsmPty.xsl or WsmTxt.xsl. \n\nAttention should also be given to the originating folder of the executable (Image) that is running the command. In normal circumstances, the WinRM service (winrm.vbs) and the Windows Script Host (cscript.exe) are located in system folders like 'C:\\Windows\\System32\\' and 'C:\\Windows\\SysWOW64\\'. However, in an attack scenario, an attacker may copy and rename these executables to non-system folders to evade detection. As such, detection mechanisms should be more suspicious of command-line activity involving 'winrm' that does not originate from these system folders.\n\nConsidering these factors, activities of interest are those where the command line contains references to 'winrm', alongside the aforementioned format arguments, but where the initiating executable is not located in the default system directories. This pattern is less likely to represent legitimate usage of Windows administrative tools and more likely to be an indicator of a cybersecurity threat, specifically an attempt at remote execution or persistence by an attacker.\n\nGiven the complexity of these behaviors and their associations with sophisticated attack vectors, such activities are considered medium-level threats, albeit unlikely to be false positives. This approach allows for a focused detection of potential malicious activity while minimizing the noise typically associated with the broader use of administrative tools on Windows systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process creation events that use the Sysnative folder (common for CobaltStrike spawns).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process creation events that use the Sysnative folder (common for CobaltStrike spawns), you should: Monitor process creation logs in Windows environments, specifically focusing on instances where the command line starts with 'C:\\Windows\\Sysnative\\'. This detection method is crucial for identifying suspicious activity associated with CobaltStrike or similar threats, as attackers often leverage the Sysnative directory to execute 32-bit applications on 64-bit systems in an effort to evade detection. Always include both the command line and parent command line in the monitoring process to enhance context understanding. Be aware that there might be legitimate uses of this technique, although they are typically unknown, thus requiring a medium level of scrutiny when such activities are detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    sysnative:\n        CommandLine|startswith: 'C:\\Windows\\Sysnative\\'\n    condition: sysnative\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    sysnative:\n        CommandLine|startswith: 'C:\\Windows\\Sysnative\\'\n    condition: sysnative\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "process creation events that use the Sysnative folder (common for CobaltStrike spawns)",
      "answer": "In order to detect process creation events that use the Sysnative folder (common for CobaltStrike spawns), you should: Monitor process creation logs in Windows environments, specifically focusing on instances where the command line starts with 'C:\\Windows\\Sysnative\\'. This detection method is crucial for identifying suspicious activity associated with CobaltStrike or similar threats, as attackers often leverage the Sysnative directory to execute 32-bit applications on 64-bit systems in an effort to evade detection. Always include both the command line and parent command line in the monitoring process to enhance context understanding. Be aware that there might be legitimate uses of this technique, although they are typically unknown, thus requiring a medium level of scrutiny when such activities are detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific broken command that was used by Goofy-Guineapig as described by the NCSC report..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a specific broken command that was used by Goofy-Guineapig as described by the NCSC report, you should: focus on monitoring process creation logs on Windows systems. Specifically, be alert for instances where the command line contains the particular sequence 'choice /t %d /d y /n >nul'. The occurrence of this command is a strong indicator of the described malicious activity, with false positives being unlikely. The significance of detecting this command is considered high due to its association with specific attack tactics and techniques outlined by the NCSC in their report on Goofy-Guineapig's operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'choice /t %d /d y /n >nul'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'choice /t %d /d y /n >nul'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "specific broken command that was used by Goofy-Guineapig as described by the NCSC report.",
      "answer": "In order to detect a specific broken command that was used by Goofy-Guineapig as described by the NCSC report, you should: focus on monitoring process creation logs on Windows systems. Specifically, be alert for instances where the command line contains the particular sequence 'choice /t %d /d y /n >nul'. The occurrence of this command is a strong indicator of the described malicious activity, with false positives being unlikely. The significance of detecting this command is considered high due to its association with specific attack tactics and techniques outlined by the NCSC in their report on Goofy-Guineapig's operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes.\nTools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll.\nAs an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes, you should: focus on monitoring Windows systems for events where either dbghelp.dll or dbgcore.dll libraries are loaded. These specific dynamic link libraries are crucial since they contain the MiniDumpWriteDump API, which can be utilized by both legitimate tools like ProcessHacker and malicious activities, particularly for memory dumping purposes. Notably, certain types of malware or attacker frameworks, such as the SilentTrynity Command and Control (C2) Framework, use these APIs to dump sensitive information like the Lsass.exe process memory, enabling them to exfiltrate this data back to the attacker's control server. It's important to note that the detection looks for instances where these DLLs are loaded without being digitally signed, which increases the suspicion level. While there may be unknown false positives, the significance and potential high impact of this behavior warrant a high alert level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\dbghelp.dll'\n            - '\\dbgcore.dll'\n        Signed: 'false'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\dbghelp.dll'\n            - '\\dbgcore.dll'\n        Signed: 'false'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes.\nTools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll.\nAs an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.\n",
      "answer": "In order to detect the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes, you should: focus on monitoring Windows systems for events where either dbghelp.dll or dbgcore.dll libraries are loaded. These specific dynamic link libraries are crucial since they contain the MiniDumpWriteDump API, which can be utilized by both legitimate tools like ProcessHacker and malicious activities, particularly for memory dumping purposes. Notably, certain types of malware or attacker frameworks, such as the SilentTrynity Command and Control (C2) Framework, use these APIs to dump sensitive information like the Lsass.exe process memory, enabling them to exfiltrate this data back to the attacker's control server. It's important to note that the detection looks for instances where these DLLs are loaded without being digitally signed, which increases the suspicion level. While there may be unknown false positives, the significance and potential high impact of this behavior warrant a high alert level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential COM object hijacking leveraging the COM Search Order.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential COM object hijacking leveraging the COM Search Order, you should focus on monitoring registry set actions within the Windows environment, specifically targeting new COM server entries being established in the user's hive. This entails looking for registry operations where the EventType is \"SetValue\" and the TargetObject begins with either 'HKCR\\CLSID\\' or 'HKCU\\Software\\Classes\\CLSID\\'. Moreover, it is crucial that these operations are ending with '\\InprocServer32\\(Default)' to pinpoint the exact nature of the potential hijacking attempt.\n\nTo refine detection accuracy and minimize false positives, a range of filters should be applied to exclude operations related to standard or benign activities. These filters include but are not limited to excluding operations that contain references to system directories like '%%systemroot%%\\system32\\' and '%%systemroot%%\\SysWow64\\', which are common places for legitimate software operations. Similarly, activities related to frequently used applications such as OneDrive, Microsoft Teams, Dropbox, and Nvidia, among others, necessitate exclusions based on specific paths or files associated with these applications. Exclusions also cover updates and processes from Windows Defender, Edge browser activities, and other system utilities like DirectX diagnostics or Python shell extensions, to name a few.\n\nMoreover, it's imperative to consider that some installed utilities, like OneDrive, might legitimately register new COM objects at the user level, which could be flagged as false positives. Thus, while maintaining vigilance for COM object hijacking attempts, it\u2019s crucial to balance sensitivity to potential threats with the understanding of normal system and application behaviors. The overarching goal is to safeguard against malicious COM object registrations that could be exploited for hijacking, while allowing legitimate registry modifications associated with routine software installation and system updates. This approach is informed by identifying misuse of the COM search order to subvert system processes or applications by registering malicious COM objects, a tactic often utilized in persistence, privilege escalation, or other malicious endeavors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection: # Detect new COM servers in the user hive\n        EventType: SetValue\n        TargetObject|startswith:\n            - 'HKCR\\CLSID\\'\n            - 'HKCU\\Software\\Classes\\CLSID\\'\n        TargetObject|endswith: '\\InprocServer32\\(Default)'\n    filter_generic:\n        Details|contains: # Exclude privileged directories and observed FPs\n            - '%%systemroot%%\\system32\\'\n            - '%%systemroot%%\\SysWow64\\'\n    filter_onedrive:\n        Details|contains:\n            # Related To OneDrive\n            - '\\AppData\\Local\\Microsoft\\OneDrive\\'\n            - '\\FileCoAuthLib64.dll'\n            - '\\FileSyncShell64.dll'\n            - '\\FileSyncApi64.dll'\n    filter_health_service:\n        Image: 'C:\\WINDOWS\\system32\\SecurityHealthService.exe'\n    filter_teams:\n        Details|contains|all:\n            - '\\AppData\\Local\\Microsoft\\TeamsMeetingAddin\\'\n            - '\\Microsoft.Teams.AddinLoader.dll'\n    filter_dropbox:\n        Details|contains|all:\n            - '\\AppData\\Roaming\\Dropbox\\'\n            - '\\DropboxExt64.*.dll'\n    filter_trend_micro:\n        Details|endswith: 'TmopIEPlg.dll' #TrendMicro osce\n    filter_update:\n        Image:\n            - 'C:\\WINDOWS\\system32\\wuauclt.exe'\n            - 'C:\\WINDOWS\\system32\\svchost.exe'\n    filter_defender:\n        Image|startswith:\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n            - 'C:\\Program Files\\Windows Defender\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_nvidia:\n        Details|contains: '\\FileRepository\\nvmdi.inf'\n    filter_edge:\n        Image|endswith: '\\MicrosoftEdgeUpdateComRegisterShell64.exe'\n    filter_dx:\n        Image: 'C:\\WINDOWS\\SYSTEM32\\dxdiag.exe'\n    filter_python:\n        Details:\n            - 'C:\\Windows\\pyshellext.amd64.dll'\n            - 'C:\\Windows\\pyshellext.dll'\n    filter_bonjourlib:\n        Details:\n            - 'C:\\Windows\\system32\\dnssdX.dll'\n            - 'C:\\Windows\\SysWOW64\\dnssdX.dll'\n    filter_printextensionmanager:\n        Details: 'C:\\Windows\\system32\\spool\\drivers\\x64\\3\\PrintConfig.dll'\n    filter_programfiles:\n        Details|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    filter_programdata:\n        Details|startswith: 'C:\\ProgramData\\Microsoft\\'\n    filter_gameservice:\n        Details|contains: 'C:\\WINDOWS\\system32\\GamingServicesProxy.dll'\n    filter_poqexec:\n        Image: 'C:\\Windows\\System32\\poqexec.exe'\n        Details|contains: 'C:\\Windows\\System32\\Autopilot.dll'\n    filter_sec_health_svc:\n        Image: 'C:\\Windows\\system32\\SecurityHealthService.exe'\n        Details|contains: 'C:\\Windows\\System32\\SecurityHealth'\n    filter_inprocserver:\n        Image:\n            - 'C:\\Windows\\System32\\poqexec.exe'\n            - 'C:\\Windows\\System32\\regsvr32.exe'\n        TargetObject|endswith: '\\InProcServer32\\(Default)'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Some installed utilities (i.e. OneDrive) may serve new COM objects at user-level\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection: # Detect new COM servers in the user hive\n        EventType: SetValue\n        TargetObject|startswith:\n            - 'HKCR\\CLSID\\'\n            - 'HKCU\\Software\\Classes\\CLSID\\'\n        TargetObject|endswith: '\\InprocServer32\\(Default)'\n    filter_generic:\n        Details|contains: # Exclude privileged directories and observed FPs\n            - '%%systemroot%%\\system32\\'\n            - '%%systemroot%%\\SysWow64\\'\n    filter_onedrive:\n        Details|contains:\n            # Related To OneDrive\n            - '\\AppData\\Local\\Microsoft\\OneDrive\\'\n            - '\\FileCoAuthLib64.dll'\n            - '\\FileSyncShell64.dll'\n            - '\\FileSyncApi64.dll'\n    filter_health_service:\n        Image: 'C:\\WINDOWS\\system32\\SecurityHealthService.exe'\n    filter_teams:\n        Details|contains|all:\n            - '\\AppData\\Local\\Microsoft\\TeamsMeetingAddin\\'\n            - '\\Microsoft.Teams.AddinLoader.dll'\n    filter_dropbox:\n        Details|contains|all:\n            - '\\AppData\\Roaming\\Dropbox\\'\n            - '\\DropboxExt64.*.dll'\n    filter_trend_micro:\n        Details|endswith: 'TmopIEPlg.dll' #TrendMicro osce\n    filter_update:\n        Image:\n            - 'C:\\WINDOWS\\system32\\wuauclt.exe'\n            - 'C:\\WINDOWS\\system32\\svchost.exe'\n    filter_defender:\n        Image|startswith:\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n            - 'C:\\Program Files\\Windows Defender\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_nvidia:\n        Details|contains: '\\FileRepository\\nvmdi.inf'\n    filter_edge:\n        Image|endswith: '\\MicrosoftEdgeUpdateComRegisterShell64.exe'\n    filter_dx:\n        Image: 'C:\\WINDOWS\\SYSTEM32\\dxdiag.exe'\n    filter_python:\n        Details:\n            - 'C:\\Windows\\pyshellext.amd64.dll'\n            - 'C:\\Windows\\pyshellext.dll'\n    filter_bonjourlib:\n        Details:\n            - 'C:\\Windows\\system32\\dnssdX.dll'\n            - 'C:\\Windows\\SysWOW64\\dnssdX.dll'\n    filter_printextensionmanager:\n        Details: 'C:\\Windows\\system32\\spool\\drivers\\x64\\3\\PrintConfig.dll'\n    filter_programfiles:\n        Details|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    filter_programdata:\n        Details|startswith: 'C:\\ProgramData\\Microsoft\\'\n    filter_gameservice:\n        Details|contains: 'C:\\WINDOWS\\system32\\GamingServicesProxy.dll'\n    filter_poqexec:\n        Image: 'C:\\Windows\\System32\\poqexec.exe'\n        Details|contains: 'C:\\Windows\\System32\\Autopilot.dll'\n    filter_sec_health_svc:\n        Image: 'C:\\Windows\\system32\\SecurityHealthService.exe'\n        Details|contains: 'C:\\Windows\\System32\\SecurityHealth'\n    filter_inprocserver:\n        Image:\n            - 'C:\\Windows\\System32\\poqexec.exe'\n            - 'C:\\Windows\\System32\\regsvr32.exe'\n        TargetObject|endswith: '\\InProcServer32\\(Default)'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Some installed utilities (i.e. OneDrive) may serve new COM objects at user-level\nlevel: medium\n",
      "question": "potential COM object hijacking leveraging the COM Search Order",
      "answer": "In order to detect potential COM object hijacking leveraging the COM Search Order, you should focus on monitoring registry set actions within the Windows environment, specifically targeting new COM server entries being established in the user's hive. This entails looking for registry operations where the EventType is \"SetValue\" and the TargetObject begins with either 'HKCR\\CLSID\\' or 'HKCU\\Software\\Classes\\CLSID\\'. Moreover, it is crucial that these operations are ending with '\\InprocServer32\\(Default)' to pinpoint the exact nature of the potential hijacking attempt.\n\nTo refine detection accuracy and minimize false positives, a range of filters should be applied to exclude operations related to standard or benign activities. These filters include but are not limited to excluding operations that contain references to system directories like '%%systemroot%%\\system32\\' and '%%systemroot%%\\SysWow64\\', which are common places for legitimate software operations. Similarly, activities related to frequently used applications such as OneDrive, Microsoft Teams, Dropbox, and Nvidia, among others, necessitate exclusions based on specific paths or files associated with these applications. Exclusions also cover updates and processes from Windows Defender, Edge browser activities, and other system utilities like DirectX diagnostics or Python shell extensions, to name a few.\n\nMoreover, it's imperative to consider that some installed utilities, like OneDrive, might legitimately register new COM objects at the user level, which could be flagged as false positives. Thus, while maintaining vigilance for COM object hijacking attempts, it\u2019s crucial to balance sensitivity to potential threats with the understanding of normal system and application behaviors. The overarching goal is to safeguard against malicious COM object registrations that could be exploited for hijacking, while allowing legitimate registry modifications associated with routine software installation and system updates. This approach is informed by identifying misuse of the COM search order to subvert system processes or applications by registering malicious COM objects, a tactic often utilized in persistence, privilege escalation, or other malicious endeavors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities where adversaries attempt to find domain-level groups and permission settings, a focus is placed on monitoring PowerShell module logs within Windows environments. The monitoring targets two principal behaviors:\n\n1. The use of the `get-ADPrincipalGroupMembership` command, which may be observed in the payload or context information of the logs. This command is indicative of attempts to query the groups that a user or other Active Directory principal belongs to.\n\n2. The execution of the `get-aduser` command with specific parameters: `-f`, `-pr`, and the inclusion of `DoesNotRequirePreAuth`. These parameters together are used to query Active Directory for user objects that match certain criteria, without requiring pre-authentication. The presence of these parameters in both the payload and context information is a critical indicator of an attempt to enumerate user objects with specific attributes or permissions.\n\nLogs showing these patterns should be closely examined, although it is important to consider that these commands may also be used legitimately by administrators for script-based management tasks. As a result, the identified activities are categorized with a low level of confidence in terms of malicious intent. \n\nTo effectively manage this threat, organizations should look for the aforementioned commands and parameters in their PowerShell module logs, understand the context in which these commands are executed, and consider the information being sought through these queries. The detection strategy is centered around the possibility that adversaries may be trying to determine the structure of domain-level groups, identify users with elevated permissions, or both, as part of their reconnaissance or lateral movement phases within a targeted environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_ad_principal:\n        - Payload|contains: 'get-ADPrincipalGroupMembership'\n        - ContextInfo|contains: 'get-ADPrincipalGroupMembership'\n    selection_get_aduser:\n        - Payload|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n        - ContextInfo|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrator script\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_ad_principal:\n        - Payload|contains: 'get-ADPrincipalGroupMembership'\n        - ContextInfo|contains: 'get-ADPrincipalGroupMembership'\n    selection_get_aduser:\n        - Payload|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n        - ContextInfo|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrator script\nlevel: low\n",
      "question": "Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n",
      "answer": "In order to detect activities where adversaries attempt to find domain-level groups and permission settings, a focus is placed on monitoring PowerShell module logs within Windows environments. The monitoring targets two principal behaviors:\n\n1. The use of the `get-ADPrincipalGroupMembership` command, which may be observed in the payload or context information of the logs. This command is indicative of attempts to query the groups that a user or other Active Directory principal belongs to.\n\n2. The execution of the `get-aduser` command with specific parameters: `-f`, `-pr`, and the inclusion of `DoesNotRequirePreAuth`. These parameters together are used to query Active Directory for user objects that match certain criteria, without requiring pre-authentication. The presence of these parameters in both the payload and context information is a critical indicator of an attempt to enumerate user objects with specific attributes or permissions.\n\nLogs showing these patterns should be closely examined, although it is important to consider that these commands may also be used legitimately by administrators for script-based management tasks. As a result, the identified activities are categorized with a low level of confidence in terms of malicious intent. \n\nTo effectively manage this threat, organizations should look for the aforementioned commands and parameters in their PowerShell module logs, understand the context in which these commands are executed, and consider the information being sought through these queries. The detection strategy is centered around the possibility that adversaries may be trying to determine the structure of domain-level groups, identify users with elevated permissions, or both, as part of their reconnaissance or lateral movement phases within a targeted environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting powershell scripts that import modules from suspicious directories.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell scripts that import modules from suspicious directories, you should monitor Windows systems for PowerShell script activities, specifically focusing on script block logging. Ensure that script block logging is enabled to capture the necessary data. Look for instances where scripts are using the `Import-Module` or its alias `ipmo` command followed by paths that point to potentially risky locations, such as temporary folders (`$Env:Temp`), application data folders (`$Env:Appdata`), or the public user directory (`C:\\Users\\Public\\`). These locations are often leveraged by attackers to execute malicious code through PowerShell modules. Monitoring for these specific patterns of module importation can help identify potentially malicious activity and mitigate threats associated with executing unauthorized or malicious PowerShell scripts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Import-Module \"$Env:Temp\\'\n            - Import-Module '$Env:Temp\\\n            - 'Import-Module $Env:Temp\\'\n            - 'Import-Module \"$Env:Appdata\\'\n            - Import-Module '$Env:Appdata\\\n            - 'Import-Module $Env:Appdata\\'\n            - 'Import-Module C:\\Users\\Public\\'\n            # Import-Module alias is \"ipmo\"\n            - 'ipmo \"$Env:Temp\\'\n            - ipmo '$Env:Temp\\\n            - 'ipmo $Env:Temp\\'\n            - 'ipmo \"$Env:Appdata\\'\n            - ipmo '$Env:Appdata\\\n            - 'ipmo $Env:Appdata\\'\n            - 'ipmo C:\\Users\\Public\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Import-Module \"$Env:Temp\\'\n            - Import-Module '$Env:Temp\\\n            - 'Import-Module $Env:Temp\\'\n            - 'Import-Module \"$Env:Appdata\\'\n            - Import-Module '$Env:Appdata\\\n            - 'Import-Module $Env:Appdata\\'\n            - 'Import-Module C:\\Users\\Public\\'\n            # Import-Module alias is \"ipmo\"\n            - 'ipmo \"$Env:Temp\\'\n            - ipmo '$Env:Temp\\\n            - 'ipmo $Env:Temp\\'\n            - 'ipmo \"$Env:Appdata\\'\n            - ipmo '$Env:Appdata\\\n            - 'ipmo $Env:Appdata\\'\n            - 'ipmo C:\\Users\\Public\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "powershell scripts that import modules from suspicious directories",
      "answer": "In order to detect PowerShell scripts that import modules from suspicious directories, you should monitor Windows systems for PowerShell script activities, specifically focusing on script block logging. Ensure that script block logging is enabled to capture the necessary data. Look for instances where scripts are using the `Import-Module` or its alias `ipmo` command followed by paths that point to potentially risky locations, such as temporary folders (`$Env:Temp`), application data folders (`$Env:Appdata`), or the public user directory (`C:\\Users\\Public\\`). These locations are often leveraged by attackers to execute malicious code through PowerShell modules. Monitoring for these specific patterns of module importation can help identify potentially malicious activity and mitigate threats associated with executing unauthorized or malicious PowerShell scripts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting presence of an LSASS dump file in the \"CrashDumps\" folder. This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering have been seen abusing the Windows Error Reporting to dump said process..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the presence of an LSASS dump file in the \"CrashDumps\" folder, which could be a sign of LSASS credential dumping, you should monitor Windows file events specifically in the category of file_event. Look for files in the 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\' path that contain 'lsass.exe.' in their names and end with '.dmp'. Such activities often indicate LSASS credential dumping practices, including techniques like LSASS Shtinkering that exploit Windows Error Reporting for malicious process dumping. Be aware that there could be rare instances where the operating system legitimately dumps the LSASS process due to a crash, which should be considered a potential false positive. Nonetheless, given the high-risk level associated with this detection, it is crucial to pay close attention to such occurrences as they commonly relate to tactics and techniques aiming to exploit credential access.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\'\n        TargetFilename|contains: 'lsass.exe.'\n        TargetFilename|endswith: '.dmp'\n    condition: selection\nfalsepositives:\n    - Rare legitimate dump of the process by the operating system due to a crash of lsass\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\'\n        TargetFilename|contains: 'lsass.exe.'\n        TargetFilename|endswith: '.dmp'\n    condition: selection\nfalsepositives:\n    - Rare legitimate dump of the process by the operating system due to a crash of lsass\nlevel: high\n",
      "question": "presence of an LSASS dump file in the \"CrashDumps\" folder. This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering have been seen abusing the Windows Error Reporting to dump said process.",
      "answer": "In order to detect the presence of an LSASS dump file in the \"CrashDumps\" folder, which could be a sign of LSASS credential dumping, you should monitor Windows file events specifically in the category of file_event. Look for files in the 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\' path that contain 'lsass.exe.' in their names and end with '.dmp'. Such activities often indicate LSASS credential dumping practices, including techniques like LSASS Shtinkering that exploit Windows Error Reporting for malicious process dumping. Be aware that there could be rare instances where the operating system legitimately dumps the LSASS process due to a crash, which should be considered a potential false positive. Nonetheless, given the high-risk level associated with this detection, it is crucial to pay close attention to such occurrences as they commonly relate to tactics and techniques aiming to exploit credential access."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious interactive bash as a parent to rather uncommon child processes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious interactive bash as a parent to rather uncommon child processes, you should: Monitor Linux systems for the creation of processes where the interactive bash (`bash -i`) is the parent process. Pay special attention to child processes that either contain command-line arguments such as '-c import', 'base64', or 'pty.spawn', or are executables like 'whoami', 'iptables', '/ncat', '/nc', or '/netcat'. These patterns may indicate malicious activity. Nevertheless, be aware that there could be legitimate software that uses these command patterns or executable names, thus it's vital to differentiate between benign and suspicious activities with a medium level of caution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        ParentCommandLine: 'bash -i'\n    anomaly1:\n        CommandLine|contains:\n            - '-c import '\n            - 'base64'\n            - 'pty.spawn'\n    anomaly2:\n        Image|endswith:\n            - 'whoami'\n            - 'iptables'\n            - '/ncat'\n            - '/nc'\n            - '/netcat'\n    condition: selection and 1 of anomaly*\nfalsepositives:\n    - Legitimate software that uses these patterns\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        ParentCommandLine: 'bash -i'\n    anomaly1:\n        CommandLine|contains:\n            - '-c import '\n            - 'base64'\n            - 'pty.spawn'\n    anomaly2:\n        Image|endswith:\n            - 'whoami'\n            - 'iptables'\n            - '/ncat'\n            - '/nc'\n            - '/netcat'\n    condition: selection and 1 of anomaly*\nfalsepositives:\n    - Legitimate software that uses these patterns\nlevel: medium\n",
      "question": "suspicious interactive bash as a parent to rather uncommon child processes",
      "answer": "In order to detect suspicious interactive bash as a parent to rather uncommon child processes, you should: Monitor Linux systems for the creation of processes where the interactive bash (`bash -i`) is the parent process. Pay special attention to child processes that either contain command-line arguments such as '-c import', 'base64', or 'pty.spawn', or are executables like 'whoami', 'iptables', '/ncat', '/nc', or '/netcat'. These patterns may indicate malicious activity. Nevertheless, be aware that there could be legitimate software that uses these command patterns or executable names, thus it's vital to differentiate between benign and suspicious activities with a medium level of caution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting scheduled task creation using \"schtasks\" that contain potentially suspicious or uncommon commands.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect scheduled task creation using \"schtasks\" that contain potentially suspicious or uncommon commands, you should: Monitor Windows process creation logs for instances where the \"schtasks.exe\" utility is used, specifically focusing on commands that include the '/Create ' option. Pay particular attention to:\n\n- Commands that schedule tasks to occur at regular minute intervals or are set to run under the system account using flags like '/sc minute ' or '/ru system'.\n- Usage of command prompt execution commands such as 'cmd /c', 'cmd /k', 'cmd /r', 'cmd.exe /c ', 'cmd.exe /k ', and 'cmd.exe /r ', which might indicate an attempt to execute additional malicious commands.\n- Commands containing indicators of script obfuscation or evasion techniques including strings like ' -decode ', ' -enc ', ' -w hidden ', ' bypass ', and ' IEX'. Also, lookout for commands attempting to download or execute malicious content using '.DownloadData', '.DownloadFile', '.DownloadString', '/c start /min ', 'FromBase64String', 'mshta http', and 'mshta.exe http'.\n- Anomalies where command lines reference temporary file paths extensively, such as '\\AppData\\', '%AppData%', '%Temp%', '%tmp%', and 'C:\\Windows\\Temp\\', or commands that utilize '/xml C:\\Users\\', 'cscript', 'curl', or 'wscript'. These are uncommon usage patterns which might signify an attempt to hide malicious tasks or scripts in less scrutinized locations.\n\nBe aware that software installers operating from temporary folders while also creating scheduled tasks could generate false positives. This detection methodology is critical as it encompasses both direct indicators of suspicious task scheduling and indirect signs of potential malicious activity through uncommon command patterns and locations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_schtasks:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: '/Create '\n    selection_pattern_1:\n        CommandLine|contains:\n            - '/sc minute '\n            - '/ru system '\n    selection_pattern_2:\n        CommandLine|contains:\n            - 'cmd /c'\n            - 'cmd /k'\n            - 'cmd /r'\n            - 'cmd.exe /c '\n            - 'cmd.exe /k '\n            - 'cmd.exe /r '\n    selection_uncommon:\n        CommandLine|contains:\n            - ' -decode '\n            - ' -enc '\n            - ' -w hidden '\n            - ' bypass '\n            - ' IEX'\n            - '.DownloadData'\n            - '.DownloadFile'\n            - '.DownloadString'\n            - '/c start /min ' # https://twitter.com/RedDrip7/status/1506480588827467785\n            - 'FromBase64String'\n            - 'mshta http'\n            - 'mshta.exe http'\n    selection_anomaly_1:\n        CommandLine|contains|all:\n            - '\\AppData\\'\n            - '%AppData%'\n            - '%Temp%'\n            - '%tmp%'\n            - 'C:\\Windows\\Temp\\'\n    selection_anomaly_2:\n        CommandLine|contains|all:\n            - '/xml C:\\Users\\'\n            - 'cscript'\n            - 'curl'\n            - 'wscript'\n    condition: selection_schtasks and ( all of selection_pattern_* or selection_uncommon or all of selection_anomaly_* )\nfalsepositives:\n    - Software installers that run from temporary folders and also install scheduled tasks are expected to generate some false positives\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_schtasks:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: '/Create '\n    selection_pattern_1:\n        CommandLine|contains:\n            - '/sc minute '\n            - '/ru system '\n    selection_pattern_2:\n        CommandLine|contains:\n            - 'cmd /c'\n            - 'cmd /k'\n            - 'cmd /r'\n            - 'cmd.exe /c '\n            - 'cmd.exe /k '\n            - 'cmd.exe /r '\n    selection_uncommon:\n        CommandLine|contains:\n            - ' -decode '\n            - ' -enc '\n            - ' -w hidden '\n            - ' bypass '\n            - ' IEX'\n            - '.DownloadData'\n            - '.DownloadFile'\n            - '.DownloadString'\n            - '/c start /min ' # https://twitter.com/RedDrip7/status/1506480588827467785\n            - 'FromBase64String'\n            - 'mshta http'\n            - 'mshta.exe http'\n    selection_anomaly_1:\n        CommandLine|contains|all:\n            - '\\AppData\\'\n            - '%AppData%'\n            - '%Temp%'\n            - '%tmp%'\n            - 'C:\\Windows\\Temp\\'\n    selection_anomaly_2:\n        CommandLine|contains|all:\n            - '/xml C:\\Users\\'\n            - 'cscript'\n            - 'curl'\n            - 'wscript'\n    condition: selection_schtasks and ( all of selection_pattern_* or selection_uncommon or all of selection_anomaly_* )\nfalsepositives:\n    - Software installers that run from temporary folders and also install scheduled tasks are expected to generate some false positives\nlevel: high\n",
      "question": "scheduled task creation using \"schtasks\" that contain potentially suspicious or uncommon commands",
      "answer": "In order to detect scheduled task creation using \"schtasks\" that contain potentially suspicious or uncommon commands, you should: Monitor Windows process creation logs for instances where the \"schtasks.exe\" utility is used, specifically focusing on commands that include the '/Create ' option. Pay particular attention to:\n\n- Commands that schedule tasks to occur at regular minute intervals or are set to run under the system account using flags like '/sc minute ' or '/ru system'.\n- Usage of command prompt execution commands such as 'cmd /c', 'cmd /k', 'cmd /r', 'cmd.exe /c ', 'cmd.exe /k ', and 'cmd.exe /r ', which might indicate an attempt to execute additional malicious commands.\n- Commands containing indicators of script obfuscation or evasion techniques including strings like ' -decode ', ' -enc ', ' -w hidden ', ' bypass ', and ' IEX'. Also, lookout for commands attempting to download or execute malicious content using '.DownloadData', '.DownloadFile', '.DownloadString', '/c start /min ', 'FromBase64String', 'mshta http', and 'mshta.exe http'.\n- Anomalies where command lines reference temporary file paths extensively, such as '\\AppData\\', '%AppData%', '%Temp%', '%tmp%', and 'C:\\Windows\\Temp\\', or commands that utilize '/xml C:\\Users\\', 'cscript', 'curl', or 'wscript'. These are uncommon usage patterns which might signify an attempt to hide malicious tasks or scripts in less scrutinized locations.\n\nBe aware that software installers operating from temporary folders while also creating scheduled tasks could generate false positives. This detection methodology is critical as it encompasses both direct indicators of suspicious task scheduling and indirect signs of potential malicious activity through uncommon command patterns and locations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of Outlook security setting to allow unprompted execution of macros..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the modification of Outlook security setting to allow unprompted execution of macros, you should: Monitor registry setting modifications on Windows systems, specifically focusing on events where a value change occurs (`SetValue` event type). The key area of interest is within the registry path ending with `\\Outlook\\Security\\Level`. Significant attention should be given to modifications where the details of the change include '0x00000001', which indicates that the security setting has been altered to enable all Macros. Such a configuration adjustment is essential to identify because it lowers the security threshold, potentially allowing malicious macros to run without any prompts to the user, thus posing a high risk. False positives for this kind of monitoring are deemed unlikely, indicating the specificity of the detection criteria is quite high and closely associated with malicious intent or significant security policy alterations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Outlook\\Security\\Level'\n        Details|contains: '0x00000001' # Enable all Macros\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Outlook\\Security\\Level'\n        Details|contains: '0x00000001' # Enable all Macros\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "modification of Outlook security setting to allow unprompted execution of macros.",
      "answer": "In order to detect the modification of Outlook security setting to allow unprompted execution of macros, you should: Monitor registry setting modifications on Windows systems, specifically focusing on events where a value change occurs (`SetValue` event type). The key area of interest is within the registry path ending with `\\Outlook\\Security\\Level`. Significant attention should be given to modifications where the details of the change include '0x00000001', which indicates that the security setting has been altered to enable all Macros. Such a configuration adjustment is essential to identify because it lowers the security threshold, potentially allowing malicious macros to run without any prompts to the user, thus posing a high risk. False positives for this kind of monitoring are deemed unlikely, indicating the specificity of the detection criteria is quite high and closely associated with malicious intent or significant security policy alterations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should:\n\nMonitor Windows PowerShell script execution logs, specifically looking for script execution that involves the \"Set-Service\" command. This command might be used maliciously to manipulate Windows services in a way that hides them from typical management tools like \"sc.exe\" and \"Get-Service\". The detection focus is on scripts that contain both the string 'Set-Service ' and the unique identifier 'DCLCWPDTSD', along with either the '-SecurityDescriptorSddl ' or '-sd ' strings. These elements indicate an attempt to alter the security descriptors of services, potentially to conceal malicious services. It's important to have Script Block Logging enabled to capture the necessary data for this analysis. However, be aware that there might be rare legitimate uses of such scripts or potential false positives due to the complexity of PowerShell script text analysis. The severity of this detection is classified as high due to the potential impact of hiding malicious services on a Windows system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Service '\n            - 'DCLCWPDTSD'\n        ScriptBlockText|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    condition: selection\nfalsepositives:\n    - Rare intended use of hidden services\n    - Rare FP could occur due to the non linearity of the ScriptBlockText log\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Service '\n            - 'DCLCWPDTSD'\n        ScriptBlockText|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    condition: selection\nfalsepositives:\n    - Rare intended use of hidden services\n    - Rare FP could occur due to the non linearity of the ScriptBlockText log\nlevel: high\n",
      "question": "usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
      "answer": "In order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should:\n\nMonitor Windows PowerShell script execution logs, specifically looking for script execution that involves the \"Set-Service\" command. This command might be used maliciously to manipulate Windows services in a way that hides them from typical management tools like \"sc.exe\" and \"Get-Service\". The detection focus is on scripts that contain both the string 'Set-Service ' and the unique identifier 'DCLCWPDTSD', along with either the '-SecurityDescriptorSddl ' or '-sd ' strings. These elements indicate an attempt to alter the security descriptors of services, potentially to conceal malicious services. It's important to have Script Block Logging enabled to capture the necessary data for this analysis. However, be aware that there might be rare legitimate uses of such scripts or potential false positives due to the complexity of PowerShell script text analysis. The severity of this detection is classified as high due to the potential impact of hiding malicious services on a Windows system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting setting proxy configuration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect setting proxy configuration, you should: Monitor for the creation of processes on Linux systems that involve the setting of HTTP or HTTPS proxy configurations. Specifically, look for command lines that contain 'http_proxy=' or 'https_proxy='. It's noteworthy that such occurrences might sometimes stem from legitimate administration activities. The risk associated with this activity is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'http_proxy='\n            - 'https_proxy='\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'http_proxy='\n            - 'https_proxy='\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
      "question": "setting proxy configuration",
      "answer": "In order to detect setting proxy configuration, you should: Monitor for the creation of processes on Linux systems that involve the setting of HTTP or HTTPS proxy configurations. Specifically, look for command lines that contain 'http_proxy=' or 'https_proxy='. It's noteworthy that such occurrences might sometimes stem from legitimate administration activities. The risk associated with this activity is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence, you should: Monitor Windows process creation logs for specific command-line patterns that indicate such modifications. Look for usage of the 'sc' command in combination with 'config' and 'binpath=', or 'failure' and 'command=' which can be used to change service configurations or set up custom failure actions - a common technique for establishing persistence by ensuring a payload executes under certain conditions. Additionally, watch for the 'reg add' command modifying 'FailureCommand' or 'ImagePath' registry keys, as this also signifies attempts to alter service behavior or execution paths. Also, be vigilant for commands that involve file extensions typically associated with executable and script files, such as '.exe', '.dll', '.bat', '.cmd', '.ps', and others, as these often indicate the introduction or modification of files to carry malicious payloads. This detection focuses on medium-level threats and, while there might be legitimate uses, any matches should be investigated to confirm whether they are part of a potential attack involving persistence mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'config '\n            - 'binpath='\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'failure'\n            - 'command='\n    selection_reg_img:\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'FailureCommand'\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'ImagePath'\n    selection_reg_ext:\n        CommandLine|contains:\n            - '.sh'\n            - '.exe'\n            - '.dll'\n            - '.bin$'\n            - '.bat'\n            - '.cmd'\n            - '.js'\n            - '.msh$'\n            - '.reg$'\n            - '.scr'\n            - '.ps'\n            - '.vb'\n            - '.jar'\n            - '.pl'\n    condition: selection_sc or all of selection_reg_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'config '\n            - 'binpath='\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'failure'\n            - 'command='\n    selection_reg_img:\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'FailureCommand'\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'ImagePath'\n    selection_reg_ext:\n        CommandLine|contains:\n            - '.sh'\n            - '.exe'\n            - '.dll'\n            - '.bin$'\n            - '.bat'\n            - '.cmd'\n            - '.js'\n            - '.msh$'\n            - '.reg$'\n            - '.scr'\n            - '.ps'\n            - '.vb'\n            - '.jar'\n            - '.pl'\n    condition: selection_sc or all of selection_reg_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence.",
      "answer": "In order to detect the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence, you should: Monitor Windows process creation logs for specific command-line patterns that indicate such modifications. Look for usage of the 'sc' command in combination with 'config' and 'binpath=', or 'failure' and 'command=' which can be used to change service configurations or set up custom failure actions - a common technique for establishing persistence by ensuring a payload executes under certain conditions. Additionally, watch for the 'reg add' command modifying 'FailureCommand' or 'ImagePath' registry keys, as this also signifies attempts to alter service behavior or execution paths. Also, be vigilant for commands that involve file extensions typically associated with executable and script files, such as '.exe', '.dll', '.bat', '.cmd', '.ps', and others, as these often indicate the introduction or modification of files to carry malicious payloads. This detection focuses on medium-level threats and, while there might be legitimate uses, any matches should be investigated to confirm whether they are part of a potential attack involving persistence mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms, you should: \n\nMonitor Windows process creation logs for any activity related to SharPersist.exe. Specifically, look for the process name ending with '\\SharPersist.exe' or instances where the product name is identified as 'SharPersist'. Additionally, pay close attention to the command line arguments associated with these processes. Detection can be achieved by identifying specific patterns in the command line that indicate attempts to establish persistence on the system through various methods. \n\nThere are several command line patterns to be aware of:\n- Commands that include ' -t schtask -c ' or ' -t startupfolder -c ', which suggest attempts to create scheduled tasks or add items to the startup folder for persistence.\n- Commands containing both ' -t reg -c ' and ' -m add', indicating attempts to add registry keys for persistence.\n- Similarly, identifying command line patterns with both ' -t service -c ' and ' -m add' points towards attempts to add new services for persistence.\n- Lastly, be vigilant for commands that contain both ' -t schtask -c ' and ' -m add', signaling an attempt to add scheduled tasks.\n\nIt's important to consider any command fitting these patterns as a potential indicator of malicious activity associated with persistence attempts using SharPersist. However, be mindful of false positives, as they can occur, although unspecified. Given the severity of these actions, any detected activity should be considered high-risk and warrant immediate investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharPersist.exe'\n        - Product: 'SharPersist'\n    selection_cli_1:\n        CommandLine|contains:\n            - ' -t schtask -c '\n            - ' -t startupfolder -c '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - ' -t reg -c '\n            - ' -m add'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - ' -t service -c '\n            - ' -m add'\n    selection_cli_4:\n        CommandLine|contains|all:\n            - ' -t schtask -c '\n            - ' -m add'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharPersist.exe'\n        - Product: 'SharPersist'\n    selection_cli_1:\n        CommandLine|contains:\n            - ' -t schtask -c '\n            - ' -t startupfolder -c '\n    selection_cli_2:\n        CommandLine|contains|all:\n            - ' -t reg -c '\n            - ' -m add'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - ' -t service -c '\n            - ' -m add'\n    selection_cli_4:\n        CommandLine|contains|all:\n            - ' -t schtask -c '\n            - ' -m add'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms",
      "answer": "In order to detect the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms, you should: \n\nMonitor Windows process creation logs for any activity related to SharPersist.exe. Specifically, look for the process name ending with '\\SharPersist.exe' or instances where the product name is identified as 'SharPersist'. Additionally, pay close attention to the command line arguments associated with these processes. Detection can be achieved by identifying specific patterns in the command line that indicate attempts to establish persistence on the system through various methods. \n\nThere are several command line patterns to be aware of:\n- Commands that include ' -t schtask -c ' or ' -t startupfolder -c ', which suggest attempts to create scheduled tasks or add items to the startup folder for persistence.\n- Commands containing both ' -t reg -c ' and ' -m add', indicating attempts to add registry keys for persistence.\n- Similarly, identifying command line patterns with both ' -t service -c ' and ' -m add' points towards attempts to add new services for persistence.\n- Lastly, be vigilant for commands that contain both ' -t schtask -c ' and ' -m add', signaling an attempt to add scheduled tasks.\n\nIt's important to consider any command fitting these patterns as a potential indicator of malicious activity associated with persistence attempts using SharPersist. However, be mindful of false positives, as they can occur, although unspecified. Given the severity of these actions, any detected activity should be considered high-risk and warrant immediate investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting blocked load attempts of revoked drivers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect blocked load attempts of revoked drivers, you should monitor Windows log sources, specifically focusing on the Code Integrity operational service. Look for events with the EventID 3023, which indicates that a driver has been blocked from loading because it has been revoked by Microsoft. This detection process is crucial for identifying potential security risks associated with revoked drivers trying to execute on the system. Be aware that while this monitoring strategy is highly targeted, the possibility of unknown false positives exists, underlining the significance of validating alerts generated through this method. The severity level for this kind of detection is considered high due to the potential security implications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID: 3023 # The driver %2 is blocked from loading as the driver has been revoked by Microsoft.\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID: 3023 # The driver %2 is blocked from loading as the driver has been revoked by Microsoft.\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "blocked load attempts of revoked drivers",
      "answer": "In order to detect blocked load attempts of revoked drivers, you should monitor Windows log sources, specifically focusing on the Code Integrity operational service. Look for events with the EventID 3023, which indicates that a driver has been blocked from loading because it has been revoked by Microsoft. This detection process is crucial for identifying potential security risks associated with revoked drivers trying to execute on the system. Be aware that while this monitoring strategy is highly targeted, the possibility of unknown false positives exists, underlining the significance of validating alerts generated through this method. The severity level for this kind of detection is considered high due to the potential security implications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect change of the user account associated with the FAX service to avoid the escalation problem..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect change of the user account associated with the FAX service to avoid the escalation problem, you should: Monitor the Windows registry for modifications to the `ObjectName` value within the `HKLM\\System\\CurrentControlSet\\Services\\Fax` key. Specifically, detection should trigger if any changes are made to this registry value except those that involve setting the `Details` to contain the `NetworkService`. This approach is aimed at identifying unauthorized attempts to modify the user account that the FAX service runs under, a tactic that could be used by attackers to escalate their privileges on the system. The log source pertinent to this detection mechanism is Windows registry modification events. Despite the potential for unknown false positives, the severity of this detection is considered high, highlighting the critical nature of preventing unauthorized privilege escalation through the manipulation of service account configurations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        TargetObject: HKLM\\System\\CurrentControlSet\\Services\\Fax\\ObjectName\n    filter:\n        Details|contains: NetworkService\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        TargetObject: HKLM\\System\\CurrentControlSet\\Services\\Fax\\ObjectName\n    filter:\n        Details|contains: NetworkService\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect change of the user account associated with the FAX service to avoid the escalation problem.",
      "answer": "In order to detect change of the user account associated with the FAX service to avoid the escalation problem, you should: Monitor the Windows registry for modifications to the `ObjectName` value within the `HKLM\\System\\CurrentControlSet\\Services\\Fax` key. Specifically, detection should trigger if any changes are made to this registry value except those that involve setting the `Details` to contain the `NetworkService`. This approach is aimed at identifying unauthorized attempts to modify the user account that the FAX service runs under, a tactic that could be used by attackers to escalate their privileges on the system. The log source pertinent to this detection mechanism is Windows registry modification events. Despite the potential for unknown false positives, the severity of this detection is considered high, highlighting the critical nature of preventing unauthorized privilege escalation through the manipulation of service account configurations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential Netlogon Elevation of Privilege Vulnerability aka Zerologon (CVE-2020-1472).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential Netlogon Elevation of Privilege Vulnerability aka Zerologon (CVE-2020-1472), you should monitor Windows Security event logs for specific event patterns. Concentrate on Event ID 4742, which is related to a computer account being changed. This detection hinges on identifying instances where the 'SubjectUserName' is 'ANONYMOUS LOGON' and the 'TargetUserName' matches the pattern of a domain controller (DC) machine account name, which typically ends with a '$' symbol. It's crucial to exclude events where the 'PasswordLastSet' attribute is updated, as these could represent normal behaviors like automatic or legitimate DC computer account password changes. Observing these patterns with a high level of scrutiny is advised due to the severity of the Zerologon vulnerability, which involves elevation of privilege on the Netlogon service. Key tags associated with this activity include Credential Access and Lateral Movement, directly mapping to tactics where attackers might exploit this vulnerability to gain higher privileges or move laterally within a network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4742\n        SubjectUserName: 'ANONYMOUS LOGON'\n        TargetUserName: '%DC-MACHINE-NAME%' # DC machine account name that ends with '$'\n    filter_main:\n        PasswordLastSet: '-'\n    condition: selection and not filter_main\nfalsepositives:\n    - Automatic DC computer account password change\n    - Legitimate DC computer account password change\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4742\n        SubjectUserName: 'ANONYMOUS LOGON'\n        TargetUserName: '%DC-MACHINE-NAME%' # DC machine account name that ends with '$'\n    filter_main:\n        PasswordLastSet: '-'\n    condition: selection and not filter_main\nfalsepositives:\n    - Automatic DC computer account password change\n    - Legitimate DC computer account password change\nlevel: high\n",
      "question": "potential Netlogon Elevation of Privilege Vulnerability aka Zerologon (CVE-2020-1472)",
      "answer": "In order to detect potential Netlogon Elevation of Privilege Vulnerability aka Zerologon (CVE-2020-1472), you should monitor Windows Security event logs for specific event patterns. Concentrate on Event ID 4742, which is related to a computer account being changed. This detection hinges on identifying instances where the 'SubjectUserName' is 'ANONYMOUS LOGON' and the 'TargetUserName' matches the pattern of a domain controller (DC) machine account name, which typically ends with a '$' symbol. It's crucial to exclude events where the 'PasswordLastSet' attribute is updated, as these could represent normal behaviors like automatic or legitimate DC computer account password changes. Observing these patterns with a high level of scrutiny is advised due to the severity of the Zerologon vulnerability, which involves elevation of privilege on the Netlogon service. Key tags associated with this activity include Credential Access and Lateral Movement, directly mapping to tactics where attackers might exploit this vulnerability to gain higher privileges or move laterally within a network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This rule looks for Windows Installer service (msiexec.exe) spawning command line and/or powershell that spawns other processes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attack where the Windows Installer service (msiexec.exe) is used to spawn command line and/or PowerShell processes that then spawn other processes, you should: Monitor Windows systems for the creation of processes where the parent process is identified as either 'cmd.exe' or 'powershell.exe'. Additionally, it's crucial to scrutinize the parent of the parent process for instances where its path includes '\\Windows\\Installer\\' and contains the string 'msi', or when the image name ends with 'tmp'. These specifics are instrumental in identifying suspicious activity associated with the misuse of the Windows Installer to launch potentially malicious scripts or commands through common administrative tools like the command prompt and PowerShell. This detection strategy is built upon enriching Sysmon events with additional details about process relationships, particularly looking into the ParentImage and ParentOfParentImage fields of process creation logs. Any matches should be treated with high suspicion due to the potentially malicious nature of leveraging the Windows Installer process in this manner. It's also important to note that while this method aims to accurately identify malicious activity, instances where it may flag benign processes as suspicious could occur, hence a thorough investigation is recommended for any alerts generated.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\n    definition: Works only if  Enrich Sysmon events with additional information about process in ParentOfParentImage check enrichment section\ndetection:\n    parent_image:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n    parent_of_parent_image:\n        ParentOfParentImage|contains|all:\n            - '\\Windows\\Installer\\'\n            - 'msi'\n        ParentOfParentImage|endswith:\n            - 'tmp'\n    condition: parent_image and parent_of_parent_image\nfields:\n    - ParentImage\n    - ParentOfParentImage\nfalsepositives:\n    - Unknown\nlevel: high\nenrichment:\n    - EN_0001_cache_sysmon_event_id_1_info                # http://bit.ly/314zc6x\n    - EN_0002_enrich_sysmon_event_id_1_with_parent_info   # http://bit.ly/2KmSC0l\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\n    definition: Works only if  Enrich Sysmon events with additional information about process in ParentOfParentImage check enrichment section\ndetection:\n    parent_image:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n    parent_of_parent_image:\n        ParentOfParentImage|contains|all:\n            - '\\Windows\\Installer\\'\n            - 'msi'\n        ParentOfParentImage|endswith:\n            - 'tmp'\n    condition: parent_image and parent_of_parent_image\nfields:\n    - ParentImage\n    - ParentOfParentImage\nfalsepositives:\n    - Unknown\nlevel: high\nenrichment:\n    - EN_0001_cache_sysmon_event_id_1_info                # http://bit.ly/314zc6x\n    - EN_0002_enrich_sysmon_event_id_1_with_parent_info   # http://bit.ly/2KmSC0l\n",
      "question": "This rule looks for Windows Installer service (msiexec.exe) spawning command line and/or powershell that spawns other processes",
      "answer": "In order to detect an attack where the Windows Installer service (msiexec.exe) is used to spawn command line and/or PowerShell processes that then spawn other processes, you should: Monitor Windows systems for the creation of processes where the parent process is identified as either 'cmd.exe' or 'powershell.exe'. Additionally, it's crucial to scrutinize the parent of the parent process for instances where its path includes '\\Windows\\Installer\\' and contains the string 'msi', or when the image name ends with 'tmp'. These specifics are instrumental in identifying suspicious activity associated with the misuse of the Windows Installer to launch potentially malicious scripts or commands through common administrative tools like the command prompt and PowerShell. This detection strategy is built upon enriching Sysmon events with additional details about process relationships, particularly looking into the ParentImage and ParentOfParentImage fields of process creation logs. Any matches should be treated with high suspicion due to the potentially malicious nature of leveraging the Windows Installer process in this manner. It's also important to note that while this method aims to accurately identify malicious activity, instances where it may flag benign processes as suspicious could occur, hence a thorough investigation is recommended for any alerts generated."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect DLL Load from Spooler Service backup folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DLL load from Spooler Service backup folder, you should: monitor image load events on Windows systems, focusing on instances where an executable image ends with '\\spoolsv.exe,' indicative of the Spooler Service. Additionally, look for instances where the loaded image (DLL) is sourced from either the '\\Windows\\System32\\spool\\drivers\\x64\\3\\' or '\\Windows\\System32\\spool\\drivers\\x64\\4\\' directories, suggesting it's a load operation from a Spooler Service backup folder. These directories are significant as they typically should not be involved in standard operation DLL loading processes. It's important to ensure that the loaded images (DLLs) end with '.dll' to confirm they are indeed DLL files being loaded. Keep in mind that there might be legitimate instances of driver loading from these locations, which are considered to be false positives. This detection effort is classified at an informational level, meaning it is meant to inform of potential suspicious activity but may require further investigation to confirm malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\spoolsv.exe'\n        ImageLoaded|contains:\n            - '\\Windows\\System32\\spool\\drivers\\x64\\3\\'\n            - '\\Windows\\System32\\spool\\drivers\\x64\\4\\'\n        ImageLoaded|endswith: '.dll'\n    condition: selection\nfalsepositives:\n    - Loading of legitimate driver\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\spoolsv.exe'\n        ImageLoaded|contains:\n            - '\\Windows\\System32\\spool\\drivers\\x64\\3\\'\n            - '\\Windows\\System32\\spool\\drivers\\x64\\4\\'\n        ImageLoaded|endswith: '.dll'\n    condition: selection\nfalsepositives:\n    - Loading of legitimate driver\nlevel: informational\n",
      "question": "Detect DLL Load from Spooler Service backup folder",
      "answer": "In order to detect DLL load from Spooler Service backup folder, you should: monitor image load events on Windows systems, focusing on instances where an executable image ends with '\\spoolsv.exe,' indicative of the Spooler Service. Additionally, look for instances where the loaded image (DLL) is sourced from either the '\\Windows\\System32\\spool\\drivers\\x64\\3\\' or '\\Windows\\System32\\spool\\drivers\\x64\\4\\' directories, suggesting it's a load operation from a Spooler Service backup folder. These directories are significant as they typically should not be involved in standard operation DLL loading processes. It's important to ensure that the loaded images (DLLs) end with '.dll' to confirm they are indeed DLL files being loaded. Keep in mind that there might be legitimate instances of driver loading from these locations, which are considered to be false positives. This detection effort is classified at an informational level, meaning it is meant to inform of potential suspicious activity but may require further investigation to confirm malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SSTI attempts sent via GET requests in access logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SSTI attempts sent via GET requests in access logs, you should monitor the access logs of web servers for specific patterns within GET requests that indicate an attempt to exploit Server-Side Template Injection (SSTI) vulnerabilities. These patterns consist of various encodings and method calls that are commonly used in SSTI attacks, including but not limited to '{{', '%7B%7B' (URL encoded '{{'), '${', '=$%7B', '<%=', '=%3C%25=', '@(', 'freemarker.template.utility.Execute', '.getClass().forName('javax.script.ScriptEngineManager')', and 'T(org.apache.commons.io.IOUtils)'. It is important to also include a filtering condition to exclude any GET requests that result in a 404 status code, as these might not be relevant for detecting successful SSTI exploitation attempts. However, be mindful of potential false positives, such as legitimate user searches within the website's search box that might inadvertently match these patterns, or the noise generated from internal vulnerability scanning tools. To mitigate these false positives, it might be beneficial to incorporate additional filters, like checking user agent strings and considering more HTTP response codes. Monitoring for these specific patterns is crucial, as it helps identify attackers attempting to leverage SSTI vulnerabilities, which is a high-severity concern owing to the potential for executing arbitrary code on the server, hence the high level of importance attached to detecting these attempts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    select_method:\n        cs-method: 'GET'\n    keywords:\n        - '={{'\n        - '=%7B%7B'\n        - '=${'\n        - '=$%7B'\n        - '=<%='\n        - '=%3C%25='\n        - '=@('\n        - 'freemarker.template.utility.Execute'\n        - .getClass().forName('javax.script.ScriptEngineManager')\n        - 'T(org.apache.commons.io.IOUtils)'\n    filter:\n        sc-status: 404\n    condition: select_method and keywords and not filter\nfalsepositives:\n    - User searches in search boxes of the respective website\n    - Internal vulnerability scanners can cause some serious FPs when used, if you experience a lot of FPs due to this think of adding more filters such as \"User Agent\" strings and more response codes\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    select_method:\n        cs-method: 'GET'\n    keywords:\n        - '={{'\n        - '=%7B%7B'\n        - '=${'\n        - '=$%7B'\n        - '=<%='\n        - '=%3C%25='\n        - '=@('\n        - 'freemarker.template.utility.Execute'\n        - .getClass().forName('javax.script.ScriptEngineManager')\n        - 'T(org.apache.commons.io.IOUtils)'\n    filter:\n        sc-status: 404\n    condition: select_method and keywords and not filter\nfalsepositives:\n    - User searches in search boxes of the respective website\n    - Internal vulnerability scanners can cause some serious FPs when used, if you experience a lot of FPs due to this think of adding more filters such as \"User Agent\" strings and more response codes\nlevel: high\n",
      "question": "SSTI attempts sent via GET requests in access logs",
      "answer": "In order to detect SSTI attempts sent via GET requests in access logs, you should monitor the access logs of web servers for specific patterns within GET requests that indicate an attempt to exploit Server-Side Template Injection (SSTI) vulnerabilities. These patterns consist of various encodings and method calls that are commonly used in SSTI attacks, including but not limited to '{{', '%7B%7B' (URL encoded '{{'), '${', '=$%7B', '<%=', '=%3C%25=', '@(', 'freemarker.template.utility.Execute', '.getClass().forName('javax.script.ScriptEngineManager')', and 'T(org.apache.commons.io.IOUtils)'. It is important to also include a filtering condition to exclude any GET requests that result in a 404 status code, as these might not be relevant for detecting successful SSTI exploitation attempts. However, be mindful of potential false positives, such as legitimate user searches within the website's search box that might inadvertently match these patterns, or the noise generated from internal vulnerability scanning tools. To mitigate these false positives, it might be beneficial to incorporate additional filters, like checking user agent strings and considering more HTTP response codes. Monitoring for these specific patterns is crucial, as it helps identify attackers attempting to leverage SSTI vulnerabilities, which is a high-severity concern owing to the potential for executing arbitrary code on the server, hence the high level of importance attached to detecting these attempts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Point-to-site VPN is Modified or Deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a Point-to-site VPN is Modified or Deleted, you should: Monitor Azure Activity Logs for specific operations that indicate modifications or deletions to Point-to-Site VPN gateways. These operations include writing to, deleting, resetting, generating a VPN profile for, disconnecting VPN connections from, and writing diagnostic settings to P2S VPN gateways. These activities are captured under operation names like MICROSOFT.NETWORK/P2SVPNGATEWAYS/WRITE, MICROSOFT.NETWORK/P2SVPNGATEWAYS/DELETE, and several others specifically related to VPN gateway modifications.\n\nIt's essential to consider that not all modifications to the VPN may signify malicious intent. For example, system administrators routinely perform modifications or deletions as part of their regular duties. Therefore, it's important to verify the legitimacy of such activities by examining the user identity, user agent, and hostname involved in the changes. Should an unfamiliar user perform these actions, an investigation should be initiated. If known legitimate behaviors are identified as causing alerts, these can be configured as exceptions to reduce false positives. The significance of this monitoring is categorized at a medium level, reflecting its importance in maintaining the security and integrity of VPN gateways within an organization's Azure environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/WRITE\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/DELETE\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/RESET/ACTION\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/GENERATEVPNPROFILE/ACTION\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/DISCONNECTP2SVPNCONNECTIONS/ACTION\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/PROVIDERS/MICROSOFT.INSIGHTS/DIAGNOSTICSETTINGS/WRITE\n    condition: selection\nfalsepositives:\n    - Point-to-site VPN being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Point-to-site VPN modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/WRITE\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/DELETE\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/RESET/ACTION\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/GENERATEVPNPROFILE/ACTION\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/DISCONNECTP2SVPNCONNECTIONS/ACTION\n            - MICROSOFT.NETWORK/P2SVPNGATEWAYS/PROVIDERS/MICROSOFT.INSIGHTS/DIAGNOSTICSETTINGS/WRITE\n    condition: selection\nfalsepositives:\n    - Point-to-site VPN being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Point-to-site VPN modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Point-to-site VPN is Modified or Deleted.",
      "answer": "In order to identify when a Point-to-site VPN is Modified or Deleted, you should: Monitor Azure Activity Logs for specific operations that indicate modifications or deletions to Point-to-Site VPN gateways. These operations include writing to, deleting, resetting, generating a VPN profile for, disconnecting VPN connections from, and writing diagnostic settings to P2S VPN gateways. These activities are captured under operation names like MICROSOFT.NETWORK/P2SVPNGATEWAYS/WRITE, MICROSOFT.NETWORK/P2SVPNGATEWAYS/DELETE, and several others specifically related to VPN gateway modifications.\n\nIt's essential to consider that not all modifications to the VPN may signify malicious intent. For example, system administrators routinely perform modifications or deletions as part of their regular duties. Therefore, it's important to verify the legitimacy of such activities by examining the user identity, user agent, and hostname involved in the changes. Should an unfamiliar user perform these actions, an investigation should be initiated. If known legitimate behaviors are identified as causing alerts, these can be configured as exceptions to reduce false positives. The significance of this monitoring is categorized at a medium level, reflecting its importance in maintaining the security and integrity of VPN gateways within an organization's Azure environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor. Which loads a malicious version of the expected \"version.dll\" dll.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor, which loads a malicious version of the expected \"version.dll\" dll, you should: Focus on monitoring image load events within Windows environments. Specifically, keep an eye for instances where the \"C:\\Windows\\ADFS\\version.dll\" is loaded. This activity is indicative of an attempt to exploit the system by replacing a legitimate DLL with a malicious version, a common tactic in sophisticated cyber-attacks like those executed by NOBELIUM. Given the critical nature of this detection and its association with high-profile threats, false positives are considered unlikely. This indicates that any hit on this rule should be taken seriously and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded: 'C:\\Windows\\ADFS\\version.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded: 'C:\\Windows\\ADFS\\version.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor. Which loads a malicious version of the expected \"version.dll\" dll",
      "answer": "In order to detect DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor, which loads a malicious version of the expected \"version.dll\" dll, you should: Focus on monitoring image load events within Windows environments. Specifically, keep an eye for instances where the \"C:\\Windows\\ADFS\\version.dll\" is loaded. This activity is indicative of an attempt to exploit the system by replacing a legitimate DLL with a malicious version, a common tactic in sophisticated cyber-attacks like those executed by NOBELIUM. Given the critical nature of this detection and its association with high-profile threats, false positives are considered unlikely. This indicates that any hit on this rule should be taken seriously and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect that the path to the DLL written in the registry is different from the default one when WAB.exe tries to load the DLL from Registry, you should:\n\nMonitor the Windows system for registry settings modifications, specifically focusing on events where there's a change in the values set under the registry path associated with the Windows Address Book (WAB) application. Look for events categorized under registry modifications (registry_set) with an event type of SetValue that indicates a new value assignment within the registry. This monitoring should narrowly focus on changes to the '\\Software\\Microsoft\\WAB\\DLLPath' within the registry. It's crucial to filter out and ignore modifications where the DLL path points to the default '%CommonProgramFiles%\\System\\wab32.dll' to reduce false positives, thereby concentrating on non-standard or potentially malicious changes. This approach helps in identifying scenarios where an attacker might attempt to divert the standard DLL loading process to a malicious DLL, a common technique in persistence mechanisms and method of attack execution by loading unauthorized or malicious code. Implementing such monitoring ensures a high level of scrutiny in detecting anomalies in modifications of the registry paths that are critical to the loading of legitimate software, such as the WAB application. This monitoring strategy is aimed at addressing tactics and techniques that involve Persistence, Privilege Escalation, and Defense Evasion, by noting unusual changes in DLL path settings in the Windows registry.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Software\\Microsoft\\WAB\\DLLPath'\n    filter:\n        Details: '%CommonProgramFiles%\\System\\wab32.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Software\\Microsoft\\WAB\\DLLPath'\n    filter:\n        Details: '%CommonProgramFiles%\\System\\wab32.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry.",
      "answer": "In order to detect that the path to the DLL written in the registry is different from the default one when WAB.exe tries to load the DLL from Registry, you should:\n\nMonitor the Windows system for registry settings modifications, specifically focusing on events where there's a change in the values set under the registry path associated with the Windows Address Book (WAB) application. Look for events categorized under registry modifications (registry_set) with an event type of SetValue that indicates a new value assignment within the registry. This monitoring should narrowly focus on changes to the '\\Software\\Microsoft\\WAB\\DLLPath' within the registry. It's crucial to filter out and ignore modifications where the DLL path points to the default '%CommonProgramFiles%\\System\\wab32.dll' to reduce false positives, thereby concentrating on non-standard or potentially malicious changes. This approach helps in identifying scenarios where an attacker might attempt to divert the standard DLL loading process to a malicious DLL, a common technique in persistence mechanisms and method of attack execution by loading unauthorized or malicious code. Implementing such monitoring ensures a high level of scrutiny in detecting anomalies in modifications of the registry paths that are critical to the loading of legitimate software, such as the WAB application. This monitoring strategy is aimed at addressing tactics and techniques that involve Persistence, Privilege Escalation, and Defense Evasion, by noting unusual changes in DLL path settings in the Windows registry."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities, you should monitor for instances where the Windows Task Scheduler command-line tool (schtasks.exe) is used to modify scheduled tasks with the specific intent to disable them. Particularly, look for command-line invocations that include both the '/Change' and '/TN' arguments together with the '/disable' argument. This indicates an attempt to change a task's properties in order to disable it. Additional scrutiny should be applied when the command lines also contain references to critical system tasks related to Windows System Restore, Windows Defender, BitLocker, Windows Backup, Windows Update, Update Orchestrator, and Exploit Guard. These tasks are vital for system recovery, security, and maintenance. Any command that seeks to disable these tasks could be indicative of a malicious attempt to undermine the system's defenses or its ability to recover from adverse changes, thereby facilitating data destructive activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    schtasks_exe:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/Change'\n            - '/TN'\n            - '/disable'\n        CommandLine|contains:\n            # Add more important tasks\n            - '\\Windows\\SystemRestore\\SR'\n            - '\\Windows\\Windows Defender\\'\n            - '\\Windows\\BitLocker'\n            - '\\Windows\\WindowsBackup\\'\n            - '\\Windows\\WindowsUpdate\\'\n            - '\\Windows\\UpdateOrchestrator\\'\n            - '\\Windows\\ExploitGuard'\n    condition: all of schtasks_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    schtasks_exe:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/Change'\n            - '/TN'\n            - '/disable'\n        CommandLine|contains:\n            # Add more important tasks\n            - '\\Windows\\SystemRestore\\SR'\n            - '\\Windows\\Windows Defender\\'\n            - '\\Windows\\BitLocker'\n            - '\\Windows\\WindowsBackup\\'\n            - '\\Windows\\WindowsUpdate\\'\n            - '\\Windows\\UpdateOrchestrator\\'\n            - '\\Windows\\ExploitGuard'\n    condition: all of schtasks_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities",
      "answer": "In order to detect when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities, you should monitor for instances where the Windows Task Scheduler command-line tool (schtasks.exe) is used to modify scheduled tasks with the specific intent to disable them. Particularly, look for command-line invocations that include both the '/Change' and '/TN' arguments together with the '/disable' argument. This indicates an attempt to change a task's properties in order to disable it. Additional scrutiny should be applied when the command lines also contain references to critical system tasks related to Windows System Restore, Windows Defender, BitLocker, Windows Backup, Windows Update, Update Orchestrator, and Exploit Guard. These tasks are vital for system recovery, security, and maintenance. Any command that seeks to disable these tasks could be indicative of a malicious attempt to undermine the system's defenses or its ability to recover from adverse changes, thereby facilitating data destructive activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting network connections and DNS queries initiated by Regsvr32.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect network connections and DNS queries initiated by Regsvr32.exe, you should: focus on analyzing DNS query logs from Windows operating systems. Specifically, look for events where the image path ends with '\\regsvr32.exe', indicating that Regsvr32.exe is initiating these connections or queries. Important fields to monitor in this context include the computer name, the user account involved, the exact image path, and the destination IP and port numbers related to the activities. Although there may be rare instances where legitimate uses of Regsvr32.exe could trigger this detection, such cases are generally considered unknown and thus, the alert level for this behavior is classified as high. This detection is closely associated with tactics and techniques like Execution, Command and Control, and Defense Evasion, reflecting the malicious use of Regsvr32.exe to bypass security mechanisms, execute code, and establish connections to control servers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: dns_query\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - Image\n    - DestinationIp\n    - DestinationPort\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns_query\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - Image\n    - DestinationIp\n    - DestinationPort\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "network connections and DNS queries initiated by Regsvr32.exe",
      "answer": "In order to detect network connections and DNS queries initiated by Regsvr32.exe, you should: focus on analyzing DNS query logs from Windows operating systems. Specifically, look for events where the image path ends with '\\regsvr32.exe', indicating that Regsvr32.exe is initiating these connections or queries. Important fields to monitor in this context include the computer name, the user account involved, the exact image path, and the destination IP and port numbers related to the activities. Although there may be rare instances where legitimate uses of Regsvr32.exe could trigger this detection, such cases are generally considered unknown and thus, the alert level for this behavior is classified as high. This detection is closely associated with tactics and techniques like Execution, Command and Control, and Defense Evasion, reflecting the malicious use of Regsvr32.exe to bypass security mechanisms, execute code, and establish connections to control servers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting using SettingSyncHost.exe to run hijacked binary.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect using SettingSyncHost.exe to run hijacked binary, you should: focus on monitoring process creation events within the Windows operating system. Specifically, analyze processes that are not initiated from the common system directories, C:\\Windows\\System32\\ or C:\\Windows\\SysWOW64\\. Instead, look for instances where the process parent command line includes 'cmd.exe /c' alongside 'RoamDiag.cmd' and the '-outputpath' argument. This unusual combination, especially not originating from standard system utilities, indicates that the SettingSyncHost.exe could be misused to execute unauthorized or hijacked binaries. Pay attention to fields such as TargetFilename and Image during the analysis. Despite the potential for unknown false positives, the severity of this behavior is considered high, implying its critical impact on security if detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    system_utility:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n    parent_is_settingsynchost:\n        ParentCommandLine|contains|all:\n            - 'cmd.exe /c'\n            - 'RoamDiag.cmd'\n            - '-outputpath'\n    condition: not system_utility and parent_is_settingsynchost\nfields:\n    - TargetFilename\n    - Image\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    system_utility:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n    parent_is_settingsynchost:\n        ParentCommandLine|contains|all:\n            - 'cmd.exe /c'\n            - 'RoamDiag.cmd'\n            - '-outputpath'\n    condition: not system_utility and parent_is_settingsynchost\nfields:\n    - TargetFilename\n    - Image\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "using SettingSyncHost.exe to run hijacked binary",
      "answer": "In order to detect using SettingSyncHost.exe to run hijacked binary, you should: focus on monitoring process creation events within the Windows operating system. Specifically, analyze processes that are not initiated from the common system directories, C:\\Windows\\System32\\ or C:\\Windows\\SysWOW64\\. Instead, look for instances where the process parent command line includes 'cmd.exe /c' alongside 'RoamDiag.cmd' and the '-outputpath' argument. This unusual combination, especially not originating from standard system utilities, indicates that the SettingSyncHost.exe could be misused to execute unauthorized or hijacked binaries. Pay attention to fields such as TargetFilename and Image during the analysis. Despite the potential for unknown false positives, the severity of this behavior is considered high, implying its critical impact on security if detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks, you should monitor for the creation of processes on Windows systems, paying close attention to any executions of a program named `GUP.exe`. This is particularly important if `GUP.exe` is not running from its conventional location within the Notepad++ program directories, specifically the updater folder located in either the standard `Program Files` or `Program Files (x86)` paths, or within a user's `AppData\\Local` or `AppData\\Roaming` directories under Notepad++'s updater folder.\n\nYou should disregard any instances where `GUP.exe` executes from these known legitimate paths as these can be considered normal behavior and not indicative of a suspicious activity. However, executing from locations outside these paths could potentially signal a DLL side-loading attack, whereby an adversary places a malicious executable in a directory where the system or another program may inadvertently run it, thinking it's the legitimate Notepad++ updater. This method is often exploited to bypass security measures and execute malicious code under the guise of legitimate processes.\n\nTo effectively mitigate false positive alerts, it's important to consider that any `GUP.exe` executions occurring outside of the described Notepad++ updater locations should be investigated, while those within the specified legitimate paths should not trigger an alert, recognizing that `GUP.exe` running from its correct location is expected and not of concern. This vigilant monitoring approach ensures a high level of detection precision for activities associated with DLL side-loading tactics employing the Notepad++ updater as a disguise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\GUP.exe'\n    filter_programfiles:\n        Image|endswith:\n            - '\\Program Files\\Notepad++\\updater\\GUP.exe'\n            - '\\Program Files (x86)\\Notepad++\\updater\\GUP.exe'\n    filter_user:\n        Image|contains: '\\Users\\'\n        Image|endswith:\n            - '\\AppData\\Local\\Notepad++\\updater\\GUP.exe'\n            - '\\AppData\\Roaming\\Notepad++\\updater\\GUP.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Execution of tools named GUP.exe and located in folders different than Notepad++\\updater\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\GUP.exe'\n    filter_programfiles:\n        Image|endswith:\n            - '\\Program Files\\Notepad++\\updater\\GUP.exe'\n            - '\\Program Files (x86)\\Notepad++\\updater\\GUP.exe'\n    filter_user:\n        Image|contains: '\\Users\\'\n        Image|endswith:\n            - '\\AppData\\Local\\Notepad++\\updater\\GUP.exe'\n            - '\\AppData\\Roaming\\Notepad++\\updater\\GUP.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Execution of tools named GUP.exe and located in folders different than Notepad++\\updater\nlevel: high\n",
      "question": "execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks",
      "answer": "In order to detect execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks, you should monitor for the creation of processes on Windows systems, paying close attention to any executions of a program named `GUP.exe`. This is particularly important if `GUP.exe` is not running from its conventional location within the Notepad++ program directories, specifically the updater folder located in either the standard `Program Files` or `Program Files (x86)` paths, or within a user's `AppData\\Local` or `AppData\\Roaming` directories under Notepad++'s updater folder.\n\nYou should disregard any instances where `GUP.exe` executes from these known legitimate paths as these can be considered normal behavior and not indicative of a suspicious activity. However, executing from locations outside these paths could potentially signal a DLL side-loading attack, whereby an adversary places a malicious executable in a directory where the system or another program may inadvertently run it, thinking it's the legitimate Notepad++ updater. This method is often exploited to bypass security measures and execute malicious code under the guise of legitimate processes.\n\nTo effectively mitigate false positive alerts, it's important to consider that any `GUP.exe` executions occurring outside of the described Notepad++ updater locations should be investigated, while those within the specified legitimate paths should not trigger an alert, recognizing that `GUP.exe` running from its correct location is expected and not of concern. This vigilant monitoring approach ensures a high level of detection precision for activities associated with DLL side-loading tactics employing the Notepad++ updater as a disguise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process spawning from an Outlook process..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious process spawning from an Outlook process, you should: observe the creation of processes on Windows systems, particularly focusing on instances where the parent process is Outlook (OUTLOOK.EXE). The types of processes you should be alert for include but are not limited to AppVLP.exe, bash.exe, cmd.exe, cscript.exe, forfiles.exe, hh.exe, mftrace.exe, msbuild.exe, msdt.exe (associated with CVE-2022-30190), mshta.exe, msiexec.exe, powershell.exe, pwsh.exe, regsvr32.exe, schtasks.exe, scrcons.exe, scriptrunner.exe, sh.exe, svchost.exe, wmic.exe, and wscript.exe. Despite rundll32.exe being a common process spawned for malicious purposes, it has been deliberately excluded from this detection due to producing numerous false positives in certain contexts. This monitoring is crucial for identifying potential unauthorized or malicious activities initiated via Outlook, such as the execution of scripts or unauthorized commands that could be indicative of an attack or exploitation attempt. Pay special attention to the command line used to initiate these processes, as it may provide additional context or evidence of malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            #- '\\rundll32.exe'\n            #filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #  ParentImage|endswith: '\\OUTLOOK.EXE'\n            #  Image|endswith: '\\rundll32.exe'\n            #  CommandLine|contains: '\\PhotoViewer.dll'\n            #filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #  ParentImage|endswith: '\\OUTLOOK.EXE'\n            #  Image|endswith: '\\rundll32.exe'\n            #  CommandLine|contains|all:\n            #    - 'shell32.dll,Control_RunDLL'\n            #    - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            #- '\\rundll32.exe'\n            #filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #  ParentImage|endswith: '\\OUTLOOK.EXE'\n            #  Image|endswith: '\\rundll32.exe'\n            #  CommandLine|contains: '\\PhotoViewer.dll'\n            #filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #  ParentImage|endswith: '\\OUTLOOK.EXE'\n            #  Image|endswith: '\\rundll32.exe'\n            #  CommandLine|contains|all:\n            #    - 'shell32.dll,Control_RunDLL'\n            #    - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious process spawning from an Outlook process.",
      "answer": "In order to detect a suspicious process spawning from an Outlook process, you should: observe the creation of processes on Windows systems, particularly focusing on instances where the parent process is Outlook (OUTLOOK.EXE). The types of processes you should be alert for include but are not limited to AppVLP.exe, bash.exe, cmd.exe, cscript.exe, forfiles.exe, hh.exe, mftrace.exe, msbuild.exe, msdt.exe (associated with CVE-2022-30190), mshta.exe, msiexec.exe, powershell.exe, pwsh.exe, regsvr32.exe, schtasks.exe, scrcons.exe, scriptrunner.exe, sh.exe, svchost.exe, wmic.exe, and wscript.exe. Despite rundll32.exe being a common process spawned for malicious purposes, it has been deliberately excluded from this detection due to producing numerous false positives in certain contexts. This monitoring is crucial for identifying potential unauthorized or malicious activities initiated via Outlook, such as the execution of scripts or unauthorized commands that could be indicative of an attack or exploitation attempt. Pay special attention to the command line used to initiate these processes, as it may provide additional context or evidence of malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file writes of WMI script event consumer.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file writes of WMI script event consumer, you should: Monitor Windows file event logs for any activities involving the specific image path 'C:\\WINDOWS\\system32\\wbem\\scrcons.exe'. This image path is associated with the Windows Management Instrumentation (WMI) script event consumer process, which can be indicative of malicious activity when files are written or modified in this directory. It's important to note that there might be false positives, such as legitimate software operations like the Dell Power Manager performing similar activities, specifically if the activity originates from 'C:\\Program Files\\Dell\\PowerManager\\DpmPowerPlanSetup.exe'. This monitoring task is considered to have a high level of importance due to the potential security implications of unauthorized file writes in the WMI script event consumer directory.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image: 'C:\\WINDOWS\\system32\\wbem\\scrcons.exe'\n    condition: selection\nfalsepositives:\n    - Dell Power Manager (C:\\Program Files\\Dell\\PowerManager\\DpmPowerPlanSetup.exe)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image: 'C:\\WINDOWS\\system32\\wbem\\scrcons.exe'\n    condition: selection\nfalsepositives:\n    - Dell Power Manager (C:\\Program Files\\Dell\\PowerManager\\DpmPowerPlanSetup.exe)\nlevel: high\n",
      "question": "file writes of WMI script event consumer",
      "answer": "In order to detect file writes of WMI script event consumer, you should: Monitor Windows file event logs for any activities involving the specific image path 'C:\\WINDOWS\\system32\\wbem\\scrcons.exe'. This image path is associated with the Windows Management Instrumentation (WMI) script event consumer process, which can be indicative of malicious activity when files are written or modified in this directory. It's important to note that there might be false positives, such as legitimate software operations like the Dell Power Manager performing similar activities, specifically if the activity originates from 'C:\\Program Files\\Dell\\PowerManager\\DpmPowerPlanSetup.exe'. This monitoring task is considered to have a high level of importance due to the potential security implications of unauthorized file writes in the WMI script event consumer directory."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of the WMI command-line (WMIC) utility to identify and display various system information,\nincluding OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS,\nand GPU driver products/versions.\nSome of these commands were used by Aurora Stealer in late 2022/early 2023.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the WMI command-line (WMIC) utility to identify and display various system information, including OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS, and GPU driver products/versions, you should monitor for specific activities and criteria in the system's process creation logs, focusing on Windows operating systems. Detection involves looking for the execution of the 'wmic.exe' file, identified either by its description, original filename, or the executable's path ending with '\\WMIC.exe'. Additionally, pay attention to the command line parameters that may be passed to the WMIC utility, which include queries for system information such as product and version of the baseboard, SMBIOS BIOS version, CPU name, disk drive caption, logical disk name, size, free space, maximum memory capacity, operating system details (caption, architecture, version), video controller (GPU) driver version, name, and video mode description. These indicators may suggest an attacker's attempt to gather detailed system information, leveraging techniques similar to those used by Aurora Stealer malware incidents in late 2022 and early 2023. It's important to be aware that while these behaviors can indicate malicious intent, there may also be legitimate uses of these command-line queries, thus the potential for false positives exists and should be considered when evaluating detections based on these indicators.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wmic:\n        - Description: 'WMI Commandline Utility'\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_commands:\n        CommandLine|contains:\n            - 'baseboard get product'\n            - 'baseboard get version'\n            - 'bios get SMBIOSBIOSVersion'\n            - 'cpu get name'\n            - 'DISKDRIVE get Caption'\n            - 'LOGICALDISK get Name,Size,FreeSpace'\n            - 'MEMPHYSICAL get MaxCapacity'\n            - 'OS get Caption,OSArchitecture,Version'\n            - 'path win32_VideoController get DriverVersion'\n            - 'path win32_VideoController get name'\n            - 'path win32_VideoController get VideoModeDescription'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wmic:\n        - Description: 'WMI Commandline Utility'\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_commands:\n        CommandLine|contains:\n            - 'baseboard get product'\n            - 'baseboard get version'\n            - 'bios get SMBIOSBIOSVersion'\n            - 'cpu get name'\n            - 'DISKDRIVE get Caption'\n            - 'LOGICALDISK get Name,Size,FreeSpace'\n            - 'MEMPHYSICAL get MaxCapacity'\n            - 'OS get Caption,OSArchitecture,Version'\n            - 'path win32_VideoController get DriverVersion'\n            - 'path win32_VideoController get name'\n            - 'path win32_VideoController get VideoModeDescription'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "use of the WMI command-line (WMIC) utility to identify and display various system information,\nincluding OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS,\nand GPU driver products/versions.\nSome of these commands were used by Aurora Stealer in late 2022/early 2023.\n",
      "answer": "In order to detect the use of the WMI command-line (WMIC) utility to identify and display various system information, including OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS, and GPU driver products/versions, you should monitor for specific activities and criteria in the system's process creation logs, focusing on Windows operating systems. Detection involves looking for the execution of the 'wmic.exe' file, identified either by its description, original filename, or the executable's path ending with '\\WMIC.exe'. Additionally, pay attention to the command line parameters that may be passed to the WMIC utility, which include queries for system information such as product and version of the baseboard, SMBIOS BIOS version, CPU name, disk drive caption, logical disk name, size, free space, maximum memory capacity, operating system details (caption, architecture, version), video controller (GPU) driver version, name, and video mode description. These indicators may suggest an attacker's attempt to gather detailed system information, leveraging techniques similar to those used by Aurora Stealer malware incidents in late 2022 and early 2023. It's important to be aware that while these behaviors can indicate malicious intent, there may also be legitimate uses of these command-line queries, thus the potential for false positives exists and should be considered when evaluating detections based on these indicators."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT. This DLL location and name has been seen used by ColdSteel as the service DLL for its persistence mechanism\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT, you should: Monitor Windows image load events for instances where the 'svchost.exe' process is loading a DLL named 'newdev.dll' from a location within the user's AppData\\Roaming directory. Such behavior is indicative of a potential ColdSteel RAT infection, as this specific DLL location and name have been associated with the malware's persistence mechanism. Events matching these criteria should raise a high alert, as false positives are considered unlikely. This monitoring focuses on identifying techniques employed by the RAT for maintaining persistence and executing malicious code, related to the tactics of persistence and execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n        ImageLoaded|endswith: '\\AppData\\Roaming\\newdev.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n        ImageLoaded|endswith: '\\AppData\\Roaming\\newdev.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT. This DLL location and name has been seen used by ColdSteel as the service DLL for its persistence mechanism\n",
      "answer": "In order to detect a suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT, you should: Monitor Windows image load events for instances where the 'svchost.exe' process is loading a DLL named 'newdev.dll' from a location within the user's AppData\\Roaming directory. Such behavior is indicative of a potential ColdSteel RAT infection, as this specific DLL location and name have been associated with the malware's persistence mechanism. Events matching these criteria should raise a high alert, as false positives are considered unlikely. This monitoring focuses on identifying techniques employed by the RAT for maintaining persistence and executing malicious code, related to the tactics of persistence and execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an Google Workspace user is granted admin privileges..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Google Workspace user is granted admin privileges, you should monitor Google Workspace admin logs for events that indicate the granting of delegated admin privileges or admin privileges directly. This involves checking the logs from the Google Workspace Admin service, specifically focusing on events named GRANT_DELEGATED_ADMIN_PRIVILEGES and GRANT_ADMIN_PRIVILEGE. These events are crucial as they signify that a user's privileges have been elevated to an administrative level, potentially indicating an unauthorized attempt to gain elevated access within the organization's Google Workspace environment. It is important to note that there can be legitimate changes in admin role privileges by system administrators; hence these should be considered while evaluating potential security incidents. This detection strategy is rated with a medium level of urgency due to the significant impact that unauthorized admin access can have, yet it acknowledges the possibility of legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection:\n        eventService: admin.googleapis.com\n        eventName:\n            - GRANT_DELEGATED_ADMIN_PRIVILEGES\n            - GRANT_ADMIN_PRIVILEGE\n    condition: selection\nfalsepositives:\n    - Google Workspace admin role privileges, may be modified by system administrators.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection:\n        eventService: admin.googleapis.com\n        eventName:\n            - GRANT_DELEGATED_ADMIN_PRIVILEGES\n            - GRANT_ADMIN_PRIVILEGE\n    condition: selection\nfalsepositives:\n    - Google Workspace admin role privileges, may be modified by system administrators.\nlevel: medium\n",
      "question": "when an Google Workspace user is granted admin privileges.",
      "answer": "In order to detect when a Google Workspace user is granted admin privileges, you should monitor Google Workspace admin logs for events that indicate the granting of delegated admin privileges or admin privileges directly. This involves checking the logs from the Google Workspace Admin service, specifically focusing on events named GRANT_DELEGATED_ADMIN_PRIVILEGES and GRANT_ADMIN_PRIVILEGE. These events are crucial as they signify that a user's privileges have been elevated to an administrative level, potentially indicating an unauthorized attempt to gain elevated access within the organization's Google Workspace environment. It is important to note that there can be legitimate changes in admin role privileges by system administrators; hence these should be considered while evaluating potential security incidents. This detection strategy is rated with a medium level of urgency due to the significant impact that unauthorized admin access can have, yet it acknowledges the possibility of legitimate administrative actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the \"FromBase64String\" function in the command line which is used to decode a base64 encoded string, you should monitor process creation events on Windows platforms. Specifically, look for instances where the command line invocation includes the pattern '::FromBase64String('. This pattern indicates an attempt to decode a base64 encoded string, which can be a tactic employed by attackers to execute encoded payloads or scripts in a manner that evades detection. Be aware that there may be legitimate uses of this function, such as in administrative script libraries; therefore, these occurrences might not always signify malicious activity but should be investigated with a high priority due to the potential risks involved.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '::FromBase64String('\n    condition: selection\nfalsepositives:\n    - Administrative script libraries\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '::FromBase64String('\n    condition: selection\nfalsepositives:\n    - Administrative script libraries\nlevel: high\n",
      "question": "usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string",
      "answer": "In order to detect usage of the \"FromBase64String\" function in the command line which is used to decode a base64 encoded string, you should monitor process creation events on Windows platforms. Specifically, look for instances where the command line invocation includes the pattern '::FromBase64String('. This pattern indicates an attempt to decode a base64 encoded string, which can be a tactic employed by attackers to execute encoded payloads or scripts in a manner that evades detection. Be aware that there may be legitimate uses of this function, such as in administrative script libraries; therefore, these occurrences might not always signify malicious activity but should be investigated with a high priority due to the potential risks involved."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when the 'AllowMultipleTSSessions' value is enabled.\nWhich allows for multiple Remote Desktop connection sessions to be opened at once.\nThis is often used by attacker as a way to connect to an RDP session without disconnecting the other users\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when the 'AllowMultipleTSSessions' value is enabled, which allows for multiple Remote Desktop connection sessions to be opened at once and is often used by attackers as a way to connect to an RDP session without disconnecting the other users, you should: Monitor the Windows Registry settings for changes specifically aimed at enabling the 'AllowMultipleTSSessions' functionality. This involves tracking the event when a value is set (SetValue event type) in the registry at the location '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions' that changes its value to DWORD (0x00000001), which effectively allows multiple TS sessions. Be aware that there might be legitimate use cases for enabling this feature; hence, not every detection might indicate a malicious activity. This detection is classified with a medium level of importance. The associated MITRE ATT&CK tactics and techniques for understanding this activity focus on Persistence, Privilege Escalation, and Lateral Movement, as this behavior is exploited by attackers to maintain access to and control over a connected system without disrupting other users' sessions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions'\n        Details|endswith: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Legitimate use of the multi session functionality\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions'\n        Details|endswith: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Legitimate use of the multi session functionality\nlevel: medium\n",
      "question": "when the 'AllowMultipleTSSessions' value is enabled.\nWhich allows for multiple Remote Desktop connection sessions to be opened at once.\nThis is often used by attacker as a way to connect to an RDP session without disconnecting the other users\n",
      "answer": "In order to detect when the 'AllowMultipleTSSessions' value is enabled, which allows for multiple Remote Desktop connection sessions to be opened at once and is often used by attackers as a way to connect to an RDP session without disconnecting the other users, you should: Monitor the Windows Registry settings for changes specifically aimed at enabling the 'AllowMultipleTSSessions' functionality. This involves tracking the event when a value is set (SetValue event type) in the registry at the location '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions' that changes its value to DWORD (0x00000001), which effectively allows multiple TS sessions. Be aware that there might be legitimate use cases for enabling this feature; hence, not every detection might indicate a malicious activity. This detection is classified with a medium level of importance. The associated MITRE ATT&CK tactics and techniques for understanding this activity focus on Persistence, Privilege Escalation, and Lateral Movement, as this behavior is exploited by attackers to maintain access to and control over a connected system without disrupting other users' sessions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of Get-GPO to get one GPO or all the GPOs in a domain..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect use of Get-GPO to get one GPO or all the GPOs in a domain, you should: Monitor Windows PowerShell scripts for the presence of the \"Get-GPO\" command. This involves analyzing script block log entries, which requires Script Block Logging to be enabled on the system. If the text \"Get-GPO\" is found within a PowerShell script block, it suggests an attempt to retrieve Group Policy Objects (GPOs) from the domain, which can be a part of reconnaissance activities within an environment. However, be aware that there might be legitimate uses of this command in administrative PowerShell scripts, and such instances are considered as potential false positives. The severity of this detection is considered low, due to the possibility of legitimate use and the necessity of further investigation to confirm malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: Get-GPO\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: Get-GPO\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
      "question": "Detect use of Get-GPO to get one GPO or all the GPOs in a domain.",
      "answer": "In order to detect use of Get-GPO to get one GPO or all the GPOs in a domain, you should: Monitor Windows PowerShell scripts for the presence of the \"Get-GPO\" command. This involves analyzing script block log entries, which requires Script Block Logging to be enabled on the system. If the text \"Get-GPO\" is found within a PowerShell script block, it suggests an attempt to retrieve Group Policy Objects (GPOs) from the domain, which can be a part of reconnaissance activities within an environment. However, be aware that there might be legitimate uses of this command in administrative PowerShell scripts, and such instances are considered as potential false positives. The severity of this detection is considered low, due to the possibility of legitimate use and the necessity of further investigation to confirm malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Remote registry management using REG utility from non-admin workstation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect instances of remote registry management using REG utility from non-admin workstations, you should focus on monitoring Windows security logs. Specifically, look for events with the Event ID 5145, which indicates an attempt to access network shared objects. This activity becomes particularly interesting when the accessed object is related to the Windows Registry, as denoted by the access path containing '\\winreg'. \n\nTo ensure that legitimate administrative activity does not generate unnecessary alerts, any access attempts made from known administrators' workstations should be excluded from this detection mechanism. This approach helps in identifying potentially malicious or unauthorized attempts to use the REG utility for registry modifications from machines that are not recognized as administrative workstations. \n\nBe aware that while monitoring for this behavior is crucial for detecting unauthorized remote registry management attempts, there could be instances where legitimate usage triggers an alert. Such legitimate cases typically involve administrators performing valid remote registry operations from non-standard workstations. \n\nThe primary focus on security event logs, combined with the specific conditions around Event ID 5145 and the exclusion of known admin workstations, aligns this detection strategy with tactics and techniques associated with Persistence, Privilege Escalation, and Defense Evasion. Identifying unauthorized access to the Windows Registry via remote management tools is a critical step in mitigating potential threats that exploit registry modifications for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains: '\\winreg'\n    filter_main:\n        IpAddress: '%Admins_Workstations%'\n    condition: selection and not filter_main\nfalsepositives:\n    - Legitimate usage of remote registry management by administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains: '\\winreg'\n    filter_main:\n        IpAddress: '%Admins_Workstations%'\n    condition: selection and not filter_main\nfalsepositives:\n    - Legitimate usage of remote registry management by administrator\nlevel: medium\n",
      "question": "Remote registry management using REG utility from non-admin workstation",
      "answer": "In order to detect instances of remote registry management using REG utility from non-admin workstations, you should focus on monitoring Windows security logs. Specifically, look for events with the Event ID 5145, which indicates an attempt to access network shared objects. This activity becomes particularly interesting when the accessed object is related to the Windows Registry, as denoted by the access path containing '\\winreg'. \n\nTo ensure that legitimate administrative activity does not generate unnecessary alerts, any access attempts made from known administrators' workstations should be excluded from this detection mechanism. This approach helps in identifying potentially malicious or unauthorized attempts to use the REG utility for registry modifications from machines that are not recognized as administrative workstations. \n\nBe aware that while monitoring for this behavior is crucial for detecting unauthorized remote registry management attempts, there could be instances where legitimate usage triggers an alert. Such legitimate cases typically involve administrators performing valid remote registry operations from non-standard workstations. \n\nThe primary focus on security event logs, combined with the specific conditions around Event ID 5145 and the exclusion of known admin workstations, aligns this detection strategy with tactics and techniques associated with Persistence, Privilege Escalation, and Defense Evasion. Identifying unauthorized access to the Windows Registry via remote management tools is a critical step in mitigating potential threats that exploit registry modifications for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suppression rule is created in Azure. Adversary's could attempt this to evade detection..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a suppression rule is created in Azure, which adversaries could attempt to evade detection, you should: Monitor Azure activity logs specifically for actions related to creating alert suppression rules. Focus on detecting events where the operation name is MICROSOFT.SECURITY/ALERTSSUPPRESSIONRULES/WRITE. This kind of activity can sometimes be legitimate, such as when a system administrator is performing routine tasks. However, to differentiate between normal and suspicious activities, you need to verify the user identity, user agent, and hostname involved in creating the suppression rule. If the action is initiated by an unfamiliar user or from an unexpected source, it should be considered suspicious and warrants further investigation. It is important to note that legitimate cases where known behaviors cause false alarms can be set to bypass this monitoring to reduce noise. The detection of such events is rated at a medium level of importance, and these activities are associated with tactics and techniques like defense evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName: MICROSOFT.SECURITY/ALERTSSUPPRESSIONRULES/WRITE\n    condition: selection\nfalsepositives:\n    - Suppression Rule being created may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Suppression Rule created from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName: MICROSOFT.SECURITY/ALERTSSUPPRESSIONRULES/WRITE\n    condition: selection\nfalsepositives:\n    - Suppression Rule being created may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Suppression Rule created from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "suppression rule is created in Azure. Adversary's could attempt this to evade detection.",
      "answer": "In order to identify when a suppression rule is created in Azure, which adversaries could attempt to evade detection, you should: Monitor Azure activity logs specifically for actions related to creating alert suppression rules. Focus on detecting events where the operation name is MICROSOFT.SECURITY/ALERTSSUPPRESSIONRULES/WRITE. This kind of activity can sometimes be legitimate, such as when a system administrator is performing routine tasks. However, to differentiate between normal and suspicious activities, you need to verify the user identity, user agent, and hostname involved in creating the suppression rule. If the action is initiated by an unfamiliar user or from an unexpected source, it should be considered suspicious and warrants further investigation. It is important to note that legitimate cases where known behaviors cause false alarms can be set to bypass this monitoring to reduce noise. The detection of such events is rated at a medium level of importance, and these activities are associated with tactics and techniques like defense evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting programs on a Windows system that should not write scripts to disk.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect programs on a Windows system that should not write scripts to disk, you should monitor file events within the operating system for specific behaviors. Focus on tracking when particular Windows executables and programs, sometimes associated with normal operations or known as Living off the Land Binaries (LOLBins), attempt to create or modify script files, such as PowerShell (.ps1), batch (.bat), Visual Basic (.vbs), Shell Command File (.scf), Windows Script File (.wsf), or Windows Script Host (.wsh) files. These executables include Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which under normal circumstances should not be used to drop executables. Additionally, pay attention to LOLBins like certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, mshta.exe, which are known to be misused to download or execute malicious code. Also, be wary of legitimate processes like AcroRd32.exe (Adobe Reader), RdrCEF.exe (Adobe Reader's cloud services), hh.exe (HTML Help executable), and finger.exe, as these should not typically be involved in script creation on disk. Such an activity can indicate malicious behavior, including the execution of unauthorized or harmful scripts, potentially part of an attack chain. The aim is to identify these unusual activities to prevent attacks that exploit legitimate functionalities for nefarious purposes, emphasizing the importance of vigilance in monitoring file creation events tied to these specific applications and scripts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - \\eqnedt32.exe\n            - \\wordpad.exe\n            - \\wordview.exe\n            # LOLBINs that can be used to download executables\n            - \\certutil.exe\n            - \\certoc.exe\n            - \\CertReq.exe\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - \\Desktopimgdownldr.exe\n            - \\esentutl.exe\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.ps1'\n            - '.bat'\n            - '.vbs'\n            - '.scf'\n            - '.wsf'\n            - '.wsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - \\eqnedt32.exe\n            - \\wordpad.exe\n            - \\wordview.exe\n            # LOLBINs that can be used to download executables\n            - \\certutil.exe\n            - \\certoc.exe\n            - \\CertReq.exe\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - \\Desktopimgdownldr.exe\n            - \\esentutl.exe\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.ps1'\n            - '.bat'\n            - '.vbs'\n            - '.scf'\n            - '.wsf'\n            - '.wsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "programs on a Windows system that should not write scripts to disk",
      "answer": "In order to detect programs on a Windows system that should not write scripts to disk, you should monitor file events within the operating system for specific behaviors. Focus on tracking when particular Windows executables and programs, sometimes associated with normal operations or known as Living off the Land Binaries (LOLBins), attempt to create or modify script files, such as PowerShell (.ps1), batch (.bat), Visual Basic (.vbs), Shell Command File (.scf), Windows Script File (.wsf), or Windows Script Host (.wsh) files. These executables include Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which under normal circumstances should not be used to drop executables. Additionally, pay attention to LOLBins like certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, mshta.exe, which are known to be misused to download or execute malicious code. Also, be wary of legitimate processes like AcroRd32.exe (Adobe Reader), RdrCEF.exe (Adobe Reader's cloud services), hh.exe (HTML Help executable), and finger.exe, as these should not typically be involved in script creation on disk. Such an activity can indicate malicious behavior, including the execution of unauthorized or harmful scripts, potentially part of an attack chain. The aim is to identify these unusual activities to prevent attacks that exploit legitimate functionalities for nefarious purposes, emphasizing the importance of vigilance in monitoring file creation events tied to these specific applications and scripts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Silence EmpireDNSAgent as described in the Group-IP report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Silence EmpireDNSAgent as described in the Group-IP report, you should: Monitor PowerShell scripts for activities commonly associated with this attack by analyzing script block execution logs on Windows systems. Ensure Script Block Logging is enabled to capture the relevant data. Specifically, look for the simultaneous presence of script text snippets indicative of malign activities. For detection, focus on two main patterns. The first pattern, suggesting PowerShell abuse by an Empire toolkit, includes scripts initiating diagnostic processes, computer shutdown or restart commands, handling execution exceptions, passing command arguments, and closing DNS communication tunnels typically used for command and control (C2) actions. The second pattern, indicative of DNS based communication attempts used by the DNSAgent, involves scripts setting up DNS queries, executing nslookup commands, generating random DNS fields, converting session options, and marking sessions as dead or evaluating session drivers. The detection of these two patterns together in PowerShell script execution suggests a critical level threat, potentially due to the Silence group's EmpireDNSAgent activity. Be mindful that not all detections may be malicious and unknown false positives can occur, requiring further investigation for confirmation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    empire:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'System.Diagnostics.Process'\n            - 'Stop-Computer'\n            - 'Restart-Computer'\n            - 'Exception in execution'\n            - '$cmdargs'\n            - 'Close-Dnscat2Tunnel'\n    dnscat:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'set type=$LookupType`nserver'\n            - '$Command | nslookup 2>&1 | Out-String'\n            - 'New-RandomDNSField'\n            - '[Convert]::ToString($SYNOptions, 16)'\n            - '$Session.Dead = $True'\n            - '$Session[\"Driver\"] -eq'\n    condition: empire and dnscat\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    empire:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'System.Diagnostics.Process'\n            - 'Stop-Computer'\n            - 'Restart-Computer'\n            - 'Exception in execution'\n            - '$cmdargs'\n            - 'Close-Dnscat2Tunnel'\n    dnscat:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'set type=$LookupType`nserver'\n            - '$Command | nslookup 2>&1 | Out-String'\n            - 'New-RandomDNSField'\n            - '[Convert]::ToString($SYNOptions, 16)'\n            - '$Session.Dead = $True'\n            - '$Session[\"Driver\"] -eq'\n    condition: empire and dnscat\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "Silence EmpireDNSAgent as described in the Group-IP report",
      "answer": "In order to detect Silence EmpireDNSAgent as described in the Group-IP report, you should: Monitor PowerShell scripts for activities commonly associated with this attack by analyzing script block execution logs on Windows systems. Ensure Script Block Logging is enabled to capture the relevant data. Specifically, look for the simultaneous presence of script text snippets indicative of malign activities. For detection, focus on two main patterns. The first pattern, suggesting PowerShell abuse by an Empire toolkit, includes scripts initiating diagnostic processes, computer shutdown or restart commands, handling execution exceptions, passing command arguments, and closing DNS communication tunnels typically used for command and control (C2) actions. The second pattern, indicative of DNS based communication attempts used by the DNSAgent, involves scripts setting up DNS queries, executing nslookup commands, generating random DNS fields, converting session options, and marking sessions as dead or evaluating session drivers. The detection of these two patterns together in PowerShell script execution suggests a critical level threat, potentially due to the Silence group's EmpireDNSAgent activity. Be mindful that not all detections may be malicious and unknown false positives can occur, requiring further investigation for confirmation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC, which uses the OWA endpoint to access the PowerShell backend endpoint, you should monitor proxy logs for specific criteria. Look for requests where the user agent matches 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.54 Safari/537.36', and the method used is 'POST' leading to a successful response indicated by the status code 200. Additionally, the requests should contain URLs that have both '/owa/mastermailbox' and '/powershell' in their paths, suggesting an effort to exploit OWA to execute PowerShell commands. Such activities are critical indicators of a potential compromise, exploiting Exchange servers using a method publicly documented in proof of concept (POC) examples. False positives for this detection strategy are considered unlikely, indicating the high confidence in these specific criteria as indicative of a malicious attempt to exploit the OWASSRF variant.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        # Look for the header: X-OWA-ExplicitLogonUser: owa/mastermailbox@outlook.com\n        c-useragent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.54 Safari/537.36'\n        cs-method: 'POST'\n        sc-status: 200\n        c-uri|contains|all:\n            - '/owa/mastermailbox'\n            - '/powershell'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        # Look for the header: X-OWA-ExplicitLogonUser: owa/mastermailbox@outlook.com\n        c-useragent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.54 Safari/537.36'\n        cs-method: 'POST'\n        sc-status: 200\n        c-uri|contains|all:\n            - '/owa/mastermailbox'\n            - '/powershell'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint",
      "answer": "In order to detect exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC, which uses the OWA endpoint to access the PowerShell backend endpoint, you should monitor proxy logs for specific criteria. Look for requests where the user agent matches 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.54 Safari/537.36', and the method used is 'POST' leading to a successful response indicated by the status code 200. Additionally, the requests should contain URLs that have both '/owa/mastermailbox' and '/powershell' in their paths, suggesting an effort to exploit OWA to execute PowerShell commands. Such activities are critical indicators of a potential compromise, exploiting Exchange servers using a method publicly documented in proof of concept (POC) examples. False positives for this detection strategy are considered unlikely, indicating the high confidence in these specific criteria as indicative of a malicious attempt to exploit the OWASSRF variant."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session, you should: focus on monitoring process creation within Windows environments. Specifically, keep an eye out for any instances where PowerShell (either through 'powershell.exe' or 'pwsh.exe') is invoked, as well as cases where the original file names 'PowerShell.EXE' or 'pwsh.dll' are used. Additionally, pay attention to command lines that contain the strings 'Import-Module ' or 'ipmo ', as these are indicative of attempts to import modules into the PowerShell session. It is important to apply this detection across all processes meeting these criteria. However, be aware that in many legitimate scenarios, scripts may import modules inline, meaning that this behavior is not exclusively malicious but should rather be used for hunting purposes with a low alert level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cmdlet:\n        CommandLine|contains:\n            - 'Import-Module '\n            - 'ipmo '\n    condition: all of selection_*\nfalsepositives:\n    - Depending on the environement, many legitimate scripts will import modules inline. This rule is targeted for hunting purposes.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cmdlet:\n        CommandLine|contains:\n            - 'Import-Module '\n            - 'ipmo '\n    condition: all of selection_*\nfalsepositives:\n    - Depending on the environement, many legitimate scripts will import modules inline. This rule is targeted for hunting purposes.\nlevel: low\n",
      "question": "usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session",
      "answer": "In order to detect usage of the \"Import-Module\" cmdlet in order to add new Cmdlets to the current PowerShell session, you should: focus on monitoring process creation within Windows environments. Specifically, keep an eye out for any instances where PowerShell (either through 'powershell.exe' or 'pwsh.exe') is invoked, as well as cases where the original file names 'PowerShell.EXE' or 'pwsh.dll' are used. Additionally, pay attention to command lines that contain the strings 'Import-Module ' or 'ipmo ', as these are indicative of attempts to import modules into the PowerShell session. It is important to apply this detection across all processes meeting these criteria. However, be aware that in many legitimate scenarios, scripts may import modules inline, meaning that this behavior is not exclusively malicious but should rather be used for hunting purposes with a low alert level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Potential threat actor tampering with Sysmon manifest and eventually disabling it.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential threat actor tampering with Sysmon manifest and eventually disabling it, you should monitor for specific activities in Windows Security event logs. Look out for events with ID 4657, which indicate a change in registry values, particularly focusing on objects named either 'WINEVT\\Publishers\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}' or 'WINEVT\\Channels\\Microsoft-Windows-Sysmon/Operational'. It's crucial to note when the \"Enabled\" ObjectValueName is set to 0, suggesting an attempt to disable Sysmon. Additionally, events with ID 4663 should be scrutinized. These events indicate an attempt to access objects named similarly to the ones mentioned earlier, with an AccessMask of 0x10000, which denotes write access. Monitoring these activities is a high priority due to their association with evasion and defense evasion tactics, where an adversary might aim to disable or tamper with monitoring tools such as Sysmon to avoid detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4657\n        ObjectName|contains:\n            - 'WINEVT\\Publishers\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}'\n            - 'WINEVT\\Channels\\Microsoft-Windows-Sysmon/Operational'\n        ObjectValueName: 'Enabled'\n        NewValue: 0\n    selection2:\n        EventID: 4663\n        ObjectName|contains:\n            - 'WINEVT\\Publishers\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}'\n            - 'WINEVT\\Channels\\Microsoft-Windows-Sysmon/Operational'\n        AccessMask: 0x10000\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4657\n        ObjectName|contains:\n            - 'WINEVT\\Publishers\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}'\n            - 'WINEVT\\Channels\\Microsoft-Windows-Sysmon/Operational'\n        ObjectValueName: 'Enabled'\n        NewValue: 0\n    selection2:\n        EventID: 4663\n        ObjectName|contains:\n            - 'WINEVT\\Publishers\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}'\n            - 'WINEVT\\Channels\\Microsoft-Windows-Sysmon/Operational'\n        AccessMask: 0x10000\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Potential threat actor tampering with Sysmon manifest and eventually disabling it",
      "answer": "In order to detect potential threat actor tampering with Sysmon manifest and eventually disabling it, you should monitor for specific activities in Windows Security event logs. Look out for events with ID 4657, which indicate a change in registry values, particularly focusing on objects named either 'WINEVT\\Publishers\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}' or 'WINEVT\\Channels\\Microsoft-Windows-Sysmon/Operational'. It's crucial to note when the \"Enabled\" ObjectValueName is set to 0, suggesting an attempt to disable Sysmon. Additionally, events with ID 4663 should be scrutinized. These events indicate an attempt to access objects named similarly to the ones mentioned earlier, with an AccessMask of 0x10000, which denotes write access. Monitoring these activities is a high priority due to their association with evasion and defense evasion tactics, where an adversary might aim to disable or tamper with monitoring tools such as Sysmon to avoid detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS queries to \"ufile.io\". Which is often abused by malware for upload and exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS queries to \"ufile.io\", which is often abused by malware for upload and exfiltration, you should focus on monitoring DNS query logs from Windows-based systems. Specifically, you are looking for any DNS queries that contain the string 'ufile.io'. These queries are of high importance as they may indicate an attempt to communicate with a known file hosting service that could be used for malicious purposes, such as uploading stolen data or downloading additional malware components. It's essential to be aware that while detecting such queries can be a strong indicator of malicious activity, there can also be legitimate reasons for accessing \"ufile.io\". As such, while the detection of these queries is prioritized as high, it's also important to validate the context of these detections to minimize the risk of false positives associated with legitimate DNS queries and usage of Ufile.io.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'ufile.io'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Ufile\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'ufile.io'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Ufile\nlevel: high\n",
      "question": "DNS queries to \"ufile.io\". Which is often abused by malware for upload and exfiltration",
      "answer": "In order to detect DNS queries to \"ufile.io\", which is often abused by malware for upload and exfiltration, you should focus on monitoring DNS query logs from Windows-based systems. Specifically, you are looking for any DNS queries that contain the string 'ufile.io'. These queries are of high importance as they may indicate an attempt to communicate with a known file hosting service that could be used for malicious purposes, such as uploading stolen data or downloading additional malware components. It's essential to be aware that while detecting such queries can be a strong indicator of malicious activity, there can also be legitimate reasons for accessing \"ufile.io\". As such, while the detection of these queries is prioritized as high, it's also important to validate the context of these detections to minimize the risk of false positives associated with legitimate DNS queries and usage of Ufile.io."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports, you should: Monitor for the creation of processes on Windows systems, specifically looking for command line patterns that indicate the execution of sophisticated commands. These include patterns where PowerShell is used to invoke a WMI method for process creation, evidenced by commands that contain phrases like 'Invoke-WMIMethod win32_process -name create -argumentlist', combined with 'rundll32 c:\\windows'. Additionally, watch for uses of WMIC to remotely create processes, signaled by the presence of 'wmic /node:' followed closely by 'process call create \"rundll32 c:\\windows'. Such command patterns are critical indicators of the tactics, techniques, and procedures associated with the UNC2452 actors, highlighting potential malicious activity likely not related to regular, day-to-day operations of Windows-based environments. Detected occurrences should be treated with a high level of scrutiny due to the unlikely nature of false positives at this critical level of detection. This approach focuses on identifying potential breaches or misuse aligned with techniques that correspond to initial access, execution, and persistence, thus aiding in the timely mitigation of threats associated with these sophisticated adversary tactics.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'Invoke-WMIMethod win32_process -name create -argumentlist'\n            - 'rundll32 c:\\windows'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic /node:'\n            - 'process call create \"rundll32 c:\\windows'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'Invoke-WMIMethod win32_process -name create -argumentlist'\n            - 'rundll32 c:\\windows'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic /node:'\n            - 'process call create \"rundll32 c:\\windows'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports",
      "answer": "In order to detect a specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports, you should: Monitor for the creation of processes on Windows systems, specifically looking for command line patterns that indicate the execution of sophisticated commands. These include patterns where PowerShell is used to invoke a WMI method for process creation, evidenced by commands that contain phrases like 'Invoke-WMIMethod win32_process -name create -argumentlist', combined with 'rundll32 c:\\windows'. Additionally, watch for uses of WMIC to remotely create processes, signaled by the presence of 'wmic /node:' followed closely by 'process call create \"rundll32 c:\\windows'. Such command patterns are critical indicators of the tactics, techniques, and procedures associated with the UNC2452 actors, highlighting potential malicious activity likely not related to regular, day-to-day operations of Windows-based environments. Detected occurrences should be treated with a high level of scrutiny due to the unlikely nature of false positives at this critical level of detection. This approach focuses on identifying potential breaches or misuse aligned with techniques that correspond to initial access, execution, and persistence, thus aiding in the timely mitigation of threats associated with these sophisticated adversary tactics."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell command line patterns in combincation with encoded commands that often appear in malware infection chains.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell command line patterns in combination with encoded commands that often appear in malware infection chains, you should: Monitor Windows process creation logs for the execution of PowerShell (powershell.exe or pwsh.exe) or processes with the original file names PowerShell.Exe or pwsh.dll. Be vigilant for command lines containing specific flags that indicate encoding (' -e ', ' -en ', ' -enc ', ' -enco') or actual encoded strings that often start with ' JAB', ' SUVYI', ' SQBFAFgA', ' aWV4I', ' IAB', ' PAA', or ' aQBlAHgA'. It's crucial to exclude any activity initiated by the parent process gc_worker.exe located in `C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\`, as this could be a legitimate use case involving encoded scripts. This approach targets the identification of suspicious PowerShell activity, which is a common vector used in malware infections, by leveraging specific encoded command patterns and execution flags without generating false positives from legitimate scripting activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.Exe'\n            - 'pwsh.dll'\n    selection_flags:\n        CommandLine|contains:\n            - ' -e '\n            - ' -en '\n            - ' -enc '\n            - ' -enco'\n    selection_encoded:\n        CommandLine|contains:\n            - ' JAB'\n            - ' SUVYI'\n            - ' SQBFAFgA'\n            - ' aWV4I'\n            - ' IAB'\n            - ' PAA'\n            - ' aQBlAHgA'\n    filter_gcworker:\n        ParentImage|contains:\n            - 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n            - '\\gc_worker.exe'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Other tools that work with encoded scripts in the command line instead of script files\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.Exe'\n            - 'pwsh.dll'\n    selection_flags:\n        CommandLine|contains:\n            - ' -e '\n            - ' -en '\n            - ' -enc '\n            - ' -enco'\n    selection_encoded:\n        CommandLine|contains:\n            - ' JAB'\n            - ' SUVYI'\n            - ' SQBFAFgA'\n            - ' aWV4I'\n            - ' IAB'\n            - ' PAA'\n            - ' aQBlAHgA'\n    filter_gcworker:\n        ParentImage|contains:\n            - 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n            - '\\gc_worker.exe'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Other tools that work with encoded scripts in the command line instead of script files\nlevel: high\n",
      "question": "PowerShell command line patterns in combincation with encoded commands that often appear in malware infection chains",
      "answer": "In order to detect PowerShell command line patterns in combination with encoded commands that often appear in malware infection chains, you should: Monitor Windows process creation logs for the execution of PowerShell (powershell.exe or pwsh.exe) or processes with the original file names PowerShell.Exe or pwsh.dll. Be vigilant for command lines containing specific flags that indicate encoding (' -e ', ' -en ', ' -enc ', ' -enco') or actual encoded strings that often start with ' JAB', ' SUVYI', ' SQBFAFgA', ' aWV4I', ' IAB', ' PAA', or ' aQBlAHgA'. It's crucial to exclude any activity initiated by the parent process gc_worker.exe located in `C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\`, as this could be a legitimate use case involving encoded scripts. This approach targets the identification of suspicious PowerShell activity, which is a common vector used in malware infections, by leveraging specific encoded command patterns and execution flags without generating false positives from legitimate scripting activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credential.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credentials, you should: Monitor Windows application logs, specifically looking for error events from the 'Application Error' provider. The key details to watch include an Event ID of 1000, which indicates an application error. Specifically, focus on instances where the application name is 'lsass.exe', and the exception code is 'c0000001', signaling a STATUS_UNSUCCESSFUL error. This setup might flag the rare legitimate crashing of the lsass process, so it's important to assess these alerts with that consideration in mind. This monitoring strategy is crucial for identifying potentially malicious activities associated with credential theft techniques that intentionally crash the Local Security Authority Subsystem Service (LSASS) to extract credentials, positioning this approach as a high-level defensive measure against such attack methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\ndetection:\n    selection:\n        Provider_Name: 'Application Error'\n        EventID: 1000\n        AppName: 'lsass.exe'\n        ExceptionCode: 'c0000001' # STATUS_UNSUCCESSFUL\n    condition: selection\nfalsepositives:\n    - Rare legitimate crashing of the lsass process\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\ndetection:\n    selection:\n        Provider_Name: 'Application Error'\n        EventID: 1000\n        AppName: 'lsass.exe'\n        ExceptionCode: 'c0000001' # STATUS_UNSUCCESSFUL\n    condition: selection\nfalsepositives:\n    - Rare legitimate crashing of the lsass process\nlevel: high\n",
      "question": "Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credential",
      "answer": "In order to detect Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credentials, you should: Monitor Windows application logs, specifically looking for error events from the 'Application Error' provider. The key details to watch include an Event ID of 1000, which indicates an application error. Specifically, focus on instances where the application name is 'lsass.exe', and the exception code is 'c0000001', signaling a STATUS_UNSUCCESSFUL error. This setup might flag the rare legitimate crashing of the lsass process, so it's important to assess these alerts with that consideration in mind. This monitoring strategy is crucial for identifying potentially malicious activities associated with credential theft techniques that intentionally crash the Local Security Authority Subsystem Service (LSASS) to extract credentials, positioning this approach as a high-level defensive measure against such attack methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"getcap\" binary. This is often used during recon activity to determine potential binaries that can be abused as GTFOBins or other..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of \"getcap\" binary, which is often used during recon activity to determine potential binaries that can be abused as GTFOBins or others, you should: monitor process creation events on Linux systems for the execution of the \"getcap\" binary, particularly focusing on command lines that include either \" /r \" or \" -r \". This involves checking the end of the image path for '/getcap' to accurately identify the use of this specific binary. Understanding that there might be unknown cases that could be falsely identified as suspicious, this detection strategy is set with a low level of confidence. Nonetheless, it remains a crucial step in identifying reconnaissance activities where attackers might be searching for exploitable binaries to leverage in their attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/getcap'\n        CommandLine|contains:\n            - ' /r '\n            - ' -r '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/getcap'\n        CommandLine|contains:\n            - ' /r '\n            - ' -r '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "usage of \"getcap\" binary. This is often used during recon activity to determine potential binaries that can be abused as GTFOBins or other.",
      "answer": "In order to detect usage of \"getcap\" binary, which is often used during recon activity to determine potential binaries that can be abused as GTFOBins or others, you should: monitor process creation events on Linux systems for the execution of the \"getcap\" binary, particularly focusing on command lines that include either \" /r \" or \" -r \". This involves checking the end of the image path for '/getcap' to accurately identify the use of this specific binary. Understanding that there might be unknown cases that could be falsely identified as suspicious, this detection strategy is set with a low level of confidence. Nonetheless, it remains a crucial step in identifying reconnaissance activities where attackers might be searching for exploitable binaries to leverage in their attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC), you should focus on monitoring network connections, specifically within Windows environments. Look for TCP protocol connections that are initiated by the source and target destination port 135, which is commonly used by \"epmap\" or RPC services. It is essential to filter out legitimate system connections initiated by Windows or Amazon SSM (Simple Systems Manager) agent updater. These legitimate connections commonly start with the directories \"C:\\Windows\\\" and \"C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\". Connections that do not originate from these paths and meet the other specified criteria should be considered suspicious. The associated tactics and techniques include Execution and Lateral Movement, where attackers might leverage RPC to execute commands remotely or move within the network. Paying attention to these details with a high level of scrutiny is crucial due to the high impact level of potential findings, although the exact nature of false positives remains uncertain.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Protocol: tcp\n        Initiated: 'true'\n        DestinationPort: 135\n        #DestinationPortName: epmap\n    filter:\n        Image|startswith:\n            - C:\\Windows\\\n            - C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Protocol: tcp\n        Initiated: 'true'\n        DestinationPort: 135\n        #DestinationPortName: epmap\n    filter:\n        Image|startswith:\n            - C:\\Windows\\\n            - C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC)",
      "answer": "In order to detect suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC), you should focus on monitoring network connections, specifically within Windows environments. Look for TCP protocol connections that are initiated by the source and target destination port 135, which is commonly used by \"epmap\" or RPC services. It is essential to filter out legitimate system connections initiated by Windows or Amazon SSM (Simple Systems Manager) agent updater. These legitimate connections commonly start with the directories \"C:\\Windows\\\" and \"C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\". Connections that do not originate from these paths and meet the other specified criteria should be considered suspicious. The associated tactics and techniques include Execution and Lateral Movement, where attackers might leverage RPC to execute commands remotely or move within the network. Paying attention to these details with a high level of scrutiny is crucial due to the high impact level of potential findings, although the exact nature of false positives remains uncertain."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line, you should: focus on monitoring process creation logs within Windows systems. Specifically, look for instances where the command line activity includes all of the following elements simultaneously: 'powershell', '.DownloadFile', and 'System.Net.WebClient'. These components indicate the execution of PowerShell along with the creation of a WebClient object and the use of its method to download files, which can be a sign of a high-level malicious activity aiming to retrieve malicious scripts or software from remote servers. Be aware of the potential for unknown false positives, but given the specifics of the command line invocation, the risk level is considered high. This detection method is vital in identifying tactics and techniques related to the Execution phase, and more specifically, the use of command and scripting interpreter techniques to facilitate attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'powershell'\n            - '.DownloadFile'\n            - 'System.Net.WebClient'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'powershell'\n            - '.DownloadFile'\n            - 'System.Net.WebClient'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line",
      "answer": "In order to detect the execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line, you should: focus on monitoring process creation logs within Windows systems. Specifically, look for instances where the command line activity includes all of the following elements simultaneously: 'powershell', '.DownloadFile', and 'System.Net.WebClient'. These components indicate the execution of PowerShell along with the creation of a WebClient object and the use of its method to download files, which can be a sign of a high-level malicious activity aiming to retrieve malicious scripts or software from remote servers. Be aware of the potential for unknown false positives, but given the specifics of the command line invocation, the risk level is considered high. This detection method is vital in identifying tactics and techniques related to the Execution phase, and more specifically, the use of command and scripting interpreter techniques to facilitate attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls that performs remote DCOM operations. These could be abused for lateral movement via DCOM or WMI..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls that perform remote DCOM operations, which could be abused for lateral movement via DCOM or WMI, you should focus on analyzing logs from RPC firewalls. These logs are critical because they help identify when potentially malicious remote procedure calls are made, ones that might facilitate lateral movement within a network\u2014an attacker's method to move from one system to another.\n\nWhen examining the RPC firewall's application logs, look for those categorized under \"RPCFW\" with an EventID of 3. This event ID is crucial as it specifically points to scenarios where remote DCOM operations might be taking place. To further narrow down the search for malicious activity, the detection process should filter logs based on specific InterfaceUuids. The InterfaceUuids of interest, indicating operations that need scrutiny, include:\n\n- 4d9f4ab8-7d1c-11cf-861e-0020af6e7c57,\n- 99fcfec4-5260-101b-bbcb-00aa0021347a,\n- 000001a0-0000-0000-c000-000000000046,\n- 00000131-0000-0000-c000-000000000046,\n- 00000143-0000-0000-c000-000000000046, and\n- 00000000-0000-0000-c000-000000000046.\n\nThese specific UUIDs relate to operations that are commonly used in legitimate administrative tasks but could also be exploited for malicious purposes like lateral movement through DCOM or WMI.\n\nIt's also important to be aware of potential false positives, which can occur during some administrative tasks on a remote host. Despite this, the risk level of such detections is considered high due to the possible exploitation for lateral movement, highlighting the need for rigorous investigation when such patterns are observed.\n\nIn summary, close monitoring of RPC firewall application logs, with particular attention to EventLog RPCFW, EventID 3, and the listed InterfaceUuids, is essential for identifying and investigating potential abuses of remote DCOM operations, which could signify attempts at lateral movement through the network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:367abb81-9844-35f1-ad32-98f038001003'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - 4d9f4ab8-7d1c-11cf-861e-0020af6e7c57\n            - 99fcfec4-5260-101b-bbcb-00aa0021347a\n            - 000001a0-0000-0000-c000-000000000046\n            - 00000131-0000-0000-c000-000000000046\n            - 00000143-0000-0000-c000-000000000046\n            - 00000000-0000-0000-c000-000000000046\n    condition: selection\nfalsepositives:\n    - Some administrative tasks on remote host\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:367abb81-9844-35f1-ad32-98f038001003'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - 4d9f4ab8-7d1c-11cf-861e-0020af6e7c57\n            - 99fcfec4-5260-101b-bbcb-00aa0021347a\n            - 000001a0-0000-0000-c000-000000000046\n            - 00000131-0000-0000-c000-000000000046\n            - 00000143-0000-0000-c000-000000000046\n            - 00000000-0000-0000-c000-000000000046\n    condition: selection\nfalsepositives:\n    - Some administrative tasks on remote host\nlevel: high\n",
      "question": "remote RPC calls that performs remote DCOM operations. These could be abused for lateral movement via DCOM or WMI.",
      "answer": "In order to detect remote RPC calls that perform remote DCOM operations, which could be abused for lateral movement via DCOM or WMI, you should focus on analyzing logs from RPC firewalls. These logs are critical because they help identify when potentially malicious remote procedure calls are made, ones that might facilitate lateral movement within a network\u2014an attacker's method to move from one system to another.\n\nWhen examining the RPC firewall's application logs, look for those categorized under \"RPCFW\" with an EventID of 3. This event ID is crucial as it specifically points to scenarios where remote DCOM operations might be taking place. To further narrow down the search for malicious activity, the detection process should filter logs based on specific InterfaceUuids. The InterfaceUuids of interest, indicating operations that need scrutiny, include:\n\n- 4d9f4ab8-7d1c-11cf-861e-0020af6e7c57,\n- 99fcfec4-5260-101b-bbcb-00aa0021347a,\n- 000001a0-0000-0000-c000-000000000046,\n- 00000131-0000-0000-c000-000000000046,\n- 00000143-0000-0000-c000-000000000046, and\n- 00000000-0000-0000-c000-000000000046.\n\nThese specific UUIDs relate to operations that are commonly used in legitimate administrative tasks but could also be exploited for malicious purposes like lateral movement through DCOM or WMI.\n\nIt's also important to be aware of potential false positives, which can occur during some administrative tasks on a remote host. Despite this, the risk level of such detections is considered high due to the possible exploitation for lateral movement, highlighting the need for rigorous investigation when such patterns are observed.\n\nIn summary, close monitoring of RPC firewall application logs, with particular attention to EventLog RPCFW, EventID 3, and the listed InterfaceUuids, is essential for identifying and investigating potential abuses of remote DCOM operations, which could signify attempts at lateral movement through the network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Microsoft Excel loading an Add-In (.xll) file from an uncommon location.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Microsoft Excel loading an Add-In (.xll) file from an uncommon location, you should: monitor Windows system image load events, specifically focusing on instances where the Excel application (`excel.exe`) loads an image. Pay particular attention to .xll file types being loaded from locations that are not typically used for legitimate purposes. These locations include but are not limited to user Desktops, Downloads folders, Perflogs, Temp directories, the Users\\Public folder, and the Windows\\Tasks directory. The detection strategy involves verifying that the action corresponds to an Excel process initiating an .xll file from any of these uncommon directories. It's important to note that depending on organizational policies and the specific environment, you might need to adjust which directories are monitored or excluded to minimize false positives and ensure accurate detection. This strategy is set at a medium level of urgency, indicating while it is significant, it may require validation considering potential benign activities mimicking this behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\excel.exe'\n        ImageLoaded|contains:\n            # Note: Add or remove locations from this list based on your internal policy\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Perflogs\\'\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '\\Windows\\Tasks\\'\n        ImageLoaded|endswith: '.xll'\n    condition: selection\nfalsepositives:\n    - Some tuning might be required to allow or remove certain locations used by the rule if you consider them as safe locations\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\excel.exe'\n        ImageLoaded|contains:\n            # Note: Add or remove locations from this list based on your internal policy\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Perflogs\\'\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '\\Windows\\Tasks\\'\n        ImageLoaded|endswith: '.xll'\n    condition: selection\nfalsepositives:\n    - Some tuning might be required to allow or remove certain locations used by the rule if you consider them as safe locations\nlevel: medium\n",
      "question": "Microsoft Excel loading an Add-In (.xll) file from an uncommon location",
      "answer": "In order to detect Microsoft Excel loading an Add-In (.xll) file from an uncommon location, you should: monitor Windows system image load events, specifically focusing on instances where the Excel application (`excel.exe`) loads an image. Pay particular attention to .xll file types being loaded from locations that are not typically used for legitimate purposes. These locations include but are not limited to user Desktops, Downloads folders, Perflogs, Temp directories, the Users\\Public folder, and the Windows\\Tasks directory. The detection strategy involves verifying that the action corresponds to an Excel process initiating an .xll file from any of these uncommon directories. It's important to note that depending on organizational policies and the specific environment, you might need to adjust which directories are monitored or excluded to minimize false positives and ensure accurate detection. This strategy is set at a medium level of urgency, indicating while it is significant, it may require validation considering potential benign activities mimicking this behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting well-known credential dumping tools execution via specific named pipes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect well-known credential dumping tools execution via specific named pipes, you should monitor Windows named pipe creation events. Specifically, look for the creation of named pipes that contain the strings '\\lsadump', '\\cachedump', or '\\wceservicepipe'. These particular named pipe names are commonly associated with credential dumping activities, which are tactics employed to retrieve authentication credentials from Windows systems. Monitoring for these events requires configuring logging for Named Pipe Events in Sysmon, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected). It's essential to ensure that your Sysmon configuration is set to log these types of events, which is a configuration that can be found in popular Sysmon configurations available online. However, organizations should verify that their current configuration supports this level of monitoring.\n\nThe detection of such activities is critical as it directly relates to the tactics and techniques of Credential Access through Credential Dumping. Be aware that there could be legitimate uses of tools that interact with named pipes in this manner, such as administrators using tools for password recovery. These instances are considered false positives in the context of this monitoring strategy. Given the critical level of this rule, it's important to investigate and differentiate between malicious activities and legitimate administrative actions to avoid unnecessary alarm.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|contains:\n            - '\\lsadump'\n            - '\\cachedump'\n            - '\\wceservicepipe'\n    condition: selection\nfalsepositives:\n    - Legitimate Administrator using tool for password recovery\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|contains:\n            - '\\lsadump'\n            - '\\cachedump'\n            - '\\wceservicepipe'\n    condition: selection\nfalsepositives:\n    - Legitimate Administrator using tool for password recovery\nlevel: critical\n",
      "question": "well-known credential dumping tools execution via specific named pipes",
      "answer": "In order to detect well-known credential dumping tools execution via specific named pipes, you should monitor Windows named pipe creation events. Specifically, look for the creation of named pipes that contain the strings '\\lsadump', '\\cachedump', or '\\wceservicepipe'. These particular named pipe names are commonly associated with credential dumping activities, which are tactics employed to retrieve authentication credentials from Windows systems. Monitoring for these events requires configuring logging for Named Pipe Events in Sysmon, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected). It's essential to ensure that your Sysmon configuration is set to log these types of events, which is a configuration that can be found in popular Sysmon configurations available online. However, organizations should verify that their current configuration supports this level of monitoring.\n\nThe detection of such activities is critical as it directly relates to the tactics and techniques of Credential Access through Credential Dumping. Be aware that there could be legitimate uses of tools that interact with named pipes in this manner, such as administrators using tools for password recovery. These instances are considered false positives in the context of this monitoring strategy. Given the critical level of this rule, it's important to investigate and differentiate between malicious activities and legitimate administrative actions to avoid unnecessary alarm."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows shells and scripting applications that write files to suspicious folders.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Windows shells and scripting applications that write files to suspicious folders, you should monitor file events on Windows systems. Specifically, focus on instances where executable files typically associated with command prompts, scripts, and system administration\u2014such as `bash.exe`, `cmd.exe`, `cscript.exe`, `msbuild.exe`, `powershell.exe`, `pwsh.exe`, `sh.exe`, and `wscript.exe`\u2014are being used to write files to unusual locations like `C:\\PerfLogs\\` or `C:\\Users\\Public\\`. Additionally, keep an eye out for certain executables like `certutil.exe`, `forfiles.exe`, `mshta.exe`, `schtasks.exe`, `scriptrunner.exe`, and `wmic.exe`, which may be used maliciously to manipulate files within `C:\\PerfLogs\\`, `C:\\Users\\Public\\`, and `C:\\Windows\\Temp\\`. Monitoring these actions is critical for identifying potential defensive evasion and execution tactics where adversaries might employ common administrative tools and scripts to execute commands or scripts from locations not typically associated with their legitimate use, hence indicating a possible security threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_1:\n        Image|endswith:\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\msbuild.exe'  # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\sh.exe'\n            - '\\wscript.exe'\n        TargetFilename|startswith:\n            - 'C:\\PerfLogs\\'\n            - 'C:\\Users\\Public\\'\n    selection_2:\n        Image|endswith:\n            - '\\certutil.exe'\n            - '\\forfiles.exe'\n            - '\\mshta.exe'\n            #- '\\rundll32.exe' # Potential FP\n            - '\\schtasks.exe'\n            - '\\scriptrunner.exe'\n            - '\\wmic.exe'  # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n        TargetFilename|contains:\n            - 'C:\\PerfLogs\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_1:\n        Image|endswith:\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\msbuild.exe'  # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\sh.exe'\n            - '\\wscript.exe'\n        TargetFilename|startswith:\n            - 'C:\\PerfLogs\\'\n            - 'C:\\Users\\Public\\'\n    selection_2:\n        Image|endswith:\n            - '\\certutil.exe'\n            - '\\forfiles.exe'\n            - '\\mshta.exe'\n            #- '\\rundll32.exe' # Potential FP\n            - '\\schtasks.exe'\n            - '\\scriptrunner.exe'\n            - '\\wmic.exe'  # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n        TargetFilename|contains:\n            - 'C:\\PerfLogs\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Windows shells and scripting applications that write files to suspicious folders",
      "answer": "In order to detect Windows shells and scripting applications that write files to suspicious folders, you should monitor file events on Windows systems. Specifically, focus on instances where executable files typically associated with command prompts, scripts, and system administration\u2014such as `bash.exe`, `cmd.exe`, `cscript.exe`, `msbuild.exe`, `powershell.exe`, `pwsh.exe`, `sh.exe`, and `wscript.exe`\u2014are being used to write files to unusual locations like `C:\\PerfLogs\\` or `C:\\Users\\Public\\`. Additionally, keep an eye out for certain executables like `certutil.exe`, `forfiles.exe`, `mshta.exe`, `schtasks.exe`, `scriptrunner.exe`, and `wmic.exe`, which may be used maliciously to manipulate files within `C:\\PerfLogs\\`, `C:\\Users\\Public\\`, and `C:\\Windows\\Temp\\`. Monitoring these actions is critical for identifying potential defensive evasion and execution tactics where adversaries might employ common administrative tools and scripts to execute commands or scripts from locations not typically associated with their legitimate use, hence indicating a possible security threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect the configuration of Run Once registry key. Configured payload can be run by runonce.exe /AlternateShellStartup.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the configuration of Run Once registry key, where the configured payload can be run by runonce.exe /AlternateShellStartup, you should monitor Windows registry events with a focus on changes to registry keys. Specifically, observe any modification to keys starting with 'HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' and ending with '\\StubPath'. These modifications are indicative that an application or script has been set up to execute once via the 'Run Once' mechanism in the Windows registry.\n\nFor accurate detection, differentiate between potentially malicious activities and normal behavior by evaluating the details of the modifications. Exclude entries that involve known legitimate paths and parameters for Google Chrome or Microsoft Edge browser installations. These paths are typically:\n- For Chrome: \"C:\\Program Files\\Google\\Chrome\\Application\\\" followed by parameters related to the installer 'chrmstp.exe' including flags for configuration, verbose logging, and system-level installation. In some cases, an additional flag indicating the channel (e.g., \"--channel=stable\") might be present and should be considered a normal activity indicator.\n- For Edge: Start with either \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\\" or \"C:\\Program Files\\Microsoft\\Edge\\Application\\\", followed by parameters leading to 'setup.exe' with flags for configuring user settings, verbose logging, installing at the system level, specifying it is for Microsoft Edge, and indicating a stable channel.\n\nKeep in mind that false positives may occur due to legitimate modifications of the registry keys by authorized software installations or updates. Therefore, any detection should be analyzed in the context of additional information and system behavior to ascertain malicious intent. This monitoring strategy is aligned with understanding tactics and techniques associated with application shimming and persistence methods described in the MITRE ATT&CK framework, without explicitly triggering false alarms on legitimate software operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n        TargetObject|endswith: '\\StubPath'\n    filter_chrome:\n        Details|startswith: '\"C:\\Program Files\\Google\\Chrome\\Application\\'\n        Details|contains: '\\Installer\\chrmstp.exe\" --configure-user-settings --verbose-logging --system-level' # In some cases the Details will contain an additional flag called \"--channel=stable\" at the end\n    filter_edge:\n        Details|startswith:\n            - '\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\'\n            - '\"C:\\Program Files\\Microsoft\\Edge\\Application\\'\n        Details|endswith: '\\Installer\\setup.exe\" --configure-user-settings --verbose-logging --system-level --msedge --channel=stable'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate modification of the registry key by legitimate program\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n        TargetObject|endswith: '\\StubPath'\n    filter_chrome:\n        Details|startswith: '\"C:\\Program Files\\Google\\Chrome\\Application\\'\n        Details|contains: '\\Installer\\chrmstp.exe\" --configure-user-settings --verbose-logging --system-level' # In some cases the Details will contain an additional flag called \"--channel=stable\" at the end\n    filter_edge:\n        Details|startswith:\n            - '\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\'\n            - '\"C:\\Program Files\\Microsoft\\Edge\\Application\\'\n        Details|endswith: '\\Installer\\setup.exe\" --configure-user-settings --verbose-logging --system-level --msedge --channel=stable'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate modification of the registry key by legitimate program\nlevel: medium\n",
      "question": "Rule to detect the configuration of Run Once registry key. Configured payload can be run by runonce.exe /AlternateShellStartup",
      "answer": "In order to detect the configuration of Run Once registry key, where the configured payload can be run by runonce.exe /AlternateShellStartup, you should monitor Windows registry events with a focus on changes to registry keys. Specifically, observe any modification to keys starting with 'HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' and ending with '\\StubPath'. These modifications are indicative that an application or script has been set up to execute once via the 'Run Once' mechanism in the Windows registry.\n\nFor accurate detection, differentiate between potentially malicious activities and normal behavior by evaluating the details of the modifications. Exclude entries that involve known legitimate paths and parameters for Google Chrome or Microsoft Edge browser installations. These paths are typically:\n- For Chrome: \"C:\\Program Files\\Google\\Chrome\\Application\\\" followed by parameters related to the installer 'chrmstp.exe' including flags for configuration, verbose logging, and system-level installation. In some cases, an additional flag indicating the channel (e.g., \"--channel=stable\") might be present and should be considered a normal activity indicator.\n- For Edge: Start with either \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\\" or \"C:\\Program Files\\Microsoft\\Edge\\Application\\\", followed by parameters leading to 'setup.exe' with flags for configuring user settings, verbose logging, installing at the system level, specifying it is for Microsoft Edge, and indicating a stable channel.\n\nKeep in mind that false positives may occur due to legitimate modifications of the registry keys by authorized software installations or updates. Therefore, any detection should be analyzed in the context of additional information and system behavior to ascertain malicious intent. This monitoring strategy is aligned with understanding tactics and techniques associated with application shimming and persistence methods described in the MITRE ATT&CK framework, without explicitly triggering false alarms on legitimate software operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting the execution of Run Once task as configured in the registry.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of Run Once task as configured in the registry, you should: Monitor Windows process creation logs for any occurrences where the process image path ends with '\\runonce.exe' and its description is 'Run Once Wrapper'. Additionally, pay attention to command lines containing '/AlternateShellStartup' or ending with '/r'. These observations should be considered together to reliably identify the activity. It's essential to note that this detection mechanism is rated with a low level of confidence due to the potential for unknown false positives, which necessitates further investigation whenever such activity is flagged.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\runonce.exe'\n        - Description: 'Run Once Wrapper'\n    selection_cli:\n        - CommandLine|contains: '/AlternateShellStartup'\n        - CommandLine|endswith: '/r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\runonce.exe'\n        - Description: 'Run Once Wrapper'\n    selection_cli:\n        - CommandLine|contains: '/AlternateShellStartup'\n        - CommandLine|endswith: '/r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "the execution of Run Once task as configured in the registry",
      "answer": "In order to detect the execution of Run Once task as configured in the registry, you should: Monitor Windows process creation logs for any occurrences where the process image path ends with '\\runonce.exe' and its description is 'Run Once Wrapper'. Additionally, pay attention to command lines containing '/AlternateShellStartup' or ending with '/r'. These observations should be considered together to reliably identify the activity. It's essential to note that this detection mechanism is rated with a low level of confidence due to the potential for unknown false positives, which necessitates further investigation whenever such activity is flagged."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious calls of DLLs in rundll32.dll exports by ordinal.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious calls of DLLs in rundll32.dll exports by ordinal, you should monitor process creation events on Windows systems for any invocation of rundll32.exe, specifically looking for the executable file name to either end with '\\rundll32.exe' or the OriginalFileName to be 'RUNDLL32.EXE'. Additionally, it's critical to scrutinize the command lines being executed for patterns that include a comma followed immediately by a '#', a space followed by a '#', or file extensions '.dll #' and '.ocx #' without a preceding comma (as Sysmon logs may omit commas). These patterns are indicative of DLLs being called by their ordinal number, which is a method often used in obfuscation and evasion techniques by malicious actors.\n\nHowever, to reduce false positives and not inadvertently flag legitimate system or development processes that perform similar actions, you must exclude any process creation events where the command line includes 'EDGEHTML.dll' along with '#141', or where the parent process image path contains directories related to Microsoft's build tools ('Msbuild\\Current\\Bin\\', '\\VC\\Tools\\MSVC\\', and '\\Tracker.exe') and the command line implicates the use of 'FileTracker32.dll' or 'FileTracker64.dll' with an ordinal reference. This filtering approach acknowledges that while certain usages of rundll32.exe are benign and necessary for legitimate software development and operation, the specified patterns of command line arguments are generally indicative of malicious activity.\n\nTo accurately implement these detection mechanisms, it's acknowledged that false positives can occur, notably in environments where scripts and administrative tools make legitimate use of these command line patterns, or where Windows control panel elements are involved. Nevertheless, given the potential severity of an attack leveraging rundll32.exe in this manner, the detection level is set to high, emphasizing the importance of monitoring for these specific indicators of compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ',#'\n            - ', #'\n            - '.dll #'  # Sysmon removes , in its log\n            - '.ocx #'  # HermeticWizard\n    filter_edge:\n        CommandLine|contains|all:\n            - 'EDGEHTML.dll'\n            - '#141'\n    filter_vsbuild_dll:\n        ParentImage|contains:\n            - '\\Msbuild\\Current\\Bin\\'\n            - '\\VC\\Tools\\MSVC\\'\n            - '\\Tracker.exe'\n        CommandLine|contains:\n            - '\\FileTracker32.dll,#1'\n            - '\\FileTracker32.dll\",#1'\n            - '\\FileTracker64.dll,#1'\n            - '\\FileTracker64.dll\",#1'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\n    - Windows control panel elements have been identified as source (mmc)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ',#'\n            - ', #'\n            - '.dll #'  # Sysmon removes , in its log\n            - '.ocx #'  # HermeticWizard\n    filter_edge:\n        CommandLine|contains|all:\n            - 'EDGEHTML.dll'\n            - '#141'\n    filter_vsbuild_dll:\n        ParentImage|contains:\n            - '\\Msbuild\\Current\\Bin\\'\n            - '\\VC\\Tools\\MSVC\\'\n            - '\\Tracker.exe'\n        CommandLine|contains:\n            - '\\FileTracker32.dll,#1'\n            - '\\FileTracker32.dll\",#1'\n            - '\\FileTracker64.dll,#1'\n            - '\\FileTracker64.dll\",#1'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\n    - Windows control panel elements have been identified as source (mmc)\nlevel: high\n",
      "question": "suspicious calls of DLLs in rundll32.dll exports by ordinal",
      "answer": "In order to detect suspicious calls of DLLs in rundll32.dll exports by ordinal, you should monitor process creation events on Windows systems for any invocation of rundll32.exe, specifically looking for the executable file name to either end with '\\rundll32.exe' or the OriginalFileName to be 'RUNDLL32.EXE'. Additionally, it's critical to scrutinize the command lines being executed for patterns that include a comma followed immediately by a '#', a space followed by a '#', or file extensions '.dll #' and '.ocx #' without a preceding comma (as Sysmon logs may omit commas). These patterns are indicative of DLLs being called by their ordinal number, which is a method often used in obfuscation and evasion techniques by malicious actors.\n\nHowever, to reduce false positives and not inadvertently flag legitimate system or development processes that perform similar actions, you must exclude any process creation events where the command line includes 'EDGEHTML.dll' along with '#141', or where the parent process image path contains directories related to Microsoft's build tools ('Msbuild\\Current\\Bin\\', '\\VC\\Tools\\MSVC\\', and '\\Tracker.exe') and the command line implicates the use of 'FileTracker32.dll' or 'FileTracker64.dll' with an ordinal reference. This filtering approach acknowledges that while certain usages of rundll32.exe are benign and necessary for legitimate software development and operation, the specified patterns of command line arguments are generally indicative of malicious activity.\n\nTo accurately implement these detection mechanisms, it's acknowledged that false positives can occur, notably in environments where scripts and administrative tools make legitimate use of these command line patterns, or where Windows control panel elements are involved. Nevertheless, given the potential severity of an attack leveraging rundll32.exe in this manner, the detection level is set to high, emphasizing the importance of monitoring for these specific indicators of compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting commands that temporarily turn off Volume Snapshots.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect commands that temporarily turn off Volume Snapshots, you should: Focus on monitoring process creation logs within Windows systems. Specifically, look for command line executions that contain all the following elements: the string 'reg', followed closely by ' add ', as well as the specific registry path '\\Services\\VSS\\Diag', and finally, '/d Disabled'. This specific combination of strings in a command line indicates an attempt to modify the Windows Registry in a way that disables the Volume Snapshot Service (VSS), a feature critical for backup and restore operations. It\u2019s essential to consider that, while such actions might sometimes be part of legitimate administration work, they often signify malicious efforts to hinder recovery from ransomware or other harmful activities, thereby classifying this behavior under a high level of alertness.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'reg'\n            - ' add '\n            - '\\Services\\VSS\\Diag'\n            - '/d Disabled'\n    condition: selection\nfalsepositives:\n    - Legitimate administration\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'reg'\n            - ' add '\n            - '\\Services\\VSS\\Diag'\n            - '/d Disabled'\n    condition: selection\nfalsepositives:\n    - Legitimate administration\nlevel: high\n",
      "question": "commands that temporarily turn off Volume Snapshots",
      "answer": "In order to detect commands that temporarily turn off Volume Snapshots, you should: Focus on monitoring process creation logs within Windows systems. Specifically, look for command line executions that contain all the following elements: the string 'reg', followed closely by ' add ', as well as the specific registry path '\\Services\\VSS\\Diag', and finally, '/d Disabled'. This specific combination of strings in a command line indicates an attempt to modify the Windows Registry in a way that disables the Volume Snapshot Service (VSS), a feature critical for backup and restore operations. It\u2019s essential to consider that, while such actions might sometimes be part of legitimate administration work, they often signify malicious efforts to hinder recovery from ransomware or other harmful activities, thereby classifying this behavior under a high level of alertness."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting presence of default Cobalt Strike certificate in the HTTPS traffic.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the presence of default Cobalt Strike certificate in the HTTPS traffic, you should: Monitor HTTPS traffic for specific certificate characteristics using Zeek, focusing on the X509 service logs. Pay attention to certificates with the serial number \"8BB00EE\". This indicator can help identify potentially malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing encrypted command and control channels. You will need to examine fields such as the DNS names included in the Subject Alternative Name (SAN) field, the certificate's subject, and issuer details to provide more context around the detected certificate. Be aware that there may be instances where this detection could trigger on non-malicious activity, although such false positives are currently unknown. This activity is characterized by a high level of confidence due to its specificity. By focusing on these details and logs from Zeek's X509 service, defenders can more effectively identify and respond to potential Cobalt Strike command and control communication within their networks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: x509\ndetection:\n    selection:\n        certificate.serial: 8BB00EE\n    condition: selection\nfields:\n    - san.dns\n    - certificate.subject\n    - certificate.issuer\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: x509\ndetection:\n    selection:\n        certificate.serial: 8BB00EE\n    condition: selection\nfields:\n    - san.dns\n    - certificate.subject\n    - certificate.issuer\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "presence of default Cobalt Strike certificate in the HTTPS traffic",
      "answer": "In order to detect the presence of default Cobalt Strike certificate in the HTTPS traffic, you should: Monitor HTTPS traffic for specific certificate characteristics using Zeek, focusing on the X509 service logs. Pay attention to certificates with the serial number \"8BB00EE\". This indicator can help identify potentially malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing encrypted command and control channels. You will need to examine fields such as the DNS names included in the Subject Alternative Name (SAN) field, the certificate's subject, and issuer details to provide more context around the detected certificate. Be aware that there may be instances where this detection could trigger on non-malicious activity, although such false positives are currently unknown. This activity is characterized by a high level of confidence due to its specificity. By focusing on these details and logs from Zeek's X509 service, defenders can more effectively identify and respond to potential Cobalt Strike command and control communication within their networks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against, you should: monitor the process creation logs on Windows systems for instances where the 'hashcat.exe' application is executed. Specifically, look for executions of 'hashcat.exe' that include the command line flags '-a ', '-m 1000 ', and '-r ', which are indicative of an attack that utilizes Hashcat to crack Windows account passwords by leveraging the SAM file and a list of passwords. Be aware that there may be false positives, as other tools might use similar command line arguments. The severity of this detection is considered high, underscoring the importance of vigilance against such activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\hashcat.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-a '\n            - '-m 1000 '\n            - '-r '\n    condition: 1 of selection_*\nfalsepositives:\n    - Tools that use similar command line flags and values\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\hashcat.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-a '\n            - '-m 1000 '\n            - '-r '\n    condition: 1 of selection_*\nfalsepositives:\n    - Tools that use similar command line flags and values\nlevel: high\n",
      "question": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against",
      "answer": "In order to execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against, you should: monitor the process creation logs on Windows systems for instances where the 'hashcat.exe' application is executed. Specifically, look for executions of 'hashcat.exe' that include the command line flags '-a ', '-m 1000 ', and '-r ', which are indicative of an attack that utilizes Hashcat to crack Windows account passwords by leveraging the SAM file and a list of passwords. Be aware that there may be false positives, as other tools might use similar command line arguments. The severity of this detection is considered high, underscoring the importance of vigilance against such activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system, you should monitor for specific command-line activity on Windows systems related to process creation. The focus is on the observation of commands that are typically used to iterate through lists or collections, specifically commands that start with 'for ' or 'foreach '. Additionally, attention should be paid to the usage of tools like 'nslookup' and 'ping', which are commonly employed for resolving IP addresses and testing the reachability of systems on a network, respectively. This detection scheme is designed to trigger when both the looping constructs and the network utilities mentioned are observed in combination, indicating a potential reconnaissance activity aimed at enumerating network peers. It's important to note that there may be legitimate scripts that use these commands for valid administrative tasks, so a medium level of caution is advised when interpreting detection alerts to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_loop:\n        CommandLine|contains:\n            - 'for '\n            - 'foreach '\n    selection_tools:\n        CommandLine|contains:\n            - 'nslookup'\n            - 'ping'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_loop:\n        CommandLine|contains:\n            - 'for '\n            - 'foreach '\n    selection_tools:\n        CommandLine|contains:\n            - 'nslookup'\n            - 'ping'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate script\nlevel: medium\n",
      "question": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system",
      "answer": "In order to detect adversaries attempting to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system, you should monitor for specific command-line activity on Windows systems related to process creation. The focus is on the observation of commands that are typically used to iterate through lists or collections, specifically commands that start with 'for ' or 'foreach '. Additionally, attention should be paid to the usage of tools like 'nslookup' and 'ping', which are commonly employed for resolving IP addresses and testing the reachability of systems on a network, respectively. This detection scheme is designed to trigger when both the looping constructs and the network utilities mentioned are observed in combination, indicating a potential reconnaissance activity aimed at enumerating network peers. It's important to note that there may be legitimate scripts that use these commands for valid administrative tasks, so a medium level of caution is advised when interpreting detection alerts to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting blocking of process creations originating from PSExec and WMI commands.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect blocking of process creations originating from PSExec and WMI commands, you should monitor Windows Defender events. Specifically, capture logs from Windows Defender (WinDefend) with the requirement of having \"Block process creations originating from PSExec and WMI commands\" from Attack Surface Reduction configured. Look for Event ID 1121, which indicates an execution attempt blocked by this rule, and focus on processes ending with '\\wmiprvse.exe' or '\\psexesvc.exe'. These entries are crucial as they signify blocked attempts to create processes via Windows Management Instrumentation (WMI) and PSExec, respectively. The detection of such events is of high importance due to the potential misuse of these tools in cyber attacks, involving tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: windefend\n    definition: 'Requirements:Enabled Block process creations originating from PSExec and WMI commands from Attack Surface Reduction (GUID: d1e49aac-8f56-4280-b9ba-993a6d77406c)'\ndetection:\n    selection:\n        EventID: 1121\n        ProcessName|endswith:\n            - '\\wmiprvse.exe'\n            - '\\psexesvc.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: windefend\n    definition: 'Requirements:Enabled Block process creations originating from PSExec and WMI commands from Attack Surface Reduction (GUID: d1e49aac-8f56-4280-b9ba-993a6d77406c)'\ndetection:\n    selection:\n        EventID: 1121\n        ProcessName|endswith:\n            - '\\wmiprvse.exe'\n            - '\\psexesvc.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "blocking of process creations originating from PSExec and WMI commands",
      "answer": "In order to detect blocking of process creations originating from PSExec and WMI commands, you should monitor Windows Defender events. Specifically, capture logs from Windows Defender (WinDefend) with the requirement of having \"Block process creations originating from PSExec and WMI commands\" from Attack Surface Reduction configured. Look for Event ID 1121, which indicates an execution attempt blocked by this rule, and focus on processes ending with '\\wmiprvse.exe' or '\\psexesvc.exe'. These entries are crucial as they signify blocked attempts to create processes via Windows Management Instrumentation (WMI) and PSExec, respectively. The detection of such events is of high importance due to the potential misuse of these tools in cyber attacks, involving tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.\nScreen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who attempt to take screen captures of the desktop to gather information over the course of an operation, where screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations, you should focus on monitoring PowerShell script activity within the Windows environment. Specifically, ensure that Script Block Logging is enabled, as it plays a crucial role in identifying potentially malicious activities. Look for PowerShell scripts that include the method '.CopyFromScreen' in their text. This method is a tell-tale sign that a script is attempting to capture the screen, which is often associated with adversarial behavior aiming to collect sensitive information post system compromise. Be aware that there are scenarios where this detection might flag benign activities, although such cases are currently unknown, indicating the rule's relevance and specificity towards malicious conduct. This detection strategy is especially critical, given its medium-level prioritization, in the broader context of defending against information gathering tactics and techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: '.CopyFromScreen'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: '.CopyFromScreen'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.\nScreen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations\n",
      "answer": "In order to detect adversaries who attempt to take screen captures of the desktop to gather information over the course of an operation, where screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations, you should focus on monitoring PowerShell script activity within the Windows environment. Specifically, ensure that Script Block Logging is enabled, as it plays a crucial role in identifying potentially malicious activities. Look for PowerShell scripts that include the method '.CopyFromScreen' in their text. This method is a tell-tale sign that a script is attempting to capture the screen, which is often associated with adversarial behavior aiming to collect sensitive information post system compromise. Be aware that there are scenarios where this detection might flag benign activities, although such cases are currently unknown, indicating the rule's relevance and specificity towards malicious conduct. This detection strategy is especially critical, given its medium-level prioritization, in the broader context of defending against information gathering tactics and techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious command line reg.exe tool adding key to RUN key in Registry.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious command line reg.exe tool adding key to RUN key in Registry, you should monitor Windows process creation logs for instances when the command line includes the 'reg' command specifically adding entries to the 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' registry path. This is often indicative of an attempt to achieve persistence by ensuring a malicious program runs each time the system starts. It is important to be aware that there are legitimate reasons for software or administrators to add keys to this registry location, such as during software installation or for legitimate administrative tasks. Moreover, popular applications like Discord might also perform similar actions, which are considered benign. The detection should be viewed with medium severity, balancing vigilance with awareness of potential legitimate use cases.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'reg'\n            - ' ADD '\n            - 'Software\\Microsoft\\Windows\\CurrentVersion\\Run'\n    condition: selection\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reasons.\n    - Legitimate administrator sets up autorun keys for legitimate reasons.\n    - Discord\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'reg'\n            - ' ADD '\n            - 'Software\\Microsoft\\Windows\\CurrentVersion\\Run'\n    condition: selection\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reasons.\n    - Legitimate administrator sets up autorun keys for legitimate reasons.\n    - Discord\nlevel: medium\n",
      "question": "suspicious command line reg.exe tool adding key to RUN key in Registry",
      "answer": "In order to detect suspicious command line reg.exe tool adding key to RUN key in Registry, you should monitor Windows process creation logs for instances when the command line includes the 'reg' command specifically adding entries to the 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' registry path. This is often indicative of an attempt to achieve persistence by ensuring a malicious program runs each time the system starts. It is important to be aware that there are legitimate reasons for software or administrators to add keys to this registry location, such as during software installation or for legitimate administrative tasks. Moreover, popular applications like Discord might also perform similar actions, which are considered benign. The detection should be viewed with medium severity, balancing vigilance with awareness of potential legitimate use cases."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges, you should monitor the loading of drivers on Windows systems, particularly for specific hash values that identify the compromised Lenovo driver. Ensure that both Sysmon logs and other hash monitoring systems are checked for the presence of any of the following hashes: SHA256 hash of 'F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE', SHA1 hash of 'B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F', or an MD5 hash of 'B941C8364308990EE4CC6EADF7214E0F'. These specific hashes indicate the loading of a particular driver that has been identified as vulnerable and potentially being exploited for privilege escalation purposes. Note that while detecting these hashes is critical for security, it's possible to encounter false positives in scenarios where legitimate driver loads occur (particularly with drivers that haven't been updated). Given the high risk associated with this vulnerable driver, the detection of any of these hashes should be treated with a high priority level to mitigate potential security threats effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'SHA256=F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE'\n            - 'SHA1=B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F'\n            - 'MD5=B941C8364308990EE4CC6EADF7214E0F'\n    selection_hash:\n        - sha256: 'f05b1ee9e2f6ab704b8919d5071becbce6f9d0f9d0ba32a460c41d5272134abe'\n        - sha1: 'b89a8eef5aeae806af5ba212a8068845cafdab6f'\n        - md5: 'b941c8364308990ee4cc6eadf7214e0f'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate driver loads (old driver that didn't receive an update)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'SHA256=F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE'\n            - 'SHA1=B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F'\n            - 'MD5=B941C8364308990EE4CC6EADF7214E0F'\n    selection_hash:\n        - sha256: 'f05b1ee9e2f6ab704b8919d5071becbce6f9d0f9d0ba32a460c41d5272134abe'\n        - sha1: 'b89a8eef5aeae806af5ba212a8068845cafdab6f'\n        - md5: 'b941c8364308990ee4cc6eadf7214e0f'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate driver loads (old driver that didn't receive an update)\nlevel: high\n",
      "question": "load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges",
      "answer": "In order to detect the load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges, you should monitor the loading of drivers on Windows systems, particularly for specific hash values that identify the compromised Lenovo driver. Ensure that both Sysmon logs and other hash monitoring systems are checked for the presence of any of the following hashes: SHA256 hash of 'F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE', SHA1 hash of 'B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F', or an MD5 hash of 'B941C8364308990EE4CC6EADF7214E0F'. These specific hashes indicate the loading of a particular driver that has been identified as vulnerable and potentially being exploited for privilege escalation purposes. Note that while detecting these hashes is critical for security, it's possible to encounter false positives in scenarios where legitimate driver loads occur (particularly with drivers that haven't been updated). Given the high risk associated with this vulnerable driver, the detection of any of these hashes should be treated with a high priority level to mitigate potential security threats effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of DeviceCredentialDeployment to hide a process from view.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of DeviceCredentialDeployment to hide a process from view, you should: Monitor Windows process creation events for any instance where the process image name ends with '\\DeviceCredentialDeployment.exe'. This particular executable is critical to observe as its execution could indicate attempts to obscure a process from visibility, a tactic often employed in malicious operations. It is fairly uncommon for this process to be triggered in a benign context, hence alerts generated from this detection should be treated with medium priority for investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\DeviceCredentialDeployment.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\DeviceCredentialDeployment.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
      "question": "execution of DeviceCredentialDeployment to hide a process from view",
      "answer": "In order to detect the execution of DeviceCredentialDeployment to hide a process from view, you should: Monitor Windows process creation events for any instance where the process image name ends with '\\DeviceCredentialDeployment.exe'. This particular executable is critical to observe as its execution could indicate attempts to obscure a process from visibility, a tactic often employed in malicious operations. It is fairly uncommon for this process to be triggered in a benign context, hence alerts generated from this detection should be treated with medium priority for investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor Windows image load events for instances where the Microsoft Defender processes, specifically 'MpCmdRun.exe' or 'NisSrv.exe', attempt to load the 'mpclient.dll' dynamic link library. The focus should be on identifying when these DLLs are loaded from locations outside the standard directories typically used by Windows Defender, such as 'C:\\Program Files\\Windows Defender\\', 'C:\\Program Files (x86)\\Windows Defender\\', or 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'. The appearance of such activity indicates a high probability of an attempt at DLL sideloading - a technique often used by adversaries to execute malicious code by exploiting the legitimate processes of trusted applications. It's crucial to note that false positives for this detection method are very unlikely, underscoring the importance of this monitoring in identifying potential security breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith:\n            - '\\MpCmdRun.exe'\n            - '\\NisSrv.exe'\n        ImageLoaded|endswith: '\\mpclient.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Windows Defender\\'\n            - 'C:\\Program Files (x86)\\Windows Defender\\'\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n    condition: selection and not filter\nfalsepositives:\n    - Very unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith:\n            - '\\MpCmdRun.exe'\n            - '\\NisSrv.exe'\n        ImageLoaded|endswith: '\\mpclient.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Windows Defender\\'\n            - 'C:\\Program Files (x86)\\Windows Defender\\'\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n    condition: selection and not filter\nfalsepositives:\n    - Very unlikely\nlevel: high\n",
      "question": "loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor Windows image load events for instances where the Microsoft Defender processes, specifically 'MpCmdRun.exe' or 'NisSrv.exe', attempt to load the 'mpclient.dll' dynamic link library. The focus should be on identifying when these DLLs are loaded from locations outside the standard directories typically used by Windows Defender, such as 'C:\\Program Files\\Windows Defender\\', 'C:\\Program Files (x86)\\Windows Defender\\', or 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'. The appearance of such activity indicates a high probability of an attempt at DLL sideloading - a technique often used by adversaries to execute malicious code by exploiting the legitimate processes of trusted applications. It's crucial to note that false positives for this detection method are very unlikely, underscoring the importance of this monitoring in identifying potential security breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic, you should: monitor Linux systems for the creation of processes that are invoking utilities related to IPTables and UFW. Specifically, look for processes ending with '/iptables', '/xtables-legacy-multi', '/iptables-legacy-multi', '/ip6tables', or '/ip6tables-legacy-multi'. These utilities are significant because they are directly associated with managing Linux firewalls. Focus on commands that contain parameters '-F', '-Z', '-X', which are used to flush all rules, set all chain's packet and byte counters to zero, and delete a chain, respectively. Additionally, monitor for UFW related commands that include 'ufw-logging-deny', 'ufw-logging-allow', 'ufw6-logging-deny', and 'ufw6-logging-allow', which are utilized to configure logging rules in the Uncomplicated Firewall (UFW). Network administrators may perform such activities as part of legitimate management tasks, thus they are considered potential false positives. The detection level is set to medium due to the potential impact and the likelihood of occurrence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/iptables'\n            - '/xtables-legacy-multi'\n            - '/iptables-legacy-multi'\n            - '/ip6tables'\n            - '/ip6tables-legacy-multi'\n    selection_params:\n        CommandLine|contains:\n            - '-F'\n            - '-Z'\n            - '-X'\n    selection_ufw:\n        CommandLine|contains:\n            - 'ufw-logging-deny'\n            - 'ufw-logging-allow'\n            - 'ufw6-logging-deny'\n            - 'ufw6-logging-allow'\n            #- 'ufw-reject-output'\n            #- 'ufw-track-inputt'\n    condition: all of selection_*\nfalsepositives:\n    - Network administrators\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/iptables'\n            - '/xtables-legacy-multi'\n            - '/iptables-legacy-multi'\n            - '/ip6tables'\n            - '/ip6tables-legacy-multi'\n    selection_params:\n        CommandLine|contains:\n            - '-F'\n            - '-Z'\n            - '-X'\n    selection_ufw:\n        CommandLine|contains:\n            - 'ufw-logging-deny'\n            - 'ufw-logging-allow'\n            - 'ufw6-logging-deny'\n            - 'ufw6-logging-allow'\n            #- 'ufw-reject-output'\n            #- 'ufw-track-inputt'\n    condition: all of selection_*\nfalsepositives:\n    - Network administrators\nlevel: medium\n",
      "question": "Detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic",
      "answer": "In order to detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic, you should: monitor Linux systems for the creation of processes that are invoking utilities related to IPTables and UFW. Specifically, look for processes ending with '/iptables', '/xtables-legacy-multi', '/iptables-legacy-multi', '/ip6tables', or '/ip6tables-legacy-multi'. These utilities are significant because they are directly associated with managing Linux firewalls. Focus on commands that contain parameters '-F', '-Z', '-X', which are used to flush all rules, set all chain's packet and byte counters to zero, and delete a chain, respectively. Additionally, monitor for UFW related commands that include 'ufw-logging-deny', 'ufw-logging-allow', 'ufw6-logging-deny', and 'ufw6-logging-allow', which are utilized to configure logging rules in the Uncomplicated Firewall (UFW). Network administrators may perform such activities as part of legitimate management tasks, thus they are considered potential false positives. The detection level is set to medium due to the potential impact and the likelihood of occurrence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting ntds.dit retrieving (only computer accounts) using synchronisation with legit domain controller using Netlogon Remote Protocol.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts at retrieving ntds.dit (only computer accounts) by synchronizing with a legitimate domain controller using Netlogon Remote Protocol, you should: Monitor Windows security logs for specific activities that could indicate such behavior. Look for events with ID 4624 on domain controller names which could signify successful logons. Additionally, pay attention to IP addresses associated with domain controllers as another indicator of potential synchronization attempts. Furthermore, events with ID 5145 on domain controller names, especially those involving the '\\IPC$' share name and targeting 'netlogon', are critical to examine. This includes checking for usage of suspicious logon IDs. The process involves capturing the target logon ID when there's a successful logon event that doesn't match an IP address from known domain controllers (indicating an external or unusual access attempt) and then checking if this logon ID is later involved in an event that accesses the netlogon share. It's important to be aware that there could be legitimate reasons for these activities, such as an administrator adding a new domain controller to an existing domain, which would constitute a false positive. The logs should have medium level scrutiny, and such monitoring is currently provided at an experimental status. The efforts align with identifying tactics and techniques focusing on unauthorized systems synchronization using methods like Netlogon Remote Protocol, thus aiding in the early detection of potential cybersecurity threats aimed at accessing sensitive computer account information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4624\n        ComputerName: '%DomainControllersNamesList%'\n    selection2:\n        IpAddress: '%DomainControllersIpsList%'\n    selection3:\n        EventID: 5145\n        ComputerName: '%DomainControllersNamesList%'\n        ShareName|contains: '\\IPC$'\n        SubjectLogonId: '%SuspiciousTargetLogonIdList%'\n        RelativeTargetName: 'netlogon'\n    condition: write TargetLogonId from selection1 (if not selection2) to list %SuspiciousTargetLogonIdList%; then if selection3 -> alert\nfalsepositives:\n    - Legitimate administrator adding new domain controller to already existing domain\nlevel: medium\nstatus: unsupported\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4624\n        ComputerName: '%DomainControllersNamesList%'\n    selection2:\n        IpAddress: '%DomainControllersIpsList%'\n    selection3:\n        EventID: 5145\n        ComputerName: '%DomainControllersNamesList%'\n        ShareName|contains: '\\IPC$'\n        SubjectLogonId: '%SuspiciousTargetLogonIdList%'\n        RelativeTargetName: 'netlogon'\n    condition: write TargetLogonId from selection1 (if not selection2) to list %SuspiciousTargetLogonIdList%; then if selection3 -> alert\nfalsepositives:\n    - Legitimate administrator adding new domain controller to already existing domain\nlevel: medium\nstatus: unsupported\n",
      "question": "ntds.dit retrieving (only computer accounts) using synchronisation with legit domain controller using Netlogon Remote Protocol",
      "answer": "In order to detect attempts at retrieving ntds.dit (only computer accounts) by synchronizing with a legitimate domain controller using Netlogon Remote Protocol, you should: Monitor Windows security logs for specific activities that could indicate such behavior. Look for events with ID 4624 on domain controller names which could signify successful logons. Additionally, pay attention to IP addresses associated with domain controllers as another indicator of potential synchronization attempts. Furthermore, events with ID 5145 on domain controller names, especially those involving the '\\IPC$' share name and targeting 'netlogon', are critical to examine. This includes checking for usage of suspicious logon IDs. The process involves capturing the target logon ID when there's a successful logon event that doesn't match an IP address from known domain controllers (indicating an external or unusual access attempt) and then checking if this logon ID is later involved in an event that accesses the netlogon share. It's important to be aware that there could be legitimate reasons for these activities, such as an administrator adding a new domain controller to an existing domain, which would constitute a false positive. The logs should have medium level scrutiny, and such monitoring is currently provided at an experimental status. The efforts align with identifying tactics and techniques focusing on unauthorized systems synchronization using methods like Netlogon Remote Protocol, thus aiding in the early detection of potential cybersecurity threats aimed at accessing sensitive computer account information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect anyone attempting a backup for the DPAPI Master Key, which is an event generated at the source and not the Domain Controller, you should monitor security logs from Windows systems for the event ID 4692. This specific event ID is triggered when there's an attempt to backup the Data Protection API (DPAPI) Master Key. Pay particular attention to fields such as ComputerName, SubjectDomainName, and SubjectUserName within these logs to help identify the source and context of the attempt. It's worth noting that false positives may occur if a computer is part of a domain because DPAPI employs a backup mechanism to allow unprotection of the data, which can trigger this event. The risk level associated with this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4692\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\nfalsepositives:\n    - If a computer is a member of a domain, DPAPI has a backup mechanism to allow unprotection of the data. Which will trigger this event.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4692\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\nfalsepositives:\n    - If a computer is a member of a domain, DPAPI has a backup mechanism to allow unprotection of the data. Which will trigger this event.\nlevel: medium\n",
      "question": "anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller.",
      "answer": "In order to detect anyone attempting a backup for the DPAPI Master Key, which is an event generated at the source and not the Domain Controller, you should monitor security logs from Windows systems for the event ID 4692. This specific event ID is triggered when there's an attempt to backup the Data Protection API (DPAPI) Master Key. Pay particular attention to fields such as ComputerName, SubjectDomainName, and SubjectUserName within these logs to help identify the source and context of the attempt. It's worth noting that false positives may occur if a computer is part of a domain because DPAPI employs a backup mechanism to allow unprotection of the data, which can trigger this event. The risk level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting FlowCloud malware from threat group TA410..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect FlowCloud malware from threat group TA410, you should monitor the Windows Registry for interactions with very specific keys. These interactions involve looking for any activities targeting the registry keys: 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}', 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}', and 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'. In addition to these specific keys, attention should also be given to any registry operations involving keys that begin with 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'. This approach is crucial in the effort to intercept and identify actions that could be related to the FlowCloud malware's operational footprint within an infected system. Given the critical nature of this detection, vigilance is advised, although one should be aware of the possibility of encountering unknown false positives during monitoring.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        - TargetObject:\n            - 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}'\n            - 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}'\n            - 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'\n        - TargetObject|startswith: 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        - TargetObject:\n            - 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}'\n            - 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}'\n            - 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'\n        - TargetObject|startswith: 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "FlowCloud malware from threat group TA410.",
      "answer": "In order to detect FlowCloud malware from threat group TA410, you should monitor the Windows Registry for interactions with very specific keys. These interactions involve looking for any activities targeting the registry keys: 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}', 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}', and 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'. In addition to these specific keys, attention should also be given to any registry operations involving keys that begin with 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'. This approach is crucial in the effort to intercept and identify actions that could be related to the FlowCloud malware's operational footprint within an infected system. Given the critical nature of this detection, vigilance is advised, although one should be aware of the possibility of encountering unknown false positives during monitoring."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who might be stopping services or processes as part of an attack aiming for Data Destruction or Data Encryption for Impact particularly targeting data stores of critical services such as Exchange and SQL Server, you should monitor Windows process creation logs for the execution of 'taskkill.exe', a legitimate Windows utility that can be misused in such contexts. Specifically, look for occurrences where the 'Image' path ends with '\\taskkill.exe' or when the 'OriginalFileName' is exactly 'taskkill.exe'. Additionally, ensure that the 'CommandLine' arguments include both '/f' (forcing the termination of processes without warning) and '/im' (specifying the image name of the process to be terminated), used together in the command line. This pattern of usage can be indicative of malicious behavior aimed at stopping critical services or processes. However, it's important to note that there might be legitimate instances where software uses 'taskkill.exe' in a similar manner during installations or updates, which could lead to false positives. The detection is categorized under a low level of alert due to the potential for such expected benign activities triggering alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\taskkill.exe'\n        - OriginalFileName: 'taskkill.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' /f'\n            - ' /im '\n    condition: all of selection*\nfalsepositives:\n    - Expected FP with some processes using this techniques to terminate one of their processes during installations and updates\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\taskkill.exe'\n        - OriginalFileName: 'taskkill.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' /f'\n            - ' /im '\n    condition: all of selection*\nfalsepositives:\n    - Expected FP with some processes using this techniques to terminate one of their processes during installations and updates\nlevel: low\n",
      "question": "Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.",
      "answer": "In order to detect adversaries who might be stopping services or processes as part of an attack aiming for Data Destruction or Data Encryption for Impact particularly targeting data stores of critical services such as Exchange and SQL Server, you should monitor Windows process creation logs for the execution of 'taskkill.exe', a legitimate Windows utility that can be misused in such contexts. Specifically, look for occurrences where the 'Image' path ends with '\\taskkill.exe' or when the 'OriginalFileName' is exactly 'taskkill.exe'. Additionally, ensure that the 'CommandLine' arguments include both '/f' (forcing the termination of processes without warning) and '/im' (specifying the image name of the process to be terminated), used together in the command line. This pattern of usage can be indicative of malicious behavior aimed at stopping critical services or processes. However, it's important to note that there might be legitimate instances where software uses 'taskkill.exe' in a similar manner during installations or updates, which could lead to false positives. The detection is categorized under a low level of alert due to the potential for such expected benign activities triggering alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of Ilasm.exe to compile c# code into dll or exe..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Ilasm.exe to compile C# code into dll or exe, you should: Monitor process creation logs on Windows systems for instances where the process image name ends with '\\ilasm.exe' or the original file name is identified as 'ilasm.exe'. This monitoring helps in identifying potential misuse of the Ilasm.exe utility, which is a legitimate tool used for compiling .NET Intermediate Language (IL) code into executable files or DLLs, but can be exploited for malicious purposes such as generating malware on an infected system. Since this behavior might not always signify a security threat, it is marked with a medium level of concern, and unknown false positives are acknowledged, emphasizing the need for context and further investigation upon detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\ilasm.exe'\n        - OriginalFileName: 'ilasm.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\ilasm.exe'\n        - OriginalFileName: 'ilasm.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect use of Ilasm.exe to compile c# code into dll or exe.",
      "answer": "In order to detect the use of Ilasm.exe to compile C# code into dll or exe, you should: Monitor process creation logs on Windows systems for instances where the process image name ends with '\\ilasm.exe' or the original file name is identified as 'ilasm.exe'. This monitoring helps in identifying potential misuse of the Ilasm.exe utility, which is a legitimate tool used for compiling .NET Intermediate Language (IL) code into executable files or DLLs, but can be exploited for malicious purposes such as generating malware on an infected system. Since this behavior might not always signify a security threat, it is marked with a medium level of concern, and unknown false positives are acknowledged, emphasizing the need for context and further investigation upon detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name, you should: Focus on monitoring creation of processes in Windows environments. Look specifically for commands in the process creation logs that contain phrases indicative of actions such as 'copy procdump', 'move procdump', or manipulation of dump files, especially with patterns like copying or moving '.dmp' files, including specific references to '2.dmp', 'lsass', 'out.dmp', or actions involving 'lsass.exe_' as part of ProcDump's default naming convention for dump files (e.g., 'lsass.exe_220111_085234.dmp'). This detection strategy should be applied by analyzing if any one of these conditions is met during process execution. However, be aware that it is common to encounter false positives when ProcDump is simply being copied to a different directory without any file name changes. This activity is rated with a high level of importance due to potential implications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'copy procdump'\n            - 'move procdump'\n    selection_2:\n        CommandLine|contains|all:\n            - 'copy '\n            - '.dmp '\n        CommandLine|contains:\n            - '2.dmp'\n            - 'lsass'\n            - 'out.dmp'\n    selection_3:\n        CommandLine|contains:\n            - 'copy lsass.exe_'  # procdump default pattern e.g. lsass.exe_220111_085234.dmp\n            - 'move lsass.exe_'  # procdump default pattern e.g. lsass.exe_220111_085234.dmp\n    condition: 1 of selection_*\nfalsepositives:\n    - False positives are expected in cases in which ProcDump just gets copied to a different directory without any renaming\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'copy procdump'\n            - 'move procdump'\n    selection_2:\n        CommandLine|contains|all:\n            - 'copy '\n            - '.dmp '\n        CommandLine|contains:\n            - '2.dmp'\n            - 'lsass'\n            - 'out.dmp'\n    selection_3:\n        CommandLine|contains:\n            - 'copy lsass.exe_'  # procdump default pattern e.g. lsass.exe_220111_085234.dmp\n            - 'move lsass.exe_'  # procdump default pattern e.g. lsass.exe_220111_085234.dmp\n    condition: 1 of selection_*\nfalsepositives:\n    - False positives are expected in cases in which ProcDump just gets copied to a different directory without any renaming\nlevel: high\n",
      "question": "uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name",
      "answer": "In order to detect uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name, you should: Focus on monitoring creation of processes in Windows environments. Look specifically for commands in the process creation logs that contain phrases indicative of actions such as 'copy procdump', 'move procdump', or manipulation of dump files, especially with patterns like copying or moving '.dmp' files, including specific references to '2.dmp', 'lsass', 'out.dmp', or actions involving 'lsass.exe_' as part of ProcDump's default naming convention for dump files (e.g., 'lsass.exe_220111_085234.dmp'). This detection strategy should be applied by analyzing if any one of these conditions is met during process execution. However, be aware that it is common to encounter false positives when ProcDump is simply being copied to a different directory without any file name changes. This activity is rated with a high level of importance due to potential implications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious ways to use the \"DumpMinitool.exe\" binary.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious ways to use the \"DumpMinitool.exe\" binary, you should focus on creating monitoring strategies tailored for process creation within Windows environments. The essence of detection lies in identifying processes initiated that end with specific strings: 'DumpMinitool.exe', 'DumpMinitool.x86.exe', and 'DumpMinitool.arm64.exe', coupled with ensuring these processes also have the correct original filename attributes matching the same names. This helps in distinguishing legitimate uses of the tool from potentially suspicious ones.\n\nNotably, there's a need to exclude certain directories from raising alerts, specifically those paths containing '\\Microsoft Visual Studio\\' or '\\Extensions\\', as the usage within these contexts could be considered legitimate given their association with development environments.\n\nAdditional scrutiny is necessary for command-line arguments accompanying the execution of these binaries. If the command line contains '.txt', indicating an operation involving text files, or flags such as 'Full', 'Mini', or 'WithHeap', without the specific '--dumpType' flag, it could signify an unusual or potentially malicious use of the tool, hence warranting further investigation.\n\nDespite the high level of concern, be aware that there might be unknown scenarios that could trigger false positives. Therefore, while the precision of these conditions is aimed at high-risk detections, maintaining an understanding that not all flagged situations may ultimately prove malicious is crucial. This approach aids in pinpointing activities related to reconnaissance, credential dumping, and other strategies adversaries might employ to exploit the 'DumpMinitool.exe' binary for malicious endeavors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\DumpMinitool.exe'\n            - '\\DumpMinitool.x86.exe'\n            - '\\DumpMinitool.arm64.exe'\n        - OriginalFileName:\n            - 'DumpMinitool.exe'\n            - 'DumpMinitool.x86.exe'\n            - 'DumpMinitool.arm64.exe'\n    filter_folder:\n        Image|contains:\n            - '\\Microsoft Visual Studio\\'\n            - '\\Extensions\\'  # https://github.com/microsoft/vstest/blob/b2e2126f1aa7e5753cafe9515563c99ade6a59ce/src/package/nuspec/Microsoft.TestPlatform.Portable.nuspec#L159\n    susp_flags:\n        CommandLine|contains: '.txt'\n    cmd_has_flags:\n        CommandLine|contains:\n            - ' Full'\n            - ' Mini'\n            - ' WithHeap'\n    filter_cmd_misses_flags:\n        CommandLine|contains: '--dumpType'\n    condition: selection and ( ( not filter_folder ) or susp_flags or ( cmd_has_flags and not filter_cmd_misses_flags ) )\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\DumpMinitool.exe'\n            - '\\DumpMinitool.x86.exe'\n            - '\\DumpMinitool.arm64.exe'\n        - OriginalFileName:\n            - 'DumpMinitool.exe'\n            - 'DumpMinitool.x86.exe'\n            - 'DumpMinitool.arm64.exe'\n    filter_folder:\n        Image|contains:\n            - '\\Microsoft Visual Studio\\'\n            - '\\Extensions\\'  # https://github.com/microsoft/vstest/blob/b2e2126f1aa7e5753cafe9515563c99ade6a59ce/src/package/nuspec/Microsoft.TestPlatform.Portable.nuspec#L159\n    susp_flags:\n        CommandLine|contains: '.txt'\n    cmd_has_flags:\n        CommandLine|contains:\n            - ' Full'\n            - ' Mini'\n            - ' WithHeap'\n    filter_cmd_misses_flags:\n        CommandLine|contains: '--dumpType'\n    condition: selection and ( ( not filter_folder ) or susp_flags or ( cmd_has_flags and not filter_cmd_misses_flags ) )\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious ways to use the \"DumpMinitool.exe\" binary",
      "answer": "In order to detect suspicious ways to use the \"DumpMinitool.exe\" binary, you should focus on creating monitoring strategies tailored for process creation within Windows environments. The essence of detection lies in identifying processes initiated that end with specific strings: 'DumpMinitool.exe', 'DumpMinitool.x86.exe', and 'DumpMinitool.arm64.exe', coupled with ensuring these processes also have the correct original filename attributes matching the same names. This helps in distinguishing legitimate uses of the tool from potentially suspicious ones.\n\nNotably, there's a need to exclude certain directories from raising alerts, specifically those paths containing '\\Microsoft Visual Studio\\' or '\\Extensions\\', as the usage within these contexts could be considered legitimate given their association with development environments.\n\nAdditional scrutiny is necessary for command-line arguments accompanying the execution of these binaries. If the command line contains '.txt', indicating an operation involving text files, or flags such as 'Full', 'Mini', or 'WithHeap', without the specific '--dumpType' flag, it could signify an unusual or potentially malicious use of the tool, hence warranting further investigation.\n\nDespite the high level of concern, be aware that there might be unknown scenarios that could trigger false positives. Therefore, while the precision of these conditions is aimed at high-risk detections, maintaining an understanding that not all flagged situations may ultimately prove malicious is crucial. This approach aids in pinpointing activities related to reconnaissance, credential dumping, and other strategies adversaries might employ to exploit the 'DumpMinitool.exe' binary for malicious endeavors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting driver load events print service operational log that are a sign of successful exploitation attempts against print spooler vulnerability CVE-2021-1675.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect driver load events in print service operational log that are a sign of successful exploitation attempts against print spooler vulnerability CVE-2021-1675, you should monitor the Windows Print Service Operational logs for specific events. Focus on capturing event ID 316 which indicates a driver load event. You should pay attention to any instances where files such as 'UNIDRV.DLL', 'kernelbase.dll', or strings like '123', '1234', or 'mimispool' are mentioned in the log. These particular keywords are indicative of the exploitation attempts. It is crucial to verify the presence of the 'DriverAdded' field within these logs to ensure that a new driver was indeed added during the event captured. However, be aware that not all incidents involving these indicators are malicious, but due to the critical nature of the CVE-2021-1675 vulnerability, any detection should be taken very seriously and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: printservice-operational\ndetection:\n    selection:\n        EventID: 316\n    keywords:\n        - 'UNIDRV.DLL, kernelbase.dll, '\n        - ' 123 '\n        - ' 1234 '\n        - 'mimispool'\n    condition: selection and keywords\nfields:\n    - DriverAdded\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: printservice-operational\ndetection:\n    selection:\n        EventID: 316\n    keywords:\n        - 'UNIDRV.DLL, kernelbase.dll, '\n        - ' 123 '\n        - ' 1234 '\n        - 'mimispool'\n    condition: selection and keywords\nfields:\n    - DriverAdded\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "driver load events print service operational log that are a sign of successful exploitation attempts against print spooler vulnerability CVE-2021-1675",
      "answer": "In order to detect driver load events in print service operational log that are a sign of successful exploitation attempts against print spooler vulnerability CVE-2021-1675, you should monitor the Windows Print Service Operational logs for specific events. Focus on capturing event ID 316 which indicates a driver load event. You should pay attention to any instances where files such as 'UNIDRV.DLL', 'kernelbase.dll', or strings like '123', '1234', or 'mimispool' are mentioned in the log. These particular keywords are indicative of the exploitation attempts. It is crucial to verify the presence of the 'DriverAdded' field within these logs to ensure that a new driver was indeed added during the event captured. However, be aware that not all incidents involving these indicators are malicious, but due to the critical nature of the CVE-2021-1675 vulnerability, any detection should be taken very seriously and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\". Which could indicates possible persistence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\", which could indicate possible persistence, you should: Monitor Windows file event logs for any new \".dll\" files being created or added to the Notepad++ plugins directory. This detection focuses on identifying \".dll\" files because these can be utilized by adversaries to maintain persistence on a compromised system by executing malicious code. Important to note, any occurrences where the process responsible for creating or modifying these \".dll\" files is not 'gup.exe', the updater for Notepad++, should be scrutinized. The rule specifically excludes files added or modified by 'gup.exe', as well as during initial installation procedures or when sourcing from 'C:\\Users\\' within '\\AppData\\Local\\Temp\\' directory, aiming to reduce false positives such as legitimate updates or plugin expansions initiated by users. Detection of such activity is flagged with a medium level of concern due to the potential misuse of legitimate software to sustain unauthorized access or control within a targeted environment. Be aware, legitimate use of custom plugins or initial installation of Notepad++ may also trigger alerts under this criterion, which are considered potential false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\Notepad++\\plugins\\'\n        TargetFilename|endswith: '.dll'\n    filter_gup:\n        Image|endswith: '\\Notepad++\\updater\\gup.exe'\n    filter_install:\n        # This filter is for Sigma dataset you could remove it or change when using the rule in your own env\n        Image|startswith: 'C:\\Users\\'\n        Image|contains: '\\AppData\\Local\\Temp\\'\n        Image|endswith:\n            - '\\target.exe'\n            - 'Installer.x64.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Possible FPs during first installation of Notepad++\n    - Legitimate use of custom plugins by users in order to enhance notepad++ functionalities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\Notepad++\\plugins\\'\n        TargetFilename|endswith: '.dll'\n    filter_gup:\n        Image|endswith: '\\Notepad++\\updater\\gup.exe'\n    filter_install:\n        # This filter is for Sigma dataset you could remove it or change when using the rule in your own env\n        Image|startswith: 'C:\\Users\\'\n        Image|contains: '\\AppData\\Local\\Temp\\'\n        Image|endswith:\n            - '\\target.exe'\n            - 'Installer.x64.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Possible FPs during first installation of Notepad++\n    - Legitimate use of custom plugins by users in order to enhance notepad++ functionalities\nlevel: medium\n",
      "question": "creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\". Which could indicates possible persistence",
      "answer": "In order to detect creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\", which could indicate possible persistence, you should: Monitor Windows file event logs for any new \".dll\" files being created or added to the Notepad++ plugins directory. This detection focuses on identifying \".dll\" files because these can be utilized by adversaries to maintain persistence on a compromised system by executing malicious code. Important to note, any occurrences where the process responsible for creating or modifying these \".dll\" files is not 'gup.exe', the updater for Notepad++, should be scrutinized. The rule specifically excludes files added or modified by 'gup.exe', as well as during initial installation procedures or when sourcing from 'C:\\Users\\' within '\\AppData\\Local\\Temp\\' directory, aiming to reduce false positives such as legitimate updates or plugin expansions initiated by users. Detection of such activity is flagged with a medium level of concern due to the potential misuse of legitimate software to sustain unauthorized access or control within a targeted environment. Be aware, legitimate use of custom plugins or initial installation of Notepad++ may also trigger alerts under this criterion, which are considered potential false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting different hacktools used for relay attacks on Windows for privilege escalation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect different hacktools used for relay attacks on Windows for privilege escalation, you should:\n\nMonitor Windows process creation logs for instances of specific hacktools known to facilitate these types of attacks. Look for processes whose images include names hinting at popular attack tools such as 'PetitPotam', 'RottenPotato', 'HotPotato', 'JuicyPotato', among others, indicating that an attacker might be attempting to exploit Windows services for privilege escalation. Additionally, be vigilant for processes initiated with command lines that contain certain key phrases like 'Invoke-Tater', indicating the use of PowerShell scripts geared towards similar exploitation techniques, and variations of JuicyPotato attacks signified by certain command line patterns involving '.exe -t * -p ' and specific enumeration options used by JuicyPotatoNG.\n\nExclude from alerts the processes related to known legitimate software named HotPotatoes, which could be mistaken as part of the attack tools due to name similarities. This distinction is crucial to minimize false positives and ensure that detection efforts are focused on malicious activities.\n\nThe criticality of such detections is considered high due to the potential impact of these attacks, which include unauthorized privilege escalation and subsequent control over affected systems. To accurately detect and mitigate these threats, ensure that the detection logic covers a broad spectrum of known attack tool indicators while also allowing room for the exclusion of benign software sharing name characteristics with the tools in question.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        Image|contains:\n            - 'PetitPotam'\n            - 'RottenPotato'\n            - 'HotPotato'\n            - 'JuicyPotato'\n            - '\\just_dce_'\n            - 'Juicy Potato'\n            - '\\temp\\rot.exe'\n            - '\\Potato.exe'\n            - '\\SpoolSample.exe'\n            - '\\Responder.exe'\n            - '\\smbrelayx'\n            - '\\ntlmrelayx'\n            - '\\LocalPotato'\n    selection_script:\n        CommandLine|contains:\n            - 'Invoke-Tater'\n            - ' smbrelay'\n            - ' ntlmrelay'\n            - 'cme smb '\n            - ' /ntlm:NTLMhash '\n            - 'Invoke-PetitPotam'\n            - '.exe -t * -p '  # JuicyPotatoNG pattern https://github.com/antonioCoco/JuicyPotatoNG\n    selection_juicypotato_enum:  # appears when JuicyPotatoNG is used with -b\n        CommandLine|contains: '.exe -c \"{'\n        CommandLine|endswith: '}\" -z'\n    filter_hotpotatoes:  # known goodware https://hotpot.uvic.ca/\n        Image|contains:\n            - 'HotPotatoes6'\n            - 'HotPotatoes7'\n            - 'HotPotatoes ' # Covers the following: 'HotPotatoes 6', 'HotPotatoes 7', 'HotPotatoes Help', 'HotPotatoes Tutorial'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate files with these rare hacktool names\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        Image|contains:\n            - 'PetitPotam'\n            - 'RottenPotato'\n            - 'HotPotato'\n            - 'JuicyPotato'\n            - '\\just_dce_'\n            - 'Juicy Potato'\n            - '\\temp\\rot.exe'\n            - '\\Potato.exe'\n            - '\\SpoolSample.exe'\n            - '\\Responder.exe'\n            - '\\smbrelayx'\n            - '\\ntlmrelayx'\n            - '\\LocalPotato'\n    selection_script:\n        CommandLine|contains:\n            - 'Invoke-Tater'\n            - ' smbrelay'\n            - ' ntlmrelay'\n            - 'cme smb '\n            - ' /ntlm:NTLMhash '\n            - 'Invoke-PetitPotam'\n            - '.exe -t * -p '  # JuicyPotatoNG pattern https://github.com/antonioCoco/JuicyPotatoNG\n    selection_juicypotato_enum:  # appears when JuicyPotatoNG is used with -b\n        CommandLine|contains: '.exe -c \"{'\n        CommandLine|endswith: '}\" -z'\n    filter_hotpotatoes:  # known goodware https://hotpot.uvic.ca/\n        Image|contains:\n            - 'HotPotatoes6'\n            - 'HotPotatoes7'\n            - 'HotPotatoes ' # Covers the following: 'HotPotatoes 6', 'HotPotatoes 7', 'HotPotatoes Help', 'HotPotatoes Tutorial'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate files with these rare hacktool names\nlevel: critical\n",
      "question": "different hacktools used for relay attacks on Windows for privilege escalation",
      "answer": "In order to detect different hacktools used for relay attacks on Windows for privilege escalation, you should:\n\nMonitor Windows process creation logs for instances of specific hacktools known to facilitate these types of attacks. Look for processes whose images include names hinting at popular attack tools such as 'PetitPotam', 'RottenPotato', 'HotPotato', 'JuicyPotato', among others, indicating that an attacker might be attempting to exploit Windows services for privilege escalation. Additionally, be vigilant for processes initiated with command lines that contain certain key phrases like 'Invoke-Tater', indicating the use of PowerShell scripts geared towards similar exploitation techniques, and variations of JuicyPotato attacks signified by certain command line patterns involving '.exe -t * -p ' and specific enumeration options used by JuicyPotatoNG.\n\nExclude from alerts the processes related to known legitimate software named HotPotatoes, which could be mistaken as part of the attack tools due to name similarities. This distinction is crucial to minimize false positives and ensure that detection efforts are focused on malicious activities.\n\nThe criticality of such detections is considered high due to the potential impact of these attacks, which include unauthorized privilege escalation and subsequent control over affected systems. To accurately detect and mitigate these threats, ensure that the detection logic covers a broad spectrum of known attack tool indicators while also allowing room for the exclusion of benign software sharing name characteristics with the tools in question."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell.\nScript being executed gets created as a temp file in /tmp folder with a scx* prefix.\nThen it is invoked from the following directory /etc/opt/microsoft/scx/conf/tmpdir/.\nThe file in that directory has the same prefix scx*. SCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell, you should focus on monitoring the process creation logs on Linux systems. Specifically, look for processes created by the root user (User: root) with a LogonId of 0, indicating a high level of privilege. Importantly, check whether the CurrentDirectory at the time of process initiation is '/var/opt/microsoft/scx/tmp', as this is a critical indicator of the SCX RunAsProvider's activity.\n\nPay close attention to the CommandLine field for any instances containing '/etc/opt/microsoft/scx/conf/tmpdir/scx', which suggests that a script with the 'scx*' prefix, created in the /tmp folder, is being executed. This action is a key behavior of the SCX RunAsProvider ExecuteScript function, utilized in various Microsoft products for UNIX/Linux scripting operations.\n\nBe aware that there could be legitimate uses of the SCX RunAsProvider ExecuteScript, so it's essential to discern between normal administrative actions and potential malicious activities. Such determinations should be made cautiously to avoid false alarms.\n\nThe detection of these activities is critical, given the high level of access and the potential for misusing the SCXcore component within Microsoft's operational management tools. Monitoring for these specific conditions will help identify unauthorized script executions, which could lead to higher privileges being exploited or malicious scripts impacting the UNIX/Linux systems managed through SCXcore.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        User: root\n        LogonId: 0\n        CurrentDirectory: '/var/opt/microsoft/scx/tmp'\n        CommandLine|contains: '/etc/opt/microsoft/scx/conf/tmpdir/scx'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SCX RunAsProvider ExecuteScript.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        User: root\n        LogonId: 0\n        CurrentDirectory: '/var/opt/microsoft/scx/tmp'\n        CommandLine|contains: '/etc/opt/microsoft/scx/conf/tmpdir/scx'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SCX RunAsProvider ExecuteScript.\nlevel: high\n",
      "question": "Rule to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell.\nScript being executed gets created as a temp file in /tmp folder with a scx* prefix.\nThen it is invoked from the following directory /etc/opt/microsoft/scx/conf/tmpdir/.\nThe file in that directory has the same prefix scx*. SCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n",
      "answer": "In order to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell, you should focus on monitoring the process creation logs on Linux systems. Specifically, look for processes created by the root user (User: root) with a LogonId of 0, indicating a high level of privilege. Importantly, check whether the CurrentDirectory at the time of process initiation is '/var/opt/microsoft/scx/tmp', as this is a critical indicator of the SCX RunAsProvider's activity.\n\nPay close attention to the CommandLine field for any instances containing '/etc/opt/microsoft/scx/conf/tmpdir/scx', which suggests that a script with the 'scx*' prefix, created in the /tmp folder, is being executed. This action is a key behavior of the SCX RunAsProvider ExecuteScript function, utilized in various Microsoft products for UNIX/Linux scripting operations.\n\nBe aware that there could be legitimate uses of the SCX RunAsProvider ExecuteScript, so it's essential to discern between normal administrative actions and potential malicious activities. Such determinations should be made cautiously to avoid false alarms.\n\nThe detection of these activities is critical, given the high level of access and the potential for misusing the SCXcore component within Microsoft's operational management tools. Monitoring for these specific conditions will help identify unauthorized script executions, which could lead to higher privileges being exploited or malicious scripts impacting the UNIX/Linux systems managed through SCXcore."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting new admin role assignment is created. Which could be a sign of privilege escalation or persistence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a new admin role assignment is created, which could be a sign of privilege escalation or persistence, you should focus on monitoring events generated by the Okta product. Specifically, look for events of the type 'iam.resourceset.bindings.add'. This event type indicates the addition of a new admin role assignment, which could potentially signal unauthorized attempts to escalate privileges or establish persistence within the environment. It's important to note that while these events can be indicative of malicious activity, there are legitimate scenarios where a new admin role assignment is expected and authorized. Therefore, any detection strategy should take into account the possibility of false positives, particularly in the form of legitimate creation of new admin role assignments. The severity level for this type of detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: 'iam.resourceset.bindings.add'\n    condition: selection\nfalsepositives:\n    - Legitimate creation of a new admin role assignment\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: 'iam.resourceset.bindings.add'\n    condition: selection\nfalsepositives:\n    - Legitimate creation of a new admin role assignment\nlevel: medium\n",
      "question": "new admin role assignment is created. Which could be a sign of privilege escalation or persistence",
      "answer": "In order to detect when a new admin role assignment is created, which could be a sign of privilege escalation or persistence, you should focus on monitoring events generated by the Okta product. Specifically, look for events of the type 'iam.resourceset.bindings.add'. This event type indicates the addition of a new admin role assignment, which could potentially signal unauthorized attempts to escalate privileges or establish persistence within the environment. It's important to note that while these events can be indicative of malicious activity, there are legitimate scenarios where a new admin role assignment is expected and authorized. Therefore, any detection strategy should take into account the possibility of false positives, particularly in the form of legitimate creation of new admin role assignments. The severity level for this type of detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Show when private keys are being exported from the device, or when new certificates are installed.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to show when private keys are being exported from the device, or when new certificates are installed, you should monitor Cisco devices for specific activities that can indicate these actions are taking place. Focus on the Cisco AAA (Authentication, Authorization, and Accounting) logs as your primary data source. Look for occurrences of the following command keywords in the logs: 'crypto pki export', 'crypto pki import', and 'crypto pki trustpoint'. These commands are crucial for identifying when private keys may be exported (which could lead to potential security risks if done maliciously) or when new certificates are installed (which could signify a change in the device's trust anchors). The logs should provide details such as the source, command set, user involved, privilege level, and remote address associated with the command's execution. It is important to note that these commands are not commonly run by administrators, so any occurrences might be suspicious. However, you should establish a whitelist of known good certificates to reduce false positives. The level of concern for these events is high, indicating that close attention should be paid to any detection of these commands in your environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'crypto pki export'\n        - 'crypto pki import'\n        - 'crypto pki trustpoint'\n    condition: keywords\nfields:\n    - src\n    - CmdSet\n    - User\n    - Privilege_Level\n    - Remote_Address\nfalsepositives:\n    - Not commonly run by administrators. Also whitelist your known good certificates\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'crypto pki export'\n        - 'crypto pki import'\n        - 'crypto pki trustpoint'\n    condition: keywords\nfields:\n    - src\n    - CmdSet\n    - User\n    - Privilege_Level\n    - Remote_Address\nfalsepositives:\n    - Not commonly run by administrators. Also whitelist your known good certificates\nlevel: high\n",
      "question": "Show when private keys are being exported from the device, or when new certificates are installed",
      "answer": "In order to show when private keys are being exported from the device, or when new certificates are installed, you should monitor Cisco devices for specific activities that can indicate these actions are taking place. Focus on the Cisco AAA (Authentication, Authorization, and Accounting) logs as your primary data source. Look for occurrences of the following command keywords in the logs: 'crypto pki export', 'crypto pki import', and 'crypto pki trustpoint'. These commands are crucial for identifying when private keys may be exported (which could lead to potential security risks if done maliciously) or when new certificates are installed (which could signify a change in the device's trust anchors). The logs should provide details such as the source, command set, user involved, privilege level, and remote address associated with the command's execution. It is important to note that these commands are not commonly run by administrators, so any occurrences might be suspicious. However, you should establish a whitelist of known good certificates to reduce false positives. The level of concern for these events is high, indicating that close attention should be paid to any detection of these commands in your environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible successful exploitation for vulnerability described in CVE-2021-26858 by looking for \ncreation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service\nwhich could indicate dropping web shells or other malicious content\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible successful exploitation for the vulnerability described in CVE-2021-26858 by looking for the creation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service, which could indicate dropping web shells or other malicious content, you should: Monitor file events in Windows environments, specifically focusing on actions performed by 'UMWorkerProcess.exe', the Unified Messaging Worker Process related to Exchange Server. Be on alert for the creation of new files that do not end with common file extensions used by this service such as 'CacheCleanup.bin', '.txt', '.LOG', '.cfg', or 'cleanup.bin'. The detection of file creation activities by 'UMWorkerProcess.exe' that do not fall into these filtered categories may indicate an attempt to exploit the system by dropping potentially malicious content onto the server. Key information such as the computer name and the names of the created files should be recorded for further investigation. This approach is crucial in identifying and responding to sophisticated attacks aiming to exploit known vulnerabilities in Exchange Server, particularly CVE-2021-26858. It's important to note that due to the specificity of this detection method, the likelihood of false positives is currently unknown, but the severity of potential exploitation makes it a high-priority concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'UMWorkerProcess.exe'\n    filter:\n        TargetFilename|endswith:\n            - 'CacheCleanup.bin'\n            - '.txt'\n            - '.LOG'\n            - '.cfg'\n            - 'cleanup.bin'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - TargetFilename\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'UMWorkerProcess.exe'\n    filter:\n        TargetFilename|endswith:\n            - 'CacheCleanup.bin'\n            - '.txt'\n            - '.LOG'\n            - '.cfg'\n            - 'cleanup.bin'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - TargetFilename\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible successful exploitation for vulnerability described in CVE-2021-26858 by looking for \ncreation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service\nwhich could indicate dropping web shells or other malicious content\n",
      "answer": "In order to detect possible successful exploitation for the vulnerability described in CVE-2021-26858 by looking for the creation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service, which could indicate dropping web shells or other malicious content, you should: Monitor file events in Windows environments, specifically focusing on actions performed by 'UMWorkerProcess.exe', the Unified Messaging Worker Process related to Exchange Server. Be on alert for the creation of new files that do not end with common file extensions used by this service such as 'CacheCleanup.bin', '.txt', '.LOG', '.cfg', or 'cleanup.bin'. The detection of file creation activities by 'UMWorkerProcess.exe' that do not fall into these filtered categories may indicate an attempt to exploit the system by dropping potentially malicious content onto the server. Key information such as the computer name and the names of the created files should be recorded for further investigation. This approach is crucial in identifying and responding to sophisticated attacks aiming to exploit known vulnerabilities in Exchange Server, particularly CVE-2021-26858. It's important to note that due to the specificity of this detection method, the likelihood of false positives is currently unknown, but the severity of potential exploitation makes it a high-priority concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Checks whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to check whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process), you should: Monitor the process creation logs on Windows systems for occurrences where the path of the executed image does not contain a backslash ('\\'), implying it's not a full path. Additionally, disregard any events where the 'Image' field is null, empty, or contains a hyphen, which are indicative of normal or non-suspicious activities. Specific system processes such as System, Registry, MemCompression, and vmmem, along with their command lines, should also be excluded from the detection criteria due to their routine nature and low likelihood of being exploited in this context. This approach is aimed at identifying potentially malicious activities where attackers may employ techniques like process ghosting to execute their payloads without using a standard filesystem path, thereby evading certain types of detection mechanisms. The criteria for a match require that none of the filtered conditions apply, thus highlighting cases with high suspicion and reducing the chances of false positives, although some unknown false positives may still occur. This monitoring is set at a high level of importance due to the severity of the attack tactic it seeks to uncover.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    image_absolute_path:\n        Image|contains: '\\'\n    filter_null:\n        Image: null\n    filter_empty:\n        Image:\n            - '-'\n            - ''\n    filter_4688:\n        - Image:\n            - 'System'\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n        - CommandLine:\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n    condition: not image_absolute_path and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    image_absolute_path:\n        Image|contains: '\\'\n    filter_null:\n        Image: null\n    filter_empty:\n        Image:\n            - '-'\n            - ''\n    filter_4688:\n        - Image:\n            - 'System'\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n        - CommandLine:\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n    condition: not image_absolute_path and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Checks whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process)",
      "answer": "In order to check whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process), you should: Monitor the process creation logs on Windows systems for occurrences where the path of the executed image does not contain a backslash ('\\'), implying it's not a full path. Additionally, disregard any events where the 'Image' field is null, empty, or contains a hyphen, which are indicative of normal or non-suspicious activities. Specific system processes such as System, Registry, MemCompression, and vmmem, along with their command lines, should also be excluded from the detection criteria due to their routine nature and low likelihood of being exploited in this context. This approach is aimed at identifying potentially malicious activities where attackers may employ techniques like process ghosting to execute their payloads without using a standard filesystem path, thereby evading certain types of detection mechanisms. The criteria for a match require that none of the filtered conditions apply, thus highlighting cases with high suspicion and reducing the chances of false positives, although some unknown false positives may still occur. This monitoring is set at a high level of importance due to the severity of the attack tactic it seeks to uncover."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Attackers can use findstr to hide their artifacts or search specific strings and evade defense mechanism.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when attackers can use findstr to hide their artifacts or search specific strings and evade defense mechanisms, you should: focus on monitoring process creation events within Windows environments. Specifically, look out for occurrences of the findstr command being executed. This involves checking if the command line includes the execution of 'findstr', whether by directly calling 'findstr.exe' or through its original filename 'FINDSTR.EXE'. Additionally, pay attention to specific command line arguments that indicate potentially malicious activity: the use of ' /v ' or ' -v ' which are used to filter out specific lines (an evasion technique), and ' /l ' or ' -l ', which could suggest an attacker is attempting to locate specific information. Also, be on the lookout for flags ' /s ' or ' -s ', and ' /i ' or ' -i ', as these might be used by adversaries trying to search through subdirectories (potentially for sensitive files or strings) or to perform case-insensitive searches, possibly for credential access. Keep in mind that while these activities can be indicative of malicious intent, legitimate administrative use of findstr could also trigger these alerts, so it's important to consider the context in which findstr is being used before classifying an activity as malicious. The detection of such activities should be treated with a medium level of concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr:\n        - CommandLine|contains: findstr\n        - Image|endswith: 'findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli_download_1:\n        CommandLine|contains:\n            - ' /v '\n            - ' -v '\n    selection_cli_download_2:\n        CommandLine|contains:\n            - ' /l '\n            - ' -l '\n    selection_cli_creds_1:\n        CommandLine|contains:\n            - ' /s '\n            - ' -s '\n    selection_cli_creds_2:\n        CommandLine|contains:\n            - ' /i '\n            - ' -i '\n    condition: selection_findstr and (all of selection_cli_download* or all of selection_cli_creds*)\nfalsepositives:\n    - Administrative findstr usage\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr:\n        - CommandLine|contains: findstr\n        - Image|endswith: 'findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli_download_1:\n        CommandLine|contains:\n            - ' /v '\n            - ' -v '\n    selection_cli_download_2:\n        CommandLine|contains:\n            - ' /l '\n            - ' -l '\n    selection_cli_creds_1:\n        CommandLine|contains:\n            - ' /s '\n            - ' -s '\n    selection_cli_creds_2:\n        CommandLine|contains:\n            - ' /i '\n            - ' -i '\n    condition: selection_findstr and (all of selection_cli_download* or all of selection_cli_creds*)\nfalsepositives:\n    - Administrative findstr usage\nlevel: medium\n",
      "question": "Attackers can use findstr to hide their artifacts or search specific strings and evade defense mechanism",
      "answer": "In order to detect when attackers can use findstr to hide their artifacts or search specific strings and evade defense mechanisms, you should: focus on monitoring process creation events within Windows environments. Specifically, look out for occurrences of the findstr command being executed. This involves checking if the command line includes the execution of 'findstr', whether by directly calling 'findstr.exe' or through its original filename 'FINDSTR.EXE'. Additionally, pay attention to specific command line arguments that indicate potentially malicious activity: the use of ' /v ' or ' -v ' which are used to filter out specific lines (an evasion technique), and ' /l ' or ' -l ', which could suggest an attacker is attempting to locate specific information. Also, be on the lookout for flags ' /s ' or ' -s ', and ' /i ' or ' -i ', as these might be used by adversaries trying to search through subdirectories (potentially for sensitive files or strings) or to perform case-insensitive searches, possibly for credential access. Keep in mind that while these activities can be indicative of malicious intent, legitimate administrative use of findstr could also trigger these alerts, so it's important to consider the context in which findstr is being used before classifying an activity as malicious. The detection of such activities should be treated with a medium level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass.\nThe \"Extensions\" list contains filenames of DLLs being automatically loaded by lsass.exe. Each DLL has its InitializeLsaExtension() method called after loading.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass, you should monitor registry setting activities on Windows systems, specifically focusing on events where a SetValue operation occurs. Pay close attention to modifications targeting the registry path `\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions`. This specific registry path is crucial as it stores a list of DLL filenames automatically loaded by the Local Security Authority Subsystem Service (lsass.exe), where each DLL\u2019s `InitializeLsaExtension()` method is called upon loading. Such an unauthorized modification is a red flag for a high-level security threat aimed at achieving malicious persistence on the system by exploiting the way lsass.exe manages its extensions. Tracking changes to this registry value helps in identifying attempts to inject malicious DLLs into the legitimate process of lsass.exe, indicating a potential compromise. The detection of such activities is deemed to have a high level of importance due to the unlikely nature of false positives in this context, indicating that alterations to this registry key are typically not part of regular system operations or benign configurations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass.\nThe \"Extensions\" list contains filenames of DLLs being automatically loaded by lsass.exe. Each DLL has its InitializeLsaExtension() method called after loading.\n",
      "answer": "In order to detect when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass, you should monitor registry setting activities on Windows systems, specifically focusing on events where a SetValue operation occurs. Pay close attention to modifications targeting the registry path `\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions`. This specific registry path is crucial as it stores a list of DLL filenames automatically loaded by the Local Security Authority Subsystem Service (lsass.exe), where each DLL\u2019s `InitializeLsaExtension()` method is called upon loading. Such an unauthorized modification is a red flag for a high-level security threat aimed at achieving malicious persistence on the system by exploiting the way lsass.exe manages its extensions. Tracking changes to this registry value helps in identifying attempts to inject malicious DLLs into the legitimate process of lsass.exe, indicating a potential compromise. The detection of such activities is deemed to have a high level of importance due to the unlikely nature of false positives in this context, indicating that alterations to this registry key are typically not part of regular system operations or benign configurations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Possible Squirrel Packages Manager as Lolbin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible Squirrel Packages Manager as Lolbin, you should monitor process creation events on Windows systems for executions of \"update.exe\". Specifically, look for command line arguments that include '--processStart', '--processStartAndWait', or '--createShortcut'. However, it's important to exclude legitimate update activity by applications like Discord, GitHub Desktop, and Microsoft Teams, which commonly use these command line arguments in their update mechanisms. This involves filtering out any command line executions of 'update.exe' located in user-specific AppData folders for Discord, GitHubDesktop, and Teams, especially when accompanied by expected application-specific arguments like launching or creating shortcuts for those applications. Recognize that despite the utility of this monitoring, there will be a range of legitimate software updates (e.g., 1Clipboard, Beaker Browser, Figma, Slack) that may also trigger these detections, so they should be considered as potential false positives and investigated accordingly. This approach aims at a medium level of alert severity due to its potential to flag legitimate update processes alongside malicious usage of the Squirrel package manager as a Living-off-the-land binary (Lolbin).",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\update.exe'\n    selection2:\n        CommandLine|contains:\n            - '--processStart'\n            - '--processStartAndWait'\n            - '--createShortcut'\n    filter_discord:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Discord\\Update.exe'\n            - ' --processStart'\n            - 'Discord.exe'\n    filter_github_desktop:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\GitHubDesktop\\Update.exe'\n            - 'GitHubDesktop.exe'\n        CommandLine|contains:\n            - '--createShortcut'\n            - '--processStartAndWait'\n    filter_teams:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Microsoft\\Teams\\Update.exe'\n            - 'Teams.exe'\n        CommandLine|contains:\n            - '--processStart'\n            - '--createShortcut'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - 1Clipboard\n    - Beaker Browser\n    - Caret\n    - Collectie\n    - Discord\n    - Figma\n    - Flow\n    - Ghost\n    - GitHub Desktop\n    - GitKraken\n    - Hyper\n    - Insomnia\n    - JIBO\n    - Kap\n    - Kitematic\n    - Now Desktop\n    - Postman\n    - PostmanCanary\n    - Rambox\n    - Simplenote\n    - Skype\n    - Slack\n    - SourceTree\n    - Stride\n    - Svgsus\n    - WebTorrent\n    - WhatsApp\n    - WordPress.com\n    - Atom\n    - Gitkraken\n    - Slack\n    - Teams\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\update.exe'\n    selection2:\n        CommandLine|contains:\n            - '--processStart'\n            - '--processStartAndWait'\n            - '--createShortcut'\n    filter_discord:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Discord\\Update.exe'\n            - ' --processStart'\n            - 'Discord.exe'\n    filter_github_desktop:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\GitHubDesktop\\Update.exe'\n            - 'GitHubDesktop.exe'\n        CommandLine|contains:\n            - '--createShortcut'\n            - '--processStartAndWait'\n    filter_teams:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Microsoft\\Teams\\Update.exe'\n            - 'Teams.exe'\n        CommandLine|contains:\n            - '--processStart'\n            - '--createShortcut'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - 1Clipboard\n    - Beaker Browser\n    - Caret\n    - Collectie\n    - Discord\n    - Figma\n    - Flow\n    - Ghost\n    - GitHub Desktop\n    - GitKraken\n    - Hyper\n    - Insomnia\n    - JIBO\n    - Kap\n    - Kitematic\n    - Now Desktop\n    - Postman\n    - PostmanCanary\n    - Rambox\n    - Simplenote\n    - Skype\n    - Slack\n    - SourceTree\n    - Stride\n    - Svgsus\n    - WebTorrent\n    - WhatsApp\n    - WordPress.com\n    - Atom\n    - Gitkraken\n    - Slack\n    - Teams\nlevel: medium\n",
      "question": "Possible Squirrel Packages Manager as Lolbin",
      "answer": "In order to detect possible Squirrel Packages Manager as Lolbin, you should monitor process creation events on Windows systems for executions of \"update.exe\". Specifically, look for command line arguments that include '--processStart', '--processStartAndWait', or '--createShortcut'. However, it's important to exclude legitimate update activity by applications like Discord, GitHub Desktop, and Microsoft Teams, which commonly use these command line arguments in their update mechanisms. This involves filtering out any command line executions of 'update.exe' located in user-specific AppData folders for Discord, GitHubDesktop, and Teams, especially when accompanied by expected application-specific arguments like launching or creating shortcuts for those applications. Recognize that despite the utility of this monitoring, there will be a range of legitimate software updates (e.g., 1Clipboard, Beaker Browser, Figma, Slack) that may also trigger these detections, so they should be considered as potential false positives and investigated accordingly. This approach aims at a medium level of alert severity due to its potential to flag legitimate update processes alongside malicious usage of the Squirrel package manager as a Living-off-the-land binary (Lolbin)."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries leveraging legitimate desktop support and remote access software to establish a command and control channel to systems within networks, you should monitor for the execution of AnyDesk, a widely recognized remote desktop software. Specifically, scrutinize process creation logs in Windows systems for any instance of the AnyDesk executable being launched. The main identifiers for detecting suspicious activity involve the executable path ending with '\\AnyDesk.exe', alongside certain properties like the description being \"AnyDesk\", the product name \"AnyDesk\", and the company name \"AnyDesk Software GmbH\". However, it's essential to note that not all usages of AnyDesk are malicious. In legitimate scenarios, AnyDesk is typically installed in standard directories under 'Program Files' or 'AppData'. Therefore, an additional check must be in place to exclude events where the AnyDesk executable is located in these common installation paths, namely '\\AppData\\', 'Program Files (x86)\\AnyDesk', and 'Program Files\\AnyDesk'. By focusing on instances where AnyDesk is executed from non-standard locations, the likelihood of flagging legitimate use of the software as false positives is significantly reduced, albeit still possible if AnyDesk is intentionally installed in a unique directory by an authorized user. This monitoring approach is crucial in environments where application control policies permit the use of legitimate remote access tools, which could be exploited by adversaries to gain unauthorized access or control over targeted systems. The associated tactics and techniques this detection strategy covers include execution, persistence, and command and control, specifically emphasizing on the misuse of legitimate remote services for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\AnyDesk.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    filter:\n        Image|contains:\n            - '\\AppData\\'\n            - 'Program Files (x86)\\AnyDesk'\n            - 'Program Files\\AnyDesk'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of AnyDesk from a non-standard folder\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\AnyDesk.exe'\n        - Description: AnyDesk\n        - Product: AnyDesk\n        - Company: AnyDesk Software GmbH\n    filter:\n        Image|contains:\n            - '\\AppData\\'\n            - 'Program Files (x86)\\AnyDesk'\n            - 'Program Files\\AnyDesk'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of AnyDesk from a non-standard folder\nlevel: high\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect adversaries leveraging legitimate desktop support and remote access software to establish a command and control channel to systems within networks, you should monitor for the execution of AnyDesk, a widely recognized remote desktop software. Specifically, scrutinize process creation logs in Windows systems for any instance of the AnyDesk executable being launched. The main identifiers for detecting suspicious activity involve the executable path ending with '\\AnyDesk.exe', alongside certain properties like the description being \"AnyDesk\", the product name \"AnyDesk\", and the company name \"AnyDesk Software GmbH\". However, it's essential to note that not all usages of AnyDesk are malicious. In legitimate scenarios, AnyDesk is typically installed in standard directories under 'Program Files' or 'AppData'. Therefore, an additional check must be in place to exclude events where the AnyDesk executable is located in these common installation paths, namely '\\AppData\\', 'Program Files (x86)\\AnyDesk', and 'Program Files\\AnyDesk'. By focusing on instances where AnyDesk is executed from non-standard locations, the likelihood of flagging legitimate use of the software as false positives is significantly reduced, albeit still possible if AnyDesk is intentionally installed in a unique directory by an authorized user. This monitoring approach is crucial in environments where application control policies permit the use of legitimate remote access tools, which could be exploited by adversaries to gain unauthorized access or control over targeted systems. The associated tactics and techniques this detection strategy covers include execution, persistence, and command and control, specifically emphasizing on the misuse of legitimate remote services for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when Okta FastPass prevents a known phishing site..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when Okta FastPass prevents a known phishing site, you should monitor Okta authentication logs for specific events where the FastPass authentication method declines a login attempt due to a phishing threat. Look for records where the outcome reason is marked as 'FastPass declined phishing attempt' and the outcome result is a FAILURE, specifically during multi-factor authentication processes denoted by the event type 'user.authentication.auth_via_mfa'. Such incidents are flagged with a high-level severity due to the critical nature of thwarting phishing attempts. This detection mechanism is crucial for identifying and reacting to phishing threats that have been recognized and blocked by the Okta FastPass system, ensuring the security of user accounts and the integrity of the authentication process. False positives are considered unlikely, indicating a strong confidence in the specificity of these detection criteria for identifying phishing-related security incidents.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        outcome.reason: 'FastPass declined phishing attempt'\n        outcome.result: FAILURE\n        eventtype: user.authentication.auth_via_mfa\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        outcome.reason: 'FastPass declined phishing attempt'\n        outcome.result: FAILURE\n        eventtype: user.authentication.auth_via_mfa\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "when Okta FastPass prevents a known phishing site.",
      "answer": "In order to detect when Okta FastPass prevents a known phishing site, you should monitor Okta authentication logs for specific events where the FastPass authentication method declines a login attempt due to a phishing threat. Look for records where the outcome reason is marked as 'FastPass declined phishing attempt' and the outcome result is a FAILURE, specifically during multi-factor authentication processes denoted by the event type 'user.authentication.auth_via_mfa'. Such incidents are flagged with a high-level severity due to the critical nature of thwarting phishing attempts. This detection mechanism is crucial for identifying and reacting to phishing threats that have been recognized and blocked by the Okta FastPass system, ensuring the security of user accounts and the integrity of the authentication process. False positives are considered unlikely, indicating a strong confidence in the specificity of these detection criteria for identifying phishing-related security incidents."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting A login from a public IP can indicate a misconfigured firewall or network boundary..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a login from a public IP which can indicate a misconfigured firewall or network boundary, you should monitor for unsuccessful login attempts (EventID 4625) in Windows security event logs. It's important to consider logins that do not originate from known private or reserved IP ranges, as these could signify attempts to access resources from potentially unauthorized or external locations. Specifically, exclude events where the source IP address is either not specified (indicated with a '-') or falls within typical private IPv4 address spaces like 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0 through 172.31.0.0/12, the localhost 127.0.0.0/8, or the automatic private IP addressing (APIPA) range 169.254.0.0/16. Similarly, for IPv6, exclude source addresses that are the loopback address (::1), link-local addresses (fe80::/10), or unique local addresses (fc00::/7). The focus should be on identifying logins from addresses not fitting these filters, as they may imply access attempts from outside the established network perimeters, potentially highlighting security misconfigurations or malicious activities. Though one must consider the possibility of legitimate logon attempts over the internet or the use of IPv4-to-IPv6 mapped addresses, which may lead to false positives, this approach provides a balanced monitoring level for potential security incidents related to public IP access.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4625\n    filter_ip_unknown:\n        IpAddress|contains: '-'\n    filter_ip_privatev4:\n        IpAddress|startswith:\n            - '10.' #10.0.0.0/8\n            - '192.168.' #192.168.0.0/16\n            - '172.16.' #172.16.0.0/12\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.' #127.0.0.0/8\n            - '169.254.' #169.254.0.0/16\n    filter_ip_privatev6:\n        - IpAddress: '::1' #loopback\n        - IpAddress|startswith:\n            - 'fe80::' #link-local\n            - 'fc00::' #unique local\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate logon attempts over the internet\n    - IPv4-to-IPv6 mapped IPs\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4625\n    filter_ip_unknown:\n        IpAddress|contains: '-'\n    filter_ip_privatev4:\n        IpAddress|startswith:\n            - '10.' #10.0.0.0/8\n            - '192.168.' #192.168.0.0/16\n            - '172.16.' #172.16.0.0/12\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.' #127.0.0.0/8\n            - '169.254.' #169.254.0.0/16\n    filter_ip_privatev6:\n        - IpAddress: '::1' #loopback\n        - IpAddress|startswith:\n            - 'fe80::' #link-local\n            - 'fc00::' #unique local\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate logon attempts over the internet\n    - IPv4-to-IPv6 mapped IPs\nlevel: medium\n",
      "question": "A login from a public IP can indicate a misconfigured firewall or network boundary.",
      "answer": "In order to detect a login from a public IP which can indicate a misconfigured firewall or network boundary, you should monitor for unsuccessful login attempts (EventID 4625) in Windows security event logs. It's important to consider logins that do not originate from known private or reserved IP ranges, as these could signify attempts to access resources from potentially unauthorized or external locations. Specifically, exclude events where the source IP address is either not specified (indicated with a '-') or falls within typical private IPv4 address spaces like 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0 through 172.31.0.0/12, the localhost 127.0.0.0/8, or the automatic private IP addressing (APIPA) range 169.254.0.0/16. Similarly, for IPv6, exclude source addresses that are the loopback address (::1), link-local addresses (fe80::/10), or unique local addresses (fc00::/7). The focus should be on identifying logins from addresses not fitting these filters, as they may imply access attempts from outside the established network perimeters, potentially highlighting security misconfigurations or malicious activities. Though one must consider the possibility of legitimate logon attempts over the internet or the use of IPv4-to-IPv6 mapped addresses, which may lead to false positives, this approach provides a balanced monitoring level for potential security incidents related to public IP access."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell, you should: Monitor for modifications to critical user environment configuration files within a Linux environment, specifically through the auditd (Audit Daemon) service. This involves tracking changes to files that are critical to a user's environment and can include '/root/.bashrc', '/root/.bash_profile', '/root/.profile', user-specific '.bashrc', '.bash_profile', and '.profile' files within the '/home/*' directories, as well as system-wide configuration files like '/etc/profile', '/etc/shells', '/etc/bashrc', '/etc/csh.cshrc', and '/etc/csh.login'. It's crucial to note that alterations to these files might not always signify malicious activity, as they could result from legitimate admin or user actions. However, because adversaries often target these files to establish persistence mechanisms by executing code every time a user logs in or initiates a new shell session, monitoring changes to them is vital. Such monitoring is important for catching tactics involving persistence and privilege escalation, although one must be cautious of false positives which might arise from regular system or user modifications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name:\n            - '/root/.bashrc'\n            - '/root/.bash_profile'\n            - '/root/.profile'\n            - '/home/*/.bashrc'\n            - '/home/*/.bash_profile'\n            - '/home/*/.profile'\n            - '/etc/profile'\n            - '/etc/shells'\n            - '/etc/bashrc'\n            - '/etc/csh.cshrc'\n            - '/etc/csh.login'\n    condition: selection\nfalsepositives:\n    - Admin or User activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name:\n            - '/root/.bashrc'\n            - '/root/.bash_profile'\n            - '/root/.profile'\n            - '/home/*/.bashrc'\n            - '/home/*/.bash_profile'\n            - '/home/*/.profile'\n            - '/etc/profile'\n            - '/etc/shells'\n            - '/etc/bashrc'\n            - '/etc/csh.cshrc'\n            - '/etc/csh.login'\n    condition: selection\nfalsepositives:\n    - Admin or User activity\nlevel: medium\n",
      "question": "change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell.",
      "answer": "In order to detect change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell, you should: Monitor for modifications to critical user environment configuration files within a Linux environment, specifically through the auditd (Audit Daemon) service. This involves tracking changes to files that are critical to a user's environment and can include '/root/.bashrc', '/root/.bash_profile', '/root/.profile', user-specific '.bashrc', '.bash_profile', and '.profile' files within the '/home/*' directories, as well as system-wide configuration files like '/etc/profile', '/etc/shells', '/etc/bashrc', '/etc/csh.cshrc', and '/etc/csh.login'. It's crucial to note that alterations to these files might not always signify malicious activity, as they could result from legitimate admin or user actions. However, because adversaries often target these files to establish persistence mechanisms by executing code every time a user logs in or initiates a new shell session, monitoring changes to them is vital. Such monitoring is important for catching tactics involving persistence and privilege escalation, although one must be cautious of false positives which might arise from regular system or user modifications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file download using curl.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file download using curl.exe, you should observe the creation of processes on Windows systems, specifically focusing on cases where 'curl.exe' is involved. Monitor the command line arguments for instances including '-O', '--remote-name', or '--output', as these flags indicate a file is being downloaded. It is crucial to consider the common legitimate uses of these commands, such as scripts authored by developers or administrative tasks, to reduce the likelihood of false positives. Additionally, take special notice if the command originates from a process like \"\\Git\\usr\\bin\\sh.exe\" and targets downloading a file in the temp directory with the pattern \"gfw-httpget-xxxxxxxx.txt \", as this could also be a legitimate use case. Such activities should be examined with a medium level of priority, aligning with the understanding that while curl commands are often used for typical administrative or development functions, they can also serve as a technique for adversaries to obtain files from a remote server, aligning with tactics and techniques like Execution and Command and Control.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - Product: 'The curl executable'\n    selection_remote:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    condition: all of selection_*\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\n    - The \"\\Git\\usr\\bin\\sh.exe\" process uses the \"--output\" flag to download a specific file in the temp directory with the pattern \"gfw-httpget-xxxxxxxx.txt \"\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - Product: 'The curl executable'\n    selection_remote:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    condition: all of selection_*\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\n    - The \"\\Git\\usr\\bin\\sh.exe\" process uses the \"--output\" flag to download a specific file in the temp directory with the pattern \"gfw-httpget-xxxxxxxx.txt \"\nlevel: medium\n",
      "question": "file download using curl.exe",
      "answer": "In order to detect file download using curl.exe, you should observe the creation of processes on Windows systems, specifically focusing on cases where 'curl.exe' is involved. Monitor the command line arguments for instances including '-O', '--remote-name', or '--output', as these flags indicate a file is being downloaded. It is crucial to consider the common legitimate uses of these commands, such as scripts authored by developers or administrative tasks, to reduce the likelihood of false positives. Additionally, take special notice if the command originates from a process like \"\\Git\\usr\\bin\\sh.exe\" and targets downloading a file in the temp directory with the pattern \"gfw-httpget-xxxxxxxx.txt \", as this could also be a legitimate use case. Such activities should be examined with a medium level of priority, aligning with the understanding that while curl commands are often used for typical administrative or development functions, they can also serve as a technique for adversaries to obtain files from a remote server, aligning with tactics and techniques like Execution and Command and Control."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unsigned module load by ClickOnce application..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unsigned module load by ClickOnce application, you should observe the process of image loading within Windows operating environments. Focus on instances where images are loaded from a path that includes '\\AppData\\Local\\Apps\\2.0\\'. Among these instances, attention should be further narrowed down to those where the loaded modules are either not digitally signed or have an expired signature. This is identified through checking the 'Signed' attribute for a value of 'false' and the 'SignatureStatus' for a value indicating that the signature has 'Expired'. Monitoring for these specific conditions across the specified paths allows for the detection of potentially malicious activity associated with the loading of unsigned or expired modules by ClickOnce applications. Given the targeted nature of this surveillance, instances triggering these conditions are considered to bear a medium threat level with unlikely chances of false positives. This strategy aligns with mitigation and detection techniques relevant to the MITRE ATT&CK framework, specifically addressing tactics and techniques related to the execution of unauthorized or compromised software components.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection_path:\n        Image|contains: '\\AppData\\Local\\Apps\\2.0\\'\n    selection_sig_status:\n        - Signed: 'false'\n        - SignatureStatus: 'Expired'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection_path:\n        Image|contains: '\\AppData\\Local\\Apps\\2.0\\'\n    selection_sig_status:\n        - Signed: 'false'\n        - SignatureStatus: 'Expired'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
      "question": "unsigned module load by ClickOnce application.",
      "answer": "In order to detect unsigned module load by ClickOnce application, you should observe the process of image loading within Windows operating environments. Focus on instances where images are loaded from a path that includes '\\AppData\\Local\\Apps\\2.0\\'. Among these instances, attention should be further narrowed down to those where the loaded modules are either not digitally signed or have an expired signature. This is identified through checking the 'Signed' attribute for a value of 'false' and the 'SignatureStatus' for a value indicating that the signature has 'Expired'. Monitoring for these specific conditions across the specified paths allows for the detection of potentially malicious activity associated with the loading of unsigned or expired modules by ClickOnce applications. Given the targeted nature of this surveillance, instances triggering these conditions are considered to bear a medium threat level with unlikely chances of false positives. This strategy aligns with mitigation and detection techniques relevant to the MITRE ATT&CK framework, specifically addressing tactics and techniques related to the execution of unauthorized or compromised software components."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection of unusual child processes by different system processes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unusual child processes by different system processes, you should focus on monitoring process creation logs within Windows systems. Specifically, look for instances where certain system processes such as winlogon.exe, services.exe, lsass.exe, csrss.exe, smss.exe, wininit.exe, spoolsv.exe, or searchindexer.exe are listed as parent processes. These parent processes should not typically spawn certain child processes, so their appearance is suspicious. Further examination should be done if these parent processes initiate PowerShell (powershell.exe, pwsh.exe), or Command Prompt (cmd.exe) as child processes, especially if the original filenames for PowerShell are PowerShell.EXE or pwsh.dll, and for Command Prompt are Cmd.Exe. \n\nAdditionally, you should apply a filter to exclude any command lines that contain both 'route' and 'ADD' to reduce false positives, as these might represent legitimate network configuration commands rather than malicious activity. Pay attention to user contexts that contain variations of 'AUTHORI' or 'AUTORI' in different language settings, indicating the user account under which these processes are being executed. \n\nBe aware that this analysis is highly specific and aimed at identifying high-risk behaviors indicative of malicious activity, such as attempting to leverage system processes to execute unauthorized commands or scripts. Despite this careful setup, there might still be unknown scenarios that could trigger false alarms, so human analysis and corroboration with other signs of compromise are advisable. The data points to focus on in the logs for this detection are the parent image path, the image path of the child process, the user account initiating the process, and the command line used.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\winlogon.exe'\n            - '\\services.exe'\n            - '\\lsass.exe'\n            - '\\csrss.exe'\n            - '\\smss.exe'\n            - '\\wininit.exe'\n            - '\\spoolsv.exe'\n            - '\\searchindexer.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'Cmd.Exe'\n    filter:\n        CommandLine|contains|all:\n            - ' route '\n            - ' ADD '\n    condition: all of selection_* and not filter\nfields:\n    - ParentImage\n    - Image\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\winlogon.exe'\n            - '\\services.exe'\n            - '\\lsass.exe'\n            - '\\csrss.exe'\n            - '\\smss.exe'\n            - '\\wininit.exe'\n            - '\\spoolsv.exe'\n            - '\\searchindexer.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'Cmd.Exe'\n    filter:\n        CommandLine|contains|all:\n            - ' route '\n            - ' ADD '\n    condition: all of selection_* and not filter\nfields:\n    - ParentImage\n    - Image\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detection of unusual child processes by different system processes",
      "answer": "In order to detect unusual child processes by different system processes, you should focus on monitoring process creation logs within Windows systems. Specifically, look for instances where certain system processes such as winlogon.exe, services.exe, lsass.exe, csrss.exe, smss.exe, wininit.exe, spoolsv.exe, or searchindexer.exe are listed as parent processes. These parent processes should not typically spawn certain child processes, so their appearance is suspicious. Further examination should be done if these parent processes initiate PowerShell (powershell.exe, pwsh.exe), or Command Prompt (cmd.exe) as child processes, especially if the original filenames for PowerShell are PowerShell.EXE or pwsh.dll, and for Command Prompt are Cmd.Exe. \n\nAdditionally, you should apply a filter to exclude any command lines that contain both 'route' and 'ADD' to reduce false positives, as these might represent legitimate network configuration commands rather than malicious activity. Pay attention to user contexts that contain variations of 'AUTHORI' or 'AUTORI' in different language settings, indicating the user account under which these processes are being executed. \n\nBe aware that this analysis is highly specific and aimed at identifying high-risk behaviors indicative of malicious activity, such as attempting to leverage system processes to execute unauthorized commands or scripts. Despite this careful setup, there might still be unknown scenarios that could trigger false alarms, so human analysis and corroboration with other signs of compromise are advisable. The data points to focus on in the logs for this detection are the parent image path, the image path of the child process, the user account initiating the process, and the command line used."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of a base64 encoded \"IEX\" cmdlet in a process command line.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of a base64 encoded \"IEX\" cmdlet in a process command line, you should focus on observing the creation of processes on Windows systems. Specifically, look for indications of the \"Invoke-Expression\" cmdlet, commonly abbreviated as \"IEX\", being used within the command line of a newly created process. This cmdlet can be a strong indicator of an attack when it appears in its plain text form (e.g., \"IEX\", \"iex\") or in base64 encoded format, which may be used by attackers to obfuscate malicious scripts. \n\nThe detection strategy involves monitoring for specific patterns in the command line that suggest the presence of the \"IEX\" cmdlet. These patterns include various combinations of the cmdlet, such as \"IEX ([\", \"iex ([\", \"iex (New\", \"IEX (New\", and so on, along with their base64 encoded equivalents like 'SQBFAFgAIAAoAFsA', 'kAZQB4ACAAKABbA', etc. Identifying these command line strings is crucial because it can signify an attempt to execute PowerShell code dynamically, which is a common technique used by attackers for executing malicious scripts or commands.\n\nIt is important to pay attention to these signs as they may indicate an attempt to bypass security measures by obfuscating malicious commands, making it harder for traditional security tools to detect and block the attack. The detection of such patterns should be treated with a high level of suspicion and investigated promptly due to the significant potential for malicious activity associated with these indicators.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|base64offset|contains:\n            - 'IEX (['\n            - 'iex (['\n            - 'iex (New'\n            - 'IEX (New'\n            - 'IEX(['\n            - 'iex(['\n            - 'iex(New'\n            - 'IEX(New'\n            - \"IEX(('\"\n            - \"iex(('\"\n        # UTF16 LE\n        - CommandLine|contains:\n            - 'SQBFAFgAIAAoAFsA'\n            - 'kARQBYACAAKABbA'\n            - 'JAEUAWAAgACgAWw'\n            - 'aQBlAHgAIAAoAFsA'\n            - 'kAZQB4ACAAKABbA'\n            - 'pAGUAeAAgACgAWw'\n            - 'aQBlAHgAIAAoAE4AZQB3A'\n            - 'kAZQB4ACAAKABOAGUAdw'\n            - 'pAGUAeAAgACgATgBlAHcA'\n            - 'SQBFAFgAIAAoAE4AZQB3A'\n            - 'kARQBYACAAKABOAGUAdw'\n            - 'JAEUAWAAgACgATgBlAHcA'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|base64offset|contains:\n            - 'IEX (['\n            - 'iex (['\n            - 'iex (New'\n            - 'IEX (New'\n            - 'IEX(['\n            - 'iex(['\n            - 'iex(New'\n            - 'IEX(New'\n            - \"IEX(('\"\n            - \"iex(('\"\n        # UTF16 LE\n        - CommandLine|contains:\n            - 'SQBFAFgAIAAoAFsA'\n            - 'kARQBYACAAKABbA'\n            - 'JAEUAWAAgACgAWw'\n            - 'aQBlAHgAIAAoAFsA'\n            - 'kAZQB4ACAAKABbA'\n            - 'pAGUAeAAgACgAWw'\n            - 'aQBlAHgAIAAoAE4AZQB3A'\n            - 'kAZQB4ACAAKABOAGUAdw'\n            - 'pAGUAeAAgACgATgBlAHcA'\n            - 'SQBFAFgAIAAoAE4AZQB3A'\n            - 'kARQBYACAAKABOAGUAdw'\n            - 'JAEUAWAAgACgATgBlAHcA'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of a base64 encoded \"IEX\" cmdlet in a process command line",
      "answer": "In order to detect the usage of a base64 encoded \"IEX\" cmdlet in a process command line, you should focus on observing the creation of processes on Windows systems. Specifically, look for indications of the \"Invoke-Expression\" cmdlet, commonly abbreviated as \"IEX\", being used within the command line of a newly created process. This cmdlet can be a strong indicator of an attack when it appears in its plain text form (e.g., \"IEX\", \"iex\") or in base64 encoded format, which may be used by attackers to obfuscate malicious scripts. \n\nThe detection strategy involves monitoring for specific patterns in the command line that suggest the presence of the \"IEX\" cmdlet. These patterns include various combinations of the cmdlet, such as \"IEX ([\", \"iex ([\", \"iex (New\", \"IEX (New\", and so on, along with their base64 encoded equivalents like 'SQBFAFgAIAAoAFsA', 'kAZQB4ACAAKABbA', etc. Identifying these command line strings is crucial because it can signify an attempt to execute PowerShell code dynamically, which is a common technique used by attackers for executing malicious scripts or commands.\n\nIt is important to pay attention to these signs as they may indicate an attempt to bypass security measures by obfuscating malicious commands, making it harder for traditional security tools to detect and block the attack. The detection of such patterns should be treated with a high level of suspicion and investigated promptly due to the significant potential for malicious activity associated with these indicators."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass, you should: This detection focuses on monitoring process access within Windows environments. It specifically identifies instances when the lsass.exe (Local Security Authority Subsystem Service) process is accessed by the rundll32.exe utility. The rule triggers an alert if the lsass.exe process is being targeted and the source of this activity is rundll32.exe, especially when this activity involves the use of the comsvcs.dll, which is known to be used for memory dumping functions. This behavior is indicative of an attack aiming to extract sensitive information from the memory of the lsass process, which manages user logins and password changes, making it a prime target for attackers seeking to steal credentials. The critical nature of this alert underscores the importance of promptly investigating such detections to mitigate potential security breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        SourceImage: 'C:\\Windows\\System32\\rundll32.exe'\n        CallTrace|contains: 'comsvcs.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        SourceImage: 'C:\\Windows\\System32\\rundll32.exe'\n        CallTrace|contains: 'comsvcs.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass.",
      "answer": "In order to detect adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass, you should: This detection focuses on monitoring process access within Windows environments. It specifically identifies instances when the lsass.exe (Local Security Authority Subsystem Service) process is accessed by the rundll32.exe utility. The rule triggers an alert if the lsass.exe process is being targeted and the source of this activity is rundll32.exe, especially when this activity involves the use of the comsvcs.dll, which is known to be used for memory dumping functions. This behavior is indicative of an attack aiming to extract sensitive information from the memory of the lsass process, which manages user logins and password changes, making it a prime target for attackers seeking to steal credentials. The critical nature of this alert underscores the importance of promptly investigating such detections to mitigate potential security breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect adversaries enumerate sensitive files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries enumerating sensitive files, you should: Monitor Windows PowerShell script activities, specifically focusing on script block logging which must be enabled for accurate detection. Look for scripts containing commands like 'ls', 'get-childitem', or 'gci' indicating an intention to list directory contents. Further scrutiny should be applied to scripts attempting to use the '-recurse' option, indicating a deeper, possibly malicious directory traversal. Pay special attention to scripts that seem to search for sensitive file types, such as '.pass', '.kdbx', or '.kdb', as this could signify an attempt to locate and potentially compromise crucial data. The detection should be considered genuine if all the mentioned conditions are met, acknowledging the possibility of unknown false positives at a medium severity level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - ls\n            - get-childitem\n            - gci\n    selection_recurse:\n        ScriptBlockText|contains: '-recurse'\n    selection_file:\n        ScriptBlockText|contains:\n            - '.pass'\n            - '.kdbx'\n            - '.kdb'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - ls\n            - get-childitem\n            - gci\n    selection_recurse:\n        ScriptBlockText|contains: '-recurse'\n    selection_file:\n        ScriptBlockText|contains:\n            - '.pass'\n            - '.kdbx'\n            - '.kdb'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect adversaries enumerate sensitive files",
      "answer": "In order to detect adversaries enumerating sensitive files, you should: Monitor Windows PowerShell script activities, specifically focusing on script block logging which must be enabled for accurate detection. Look for scripts containing commands like 'ls', 'get-childitem', or 'gci' indicating an intention to list directory contents. Further scrutiny should be applied to scripts attempting to use the '-recurse' option, indicating a deeper, possibly malicious directory traversal. Pay special attention to scripts that seem to search for sensitive file types, such as '.pass', '.kdbx', or '.kdb', as this could signify an attempt to locate and potentially compromise crucial data. The detection should be considered genuine if all the mentioned conditions are met, acknowledging the possibility of unknown false positives at a medium severity level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting binaries that use the same name as legitimate sysinternals tools to evade detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect binaries that use the same name as legitimate sysinternals tools to evade detection, you should focus on monitoring Windows process creation events. Pay special attention to processes that are initiated from executable files whose names match a comprehensive list of known Sysinternals tool names. These include various utilities such as `accesschk.exe`, `ADExplorer.exe`, `Autoruns.exe`, `psExec.exe`, and many others, along with their 64-bit counterparts (e.g., `accesschk64.exe`, `ADExplorer64.exe`, etc.). \n\nAdditionally, it's crucial to filter these events by verifying the company name associated with the executable files. The legitimate Sysinternals tools are typically published by \"Sysinternals - www.sysinternals.com\" or simply \"Sysinternals.\" Any process creation events from executables with these names but not matching the valid company names should raise suspicion. \n\nThis detection model also accounts for scenarios where the company name field might be empty, which could either be a potential evasion tactic or a misconfiguration. \n\nGiven the nature of Sysinternals tools and their utility in both legitimate system administration and malicious activities (due to their powerful system exploration and manipulation capabilities), this approach aims to identify misuse or impersonation of these tools, which could indicate reconnaissance, lateral movement, system information discovery, or other steps in an attack lifecycle, typically associated with tactics and techniques like Execution, Persistence, Privilege Escalation, and Defense Evasion. \n\nBear in mind, there might be instances where these detections could flag legitimate use of sysinternals tools, so it's considered to have a medium level of confidence, and further investigation is warranted upon alerts to distinguish between malicious activities and legitimate utility use.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_exe:\n        Image|endswith:\n            - '\\accesschk.exe'\n            - '\\accesschk64.exe'\n            - '\\AccessEnum.exe'\n            - '\\ADExplorer.exe'\n            - '\\ADExplorer64.exe'\n            - '\\ADInsight.exe'\n            - '\\ADInsight64.exe'\n            - '\\adrestore.exe'\n            - '\\adrestore64.exe'\n            - '\\Autologon.exe'\n            - '\\Autologon64.exe'\n            - '\\Autoruns.exe'\n            - '\\Autoruns64.exe'\n            - '\\autorunsc.exe'\n            - '\\autorunsc64.exe'\n            - '\\Bginfo.exe'\n            - '\\Bginfo64.exe'\n            - '\\Cacheset.exe'\n            - '\\Cacheset64.exe'\n            - '\\Clockres.exe'\n            - '\\Clockres64.exe'\n            - '\\Contig.exe'\n            - '\\Contig64.exe'\n            - '\\Coreinfo.exe'\n            - '\\Coreinfo64.exe'\n            - '\\CPUSTRES.EXE'\n            - '\\CPUSTRES64.EXE'\n            - '\\ctrl2cap.exe'\n            - '\\Dbgview.exe'\n            - '\\dbgview64.exe'\n            - '\\Desktops.exe'\n            - '\\Desktops64.exe'\n            - '\\disk2vhd.exe'\n            - '\\disk2vhd64.exe'\n            - '\\diskext.exe'\n            - '\\diskext64.exe'\n            - '\\Diskmon.exe'\n            - '\\Diskmon64.exe'\n            - '\\DiskView.exe'\n            - '\\DiskView64.exe'\n            - '\\du.exe'\n            - '\\du64.exe'\n            - '\\efsdump.exe'\n            - '\\FindLinks.exe'\n            - '\\FindLinks64.exe'\n            - '\\handle.exe'\n            - '\\handle64.exe'\n            - '\\hex2dec.exe'\n            - '\\hex2dec64.exe'\n            - '\\junction.exe'\n            - '\\junction64.exe'\n            - '\\ldmdump.exe'\n            - '\\listdlls.exe'\n            - '\\listdlls64.exe'\n            - '\\livekd.exe'\n            - '\\livekd64.exe'\n            - '\\loadOrd.exe'\n            - '\\loadOrd64.exe'\n            - '\\loadOrdC.exe'\n            - '\\loadOrdC64.exe'\n            - '\\logonsessions.exe'\n            - '\\logonsessions64.exe'\n            - '\\movefile.exe'\n            - '\\movefile64.exe'\n            - '\\notmyfault.exe'\n            - '\\notmyfault64.exe'\n            - '\\notmyfaultc.exe'\n            - '\\notmyfaultc64.exe'\n            - '\\ntfsinfo.exe'\n            - '\\ntfsinfo64.exe'\n            - '\\pendmoves.exe'\n            - '\\pendmoves64.exe'\n            - '\\pipelist.exe'\n            - '\\pipelist64.exe'\n            - '\\portmon.exe'\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n            - '\\procexp.exe'\n            - '\\procexp64.exe'\n            - '\\Procmon.exe'\n            - '\\Procmon64.exe'\n            - '\\psExec.exe'\n            - '\\psExec64.exe'\n            - '\\psfile.exe'\n            - '\\psfile64.exe'\n            - '\\psGetsid.exe'\n            - '\\psGetsid64.exe'\n            - '\\psInfo.exe'\n            - '\\psInfo64.exe'\n            - '\\pskill.exe'\n            - '\\pskill64.exe'\n            - '\\pslist.exe'\n            - '\\pslist64.exe'\n            - '\\psLoggedon.exe'\n            - '\\psLoggedon64.exe'\n            - '\\psloglist.exe'\n            - '\\psloglist64.exe'\n            - '\\pspasswd.exe'\n            - '\\pspasswd64.exe'\n            - '\\psping.exe'\n            - '\\psping64.exe'\n            - '\\psService.exe'\n            - '\\psService64.exe'\n            - '\\psshutdown.exe'\n            - '\\psshutdown64.exe'\n            - '\\pssuspend.exe'\n            - '\\pssuspend64.exe'\n            - '\\RAMMap.exe'\n            - '\\RDCMan.exe'\n            - '\\RegDelNull.exe'\n            - '\\RegDelNull64.exe'\n            - '\\regjump.exe'\n            - '\\ru.exe'\n            - '\\ru64.exe'\n            - '\\sdelete.exe'\n            - '\\sdelete64.exe'\n            - '\\ShareEnum.exe'\n            - '\\ShareEnum64.exe'\n            - '\\shellRunas.exe'\n            - '\\sigcheck.exe'\n            - '\\sigcheck64.exe'\n            - '\\streams.exe'\n            - '\\streams64.exe'\n            - '\\strings.exe'\n            - '\\strings64.exe'\n            - '\\sync.exe'\n            - '\\sync64.exe'\n            - '\\Sysmon.exe'\n            - '\\Sysmon64.exe'\n            - '\\tcpvcon.exe'\n            - '\\tcpvcon64.exe'\n            - '\\tcpview.exe'\n            - '\\tcpview64.exe'\n            - '\\Testlimit.exe'\n            - '\\Testlimit64.exe'\n            - '\\vmmap.exe'\n            - '\\vmmap64.exe'\n            - '\\Volumeid.exe'\n            - '\\Volumeid64.exe'\n            - '\\whois.exe'\n            - '\\whois64.exe'\n            - '\\Winobj.exe'\n            - '\\Winobj64.exe'\n            - '\\ZoomIt.exe'\n            - '\\ZoomIt64.exe'\n    filter_valid:\n        Company:\n            - 'Sysinternals - www.sysinternals.com'\n            - 'Sysinternals'\n    filter_empty:\n        Company: null\n    condition: selection_exe and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_exe:\n        Image|endswith:\n            - '\\accesschk.exe'\n            - '\\accesschk64.exe'\n            - '\\AccessEnum.exe'\n            - '\\ADExplorer.exe'\n            - '\\ADExplorer64.exe'\n            - '\\ADInsight.exe'\n            - '\\ADInsight64.exe'\n            - '\\adrestore.exe'\n            - '\\adrestore64.exe'\n            - '\\Autologon.exe'\n            - '\\Autologon64.exe'\n            - '\\Autoruns.exe'\n            - '\\Autoruns64.exe'\n            - '\\autorunsc.exe'\n            - '\\autorunsc64.exe'\n            - '\\Bginfo.exe'\n            - '\\Bginfo64.exe'\n            - '\\Cacheset.exe'\n            - '\\Cacheset64.exe'\n            - '\\Clockres.exe'\n            - '\\Clockres64.exe'\n            - '\\Contig.exe'\n            - '\\Contig64.exe'\n            - '\\Coreinfo.exe'\n            - '\\Coreinfo64.exe'\n            - '\\CPUSTRES.EXE'\n            - '\\CPUSTRES64.EXE'\n            - '\\ctrl2cap.exe'\n            - '\\Dbgview.exe'\n            - '\\dbgview64.exe'\n            - '\\Desktops.exe'\n            - '\\Desktops64.exe'\n            - '\\disk2vhd.exe'\n            - '\\disk2vhd64.exe'\n            - '\\diskext.exe'\n            - '\\diskext64.exe'\n            - '\\Diskmon.exe'\n            - '\\Diskmon64.exe'\n            - '\\DiskView.exe'\n            - '\\DiskView64.exe'\n            - '\\du.exe'\n            - '\\du64.exe'\n            - '\\efsdump.exe'\n            - '\\FindLinks.exe'\n            - '\\FindLinks64.exe'\n            - '\\handle.exe'\n            - '\\handle64.exe'\n            - '\\hex2dec.exe'\n            - '\\hex2dec64.exe'\n            - '\\junction.exe'\n            - '\\junction64.exe'\n            - '\\ldmdump.exe'\n            - '\\listdlls.exe'\n            - '\\listdlls64.exe'\n            - '\\livekd.exe'\n            - '\\livekd64.exe'\n            - '\\loadOrd.exe'\n            - '\\loadOrd64.exe'\n            - '\\loadOrdC.exe'\n            - '\\loadOrdC64.exe'\n            - '\\logonsessions.exe'\n            - '\\logonsessions64.exe'\n            - '\\movefile.exe'\n            - '\\movefile64.exe'\n            - '\\notmyfault.exe'\n            - '\\notmyfault64.exe'\n            - '\\notmyfaultc.exe'\n            - '\\notmyfaultc64.exe'\n            - '\\ntfsinfo.exe'\n            - '\\ntfsinfo64.exe'\n            - '\\pendmoves.exe'\n            - '\\pendmoves64.exe'\n            - '\\pipelist.exe'\n            - '\\pipelist64.exe'\n            - '\\portmon.exe'\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n            - '\\procexp.exe'\n            - '\\procexp64.exe'\n            - '\\Procmon.exe'\n            - '\\Procmon64.exe'\n            - '\\psExec.exe'\n            - '\\psExec64.exe'\n            - '\\psfile.exe'\n            - '\\psfile64.exe'\n            - '\\psGetsid.exe'\n            - '\\psGetsid64.exe'\n            - '\\psInfo.exe'\n            - '\\psInfo64.exe'\n            - '\\pskill.exe'\n            - '\\pskill64.exe'\n            - '\\pslist.exe'\n            - '\\pslist64.exe'\n            - '\\psLoggedon.exe'\n            - '\\psLoggedon64.exe'\n            - '\\psloglist.exe'\n            - '\\psloglist64.exe'\n            - '\\pspasswd.exe'\n            - '\\pspasswd64.exe'\n            - '\\psping.exe'\n            - '\\psping64.exe'\n            - '\\psService.exe'\n            - '\\psService64.exe'\n            - '\\psshutdown.exe'\n            - '\\psshutdown64.exe'\n            - '\\pssuspend.exe'\n            - '\\pssuspend64.exe'\n            - '\\RAMMap.exe'\n            - '\\RDCMan.exe'\n            - '\\RegDelNull.exe'\n            - '\\RegDelNull64.exe'\n            - '\\regjump.exe'\n            - '\\ru.exe'\n            - '\\ru64.exe'\n            - '\\sdelete.exe'\n            - '\\sdelete64.exe'\n            - '\\ShareEnum.exe'\n            - '\\ShareEnum64.exe'\n            - '\\shellRunas.exe'\n            - '\\sigcheck.exe'\n            - '\\sigcheck64.exe'\n            - '\\streams.exe'\n            - '\\streams64.exe'\n            - '\\strings.exe'\n            - '\\strings64.exe'\n            - '\\sync.exe'\n            - '\\sync64.exe'\n            - '\\Sysmon.exe'\n            - '\\Sysmon64.exe'\n            - '\\tcpvcon.exe'\n            - '\\tcpvcon64.exe'\n            - '\\tcpview.exe'\n            - '\\tcpview64.exe'\n            - '\\Testlimit.exe'\n            - '\\Testlimit64.exe'\n            - '\\vmmap.exe'\n            - '\\vmmap64.exe'\n            - '\\Volumeid.exe'\n            - '\\Volumeid64.exe'\n            - '\\whois.exe'\n            - '\\whois64.exe'\n            - '\\Winobj.exe'\n            - '\\Winobj64.exe'\n            - '\\ZoomIt.exe'\n            - '\\ZoomIt64.exe'\n    filter_valid:\n        Company:\n            - 'Sysinternals - www.sysinternals.com'\n            - 'Sysinternals'\n    filter_empty:\n        Company: null\n    condition: selection_exe and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "binaries that use the same name as legitimate sysinternals tools to evade detection",
      "answer": "In order to detect binaries that use the same name as legitimate sysinternals tools to evade detection, you should focus on monitoring Windows process creation events. Pay special attention to processes that are initiated from executable files whose names match a comprehensive list of known Sysinternals tool names. These include various utilities such as `accesschk.exe`, `ADExplorer.exe`, `Autoruns.exe`, `psExec.exe`, and many others, along with their 64-bit counterparts (e.g., `accesschk64.exe`, `ADExplorer64.exe`, etc.). \n\nAdditionally, it's crucial to filter these events by verifying the company name associated with the executable files. The legitimate Sysinternals tools are typically published by \"Sysinternals - www.sysinternals.com\" or simply \"Sysinternals.\" Any process creation events from executables with these names but not matching the valid company names should raise suspicion. \n\nThis detection model also accounts for scenarios where the company name field might be empty, which could either be a potential evasion tactic or a misconfiguration. \n\nGiven the nature of Sysinternals tools and their utility in both legitimate system administration and malicious activities (due to their powerful system exploration and manipulation capabilities), this approach aims to identify misuse or impersonation of these tools, which could indicate reconnaissance, lateral movement, system information discovery, or other steps in an attack lifecycle, typically associated with tactics and techniques like Execution, Persistence, Privilege Escalation, and Defense Evasion. \n\nBear in mind, there might be instances where these detections could flag legitimate use of sysinternals tools, so it's considered to have a medium level of confidence, and further investigation is warranted upon alerts to distinguish between malicious activities and legitimate utility use."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension, you should: monitor process creation events on Windows systems specifically for occurrences where the processes named `wscript.exe` or `cscript.exe` are initiated. These processes are Windows Script Host utilities used to execute scripts on the Windows operating system. Their execution becomes suspicious when they attempt to run files with extensions that are typically associated with non-executable, and often data-only, file types such as `.csv`, `.dat`, `.doc`, `.gif`, `.jpeg`, `.jpg`, `.png`, `.ppt`, `.txt`, `.xls`, and `.xml`. This behavior could indicate an attempt to bypass security controls by executing malicious code hidden within files that appear benign. Detecting this can be pivotal in identifying and countering scripts that exploit these utilities for malicious purposes like malware infection, data exfiltration, or other threats. The detection requires checking both the original file name and the path ending for the processes `wscript.exe` and `cscript.exe`, in conjunction with observing the command line for the inclusion of the specified unconventional file extensions. It's important to be vigilant for such activities, although one must also consider that in some rare and less clear scenarios, legitimate scripts may perform unusual actions, leading to potential false positives. The risk level associated with this detection is deemed high due to the unconventional use of script host utilities that could signify malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'wscript.exe'\n            - 'cscript.exe'\n        - Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_extension:\n        CommandLine|contains:\n            # Note: add additional potential suspicious extension\n            # We could specify the \"//E:\" flag to avoid typos by admin. But since that's prone to blind spots via the creation of assoc it's better not to include it\n            - '.csv'\n            - '.dat'\n            - '.doc'\n            - '.gif'\n            - '.jpeg'\n            - '.jpg'\n            - '.png'\n            - '.ppt'\n            - '.txt'\n            - '.xls'\n            - '.xml'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'wscript.exe'\n            - 'cscript.exe'\n        - Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_extension:\n        CommandLine|contains:\n            # Note: add additional potential suspicious extension\n            # We could specify the \"//E:\" flag to avoid typos by admin. But since that's prone to blind spots via the creation of assoc it's better not to include it\n            - '.csv'\n            - '.dat'\n            - '.doc'\n            - '.gif'\n            - '.jpeg'\n            - '.jpg'\n            - '.png'\n            - '.ppt'\n            - '.txt'\n            - '.xls'\n            - '.xml'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension",
      "answer": "In order to detect Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension, you should: monitor process creation events on Windows systems specifically for occurrences where the processes named `wscript.exe` or `cscript.exe` are initiated. These processes are Windows Script Host utilities used to execute scripts on the Windows operating system. Their execution becomes suspicious when they attempt to run files with extensions that are typically associated with non-executable, and often data-only, file types such as `.csv`, `.dat`, `.doc`, `.gif`, `.jpeg`, `.jpg`, `.png`, `.ppt`, `.txt`, `.xls`, and `.xml`. This behavior could indicate an attempt to bypass security controls by executing malicious code hidden within files that appear benign. Detecting this can be pivotal in identifying and countering scripts that exploit these utilities for malicious purposes like malware infection, data exfiltration, or other threats. The detection requires checking both the original file name and the path ending for the processes `wscript.exe` and `cscript.exe`, in conjunction with observing the command line for the inclusion of the specified unconventional file extensions. It's important to be vigilant for such activities, although one must also consider that in some rare and less clear scenarios, legitimate scripts may perform unusual actions, leading to potential false positives. The risk level associated with this detection is deemed high due to the unconventional use of script host utilities that could signify malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect modification for a specific user to prevent that user from being listed on the logon screen.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification for a specific user to prevent that user from being listed on the logon screen, you should: focus on monitoring Windows Registry settings modifications, particularly in the registry category that tracks changes. Look for events where the type is set to SetValue, indicating a modification or addition of a registry value. Specifically, observe changes occurring in the registry path that includes '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\\', as this path is crucial for managing user visibility on the login screen. Attention should be paid to target objects that not only contain this path but also end with a dollar sign ('$'), which is often a sign of operations performed on hidden or system accounts. Additionally, check if the modification details involve setting a DWORD value to 0 (0x00000000), which effectively hides the user from the logon screen. Given the high potential for misuse, any such modification should be closely scrutinized, despite the low likelihood of legitimate use cases, thus unknown scenarios are considered as possible false positives. The severity of this activity is considered high due to its potential use in evading detection or maintaining persistent access without immediate visibility to system administrators or users.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\\'\n        TargetObject|endswith: '$'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\\'\n        TargetObject|endswith: '$'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect modification for a specific user to prevent that user from being listed on the logon screen",
      "answer": "In order to detect modification for a specific user to prevent that user from being listed on the logon screen, you should: focus on monitoring Windows Registry settings modifications, particularly in the registry category that tracks changes. Look for events where the type is set to SetValue, indicating a modification or addition of a registry value. Specifically, observe changes occurring in the registry path that includes '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\\', as this path is crucial for managing user visibility on the login screen. Attention should be paid to target objects that not only contain this path but also end with a dollar sign ('$'), which is often a sign of operations performed on hidden or system accounts. Additionally, check if the modification details involve setting a DWORD value to 0 (0x00000000), which effectively hides the user from the logon screen. Given the high potential for misuse, any such modification should be closely scrutinized, despite the low likelihood of legitimate use cases, thus unknown scenarios are considered as possible false positives. The severity of this activity is considered high due to its potential use in evading detection or maintaining persistent access without immediate visibility to system administrators or users."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious execution of 'Msbuild.exe' by a uncommon parent process.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious execution of 'Msbuild.exe' by an uncommon parent process, you should monitor process creation events in Windows. Look for instances where 'MSBuild.exe' is the process being initiated, either by checking if the image path ends with '\\MSBuild.exe' or if the original file name is 'MSBuild.exe'. It is crucial to exclude cases where the parent process (the process initiating MSBuild.exe) is a common developer or system process. These include 'devenv.exe' (Visual Studio), 'cmd.exe' (Command Prompt), 'msbuild.exe' (MSBuild itself), 'python.exe', 'explorer.exe' (Windows Explorer), and 'nuget.exe'. The focus is on capturing executions of MSBuild.exe that do not originate from these standard or expected parent processes, as this could indicate malicious activity. The alert level for this rule is set to medium, given the potential for false positives, which means there might be legitimate scenarios that trigger this detection that are not necessarily security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\MSBuild.exe'\n        - OriginalFileName: 'MSBuild.exe'\n    filter_parent:\n        ParentImage|endswith:\n            - '\\devenv.exe'\n            - '\\cmd.exe'\n            - '\\msbuild.exe'\n            - '\\python.exe'\n            - '\\explorer.exe'\n            - '\\nuget.exe'\n    condition: selection and not filter_parent\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\MSBuild.exe'\n        - OriginalFileName: 'MSBuild.exe'\n    filter_parent:\n        ParentImage|endswith:\n            - '\\devenv.exe'\n            - '\\cmd.exe'\n            - '\\msbuild.exe'\n            - '\\python.exe'\n            - '\\explorer.exe'\n            - '\\nuget.exe'\n    condition: selection and not filter_parent\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious execution of 'Msbuild.exe' by a uncommon parent process",
      "answer": "In order to detect suspicious execution of 'Msbuild.exe' by an uncommon parent process, you should monitor process creation events in Windows. Look for instances where 'MSBuild.exe' is the process being initiated, either by checking if the image path ends with '\\MSBuild.exe' or if the original file name is 'MSBuild.exe'. It is crucial to exclude cases where the parent process (the process initiating MSBuild.exe) is a common developer or system process. These include 'devenv.exe' (Visual Studio), 'cmd.exe' (Command Prompt), 'msbuild.exe' (MSBuild itself), 'python.exe', 'explorer.exe' (Windows Explorer), and 'nuget.exe'. The focus is on capturing executions of MSBuild.exe that do not originate from these standard or expected parent processes, as this could indicate malicious activity. The alert level for this rule is set to medium, given the potential for false positives, which means there might be legitimate scenarios that trigger this detection that are not necessarily security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting A General detection for specific decompress commands in PowerShell logs. This could be an adversary decompressing files..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a potential adversary decompressing files using specific commands in PowerShell logs, you should: Focus on monitoring the PowerShell module logs within Windows environments. Specifically, look for occurrences where the 'Expand-Archive' command is utilized, as it indicates the extraction or decompression of file archives. This action is noteworthy and categorized as informational because it could suggest an adversary is deploying or accessing compressed files possibly for malicious purposes. It is crucial to track such activities, although determining them as malicious with certainty may require additional context due to the possibility of legitimate administrative use.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains: 'Expand-Archive'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains: 'Expand-Archive'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: informational\n",
      "question": "A General detection for specific decompress commands in PowerShell logs. This could be an adversary decompressing files.",
      "answer": "In order to detect a potential adversary decompressing files using specific commands in PowerShell logs, you should: Focus on monitoring the PowerShell module logs within Windows environments. Specifically, look for occurrences where the 'Expand-Archive' command is utilized, as it indicates the extraction or decompression of file archives. This action is noteworthy and categorized as informational because it could suggest an adversary is deploying or accessing compressed files possibly for malicious purposes. It is crucial to track such activities, although determining them as malicious with certainty may require additional context due to the possibility of legitimate administrative use."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting risky authencaition from a non AD registered device without MFA being required..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect risky authentication from a non AD registered device without MFA being required, you should: Monitor Azure sign-in logs for successful authentication attempts that only utilized single factor authentication from devices not registered with Active Directory and are marked as 'atRisk'. This involves focusing on sign-in attempts where 'Status' is marked as 'Success', 'AuthenticationRequirement' indicates 'singleFactorAuthentication', 'DeviceDetail.trusttype' is not specified (indicating a lack of device registration or trust), and 'RiskState' is flagged as 'atRisk', pointing towards a potentially compromised or risky authentication attempt. Noteworthy, this process does not predict all possible false positives, which remain unknown, and the significance level of these detection criteria is considered high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n        AuthenticationRequirement: 'singleFactorAuthentication'\n        DeviceDetail.trusttype: ''\n        RiskState: 'atRisk'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n        AuthenticationRequirement: 'singleFactorAuthentication'\n        DeviceDetail.trusttype: ''\n        RiskState: 'atRisk'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "risky authencaition from a non AD registered device without MFA being required.",
      "answer": "In order to detect risky authentication from a non AD registered device without MFA being required, you should: Monitor Azure sign-in logs for successful authentication attempts that only utilized single factor authentication from devices not registered with Active Directory and are marked as 'atRisk'. This involves focusing on sign-in attempts where 'Status' is marked as 'Success', 'AuthenticationRequirement' indicates 'singleFactorAuthentication', 'DeviceDetail.trusttype' is not specified (indicating a lack of device registration or trust), and 'RiskState' is flagged as 'atRisk', pointing towards a potentially compromised or risky authentication attempt. Noteworthy, this process does not predict all possible false positives, which remain unknown, and the significance level of these detection criteria is considered high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls to get event log information via EVEN or EVEN6.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls to get event log information via EVEN or EVEN6, you should monitor your system's RPC firewall application logs for specific events. Here is how you can effectively carry out this detection process:\n\nYour environment must be set up with an RPC Firewall, a security application designed to regulate and monitor Remote Procedure Call (RPC) traffic. This setup should be configured to audit and block certain RPC activities, targeting processes identified by unique UUIDs: 82273fdc-e32a-18c3-3f78-827929dc23ea and f6beaff7-1e19-4fbb-9f8f-b89e2018337c. This specific configuration serves as a preliminary step to focus on potentially malicious RPC communication attempts.\n\nWhen monitoring the application logs generated by the RPC Firewall, look out for log entries categorized under the \"RPCFW\" event log. The entries of particular interest have an EventID of 3, which indicates an event tied to remote RPC calls attempting to access event log information. This is a critical marker for identifying suspicious activities.\n\nThe detection further narrows down to log entries involving the previously mentioned UUIDs associated with the RPC interfaces. These UUIDs are significant as they tie back to specific operations or processes that could be targeted by attackers seeking to retrieve event log data through remote RPC calls.\n\nBe aware that in some cases, these detections might flag legitimate remote administrative tasks involving Windows Events as potential threats. These are considered false positives and should be carefully validated to ensure that legitimate administrative activities are not disrupted.\n\nGiven this detection strategy's high importance level, it is crucial to actively monitor for these indicators and investigate any triggers to ensure that your system is protected against unauthorized attempts to access event log information via remote RPC calls. This approach is aligned with mitigating tactics and techniques related to unauthorized access and data extraction from systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:82273fdc-e32a-18c3-3f78-827929dc23ea and uuid:f6beaff7-1e19-4fbb-9f8f-b89e2018337c\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - 82273fdc-e32a-18c3-3f78-827929dc23ea\n            - f6beaff7-1e19-4fbb-9f8f-b89e2018337c\n    condition: selection\nfalsepositives:\n    - Remote administrative tasks on Windows Events\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:82273fdc-e32a-18c3-3f78-827929dc23ea and uuid:f6beaff7-1e19-4fbb-9f8f-b89e2018337c\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - 82273fdc-e32a-18c3-3f78-827929dc23ea\n            - f6beaff7-1e19-4fbb-9f8f-b89e2018337c\n    condition: selection\nfalsepositives:\n    - Remote administrative tasks on Windows Events\nlevel: high\n",
      "question": "remote RPC calls to get event log information via EVEN or EVEN6",
      "answer": "In order to detect remote RPC calls to get event log information via EVEN or EVEN6, you should monitor your system's RPC firewall application logs for specific events. Here is how you can effectively carry out this detection process:\n\nYour environment must be set up with an RPC Firewall, a security application designed to regulate and monitor Remote Procedure Call (RPC) traffic. This setup should be configured to audit and block certain RPC activities, targeting processes identified by unique UUIDs: 82273fdc-e32a-18c3-3f78-827929dc23ea and f6beaff7-1e19-4fbb-9f8f-b89e2018337c. This specific configuration serves as a preliminary step to focus on potentially malicious RPC communication attempts.\n\nWhen monitoring the application logs generated by the RPC Firewall, look out for log entries categorized under the \"RPCFW\" event log. The entries of particular interest have an EventID of 3, which indicates an event tied to remote RPC calls attempting to access event log information. This is a critical marker for identifying suspicious activities.\n\nThe detection further narrows down to log entries involving the previously mentioned UUIDs associated with the RPC interfaces. These UUIDs are significant as they tie back to specific operations or processes that could be targeted by attackers seeking to retrieve event log data through remote RPC calls.\n\nBe aware that in some cases, these detections might flag legitimate remote administrative tasks involving Windows Events as potential threats. These are considered false positives and should be carefully validated to ensure that legitimate administrative activities are not disrupted.\n\nGiven this detection strategy's high importance level, it is crucial to actively monitor for these indicators and investigate any triggers to ensure that your system is protected against unauthorized attempts to access event log information via remote RPC calls. This approach is aligned with mitigating tactics and techniques related to unauthorized access and data extraction from systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious call to Invoke-WebRequest cmdlet where the and output is located in a suspicious location.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious call to Invoke-WebRequest cmdlet where the and output is located in a suspicious location, you should monitor for the creation of processes associated with PowerShell (powershell.exe or pwsh.exe) or where the original file name is identified as PowerShell.EXE or pwsh.dll on Windows systems. Pay close attention to the command line arguments, looking for the usage of aliases of Invoke-WebRequest such as 'curl ', 'Invoke-WebRequest', 'iwr ', and 'wget '. Additionally, inspect the command line for flags that are typically associated with URL specification (' -ur') or output redirection (' -o'). It's crucial to examine the locations specified in the command line for output or operation, especially if they include common user directories or system paths that are not typically used for legitimate system or user files, such as '\\AppData\\', '\\Desktop\\', '\\Temp\\', '\\Users\\Public\\', '%AppData%', '%Public%', '%Temp%', '%tmp%', and 'C:\\Windows\\'. Activity matching these criteria, integrating process creation, specific command line patterns, and suspicious file locations, indicates a high chance of malicious behavior related to the use of Invoke-WebRequest for dubious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_commands:\n        CommandLine|contains:\n            # These are all aliases of Invoke-WebRequest\n            - 'curl '\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'wget '\n    selection_flags:\n        CommandLine|contains:\n            - ' -ur'\n            - ' -o'\n    selection_susp_locations:\n        CommandLine|contains:\n            - '\\AppData\\'\n            - '\\Desktop\\'\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '%AppData%'\n            - '%Public%'\n            - '%Temp%'\n            - '%tmp%'\n            - 'C:\\Windows\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_commands:\n        CommandLine|contains:\n            # These are all aliases of Invoke-WebRequest\n            - 'curl '\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'wget '\n    selection_flags:\n        CommandLine|contains:\n            - ' -ur'\n            - ' -o'\n    selection_susp_locations:\n        CommandLine|contains:\n            - '\\AppData\\'\n            - '\\Desktop\\'\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '%AppData%'\n            - '%Public%'\n            - '%Temp%'\n            - '%tmp%'\n            - 'C:\\Windows\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious call to Invoke-WebRequest cmdlet where the and output is located in a suspicious location",
      "answer": "In order to detect a suspicious call to Invoke-WebRequest cmdlet where the and output is located in a suspicious location, you should monitor for the creation of processes associated with PowerShell (powershell.exe or pwsh.exe) or where the original file name is identified as PowerShell.EXE or pwsh.dll on Windows systems. Pay close attention to the command line arguments, looking for the usage of aliases of Invoke-WebRequest such as 'curl ', 'Invoke-WebRequest', 'iwr ', and 'wget '. Additionally, inspect the command line for flags that are typically associated with URL specification (' -ur') or output redirection (' -o'). It's crucial to examine the locations specified in the command line for output or operation, especially if they include common user directories or system paths that are not typically used for legitimate system or user files, such as '\\AppData\\', '\\Desktop\\', '\\Temp\\', '\\Users\\Public\\', '%AppData%', '%Public%', '%Temp%', '%tmp%', and 'C:\\Windows\\'. Activity matching these criteria, integrating process creation, specific command line patterns, and suspicious file locations, indicates a high chance of malicious behavior related to the use of Invoke-WebRequest for dubious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when storage bucket is modified or deleted in Google Cloud..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a storage bucket is modified or deleted in Google Cloud, you should monitor audit logs within the Google Cloud Platform (GCP) environment, focusing specifically on the GCP audit logging service. This involves looking for instances when methods related to storage buckets, such as `storage.buckets.delete`, `storage.buckets.insert`, `storage.buckets.update`, or `storage.buckets.patch`, are invoked. Activities captured by these methods can indicate that storage buckets are either being created, deleted, updated, or patched.\n\nIt is crucial to assess these actions cautiously as changes to storage buckets may sometimes be legitimate activities conducted by system administrators. Verification processes should include checking that the user identity performing these actions, the user agent used, and the hostname involved are recognized and authorized to make such changes in your Google Cloud environment. In scenarios where modifications or deletions of storage buckets arise from unfamiliar users or sources, these should be subjected to investigation to determine their legitimacy. In cases where known behavior is identified as causing false positives \u2014 that is, legitimate activities being flagged as suspicious \u2014 these can be configured to be exempt from triggering alerts.\n\nUltimately, monitoring for these specific operations concerning storage buckets helps in identifying potential security breaches or unauthorized changes, aligning with best practices in maintaining the integrity and security of data stored in the Google Cloud. This vigilant approach towards monitoring and verifying storage bucket operations within the GCP's audit logging infrastructure aids in the early detection and mitigation of possible threats to cloud-based storage resources.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name:\n            - storage.buckets.delete\n            - storage.buckets.insert\n            - storage.buckets.update\n            - storage.buckets.patch\n    condition: selection\nfalsepositives:\n    - Storage Buckets being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Storage Buckets modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name:\n            - storage.buckets.delete\n            - storage.buckets.insert\n            - storage.buckets.update\n            - storage.buckets.patch\n    condition: selection\nfalsepositives:\n    - Storage Buckets being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Storage Buckets modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "when storage bucket is modified or deleted in Google Cloud.",
      "answer": "In order to detect when a storage bucket is modified or deleted in Google Cloud, you should monitor audit logs within the Google Cloud Platform (GCP) environment, focusing specifically on the GCP audit logging service. This involves looking for instances when methods related to storage buckets, such as `storage.buckets.delete`, `storage.buckets.insert`, `storage.buckets.update`, or `storage.buckets.patch`, are invoked. Activities captured by these methods can indicate that storage buckets are either being created, deleted, updated, or patched.\n\nIt is crucial to assess these actions cautiously as changes to storage buckets may sometimes be legitimate activities conducted by system administrators. Verification processes should include checking that the user identity performing these actions, the user agent used, and the hostname involved are recognized and authorized to make such changes in your Google Cloud environment. In scenarios where modifications or deletions of storage buckets arise from unfamiliar users or sources, these should be subjected to investigation to determine their legitimacy. In cases where known behavior is identified as causing false positives \u2014 that is, legitimate activities being flagged as suspicious \u2014 these can be configured to be exempt from triggering alerts.\n\nUltimately, monitoring for these specific operations concerning storage buckets helps in identifying potential security breaches or unauthorized changes, aligning with best practices in maintaining the integrity and security of data stored in the Google Cloud. This vigilant approach towards monitoring and verifying storage bucket operations within the GCP's audit logging infrastructure aids in the early detection and mitigation of possible threats to cloud-based storage resources."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect findstring commands that include the keyword lsass, which indicates recon activity for the LSASS process PID, you should: monitor process creation events on Windows systems specifically for the execution of 'findstr.exe.' Ensure to check for instances where the 'Image' field ends with '\\findstr.exe' or the 'OriginalFileName' is 'FINDSTR.EXE.' Additionally, examine any command line input for the presence of 'lsass' to capture attempts at querying or manipulating the Local Security Authority Subsystem Service (LSASS) process. Special attention should be given to command lines that include variations such as ' /i lsass.exe', ' /i \"lsass', along with direct 'findstr' commands targeting 'lsass' either as 'findstr lsass', 'findstr.exe lsass', 'findstr \"lsass', or 'findstr.exe \"lsass'. The detection of any such activities should trigger a high-level alert due to the reconnaissance nature targeting the LSASS process, a critical component in Windows authentication mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr_img:\n        - Image|endswith: '\\findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_findstr_cli:\n        CommandLine|contains: 'lsass'\n    selection_special:\n        CommandLine|contains:\n            - ' /i lsass.exe'\n            - ' /i \"lsass'\n            - 'findstr lsass'\n            - 'findstr.exe lsass'\n            - 'findstr \"lsass'\n            - 'findstr.exe \"lsass'\n    condition: all of selection_findstr_* or selection_special\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr_img:\n        - Image|endswith: '\\findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_findstr_cli:\n        CommandLine|contains: 'lsass'\n    selection_special:\n        CommandLine|contains:\n            - ' /i lsass.exe'\n            - ' /i \"lsass'\n            - 'findstr lsass'\n            - 'findstr.exe lsass'\n            - 'findstr \"lsass'\n            - 'findstr.exe \"lsass'\n    condition: all of selection_findstr_* or selection_special\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID",
      "answer": "In order to detect findstring commands that include the keyword lsass, which indicates recon activity for the LSASS process PID, you should: monitor process creation events on Windows systems specifically for the execution of 'findstr.exe.' Ensure to check for instances where the 'Image' field ends with '\\findstr.exe' or the 'OriginalFileName' is 'FINDSTR.EXE.' Additionally, examine any command line input for the presence of 'lsass' to capture attempts at querying or manipulating the Local Security Authority Subsystem Service (LSASS) process. Special attention should be given to command lines that include variations such as ' /i lsass.exe', ' /i \"lsass', along with direct 'findstr' commands targeting 'lsass' either as 'findstr lsass', 'findstr.exe lsass', 'findstr \"lsass', or 'findstr.exe \"lsass'. The detection of any such activities should trigger a high-level alert due to the reconnaissance nature targeting the LSASS process, a critical component in Windows authentication mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls to possibly abuse remote encryption service via MS-EFSR.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls to possibly abuse remote encryption service via MS-EFSR, you should: Monitor the RPC (Remote Procedure Call) firewall logs for applications, specifically looking for Event Log labeled RPCFW with an Event ID of 3. This event indicates an RPC call has been made. Pay special attention to calls made using the Interface UUIDs df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e, as these are known identifiers for operations that could be related to the abuse of the Microsoft Encrypting File System Remote (MS-EFSR) service. However, it is important to consider that there may be legitimate usage of remote file encryption services; such activities should not automatically be treated as malicious without further investigation. Since this activity is considered to be of high importance, ensure that the RPC firewall is correctly installed and applied to all relevant processes as a preventative measure against potential abuse.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - df1941c5-fe89-4e79-bf10-463657acf44d\n            - c681d488-d850-11d0-8c52-00c04fd90f7e\n    condition: selection\nfalsepositives:\n    - Legitimate usage of remote file encryption\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - df1941c5-fe89-4e79-bf10-463657acf44d\n            - c681d488-d850-11d0-8c52-00c04fd90f7e\n    condition: selection\nfalsepositives:\n    - Legitimate usage of remote file encryption\nlevel: high\n",
      "question": "remote RPC calls to possibly abuse remote encryption service via MS-EFSR",
      "answer": "In order to detect remote RPC calls to possibly abuse remote encryption service via MS-EFSR, you should: Monitor the RPC (Remote Procedure Call) firewall logs for applications, specifically looking for Event Log labeled RPCFW with an Event ID of 3. This event indicates an RPC call has been made. Pay special attention to calls made using the Interface UUIDs df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e, as these are known identifiers for operations that could be related to the abuse of the Microsoft Encrypting File System Remote (MS-EFSR) service. However, it is important to consider that there may be legitimate usage of remote file encryption services; such activities should not automatically be treated as malicious without further investigation. Since this activity is considered to be of high importance, ensure that the RPC firewall is correctly installed and applied to all relevant processes as a preventative measure against potential abuse."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting failed logins with multiple valid domain accounts from a single source system using the NTLM protocol..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect failed logins with multiple valid domain accounts from a single source system using the NTLM protocol, you should monitor Windows security logs specifically for event ID 4776. This event indicates a login attempt using the NTLM protocol where the login failed due to a misspelled or incorrect password. You must exclude any login attempts for accounts ending with a '$' symbol, as these are usually service or machine accounts. Focus on instances where more than 10 failed login attempts are registered from a single workstation within a 24-hour period. It's important to note that there may be legitimate scenarios where such patterns of failed logins occur, particularly on terminal servers, jump servers, Citrix server farms, or workstations that are accessed by numerous different users throughout the day. These conditions have a medium level of alert and are tagged with tactics and techniques such as Credential Access through Valid Accounts indicating an attempt to compromise account credentials by exploiting authentication mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4776\n        Status: '*0xC000006A' #Account logon with misspelled or bad password.\n    filter:\n        TargetUserName: '*$'\n    timeframe: 24h\n    condition: selection1 and not filter | count(TargetUserName) by Workstation > 10\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Other multiuser systems like Citrix server farms\n    - Workstations with frequently changing users\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4776\n        Status: '*0xC000006A' #Account logon with misspelled or bad password.\n    filter:\n        TargetUserName: '*$'\n    timeframe: 24h\n    condition: selection1 and not filter | count(TargetUserName) by Workstation > 10\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Other multiuser systems like Citrix server farms\n    - Workstations with frequently changing users\nlevel: medium\n",
      "question": "failed logins with multiple valid domain accounts from a single source system using the NTLM protocol.",
      "answer": "In order to detect failed logins with multiple valid domain accounts from a single source system using the NTLM protocol, you should monitor Windows security logs specifically for event ID 4776. This event indicates a login attempt using the NTLM protocol where the login failed due to a misspelled or incorrect password. You must exclude any login attempts for accounts ending with a '$' symbol, as these are usually service or machine accounts. Focus on instances where more than 10 failed login attempts are registered from a single workstation within a 24-hour period. It's important to note that there may be legitimate scenarios where such patterns of failed logins occur, particularly on terminal servers, jump servers, Citrix server farms, or workstations that are accessed by numerous different users throughout the day. These conditions have a medium level of alert and are tagged with tactics and techniques such as Credential Access through Valid Accounts indicating an attempt to compromise account credentials by exploiting authentication mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting High DNS queries bytes amount from host per short period of time.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a high DNS queries bytes amount from host per short period of time, you should monitor firewall logs for instances where the destination port is 53, indicating DNS traffic. Evaluate these instances over a one-minute timeframe to identify if the sum of message sizes originating from a single source IP address exceeds 300,000 bytes. This behavior could suggest an unusual and potentially malicious level of DNS traffic emanating from a single host, indicating an attempt to carry out DNS-based attacks or exfiltrate data. Be aware of potential false positives, such as legitimate high rates of DNS bytes being sent out to a domain name, which should then be added to a whitelist to avoid unnecessary alerts. This monitoring practice corresponds with identifying activities associated with Command and Control tactics and Exfiltration over Alternative Protocol techniques, aiming to enhance the detection of malicious network communication and data exfiltration attempts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: firewall\ndetection:\n    selection:\n        dst_port: 53\n    timeframe: 1m\n    condition: selection | sum(message_size) by src_ip > 300000\nfalsepositives:\n    - Legitimate high DNS bytes out rate to domain name which should be added to whitelist\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: firewall\ndetection:\n    selection:\n        dst_port: 53\n    timeframe: 1m\n    condition: selection | sum(message_size) by src_ip > 300000\nfalsepositives:\n    - Legitimate high DNS bytes out rate to domain name which should be added to whitelist\nlevel: medium\n",
      "question": "High DNS queries bytes amount from host per short period of time",
      "answer": "In order to detect a high DNS queries bytes amount from host per short period of time, you should monitor firewall logs for instances where the destination port is 53, indicating DNS traffic. Evaluate these instances over a one-minute timeframe to identify if the sum of message sizes originating from a single source IP address exceeds 300,000 bytes. This behavior could suggest an unusual and potentially malicious level of DNS traffic emanating from a single host, indicating an attempt to carry out DNS-based attacks or exfiltrate data. Be aware of potential false positives, such as legitimate high rates of DNS bytes being sent out to a domain name, which should then be added to a whitelist to avoid unnecessary alerts. This monitoring practice corresponds with identifying activities associated with Command and Control tactics and Exfiltration over Alternative Protocol techniques, aiming to enhance the detection of malicious network communication and data exfiltration attempts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious command lines used in Covenant luanchers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious command lines used in Covenant launchers, you should: focus on monitoring the process creation logs within Windows environments. Specifically, look for command lines that display specific indicators of compromise which are commonly associated with these types of attacks. The detection criteria involve finding command lines that contain all of the following: '-Sta', '-Nop', '-Window', and 'Hidden'. Additionally, the presence of either '-Command' or '-EncodedCommand' in the command line also serves as a significant indicator. Alternatively, command lines that contain any of the following strings should also raise suspicion: 'sv o (New-Object IO.MemorySteam);sv d ', 'mshta file.hta', 'GruntHTTP', or '-EncodedCommand cwB2ACAAbwAgA'. The necessity to meet any one of these conditions (either all aspects of the first set or any from the second set) is crucial for triggering an alert. These signatures are distinctly linked with tactics and techniques such as execution, defense evasion, and the use of command and control channels specific to Covenant launcher activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - '-Sta'\n            - '-Nop'\n            - '-Window'\n            - 'Hidden'\n        CommandLine|contains:\n            - '-Command'\n            - '-EncodedCommand'\n    selection_2:\n        CommandLine|contains:\n            - 'sv o (New-Object IO.MemorySteam);sv d '\n            - 'mshta file.hta'\n            - 'GruntHTTP'\n            - '-EncodedCommand cwB2ACAAbwAgA'\n    condition: 1 of selection_*\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - '-Sta'\n            - '-Nop'\n            - '-Window'\n            - 'Hidden'\n        CommandLine|contains:\n            - '-Command'\n            - '-EncodedCommand'\n    selection_2:\n        CommandLine|contains:\n            - 'sv o (New-Object IO.MemorySteam);sv d '\n            - 'mshta file.hta'\n            - 'GruntHTTP'\n            - '-EncodedCommand cwB2ACAAbwAgA'\n    condition: 1 of selection_*\nlevel: high\n",
      "question": "suspicious command lines used in Covenant luanchers",
      "answer": "In order to detect suspicious command lines used in Covenant launchers, you should: focus on monitoring the process creation logs within Windows environments. Specifically, look for command lines that display specific indicators of compromise which are commonly associated with these types of attacks. The detection criteria involve finding command lines that contain all of the following: '-Sta', '-Nop', '-Window', and 'Hidden'. Additionally, the presence of either '-Command' or '-EncodedCommand' in the command line also serves as a significant indicator. Alternatively, command lines that contain any of the following strings should also raise suspicion: 'sv o (New-Object IO.MemorySteam);sv d ', 'mshta file.hta', 'GruntHTTP', or '-EncodedCommand cwB2ACAAbwAgA'. The necessity to meet any one of these conditions (either all aspects of the first set or any from the second set) is crucial for triggering an alert. These signatures are distinctly linked with tactics and techniques such as execution, defense evasion, and the use of command and control channels specific to Covenant launcher activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file and folder permission changes..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0|contains:\n            - 'chmod'\n            - 'chown'\n    condition: selection\nfalsepositives:\n    - User interacting with files permissions (normal/daily behaviour).\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0|contains:\n            - 'chmod'\n            - 'chown'\n    condition: selection\nfalsepositives:\n    - User interacting with files permissions (normal/daily behaviour).\nlevel: low\n",
      "question": "file and folder permission changes.",
      "answer": "In order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of Moriya rootkit as described in the securelist's Operation TunnelSnake report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Moriya rootkit as described in the securelist's Operation TunnelSnake report, you should: Monitor Windows System logs for events generated by the Service Control Manager with a specific focus on EventID 7045. This event indicates a service installation, which is critical in this context as the Moriya rootkit utilizes a service named ZzNetSvc during its deployment. By isolating logs that report the creation of this particular service, it becomes possible to identify potential traces of the Moriya rootkit on a system. Given the severity of this threat, any detection of such activity should be deemed critical. Be aware that detections might have some unknown false positives, but due to the critical level of this threat, each alert should be investigated thoroughly. This approach primarily falls under the tactics and techniques related to Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: ZzNetSvc\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: ZzNetSvc\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "use of Moriya rootkit as described in the securelist's Operation TunnelSnake report",
      "answer": "In order to detect the use of Moriya rootkit as described in the securelist's Operation TunnelSnake report, you should: Monitor Windows System logs for events generated by the Service Control Manager with a specific focus on EventID 7045. This event indicates a service installation, which is critical in this context as the Moriya rootkit utilizes a service named ZzNetSvc during its deployment. By isolating logs that report the creation of this particular service, it becomes possible to identify potential traces of the Moriya rootkit on a system. Given the severity of this threat, any detection of such activity should be deemed critical. Be aware that detections might have some unknown false positives, but due to the critical level of this threat, each alert should be investigated thoroughly. This approach primarily falls under the tactics and techniques related to Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory, you should observe the following: Focus on the creation of new processes on Windows systems. Specifically, look out for instances where the process image name ends with '\\ADExplorer.exe', or the original file name is noted as 'AdExp'. This targets the ADExplorer utility, a tool capable of interacting with Windows Active Directory data. Additionally, monitor if the command line executed with these processes contains the 'snapshot' flag, an indication that the tool is being used to capture a local copy of the active directory database. Further scrutiny is advised for commands indicating that the snapshot might be saved to traditionally suspicious directories, such as '\\Downloads\\', '\\Users\\Public\\', '\\AppData\\', and '\\Windows\\Temp\\'. Any process creation event matching all these criteria should be considered highly suspect, albeit with the understanding that not all instances may be malicious, as there could be unknown legitimate causes for such behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_flag:\n        CommandLine|contains: 'snapshot'\n    selection_paths:\n        CommandLine|contains:\n            # TODO: Add more suspicious paths\n            - '\\Downloads\\'\n            - '\\Users\\Public\\'\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_flag:\n        CommandLine|contains: 'snapshot'\n    selection_paths:\n        CommandLine|contains:\n            # TODO: Add more suspicious paths\n            - '\\Downloads\\'\n            - '\\Users\\Public\\'\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory.",
      "answer": "In order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory, you should observe the following: Focus on the creation of new processes on Windows systems. Specifically, look out for instances where the process image name ends with '\\ADExplorer.exe', or the original file name is noted as 'AdExp'. This targets the ADExplorer utility, a tool capable of interacting with Windows Active Directory data. Additionally, monitor if the command line executed with these processes contains the 'snapshot' flag, an indication that the tool is being used to capture a local copy of the active directory database. Further scrutiny is advised for commands indicating that the snapshot might be saved to traditionally suspicious directories, such as '\\Downloads\\', '\\Users\\Public\\', '\\AppData\\', and '\\Windows\\Temp\\'. Any process creation event matching all these criteria should be considered highly suspect, albeit with the understanding that not all instances may be malicious, as there could be unknown legitimate causes for such behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DLL sideloading of \"dbgcore.dll\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DLL sideloading of \"dbgcore.dll\", you should monitor the loading of images within Windows environments, specifically focusing on instances where \"dbgcore.dll\" is loaded in a manner inconsistent with standard operations. This involves observing if the \"dbgcore.dll\" file is loaded in an unusual way or from suspicious locations that do not include common directories such as \"C:\\Program Files (x86)\\\", \"C:\\Program Files\\\", \"C:\\Windows\\SoftwareDistribution\\\", \"C:\\Windows\\System32\\\", \"C:\\Windows\\SystemTemp\\\", \"C:\\Windows\\SysWOW64\\\", and \"C:\\Windows\\WinSxS\\\". Additionally, an exception is made for instances where \"dbgcore.dll\" is loaded from a path ending with \"\\Steam\\bin\\cef\\cef.win7x64\\dbgcore.dll\" to minimize false positives from legitimate applications, including certain games that may use this library. The goal is to capture unusual activities that could indicate an attacker is attempting to disguise malicious activities by leveraging the sideloading of the \"dbgcore.dll\" file, a technique often employed to bypass security measures. It is important to note that some legitimate applications may trigger this detection by loading their own versions of \"dbgcore.dll\" from non-standard locations, which should be considered when evaluating alerts. The severity level for this detection has been set to medium, reflecting the balance between the potential risk of the activity and the likelihood of false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\dbgcore.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SystemTemp\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    filter_optional_steam:\n        ImageLoaded|endswith: '\\Steam\\bin\\cef\\cef.win7x64\\dbgcore.dll'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate applications loading their own versions of the DLL mentioned in this rule\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\dbgcore.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SystemTemp\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    filter_optional_steam:\n        ImageLoaded|endswith: '\\Steam\\bin\\cef\\cef.win7x64\\dbgcore.dll'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate applications loading their own versions of the DLL mentioned in this rule\nlevel: medium\n",
      "question": "DLL sideloading of \"dbgcore.dll\"",
      "answer": "In order to detect DLL sideloading of \"dbgcore.dll\", you should monitor the loading of images within Windows environments, specifically focusing on instances where \"dbgcore.dll\" is loaded in a manner inconsistent with standard operations. This involves observing if the \"dbgcore.dll\" file is loaded in an unusual way or from suspicious locations that do not include common directories such as \"C:\\Program Files (x86)\\\", \"C:\\Program Files\\\", \"C:\\Windows\\SoftwareDistribution\\\", \"C:\\Windows\\System32\\\", \"C:\\Windows\\SystemTemp\\\", \"C:\\Windows\\SysWOW64\\\", and \"C:\\Windows\\WinSxS\\\". Additionally, an exception is made for instances where \"dbgcore.dll\" is loaded from a path ending with \"\\Steam\\bin\\cef\\cef.win7x64\\dbgcore.dll\" to minimize false positives from legitimate applications, including certain games that may use this library. The goal is to capture unusual activities that could indicate an attacker is attempting to disguise malicious activities by leveraging the sideloading of the \"dbgcore.dll\" file, a technique often employed to bypass security measures. It is important to note that some legitimate applications may trigger this detection by loading their own versions of \"dbgcore.dll\" from non-standard locations, which should be considered when evaluating alerts. The severity level for this detection has been set to medium, reflecting the balance between the potential risk of the activity and the likelihood of false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious command line execution that invokes PowerShell with reference to an AppData folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious command line execution that invokes PowerShell with reference to an AppData folder, you should monitor the creation of processes on Windows systems for specific patterns in their command lines. Look for the execution of PowerShell, indicated by the presence of 'powershell.exe', '\\powershell', '\\pwsh', or 'pwsh.exe' in the command line. Additionally, detect command lines that include both a '/c ' segment and reference to the '\\AppData\\' folder, with further specification to either 'Local\\' or 'Roaming\\' directories within AppData. Be aware that genuine administrative scripts may also trigger this detection, hence they are considered potential false positives. The investigative focus here is on identifying malicious activity involving PowerShell, especially when it is possibly being used to execute scripts or commands from directories commonly abused by attackers, like AppData. This detection strategy aligns with known tactics and techniques used by adversaries to execute code on a compromised system, reflecting its importance in defense strategies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'powershell.exe'\n            - '\\powershell'\n            - '\\pwsh'\n            - 'pwsh.exe'\n    selection2:\n        CommandLine|contains|all:\n            - '/c '\n            - '\\AppData\\'\n        CommandLine|contains:\n            - 'Local\\'\n            - 'Roaming\\'\n    condition: all of selection*\nfalsepositives:\n    - Administrative scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'powershell.exe'\n            - '\\powershell'\n            - '\\pwsh'\n            - 'pwsh.exe'\n    selection2:\n        CommandLine|contains|all:\n            - '/c '\n            - '\\AppData\\'\n        CommandLine|contains:\n            - 'Local\\'\n            - 'Roaming\\'\n    condition: all of selection*\nfalsepositives:\n    - Administrative scripts\nlevel: medium\n",
      "question": "suspicious command line execution that invokes PowerShell with reference to an AppData folder",
      "answer": "In order to detect a suspicious command line execution that invokes PowerShell with reference to an AppData folder, you should monitor the creation of processes on Windows systems for specific patterns in their command lines. Look for the execution of PowerShell, indicated by the presence of 'powershell.exe', '\\powershell', '\\pwsh', or 'pwsh.exe' in the command line. Additionally, detect command lines that include both a '/c ' segment and reference to the '\\AppData\\' folder, with further specification to either 'Local\\' or 'Roaming\\' directories within AppData. Be aware that genuine administrative scripts may also trigger this detection, hence they are considered potential false positives. The investigative focus here is on identifying malicious activity involving PowerShell, especially when it is possibly being used to execute scripts or commands from directories commonly abused by attackers, like AppData. This detection strategy aligns with known tactics and techniques used by adversaries to execute code on a compromised system, reflecting its importance in defense strategies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of findstr to identify and execute a lnk file as seen within the HHS redirect attack.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of findstr to identify and execute a lnk file as seen within the HHS redirect attack, you should: monitor Windows process creation logs for instances where the findstr.exe utility is invoked, which might be indicated by the process image name ending with '\\findstr.exe' or having an OriginalFileName attribute of 'FINDSTR.EXE'. Additionally, check for command-line arguments that end with '.lnk', signaling an attempt to execute a shortcut file. This detection strategy is crucial for identifying potentially malicious activities associated with the execution of shortcut files that could be part of a broader attack technique. Note that while this method is reliable, there might be instances where it could produce alerts not tied to malicious activities, although such false positives are currently unspecified. The severity of this detection strategy is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli:\n        CommandLine|endswith: '.lnk'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli:\n        CommandLine|endswith: '.lnk'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of findstr to identify and execute a lnk file as seen within the HHS redirect attack",
      "answer": "In order to detect usage of findstr to identify and execute a lnk file as seen within the HHS redirect attack, you should: monitor Windows process creation logs for instances where the findstr.exe utility is invoked, which might be indicated by the process image name ending with '\\findstr.exe' or having an OriginalFileName attribute of 'FINDSTR.EXE'. Additionally, check for command-line arguments that end with '.lnk', signaling an attempt to execute a shortcut file. This detection strategy is crucial for identifying potentially malicious activities associated with the execution of shortcut files that could be part of a broader attack technique. Note that while this method is reliable, there might be instances where it could produce alerts not tied to malicious activities, although such false positives are currently unspecified. The severity of this detection strategy is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential abuse of the \"register_app.vbs\" script that is part of the Windows SDK. The script offers the capability to register new VSS/VDS Provider as a COM+ application. Attackers can use this to install malicious DLLs for persistence and execution..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential abuse of the \"register_app.vbs\" script that is part of the Windows SDK, which attackers can use to register new VSS/VDS Provider as a COM+ application for the purpose of installing malicious DLLs for persistence and execution, you should: focus on monitoring process creation events within Windows environments. Look specifically for the creation of processes involving 'cscript.exe' or 'wscript.exe', which are Windows scripting engines capable of running .vbs scripts. Additionally, pay close attention to the command line used during the process creation, especially if it contains '.vbs -register ', which indicates the execution of the \"register_app.vbs\" script. This script is known to be leveraged by attackers to install and register malicious DLLs as part of their persistence or execution mechanism in the system. It's important to consider that there may be legitimate use cases for running VB scripts with similar command line flags, so carefully analyze the context to reduce potential false positives. The level of attention suggested for this activity is medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n        - OriginalFileName:\n            - 'cscript.exe'\n            - 'wscript.exe'\n    selection_cli:\n        CommandLine|contains: '.vbs -register ' # register_app.vbs\n    condition: all of selection*\nfalsepositives:\n    - Other VB scripts that leverage the same starting command line flags\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n        - OriginalFileName:\n            - 'cscript.exe'\n            - 'wscript.exe'\n    selection_cli:\n        CommandLine|contains: '.vbs -register ' # register_app.vbs\n    condition: all of selection*\nfalsepositives:\n    - Other VB scripts that leverage the same starting command line flags\nlevel: medium\n",
      "question": "potential abuse of the \"register_app.vbs\" script that is part of the Windows SDK. The script offers the capability to register new VSS/VDS Provider as a COM+ application. Attackers can use this to install malicious DLLs for persistence and execution.",
      "answer": "In order to detect potential abuse of the \"register_app.vbs\" script that is part of the Windows SDK, which attackers can use to register new VSS/VDS Provider as a COM+ application for the purpose of installing malicious DLLs for persistence and execution, you should: focus on monitoring process creation events within Windows environments. Look specifically for the creation of processes involving 'cscript.exe' or 'wscript.exe', which are Windows scripting engines capable of running .vbs scripts. Additionally, pay close attention to the command line used during the process creation, especially if it contains '.vbs -register ', which indicates the execution of the \"register_app.vbs\" script. This script is known to be leveraged by attackers to install and register malicious DLLs as part of their persistence or execution mechanism in the system. It's important to consider that there may be legitimate use cases for running VB scripts with similar command line flags, so carefully analyze the context to reduce potential false positives. The level of attention suggested for this activity is medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls to create or execute a scheduled task.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls to create or execute a scheduled task, you should: Monitor application logs, specifically from the RPC Firewall, for events that match a specific pattern indicating such activities. This involves ensuring all processes are covered by the RPC Firewall with the configuration to audit and block based on a unique identifier (uuid: 86d35949-83c9-4044-b424-db363231fd0c). You should look for events logged under the RPCFW EventLog with the EventID of 3, which points to operations matching the InterfaceUuid of 86d35949-83c9-4044-b424-db363231fd0c. Particularly, pay attention to operations with OpNum values of 1, 3, 4, 10, 11, 12, 13, 14, and 15, as these operation numbers are indicative of actions related to the creation or execution of scheduled tasks. Be aware of the potential for unknown false positives, and consider this detection to have a high importance level due to its implications for security. This approach is aligned with identifying suspicious activities associated with the execution of unauthorized scheduled tasks, which could be indicative of malicious intent or compromise within the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:86d35949-83c9-4044-b424-db363231fd0c\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 86d35949-83c9-4044-b424-db363231fd0c\n        OpNum:\n            - 1\n            - 3\n            - 4\n            - 10\n            - 11\n            - 12\n            - 13\n            - 14\n            - 15\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:86d35949-83c9-4044-b424-db363231fd0c\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 86d35949-83c9-4044-b424-db363231fd0c\n        OpNum:\n            - 1\n            - 3\n            - 4\n            - 10\n            - 11\n            - 12\n            - 13\n            - 14\n            - 15\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "remote RPC calls to create or execute a scheduled task",
      "answer": "In order to detect remote RPC calls to create or execute a scheduled task, you should: Monitor application logs, specifically from the RPC Firewall, for events that match a specific pattern indicating such activities. This involves ensuring all processes are covered by the RPC Firewall with the configuration to audit and block based on a unique identifier (uuid: 86d35949-83c9-4044-b424-db363231fd0c). You should look for events logged under the RPCFW EventLog with the EventID of 3, which points to operations matching the InterfaceUuid of 86d35949-83c9-4044-b424-db363231fd0c. Particularly, pay attention to operations with OpNum values of 1, 3, 4, 10, 11, 12, 13, 14, and 15, as these operation numbers are indicative of actions related to the creation or execution of scheduled tasks. Be aware of the potential for unknown false positives, and consider this detection to have a high importance level due to its implications for security. This approach is aligned with identifying suspicious activities associated with the execution of unauthorized scheduled tasks, which could be indicative of malicious intent or compromise within the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of PSAttack PowerShell hack tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of PSAttack PowerShell hack tool, you should: Focus on monitoring PowerShell scripts within the Windows environment, specifically looking into the Script Block Logging feature. This is predicated on having Script Block Logging enabled to properly log script activity. Your detection mechanism should key in on identifying scripts that contain the specific text 'PS ATTACK!!!'. This method of detection is categorized under PowerShell script monitoring (ps_script) and is crucial for identifying instances where the PSAttack tool might be employed. Mark any detections with a high level of concern due to the potential severity of such tool usage in your environment. The absence of known false positives highlights the specificity of this detection criterion, although it remains important to consider the context within which the script was found to ensure accurate interpretation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'PS ATTACK!!!'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'PS ATTACK!!!'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of PSAttack PowerShell hack tool",
      "answer": "In order to detect the use of PSAttack PowerShell hack tool, you should: Focus on monitoring PowerShell scripts within the Windows environment, specifically looking into the Script Block Logging feature. This is predicated on having Script Block Logging enabled to properly log script activity. Your detection mechanism should key in on identifying scripts that contain the specific text 'PS ATTACK!!!'. This method of detection is categorized under PowerShell script monitoring (ps_script) and is crucial for identifying instances where the PSAttack tool might be employed. Mark any detections with a high level of concern due to the potential severity of such tool usage in your environment. The absence of known false positives highlights the specificity of this detection criterion, although it remains important to consider the context within which the script was found to ensure accurate interpretation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting driver load of the System Informer tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect driver load of the System Informer tool, you should monitor Windows driver load events for any instances where the 'SystemInformer.sys' file is loaded. Specifically, lookout for situations where the loaded image's name ends with '\\SystemInformer.sys'. Moreover, it is crucial to scrutinize the hashes associated with the 'SystemInformer.sys' file. A set of specific SHA256 hashes has been identified that correlate with known instances of the System Informer tool. If any of these particular hashes are detected in connection with the loading of 'SystemInformer.sys', it may indicate an operational instance of the tool. These hashes are instrumental in distinguishing between legitimate and potentially malicious uses of System Informer. \n\nIt's important to note that while System Informer can be legitimately used by system administrators or developers for various purposes, its detection in driver load events might also signify misuse. Therefore, although the detection of these hashes or the loading of 'SystemInformer.sys' raises a medium-level alert, consider employing additional contextual filters or investigative actions to ascertain the intent behind its usage in your environment. This approach helps in reducing false positives and ensuring that routine administrative activities are not disrupted.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_image:\n        ImageLoaded|endswith: '\\SystemInformer.sys'\n    selection_systeminformer_sysmon:\n        Hashes|contains:\n            - 'SHA256=8B9AD98944AC9886EA4CB07700E71B78BE4A2740934BB7E46CA3B56A7C59AD24'\n            - 'SHA256=A41348BEC147CA4D9EA2869817527EB5CEA2E20202AF599D2B30625433BCF454'\n            - 'SHA256=38EE0A88AF8535A11EFE8D8DA9C6812AA07067B75A64D99705A742589BDD846D'\n            - 'SHA256=A773891ACF203A7EB0C0D30942FB1347648F1CD918AE2BFD9A4857B4DCF5081B'\n            - 'SHA256=4C3B81AC88A987BBDF7D41FA0AECC2CEDF5B9BD2F45E7A21F376D05345FC211D'\n            - 'SHA256=3241BC14BEC51CE6A691B9A3562E5C1D52E9D057D27A3D67FD0B245C350B6D34'\n            - 'SHA256=047C42E9BBA28366868847C7DAFC1E043FB038C796422D37220493517D68EE89'\n            - 'SHA256=18931DC81E95D0020466FA091E16869DBE824E543A4C2C8FE644FA71A0F44FEB'\n            - 'SHA256=B4C2EF76C204273132FDE38F0DED641C2C5EE767652E64E4C4071A4A973B6C1B'\n            - 'SHA256=640954AFC268565F7DAA6E6F81A8EE05311E33E34332B501A3C3FE5B22ADEA97'\n            - 'SHA256=251BE949F662C838718F8AA0A5F8211FB90346D02BD63FF91E6B224E0E01B656'\n            - 'SHA256=E2606F272F7BA054DF16BE464FDA57211EF0D14A0D959F9C8DCB0575DF1186E4'\n            - 'SHA256=3A9E1D17BEEB514F1B9B3BACAEE7420285DE5CBDCE89C5319A992C6CBD1DE138'\n    selection_systeminformer_hashes:\n        sha256:\n            - '8b9ad98944ac9886ea4cb07700e71b78be4a2740934bb7e46ca3b56a7c59ad24'\n            - 'a41348bec147ca4d9ea2869817527eb5cea2e20202af599d2b30625433bcf454'\n            - '38ee0a88af8535a11efe8d8da9c6812aa07067b75a64d99705a742589bdd846d'\n            - 'a773891acf203a7eb0c0d30942fb1347648f1cd918ae2bfd9a4857b4dcf5081b'\n            - '4c3b81ac88a987bbdf7d41fa0aecc2cedf5b9bd2f45e7a21f376d05345fc211d'\n            - '3241bc14bec51ce6a691b9a3562e5c1d52e9d057d27a3d67fd0b245c350b6d34'\n            - '047c42e9bba28366868847c7dafc1e043fb038c796422d37220493517d68ee89'\n            - '18931dc81e95d0020466fa091e16869dbe824e543a4c2c8fe644fa71a0f44feb'\n            - 'b4c2ef76c204273132fde38f0ded641c2c5ee767652e64e4c4071a4a973b6c1b'\n            - '640954afc268565f7daa6e6f81a8ee05311e33e34332b501a3c3fe5b22adea97'\n            - '251be949f662c838718f8aa0a5f8211fb90346d02bd63ff91e6b224e0e01b656'\n            - 'e2606f272f7ba054df16be464fda57211ef0d14a0d959f9c8dcb0575df1186e4'\n            - '3a9e1d17beeb514f1b9b3bacaee7420285de5cbdce89c5319a992c6cbd1de138'\n    condition: 1 of selection_*\nfalsepositives:\n    - System Informer is regularly used legitimately by system administrators or developers. Apply additional filters accordingly\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_image:\n        ImageLoaded|endswith: '\\SystemInformer.sys'\n    selection_systeminformer_sysmon:\n        Hashes|contains:\n            - 'SHA256=8B9AD98944AC9886EA4CB07700E71B78BE4A2740934BB7E46CA3B56A7C59AD24'\n            - 'SHA256=A41348BEC147CA4D9EA2869817527EB5CEA2E20202AF599D2B30625433BCF454'\n            - 'SHA256=38EE0A88AF8535A11EFE8D8DA9C6812AA07067B75A64D99705A742589BDD846D'\n            - 'SHA256=A773891ACF203A7EB0C0D30942FB1347648F1CD918AE2BFD9A4857B4DCF5081B'\n            - 'SHA256=4C3B81AC88A987BBDF7D41FA0AECC2CEDF5B9BD2F45E7A21F376D05345FC211D'\n            - 'SHA256=3241BC14BEC51CE6A691B9A3562E5C1D52E9D057D27A3D67FD0B245C350B6D34'\n            - 'SHA256=047C42E9BBA28366868847C7DAFC1E043FB038C796422D37220493517D68EE89'\n            - 'SHA256=18931DC81E95D0020466FA091E16869DBE824E543A4C2C8FE644FA71A0F44FEB'\n            - 'SHA256=B4C2EF76C204273132FDE38F0DED641C2C5EE767652E64E4C4071A4A973B6C1B'\n            - 'SHA256=640954AFC268565F7DAA6E6F81A8EE05311E33E34332B501A3C3FE5B22ADEA97'\n            - 'SHA256=251BE949F662C838718F8AA0A5F8211FB90346D02BD63FF91E6B224E0E01B656'\n            - 'SHA256=E2606F272F7BA054DF16BE464FDA57211EF0D14A0D959F9C8DCB0575DF1186E4'\n            - 'SHA256=3A9E1D17BEEB514F1B9B3BACAEE7420285DE5CBDCE89C5319A992C6CBD1DE138'\n    selection_systeminformer_hashes:\n        sha256:\n            - '8b9ad98944ac9886ea4cb07700e71b78be4a2740934bb7e46ca3b56a7c59ad24'\n            - 'a41348bec147ca4d9ea2869817527eb5cea2e20202af599d2b30625433bcf454'\n            - '38ee0a88af8535a11efe8d8da9c6812aa07067b75a64d99705a742589bdd846d'\n            - 'a773891acf203a7eb0c0d30942fb1347648f1cd918ae2bfd9a4857b4dcf5081b'\n            - '4c3b81ac88a987bbdf7d41fa0aecc2cedf5b9bd2f45e7a21f376d05345fc211d'\n            - '3241bc14bec51ce6a691b9a3562e5c1d52e9d057d27a3d67fd0b245c350b6d34'\n            - '047c42e9bba28366868847c7dafc1e043fb038c796422d37220493517d68ee89'\n            - '18931dc81e95d0020466fa091e16869dbe824e543a4c2c8fe644fa71a0f44feb'\n            - 'b4c2ef76c204273132fde38f0ded641c2c5ee767652e64e4c4071a4a973b6c1b'\n            - '640954afc268565f7daa6e6f81a8ee05311e33e34332b501a3c3fe5b22adea97'\n            - '251be949f662c838718f8aa0a5f8211fb90346d02bd63ff91e6b224e0e01b656'\n            - 'e2606f272f7ba054df16be464fda57211ef0d14a0d959f9c8dcb0575df1186e4'\n            - '3a9e1d17beeb514f1b9b3bacaee7420285de5cbdce89c5319a992c6cbd1de138'\n    condition: 1 of selection_*\nfalsepositives:\n    - System Informer is regularly used legitimately by system administrators or developers. Apply additional filters accordingly\nlevel: medium\n",
      "question": "driver load of the System Informer tool",
      "answer": "In order to detect driver load of the System Informer tool, you should monitor Windows driver load events for any instances where the 'SystemInformer.sys' file is loaded. Specifically, lookout for situations where the loaded image's name ends with '\\SystemInformer.sys'. Moreover, it is crucial to scrutinize the hashes associated with the 'SystemInformer.sys' file. A set of specific SHA256 hashes has been identified that correlate with known instances of the System Informer tool. If any of these particular hashes are detected in connection with the loading of 'SystemInformer.sys', it may indicate an operational instance of the tool. These hashes are instrumental in distinguishing between legitimate and potentially malicious uses of System Informer. \n\nIt's important to note that while System Informer can be legitimately used by system administrators or developers for various purposes, its detection in driver load events might also signify misuse. Therefore, although the detection of these hashes or the loading of 'SystemInformer.sys' raises a medium-level alert, consider employing additional contextual filters or investigative actions to ascertain the intent behind its usage in your environment. This approach helps in reducing false positives and ensuring that routine administrative activities are not disrupted."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect PetitPotam coerced authentication activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PetitPotam coerced authentication activity, you should: Monitor security logs from Windows systems with a focus on events generated under the advanced audit policy setting for \"Object Access > Detailed File Share\", looking specifically for events tagged with Event ID 5145. This event signals a file share access attempt, and particular attention should be made to accesses where the share name starts with double backslashes (\\\\) and ends with '\\IPC$', which indicates an attempt to interact with the IPC$ share. The IPC$ share is a special shared folder used by Windows to enable remote procedure call (RPC) and other networking functions. A critical element to observe is the RelativeTargetName being set to 'lsarpc', which refers to the Local Security Authority (LSA) Remote Procedure Call, a common target in coercion attacks like PetitPotam for its role in authentication mechanisms. Furthermore, if the SubjectUserName in the event is recorded as 'ANONYMOUS LOGON', it raises additional suspicion. This username is often used in such attacks to exploit and coerce authentication without valid credentials. All these indicators combined represent a significant security event, potentially indicating an exploit attempt related to the PetitPotam vulnerability. This vulnerability leverages the MS-EFSRPC protocol to force remote Windows servers to authenticate against a threat actor-controlled machine, often leading to NTLM Relay attacks where the attacker can gain elevated privileges. \n\nGiven the potential severeness of the indicated activities, these events should be closely scrutinized, although it's noted that there might be false positives, and feedback to adjust detection mechanisms is welcomed. The primary intention is to identify and mitigate techniques associated with tactics such as Credential Access, Lateral Movement, and potentially others depending on the attacker's objectives following successful exploitation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 5145\n        ShareName|startswith: '\\\\\\\\' # looking for the string \\\\somethink\\IPC$\n        ShareName|endswith: '\\IPC$'\n        RelativeTargetName: lsarpc\n        SubjectUserName: ANONYMOUS LOGON\n    condition: selection\nfalsepositives:\n    - Unknown. Feedback welcomed.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 5145\n        ShareName|startswith: '\\\\\\\\' # looking for the string \\\\somethink\\IPC$\n        ShareName|endswith: '\\IPC$'\n        RelativeTargetName: lsarpc\n        SubjectUserName: ANONYMOUS LOGON\n    condition: selection\nfalsepositives:\n    - Unknown. Feedback welcomed.\nlevel: high\n",
      "question": "Detect PetitPotam coerced authentication activity.",
      "answer": "In order to detect PetitPotam coerced authentication activity, you should: Monitor security logs from Windows systems with a focus on events generated under the advanced audit policy setting for \"Object Access > Detailed File Share\", looking specifically for events tagged with Event ID 5145. This event signals a file share access attempt, and particular attention should be made to accesses where the share name starts with double backslashes (\\\\) and ends with '\\IPC$', which indicates an attempt to interact with the IPC$ share. The IPC$ share is a special shared folder used by Windows to enable remote procedure call (RPC) and other networking functions. A critical element to observe is the RelativeTargetName being set to 'lsarpc', which refers to the Local Security Authority (LSA) Remote Procedure Call, a common target in coercion attacks like PetitPotam for its role in authentication mechanisms. Furthermore, if the SubjectUserName in the event is recorded as 'ANONYMOUS LOGON', it raises additional suspicion. This username is often used in such attacks to exploit and coerce authentication without valid credentials. All these indicators combined represent a significant security event, potentially indicating an exploit attempt related to the PetitPotam vulnerability. This vulnerability leverages the MS-EFSRPC protocol to force remote Windows servers to authenticate against a threat actor-controlled machine, often leading to NTLM Relay attacks where the attacker can gain elevated privileges. \n\nGiven the potential severeness of the indicated activities, these events should be closely scrutinized, although it's noted that there might be false positives, and feedback to adjust detection mechanisms is welcomed. The primary intention is to identify and mitigate techniques associated with tactics such as Credential Access, Lateral Movement, and potentially others depending on the attacker's objectives following successful exploitation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software, you should: Look for events where the 'waveedit.dll' file is loaded, in the context of Windows operating system image load logging. The detection focuses on identifying situations where 'waveedit.dll' is loaded outside of the legitimate Nero WaveEditor directories. Specifically, if the loaded 'waveedit.dll' does not originate from the legitimate Nero software paths - either 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' or 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' and their respective directories - it might indicate an attempt of DLL sideloading. It's highly unlikely that there will be false positives given the specificity of these conditions, meaning if an alert is triggered it suggests a high probability of a malicious activity. Through this method, the focus is on spotting potentially malicious exploitation of trusted processes to execute unauthorized or malicious code, indicative of techniques employed in initial access or persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\waveedit.dll'\n    filter_main_legit_path:\n        Image:\n            - 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe'\n            - 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe'\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\'\n            - 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\waveedit.dll'\n    filter_main_legit_path:\n        Image:\n            - 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe'\n            - 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe'\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\'\n            - 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software.",
      "answer": "In order to detect potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software, you should: Look for events where the 'waveedit.dll' file is loaded, in the context of Windows operating system image load logging. The detection focuses on identifying situations where 'waveedit.dll' is loaded outside of the legitimate Nero WaveEditor directories. Specifically, if the loaded 'waveedit.dll' does not originate from the legitimate Nero software paths - either 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' or 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' and their respective directories - it might indicate an attempt of DLL sideloading. It's highly unlikely that there will be false positives given the specificity of these conditions, meaning if an alert is triggered it suggests a high probability of a malicious activity. Through this method, the focus is on spotting potentially malicious exploitation of trusted processes to execute unauthorized or malicious code, indicative of techniques employed in initial access or persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting schtasks.exe create task from user AppData\\Local\\Temp.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unauthorized task creation from a user's AppData\\Local\\Temp directory using schtasks.exe, you should monitor for the execution of schtasks.exe (the Windows Task Scheduler command line utility) specifically looking for its use in creating a new task. The creation command should involve paths targeting the AppData\\Local\\Temp directory of a user's profile, indicating a potential attempt to establish persistence or execute malicious tasks from a generally less monitored location on the system. \n\nSpecifically, the detection focuses on identifying command line invocations of schtasks.exe that include the '/Create ' option, suggesting a new scheduled task is being created, and also involve paths that lead to the AppData\\Local\\Temp directory. However, there's an exception to this rule where command lines creating a task named \"klcp_update\" with an XML configuration file named 'klcp_update_task.xml' are not considered malicious based on this particular detection logic, possibly because they represent known, legitimate usage patterns.\n\nThis monitoring approach should apply to systems running Windows, under the category that captures process creation logs. These logs are crucial for identifying the execution of scheduled tasks commands that could indicate a compromise or an attempt at gaining persistence on the system by adversaries.\n\nIn essence, the aim here is to catch potentially malicious activity where adversaries might leverage the Windows Task Scheduler to run malware or scripts from locations typically used for temporary storage of files, making it a critical aspect of defense against tactics involving the execution of scheduled tasks for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    schtasks:\n        Image|endswith: '\\schtasks.exe'\n    option:\n        CommandLine|contains|all:\n            - '/Create '\n            - '\\AppData\\Local\\Temp'\n    filter_klite_codec:\n        CommandLine|contains|all:\n            - '/Create /TN \"klcp_update\" /XML '\n            - '\\klcp_update_task.xml'\n    condition: schtasks and option and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    schtasks:\n        Image|endswith: '\\schtasks.exe'\n    option:\n        CommandLine|contains|all:\n            - '/Create '\n            - '\\AppData\\Local\\Temp'\n    filter_klite_codec:\n        CommandLine|contains|all:\n            - '/Create /TN \"klcp_update\" /XML '\n            - '\\klcp_update_task.xml'\n    condition: schtasks and option and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "schtasks.exe create task from user AppData\\Local\\Temp",
      "answer": "In order to detect unauthorized task creation from a user's AppData\\Local\\Temp directory using schtasks.exe, you should monitor for the execution of schtasks.exe (the Windows Task Scheduler command line utility) specifically looking for its use in creating a new task. The creation command should involve paths targeting the AppData\\Local\\Temp directory of a user's profile, indicating a potential attempt to establish persistence or execute malicious tasks from a generally less monitored location on the system. \n\nSpecifically, the detection focuses on identifying command line invocations of schtasks.exe that include the '/Create ' option, suggesting a new scheduled task is being created, and also involve paths that lead to the AppData\\Local\\Temp directory. However, there's an exception to this rule where command lines creating a task named \"klcp_update\" with an XML configuration file named 'klcp_update_task.xml' are not considered malicious based on this particular detection logic, possibly because they represent known, legitimate usage patterns.\n\nThis monitoring approach should apply to systems running Windows, under the category that captures process creation logs. These logs are crucial for identifying the execution of scheduled tasks commands that could indicate a compromise or an attempt at gaining persistence on the system by adversaries.\n\nIn essence, the aim here is to catch potentially malicious activity where adversaries might leverage the Windows Task Scheduler to run malware or scripts from locations typically used for temporary storage of files, making it a critical aspect of defense against tactics involving the execution of scheduled tasks for malicious purposes."
    }
  }
]