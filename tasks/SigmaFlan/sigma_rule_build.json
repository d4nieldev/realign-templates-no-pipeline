[
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an adversary who may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network, you should monitor Linux systems for specific activities recorded by the Audit daemon (auditd). Specifically, look for execution events ('execve') involving the use of common compression tools such as 'zip', 'gzip' combined with the '-f' option, and 'tar' with options that include '-c'. These activities can indicate data is being prepared for compression, which could be a precursor to exfiltration. It's important to consider that there can be legitimate uses of these archiving tools by authorized users, which could lead to false positives. The risk level associated with these activities is considered low, but it's vital to have these detections in place as part of a broader strategy to identify potential data exfiltration attempts. These activities are indicative of tactics and techniques related to Collection and Exfiltration.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection1:\n        type: 'execve'\n        a0: 'zip'\n    selection2:\n        type: 'execve'\n        a0: 'gzip'\n        a1: '-f'\n    selection3:\n        type: 'execve'\n        a0: 'tar'\n        a1|contains: '-c'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate use of archiving tools by legitimate user.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection1:\n        type: 'execve'\n        a0: 'zip'\n    selection2:\n        type: 'execve'\n        a0: 'gzip'\n        a1: '-f'\n    selection3:\n        type: 'execve'\n        a0: 'tar'\n        a1|contains: '-c'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate use of archiving tools by legitimate user.\nlevel: low\n",
      "question": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.",
      "answer": "In order to detect an adversary who may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network, you should monitor Linux systems for specific activities recorded by the Audit daemon (auditd). Specifically, look for execution events ('execve') involving the use of common compression tools such as 'zip', 'gzip' combined with the '-f' option, and 'tar' with options that include '-c'. These activities can indicate data is being prepared for compression, which could be a precursor to exfiltration. It's important to consider that there can be legitimate uses of these archiving tools by authorized users, which could lead to false positives. The risk level associated with these activities is considered low, but it's vital to have these detections in place as part of a broader strategy to identify potential data exfiltration attempts. These activities are indicative of tactics and techniques related to Collection and Exfiltration."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user creates action secret for the organization, environment, codespaces or repository..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user creates action secret for the organization, environment, codespaces or repository, you should monitor GitHub's audit logs, focusing on specific actions indicative of such activities. This monitoring requires the audit log streaming feature to be active; instructions for enabling this feature are found in GitHub's documentation. Key actions to watch include the creation of actions secrets at the organizational level, within specific environments, for codespaces, or directly in repositories. \n\nWhen these activities are detected, it\u2019s important to record several pieces of information to enable thorough analysis. Details such as the action taken, the actor who performed the action, the organization involved, and the country code of the actor's location should be captured. \n\nBe aware that monitoring for these activities might result in a significant number of alerts, especially in environments where the creation of new secrets is a common and necessary operation. Therefore, verify the legitimacy of the actor involved in creating secrets to reduce the potential for false positives. Generally, this scenario is classified at a low threat level, suggesting that while important to track, it might not always indicate a malicious or unauthorized activity by itself.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: github\n    service: audit\n    definition: 'Requirements: The audit log streaming feature must be enabled to be able to receive such logs. You can enable following the documentation here: https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise#setting-up-audit-log-streaming'\ndetection:\n    selection:\n        action:\n            - 'org.create_actions_secret'\n            - 'environment.create_actions_secret'\n            - 'codespaces.create_an_org_secret'\n            - 'repo.create_actions_secret'\n    condition: selection\nfields:\n    - 'action'\n    - 'actor'\n    - 'org'\n    - 'actor_location.country_code'\nfalsepositives:\n     - This detection cloud be noisy depending on the environment. It is recommended to keep a check on the new secrets when created and validate the \"actor\".\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: github\n    service: audit\n    definition: 'Requirements: The audit log streaming feature must be enabled to be able to receive such logs. You can enable following the documentation here: https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise#setting-up-audit-log-streaming'\ndetection:\n    selection:\n        action:\n            - 'org.create_actions_secret'\n            - 'environment.create_actions_secret'\n            - 'codespaces.create_an_org_secret'\n            - 'repo.create_actions_secret'\n    condition: selection\nfields:\n    - 'action'\n    - 'actor'\n    - 'org'\n    - 'actor_location.country_code'\nfalsepositives:\n     - This detection cloud be noisy depending on the environment. It is recommended to keep a check on the new secrets when created and validate the \"actor\".\nlevel: low\n",
      "question": "user creates action secret for the organization, environment, codespaces or repository.",
      "answer": "In order to detect when a user creates action secret for the organization, environment, codespaces or repository, you should monitor GitHub's audit logs, focusing on specific actions indicative of such activities. This monitoring requires the audit log streaming feature to be active; instructions for enabling this feature are found in GitHub's documentation. Key actions to watch include the creation of actions secrets at the organizational level, within specific environments, for codespaces, or directly in repositories. \n\nWhen these activities are detected, it\u2019s important to record several pieces of information to enable thorough analysis. Details such as the action taken, the actor who performed the action, the organization involved, and the country code of the actor's location should be captured. \n\nBe aware that monitoring for these activities might result in a significant number of alerts, especially in environments where the creation of new secrets is a common and necessary operation. Therefore, verify the legitimacy of the actor involved in creating secrets to reduce the potential for false positives. Generally, this scenario is classified at a low threat level, suggesting that while important to track, it might not always indicate a malicious or unauthorized activity by itself."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Netcat. Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of Netcat, which adversaries may use for communication between host and command and control (C2) server or among infected hosts within a network, you should: Monitor the process creation logs on Windows systems for signs of Netcat execution. Specifically, watch for the appearance of processes whose image names end with '\\nc.exe', '\\ncat.exe', or '\\netcat.exe'. Additionally, pay close attention to the command line parameters used with these processes. Commonly, Netcat is executed with specific command line arguments that enable listening modes or specify verbose output, such as ' -lvp ', ' -lvnp', ' -l -v -p ', ' -lv -p ', ' -l --proxy-type http ', ' -vnl --exec ', ' -vnl -e ', ' --lua-exec ', or ' --sh-exec '. It's important to note that some uses of Netcat are legitimate, so occurrences might not always indicate malicious activity. However, given the right context, these execution patterns can signify hostile actions aiming to establish unauthorized network communications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # can not use OriginalFileName as is empty\n        Image|endswith:\n            - '\\nc.exe'\n            - '\\ncat.exe'\n            - '\\netcat.exe'\n    selection_cmdline:\n        # Typical command lines\n        CommandLine|contains:\n            - ' -lvp '\n            - ' -lvnp'\n            - ' -l -v -p '\n            - ' -lv -p '\n            - ' -l --proxy-type http '\n            #- ' --exec cmd.exe ' # Not specific enough for netcat\n            - ' -vnl --exec '\n            - ' -vnl -e '\n            - ' --lua-exec '\n            - ' --sh-exec '\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate ncat use\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # can not use OriginalFileName as is empty\n        Image|endswith:\n            - '\\nc.exe'\n            - '\\ncat.exe'\n            - '\\netcat.exe'\n    selection_cmdline:\n        # Typical command lines\n        CommandLine|contains:\n            - ' -lvp '\n            - ' -lvnp'\n            - ' -l -v -p '\n            - ' -lv -p '\n            - ' -l --proxy-type http '\n            #- ' --exec cmd.exe ' # Not specific enough for netcat\n            - ' -vnl --exec '\n            - ' -vnl -e '\n            - ' --lua-exec '\n            - ' --sh-exec '\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate ncat use\nlevel: high\n",
      "question": "execution of Netcat. Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network",
      "answer": "In order to detect execution of Netcat, which adversaries may use for communication between host and command and control (C2) server or among infected hosts within a network, you should: Monitor the process creation logs on Windows systems for signs of Netcat execution. Specifically, watch for the appearance of processes whose image names end with '\\nc.exe', '\\ncat.exe', or '\\netcat.exe'. Additionally, pay close attention to the command line parameters used with these processes. Commonly, Netcat is executed with specific command line arguments that enable listening modes or specify verbose output, such as ' -lvp ', ' -lvnp', ' -l -v -p ', ' -lv -p ', ' -l --proxy-type http ', ' -vnl --exec ', ' -vnl -e ', ' --lua-exec ', or ' --sh-exec '. It's important to note that some uses of Netcat are legitimate, so occurrences might not always indicate malicious activity. However, given the right context, these execution patterns can signify hostile actions aiming to establish unauthorized network communications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Rundll32.exe with DLL files masquerading as image files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of Rundll32.exe with DLL files masquerading as image files, you should: monitor process creation events on Windows systems for instances where the process image name ends with `\\rundll32.exe` or has the original file name `RUNDLL32.exe`. Additionally, scrutiny should be directed towards the command line arguments of these process events, especially looking for the presence of file extensions typically associated with image files (e.g., `.bmp`, `.cr2`, `.eps`, `.gif`, `.ico`, `.jpeg`, `.jpg`, `.nef`, `.orf`, `.png`, `.raw`, `.sr2`, `.tif`, `.tiff`). This combination of checks is critical because malicious actors might disguise DLL files as image files to evade detection. It's important to examine all related conditions carefully to mitigate false positives, though they are generally considered an unknown factor due to the high severity level of this detection strategy.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.bmp'\n            - '.cr2'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.tif'\n            - '.tiff'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.bmp'\n            - '.cr2'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.tif'\n            - '.tiff'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of Rundll32.exe with DLL files masquerading as image files",
      "answer": "In order to detect the execution of Rundll32.exe with DLL files masquerading as image files, you should: monitor process creation events on Windows systems for instances where the process image name ends with `\\rundll32.exe` or has the original file name `RUNDLL32.exe`. Additionally, scrutiny should be directed towards the command line arguments of these process events, especially looking for the presence of file extensions typically associated with image files (e.g., `.bmp`, `.cr2`, `.eps`, `.gif`, `.ico`, `.jpeg`, `.jpg`, `.nef`, `.orf`, `.png`, `.raw`, `.sr2`, `.tif`, `.tiff`). This combination of checks is critical because malicious actors might disguise DLL files as image files to evade detection. It's important to examine all related conditions carefully to mitigate false positives, though they are generally considered an unknown factor due to the high severity level of this detection strategy."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting segmentation fault error message caused by a crashing apache worker process.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a segmentation fault error message caused by a crashing Apache worker process, you should analyze Apache server's error.log files, which necessitates the capability to collect and scrutinize this specific log file. You will be specifically looking for occurrences of the phrase \"exit signal Segmentation Fault\" within these logs. This phrase typically indicates that an Apache worker process has encountered a critical issue leading to a crash, which can be symptomatic of a potential exploit attempt. It's important to proceed with a high level of caution, as false positives are unknown, indicating that any hit on this search might be significant and should be investigated promptly. Understanding and responding to these indicators form a crucial aspect of safeguarding against attacks that exploit vulnerabilities within Apache processes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: apache\n    definition: 'Requirements: Must be able to collect the error.log file'\ndetection:\n    keywords:\n        - 'exit signal Segmentation Fault'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: apache\n    definition: 'Requirements: Must be able to collect the error.log file'\ndetection:\n    keywords:\n        - 'exit signal Segmentation Fault'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "segmentation fault error message caused by a crashing apache worker process",
      "answer": "In order to detect a segmentation fault error message caused by a crashing Apache worker process, you should analyze Apache server's error.log files, which necessitates the capability to collect and scrutinize this specific log file. You will be specifically looking for occurrences of the phrase \"exit signal Segmentation Fault\" within these logs. This phrase typically indicates that an Apache worker process has encountered a critical issue leading to a crash, which can be symptomatic of a potential exploit attempt. It's important to proceed with a high level of caution, as false positives are unknown, indicating that any hit on this search might be significant and should be investigated promptly. Understanding and responding to these indicators form a crucial aspect of safeguarding against attacks that exploit vulnerabilities within Apache processes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when PIM alerts are set to disabled..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when PIM (Privileged Identity Management) alerts are set to disabled, you should: Focus on monitoring the audit logs within Azure services. Specifically, look for instances where the message indicates a \"Disable PIM Alert\" action has occurred. This detection is crucial because it might signal an attacker's attempt to weaken security by turning off alerts for privileged account changes, which should otherwise be closely monitored. However, it's important to remember that there might be legitimate reasons for an administrator to disable these alerts, such as during a controlled maintenance period. Due to the potential severity of an attacker successfully disabling PIM alerts to conceal their activities, such events are classified with a high level of concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Disable PIM Alert\n    condition: selection\nfalsepositives:\n    - Administrator disabling PIM alerts as an active choice.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Disable PIM Alert\n    condition: selection\nfalsepositives:\n    - Administrator disabling PIM alerts as an active choice.\nlevel: high\n",
      "question": "when PIM alerts are set to disabled.",
      "answer": "In order to detect when PIM (Privileged Identity Management) alerts are set to disabled, you should: Focus on monitoring the audit logs within Azure services. Specifically, look for instances where the message indicates a \"Disable PIM Alert\" action has occurred. This detection is crucial because it might signal an attacker's attempt to weaken security by turning off alerts for privileged account changes, which should otherwise be closely monitored. However, it's important to remember that there might be legitimate reasons for an administrator to disable these alerts, such as during a controlled maintenance period. Due to the potential severity of an attacker successfully disabling PIM alerts to conceal their activities, such events are classified with a high level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting ntds.dit retrieving using synchronisation with legitimate domain controller using Directory Replication Service Remote Protocol.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unauthorized attempts to retrieve the ntds.dit file through synchronization with a legitimate domain controller using the Directory Replication Service Remote Protocol, you should monitor specific indicators within Windows Security logs. Look for events that signify access requests to domain controllers, focusing on Windows Security Event IDs 4624 and 4662 in particular.\n\nEvent ID 4624 should be scrutinized for logons to your domain controllers, listed specifically by their names. This helps to identify any successful authentication attempts that could potentially be used for malicious purposes.\n\nAdditionally, monitor for any IP addresses that correspond to your domain controllers in the event of network-based interactions that could bypass typical authentication mechanisms, aiming to identify direct IP interactions that might signify suspicious activities.\n\nCrucially, focus on Event ID 4662, particularly looking for access requests to objects within the domain controllers specified by their names. This event should be cross-referenced with a list of suspicious target logon IDs, which are identified from previous monitoring (as specified in the initial logon monitoring step). The properties to watch for in these access requests include specific GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2' and '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2') that are associated with actions on the domain controller that could indicate an attempt to replicate or retrieve sensitive directory data, such as the ntds.dit file.\n\nDetecting these activities involves a nuanced approach where a successful logon event (EventID 4624) to a domain controller that does not subsequently interact through a direct IP address (as checked against a predetermined list of domain controllers' IPs) flags the logon IDs associated with these events. These flagged IDs are then used to monitor for access (EventID 4662) involving the critical GUID properties. If these conditions are met, it indicates a potential unauthorized attempt to access or replicate directory services data, prompting an alert.\n\nBe aware that there are legitimate circumstances where these indicators may be triggered, such as when an administrator is adding a new domain controller to an existing domain. Therefore, it's crucial to analyze the context of alerts and investigate further to differentiate between legitimate administrative activities and malicious actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4624\n        ComputerName: '%DomainControllersNamesList%'\n    selection2:\n        IpAddress: '%DomainControllersIpsList%'\n    selection3:\n        EventID: 4662\n        ComputerName: '%DomainControllersNamesList%'\n        SubjectLogonId: '%SuspiciousTargetLogonIdList%'\n        Properties|contains: \n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n    condition: write TargetLogonId from selection1 (if not selection2) to list %SuspiciousTargetLogonIdList%; then if selection3 -> alert\nfalsepositives:\n    - Legitimate administrator adding new domain controller to already existing domain\nlevel: medium\nstatus: unsupported\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4624\n        ComputerName: '%DomainControllersNamesList%'\n    selection2:\n        IpAddress: '%DomainControllersIpsList%'\n    selection3:\n        EventID: 4662\n        ComputerName: '%DomainControllersNamesList%'\n        SubjectLogonId: '%SuspiciousTargetLogonIdList%'\n        Properties|contains: \n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n    condition: write TargetLogonId from selection1 (if not selection2) to list %SuspiciousTargetLogonIdList%; then if selection3 -> alert\nfalsepositives:\n    - Legitimate administrator adding new domain controller to already existing domain\nlevel: medium\nstatus: unsupported\n",
      "question": "ntds.dit retrieving using synchronisation with legitimate domain controller using Directory Replication Service Remote Protocol",
      "answer": "In order to detect unauthorized attempts to retrieve the ntds.dit file through synchronization with a legitimate domain controller using the Directory Replication Service Remote Protocol, you should monitor specific indicators within Windows Security logs. Look for events that signify access requests to domain controllers, focusing on Windows Security Event IDs 4624 and 4662 in particular.\n\nEvent ID 4624 should be scrutinized for logons to your domain controllers, listed specifically by their names. This helps to identify any successful authentication attempts that could potentially be used for malicious purposes.\n\nAdditionally, monitor for any IP addresses that correspond to your domain controllers in the event of network-based interactions that could bypass typical authentication mechanisms, aiming to identify direct IP interactions that might signify suspicious activities.\n\nCrucially, focus on Event ID 4662, particularly looking for access requests to objects within the domain controllers specified by their names. This event should be cross-referenced with a list of suspicious target logon IDs, which are identified from previous monitoring (as specified in the initial logon monitoring step). The properties to watch for in these access requests include specific GUIDs ('1131f6aa-9c07-11d1-f79f-00c04fc2dcd2' and '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2') that are associated with actions on the domain controller that could indicate an attempt to replicate or retrieve sensitive directory data, such as the ntds.dit file.\n\nDetecting these activities involves a nuanced approach where a successful logon event (EventID 4624) to a domain controller that does not subsequently interact through a direct IP address (as checked against a predetermined list of domain controllers' IPs) flags the logon IDs associated with these events. These flagged IDs are then used to monitor for access (EventID 4662) involving the critical GUID properties. If these conditions are met, it indicates a potential unauthorized attempt to access or replicate directory services data, prompting an alert.\n\nBe aware that there are legitimate circumstances where these indicators may be triggered, such as when an administrator is adding a new domain controller to an existing domain. Therefore, it's crucial to analyze the context of alerts and investigate further to differentiate between legitimate administrative activities and malicious actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should: Monitor Windows process creation logs for the execution of the PowerShell command 'Compress-Archive' accompanied by the parameters '-Path' and '-DestinationPath', specifically when the destination path is set to the Windows temporary folder, denoted as '$env:TEMP\\'. This activity is commonly observed when adversaries utilize built-in system tools to compress data in preparation for exfiltration. They might aggregate sensitive files in a single archive, placing it in a temporary directory, making it easier to stealthily exfiltrate. Be aware that this behavior might lead to some false positives as it\u2019s not entirely unique to malicious activities. Thus, it's classified with a medium level of confidence. Identifying such activities falls under tactics and techniques such as Collection (gathering data of interest to their goal) and Exfiltration (stealing the data), although these specific terms are not used directly in the monitoring logic.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration",
      "answer": "In order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should: Monitor Windows process creation logs for the execution of the PowerShell command 'Compress-Archive' accompanied by the parameters '-Path' and '-DestinationPath', specifically when the destination path is set to the Windows temporary folder, denoted as '$env:TEMP\\'. This activity is commonly observed when adversaries utilize built-in system tools to compress data in preparation for exfiltration. They might aggregate sensitive files in a single archive, placing it in a temporary directory, making it easier to stealthily exfiltrate. Be aware that this behavior might lead to some false positives as it\u2019s not entirely unique to malicious activities. Thus, it's classified with a medium level of confidence. Identifying such activities falls under tactics and techniques such as Collection (gathering data of interest to their goal) and Exfiltration (stealing the data), although these specific terms are not used directly in the monitoring logic."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PsExec service installation and execution events (service and Sysmon).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PsExec service installation and execution events (service and Sysmon), you should monitor Windows System logs for specific events indicating that a new service has been installed or executed, particularly focusing on events from the Service Control Manager. Look for the event ID 7045, which signals a service installation, especially if the service name is 'PSEXESVC' and the image path ends with '\\PSEXESVC.exe'. This is a strong indicator of PsExec service installation. Additionally, keep an eye out for event ID 7036, which indicates service execution, specifically if the service name mentioned is 'PSEXESVC'. \n\nFor detailed investigation, focus on fields such as EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName, as they provide critical information on how the service was installed or executed. \n\nBe aware that there might be unknown scenarios that could lead to false positives, hence maintaining a low level of alert severity until further investigation can substantiate a malicious activity. \n\nThis monitoring strategy is aligned with identifying tactics and techniques such as Execution and Lateral Movement, which are often associated with malicious actors utilizing tools like PsExec to execute commands or deploy payloads remotely on a target system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    service_installation:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'PSEXESVC'\n        ImagePath|endswith: '\\PSEXESVC.exe'\n    service_execution:\n        EventID: 7036\n        ServiceName: 'PSEXESVC'\n    condition: 1 of service_*\nfields:\n    - EventID\n    - CommandLine\n    - ParentCommandLine\n    - ServiceName\n    - ServiceFileName\n    - TargetFilename\n    - PipeName\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    service_installation:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'PSEXESVC'\n        ImagePath|endswith: '\\PSEXESVC.exe'\n    service_execution:\n        EventID: 7036\n        ServiceName: 'PSEXESVC'\n    condition: 1 of service_*\nfields:\n    - EventID\n    - CommandLine\n    - ParentCommandLine\n    - ServiceName\n    - ServiceFileName\n    - TargetFilename\n    - PipeName\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "PsExec service installation and execution events (service and Sysmon)",
      "answer": "In order to detect PsExec service installation and execution events (service and Sysmon), you should monitor Windows System logs for specific events indicating that a new service has been installed or executed, particularly focusing on events from the Service Control Manager. Look for the event ID 7045, which signals a service installation, especially if the service name is 'PSEXESVC' and the image path ends with '\\PSEXESVC.exe'. This is a strong indicator of PsExec service installation. Additionally, keep an eye out for event ID 7036, which indicates service execution, specifically if the service name mentioned is 'PSEXESVC'. \n\nFor detailed investigation, focus on fields such as EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName, as they provide critical information on how the service was installed or executed. \n\nBe aware that there might be unknown scenarios that could lead to false positives, hence maintaining a low level of alert severity until further investigation can substantiate a malicious activity. \n\nThis monitoring strategy is aligned with identifying tactics and techniques such as Execution and Lateral Movement, which are often associated with malicious actors utilizing tools like PsExec to execute commands or deploy payloads remotely on a target system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Transferring files with well-known filenames (sensitive files with credential data) using network shares.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts at transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor Windows Security logs for EventID 5145, which corresponds to a network share object was accessed. This EventID is crucial as it indicates file access within shared folders that might be subjected to unauthorized access attempts or data exfiltration activities. Specifically, look for accesses to files containing the following substrings in their paths: '\\mimidrv', '\\lsass', '\\windows\\minidump\\', '\\hiberfil', '\\sqldmpr', '\\sam', '\\ntds.dit', and '\\security'. These paths often include sensitive files that contain credential data and other important information. It's essential to be aware that false positives can occur, especially when sensitive files are being transferred over the network for legitimate administrative purposes by authorized administrators. The severity of this monitoring rule is considered medium, suggesting that while this activity is suspicious, further investigation is needed to confirm malicious intent. Keep in mind, ongoing vigilance and analysis of this type of activity can potentially unveil indicators of techniques tied to Initial Access, Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Discovery, and Lateral Movement - all of which are crucial aspects to understand in the realm of cybersecurity defense.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains:\n            - '\\mimidrv'\n            - '\\lsass'\n            - '\\windows\\minidump\\'\n            - '\\hiberfil'\n            - '\\sqldmpr'\n            - '\\sam'\n            - '\\ntds.dit'\n            - '\\security'\n    condition: selection\nfalsepositives:\n    - Transferring sensitive files for legitimate administration work by legitimate administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 5145\n        RelativeTargetName|contains:\n            - '\\mimidrv'\n            - '\\lsass'\n            - '\\windows\\minidump\\'\n            - '\\hiberfil'\n            - '\\sqldmpr'\n            - '\\sam'\n            - '\\ntds.dit'\n            - '\\security'\n    condition: selection\nfalsepositives:\n    - Transferring sensitive files for legitimate administration work by legitimate administrator\nlevel: medium\n",
      "question": "Transferring files with well-known filenames (sensitive files with credential data) using network shares",
      "answer": "In order to detect attempts at transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor Windows Security logs for EventID 5145, which corresponds to a network share object was accessed. This EventID is crucial as it indicates file access within shared folders that might be subjected to unauthorized access attempts or data exfiltration activities. Specifically, look for accesses to files containing the following substrings in their paths: '\\mimidrv', '\\lsass', '\\windows\\minidump\\', '\\hiberfil', '\\sqldmpr', '\\sam', '\\ntds.dit', and '\\security'. These paths often include sensitive files that contain credential data and other important information. It's essential to be aware that false positives can occur, especially when sensitive files are being transferred over the network for legitimate administrative purposes by authorized administrators. The severity of this monitoring rule is considered medium, suggesting that while this activity is suspicious, further investigation is needed to confirm malicious intent. Keep in mind, ongoing vigilance and analysis of this type of activity can potentially unveil indicators of techniques tied to Initial Access, Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Discovery, and Lateral Movement - all of which are crucial aspects to understand in the realm of cybersecurity defense."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting ntds.dit retrieving (only computer accounts) using synchronisation with legit domain controller using Netlogon Remote Protocol.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts at retrieving ntds.dit (only computer accounts) by synchronizing with a legitimate domain controller using Netlogon Remote Protocol, you should: Monitor Windows security logs for specific activities that could indicate such behavior. Look for events with ID 4624 on domain controller names which could signify successful logons. Additionally, pay attention to IP addresses associated with domain controllers as another indicator of potential synchronization attempts. Furthermore, events with ID 5145 on domain controller names, especially those involving the '\\IPC$' share name and targeting 'netlogon', are critical to examine. This includes checking for usage of suspicious logon IDs. The process involves capturing the target logon ID when there's a successful logon event that doesn't match an IP address from known domain controllers (indicating an external or unusual access attempt) and then checking if this logon ID is later involved in an event that accesses the netlogon share. It's important to be aware that there could be legitimate reasons for these activities, such as an administrator adding a new domain controller to an existing domain, which would constitute a false positive. The logs should have medium level scrutiny, and such monitoring is currently provided at an experimental status. The efforts align with identifying tactics and techniques focusing on unauthorized systems synchronization using methods like Netlogon Remote Protocol, thus aiding in the early detection of potential cybersecurity threats aimed at accessing sensitive computer account information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4624\n        ComputerName: '%DomainControllersNamesList%'\n    selection2:\n        IpAddress: '%DomainControllersIpsList%'\n    selection3:\n        EventID: 5145\n        ComputerName: '%DomainControllersNamesList%'\n        ShareName|contains: '\\IPC$'\n        SubjectLogonId: '%SuspiciousTargetLogonIdList%'\n        RelativeTargetName: 'netlogon'\n    condition: write TargetLogonId from selection1 (if not selection2) to list %SuspiciousTargetLogonIdList%; then if selection3 -> alert\nfalsepositives:\n    - Legitimate administrator adding new domain controller to already existing domain\nlevel: medium\nstatus: unsupported\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4624\n        ComputerName: '%DomainControllersNamesList%'\n    selection2:\n        IpAddress: '%DomainControllersIpsList%'\n    selection3:\n        EventID: 5145\n        ComputerName: '%DomainControllersNamesList%'\n        ShareName|contains: '\\IPC$'\n        SubjectLogonId: '%SuspiciousTargetLogonIdList%'\n        RelativeTargetName: 'netlogon'\n    condition: write TargetLogonId from selection1 (if not selection2) to list %SuspiciousTargetLogonIdList%; then if selection3 -> alert\nfalsepositives:\n    - Legitimate administrator adding new domain controller to already existing domain\nlevel: medium\nstatus: unsupported\n",
      "question": "ntds.dit retrieving (only computer accounts) using synchronisation with legit domain controller using Netlogon Remote Protocol",
      "answer": "In order to detect attempts at retrieving ntds.dit (only computer accounts) by synchronizing with a legitimate domain controller using Netlogon Remote Protocol, you should: Monitor Windows security logs for specific activities that could indicate such behavior. Look for events with ID 4624 on domain controller names which could signify successful logons. Additionally, pay attention to IP addresses associated with domain controllers as another indicator of potential synchronization attempts. Furthermore, events with ID 5145 on domain controller names, especially those involving the '\\IPC$' share name and targeting 'netlogon', are critical to examine. This includes checking for usage of suspicious logon IDs. The process involves capturing the target logon ID when there's a successful logon event that doesn't match an IP address from known domain controllers (indicating an external or unusual access attempt) and then checking if this logon ID is later involved in an event that accesses the netlogon share. It's important to be aware that there could be legitimate reasons for these activities, such as an administrator adding a new domain controller to an existing domain, which would constitute a false positive. The logs should have medium level scrutiny, and such monitoring is currently provided at an experimental status. The efforts align with identifying tactics and techniques focusing on unauthorized systems synchronization using methods like Netlogon Remote Protocol, thus aiding in the early detection of potential cybersecurity threats aimed at accessing sensitive computer account information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting various indicators of Microsoft Connection Manager Profile Installer execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: Monitor for the creation of processes where the parent imaging process ends with '\\cmstp.exe'. This action is characteristic of an attacker exploiting the Connection Manager Profile Installer (CMSTP.exe) to execute unauthorized commands or payloads. Focus on logging information such as the command line inputs, the parent command line that initiated the process, and any specific details around the process creation event. It is crucial to scrutinize these events due to their high potential for abuse in bypassing user account control and executing malicious code. However, be aware of potential false positives, as legitimate uses of CMSTP exist, though they are considered unlikely in modern enterprise environments. This type of monitoring is rooted in identifying tactics and techniques related to Execution and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # CMSTP Spawning Child Process\n    selection:\n        ParentImage|endswith: '\\cmstp.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Legitimate CMSTP use (unlikely in modern enterprise environments)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    # CMSTP Spawning Child Process\n    selection:\n        ParentImage|endswith: '\\cmstp.exe'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Legitimate CMSTP use (unlikely in modern enterprise environments)\nlevel: high\n",
      "question": "various indicators of Microsoft Connection Manager Profile Installer execution",
      "answer": "In order to detect various indicators of Microsoft Connection Manager Profile Installer execution, you should: Monitor for the creation of processes where the parent imaging process ends with '\\cmstp.exe'. This action is characteristic of an attacker exploiting the Connection Manager Profile Installer (CMSTP.exe) to execute unauthorized commands or payloads. Focus on logging information such as the command line inputs, the parent command line that initiated the process, and any specific details around the process creation event. It is crucial to scrutinize these events due to their high potential for abuse in bypassing user account control and executing malicious code. However, be aware of potential false positives, as legitimate uses of CMSTP exist, though they are considered unlikely in modern enterprise environments. This type of monitoring is rooted in identifying tactics and techniques related to Execution and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting executing python with keywords related to network activity that could indicate a potential reverse shell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect executing python with keywords related to network activity that could indicate a potential reverse shell, you should: Identify and monitor the creation of processes on Linux systems, specifically focusing on those initiated by Python. Look for command lines that contain a combination of '-c', indicating execution of Python code; 'import', suggesting the inclusion of additional Python libraries; 'pty', hinting at pseudo-terminal operations; 'spawn(', which could be used to start another process; and '.connect', a method often associated with making network connections. These particular elements together raise suspicions of a reverse shell attempt, characterized by external control over a system shell. The detection criteria are set to a high level of importance due to the potential severity of this activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: 'python'\n        CommandLine|contains|all:\n            - ' -c '\n            - 'import'\n            - 'pty'\n            - 'spawn('\n            - '.connect'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|contains: 'python'\n        CommandLine|contains|all:\n            - ' -c '\n            - 'import'\n            - 'pty'\n            - 'spawn('\n            - '.connect'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "executing python with keywords related to network activity that could indicate a potential reverse shell",
      "answer": "In order to detect executing python with keywords related to network activity that could indicate a potential reverse shell, you should: Identify and monitor the creation of processes on Linux systems, specifically focusing on those initiated by Python. Look for command lines that contain a combination of '-c', indicating execution of Python code; 'import', suggesting the inclusion of additional Python libraries; 'pty', hinting at pseudo-terminal operations; 'spawn(', which could be used to start another process; and '.connect', a method often associated with making network connections. These particular elements together raise suspicions of a reverse shell attempt, characterized by external control over a system shell. The detection criteria are set to a high level of importance due to the potential severity of this activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should: monitor for process creations on Windows systems with a focus on two specific scenarios indicative of this attack technique. First, look for instances where the 'osk.exe', located in the C:\\Program Files\\Windows Media Player directory, is executed with either a High or System integrity level. Such an execution pattern is unusual for 'osk.exe' and hints at a potential misuse in the context of a UAC bypass attempt. Second, pay attention to the creation of 'cmd.exe' processes, where the parent command line is specifically launching 'eventvwr.msc' from 'mmc.exe' in the C:\\Windows\\system32 directory, also with High or System integrity levels. This particular parent-child relationship suggests a sophisticated method where attackers might leverage administrative tools to bypass User Account Control. The identification of these scenarios should be treated with a high level of suspicion due to the potential for false positives being unknown. This approach is critical for defending against manipulation of built-in Windows functionalities to elevate privileges without triggering standard UAC prompts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image: 'C:\\Program Files\\Windows Media Player\\osk.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    selection2:\n        Image: 'C:\\Windows\\System32\\cmd.exe'\n        ParentCommandLine: '\"C:\\Windows\\system32\\mmc.exe\" \"C:\\Windows\\system32\\eventvwr.msc\" /s'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image: 'C:\\Program Files\\Windows Media Player\\osk.exe'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    selection2:\n        Image: 'C:\\Windows\\System32\\cmd.exe'\n        ParentCommandLine: '\"C:\\Windows\\system32\\mmc.exe\" \"C:\\Windows\\system32\\eventvwr.msc\" /s'\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
      "answer": "In order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should: monitor for process creations on Windows systems with a focus on two specific scenarios indicative of this attack technique. First, look for instances where the 'osk.exe', located in the C:\\Program Files\\Windows Media Player directory, is executed with either a High or System integrity level. Such an execution pattern is unusual for 'osk.exe' and hints at a potential misuse in the context of a UAC bypass attempt. Second, pay attention to the creation of 'cmd.exe' processes, where the parent command line is specifically launching 'eventvwr.msc' from 'mmc.exe' in the C:\\Windows\\system32 directory, also with High or System integrity levels. This particular parent-child relationship suggests a sophisticated method where attackers might leverage administrative tools to bypass User Account Control. The identification of these scenarios should be treated with a high level of suspicion due to the potential for false positives being unknown. This approach is critical for defending against manipulation of built-in Windows functionalities to elevate privileges without triggering standard UAC prompts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting addition of new root, CA or AuthRoot certificates to the Windows registry.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the addition of new root, CA or AuthRoot certificates to the Windows registry, you should monitor Windows registry settings specifically within the registry key categories associated with root, CA, or AuthRoot certificates. This involves tracking any SetValue events where TargetObject paths contain specific strings related to the system, policies, or enterprise certificates within the Root, CA, or AuthRoot directories. In more detail, lookout for changes in registry paths such as '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\', '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\', and similar paths for CA and AuthRoot certificates. Additionally, ensure that these registry modifications end with '\\Blob' and involve binary data, as these attributes are indicative of certificate additions. This detection method is crucial for maintaining the integrity and security of the system's trust store, as unauthorized or malicious certificates can compromise secure communications and facilitate further attacks. It's categorized under medium severity due to the potential risk it represents, although it's noted that there may be unknown false positives. Keep an eye on these registry alterations to protect the system against unauthorized certificate injections, which are a part of several attack techniques like spoofing, man-in-the-middle attacks, and more.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\AuthRoot\\Certificates\\'\n        TargetObject|endswith: '\\Blob'\n        Details: 'Binary Data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\CA\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\'\n            - '\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\AuthRoot\\Certificates\\'\n        TargetObject|endswith: '\\Blob'\n        Details: 'Binary Data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "addition of new root, CA or AuthRoot certificates to the Windows registry",
      "answer": "In order to detect the addition of new root, CA or AuthRoot certificates to the Windows registry, you should monitor Windows registry settings specifically within the registry key categories associated with root, CA, or AuthRoot certificates. This involves tracking any SetValue events where TargetObject paths contain specific strings related to the system, policies, or enterprise certificates within the Root, CA, or AuthRoot directories. In more detail, lookout for changes in registry paths such as '\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\', '\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\', and similar paths for CA and AuthRoot certificates. Additionally, ensure that these registry modifications end with '\\Blob' and involve binary data, as these attributes are indicative of certificate additions. This detection method is crucial for maintaining the integrity and security of the system's trust store, as unauthorized or malicious certificates can compromise secure communications and facilitate further attacks. It's categorized under medium severity due to the potential risk it represents, although it's noted that there may be unknown false positives. Keep an eye on these registry alterations to protect the system against unauthorized certificate injections, which are a part of several attack techniques like spoofing, man-in-the-middle attacks, and more."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file indicators of potential exploitation of MOVEit CVE-2023-34362..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file indicators of potential exploitation of MOVEit CVE-2023-34362, you should focus on monitoring Windows file events, specifically looking for activities that might indicate an attack. This involves scrutinizing various file creations, modifications, and actions that are unusual or indicative of exploitation patterns associated with this specific vulnerability.\n\nFirstly, you should watch for any file activities involving the directories related to MOVEit Transfer, particularly any actions within the `\\MOVEit Transfer\\wwwroot\\` or `\\MOVEitTransfer\\wwwroot\\` paths. This focus ensures that the surveillance is appropriately narrowed down to the MOVEit environments, hence reducing noise from irrelevant data.\n\nPay particular attention to files that end with extensions commonly associated with potentially malicious activities or scripts. These extensions include `.7z`, `.bat`, `.dll`, `.exe`, `.ps1`, `.rar`, `.vbe`, `.vbs`, and `.zip`. The appearance of such files under the MOVEit Transfer directories could signify unauthorized attempts to upload or modify executable or compressed files, which could be leveraged in an exploitation attempt.\n\nAdditionally, keep an eye out for known indicators of compromise (IoCs) specifically named files such as occurrences of `_human2.aspx`, `_human2.aspx.lnk`, `human2.aspx`, and `human2.aspx.lnk` under the MOVEit Transfer directories. These file names, especially when appearing in conjunction with `.lnk` or directly as `.aspx` files, are strong indicators of attempted or successful exploitation.\n\nFurther, be vigilant for newly compiled ASP.NET files within the `\\Windows\\Microsoft.net\\Framework64\\v` directory that falls under the `\\Temporary ASP.NET Files\\` path and contain the string `App_Web_` in their names. These should have a creation date within the months following the disclosure of CVE-2023-34362, specifically from March to June 2023, and end with `.dll`. This pattern could indicate the deployment of malicious ASP.NET applications intended to exploit or maintain persistence within the affected MOVEit environment.\n\nIt is also essential to apply this monitoring specifically to MOVEit servers to minimize false positives. This targeted approach ensures that the detection efforts are highly relevant and focused on the environments at risk from this vulnerability.\n\nBy actively monitoring for these signs and applying these detection strategies, organizations can significantly enhance their ability to identify potential exploitation attempts of MOVEit CVE-2023-34362. This proactive stance is critical for mitigating the vulnerability's impact and securing affected systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_generic:\n        TargetFilename|contains:\n            - '\\MOVEit Transfer\\wwwroot\\'\n            - '\\MOVEitTransfer\\wwwroot\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.dll'\n            - '.exe'\n            - '.ps1'\n            - '.rar'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    selection_known_ioc:\n        TargetFilename|endswith:\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx'\n    # Uncomment selection if you wanna threat hunt for additional artifacts\n    #selection_cmdline:\n    #    TargetFilename|contains: ':\\Windows\\TEMP\\'\n    #    TargetFilename|endswith: '.cmdline'\n    selection_compiled_asp:\n        CreationUtcTime|startswith:\n            - '2023-03- '\n            - '2023-04- '\n            - '2023-05- '\n            - '2023-06- '\n        TargetFilename|contains|all:\n            - '\\Windows\\Microsoft.net\\Framework64\\v'\n            - '\\Temporary ASP.NET Files\\'\n            - 'App_Web_'\n        TargetFilename|endswith: '.dll'\n    condition: 1 of selection_*\nfalsepositives:\n    - To avoid FP, this rule should only be applied on MOVEit servers.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_generic:\n        TargetFilename|contains:\n            - '\\MOVEit Transfer\\wwwroot\\'\n            - '\\MOVEitTransfer\\wwwroot\\'\n        TargetFilename|endswith:\n            - '.7z'\n            - '.bat'\n            - '.dll'\n            - '.exe'\n            - '.ps1'\n            - '.rar'\n            - '.vbe'\n            - '.vbs'\n            - '.zip'\n    selection_known_ioc:\n        TargetFilename|endswith:\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEit Transfer\\wwwroot\\human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\_human2.aspx'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx.lnk'\n            - '\\MOVEitTransfer\\wwwroot\\human2.aspx'\n    # Uncomment selection if you wanna threat hunt for additional artifacts\n    #selection_cmdline:\n    #    TargetFilename|contains: ':\\Windows\\TEMP\\'\n    #    TargetFilename|endswith: '.cmdline'\n    selection_compiled_asp:\n        CreationUtcTime|startswith:\n            - '2023-03- '\n            - '2023-04- '\n            - '2023-05- '\n            - '2023-06- '\n        TargetFilename|contains|all:\n            - '\\Windows\\Microsoft.net\\Framework64\\v'\n            - '\\Temporary ASP.NET Files\\'\n            - 'App_Web_'\n        TargetFilename|endswith: '.dll'\n    condition: 1 of selection_*\nfalsepositives:\n    - To avoid FP, this rule should only be applied on MOVEit servers.\nlevel: high\n",
      "question": "file indicators of potential exploitation of MOVEit CVE-2023-34362.",
      "answer": "In order to detect file indicators of potential exploitation of MOVEit CVE-2023-34362, you should focus on monitoring Windows file events, specifically looking for activities that might indicate an attack. This involves scrutinizing various file creations, modifications, and actions that are unusual or indicative of exploitation patterns associated with this specific vulnerability.\n\nFirstly, you should watch for any file activities involving the directories related to MOVEit Transfer, particularly any actions within the `\\MOVEit Transfer\\wwwroot\\` or `\\MOVEitTransfer\\wwwroot\\` paths. This focus ensures that the surveillance is appropriately narrowed down to the MOVEit environments, hence reducing noise from irrelevant data.\n\nPay particular attention to files that end with extensions commonly associated with potentially malicious activities or scripts. These extensions include `.7z`, `.bat`, `.dll`, `.exe`, `.ps1`, `.rar`, `.vbe`, `.vbs`, and `.zip`. The appearance of such files under the MOVEit Transfer directories could signify unauthorized attempts to upload or modify executable or compressed files, which could be leveraged in an exploitation attempt.\n\nAdditionally, keep an eye out for known indicators of compromise (IoCs) specifically named files such as occurrences of `_human2.aspx`, `_human2.aspx.lnk`, `human2.aspx`, and `human2.aspx.lnk` under the MOVEit Transfer directories. These file names, especially when appearing in conjunction with `.lnk` or directly as `.aspx` files, are strong indicators of attempted or successful exploitation.\n\nFurther, be vigilant for newly compiled ASP.NET files within the `\\Windows\\Microsoft.net\\Framework64\\v` directory that falls under the `\\Temporary ASP.NET Files\\` path and contain the string `App_Web_` in their names. These should have a creation date within the months following the disclosure of CVE-2023-34362, specifically from March to June 2023, and end with `.dll`. This pattern could indicate the deployment of malicious ASP.NET applications intended to exploit or maintain persistence within the affected MOVEit environment.\n\nIt is also essential to apply this monitoring specifically to MOVEit servers to minimize false positives. This targeted approach ensures that the detection efforts are highly relevant and focused on the environments at risk from this vulnerability.\n\nBy actively monitoring for these signs and applying these detection strategies, organizations can significantly enhance their ability to identify potential exploitation attempts of MOVEit CVE-2023-34362. This proactive stance is critical for mitigating the vulnerability's impact and securing affected systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Set-Alias or New-Alias cmdlet usage. Which can be use as a mean to obfuscate PowerShell scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Set-Alias or New-Alias cmdlet usage, which can be used as a means to obfuscate PowerShell scripts, you should: Monitor Windows PowerShell script block logs, which requires Script Block Logging to be enabled on the system. Specifically, focus on identifying occurrences where scripts contain the text 'Set-Alias ' or 'New-Alias '. This detection helps in identifying potential obfuscation techniques being employed within PowerShell scripts. However, be aware that there might be instances which could lead to false positives since the rule's precision is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Set-Alias '\n            - 'New-Alias '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Set-Alias '\n            - 'New-Alias '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Set-Alias or New-Alias cmdlet usage. Which can be use as a mean to obfuscate PowerShell scripts",
      "answer": "In order to detect Set-Alias or New-Alias cmdlet usage, which can be used as a means to obfuscate PowerShell scripts, you should: Monitor Windows PowerShell script block logs, which requires Script Block Logging to be enabled on the system. Specifically, focus on identifying occurrences where scripts contain the text 'Set-Alias ' or 'New-Alias '. This detection helps in identifying potential obfuscation techniques being employed within PowerShell scripts. However, be aware that there might be instances which could lead to false positives since the rule's precision is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc., to establish an interactive command and control channel to target systems within networks, you should: Monitor file events on Windows systems for activities involving files located in the directory path containing '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'. This monitoring strategy is applied as these services, despite their legitimate uses, are often repurposed by adversaries to gain unauthorized access to systems. These types of remote access tools are notably flagged by security research, such as Symantec\u2019s report on \"Living off the Land\", as being used more frequently by adversaries compared to other legitimate software, for malicious intent. It is important to consider that there may be legitimate uses of these software tools within a network, and such instances are considered as false positives. The detection strategy is classified at a medium level of importance in the context of cybersecurity defenses.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect when an adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc., to establish an interactive command and control channel to target systems within networks, you should: Monitor file events on Windows systems for activities involving files located in the directory path containing '\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\'. This monitoring strategy is applied as these services, despite their legitimate uses, are often repurposed by adversaries to gain unauthorized access to systems. These types of remote access tools are notably flagged by security research, such as Symantec\u2019s report on \"Living off the Land\", as being used more frequently by adversaries compared to other legitimate software, for malicious intent. It is important to consider that there may be legitimate uses of these software tools within a network, and such instances are considered as false positives. The detection strategy is classified at a medium level of importance in the context of cybersecurity defenses."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should: monitor for PowerShell script activities within Windows environments, specifically focusing on Script Block Logging. You're looking for scripts attempting to manipulate service security descriptors in a manner that could hide the services from typical management tools. This involves identifying scripts containing arguments like '-SecurityDescriptorSddl' or '-sd' which are concerned with setting new security descriptors. Furthermore, the use of 'Set-Service' in combination with specific permission setting strings such as 'D;;', coupled with user rights strings like ';;;IU', ';;;SU', ';;;BA', ';;;SY', or ';;;WD', is a strong indicator of such malicious activity. These commands and permissions are designed to change service visibility and control, which could be an attempt to obscure a service from administrative or security scrutiny. False positives could occur, as these commands might rarely be used for legitimate purposes. However, given the high-risk nature of these actions, any detection should be investigated with appropriate caution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_sddl_flag:\n        ScriptBlockText|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    selection_set_service:\n        ScriptBlockText|contains|all:\n            - 'Set-Service '\n            - 'D;;'\n        ScriptBlockText|contains:\n            - ';;;IU'\n            - ';;;SU'\n            - ';;;BA'\n            - ';;;SY'\n            - ';;;WD'\n    condition: all of selection_*\nfalsepositives:\n    - Rare intended use of hidden services\n    - Rare FP could occur due to the non linearity of the ScriptBlockText log\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_sddl_flag:\n        ScriptBlockText|contains:\n            - '-SecurityDescriptorSddl '\n            - '-sd '\n    selection_set_service:\n        ScriptBlockText|contains|all:\n            - 'Set-Service '\n            - 'D;;'\n        ScriptBlockText|contains:\n            - ';;;IU'\n            - ';;;SU'\n            - ';;;BA'\n            - ';;;SY'\n            - ';;;WD'\n    condition: all of selection_*\nfalsepositives:\n    - Rare intended use of hidden services\n    - Rare FP could occur due to the non linearity of the ScriptBlockText log\nlevel: high\n",
      "question": "usage of the \"Set-Service\" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in powershell 7)",
      "answer": "In order to detect usage of the \"Set-Service\" PowerShell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as \"sc.exe\", \"Get-Service\"...etc. (Works only in PowerShell 7), you should: monitor for PowerShell script activities within Windows environments, specifically focusing on Script Block Logging. You're looking for scripts attempting to manipulate service security descriptors in a manner that could hide the services from typical management tools. This involves identifying scripts containing arguments like '-SecurityDescriptorSddl' or '-sd' which are concerned with setting new security descriptors. Furthermore, the use of 'Set-Service' in combination with specific permission setting strings such as 'D;;', coupled with user rights strings like ';;;IU', ';;;SU', ';;;BA', ';;;SY', or ';;;WD', is a strong indicator of such malicious activity. These commands and permissions are designed to change service visibility and control, which could be an attempt to obscure a service from administrative or security scrutiny. False positives could occur, as these commands might rarely be used for legitimate purposes. However, given the high-risk nature of these actions, any detection should be investigated with appropriate caution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting blocking of process creations originating from PSExec and WMI commands.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect blocking of process creations originating from PSExec and WMI commands, you should monitor Windows Defender events. Specifically, capture logs from Windows Defender (WinDefend) with the requirement of having \"Block process creations originating from PSExec and WMI commands\" from Attack Surface Reduction configured. Look for Event ID 1121, which indicates an execution attempt blocked by this rule, and focus on processes ending with '\\wmiprvse.exe' or '\\psexesvc.exe'. These entries are crucial as they signify blocked attempts to create processes via Windows Management Instrumentation (WMI) and PSExec, respectively. The detection of such events is of high importance due to the potential misuse of these tools in cyber attacks, involving tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: windefend\n    definition: 'Requirements:Enabled Block process creations originating from PSExec and WMI commands from Attack Surface Reduction (GUID: d1e49aac-8f56-4280-b9ba-993a6d77406c)'\ndetection:\n    selection:\n        EventID: 1121\n        ProcessName|endswith:\n            - '\\wmiprvse.exe'\n            - '\\psexesvc.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: windefend\n    definition: 'Requirements:Enabled Block process creations originating from PSExec and WMI commands from Attack Surface Reduction (GUID: d1e49aac-8f56-4280-b9ba-993a6d77406c)'\ndetection:\n    selection:\n        EventID: 1121\n        ProcessName|endswith:\n            - '\\wmiprvse.exe'\n            - '\\psexesvc.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "blocking of process creations originating from PSExec and WMI commands",
      "answer": "In order to detect blocking of process creations originating from PSExec and WMI commands, you should monitor Windows Defender events. Specifically, capture logs from Windows Defender (WinDefend) with the requirement of having \"Block process creations originating from PSExec and WMI commands\" from Attack Surface Reduction configured. Look for Event ID 1121, which indicates an execution attempt blocked by this rule, and focus on processes ending with '\\wmiprvse.exe' or '\\psexesvc.exe'. These entries are crucial as they signify blocked attempts to create processes via Windows Management Instrumentation (WMI) and PSExec, respectively. The detection of such events is of high importance due to the potential misuse of these tools in cyber attacks, involving tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting patterns as noticed in exploitation of Windows CVE-2021-31979 CVE-2021-33771 vulnerability and DevilsTongue malware by threat group Sourgum.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect patterns as noticed in exploitation of Windows CVE-2021-31979, CVE-2021-33771 vulnerability, and DevilsTongue malware by threat group Sourgum, you should monitor the Windows registry for specific set value operations. Focus on capturing events where the registry key's `EventType` is `SetValue`. This operation should be particularly watched in two paths: `CLSID\\{CF4CC405-E2C5-4DDD-B3CE-5E7582D8C9FA}\\InprocServer32\\(Default)` and `CLSID\\{7C857801-7381-11CF-884D-00AA004B2E24}\\InProcServer32\\(Default)`, indicating an attempt to manipulate registry keys associated with COM objects.\n\nHowever, there is a need to exclude events where the modifications involve files ending in `system32\\wbem\\wmiutils.dll` or `system32\\wbem\\wbemsvc.dll`. Those particular file paths mentioned in the `Details` filter criteria are marked as exceptions and not considered part of this suspicious activity pattern.\n\nThis approach is designed with a very low rate of false positives, indicating a critical level of reliability in detecting specific exploitation patterns without considerable noise from valid system or software operations. Monitoring and analyzing modifications to these registry keys, with the noted exclusions, are essential steps in identifying attempts to exploit the vulnerabilities CVE-2021-31979 and CVE-2021-33771, or in deploying DevilsTongue malware, indicating potential compromise by the Sourgum threat group.\n\nBy focusing on such registry key modifications, security teams can quickly identify and mitigate activities linked to recognized tactics, techniques, and procedures associated with these specific vulnerabilities and threat actors. This level of monitoring is aligned with understanding the intricacies of the Windows registry and its role in system and software configuration, providing a vital checkpoint for intercepting malicious operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith:\n            - CLSID\\{CF4CC405-E2C5-4DDD-B3CE-5E7582D8C9FA}\\InprocServer32\\(Default)\n            - CLSID\\{7C857801-7381-11CF-884D-00AA004B2E24}\\InProcServer32\\(Default)\n    filter:\n        Details|endswith:\n            - system32\\wbem\\wmiutils.dll\n            - system32\\wbem\\wbemsvc.dll\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith:\n            - CLSID\\{CF4CC405-E2C5-4DDD-B3CE-5E7582D8C9FA}\\InprocServer32\\(Default)\n            - CLSID\\{7C857801-7381-11CF-884D-00AA004B2E24}\\InProcServer32\\(Default)\n    filter:\n        Details|endswith:\n            - system32\\wbem\\wmiutils.dll\n            - system32\\wbem\\wbemsvc.dll\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "patterns as noticed in exploitation of Windows CVE-2021-31979 CVE-2021-33771 vulnerability and DevilsTongue malware by threat group Sourgum",
      "answer": "In order to detect patterns as noticed in exploitation of Windows CVE-2021-31979, CVE-2021-33771 vulnerability, and DevilsTongue malware by threat group Sourgum, you should monitor the Windows registry for specific set value operations. Focus on capturing events where the registry key's `EventType` is `SetValue`. This operation should be particularly watched in two paths: `CLSID\\{CF4CC405-E2C5-4DDD-B3CE-5E7582D8C9FA}\\InprocServer32\\(Default)` and `CLSID\\{7C857801-7381-11CF-884D-00AA004B2E24}\\InProcServer32\\(Default)`, indicating an attempt to manipulate registry keys associated with COM objects.\n\nHowever, there is a need to exclude events where the modifications involve files ending in `system32\\wbem\\wmiutils.dll` or `system32\\wbem\\wbemsvc.dll`. Those particular file paths mentioned in the `Details` filter criteria are marked as exceptions and not considered part of this suspicious activity pattern.\n\nThis approach is designed with a very low rate of false positives, indicating a critical level of reliability in detecting specific exploitation patterns without considerable noise from valid system or software operations. Monitoring and analyzing modifications to these registry keys, with the noted exclusions, are essential steps in identifying attempts to exploit the vulnerabilities CVE-2021-31979 and CVE-2021-33771, or in deploying DevilsTongue malware, indicating potential compromise by the Sourgum threat group.\n\nBy focusing on such registry key modifications, security teams can quickly identify and mitigate activities linked to recognized tactics, techniques, and procedures associated with these specific vulnerabilities and threat actors. This level of monitoring is aligned with understanding the intricacies of the Windows registry and its role in system and software configuration, providing a vital checkpoint for intercepting malicious operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_stream:\n        CommandLine|contains: 'txt:'\n    selection_tools_type:\n        CommandLine|contains|all:\n            - 'type '\n            - ' > '\n    selection_tools_makecab:\n        CommandLine|contains|all:\n            - 'makecab '\n            - '.cab'\n    selection_tools_reg:\n        CommandLine|contains|all:\n            - 'reg '\n            - ' export '\n    selection_tools_regedit:\n        CommandLine|contains|all:\n            - 'regedit '\n            - ' /E '\n    selection_tools_esentutl:\n        CommandLine|contains|all:\n            - 'esentutl '\n            - ' /y '\n            - ' /d '\n            - ' /o '\n    condition: selection_stream and (1 of selection_tools_*)\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_stream:\n        CommandLine|contains: 'txt:'\n    selection_tools_type:\n        CommandLine|contains|all:\n            - 'type '\n            - ' > '\n    selection_tools_makecab:\n        CommandLine|contains|all:\n            - 'makecab '\n            - '.cab'\n    selection_tools_reg:\n        CommandLine|contains|all:\n            - 'reg '\n            - ' export '\n    selection_tools_regedit:\n        CommandLine|contains|all:\n            - 'regedit '\n            - ' /E '\n    selection_tools_esentutl:\n        CommandLine|contains|all:\n            - 'esentutl '\n            - ' /y '\n            - ' /d '\n            - ' /o '\n    condition: selection_stream and (1 of selection_tools_*)\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection",
      "answer": "In order to detect execution from an Alternate Data Stream (ADS), where adversaries may use NTFS file attributes to hide their malicious data in order to evade detection, you should monitor process creation logs on Windows systems for specific command-line patterns. Look for instances where the command line contains 'txt:', which indicates potential access or interaction with an alternate data stream. Additionally, be alert for command lines that combine certain tools and parameters, such as:\n\n- Use of 'type ' along with redirection '> ', which may suggest an attempt to display or redirect the contents of a file, possibly involving an ADS.\n- Execution involving 'makecab ' followed by '.cab', which could indicate compression of files into a Cabinet file, potentially to disguise malicious activity.\n- Commands starting with 'reg ' followed by ' export ', suggesting attempts to export registry keys, possibly for analysis or manipulation outside of standard registry tools.\n- Utilization of 'regedit ' with ' /E ', indicating export operations via Registry Editor, again potentially for malicious manipulation.\n- Execution of 'esentutl ' accompanied by '/y', '/d', and '/o' flags, which points to attempts to copy, defragment, or repair Extensible Storage Engine databases, potentially indicating more sophisticated adversary behavior involving data manipulation or extraction.\n\nIn essence, by monitoring for these specific command-line activities within process creation events, one can uncover potential misuse of alternate data streams by adversaries aiming to execute or hide malicious data, supporting efforts to evade detection. This monitoring approach crucially targets a range of tools and operations that could be exploited for such purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of new certificate on the system which attackers may use to avoid warnings when connecting to controlled web servers or C2s.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect installation of new certificate on the system which attackers may use to avoid warnings when connecting to controlled web servers or C2s, you should: monitor process creation logs on Linux systems for instances where processes ending with '/update-ca-certificates' or '/update-ca-trust' are started. This activity could indicate that new certificates are being installed on the system, which might be an attempt by attackers to prevent security warnings when establishing connections to malicious web servers or command and control servers (C2s). It's important to note that such process activity can also occur during legitimate administration activities, so the detection level is considered low, suggesting that further investigation is warranted to confirm malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith:\n            - '/update-ca-certificates'\n            - '/update-ca-trust'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith:\n            - '/update-ca-certificates'\n            - '/update-ca-trust'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: low\n",
      "question": "installation of new certificate on the system which attackers may use to avoid warnings when connecting to controlled web servers or C2s",
      "answer": "In order to detect installation of new certificate on the system which attackers may use to avoid warnings when connecting to controlled web servers or C2s, you should: monitor process creation logs on Linux systems for instances where processes ending with '/update-ca-certificates' or '/update-ca-trust' are started. This activity could indicate that new certificates are being installed on the system, which might be an attempt by attackers to prevent security warnings when establishing connections to malicious web servers or command and control servers (C2s). It's important to note that such process activity can also occur during legitimate administration activities, so the detection level is considered low, suggesting that further investigation is warranted to confirm malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an Google Workspace user is granted admin privileges..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Google Workspace user is granted admin privileges, you should monitor Google Workspace admin logs for events that indicate the granting of delegated admin privileges or admin privileges directly. This involves checking the logs from the Google Workspace Admin service, specifically focusing on events named GRANT_DELEGATED_ADMIN_PRIVILEGES and GRANT_ADMIN_PRIVILEGE. These events are crucial as they signify that a user's privileges have been elevated to an administrative level, potentially indicating an unauthorized attempt to gain elevated access within the organization's Google Workspace environment. It is important to note that there can be legitimate changes in admin role privileges by system administrators; hence these should be considered while evaluating potential security incidents. This detection strategy is rated with a medium level of urgency due to the significant impact that unauthorized admin access can have, yet it acknowledges the possibility of legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection:\n        eventService: admin.googleapis.com\n        eventName:\n            - GRANT_DELEGATED_ADMIN_PRIVILEGES\n            - GRANT_ADMIN_PRIVILEGE\n    condition: selection\nfalsepositives:\n    - Google Workspace admin role privileges, may be modified by system administrators.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection:\n        eventService: admin.googleapis.com\n        eventName:\n            - GRANT_DELEGATED_ADMIN_PRIVILEGES\n            - GRANT_ADMIN_PRIVILEGE\n    condition: selection\nfalsepositives:\n    - Google Workspace admin role privileges, may be modified by system administrators.\nlevel: medium\n",
      "question": "when an Google Workspace user is granted admin privileges.",
      "answer": "In order to detect when a Google Workspace user is granted admin privileges, you should monitor Google Workspace admin logs for events that indicate the granting of delegated admin privileges or admin privileges directly. This involves checking the logs from the Google Workspace Admin service, specifically focusing on events named GRANT_DELEGATED_ADMIN_PRIVILEGES and GRANT_ADMIN_PRIVILEGE. These events are crucial as they signify that a user's privileges have been elevated to an administrative level, potentially indicating an unauthorized attempt to gain elevated access within the organization's Google Workspace environment. It is important to note that there can be legitimate changes in admin role privileges by system administrators; hence these should be considered while evaluating potential security incidents. This detection strategy is rated with a medium level of urgency due to the significant impact that unauthorized admin access can have, yet it acknowledges the possibility of legitimate administrative actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting logons using NTLM to hosts that are potentially not part of the domain..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect logons using NTLM to hosts that are potentially not part of the domain, you should monitor the operational logs from the Microsoft-Windows-NTLM service. Focus specifically on events with an ID of 8001, which indicate an NTLM authentication attempt. These attempts become particularly noteworthy when the target name of the authentication starts with 'TERMSRV', as this prefix is commonly associated with Terminal Services or Remote Desktop Services, and could indicate an attempt to access resources outside of the domain.\n\nCollect data fields such as the Computer name, Username, Domain Name, and Target Name during these events to help identify the source and target of the NTLM authentication attempts. Be cautious of false positives which may arise from legitimate host connections to valid domains, connections that do not use the Fully Qualified Domain Name (FQDN), and connections to external but legitimate domains. These can be safely excluded from alerts to minimize noise.\n\nThis monitoring strategy is aligned with identifying potentially malicious activities related to Credential Access and Lateral Movement, specifically focusing on suspicious NTLM logons that may indicate an adversary's attempt to move laterally within a network or access resources using compromised credentials.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: ntlm\n    definition: Requires events from Microsoft-Windows-NTLM/Operational\ndetection:\n    selection:\n        EventID: 8001\n        TargetName|startswith: 'TERMSRV'\n    condition: selection\nfields:\n    - Computer\n    - UserName\n    - DomainName\n    - TargetName\nfalsepositives:\n    - Host connections to valid domains, exclude these.\n    - Host connections not using host FQDN.\n    - Host connections to external legitimate domains.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: ntlm\n    definition: Requires events from Microsoft-Windows-NTLM/Operational\ndetection:\n    selection:\n        EventID: 8001\n        TargetName|startswith: 'TERMSRV'\n    condition: selection\nfields:\n    - Computer\n    - UserName\n    - DomainName\n    - TargetName\nfalsepositives:\n    - Host connections to valid domains, exclude these.\n    - Host connections not using host FQDN.\n    - Host connections to external legitimate domains.\nlevel: medium\n",
      "question": "logons using NTLM to hosts that are potentially not part of the domain.",
      "answer": "In order to detect logons using NTLM to hosts that are potentially not part of the domain, you should monitor the operational logs from the Microsoft-Windows-NTLM service. Focus specifically on events with an ID of 8001, which indicate an NTLM authentication attempt. These attempts become particularly noteworthy when the target name of the authentication starts with 'TERMSRV', as this prefix is commonly associated with Terminal Services or Remote Desktop Services, and could indicate an attempt to access resources outside of the domain.\n\nCollect data fields such as the Computer name, Username, Domain Name, and Target Name during these events to help identify the source and target of the NTLM authentication attempts. Be cautious of false positives which may arise from legitimate host connections to valid domains, connections that do not use the Fully Qualified Domain Name (FQDN), and connections to external but legitimate domains. These can be safely excluded from alerts to minimize noise.\n\nThis monitoring strategy is aligned with identifying potentially malicious activities related to Credential Access and Lateral Movement, specifically focusing on suspicious NTLM logons that may indicate an adversary's attempt to move laterally within a network or access resources using compromised credentials."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may employ various system checks to detect and avoid virtualization and analysis environments.\nThis may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who employ various system checks to avoid virtualization and analysis environments, you should focus on monitoring PowerShell scripts within Windows environments. It is essential that Script Block Logging is enabled to capture the PowerShell script activities accurately. The detection strategy involves looking for scripts that contain keywords indicative of system information queries, specifically those that use PowerShell commands like `Get-WmiObject` or its alias `gwmi`. Additionally, scripts querying for specific system information such as `MSAcpi_ThermalZoneTemperature` or `Win32_ComputerSystem` are also red flags. These particular queries are often used by adversaries to gather information about the system, which can help them determine if an analysis or virtualized environment is present, thus enabling them to change their behavior to avoid detection. The detection strategy encompasses monitoring all these elements. Although the potential for false positives exists, the severity level for such detections is considered medium, indicating a balanced approach towards identifying malicious activity without overwhelming the analysts with benign alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - Get-WmiObject\n            - gwmi\n    selection_module:\n        ScriptBlockText|contains:\n            - MSAcpi_ThermalZoneTemperature\n            - Win32_ComputerSystem\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - Get-WmiObject\n            - gwmi\n    selection_module:\n        ScriptBlockText|contains:\n            - MSAcpi_ThermalZoneTemperature\n            - Win32_ComputerSystem\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments.\nThis may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox\n",
      "answer": "In order to detect adversaries who employ various system checks to avoid virtualization and analysis environments, you should focus on monitoring PowerShell scripts within Windows environments. It is essential that Script Block Logging is enabled to capture the PowerShell script activities accurately. The detection strategy involves looking for scripts that contain keywords indicative of system information queries, specifically those that use PowerShell commands like `Get-WmiObject` or its alias `gwmi`. Additionally, scripts querying for specific system information such as `MSAcpi_ThermalZoneTemperature` or `Win32_ComputerSystem` are also red flags. These particular queries are often used by adversaries to gather information about the system, which can help them determine if an analysis or virtualized environment is present, thus enabling them to change their behavior to avoid detection. The detection strategy encompasses monitoring all these elements. Although the potential for false positives exists, the severity level for such detections is considered medium, indicating a balanced approach towards identifying malicious activity without overwhelming the analysts with benign alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect execution of suspicious double extension files in ParentCommandLine.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of suspicious double extension files in ParentCommandLine, you should monitor the process creation logs on Windows systems for activities where the parent process image or command line ends with or contains file extensions indicating a document or script masked as a different file type. Specifically, look for files with dual extensions where the expected document extensions like '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.rtf', '.pdf', and '.txt' are followed by '.lnk' (indicating a shortcut pointing to the original file type) or '.js' (implying an embedded JavaScript script). Such anomalies suggest a possible attempt to deceive users or automated systems by disguising malicious executable scripts as benign documents, which is a common tactic used in various types of cyber attacks, including phishing and malware distribution. Always be cautious with false positives, but given the high risk that these types of files represent, each case warrants thorough investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - ParentImage|endswith:\n            - '.doc.lnk'\n            - '.docx.lnk'\n            - '.xls.lnk'\n            - '.xlsx.lnk'\n            - '.ppt.lnk'\n            - '.pptx.lnk'\n            - '.rtf.lnk'\n            - '.pdf.lnk'\n            - '.txt.lnk'\n            - '.doc.js'\n            - '.docx.js'\n            - '.xls.js'\n            - '.xlsx.js'\n            - '.ppt.js'\n            - '.pptx.js'\n            - '.rtf.js'\n            - '.pdf.js'\n            - '.txt.js'\n        - ParentCommandLine|contains:\n            - '.doc.lnk'\n            - '.docx.lnk'\n            - '.xls.lnk'\n            - '.xlsx.lnk'\n            - '.ppt.lnk'\n            - '.pptx.lnk'\n            - '.rtf.lnk'\n            - '.pdf.lnk'\n            - '.txt.lnk'\n            - '.doc.js'\n            - '.docx.js'\n            - '.xls.js'\n            - '.xlsx.js'\n            - '.ppt.js'\n            - '.pptx.js'\n            - '.rtf.js'\n            - '.pdf.js'\n            - '.txt.js'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - ParentImage|endswith:\n            - '.doc.lnk'\n            - '.docx.lnk'\n            - '.xls.lnk'\n            - '.xlsx.lnk'\n            - '.ppt.lnk'\n            - '.pptx.lnk'\n            - '.rtf.lnk'\n            - '.pdf.lnk'\n            - '.txt.lnk'\n            - '.doc.js'\n            - '.docx.js'\n            - '.xls.js'\n            - '.xlsx.js'\n            - '.ppt.js'\n            - '.pptx.js'\n            - '.rtf.js'\n            - '.pdf.js'\n            - '.txt.js'\n        - ParentCommandLine|contains:\n            - '.doc.lnk'\n            - '.docx.lnk'\n            - '.xls.lnk'\n            - '.xlsx.lnk'\n            - '.ppt.lnk'\n            - '.pptx.lnk'\n            - '.rtf.lnk'\n            - '.pdf.lnk'\n            - '.txt.lnk'\n            - '.doc.js'\n            - '.docx.js'\n            - '.xls.js'\n            - '.xlsx.js'\n            - '.ppt.js'\n            - '.pptx.js'\n            - '.rtf.js'\n            - '.pdf.js'\n            - '.txt.js'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect execution of suspicious double extension files in ParentCommandLine",
      "answer": "In order to detect execution of suspicious double extension files in ParentCommandLine, you should monitor the process creation logs on Windows systems for activities where the parent process image or command line ends with or contains file extensions indicating a document or script masked as a different file type. Specifically, look for files with dual extensions where the expected document extensions like '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.rtf', '.pdf', and '.txt' are followed by '.lnk' (indicating a shortcut pointing to the original file type) or '.js' (implying an embedded JavaScript script). Such anomalies suggest a possible attempt to deceive users or automated systems by disguising malicious executable scripts as benign documents, which is a common tactic used in various types of cyber attacks, including phishing and malware distribution. Always be cautious with false positives, but given the high risk that these types of files represent, each case warrants thorough investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292.\nYou will likely have to tune this rule for your organization, but it is certainly something you should look for and could have applications for malicious activity beyond CVE-2021-42292.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292, you should: \n\nMonitor network connections made by the Excel application on Windows systems, focusing on connections that are initiated by it. Pay particular attention to connections where the destination IP address is not within the IPv6 format and avoids the commonly used private IP address ranges such as '10.x.x.x', '192.168.x.x', and '172.16.x.x' to '172.31.x.x', including the loopback address '127.0.0.1'. These conditions help in identifying potentially malicious activity where Excel might be used as a vector for attack, specifically targeting vulnerabilities like CVE-2021-42292. \n\nIt's important to tune out legitimate connections often seen in business environments, including those to domains related to Microsoft or other operational needs, and connections to templates or resources that might be hosted on internal or trusted external sites. Given the high likelihood of encountering benign triggers due to regular use of Excel in organizational settings, it's advised to regularly review and refine the detection criteria based on observed traffic patterns and business use cases to minimize false positives. This tailored approach will help in maintaining an effective detection strategy for monitoring and mitigating potential security threats leveraging Excel as an attack vector.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\excel.exe'\n        Initiated: 'true'\n        DestinationIsIpv6: 'false'\n    filter:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.0.0.1'\n    condition: selection and not filter\nfalsepositives:\n    - You may have to tune certain domains out that Excel may call out to, such as microsoft or other business use case domains.\n    - Office documents commonly have templates that refer to external addresses, like sharepoint.ourcompany.com may have to be tuned.\n    - It is highly recommended to baseline your activity and tune out common business use cases.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\excel.exe'\n        Initiated: 'true'\n        DestinationIsIpv6: 'false'\n    filter:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.0.0.1'\n    condition: selection and not filter\nfalsepositives:\n    - You may have to tune certain domains out that Excel may call out to, such as microsoft or other business use case domains.\n    - Office documents commonly have templates that refer to external addresses, like sharepoint.ourcompany.com may have to be tuned.\n    - It is highly recommended to baseline your activity and tune out common business use cases.\nlevel: medium\n",
      "question": "an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292.\nYou will likely have to tune this rule for your organization, but it is certainly something you should look for and could have applications for malicious activity beyond CVE-2021-42292.\n",
      "answer": "In order to detect an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292, you should: \n\nMonitor network connections made by the Excel application on Windows systems, focusing on connections that are initiated by it. Pay particular attention to connections where the destination IP address is not within the IPv6 format and avoids the commonly used private IP address ranges such as '10.x.x.x', '192.168.x.x', and '172.16.x.x' to '172.31.x.x', including the loopback address '127.0.0.1'. These conditions help in identifying potentially malicious activity where Excel might be used as a vector for attack, specifically targeting vulnerabilities like CVE-2021-42292. \n\nIt's important to tune out legitimate connections often seen in business environments, including those to domains related to Microsoft or other operational needs, and connections to templates or resources that might be hosted on internal or trusted external sites. Given the high likelihood of encountering benign triggers due to regular use of Excel in organizational settings, it's advised to regularly review and refine the detection criteria based on observed traffic patterns and business use cases to minimize false positives. This tailored approach will help in maintaining an effective detection strategy for monitoring and mitigating potential security threats leveraging Excel as an attack vector."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting new owner is added to an application. This gives that account privileges to make modifications and configuration changes to the application..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a new owner is added to an application, which gives that account privileges to make modifications and configuration changes to the application, you should monitor the Azure audit logs for events where the message indicates an owner has been added to an application. This involves looking for logs with the property message containing the phrase \"Add owner to application.\" It is important to consider that legitimate management activities may trigger this detection, such as when a new application owner is added by an administrator. This scenario is considered a medium-level threat because adding a new owner can potentially lead to unauthorized changes or access if done maliciously.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add owner to application\n    condition: selection\nfalsepositives:\n    - When a new application owner is added by an administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add owner to application\n    condition: selection\nfalsepositives:\n    - When a new application owner is added by an administrator\nlevel: medium\n",
      "question": "new owner is added to an application. This gives that account privileges to make modifications and configuration changes to the application.",
      "answer": "In order to detect when a new owner is added to an application, which gives that account privileges to make modifications and configuration changes to the application, you should monitor the Azure audit logs for events where the message indicates an owner has been added to an application. This involves looking for logs with the property message containing the phrase \"Add owner to application.\" It is important to consider that legitimate management activities may trigger this detection, such as when a new application owner is added by an administrator. This scenario is considered a medium-level threat because adding a new owner can potentially lead to unauthorized changes or access if done maliciously."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting rundll32 loading a renamed comsvcs.dll to dump process memory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect rundll32 loading a renamed comsvcs.dll to dump process memory, you should monitor Windows image load events for the loading of 'rundll32.exe'. Specifically, look for events where 'rundll32.exe' is being loaded with specific hash values that match known versions of Windows\u2014including Windows 11 21H2 x64, Windows 10 1607, Windows 10 1809, Windows 10 2004 x64, and Windows 10 2004 x86. It's critical to identify these specific instances because they indicate the execution of rundll32 that could be employed to dump process memory, a technique commonly utilized in malicious activities. Additionally, you must ensure that these detections are not associated with the legitimate loading of 'comsvcs.dll', as this DLL can be loaded by 'rundll32.exe' in normal, benign circumstances. To reduce false positives and focus on potential malicious activity, confirm that the 'ImageLoaded' does not end with '\\comsvcs.dll'. Given these parameters, this approach is deemed highly reliable in identifying suspicious activities related to memory dumping via rundll32 without catching legitimate system behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith: '\\rundll32.exe'\n        Hashes|contains:\n            # Add more hashes for other windows versions\n            - IMPHASH=eed93054cb555f3de70eaa9787f32ebb # Windows 11 21H2 x64\n            - IMPHASH=5e0dbdec1fce52daae251a110b4f309d # Windows 10 1607\n            - IMPHASH=eadbccbb324829acb5f2bbe87e5549a8 # Windows 10 1809\n            - IMPHASH=407ca0f7b523319d758a40d7c0193699 # Windows 10 2004 x64\n            - IMPHASH=281d618f4e6271e527e6386ea6f748de # Windows 10 2004 x86\n    filter:\n        ImageLoaded|endswith: '\\comsvcs.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        Image|endswith: '\\rundll32.exe'\n        Hashes|contains:\n            # Add more hashes for other windows versions\n            - IMPHASH=eed93054cb555f3de70eaa9787f32ebb # Windows 11 21H2 x64\n            - IMPHASH=5e0dbdec1fce52daae251a110b4f309d # Windows 10 1607\n            - IMPHASH=eadbccbb324829acb5f2bbe87e5549a8 # Windows 10 1809\n            - IMPHASH=407ca0f7b523319d758a40d7c0193699 # Windows 10 2004 x64\n            - IMPHASH=281d618f4e6271e527e6386ea6f748de # Windows 10 2004 x86\n    filter:\n        ImageLoaded|endswith: '\\comsvcs.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "rundll32 loading a renamed comsvcs.dll to dump process memory",
      "answer": "In order to detect rundll32 loading a renamed comsvcs.dll to dump process memory, you should monitor Windows image load events for the loading of 'rundll32.exe'. Specifically, look for events where 'rundll32.exe' is being loaded with specific hash values that match known versions of Windows\u2014including Windows 11 21H2 x64, Windows 10 1607, Windows 10 1809, Windows 10 2004 x64, and Windows 10 2004 x86. It's critical to identify these specific instances because they indicate the execution of rundll32 that could be employed to dump process memory, a technique commonly utilized in malicious activities. Additionally, you must ensure that these detections are not associated with the legitimate loading of 'comsvcs.dll', as this DLL can be loaded by 'rundll32.exe' in normal, benign circumstances. To reduce false positives and focus on potential malicious activity, confirm that the 'ImageLoaded' does not end with '\\comsvcs.dll'. Given these parameters, this approach is deemed highly reliable in identifying suspicious activities related to memory dumping via rundll32 without catching legitimate system behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation), you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where a Java process (`java.exe`) is the parent process for the creation of command line (`cmd.exe`), PowerShell (`powershell.exe`), or PowerShell Core (`pwsh.exe`) processes. It's important to exclude any activity where the parent or child process's command line includes the term 'build', as this often indicates a legitimate use associated with Continuous Integration (CI) build agents rather than malicious activity. The detection holds a medium severity level, acknowledging that while not all instances of shell spawning from a Java process are malicious, this pattern warrants further investigation due to the potential link to exploitation efforts, like those seen with the log4j vulnerability. Be aware that legitimate uses of system binaries and company-specific internal usages might generate false positive alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter:\n        ParentImage|contains: 'build'  # excluding CI build agents\n        CommandLine|contains: 'build'  # excluding CI build agents\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    filter:\n        ParentImage|contains: 'build'  # excluding CI build agents\n        CommandLine|contains: 'build'  # excluding CI build agents\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: medium\n",
      "question": "shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)",
      "answer": "In order to detect shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation), you should: focus on monitoring the creation of processes on Windows systems. Specifically, look for instances where a Java process (`java.exe`) is the parent process for the creation of command line (`cmd.exe`), PowerShell (`powershell.exe`), or PowerShell Core (`pwsh.exe`) processes. It's important to exclude any activity where the parent or child process's command line includes the term 'build', as this often indicates a legitimate use associated with Continuous Integration (CI) build agents rather than malicious activity. The detection holds a medium severity level, acknowledging that while not all instances of shell spawning from a Java process are malicious, this pattern warrants further investigation due to the potential link to exploitation efforts, like those seen with the log4j vulnerability. Be aware that legitimate uses of system binaries and company-specific internal usages might generate false positive alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious Spring framework exceptions that could indicate exploitation attempts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious Spring framework exceptions that could indicate exploitation attempts, you should: Monitor application logs from products using the Spring framework for occurrences of specific exceptions. These exceptions include AccessDeniedException, CsrfException, InvalidCsrfTokenException, MissingCsrfTokenException, CookieTheftException, InvalidCookieException, and RequestRejectedException. When any of these exceptions are recorded in the logs, it might suggest an attempt to exploit the system, although one must consider potential false positives that could arise from application bugs. The severity of this monitoring strategy is considered medium, highlighting the importance of staying vigilant against possible exploitation activities targeting the Spring framework.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: application\n    product: spring\ndetection:\n    keywords:\n        - AccessDeniedException\n        - CsrfException\n        - InvalidCsrfTokenException\n        - MissingCsrfTokenException\n        - CookieTheftException\n        - InvalidCookieException\n        - RequestRejectedException\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: application\n    product: spring\ndetection:\n    keywords:\n        - AccessDeniedException\n        - CsrfException\n        - InvalidCsrfTokenException\n        - MissingCsrfTokenException\n        - CookieTheftException\n        - InvalidCookieException\n        - RequestRejectedException\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: medium\n",
      "question": "suspicious Spring framework exceptions that could indicate exploitation attempts",
      "answer": "In order to detect suspicious Spring framework exceptions that could indicate exploitation attempts, you should: Monitor application logs from products using the Spring framework for occurrences of specific exceptions. These exceptions include AccessDeniedException, CsrfException, InvalidCsrfTokenException, MissingCsrfTokenException, CookieTheftException, InvalidCookieException, and RequestRejectedException. When any of these exceptions are recorded in the logs, it might suggest an attempt to exploit the system, although one must consider potential false positives that could arise from application bugs. The severity of this monitoring strategy is considered medium, highlighting the importance of staying vigilant against possible exploitation activities targeting the Spring framework."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of base64 utility to decode arbitrary base64-encoded text.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of base64 utility to decode arbitrary base64-encoded text, you should monitor process creation logs on Linux systems for occurrences where the base64 utility is invoked. Specifically, look for processes whose image name ends with '/base64' and whose command line includes the '-d' or '--decode' argument, indicating that the base64 utility is being used for decoding operations. This detection focuses on identifying potential misuse of the base64 command, which can be used by adversaries to decode malicious payloads or configurations encoded in base64 format. However, it should be noted that base64 decoding can also be used for legitimate activities, and therefore, any detection should be considered with a low level of suspicion and further investigated to rule out false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/base64'\n        CommandLine|contains: '-d' # Also covers \"--decode\"\n    condition: selection\nfalsepositives:\n    - Legitimate activities\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/base64'\n        CommandLine|contains: '-d' # Also covers \"--decode\"\n    condition: selection\nfalsepositives:\n    - Legitimate activities\nlevel: low\n",
      "question": "usage of base64 utility to decode arbitrary base64-encoded text",
      "answer": "In order to detect usage of base64 utility to decode arbitrary base64-encoded text, you should monitor process creation logs on Linux systems for occurrences where the base64 utility is invoked. Specifically, look for processes whose image name ends with '/base64' and whose command line includes the '-d' or '--decode' argument, indicating that the base64 utility is being used for decoding operations. This detection focuses on identifying potential misuse of the base64 command, which can be used by adversaries to decode malicious payloads or configurations encoded in base64 format. However, it should be noted that base64 decoding can also be used for legitimate activities, and therefore, any detection should be considered with a low level of suspicion and further investigated to rule out false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc., you should: Monitor the creation of processes on Windows systems, specifically focusing on the execution of the ntdsutil.exe file. This utility can be identified either by its image path ending in '\\ntdsutil.exe' or by its original filename 'ntdsutil.exe'. Pay special attention to the command line used during execution, looking for two critical activities: the first involves commands containing both 'snapshot' and 'mount', which indicates the mounting of a specific snapshot, a potential indicator of an attack. The second activity focuses on variations of the command line containing fragments like 'ac', ' i', and ' ntds', showcasing attempts to activate instances related to NTDS, which is the AD database. These signs can be indicators of malicious actions, although be aware that they might also stem from legitimate administrative tasks such as snapshot restoration. The detection is tagged with medium level importance due to its potential for false positives, including legitimate administrative or restoration activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ntdsutil.exe'\n        - OriginalFileName: 'ntdsutil.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - 'snapshot'\n            - 'mount ' # mounts a specific snapshot - Ex: ntdsutil snapshot \"mount c2b3e2c6-1ffb-4625-ba8e-3503c27a9fcb\" quit quit\n        - CommandLine|contains|all:\n            # This offers more coverage to the \"selection_oneliner_1\" case in rule 8bc64091-6875-4881-aaf9-7bd25b5dda08\n            # The shorest form of \"activate\" can \"ac\". But \"act\", \"acti\"...etc are also valid forms\n            # Same case with the \"instance\" flag\n            - 'ac'\n            - ' i'\n            - ' ntds'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage to restore snapshots\n    - Legitimate admin activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ntdsutil.exe'\n        - OriginalFileName: 'ntdsutil.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - 'snapshot'\n            - 'mount ' # mounts a specific snapshot - Ex: ntdsutil snapshot \"mount c2b3e2c6-1ffb-4625-ba8e-3503c27a9fcb\" quit quit\n        - CommandLine|contains|all:\n            # This offers more coverage to the \"selection_oneliner_1\" case in rule 8bc64091-6875-4881-aaf9-7bd25b5dda08\n            # The shorest form of \"activate\" can \"ac\". But \"act\", \"acti\"...etc are also valid forms\n            # Same case with the \"instance\" flag\n            - 'ac'\n            - ' i'\n            - ' ntds'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage to restore snapshots\n    - Legitimate admin activity\nlevel: medium\n",
      "question": "execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc.",
      "answer": "In order to detect execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc., you should: Monitor the creation of processes on Windows systems, specifically focusing on the execution of the ntdsutil.exe file. This utility can be identified either by its image path ending in '\\ntdsutil.exe' or by its original filename 'ntdsutil.exe'. Pay special attention to the command line used during execution, looking for two critical activities: the first involves commands containing both 'snapshot' and 'mount', which indicates the mounting of a specific snapshot, a potential indicator of an attack. The second activity focuses on variations of the command line containing fragments like 'ac', ' i', and ' ntds', showcasing attempts to activate instances related to NTDS, which is the AD database. These signs can be indicators of malicious actions, although be aware that they might also stem from legitimate administrative tasks such as snapshot restoration. The detection is tagged with medium level importance due to its potential for false positives, including legitimate administrative or restoration activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting installation of the Azure Hybrid Connection Manager service to allow remote code execution from Azure function..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the installation of the Azure Hybrid Connection Manager service to allow remote code execution from Azure function, you should: Focus on monitoring registry event logs on Windows systems. Watch specifically for events where the target object contains references to '\\Services\\HybridConnectionManager' or where the event type indicates a change in value (`SetValue`) coupled with details that contain 'Microsoft.HybridConnectionManager.Listener.exe'. These actions might represent attempts to install or modify the Azure Hybrid Connection Manager service, which could facilitate remote code execution from an Azure function. It's important to understand that due to the nature of these indicators, there could be cases where legitimate activities trigger these conditions, though such instances are not well documented and thus considered unknown. Nonetheless, these activities are flagged with a high severity level due to their potential implications related to remote code execution threats, specifically targeting techniques of Execution and Persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection1:\n        TargetObject|contains: '\\Services\\HybridConnectionManager'\n    selection2:\n        EventType: SetValue\n        Details|contains: 'Microsoft.HybridConnectionManager.Listener.exe'\n    condition: selection1 or selection2\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection1:\n        TargetObject|contains: '\\Services\\HybridConnectionManager'\n    selection2:\n        EventType: SetValue\n        Details|contains: 'Microsoft.HybridConnectionManager.Listener.exe'\n    condition: selection1 or selection2\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "installation of the Azure Hybrid Connection Manager service to allow remote code execution from Azure function.",
      "answer": "In order to detect the installation of the Azure Hybrid Connection Manager service to allow remote code execution from Azure function, you should: Focus on monitoring registry event logs on Windows systems. Watch specifically for events where the target object contains references to '\\Services\\HybridConnectionManager' or where the event type indicates a change in value (`SetValue`) coupled with details that contain 'Microsoft.HybridConnectionManager.Listener.exe'. These actions might represent attempts to install or modify the Azure Hybrid Connection Manager service, which could facilitate remote code execution from an Azure function. It's important to understand that due to the nature of these indicators, there could be cases where legitimate activities trigger these conditions, though such instances are not well documented and thus considered unknown. Nonetheless, these activities are flagged with a high severity level due to their potential implications related to remote code execution threats, specifically targeting techniques of Execution and Persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious network connections made by a well-known Windows binary run with no command line parameters.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious network connections made by a well-known Windows binary run with no command line parameters, you should monitor network connections from Windows systems for specific conditions. These include tracking connections initiated by the system where the process launching the connection ends with `\\regsvr32.exe`, `\\rundll32.exe`, or `\\dllhost.exe`. These executable files are legitimate Windows binaries but can be used maliciously to establish network connections.\n\nCriteria for detection include ensuring that the connection has been initiated (marked as 'true') and that the image or command line of the process initiating the connection ends with one of the mentioned executables. However, connections where these executables are run without any command line parameters should also be scrutinized. This is highlighted by filtering out instances where the command line parameter is either empty or null, suggesting that the executable was possibly invoked without any arguments, which is a common tactic used by attackers to avoid detection.\n\nGiven the high level of suspicion when these conditions are met, it is recommended to set the detection level to high due to the potential misuse of these Windows binaries in the facilitation of unauthorized network connections. Although some activities might be benign, leading to unknown false positives, the tags associated with this detection include tactics and techniques such as Execution, Persistence, Privilege Escalation, Defense Evasion, and potentially others directly related to the misuse of system utilities or binaries to achieve malicious objectives. \n\nThis method of detection is critical in identifying and mitigating threats that leverage legitimate system files for malicious network activities, thus enhancing the overall security posture against a variety of attack vectors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        Image|endswith:\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\dllhost.exe'\n        CommandLine|endswith:\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\dllhost.exe'\n    filter_no_cmdline:\n        CommandLine: ''\n    filter_null: # e.g. Sysmon has no CommandLine field in network events with ID 3\n        CommandLine: null\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        Image|endswith:\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\dllhost.exe'\n        CommandLine|endswith:\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\dllhost.exe'\n    filter_no_cmdline:\n        CommandLine: ''\n    filter_null: # e.g. Sysmon has no CommandLine field in network events with ID 3\n        CommandLine: null\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious network connections made by a well-known Windows binary run with no command line parameters",
      "answer": "In order to detect suspicious network connections made by a well-known Windows binary run with no command line parameters, you should monitor network connections from Windows systems for specific conditions. These include tracking connections initiated by the system where the process launching the connection ends with `\\regsvr32.exe`, `\\rundll32.exe`, or `\\dllhost.exe`. These executable files are legitimate Windows binaries but can be used maliciously to establish network connections.\n\nCriteria for detection include ensuring that the connection has been initiated (marked as 'true') and that the image or command line of the process initiating the connection ends with one of the mentioned executables. However, connections where these executables are run without any command line parameters should also be scrutinized. This is highlighted by filtering out instances where the command line parameter is either empty or null, suggesting that the executable was possibly invoked without any arguments, which is a common tactic used by attackers to avoid detection.\n\nGiven the high level of suspicion when these conditions are met, it is recommended to set the detection level to high due to the potential misuse of these Windows binaries in the facilitation of unauthorized network connections. Although some activities might be benign, leading to unknown false positives, the tags associated with this detection include tactics and techniques such as Execution, Persistence, Privilege Escalation, Defense Evasion, and potentially others directly related to the misuse of system utilities or binaries to achieve malicious objectives. \n\nThis method of detection is critical in identifying and mitigating threats that leverage legitimate system files for malicious network activities, thus enhancing the overall security posture against a variety of attack vectors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Honk Kong universities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Hong Kong universities, you should monitor Windows process creations for specific patterns indicative of this malware activity. Look for processes that are initiated from certain suspicious locations or exhibit unusual behaviors, such as:\n\n1. Processes that are launched from the Windows Temp directory or by 'hpqhvind.exe', and those creating files in 'C:\\ProgramData\\DRM'.\n2. Instances where 'C:\\ProgramData\\DRM' is the starting location of a parent process that launches 'wmplayer.exe'.\n3. Processes that are started by 'Test.exe' and also create an instance of 'wmplayer.exe'.\n4. The specific creation of a process named 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'.\n5. Processes begun by any executables located in 'C:\\ProgramData\\DRM\\Windows' that subsequently start 'SearchFilterHost.exe'.\n\nMonitoring for such process creation events will help in identifying activities associated with the Winnti malware. Generally, there should be minimal false positives for these detection criteria, indicating a high level of confidence in these as indicators of compromise. This approach is critical for ensuring the cybersecurity of systems, particularly in environments that are known targets of this malware, such as universities in Hong Kong.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|contains:\n            - 'C:\\Windows\\Temp'\n            - '\\hpqhvind.exe'\n        Image|startswith: 'C:\\ProgramData\\DRM'\n    selection2:\n        ParentImage|startswith: 'C:\\ProgramData\\DRM'\n        Image|endswith: '\\wmplayer.exe'\n    selection3:\n        ParentImage|endswith: '\\Test.exe'\n        Image|endswith: '\\wmplayer.exe'\n    selection4:\n        Image: 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'\n    selection5:\n        ParentImage|startswith: 'C:\\ProgramData\\DRM\\Windows'\n        Image|endswith: '\\SearchFilterHost.exe'\n    condition: 1 of selection*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|contains:\n            - 'C:\\Windows\\Temp'\n            - '\\hpqhvind.exe'\n        Image|startswith: 'C:\\ProgramData\\DRM'\n    selection2:\n        ParentImage|startswith: 'C:\\ProgramData\\DRM'\n        Image|endswith: '\\wmplayer.exe'\n    selection3:\n        ParentImage|endswith: '\\Test.exe'\n        Image|endswith: '\\wmplayer.exe'\n    selection4:\n        Image: 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'\n    selection5:\n        ParentImage|startswith: 'C:\\ProgramData\\DRM\\Windows'\n        Image|endswith: '\\SearchFilterHost.exe'\n    condition: 1 of selection*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Honk Kong universities",
      "answer": "In order to detect specific process characteristics of Winnti malware noticed in Dec/Jan 2020 in a campaign against Hong Kong universities, you should monitor Windows process creations for specific patterns indicative of this malware activity. Look for processes that are initiated from certain suspicious locations or exhibit unusual behaviors, such as:\n\n1. Processes that are launched from the Windows Temp directory or by 'hpqhvind.exe', and those creating files in 'C:\\ProgramData\\DRM'.\n2. Instances where 'C:\\ProgramData\\DRM' is the starting location of a parent process that launches 'wmplayer.exe'.\n3. Processes that are started by 'Test.exe' and also create an instance of 'wmplayer.exe'.\n4. The specific creation of a process named 'C:\\ProgramData\\DRM\\CLR\\CLR.exe'.\n5. Processes begun by any executables located in 'C:\\ProgramData\\DRM\\Windows' that subsequently start 'SearchFilterHost.exe'.\n\nMonitoring for such process creation events will help in identifying activities associated with the Winnti malware. Generally, there should be minimal false positives for these detection criteria, indicating a high level of confidence in these as indicators of compromise. This approach is critical for ensuring the cybersecurity of systems, particularly in environments that are known targets of this malware, such as universities in Hong Kong."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file and folder permission changes..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0|contains:\n            - 'chmod'\n            - 'chown'\n    condition: selection\nfalsepositives:\n    - User interacting with files permissions (normal/daily behaviour).\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'EXECVE'\n        a0|contains:\n            - 'chmod'\n            - 'chown'\n    condition: selection\nfalsepositives:\n    - User interacting with files permissions (normal/daily behaviour).\nlevel: low\n",
      "question": "file and folder permission changes.",
      "answer": "In order to detect file and folder permission changes, you should: Monitor logs generated by the Auditd service on Linux systems for execution (EXECVE) events where the command executed involves changing file or folder permissions or ownership. Specifically, look for instances where the command includes 'chmod' or 'chown', as these are indicative of attempts to modify the permissions or ownership of files and folders. It's important to note that changes to file and folder permissions and ownership are common in both benign and malicious activities. Therefore, occurrences of these commands might not always signify an attack, and can often be a part of regular system maintenance or user interactions with file permissions. Hence, while monitoring for these commands, it's essential to consider the context in which they are used to differentiate between normal behavior and potential security threats. The detection of such activities has been categorized with a low level of alert due to the possibility of false positives, which include regular user interactions with file permissions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting removal of folders from the \"ProtectedFolders\" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the removal of folders from the \"ProtectedFolders\" list of exploit guard, which could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder, you should monitor Windows registry deletions focusing on the specific event where values under the registry path \"SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders\" are being deleted. This action is tagged in the context of potential intrusion tactics where an attacker may attempt to bypass or disable protective measures around sensitive folders. These tactics align with manipulation of files and directories or an attempt to evade defenses. It is considered a high-level concern because alterations to the Controlled Folder Access settings can directly impact the security posture by allowing unauthorized access or changes to protected folders, potentially leading to data loss or compromise. However, be mindful that there are situations where legitimate administrators might remove applications or modify these settings for valid reasons, and such activities should always be investigated rather than automatically deemed malicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_delete\n    product: windows\ndetection:\n    selection:\n        EventType: DeleteValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders'\n    condition: selection\nfalsepositives:\n    - Legitimate administrators removing applications (should always be investigated)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_delete\n    product: windows\ndetection:\n    selection:\n        EventType: DeleteValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders'\n    condition: selection\nfalsepositives:\n    - Legitimate administrators removing applications (should always be investigated)\nlevel: high\n",
      "question": "removal of folders from the \"ProtectedFolders\" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder",
      "answer": "In order to detect the removal of folders from the \"ProtectedFolders\" list of exploit guard, which could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder, you should monitor Windows registry deletions focusing on the specific event where values under the registry path \"SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders\" are being deleted. This action is tagged in the context of potential intrusion tactics where an attacker may attempt to bypass or disable protective measures around sensitive folders. These tactics align with manipulation of files and directories or an attempt to evade defenses. It is considered a high-level concern because alterations to the Controlled Folder Access settings can directly impact the security posture by allowing unauthorized access or changes to protected folders, potentially leading to data loss or compromise. However, be mindful that there are situations where legitimate administrators might remove applications or modify these settings for valid reasons, and such activities should always be investigated rather than automatically deemed malicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting macOS Gatekeeper bypass via xattr utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect macOS Gatekeeper bypass via xattr utility, you should: Monitor the creation of processes on macOS systems, specifically looking for the execution of the 'xattr' command. The primary focus is on instances where the 'xattr' command is used with the '-r' flag in conjunction with 'com.apple.quarantine' within the command line arguments. This pattern of usage could indicate an attempt to manipulate file attributes to bypass Gatekeeper checks, a security feature in macOS designed to ensure only trusted software runs on the system. While there may be legitimate uses of these command line options, such activities should be scrutinized for potential security implications, keeping in mind that the detection has a low level of confidence due to the possibility of false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith: '/xattr'\n        CommandLine|contains|all:\n            - '-r'\n            - 'com.apple.quarantine'\n    condition: selection\nfalsepositives:\n    - Legitimate activities\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith: '/xattr'\n        CommandLine|contains|all:\n            - '-r'\n            - 'com.apple.quarantine'\n    condition: selection\nfalsepositives:\n    - Legitimate activities\nlevel: low\n",
      "question": "macOS Gatekeeper bypass via xattr utility",
      "answer": "In order to detect macOS Gatekeeper bypass via xattr utility, you should: Monitor the creation of processes on macOS systems, specifically looking for the execution of the 'xattr' command. The primary focus is on instances where the 'xattr' command is used with the '-r' flag in conjunction with 'com.apple.quarantine' within the command line arguments. This pattern of usage could indicate an attempt to manipulate file attributes to bypass Gatekeeper checks, a security feature in macOS designed to ensure only trusted software runs on the system. While there may be legitimate uses of these command line options, such activities should be scrutinized for potential security implications, keeping in mind that the detection has a low level of confidence due to the possibility of false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Clip.exe to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of Clip.exe to execute PowerShell, you should: focus on monitoring Windows Security logs, specifically searching for Event ID 4697 which involves service installation activities. It\u2019s essential that the 'System Security Extension' audit subcategory is enabled to properly log these events. The key indicator of a potential attack is the creation or modification of services that include the 'cmd', '&&', and 'clipboard]::' strings in the Service File Name, suggesting an attempt to execute PowerShell commands in a concealed manner using Clip.exe. It is important to treat every detection as highly suspicious, although there might be cases where the activity is not malicious (though such false positives are unknown). This activity is associated with tactics and techniques that include Execution and Defense Evasion, specifically focusing on the use of PowerShell and obfuscated commands to evade detection mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - '&&'\n            - 'clipboard]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains|all:\n            - 'cmd'\n            - '&&'\n            - 'clipboard]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Clip.exe to execute PowerShell",
      "answer": "In order to detect obfuscated use of Clip.exe to execute PowerShell, you should: focus on monitoring Windows Security logs, specifically searching for Event ID 4697 which involves service installation activities. It\u2019s essential that the 'System Security Extension' audit subcategory is enabled to properly log these events. The key indicator of a potential attack is the creation or modification of services that include the 'cmd', '&&', and 'clipboard]::' strings in the Service File Name, suggesting an attempt to execute PowerShell commands in a concealed manner using Clip.exe. It is important to treat every detection as highly suspicious, although there might be cases where the activity is not malicious (though such false positives are unknown). This activity is associated with tactics and techniques that include Execution and Defense Evasion, specifically focusing on the use of PowerShell and obfuscated commands to evade detection mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges, you should monitor the loading of drivers on Windows systems, particularly for specific hash values that identify the compromised Lenovo driver. Ensure that both Sysmon logs and other hash monitoring systems are checked for the presence of any of the following hashes: SHA256 hash of 'F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE', SHA1 hash of 'B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F', or an MD5 hash of 'B941C8364308990EE4CC6EADF7214E0F'. These specific hashes indicate the loading of a particular driver that has been identified as vulnerable and potentially being exploited for privilege escalation purposes. Note that while detecting these hashes is critical for security, it's possible to encounter false positives in scenarios where legitimate driver loads occur (particularly with drivers that haven't been updated). Given the high risk associated with this vulnerable driver, the detection of any of these hashes should be treated with a high priority level to mitigate potential security threats effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'SHA256=F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE'\n            - 'SHA1=B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F'\n            - 'MD5=B941C8364308990EE4CC6EADF7214E0F'\n    selection_hash:\n        - sha256: 'f05b1ee9e2f6ab704b8919d5071becbce6f9d0f9d0ba32a460c41d5272134abe'\n        - sha1: 'b89a8eef5aeae806af5ba212a8068845cafdab6f'\n        - md5: 'b941c8364308990ee4cc6eadf7214e0f'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate driver loads (old driver that didn't receive an update)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: driver_load\n    product: windows\ndetection:\n    selection_sysmon:\n        Hashes|contains:\n            - 'SHA256=F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE'\n            - 'SHA1=B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F'\n            - 'MD5=B941C8364308990EE4CC6EADF7214E0F'\n    selection_hash:\n        - sha256: 'f05b1ee9e2f6ab704b8919d5071becbce6f9d0f9d0ba32a460c41d5272134abe'\n        - sha1: 'b89a8eef5aeae806af5ba212a8068845cafdab6f'\n        - md5: 'b941c8364308990ee4cc6eadf7214e0f'\n    condition: 1 of selection*\nfalsepositives:\n    - Legitimate driver loads (old driver that didn't receive an update)\nlevel: high\n",
      "question": "load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges",
      "answer": "In order to detect the load of the vulnerable Lenovo driver as reported in CVE-2022-3699 which can be used to escalate privileges, you should monitor the loading of drivers on Windows systems, particularly for specific hash values that identify the compromised Lenovo driver. Ensure that both Sysmon logs and other hash monitoring systems are checked for the presence of any of the following hashes: SHA256 hash of 'F05B1EE9E2F6AB704B8919D5071BECBCE6F9D0F9D0BA32A460C41D5272134ABE', SHA1 hash of 'B89A8EEF5AEAE806AF5BA212A8068845CAFDAB6F', or an MD5 hash of 'B941C8364308990EE4CC6EADF7214E0F'. These specific hashes indicate the loading of a particular driver that has been identified as vulnerable and potentially being exploited for privilege escalation purposes. Note that while detecting these hashes is critical for security, it's possible to encounter false positives in scenarios where legitimate driver loads occur (particularly with drivers that haven't been updated). Given the high risk associated with this vulnerable driver, the detection of any of these hashes should be treated with a high priority level to mitigate potential security threats effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Golden Chickens deployment method as used by Evilnum and described in ESET July 2020 report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Golden Chickens deployment method as used by Evilnum and described in ESET July 2020 report, you should: monitor the creation of Windows processes where the command line execution involves the use of 'regsvr32' accompanied by the flags '/s' and '/i', and specifically targets files located in the '\\AppData\\Roaming\\' directory with a '.ocx' extension. This pattern is indicative of an attempt to stealthily register an OCX component often used for malicious purposes, aligning with tactics typically utilized by the actors behind Golden Chickens. Due to the critical nature of this detection, it's important to carefully investigate any such occurrences, although be mindful of the potential for rare but legitimate false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'regsvr32'\n            - '/s'\n            - '/i'\n            - '\\AppData\\Roaming\\'\n            - '.ocx'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'regsvr32'\n            - '/s'\n            - '/i'\n            - '\\AppData\\Roaming\\'\n            - '.ocx'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "Golden Chickens deployment method as used by Evilnum and described in ESET July 2020 report",
      "answer": "In order to detect Golden Chickens deployment method as used by Evilnum and described in ESET July 2020 report, you should: monitor the creation of Windows processes where the command line execution involves the use of 'regsvr32' accompanied by the flags '/s' and '/i', and specifically targets files located in the '\\AppData\\Roaming\\' directory with a '.ocx' extension. This pattern is indicative of an attempt to stealthily register an OCX component often used for malicious purposes, aligning with tactics typically utilized by the actors behind Golden Chickens. Due to the critical nature of this detection, it's important to carefully investigate any such occurrences, although be mindful of the potential for rare but legitimate false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious program execution in a web service root folder (filter out false positives).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious program execution in a web service root folder (filter out false positives), you should: Monitor for the creation of processes on Windows systems, paying special attention to those initiated from directories commonly associated with web services, such as '\\wwwroot\\', '\\wmpub\\', and '\\htdocs\\'. It's important to exclude processes that are started from less suspicious directories often used for legitimate purposes, like 'bin\\', '\\Tools\\', and '\\SMSComponent\\'. Also, ensure the process wasn't started by 'services.exe' as its parent process to reduce the risk of false positives which might occur from routine operations or the usage of common diagnostic tools that include commands like ping or nslookup. Focus on logging and examining both the command line used to initiate the process and the parent process's command line to more accurately identify and assess potential threats. This approach is tagged with tactics and techniques that typically involve execution and persistence through web servers, aiming to medium level threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '\\wwwroot\\'\n            - '\\wmpub\\'\n            - '\\htdocs\\'\n    filter:\n        Image|contains:\n            - 'bin\\'\n            - '\\Tools\\'\n            - '\\SMSComponent\\'\n        ParentImage|endswith: '\\services.exe'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Various applications\n    - Tools that include ping or nslookup command invocations\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|contains:\n            - '\\wwwroot\\'\n            - '\\wmpub\\'\n            - '\\htdocs\\'\n    filter:\n        Image|contains:\n            - 'bin\\'\n            - '\\Tools\\'\n            - '\\SMSComponent\\'\n        ParentImage|endswith: '\\services.exe'\n    condition: selection and not filter\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Various applications\n    - Tools that include ping or nslookup command invocations\nlevel: medium\n",
      "question": "suspicious program execution in a web service root folder (filter out false positives)",
      "answer": "In order to detect a suspicious program execution in a web service root folder (filter out false positives), you should: Monitor for the creation of processes on Windows systems, paying special attention to those initiated from directories commonly associated with web services, such as '\\wwwroot\\', '\\wmpub\\', and '\\htdocs\\'. It's important to exclude processes that are started from less suspicious directories often used for legitimate purposes, like 'bin\\', '\\Tools\\', and '\\SMSComponent\\'. Also, ensure the process wasn't started by 'services.exe' as its parent process to reduce the risk of false positives which might occur from routine operations or the usage of common diagnostic tools that include commands like ping or nslookup. Focus on logging and examining both the command line used to initiate the process and the parent process's command line to more accurately identify and assess potential threats. This approach is tagged with tactics and techniques that typically involve execution and persistence through web servers, aiming to medium level threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting rule has been modified in the Windows firewall exception list.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a rule has been modified in the Windows firewall exception list, you should monitor Windows Defender Firewall logs specifically for Event IDs 2005 and 2073, which indicate a rule modification in the firewall exception list on Windows 10 and Windows 11, respectively. It's crucial to be attentive to modifications initiated by applications running from common directories such as 'C:\\Program Files (x86)\\' and 'C:\\Program Files\\'. However, if the modification originates from these directories, it might be considered regular activity and may not trigger an alert. This monitoring practice helps in identifying unauthorized or malicious changes to firewall rules, which could potentially expose the system to external threats or facilitate lateral movement within the network. This approach ties into understanding and mitigating tactics and techniques related to Persistence, Privilege Escalation, and Defense Evasion by closely observing changes within the system's protective barriers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: firewall-as\ndetection:\n    selection:\n        EventID:\n            - 2005 # A rule has been modified in the Windows Defender Firewall exception list (Windows 10)\n            - 2073 # A rule has been modified in the Windows Defender Firewall exception list. (Windows 11)\n    filter_main_generic:\n        ModifyingApplication|startswith:\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n    condition: selection and not 1 of filter_main_*\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: firewall-as\ndetection:\n    selection:\n        EventID:\n            - 2005 # A rule has been modified in the Windows Defender Firewall exception list (Windows 10)\n            - 2073 # A rule has been modified in the Windows Defender Firewall exception list. (Windows 11)\n    filter_main_generic:\n        ModifyingApplication|startswith:\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n    condition: selection and not 1 of filter_main_*\nlevel: low\n",
      "question": "rule has been modified in the Windows firewall exception list",
      "answer": "In order to detect when a rule has been modified in the Windows firewall exception list, you should monitor Windows Defender Firewall logs specifically for Event IDs 2005 and 2073, which indicate a rule modification in the firewall exception list on Windows 10 and Windows 11, respectively. It's crucial to be attentive to modifications initiated by applications running from common directories such as 'C:\\Program Files (x86)\\' and 'C:\\Program Files\\'. However, if the modification originates from these directories, it might be considered regular activity and may not trigger an alert. This monitoring practice helps in identifying unauthorized or malicious changes to firewall rules, which could potentially expose the system to external threats or facilitate lateral movement within the network. This approach ties into understanding and mitigating tactics and techniques related to Persistence, Privilege Escalation, and Defense Evasion by closely observing changes within the system's protective barriers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell, you should: Monitor for modifications to critical user environment configuration files within a Linux environment, specifically through the auditd (Audit Daemon) service. This involves tracking changes to files that are critical to a user's environment and can include '/root/.bashrc', '/root/.bash_profile', '/root/.profile', user-specific '.bashrc', '.bash_profile', and '.profile' files within the '/home/*' directories, as well as system-wide configuration files like '/etc/profile', '/etc/shells', '/etc/bashrc', '/etc/csh.cshrc', and '/etc/csh.login'. It's crucial to note that alterations to these files might not always signify malicious activity, as they could result from legitimate admin or user actions. However, because adversaries often target these files to establish persistence mechanisms by executing code every time a user logs in or initiates a new shell session, monitoring changes to them is vital. Such monitoring is important for catching tactics involving persistence and privilege escalation, although one must be cautious of false positives which might arise from regular system or user modifications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name:\n            - '/root/.bashrc'\n            - '/root/.bash_profile'\n            - '/root/.profile'\n            - '/home/*/.bashrc'\n            - '/home/*/.bash_profile'\n            - '/home/*/.profile'\n            - '/etc/profile'\n            - '/etc/shells'\n            - '/etc/bashrc'\n            - '/etc/csh.cshrc'\n            - '/etc/csh.login'\n    condition: selection\nfalsepositives:\n    - Admin or User activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name:\n            - '/root/.bashrc'\n            - '/root/.bash_profile'\n            - '/root/.profile'\n            - '/home/*/.bashrc'\n            - '/home/*/.bash_profile'\n            - '/home/*/.profile'\n            - '/etc/profile'\n            - '/etc/shells'\n            - '/etc/bashrc'\n            - '/etc/csh.cshrc'\n            - '/etc/csh.login'\n    condition: selection\nfalsepositives:\n    - Admin or User activity\nlevel: medium\n",
      "question": "change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell.",
      "answer": "In order to detect change of user environment. Adversaries can insert code into these files to gain persistence each time a user logs in or opens a new shell, you should: Monitor for modifications to critical user environment configuration files within a Linux environment, specifically through the auditd (Audit Daemon) service. This involves tracking changes to files that are critical to a user's environment and can include '/root/.bashrc', '/root/.bash_profile', '/root/.profile', user-specific '.bashrc', '.bash_profile', and '.profile' files within the '/home/*' directories, as well as system-wide configuration files like '/etc/profile', '/etc/shells', '/etc/bashrc', '/etc/csh.cshrc', and '/etc/csh.login'. It's crucial to note that alterations to these files might not always signify malicious activity, as they could result from legitimate admin or user actions. However, because adversaries often target these files to establish persistence mechanisms by executing code every time a user logs in or initiates a new shell session, monitoring changes to them is vital. Such monitoring is important for catching tactics involving persistence and privilege escalation, although one must be cautious of false positives which might arise from regular system or user modifications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the powerShell Set-Mailbox Cmdlet to set-up an SMTP forwarding rule..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the PowerShell Set-Mailbox Cmdlet to set up an SMTP forwarding rule, you should focus on monitoring PowerShell script activities within Windows environments. Specifically, look for instances where Script Block Logging is enabled, as this provides the necessary visibility into executed PowerShell scripts. The key indicators to watch for include the presence of \"Set-Mailbox\", \"-DeliverToMailboxAndForward\", and \"-ForwardingSmtpAddress\" within the script text, which collectively point toward the configuration of SMTP forwarding rules potentially for malicious purposes. It is important to note that there could be legitimate reasons for these commands to be used, so consider the context in which they appear to reduce false positives. This approach falls under the category of monitoring PowerShell script execution with an emphasis on understanding and identifying potentially malicious command usage related to email forwarding setup.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Mailbox '\n            - ' -DeliverToMailboxAndForward '\n            - ' -ForwardingSmtpAddress '\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the cmdlet to forward emails\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Set-Mailbox '\n            - ' -DeliverToMailboxAndForward '\n            - ' -ForwardingSmtpAddress '\n    condition: selection\nfalsepositives:\n    - Legitimate usage of the cmdlet to forward emails\nlevel: medium\n",
      "question": "usage of the powerShell Set-Mailbox Cmdlet to set-up an SMTP forwarding rule.",
      "answer": "In order to detect usage of the PowerShell Set-Mailbox Cmdlet to set up an SMTP forwarding rule, you should focus on monitoring PowerShell script activities within Windows environments. Specifically, look for instances where Script Block Logging is enabled, as this provides the necessary visibility into executed PowerShell scripts. The key indicators to watch for include the presence of \"Set-Mailbox\", \"-DeliverToMailboxAndForward\", and \"-ForwardingSmtpAddress\" within the script text, which collectively point toward the configuration of SMTP forwarding rules potentially for malicious purposes. It is important to note that there could be legitimate reasons for these commands to be used, so consider the context in which they appear to reduce false positives. This approach falls under the category of monitoring PowerShell script execution with an emphasis on understanding and identifying potentially malicious command usage related to email forwarding setup."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting flashplayer update from an unofficial location.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a flashplayer update from an unofficial location, you should: Monitor proxy logs for specific patterns in URIs indicating an attempt to download Flash Player updates. Look for accesses to URLs containing '/flash_install.php' or ending with '/install_flash_player.exe'. These accesses suggest an attempt to install Flash Player, potentially mimicking a legitimate update mechanism. However, to accurately identify malicious activity, it's crucial to exclude any accesses to these resources hosted on domains ending with '.adobe.com', as this domain is associated with the legitimate Adobe Flash Player updates. The focus on excluding the official Adobe domain helps in reducing false positives, particularly concerning URLs that are not known locations for Flash Player downloads. The significance of this monitoring approach is heightened not only by the high level of risk associated with unauthorized Flash Player installations\u2014which could lead to malware infections or other security breaches\u2014but also categorizes the activity based on exploitation and possibly delivery of malicious payloads, considering it under tactics like execution, persistence, or privilege escalation if further leveraged by attackers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        - c-uri|contains: '/flash_install.php'\n        - c-uri|endswith: '/install_flash_player.exe'\n    filter:\n        cs-host|endswith: '.adobe.com'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown flash download locations\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        - c-uri|contains: '/flash_install.php'\n        - c-uri|endswith: '/install_flash_player.exe'\n    filter:\n        cs-host|endswith: '.adobe.com'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown flash download locations\nlevel: high\n",
      "question": "flashplayer update from an unofficial location",
      "answer": "In order to detect a flashplayer update from an unofficial location, you should: Monitor proxy logs for specific patterns in URIs indicating an attempt to download Flash Player updates. Look for accesses to URLs containing '/flash_install.php' or ending with '/install_flash_player.exe'. These accesses suggest an attempt to install Flash Player, potentially mimicking a legitimate update mechanism. However, to accurately identify malicious activity, it's crucial to exclude any accesses to these resources hosted on domains ending with '.adobe.com', as this domain is associated with the legitimate Adobe Flash Player updates. The focus on excluding the official Adobe domain helps in reducing false positives, particularly concerning URLs that are not known locations for Flash Player downloads. The significance of this monitoring approach is heightened not only by the high level of risk associated with unauthorized Flash Player installations\u2014which could lead to malware infections or other security breaches\u2014but also categorizes the activity based on exploitation and possibly delivery of malicious payloads, considering it under tactics like execution, persistence, or privilege escalation if further leveraged by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting network enumeration performed on AWS..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect network enumeration performed on AWS, you should monitor AWS CloudTrail logs for specific activities that indicate attempts to gather information about the network environment. Specifically, look for multiple (more than five within a 10-minute window) API calls to ec2.amazonaws.com, especially those calling methods such as 'DescribeCarrierGateways', 'DescribeVpcEndpointConnectionNotifications', 'DescribeTransitGatewayMulticastDomains', 'DescribeClientVpnRoutes', 'DescribeDhcpOptions', and 'GetTransitGatewayRouteTableAssociations'. These activities can suggest that an attacker is trying to map out the network, identifying key components and connections that could be leveraged for further attacks or exploitation. However, keep in mind that there could be unknown legitimate reasons for such activities, hence they are initially considered to have a low level of threat. Nonetheless, continuous monitoring of these patterns is essential for maintaining the security posture and detecting potential reconnaissance efforts as part of broader adversarial tactics.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'ec2.amazonaws.com'\n        eventName:\n            - 'DescribeCarrierGateways'\n            - 'DescribeVpcEndpointConnectionNotifications'\n            - 'DescribeTransitGatewayMulticastDomains'\n            - 'DescribeClientVpnRoutes'\n            - 'DescribeDhcpOptions'\n            - 'GetTransitGatewayRouteTableAssociations'\n    timeframe: 10m\n    condition: selection | count() > 5\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 'ec2.amazonaws.com'\n        eventName:\n            - 'DescribeCarrierGateways'\n            - 'DescribeVpcEndpointConnectionNotifications'\n            - 'DescribeTransitGatewayMulticastDomains'\n            - 'DescribeClientVpnRoutes'\n            - 'DescribeDhcpOptions'\n            - 'GetTransitGatewayRouteTableAssociations'\n    timeframe: 10m\n    condition: selection | count() > 5\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "network enumeration performed on AWS.",
      "answer": "In order to detect network enumeration performed on AWS, you should monitor AWS CloudTrail logs for specific activities that indicate attempts to gather information about the network environment. Specifically, look for multiple (more than five within a 10-minute window) API calls to ec2.amazonaws.com, especially those calling methods such as 'DescribeCarrierGateways', 'DescribeVpcEndpointConnectionNotifications', 'DescribeTransitGatewayMulticastDomains', 'DescribeClientVpnRoutes', 'DescribeDhcpOptions', and 'GetTransitGatewayRouteTableAssociations'. These activities can suggest that an attacker is trying to map out the network, identifying key components and connections that could be leveraged for further attacks or exploitation. However, keep in mind that there could be unknown legitimate reasons for such activities, hence they are initially considered to have a low level of threat. Nonetheless, continuous monitoring of these patterns is essential for maintaining the security posture and detecting potential reconnaissance efforts as part of broader adversarial tactics."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an adversary uses the reg.exe utility to add or modify new keys or subkeys.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an adversary uses the reg.exe utility to add or modify new keys or subkeys, you should: monitor the creation of processes on Windows systems, specifically focusing on the execution of the reg.exe utility. Be vigilant for instances where the \"Image\" path ends with '\\reg.exe' or when the \"OriginalFileName\" is exactly 'reg.exe'. Additionally, pay close attention to the command line arguments, especially if they include references to suspicious registry locations such as '\\AppDataLow\\Software\\Microsoft\\', '\\Policies\\Microsoft\\Windows\\OOBE', '\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon', an alternative casing of '\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon', '\\CurrentControlSet\\Control\\SecurityProviders\\WDigest', or '\\Microsoft\\Windows Defender\\'. These locations are commonly targeted for persistent attacks or to modify system configurations maliciously. It is important to evaluate all processes that meet these criteria together (condition: all of selection_*), but also be aware that there are rare cases where legitimate modifications to these registry locations might occur through the command line, which could lead to false positives. This detection strategy is essential for identifying potentially malicious activities associated with tactics and techniques like Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_reg:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_path:\n        CommandLine|contains:\n            # Add more suspicious registry locations below\n            - '\\AppDataLow\\Software\\Microsoft\\'\n            - '\\Policies\\Microsoft\\Windows\\OOBE'\n            - '\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon'\n            - '\\CurrentControlSet\\Control\\SecurityProviders\\WDigest'\n            - '\\Microsoft\\Windows Defender\\'\n    condition: all of selection_*\nfalsepositives:\n    - Rare legitimate add to registry via cli (to these locations)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_reg:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_path:\n        CommandLine|contains:\n            # Add more suspicious registry locations below\n            - '\\AppDataLow\\Software\\Microsoft\\'\n            - '\\Policies\\Microsoft\\Windows\\OOBE'\n            - '\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon'\n            - '\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon'\n            - '\\CurrentControlSet\\Control\\SecurityProviders\\WDigest'\n            - '\\Microsoft\\Windows Defender\\'\n    condition: all of selection_*\nfalsepositives:\n    - Rare legitimate add to registry via cli (to these locations)\nlevel: high\n",
      "question": "when an adversary uses the reg.exe utility to add or modify new keys or subkeys",
      "answer": "In order to detect when an adversary uses the reg.exe utility to add or modify new keys or subkeys, you should: monitor the creation of processes on Windows systems, specifically focusing on the execution of the reg.exe utility. Be vigilant for instances where the \"Image\" path ends with '\\reg.exe' or when the \"OriginalFileName\" is exactly 'reg.exe'. Additionally, pay close attention to the command line arguments, especially if they include references to suspicious registry locations such as '\\AppDataLow\\Software\\Microsoft\\', '\\Policies\\Microsoft\\Windows\\OOBE', '\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon', an alternative casing of '\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon', '\\CurrentControlSet\\Control\\SecurityProviders\\WDigest', or '\\Microsoft\\Windows Defender\\'. These locations are commonly targeted for persistent attacks or to modify system configurations maliciously. It is important to evaluate all processes that meet these criteria together (condition: all of selection_*), but also be aware that there are rare cases where legitimate modifications to these registry locations might occur through the command line, which could lead to false positives. This detection strategy is essential for identifying potentially malicious activities associated with tactics and techniques like Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker register a new SIP provider for persistence and defense evasion.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker registers a new SIP provider for persistence and defense evasion, you should monitor the Windows registry for any SetValue operations (indicating data being written to the registry) specifically targeting the registry keys related to Cryptography Providers and Encoding Types. These registry keys include paths like '\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\', '\\SOFTWARE\\Microsoft\\Cryptography\\OID\\EncodingType', '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\', and '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType'. Additionally, pay attention to registry modifications that add or reference DLLs, especially when the target objects contain '\\Dll' or '\\$DLL'. However, it's essential to exclude any SetValue operations involving known and legitimate SIP providers such as WINTRUST.DLL and mso.dll from the detections. Another specific exclusion should be made for operations involving 'C:\\Windows\\System32\\poqexec.exe' targeting '\\CryptSIPDll' with 'C:\\Windows\\System32\\PsfSip.dll' detailed in the operation, as this might represent a legitimate system activity. This approach aims to minimize false positives like legitimate SIP registrations by the OS or other software, maintaining a focus on potential malicious activities related to persistence and defense evasion. This monitoring is crucial for maintaining computer security against attackers utilizing registry modifications to ensure their malware remains persistent and evades detection effectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_root:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\'\n            - '\\SOFTWARE\\Microsoft\\Cryptography\\OID\\EncodingType'\n            - '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\'\n            - '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType'\n    selection_dll:\n        TargetObject|contains:\n            - '\\Dll'\n            - '\\$DLL'\n    filter:\n        Details:\n            # Add more legitimate SIP providers according to your env\n            - WINTRUST.DLL\n            - mso.dll\n    filter_poqexec:\n        Image: 'C:\\Windows\\System32\\poqexec.exe'\n        TargetObject|contains: '\\CryptSIPDll'\n        Details: 'C:\\Windows\\System32\\PsfSip.dll'\n    condition: all of selection_* and not 1 of filter*\nfalsepositives:\n    - Legitimate SIP being registered by the OS or different software.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_root:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\'\n            - '\\SOFTWARE\\Microsoft\\Cryptography\\OID\\EncodingType'\n            - '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\'\n            - '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType'\n    selection_dll:\n        TargetObject|contains:\n            - '\\Dll'\n            - '\\$DLL'\n    filter:\n        Details:\n            # Add more legitimate SIP providers according to your env\n            - WINTRUST.DLL\n            - mso.dll\n    filter_poqexec:\n        Image: 'C:\\Windows\\System32\\poqexec.exe'\n        TargetObject|contains: '\\CryptSIPDll'\n        Details: 'C:\\Windows\\System32\\PsfSip.dll'\n    condition: all of selection_* and not 1 of filter*\nfalsepositives:\n    - Legitimate SIP being registered by the OS or different software.\nlevel: medium\n",
      "question": "when an attacker register a new SIP provider for persistence and defense evasion",
      "answer": "In order to detect when an attacker registers a new SIP provider for persistence and defense evasion, you should monitor the Windows registry for any SetValue operations (indicating data being written to the registry) specifically targeting the registry keys related to Cryptography Providers and Encoding Types. These registry keys include paths like '\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\', '\\SOFTWARE\\Microsoft\\Cryptography\\OID\\EncodingType', '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\', and '\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType'. Additionally, pay attention to registry modifications that add or reference DLLs, especially when the target objects contain '\\Dll' or '\\$DLL'. However, it's essential to exclude any SetValue operations involving known and legitimate SIP providers such as WINTRUST.DLL and mso.dll from the detections. Another specific exclusion should be made for operations involving 'C:\\Windows\\System32\\poqexec.exe' targeting '\\CryptSIPDll' with 'C:\\Windows\\System32\\PsfSip.dll' detailed in the operation, as this might represent a legitimate system activity. This approach aims to minimize false positives like legitimate SIP registrations by the OS or other software, maintaining a focus on potential malicious activities related to persistence and defense evasion. This monitoring is crucial for maintaining computer security against attackers utilizing registry modifications to ensure their malware remains persistent and evades detection effectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials, you should: Monitor registry settings adjustments within Windows environments, specifically focusing on events where the registry key in question is related to the UseLogonCredential setting within the WDigest path. Look for actions categorized as SetValue events indicating a change in the registry. The critical aspect to watch out for is the modification of the TargetObject ending with 'WDigest\\UseLogonCredential' where the details of the modification involve setting the DWORD value to (0x00000001), which effectively enables the storage of login credentials in clear-text. Given that such modifications could serve as a vector for compromising credentials, monitoring these registry changes is crucial. The primary log source for these observations is registry_set activities related to the Windows operating system. It is essential to remain vigilant for any actions fitting this description, albeit there may be rare instances where these modifications are not indicative of malicious intent, leading to potential false positives. Nonetheless, due to the high impact of enabling clear-text credential storage, such modifications are treated with a high level of suspicion. This detection process is aligned with understanding and preempting tactics and techniques that exploit credential access vulnerabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'WDigest\\UseLogonCredential'\n        Details: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'WDigest\\UseLogonCredential'\n        Details: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials",
      "answer": "In order to detect potential malicious modification of the property value of UseLogonCredential from HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest to enable clear-text credentials, you should: Monitor registry settings adjustments within Windows environments, specifically focusing on events where the registry key in question is related to the UseLogonCredential setting within the WDigest path. Look for actions categorized as SetValue events indicating a change in the registry. The critical aspect to watch out for is the modification of the TargetObject ending with 'WDigest\\UseLogonCredential' where the details of the modification involve setting the DWORD value to (0x00000001), which effectively enables the storage of login credentials in clear-text. Given that such modifications could serve as a vector for compromising credentials, monitoring these registry changes is crucial. The primary log source for these observations is registry_set activities related to the Windows operating system. It is essential to remain vigilant for any actions fitting this description, albeit there may be rare instances where these modifications are not indicative of malicious intent, leading to potential false positives. Nonetheless, due to the high impact of enabling clear-text credential storage, such modifications are treated with a high level of suspicion. This detection process is aligned with understanding and preempting tactics and techniques that exploit credential access vulnerabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting clearing or configuration of eventlogs using wevtutil, powershell and wmic. Might be used by ransomwares during the attack (seen by NotPetya and others)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect clearing or configuration of eventlogs using wevtutil, powershell and wmic, which might be used by ransomwares during an attack (as observed in instances like NotPetya and others), you should: monitor for process creation events on Windows systems where the image path ends with 'wevtutil.exe', 'powershell.exe', 'pwsh.exe', or 'wmic.exe'. Specifically, look for command line arguments that include commands to clear logs (such as 'clear-log', 'cl', 'Clear-EventLog', 'Remove-EventLog', 'Clear-WinEvent', or 'ClearEventLog'), modify log configurations ('set-log', 'sl', attempts to limit event log size or change its configuration), or change the log file's location and name ('lfn:'). Additionally, an exception should be made for legitimate administrative activities, which might involve the use of 'msiexec.exe' as a parent process when updating or installing Microsoft Office, as indicated by specific command line arguments like 'sl'. It is vital to analyze these events carefully because, while they may indicate a breach or malicious activity such as ransomware attempting to cover its tracks, they could also result from ordinary administrative or maintenance tasks. Therefore, a high level of caution should be maintained, and potential false positives such as admin activity, use of scripts and administrative tools, or maintenance activities should be considered.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wevtutil:\n        Image|endswith: '\\wevtutil.exe'\n        CommandLine|contains:\n            - 'clear-log '          # clears specified log\n            - ' cl '                # short version of 'clear-log'\n            - 'set-log '            # modifies config of specified log. could be uset to set it to a tiny size\n            - ' sl '                # short version of 'set-log'\n            - 'lfn:'                # change log file location and name\n    selection_other_ps:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - 'Clear-EventLog '\n            - 'Remove-EventLog '\n            - 'Limit-EventLog '\n            - 'Clear-WinEvent '\n    selection_other_wmic:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains: 'ClearEventLog'\n    filter_msiexec:\n        # Example seen during office update/installation:\n        #   ParentImage: C:\\Windows\\SysWOW64\\msiexec.exe\n        #   CommandLine: \"C:\\WINDOWS\\system32\\wevtutil.exe\" sl Microsoft-RMS-MSIPC/Debug /q:true /e:true /l:4 /rt:false\n        ParentImage:\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n        CommandLine|contains: ' sl '\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Maintenance activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wevtutil:\n        Image|endswith: '\\wevtutil.exe'\n        CommandLine|contains:\n            - 'clear-log '          # clears specified log\n            - ' cl '                # short version of 'clear-log'\n            - 'set-log '            # modifies config of specified log. could be uset to set it to a tiny size\n            - ' sl '                # short version of 'set-log'\n            - 'lfn:'                # change log file location and name\n    selection_other_ps:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - 'Clear-EventLog '\n            - 'Remove-EventLog '\n            - 'Limit-EventLog '\n            - 'Clear-WinEvent '\n    selection_other_wmic:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains: 'ClearEventLog'\n    filter_msiexec:\n        # Example seen during office update/installation:\n        #   ParentImage: C:\\Windows\\SysWOW64\\msiexec.exe\n        #   CommandLine: \"C:\\WINDOWS\\system32\\wevtutil.exe\" sl Microsoft-RMS-MSIPC/Debug /q:true /e:true /l:4 /rt:false\n        ParentImage:\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n        CommandLine|contains: ' sl '\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Admin activity\n    - Scripts and administrative tools used in the monitored environment\n    - Maintenance activity\nlevel: high\n",
      "question": "clearing or configuration of eventlogs using wevtutil, powershell and wmic. Might be used by ransomwares during the attack (seen by NotPetya and others).",
      "answer": "In order to detect clearing or configuration of eventlogs using wevtutil, powershell and wmic, which might be used by ransomwares during an attack (as observed in instances like NotPetya and others), you should: monitor for process creation events on Windows systems where the image path ends with 'wevtutil.exe', 'powershell.exe', 'pwsh.exe', or 'wmic.exe'. Specifically, look for command line arguments that include commands to clear logs (such as 'clear-log', 'cl', 'Clear-EventLog', 'Remove-EventLog', 'Clear-WinEvent', or 'ClearEventLog'), modify log configurations ('set-log', 'sl', attempts to limit event log size or change its configuration), or change the log file's location and name ('lfn:'). Additionally, an exception should be made for legitimate administrative activities, which might involve the use of 'msiexec.exe' as a parent process when updating or installing Microsoft Office, as indicated by specific command line arguments like 'sl'. It is vital to analyze these events carefully because, while they may indicate a breach or malicious activity such as ransomware attempting to cover its tracks, they could also result from ordinary administrative or maintenance tasks. Therefore, a high level of caution should be maintained, and potential false positives such as admin activity, use of scripts and administrative tools, or maintenance activities should be considered."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting programs on a Windows system that should not write executables to disk.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect programs on a Windows system that should not write executables to disk, you should monitor file event logs for instances where certain programs create or modify executable files (.exe, .dll, .ocx). Specifically, keep an eye on the activities of Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which do not typically involve dropping executables. Additionally, watch out for the use of legitimate Windows utilities (often referred to as LOLBINs - Living Off the Land Binaries) such as certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, and mshta.exe, as these can be abused to download or generate executable files but usually should not do so. Moreover, pay attention if executable files are created or altered by processes with names like AcroRd32.exe, RdrCEF.exe, hh.exe, and finger.exe; these are especially suspicious as they normally should never be involved in such actions, indicating potential process injection or masquerading malware. Be aware that detecting these activities necessitates a high level of alertness due to the potential for false positives being unknown, indicating that while anomalies might be rare, each detection should be investigated thoroughly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - '\\eqnedt32.exe'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n            # LOLBINs that can be used to download executables\n            - '\\certutil.exe'\n            - '\\certoc.exe'\n            - '\\CertReq.exe'\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - '\\Desktopimgdownldr.exe'\n            - '\\esentutl.exe'\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.exe'\n            - '.dll'\n            - '.ocx'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Microsoft Office Programs Dropping Executables / Rest of the apps are covered in: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\n            - '\\eqnedt32.exe'\n            - '\\wordpad.exe'\n            - '\\wordview.exe'\n            # LOLBINs that can be used to download executables\n            - '\\certutil.exe'\n            - '\\certoc.exe'\n            - '\\CertReq.exe'\n            #- \\bitsadmin.exe (depends on the environment; comment in if you're sure that bitsadmin doesn't do that in your env)\n            - '\\Desktopimgdownldr.exe'\n            - '\\esentutl.exe'\n            #- \\expand.exe\n            - '\\mshta.exe'\n            # Executables that should never drop an executable to disk (but may after a previous process injection or if it's malware that uses a legitimate name)\n            - '\\AcroRd32.exe'\n            - '\\RdrCEF.exe'\n            - '\\hh.exe'\n            - '\\finger.exe'\n        TargetFilename|endswith:\n            - '.exe'\n            - '.dll'\n            - '.ocx'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "programs on a Windows system that should not write executables to disk",
      "answer": "In order to detect programs on a Windows system that should not write executables to disk, you should monitor file event logs for instances where certain programs create or modify executable files (.exe, .dll, .ocx). Specifically, keep an eye on the activities of Microsoft Office programs like eqnedt32.exe, wordpad.exe, and wordview.exe, which do not typically involve dropping executables. Additionally, watch out for the use of legitimate Windows utilities (often referred to as LOLBINs - Living Off the Land Binaries) such as certutil.exe, certoc.exe, CertReq.exe, Desktopimgdownldr.exe, esentutl.exe, and mshta.exe, as these can be abused to download or generate executable files but usually should not do so. Moreover, pay attention if executable files are created or altered by processes with names like AcroRd32.exe, RdrCEF.exe, hh.exe, and finger.exe; these are especially suspicious as they normally should never be involved in such actions, indicating potential process injection or masquerading malware. Be aware that detecting these activities necessitates a high level of alertness due to the potential for false positives being unknown, indicating that while anomalies might be rare, each detection should be investigated thoroughly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes.\nTools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll.\nAs an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes, you should: focus on monitoring Windows systems for events where either dbghelp.dll or dbgcore.dll libraries are loaded. These specific dynamic link libraries are crucial since they contain the MiniDumpWriteDump API, which can be utilized by both legitimate tools like ProcessHacker and malicious activities, particularly for memory dumping purposes. Notably, certain types of malware or attacker frameworks, such as the SilentTrynity Command and Control (C2) Framework, use these APIs to dump sensitive information like the Lsass.exe process memory, enabling them to exfiltrate this data back to the attacker's control server. It's important to note that the detection looks for instances where these DLLs are loaded without being digitally signed, which increases the suspicion level. While there may be unknown false positives, the significance and potential high impact of this behavior warrant a high alert level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\dbghelp.dll'\n            - '\\dbgcore.dll'\n        Signed: 'false'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\dbghelp.dll'\n            - '\\dbgcore.dll'\n        Signed: 'false'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes.\nTools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll.\nAs an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.\n",
      "answer": "In order to detect the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes, you should: focus on monitoring Windows systems for events where either dbghelp.dll or dbgcore.dll libraries are loaded. These specific dynamic link libraries are crucial since they contain the MiniDumpWriteDump API, which can be utilized by both legitimate tools like ProcessHacker and malicious activities, particularly for memory dumping purposes. Notably, certain types of malware or attacker frameworks, such as the SilentTrynity Command and Control (C2) Framework, use these APIs to dump sensitive information like the Lsass.exe process memory, enabling them to exfiltrate this data back to the attacker's control server. It's important to note that the detection looks for instances where these DLLs are loaded without being digitally signed, which increases the suspicion level. While there may be unknown false positives, the significance and potential high impact of this behavior warrant a high alert level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting files dropped by Winnti as described in RedMimicry Winnti playbook.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect files dropped by Winnti as described in RedMimicry Winnti playbook, you should monitor Windows file events for the creation or modification of specific files. Look out for files with names that conclude with '\\gthread-3.6.dll', '\\sigcmm-2.4.dll', or '\\Windows\\Temp\\tmp.bat'. The detection of these files is crucial as their presence may indicate a Winnti infection, a notorious threat group known for its cyber espionage tactics and techniques. It's important to be vigilant as there might be unknown cases where these indicators do not signify a threat, however, given the context, such instances are likely to be rare. This activity is rated at a high level of concern due to the potential implications and association with known malicious endeavours.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\gthread-3.6.dll'\n            - '\\sigcmm-2.4.dll'\n            - '\\Windows\\Temp\\tmp.bat'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\gthread-3.6.dll'\n            - '\\sigcmm-2.4.dll'\n            - '\\Windows\\Temp\\tmp.bat'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "files dropped by Winnti as described in RedMimicry Winnti playbook",
      "answer": "In order to detect files dropped by Winnti as described in RedMimicry Winnti playbook, you should monitor Windows file events for the creation or modification of specific files. Look out for files with names that conclude with '\\gthread-3.6.dll', '\\sigcmm-2.4.dll', or '\\Windows\\Temp\\tmp.bat'. The detection of these files is crucial as their presence may indicate a Winnti infection, a notorious threat group known for its cyber espionage tactics and techniques. It's important to be vigilant as there might be unknown cases where these indicators do not signify a threat, however, given the context, such instances are likely to be rare. This activity is rated at a high level of concern due to the potential implications and association with known malicious endeavours."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"ShellDispatch.dll\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"ShellDispatch.dll\", you should: monitor Windows image load events for any instances where \"ShellDispatch.dll\" is loaded in a manner that deviates from its legitimate paths. Specifically, look for the loading of this DLL that does not occur within legitimate system directories such as the user's AppData\\Local\\Temp directory or the Windows\\Temp directory. Be aware that some software installers might exhibit similar behavior and could be flagged as false positives. The detection operates at a medium alert level, indicating a balanced approach to sensitivity and the potential for misidentification.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\ShellDispatch.dll'\n    filter_main_legit_path:\n        - ImageLoaded|contains|all:\n            - ':\\Users\\'\n            - '\\AppData\\Local\\Temp\\'\n        - ImageLoaded|contains: ':\\Windows\\Temp\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some installers may trigger some false positives\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\ShellDispatch.dll'\n    filter_main_legit_path:\n        - ImageLoaded|contains|all:\n            - ':\\Users\\'\n            - '\\AppData\\Local\\Temp\\'\n        - ImageLoaded|contains: ':\\Windows\\Temp\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some installers may trigger some false positives\nlevel: medium\n",
      "question": "potential DLL sideloading of \"ShellDispatch.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"ShellDispatch.dll\", you should: monitor Windows image load events for any instances where \"ShellDispatch.dll\" is loaded in a manner that deviates from its legitimate paths. Specifically, look for the loading of this DLL that does not occur within legitimate system directories such as the user's AppData\\Local\\Temp directory or the Windows\\Temp directory. Be aware that some software installers might exhibit similar behavior and could be flagged as false positives. The detection operates at a medium alert level, indicating a balanced approach to sensitivity and the potential for misidentification."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Get-Process command on lsass process, which is in almost all cases a sign of malicious activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a Get-Process command on lsass process, which is in almost all cases a sign of malicious activity, you should: Focus on monitoring PowerShell script activities within a Windows environment, particularly those that involve script block execution. Ensure that Script Block Logging is enabled to capture detailed logging information. Specifically, pay attention to any instance where the PowerShell command `Get-Process lsass` is executed. This command is known for its potential use in malicious activities, particularly because the Local Security Authority Subsystem Service (lsass) process is a common target for attackers seeking to extract sensitive information like passwords from the system memory. Be aware of false positives, which may include legitimate uses of the `Get-Process` command by administrators or users within your environment. These should be filtered out based on the context and necessity of the command usage in your specific setting. The detection of this activity is considered high level due to the critical nature of accessing the lsass process and the potential implications of such actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'Get-Process lsass'\n    condition: selection\nfalsepositives:\n    - Legitimate certificate exports invoked by administrators or users (depends on processes in the environment - filter if unusable)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'Get-Process lsass'\n    condition: selection\nfalsepositives:\n    - Legitimate certificate exports invoked by administrators or users (depends on processes in the environment - filter if unusable)\nlevel: high\n",
      "question": "Get-Process command on lsass process, which is in almost all cases a sign of malicious activity",
      "answer": "In order to detect a Get-Process command on lsass process, which is in almost all cases a sign of malicious activity, you should: Focus on monitoring PowerShell script activities within a Windows environment, particularly those that involve script block execution. Ensure that Script Block Logging is enabled to capture detailed logging information. Specifically, pay attention to any instance where the PowerShell command `Get-Process lsass` is executed. This command is known for its potential use in malicious activities, particularly because the Local Security Authority Subsystem Service (lsass) process is a common target for attackers seeking to extract sensitive information like passwords from the system memory. Be aware of false positives, which may include legitimate uses of the `Get-Process` command by administrators or users within your environment. These should be filtered out based on the context and necessity of the command usage in your specific setting. The detection of this activity is considered high level due to the critical nature of accessing the lsass process and the potential implications of such actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting load of a revoked kernel driver.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the load of a revoked kernel driver, you should monitor the Windows Code Integrity operational logs. Specifically, look out for Event IDs 3021, which indicates that a revoked kernel module has been loaded into the system. Always verify with the publisher if there's a newly signed version of the kernel module available. Additionally, Event ID 3022 signifies that a revoked kernel module was loaded into the system, but was allowed due to a kernel mode debugger being attached. These detections are highly unlikely to be false positives and are classified at a high severity level. This monitoring is crucial for identifying potential malicious activity related to the use of compromised kernel drivers on Windows systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID:\n            - 3021 # Code Integrity determined a revoked kernel module %2 is loaded into the system.  Check with the publisher to see if a new signed version of the kernel module is available.\n            - 3022 # Code Integrity determined a revoked kernel module %2 is loaded into the system. The image is allowed to load because kernel mode debugger is attached.\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID:\n            - 3021 # Code Integrity determined a revoked kernel module %2 is loaded into the system.  Check with the publisher to see if a new signed version of the kernel module is available.\n            - 3022 # Code Integrity determined a revoked kernel module %2 is loaded into the system. The image is allowed to load because kernel mode debugger is attached.\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "load of a revoked kernel driver",
      "answer": "In order to detect the load of a revoked kernel driver, you should monitor the Windows Code Integrity operational logs. Specifically, look out for Event IDs 3021, which indicates that a revoked kernel module has been loaded into the system. Always verify with the publisher if there's a newly signed version of the kernel module available. Additionally, Event ID 3022 signifies that a revoked kernel module was loaded into the system, but was allowed due to a kernel mode debugger being attached. These detections are highly unlikely to be false positives and are classified at a high severity level. This monitoring is crucial for identifying potential malicious activity related to the use of compromised kernel drivers on Windows systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows services that got terminated for whatever reason.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detects Windows services that got terminated for whatever reason, you should: Focus on monitoring Windows system service logs, specifically targeting those generated by the Service Control Manager. The detection strategy hinges on identifying event logs where the Provider Name matches 'Service Control Manager' and the Event ID is 7023, which indicates that a service has been terminated, citing an error for the termination. While implementing this monitoring, bear in mind that encountering such events does not invariably signify malicious activity. Service terminations can occur for a variety of non-malicious reasons, hence such events are generally considered to have a low level of threat severity. Identifying these events can nonetheless be crucial for maintaining system integrity and security, providing valuable insights into potential operational issues or malicious disruptions within the Windows services framework.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7023 # The X Service service terminated with the following error\n    condition: selection\nfalsepositives:\n    - False positives could occur since service termination could happen due to multiple reasons\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7023 # The X Service service terminated with the following error\n    condition: selection\nfalsepositives:\n    - False positives could occur since service termination could happen due to multiple reasons\nlevel: low\n",
      "question": "Windows services that got terminated for whatever reason",
      "answer": "In order to Detects Windows services that got terminated for whatever reason, you should: Focus on monitoring Windows system service logs, specifically targeting those generated by the Service Control Manager. The detection strategy hinges on identifying event logs where the Provider Name matches 'Service Control Manager' and the Event ID is 7023, which indicates that a service has been terminated, citing an error for the termination. While implementing this monitoring, bear in mind that encountering such events does not invariably signify malicious activity. Service terminations can occur for a variety of non-malicious reasons, hence such events are generally considered to have a low level of threat severity. Identifying these events can nonetheless be crucial for maintaining system integrity and security, providing valuable insights into potential operational issues or malicious disruptions within the Windows services framework."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempts to record audio with arecord utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to record audio with arecord utility, you should monitor Linux systems, specifically auditing logs generated by Auditd, for execution events (EXECVE). Look for instances where the arecord utility is executed with specific arguments: the first argument being '-vv' which increases the verbosity of the output, making it more detailed, and the second argument '-fdat' which specifies the format of the recording, in this case, DAT. This combination of arguments is indicative of an attempt to record audio, potentially for surreptitious purposes. Since these logs might contain benign uses of the arecord utility, the level of threat is considered low, but any detection should still be scrutinized. \n\nIn analyzing such activities, it is vital to consider possible false positives, as the use of the arecord command with these arguments might occur in legitimate contexts, and the intention behind these commands might not always be malicious. Nonetheless, monitoring for this behavior is crucial as it aligns with tactics and techniques that could be utilized in reconnaissance or collection efforts by adversaries, though these specific MITRE ATT&CK tags are not directly mentioned in the scenario provided.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: arecord\n        a1: '-vv'\n        a2: '-fdat'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: EXECVE\n        a0: arecord\n        a1: '-vv'\n        a2: '-fdat'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "attempts to record audio with arecord utility",
      "answer": "In order to detect attempts to record audio with arecord utility, you should monitor Linux systems, specifically auditing logs generated by Auditd, for execution events (EXECVE). Look for instances where the arecord utility is executed with specific arguments: the first argument being '-vv' which increases the verbosity of the output, making it more detailed, and the second argument '-fdat' which specifies the format of the recording, in this case, DAT. This combination of arguments is indicative of an attempt to record audio, potentially for surreptitious purposes. Since these logs might contain benign uses of the arecord utility, the level of threat is considered low, but any detection should still be scrutinized. \n\nIn analyzing such activities, it is vital to consider possible false positives, as the use of the arecord command with these arguments might occur in legitimate contexts, and the intention behind these commands might not always be malicious. Nonetheless, monitoring for this behavior is crucial as it aligns with tactics and techniques that could be utilized in reconnaissance or collection efforts by adversaries, though these specific MITRE ATT&CK tags are not directly mentioned in the scenario provided."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.\nAccounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to prevent adversaries from interrupting the availability of system and network resources by inhibiting access to accounts utilized by legitimate users through actions such as deleting, locking, or manipulating accounts (e.g., changing credentials), you should focus on monitoring PowerShell script logs on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture detailed logging information. Look for scripts that contain the commands `Remove-ADGroupMember` along with both parameters `-Identity ` and `-Members `. This combination indicates an attempt to remove members from Active Directory groups, which could be part of an attack to deny access to certain accounts or resources. Be aware that there may be instances where these commands are used legitimately, though such scenarios are considered unknown false positives. The severity level of this activity is medium, implying that while it may not directly indicate a breach, it is suspicious enough to warrant investigation. Understanding these signs and being proactive in detection can help in mitigating threats aimed at disrupting legitimate user access to network resources and accounts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Remove-ADGroupMember'\n            - '-Identity '\n            - '-Members '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Remove-ADGroupMember'\n            - '-Identity '\n            - '-Members '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.\nAccounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\n",
      "answer": "In order to prevent adversaries from interrupting the availability of system and network resources by inhibiting access to accounts utilized by legitimate users through actions such as deleting, locking, or manipulating accounts (e.g., changing credentials), you should focus on monitoring PowerShell script logs on Windows systems. Specifically, ensure that Script Block Logging is enabled to capture detailed logging information. Look for scripts that contain the commands `Remove-ADGroupMember` along with both parameters `-Identity ` and `-Members `. This combination indicates an attempt to remove members from Active Directory groups, which could be part of an attack to deny access to certain accounts or resources. Be aware that there may be instances where these commands are used legitimately, though such scenarios are considered unknown false positives. The severity level of this activity is medium, implying that while it may not directly indicate a breach, it is suspicious enough to warrant investigation. Understanding these signs and being proactive in detection can help in mitigating threats aimed at disrupting legitimate user access to network resources and accounts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\nInvolved domains are bin.equinox.io for download and *.ngrok.io for connections.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available, you should: focus on monitoring process creation logs on Windows systems. Look for command lines that contain specific patterns indicating port forwarding activities over common ports such as 139 (SMB), 445 (Microsoft-DS SMB file sharing), 3389 (RDP), 5985 (WinRM HTTP), and 5986 (WinRM HTTPS). Additionally, detect instances where command lines include arguments that start Ngrok with all configurations from a YAML file, which is a strong indication of configuring a tunnel. Monitoring for the execution of 'ngrok.exe' is crucial, especially when command lines involve initiating TCP or HTTP tunnels or when an authtoken is specified, as this often relates to setting up secure connections using Ngrok. Also, watch out for command lines executing any executable followed by 'authtoken' or starting Ngrok with '--all' switch, which might indicate an attempt to launch tunnels automatically. However, be aware of legitimate uses of these command line switches by other tools or when Ngrok is used for authorized development purposes such as debugging with HTTP 3978. The alert level for these detections should be considered high due to the potential for abuse in facilitating remote access to local services, which could be indicative of initial access or persistence mechanisms by threat actors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - ' tcp 139'\n            - ' tcp 445'\n            - ' tcp 3389'\n            - ' tcp 5985'\n            - ' tcp 5986'\n    selection2:\n        CommandLine|contains|all:\n            - ' start '\n            - '--all'\n            - '--config'\n            - '.yml'\n    selection3:\n        Image|endswith: 'ngrok.exe'\n        CommandLine|contains:\n            - ' tcp '\n            - ' http '\n            - ' authtoken '\n    selection4:\n        CommandLine|contains:\n            - '.exe authtoken '\n            - '.exe start --all'\n    condition: 1 of selection*\nfalsepositives:\n    - Another tool that uses the command line switches of Ngrok\n    - Ngrok http 3978 (https://docs.microsoft.com/en-us/azure/bot-service/bot-service-debug-channel-ngrok?view=azure-bot-service-4.0)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        CommandLine|contains:\n            - ' tcp 139'\n            - ' tcp 445'\n            - ' tcp 3389'\n            - ' tcp 5985'\n            - ' tcp 5986'\n    selection2:\n        CommandLine|contains|all:\n            - ' start '\n            - '--all'\n            - '--config'\n            - '.yml'\n    selection3:\n        Image|endswith: 'ngrok.exe'\n        CommandLine|contains:\n            - ' tcp '\n            - ' http '\n            - ' authtoken '\n    selection4:\n        CommandLine|contains:\n            - '.exe authtoken '\n            - '.exe start --all'\n    condition: 1 of selection*\nfalsepositives:\n    - Another tool that uses the command line switches of Ngrok\n    - Ngrok http 3978 (https://docs.microsoft.com/en-us/azure/bot-service/bot-service-debug-channel-ngrok?view=azure-bot-service-4.0)\nlevel: high\n",
      "question": "use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.\nInvolved domains are bin.equinox.io for download and *.ngrok.io for connections.\n",
      "answer": "In order to detect the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available, you should: focus on monitoring process creation logs on Windows systems. Look for command lines that contain specific patterns indicating port forwarding activities over common ports such as 139 (SMB), 445 (Microsoft-DS SMB file sharing), 3389 (RDP), 5985 (WinRM HTTP), and 5986 (WinRM HTTPS). Additionally, detect instances where command lines include arguments that start Ngrok with all configurations from a YAML file, which is a strong indication of configuring a tunnel. Monitoring for the execution of 'ngrok.exe' is crucial, especially when command lines involve initiating TCP or HTTP tunnels or when an authtoken is specified, as this often relates to setting up secure connections using Ngrok. Also, watch out for command lines executing any executable followed by 'authtoken' or starting Ngrok with '--all' switch, which might indicate an attempt to launch tunnels automatically. However, be aware of legitimate uses of these command line switches by other tools or when Ngrok is used for authorized development purposes such as debugging with HTTP 3978. The alert level for these detections should be considered high due to the potential for abuse in facilitating remote access to local services, which could be indicative of initial access or persistence mechanisms by threat actors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of shell scripts under the \"profile.d\" path..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of shell scripts under the \"profile.d\" path, you should: Monitor Linux file events specifically focusing on the creation or modification of files within the \"/etc/profile.d/\" directory. Pay particular attention to files that have extensions '.csh' or '.sh', as these are shell scripts. It's important to be aware that encountering such events could, at times, be due to legitimate activities. These could include the addition of shell scripts as part of system configurations or during software installations and updates, which commonly occur in the \"profile.d\" directory. Such legitimate actions might trigger false alerts. Therefore, it might be necessary to refine the detection strategy by excluding known good scripts or by integrating this detection with additional contextual events to minimize false positives. The initial severity level for these detections is considered low, allowing for adjustments based on specific environmental needs or after conducting further analysis to better distinguish between benign and malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '/etc/profile.d/'\n        TargetFilename|endswith:\n            - '.csh'\n            - '.sh'\n    condition: selection\nfalsepositives:\n    - Legitimate shell scripts in the \"profile.d\" directory could be common in your environment. Apply additional filter accordingly via \"image\", by adding specific filenames you \"trust\" or by correlating it with other events.\n    - Regular file creation during system update or software installation by the package manager\nlevel: low # Can be increased to a higher level after some tuning\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '/etc/profile.d/'\n        TargetFilename|endswith:\n            - '.csh'\n            - '.sh'\n    condition: selection\nfalsepositives:\n    - Legitimate shell scripts in the \"profile.d\" directory could be common in your environment. Apply additional filter accordingly via \"image\", by adding specific filenames you \"trust\" or by correlating it with other events.\n    - Regular file creation during system update or software installation by the package manager\nlevel: low # Can be increased to a higher level after some tuning\n",
      "question": "creation of shell scripts under the \"profile.d\" path.",
      "answer": "In order to detect the creation of shell scripts under the \"profile.d\" path, you should: Monitor Linux file events specifically focusing on the creation or modification of files within the \"/etc/profile.d/\" directory. Pay particular attention to files that have extensions '.csh' or '.sh', as these are shell scripts. It's important to be aware that encountering such events could, at times, be due to legitimate activities. These could include the addition of shell scripts as part of system configurations or during software installations and updates, which commonly occur in the \"profile.d\" directory. Such legitimate actions might trigger false alerts. Therefore, it might be necessary to refine the detection strategy by excluding known good scripts or by integrating this detection with additional contextual events to minimize false positives. The initial severity level for these detections is considered low, allowing for adjustments based on specific environmental needs or after conducting further analysis to better distinguish between benign and malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should focus on monitoring registry set operations within Windows systems. Specifically, look for events where a SetValue event type occurs that targets the registry path ending with '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Compatibility Assistant\\Store\\C:\\Program Files\\Windows Media Player\\osk.exe'. Additionally, these registry modifications should involve binary data as indicated in the event's details. It's important to note that the detection of such events is critical as they are associated with tactics and techniques like privilege escalation and defense evasion, indicating a potential attempt to bypass User Account Control (UAC) by exploiting the osksupport.dll component of Windows Media Player. Keep in mind that while this activity is highly indicative of malicious behavior, there might be unknown scenarios that could lead to false positives; thus, any detection should be investigated thoroughly to confirm the context of the activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Compatibility Assistant\\Store\\C:\\Program Files\\Windows Media Player\\osk.exe'\n        Details: 'Binary Data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Compatibility Assistant\\Store\\C:\\Program Files\\Windows Media Player\\osk.exe'\n        Details: 'Binary Data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)",
      "answer": "In order to detect the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32), you should focus on monitoring registry set operations within Windows systems. Specifically, look for events where a SetValue event type occurs that targets the registry path ending with '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Compatibility Assistant\\Store\\C:\\Program Files\\Windows Media Player\\osk.exe'. Additionally, these registry modifications should involve binary data as indicated in the event's details. It's important to note that the detection of such events is critical as they are associated with tactics and techniques like privilege escalation and defense evasion, indicating a potential attempt to bypass User Account Control (UAC) by exploiting the osksupport.dll component of Windows Media Player. Keep in mind that while this activity is highly indicative of malicious behavior, there might be unknown scenarios that could lead to false positives; thus, any detection should be investigated thoroughly to confirm the context of the activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an attempt to execute code or create service on remote host via winrm.vbs..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attempt to execute code or create service on a remote host via winrm.vbs, you should focus on monitoring process creation events within Windows environments. Specifically, be on the lookout for instances where the 'cscript.exe' process is initiated, as indicated by either the image path ending with '\\cscript.exe' or the original file name being 'cscript.exe'. Furthermore, pay close attention to the command line arguments used with these process executions. The presence of 'winrm', 'invoke Create wmicimv2/Win32_', and '-r:http' within the same command line suggests an attempt to leverage Windows Remote Management (WinRM) for potentially malicious remote code execution or service creation. The necessity to match all specified command line conditions underlines the sophistication of this detection method, aiming at reducing the likelihood of false positives, although some unknown cases may still occur. This analysis technique is of medium severity and aligns with the understanding of MITRE ATT&CK\u2019s tactics and techniques, specifically focusing on execution and command and control aspects of cyber threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # Note: winrm.vbs can only be run by a process named cscript (see \"IsCScriptEnv\" function)\n        - Image|endswith: '\\cscript.exe'\n        - OriginalFileName: 'cscript.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'winrm'\n            - 'invoke Create wmicimv2/Win32_'\n            - '-r:http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        # Note: winrm.vbs can only be run by a process named cscript (see \"IsCScriptEnv\" function)\n        - Image|endswith: '\\cscript.exe'\n        - OriginalFileName: 'cscript.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'winrm'\n            - 'invoke Create wmicimv2/Win32_'\n            - '-r:http'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "an attempt to execute code or create service on remote host via winrm.vbs.",
      "answer": "In order to detect an attempt to execute code or create service on a remote host via winrm.vbs, you should focus on monitoring process creation events within Windows environments. Specifically, be on the lookout for instances where the 'cscript.exe' process is initiated, as indicated by either the image path ending with '\\cscript.exe' or the original file name being 'cscript.exe'. Furthermore, pay close attention to the command line arguments used with these process executions. The presence of 'winrm', 'invoke Create wmicimv2/Win32_', and '-r:http' within the same command line suggests an attempt to leverage Windows Remote Management (WinRM) for potentially malicious remote code execution or service creation. The necessity to match all specified command line conditions underlines the sophistication of this detection method, aiming at reducing the likelihood of false positives, although some unknown cases may still occur. This analysis technique is of medium severity and aligns with the understanding of MITRE ATT&CK\u2019s tactics and techniques, specifically focusing on execution and command and control aspects of cyber threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting defence evasion attempt via odbcconf.exe execution to load DLL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect defense evasion attempts via odbcconf.exe execution to load DLL, you should: \n\nMonitor Windows process creation logs for occurrences where odbcconf.exe or rundll32.exe are executed, specifically looking towards certain conditions. For the first set of conditions involving odbcconf.exe, check if the executable image path ends with '\\odbcconf.exe' and the original file name matches 'odbcconf.exe'. Additionally, inspect the command line arguments for the presence of '-a', '-f', '/a', '/f', or 'regsvr', which are indicators of suspicious activities often used in command line parameters for automation and DLL registration activities. \n\nIn another scenario, also look out for instances where the parent image path ends with '\\odbcconf.exe' indicating it initiated another process, particularly targeted at instances where the child process image path ends with '\\rundll32.exe' and the original filename is 'RUNDLL32.EXE'. Rundll32.exe execution following odbcconf might indicate attempts to load or execute a DLL for evasion purposes.\n\nBe aware of possible legitimate uses of odbcconf.exe by authorized users that might generate false positives at a medium level of alert. This involves understanding regular usage patterns within your specific environment to effectively differentiate between benign and malicious activities. \n\nThis approach targets the identification of techniques involving Defence Evasion through the process of DLL loading using odbcconf.exe, which aligns with recognized tactics and techniques documented in the cybersecurity framework.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_1_cli:\n        CommandLine|contains:\n            - '-a'\n            - '-f'\n            - '/a'\n            - '/f'\n            - 'regsvr'\n    selection_2_parent:\n        ParentImage|endswith: '\\odbcconf.exe'\n    selection_2_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    condition: all of selection_1_* or all of selection_2_*\nfalsepositives:\n    - Legitimate use of odbcconf.exe by legitimate user\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1_img:\n        - Image|endswith: '\\odbcconf.exe'\n        - OriginalFileName: 'odbcconf.exe'\n    selection_1_cli:\n        CommandLine|contains:\n            - '-a'\n            - '-f'\n            - '/a'\n            - '/f'\n            - 'regsvr'\n    selection_2_parent:\n        ParentImage|endswith: '\\odbcconf.exe'\n    selection_2_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    condition: all of selection_1_* or all of selection_2_*\nfalsepositives:\n    - Legitimate use of odbcconf.exe by legitimate user\nlevel: medium\n",
      "question": "defence evasion attempt via odbcconf.exe execution to load DLL",
      "answer": "In order to detect defense evasion attempts via odbcconf.exe execution to load DLL, you should: \n\nMonitor Windows process creation logs for occurrences where odbcconf.exe or rundll32.exe are executed, specifically looking towards certain conditions. For the first set of conditions involving odbcconf.exe, check if the executable image path ends with '\\odbcconf.exe' and the original file name matches 'odbcconf.exe'. Additionally, inspect the command line arguments for the presence of '-a', '-f', '/a', '/f', or 'regsvr', which are indicators of suspicious activities often used in command line parameters for automation and DLL registration activities. \n\nIn another scenario, also look out for instances where the parent image path ends with '\\odbcconf.exe' indicating it initiated another process, particularly targeted at instances where the child process image path ends with '\\rundll32.exe' and the original filename is 'RUNDLL32.EXE'. Rundll32.exe execution following odbcconf might indicate attempts to load or execute a DLL for evasion purposes.\n\nBe aware of possible legitimate uses of odbcconf.exe by authorized users that might generate false positives at a medium level of alert. This involves understanding regular usage patterns within your specific environment to effectively differentiate between benign and malicious activities. \n\nThis approach targets the identification of techniques involving Defence Evasion through the process of DLL loading using odbcconf.exe, which aligns with recognized tactics and techniques documented in the cybersecurity framework."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known WMI recon method to look for unquoted service paths, often used by pentest inside of powershell scripts attackers enum scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known WMI recon method to look for unquoted service paths, often used by pentest inside of PowerShell scripts attackers enum scripts, you should: Monitor Windows Script Block Logging, which needs to be enabled for this detection to work. Specifically, keep an eye out for the use of PowerShell scripts that contain text indicating the usage of either 'Get-WmiObject ' or the shorthand 'gwmi ' command. These commands are red flags especially when they are used in conjunction with querying ' Win32_Service ' along with properties like 'Name', 'DisplayName', 'PathName', and 'StartMode'. These patterns are indicative of reconnaissance activities aiming to identify unquoted service paths, a common vector for privilege escalation or persistent access by attackers. Be mindful though, that this alert could trigger on benign activities, and as such, some instances flagged by this detection may not be malicious and would require further investigation to ascertain their nature. The alert level for this activity is set to medium, reflecting its potential severity while acknowledging the possibility of false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject '\n            - 'gwmi '\n        ScriptBlockText|contains|all:\n            - ' Win32_Service '\n            - 'Name'\n            - 'DisplayName'\n            - 'PathName'\n            - 'StartMode'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject '\n            - 'gwmi '\n        ScriptBlockText|contains|all:\n            - ' Win32_Service '\n            - 'Name'\n            - 'DisplayName'\n            - 'PathName'\n            - 'StartMode'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "known WMI recon method to look for unquoted service paths, often used by pentest inside of powershell scripts attackers enum scripts",
      "answer": "In order to detect known WMI recon method to look for unquoted service paths, often used by pentest inside of PowerShell scripts attackers enum scripts, you should: Monitor Windows Script Block Logging, which needs to be enabled for this detection to work. Specifically, keep an eye out for the use of PowerShell scripts that contain text indicating the usage of either 'Get-WmiObject ' or the shorthand 'gwmi ' command. These commands are red flags especially when they are used in conjunction with querying ' Win32_Service ' along with properties like 'Name', 'DisplayName', 'PathName', and 'StartMode'. These patterns are indicative of reconnaissance activities aiming to identify unquoted service paths, a common vector for privilege escalation or persistent access by attackers. Be mindful though, that this alert could trigger on benign activities, and as such, some instances flagged by this detection may not be malicious and would require further investigation to ascertain their nature. The alert level for this activity is set to medium, reflecting its potential severity while acknowledging the possibility of false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious user agent strings used by malware in proxy logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious user agent strings used by malware in proxy logs, you should: monitor proxy log sources for specific user agent strings that are commonly associated with various types of remote access tools (RATs), malware, and other potentially harmful software. These user agent strings include, but are not limited to, particular versions and formats masquerading as legitimate browsers, such as Internet Explorer, Mozilla Firefox, Chrome, and Safari, each of which might be an indicator of malicious activity. Certain strings are explicitly linked to known malware families like DragonOK, PlugX, HTTPBrowser RAT, and others including Emotet and Lockbit strains, as well as tools used for web shell interactions and other cyber threat activities. When these user agent strings are identified within the proxy logs, it indicates a high possibility of compromise or malicious attempt to communicate, signaling for further investigation. Detection involves capturing logs that contain these agent strings, alongside the requested URI and client IP address which can be critical for understanding the scope of a potential security breach or ongoing attack. Despite the specificity of the selection criteria, it's essential to remain aware of the small chance of false positives, where benign activities might inadvertently match the detection patterns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent:\n        # RATs\n            - 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Chrome /53.0' # DragonOK\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR  1.1.4322)' # Used by PlugX - old - https://goo.gl/Yfjtk5\n            - 'HttpBrowser/1.0' # HTTPBrowser RAT\n            - '*<|>*' # Houdini / Iniduoh / njRAT\n            - 'nsis_inetc (mozilla)' # ZeroAccess\n            - 'Wget/1.9+cvs-stable (Red Hat modified)' # Dyre / Upatre\n        # Ghost419 https://goo.gl/rW1yvZ\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; .NET CLR 1.1.4322)'\n        # Malware\n            - '*zeroup*' # W32/Renos.Downloader\n            - 'Mozilla/5.0 (Windows NT 5.1 ; v.*' # Kazy\n            - '* adlib/*' # https://goo.gl/gcAHoh\n            - '* tiny' # Trojan Downloader\n            - '* BGroom *' # Trojan Downloader\n            - '* changhuatong'\n            - '* CholTBAgent'\n            - 'Mozilla/5.0 WinInet'\n            - 'RookIE/1.0'\n            - 'M' # HkMain\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)' # Egamipload - old UA - probable prone to false positives\n            - 'Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6.0)' # Yakes\n            - 'backdoorbot'\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30731)' # Sality\n            - 'Opera/8.81 (Windows NT 6.0; U; en)' # Sality\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729)' # Sality\n            - 'Opera' # Trojan Keragany\n            - 'Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)' # Fareit\n            - 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)' # Webshell's back connect\n            - 'MSIE' # Toby web shell\n            - '*(Charon; Inferno)' # Loki Bot\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/5.0)' # Fareit / Pony\n            - 'Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)' # https://goo.gl/g43qjs\n            - 'Mozilla/4.0(compatible; MSIE 6.0; Windows NT 5.1)' # MacControl malware https://goo.gl/sqY3Ja https://www.symantec.com/connect/blogs/osxmacontrol-back-it-again\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' # used by Zebrocy malware https://app.any.run/tasks/7d7fa4a0-6970-4428-828b-29572abf9ceb/\n        # Ursnif\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64)'\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64)'\n        # Emotet\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.2; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3)' # https://twitter.com/webbthewombat/status/1225827092132179968\n        # Lockbit (https://twitter.com/kladblokje_88/status/1614673320124743681?s=12&t=joEpeVa5d58aHYNGA_To7Q)\n            - 'Mozilla/5.0 (Windows NT 6.1)'\n            - 'AppleWebkit/587.38 (KHTML, like Gecko)'\n            - 'Chrome/91.0.4472.77'\n            - 'Safari/537.36'\n            - 'Edge/91.0.864.37'\n            - 'Firefox/89.0'\n            - 'Gecko/20100101'\n        # Others\n            - '* pxyscand*'\n            - '* asd'\n            - '* mdms'\n            - 'sample'\n            - 'nocase'\n            - 'Moxilla'\n            - 'Win32 *'\n            - '*Microsoft Internet Explorer*'\n            - 'agent *'\n            - 'AutoIt' # Suspicious - base-lining recommended\n            - 'IczelionDownLoad'\n            - 'Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 10.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)' # https://unit42.paloaltonetworks.com/thor-plugx-variant/\n            - 'record' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'mozzzzzzzzzzz' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0' # Quasar RAT UA https://twitter.com/malmoeb/status/1559994820692672519?s=20&t=g3tkNL09dZZWbFN10qDVjg\n            - 'Havana/0.1' # https://www.cybereason.com/blog/threat-alert-havanacrypt-ransomware-masquerading-as-google-update\n            - 'antSword/v2.1' # AntSword Webshell UA\n            - 'rqwrwqrqwrqw'  # Racoon Stealer\n            - 'qwrqrwrqwrqwr'  # Racoon Stealer\n            - 'rc2.0/client'  # Racoon Stealer\n            - 'TakeMyPainBack'  # Racoon Stealer\n            - 'xxx' # Racoon Stealer\n            - '20112211' # Racoon Stealer\n            - '23591' # Racoon Stealer\n            - '901785252112' # Racoon Stealer\n            - '1235125521512' # Racoon Stealer\n            - '125122112551' # Racoon Stealer\n            - 'B1D3N_RIM_MY_ASS' # Racoon Stealer\n            - 'AYAYAYAY1337' # Racoon Stealer\n            - 'iMightJustPayMySelfForAFeature' # Racoon Stealer\n            - 'ForAFeature' # Racoon Stealer\n            - 'Ares_ldr_v_*' # AresLoader\n            # - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106' # seen used by AresLoader\n            - 'Microsoft Internet Explorer' # https://github.com/silence-is-best/c2db\n            - 'CLCTR' # https://github.com/silence-is-best/c2db\n            - 'uploader' # https://github.com/silence-is-best/c2db\n            - 'agent' # https://github.com/silence-is-best/c2db\n            - 'License' # https://github.com/silence-is-best/c2db\n            - 'vb wininet' # https://github.com/silence-is-best/c2db\n            - 'Client' # https://github.com/silence-is-best/c2db\n            - 'Lilith-Bot/3.0' # Lilith Stealer - https://twitter.com/suyog41/status/1558051450797690880\n            - 'svc/1.0' # SVC Loader - https://twitter.com/suyog41/status/1558051450797690880\n            - 'WSHRAT' # WSHRAT - https://twitter.com/suyog41/status/1558051450797690880\n            - 'ZeroStresser Botnet/1.5' # Zerobot - https://twitter.com/suyog41/status/1558051450797690880\n            - 'OK' #Nymaim - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1sqlite' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent:\n        # RATs\n            - 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Chrome /53.0' # DragonOK\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0)' # Used by PlugX - base-lining recommended - https://community.rsa.com/thread/185439\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR  1.1.4322)' # Used by PlugX - old - https://goo.gl/Yfjtk5\n            - 'HttpBrowser/1.0' # HTTPBrowser RAT\n            - '*<|>*' # Houdini / Iniduoh / njRAT\n            - 'nsis_inetc (mozilla)' # ZeroAccess\n            - 'Wget/1.9+cvs-stable (Red Hat modified)' # Dyre / Upatre\n        # Ghost419 https://goo.gl/rW1yvZ\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; .NET CLR 1.1.4322)'\n        # Malware\n            - '*zeroup*' # W32/Renos.Downloader\n            - 'Mozilla/5.0 (Windows NT 5.1 ; v.*' # Kazy\n            - '* adlib/*' # https://goo.gl/gcAHoh\n            - '* tiny' # Trojan Downloader\n            - '* BGroom *' # Trojan Downloader\n            - '* changhuatong'\n            - '* CholTBAgent'\n            - 'Mozilla/5.0 WinInet'\n            - 'RookIE/1.0'\n            - 'M' # HkMain\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)' # Egamipload - old UA - probable prone to false positives\n            - 'Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6.0)' # Yakes\n            - 'backdoorbot'\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30731)' # Sality\n            - 'Opera/8.81 (Windows NT 6.0; U; en)' # Sality\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729)' # Sality\n            - 'Opera' # Trojan Keragany\n            - 'Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)' # Fareit\n            - 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)' # Webshell's back connect\n            - 'MSIE' # Toby web shell\n            - '*(Charon; Inferno)' # Loki Bot\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/5.0)' # Fareit / Pony\n            - 'Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)' # https://goo.gl/g43qjs\n            - 'Mozilla/4.0(compatible; MSIE 6.0; Windows NT 5.1)' # MacControl malware https://goo.gl/sqY3Ja https://www.symantec.com/connect/blogs/osxmacontrol-back-it-again\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' # used by Zebrocy malware https://app.any.run/tasks/7d7fa4a0-6970-4428-828b-29572abf9ceb/\n        # Ursnif\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64)'\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64)'\n        # Emotet\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.2; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3)' # https://twitter.com/webbthewombat/status/1225827092132179968\n        # Lockbit (https://twitter.com/kladblokje_88/status/1614673320124743681?s=12&t=joEpeVa5d58aHYNGA_To7Q)\n            - 'Mozilla/5.0 (Windows NT 6.1)'\n            - 'AppleWebkit/587.38 (KHTML, like Gecko)'\n            - 'Chrome/91.0.4472.77'\n            - 'Safari/537.36'\n            - 'Edge/91.0.864.37'\n            - 'Firefox/89.0'\n            - 'Gecko/20100101'\n        # Others\n            - '* pxyscand*'\n            - '* asd'\n            - '* mdms'\n            - 'sample'\n            - 'nocase'\n            - 'Moxilla'\n            - 'Win32 *'\n            - '*Microsoft Internet Explorer*'\n            - 'agent *'\n            - 'AutoIt' # Suspicious - base-lining recommended\n            - 'IczelionDownLoad'\n            - 'Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 10.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)' # https://unit42.paloaltonetworks.com/thor-plugx-variant/\n            - 'record' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'mozzzzzzzzzzz' # https://blog.sekoia.io/raccoon-stealer-v2-part-1-the-return-of-the-dead/\n            - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0' # Quasar RAT UA https://twitter.com/malmoeb/status/1559994820692672519?s=20&t=g3tkNL09dZZWbFN10qDVjg\n            - 'Havana/0.1' # https://www.cybereason.com/blog/threat-alert-havanacrypt-ransomware-masquerading-as-google-update\n            - 'antSword/v2.1' # AntSword Webshell UA\n            - 'rqwrwqrqwrqw'  # Racoon Stealer\n            - 'qwrqrwrqwrqwr'  # Racoon Stealer\n            - 'rc2.0/client'  # Racoon Stealer\n            - 'TakeMyPainBack'  # Racoon Stealer\n            - 'xxx' # Racoon Stealer\n            - '20112211' # Racoon Stealer\n            - '23591' # Racoon Stealer\n            - '901785252112' # Racoon Stealer\n            - '1235125521512' # Racoon Stealer\n            - '125122112551' # Racoon Stealer\n            - 'B1D3N_RIM_MY_ASS' # Racoon Stealer\n            - 'AYAYAYAY1337' # Racoon Stealer\n            - 'iMightJustPayMySelfForAFeature' # Racoon Stealer\n            - 'ForAFeature' # Racoon Stealer\n            - 'Ares_ldr_v_*' # AresLoader\n            # - 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106' # seen used by AresLoader\n            - 'Microsoft Internet Explorer' # https://github.com/silence-is-best/c2db\n            - 'CLCTR' # https://github.com/silence-is-best/c2db\n            - 'uploader' # https://github.com/silence-is-best/c2db\n            - 'agent' # https://github.com/silence-is-best/c2db\n            - 'License' # https://github.com/silence-is-best/c2db\n            - 'vb wininet' # https://github.com/silence-is-best/c2db\n            - 'Client' # https://github.com/silence-is-best/c2db\n            - 'Lilith-Bot/3.0' # Lilith Stealer - https://twitter.com/suyog41/status/1558051450797690880\n            - 'svc/1.0' # SVC Loader - https://twitter.com/suyog41/status/1558051450797690880\n            - 'WSHRAT' # WSHRAT - https://twitter.com/suyog41/status/1558051450797690880\n            - 'ZeroStresser Botnet/1.5' # Zerobot - https://twitter.com/suyog41/status/1558051450797690880\n            - 'OK' #Nymaim - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1sqlite' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n            - 'Project1' # DarkCloud - https://twitter.com/suyog41/status/1558051450797690880\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious user agent strings used by malware in proxy logs",
      "answer": "In order to detect suspicious user agent strings used by malware in proxy logs, you should: monitor proxy log sources for specific user agent strings that are commonly associated with various types of remote access tools (RATs), malware, and other potentially harmful software. These user agent strings include, but are not limited to, particular versions and formats masquerading as legitimate browsers, such as Internet Explorer, Mozilla Firefox, Chrome, and Safari, each of which might be an indicator of malicious activity. Certain strings are explicitly linked to known malware families like DragonOK, PlugX, HTTPBrowser RAT, and others including Emotet and Lockbit strains, as well as tools used for web shell interactions and other cyber threat activities. When these user agent strings are identified within the proxy logs, it indicates a high possibility of compromise or malicious attempt to communicate, signaling for further investigation. Detection involves capturing logs that contain these agent strings, alongside the requested URI and client IP address which can be critical for understanding the scope of a potential security breach or ongoing attack. Despite the specificity of the selection criteria, it's essential to remain aware of the small chance of false positives, where benign activities might inadvertently match the detection patterns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when the 'AllowMultipleTSSessions' value is enabled.\nWhich allows for multiple Remote Desktop connection sessions to be opened at once.\nThis is often used by attacker as a way to connect to an RDP session without disconnecting the other users\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when the 'AllowMultipleTSSessions' value is enabled, which allows for multiple Remote Desktop connection sessions to be opened at once and is often used by attackers as a way to connect to an RDP session without disconnecting the other users, you should: Monitor the Windows Registry settings for changes specifically aimed at enabling the 'AllowMultipleTSSessions' functionality. This involves tracking the event when a value is set (SetValue event type) in the registry at the location '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions' that changes its value to DWORD (0x00000001), which effectively allows multiple TS sessions. Be aware that there might be legitimate use cases for enabling this feature; hence, not every detection might indicate a malicious activity. This detection is classified with a medium level of importance. The associated MITRE ATT&CK tactics and techniques for understanding this activity focus on Persistence, Privilege Escalation, and Lateral Movement, as this behavior is exploited by attackers to maintain access to and control over a connected system without disrupting other users' sessions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions'\n        Details|endswith: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Legitimate use of the multi session functionality\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions'\n        Details|endswith: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Legitimate use of the multi session functionality\nlevel: medium\n",
      "question": "when the 'AllowMultipleTSSessions' value is enabled.\nWhich allows for multiple Remote Desktop connection sessions to be opened at once.\nThis is often used by attacker as a way to connect to an RDP session without disconnecting the other users\n",
      "answer": "In order to detect when the 'AllowMultipleTSSessions' value is enabled, which allows for multiple Remote Desktop connection sessions to be opened at once and is often used by attackers as a way to connect to an RDP session without disconnecting the other users, you should: Monitor the Windows Registry settings for changes specifically aimed at enabling the 'AllowMultipleTSSessions' functionality. This involves tracking the event when a value is set (SetValue event type) in the registry at the location '\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions' that changes its value to DWORD (0x00000001), which effectively allows multiple TS sessions. Be aware that there might be legitimate use cases for enabling this feature; hence, not every detection might indicate a malicious activity. This detection is classified with a medium level of importance. The associated MITRE ATT&CK tactics and techniques for understanding this activity focus on Persistence, Privilege Escalation, and Lateral Movement, as this behavior is exploited by attackers to maintain access to and control over a connected system without disrupting other users' sessions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The CrachMapExec pentesting framework implements a PowerShell obfuscation with some static strings detected by this rule..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the CrackMapExec pentesting framework which implements a PowerShell obfuscation technique with specific identifiable static strings, you should monitor for the creation of processes on Windows systems, specifically focusing on executions of 'powershell.exe' or 'pwsh.exe'. Also, watch for cases where the original file names are tagged as 'PowerShell.EXE' or 'pwsh.dll'. Additionally, investigate the command line inputs for patterns that include 'join*split', along with several obfuscated indications such as '($ShellId[1]+$ShellId[13]+'x')', '($PSHome[*]+$PSHOME[*]+', '($env:Public[13]+$env:Public[5]+'x')', '($env:ComSpec[4,*,25]-Join'')', and '[1,3]+'x'-Join'')'. These patterns are indicative of attempts to obscure the true nature of PowerShell commands, which is a common tactic in penetration testing and malicious activities alike. It\u2019s crucial to capture log details like the Computer Name, User, and CommandLine as they are instrumental in investigating and contextualizing the suspicious activity. Due to the obfuscation techniques used, false positives are considered unknown, hence requiring careful analysis. The detection level for this behavior is considered high, emphasizing the need for immediate and thorough investigation upon triggers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cli:\n        CommandLine|contains:\n            - 'join*split'\n            # Line 343ff\n            - '( $ShellId[1]+$ShellId[13]+''x'')'\n            - '( $PSHome[*]+$PSHOME[*]+'\n            - '( $env:Public[13]+$env:Public[5]+''x'')'\n            - '( $env:ComSpec[4,*,25]-Join'''')'\n            - '[1,3]+''x''-Join'''')'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cli:\n        CommandLine|contains:\n            - 'join*split'\n            # Line 343ff\n            - '( $ShellId[1]+$ShellId[13]+''x'')'\n            - '( $PSHome[*]+$PSHOME[*]+'\n            - '( $env:Public[13]+$env:Public[5]+''x'')'\n            - '( $env:ComSpec[4,*,25]-Join'''')'\n            - '[1,3]+''x''-Join'''')'\n    condition: all of selection_*\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "The CrachMapExec pentesting framework implements a PowerShell obfuscation with some static strings detected by this rule.",
      "answer": "In order to detect the use of the CrackMapExec pentesting framework which implements a PowerShell obfuscation technique with specific identifiable static strings, you should monitor for the creation of processes on Windows systems, specifically focusing on executions of 'powershell.exe' or 'pwsh.exe'. Also, watch for cases where the original file names are tagged as 'PowerShell.EXE' or 'pwsh.dll'. Additionally, investigate the command line inputs for patterns that include 'join*split', along with several obfuscated indications such as '($ShellId[1]+$ShellId[13]+'x')', '($PSHome[*]+$PSHOME[*]+', '($env:Public[13]+$env:Public[5]+'x')', '($env:ComSpec[4,*,25]-Join'')', and '[1,3]+'x'-Join'')'. These patterns are indicative of attempts to obscure the true nature of PowerShell commands, which is a common tactic in penetration testing and malicious activities alike. It\u2019s crucial to capture log details like the Computer Name, User, and CommandLine as they are instrumental in investigating and contextualizing the suspicious activity. Due to the obfuscation techniques used, false positives are considered unknown, hence requiring careful analysis. The detection level for this behavior is considered high, emphasizing the need for immediate and thorough investigation upon triggers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of \"chrome_frame_helper.dll\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of \"chrome_frame_helper.dll\", you should: Focus on monitoring the loading of images (DLL files) within Windows environments. Specifically, look out for instances where the file \"chrome_frame_helper.dll\" is loaded, but not from the expected paths of Google Chrome's installation directories either in the Program Files or Program Files (x86) folders, nor from a user path within the AppData\\local\\Google\\Chrome\\Application directory. This detection is crucial as it may indicate an attempt to exploit the Chrome application by loading a malicious DLL that masquerades as the legitimate \"chrome_frame_helper.dll\". It's important to keep an eye out for these activities without automatically assuming they are malicious due to the possibility of unknown false positives, rating the level of concern as medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\chrome_frame_helper.dll'\n    filter_main_path:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\'\n    filter_optional_user_path:\n        ImageLoaded|contains: '\\AppData\\local\\Google\\Chrome\\Application\\'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\chrome_frame_helper.dll'\n    filter_main_path:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files\\Google\\Chrome\\Application\\'\n            - 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\'\n    filter_optional_user_path:\n        ImageLoaded|contains: '\\AppData\\local\\Google\\Chrome\\Application\\'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential DLL sideloading of \"chrome_frame_helper.dll\"",
      "answer": "In order to detect potential DLL sideloading of \"chrome_frame_helper.dll\", you should: Focus on monitoring the loading of images (DLL files) within Windows environments. Specifically, look out for instances where the file \"chrome_frame_helper.dll\" is loaded, but not from the expected paths of Google Chrome's installation directories either in the Program Files or Program Files (x86) folders, nor from a user path within the AppData\\local\\Google\\Chrome\\Application directory. This detection is crucial as it may indicate an attempt to exploit the Chrome application by loading a malicious DLL that masquerades as the legitimate \"chrome_frame_helper.dll\". It's important to keep an eye out for these activities without automatically assuming they are malicious due to the possibility of unknown false positives, rating the level of concern as medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of Ilasm.exe to compile c# code into dll or exe..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Ilasm.exe to compile C# code into dll or exe, you should: Monitor process creation logs on Windows systems for instances where the process image name ends with '\\ilasm.exe' or the original file name is identified as 'ilasm.exe'. This monitoring helps in identifying potential misuse of the Ilasm.exe utility, which is a legitimate tool used for compiling .NET Intermediate Language (IL) code into executable files or DLLs, but can be exploited for malicious purposes such as generating malware on an infected system. Since this behavior might not always signify a security threat, it is marked with a medium level of concern, and unknown false positives are acknowledged, emphasizing the need for context and further investigation upon detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\ilasm.exe'\n        - OriginalFileName: 'ilasm.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith: '\\ilasm.exe'\n        - OriginalFileName: 'ilasm.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect use of Ilasm.exe to compile c# code into dll or exe.",
      "answer": "In order to detect the use of Ilasm.exe to compile C# code into dll or exe, you should: Monitor process creation logs on Windows systems for instances where the process image name ends with '\\ilasm.exe' or the original file name is identified as 'ilasm.exe'. This monitoring helps in identifying potential misuse of the Ilasm.exe utility, which is a legitimate tool used for compiling .NET Intermediate Language (IL) code into executable files or DLLs, but can be exploited for malicious purposes such as generating malware on an infected system. Since this behavior might not always signify a security threat, it is marked with a medium level of concern, and unknown false positives are acknowledged, emphasizing the need for context and further investigation upon detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when adversaries may abuse msiexec.exe to proxy execution of malicious payloads, where msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi), you should: Monitor network connections from Windows systems, focusing on events where a process is initiated (flagged as 'true' for initiation) and the process image name ends with '\\msiexec.exe', which is indicative of the Windows Installer utility being executed. This monitoring is essential because malicious actors can misuse msiexec.exe to run harmful payloads under the guise of legitimate software installations. It's crucial to be aware of false positives, which can occur when msiexec.exe is used over networks for legitimate installation purposes. The severity of this kind of suspicious activity is considered medium, and such monitoring helps to catch potential misuse related to execution proxying techniques. Tags associated with this detection strategy include execution tactics and potentially the use of execution through API techniques, although specific MITRE ATT&CK tactic and technique tags were not provided in the description, common associations would be with 'Execution' and possibly 'Command and Scripting Interpreter'.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        Image|endswith: '\\msiexec.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate msiexec over networks\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        Image|endswith: '\\msiexec.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate msiexec over networks\nlevel: medium\n",
      "question": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.\nMsiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)\n",
      "answer": "In order to detect when adversaries may abuse msiexec.exe to proxy execution of malicious payloads, where msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi), you should: Monitor network connections from Windows systems, focusing on events where a process is initiated (flagged as 'true' for initiation) and the process image name ends with '\\msiexec.exe', which is indicative of the Windows Installer utility being executed. This monitoring is essential because malicious actors can misuse msiexec.exe to run harmful payloads under the guise of legitimate software installations. It's crucial to be aware of false positives, which can occur when msiexec.exe is used over networks for legitimate installation purposes. The severity of this kind of suspicious activity is considered medium, and such monitoring helps to catch potential misuse related to execution proxying techniques. Tags associated with this detection strategy include execution tactics and potentially the use of execution through API techniques, although specific MITRE ATT&CK tactic and technique tags were not provided in the description, common associations would be with 'Execution' and possibly 'Command and Scripting Interpreter'."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious child process of userinit.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious child process of userinit, you should: Monitor the creation of processes on Windows operating systems. Focus on identifying processes that are initiated by 'userinit.exe'. However, to reduce false positives and focus on potential threats, exclude any process that has command lines containing '\\netlogon\\' or those processes where the image or the original filename is 'explorer.exe'. For processes that raise suspicion, it's crucial to log their command lines and the parent process's command line for further investigation. Administrative scripts might occasionally trigger similar patterns, so they are considered potential false positives. This approach is targeted at identifying unusual or potentially malicious activity initiated by userinit, which is often a legitimate part of the Windows login process but can be abused by attackers for executing malicious code right after a user logs in.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\userinit.exe'\n    filter1:\n        CommandLine|contains: '\\netlogon\\'\n    filter2:\n        - Image|endswith: '\\explorer.exe'\n        - OriginalFileName: 'explorer.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\userinit.exe'\n    filter1:\n        CommandLine|contains: '\\netlogon\\'\n    filter2:\n        - Image|endswith: '\\explorer.exe'\n        - OriginalFileName: 'explorer.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative scripts\nlevel: medium\n",
      "question": "suspicious child process of userinit",
      "answer": "In order to detect a suspicious child process of userinit, you should: Monitor the creation of processes on Windows operating systems. Focus on identifying processes that are initiated by 'userinit.exe'. However, to reduce false positives and focus on potential threats, exclude any process that has command lines containing '\\netlogon\\' or those processes where the image or the original filename is 'explorer.exe'. For processes that raise suspicion, it's crucial to log their command lines and the parent process's command line for further investigation. Administrative scripts might occasionally trigger similar patterns, so they are considered potential false positives. This approach is targeted at identifying unusual or potentially malicious activity initiated by userinit, which is often a legitimate part of the Windows login process but can be abused by attackers for executing malicious code right after a user logs in."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use MSHTA in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Monitor Windows system logs for events generated by the Service Control Manager, focusing specifically on event ID 7045. This event signals the creation of a new service, which can be a common tactic used by attackers to execute obfuscated PowerShell commands. Pay particular attention to the 'ImagePath' field within these events. An occurrence is considered suspicious if the 'ImagePath' contains both 'mshta' and 'vbscript:createobject' segments. These elements are indicative of an attempt to leverage the Microsoft HTML Application Host (mshta) to execute VBScript code that, in turn, can create and manipulate objects; this is a method commonly employed to bypass traditional detection mechanisms by obfuscating PowerShell scripts. Although the detection of this activity is set at a high level due to its potential severity, be aware that there might be legitimate use cases that result in false positives. It is important to investigate these occurrences to differentiate between malicious actions and legitimate administrative tasks. The tactics and techniques associated with this behavior include Execution and Command and Scripting Interpreter, underlining its relevance to cybersecurity practices aimed at identifying sophisticated attack methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains|all:\n            - 'mshta'\n            - 'vbscript:createobject'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains|all:\n            - 'mshta'\n            - 'vbscript:createobject'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use MSHTA in Scripts",
      "answer": "In order to Detect Obfuscated Powershell via use MSHTA in Scripts, you should: Monitor Windows system logs for events generated by the Service Control Manager, focusing specifically on event ID 7045. This event signals the creation of a new service, which can be a common tactic used by attackers to execute obfuscated PowerShell commands. Pay particular attention to the 'ImagePath' field within these events. An occurrence is considered suspicious if the 'ImagePath' contains both 'mshta' and 'vbscript:createobject' segments. These elements are indicative of an attempt to leverage the Microsoft HTML Application Host (mshta) to execute VBScript code that, in turn, can create and manipulate objects; this is a method commonly employed to bypass traditional detection mechanisms by obfuscating PowerShell scripts. Although the detection of this activity is set at a high level due to its potential severity, be aware that there might be legitimate use cases that result in false positives. It is important to investigate these occurrences to differentiate between malicious actions and legitimate administrative tasks. The tactics and techniques associated with this behavior include Execution and Command and Scripting Interpreter, underlining its relevance to cybersecurity practices aimed at identifying sophisticated attack methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the SharpImpersonation tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the SharpImpersonation tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should focus on monitoring the creation of processes within Windows environment. Look specifically for any processes that either are named 'SharpImpersonation.exe' or have an original filename of 'SharpImpersonation.exe'. Additionally, pay close attention to any command line usage that includes key phrases such as 'user:' in conjunction with either 'binary:' or 'shellcode:', and also watch for references to 'technique:CreateProcessAsUserW' or 'technique:ImpersonateLoggedOnUser'. These indicators are critical for spotting potential misuse of the SharpImpersonation tool. Be aware that the certainty level of these detections is considered high, although there might be instances where the rule could trigger false positives, the nature of which is currently unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpImpersonation.exe'\n        - OriginalFileName: 'SharpImpersonation.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' binary:'\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' shellcode:'\n        - CommandLine|contains:\n            - ' technique:CreateProcessAsUserW'\n            - ' technique:ImpersonateLoggedOnuser'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\SharpImpersonation.exe'\n        - OriginalFileName: 'SharpImpersonation.exe'\n    selection_cli:\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' binary:'\n        - CommandLine|contains|all:\n            - ' user:'\n            - ' shellcode:'\n        - CommandLine|contains:\n            - ' technique:CreateProcessAsUserW'\n            - ' technique:ImpersonateLoggedOnuser'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of the SharpImpersonation tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
      "answer": "In order to detect execution of the SharpImpersonation tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should focus on monitoring the creation of processes within Windows environment. Look specifically for any processes that either are named 'SharpImpersonation.exe' or have an original filename of 'SharpImpersonation.exe'. Additionally, pay close attention to any command line usage that includes key phrases such as 'user:' in conjunction with either 'binary:' or 'shellcode:', and also watch for references to 'technique:CreateProcessAsUserW' or 'technique:ImpersonateLoggedOnUser'. These indicators are critical for spotting potential misuse of the SharpImpersonation tool. Be aware that the certainty level of these detections is considered high, although there might be instances where the rule could trigger false positives, the nature of which is currently unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when attackers or tools disable Windows Defender functionalities via the Windows registry.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when attackers or tools disable Windows Defender functionalities via the Windows registry, you should monitor the Windows registry for specific changes that indicate such activities. These activities can be identified by watching for the 'SetValue' event type within the registry, specifically targeting modifications in the Windows Defender configurations. The changes of interest involve modifications to registry paths that include: \n\n1. Directories related to Windows Defender and Windows Defender Security Center settings under the '\\SOFTWARE\\Microsoft\\Windows Defender\\' and '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'.\n2. Potential modifications to key configurations that are critical for the functioning of Windows Defender's antivirus and anti-spyware capabilities, real-time protection features, reporting mechanisms, and spyware protections. These changes can be in the form of enabling or disabling functionalities such as disabling anti-virus, anti-spyware, behavior monitoring, intrusion prevention system, IOAV protection (Input Output Anti-Virus), on-access protection, real-time monitoring, script scanning, enhanced notifications, block at first seen in SpyNet, and tamper protection features among others.\n\nChanges are considered suspicious if they involve setting certain registry values that effectively disable these protections. For instance, setting a registry value to 'DWORD (0x00000001)' in paths that end with configurations like '\\DisableAntiSpyware', '\\Real-Time Protection\\DisableRealtimeMonitoring' signifies the disabling of these respective features. Conversely, setting a value to 'DWORD (0x00000000)' in paths related to enabling protection features like '\\App and Browser protection\\DisallowExploitProtectionOverride' or '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess' could be legitimate actions but also need monitoring as they might indicate attempts to tamper with the system's default security posture.\n\nMonitoring these changes is critical for maintaining the integrity of Windows Defender as a key component of the system's security posture against malware and other threats. However, it's important to consider that some of these registry changes could result from legitimate administrative actions via the Windows Defender interface. Therefore, a high level of vigilance in the analysis of these events is recommended to differentiate between legitimate and malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection_main:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Windows Defender\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\'\n    selection_dword_1:\n        TargetObject|endswith:\n            - '\\DisableAntiSpyware'\n            - '\\DisableAntiVirus'\n            - '\\Real-Time Protection\\DisableBehaviorMonitoring'\n            - '\\Real-Time Protection\\DisableIntrusionPreventionSystem'\n            - '\\Real-Time Protection\\DisableIOAVProtection'\n            - '\\Real-Time Protection\\DisableOnAccessProtection'\n            - '\\Real-Time Protection\\DisableRealtimeMonitoring'\n            - '\\Real-Time Protection\\DisableScanOnRealtimeEnable'\n            - '\\Real-Time Protection\\DisableScriptScanning'\n            - '\\Reporting\\DisableEnhancedNotifications'\n            - '\\SpyNet\\DisableBlockAtFirstSeen'\n        Details: 'DWORD (0x00000001)'\n    selection_dword_0:\n        TargetObject|endswith:\n            - '\\App and Browser protection\\DisallowExploitProtectionOverride'\n            - '\\Features\\TamperProtection'\n            - '\\MpEngine\\MpEnablePus'\n            - '\\PUAProtection'\n            - '\\Signature Update\\ForceUpdateFromMU'\n            - '\\SpyNet\\SpynetReporting'\n            - '\\SpyNet\\SubmitSamplesConsent'\n            - '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess'\n        Details: 'DWORD (0x00000000)'\n    condition: selection_main and 1 of selection_dword_*\nfalsepositives:\n    - Administrator actions via the Windows Defender interface\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection_main:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Windows Defender\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\'\n    selection_dword_1:\n        TargetObject|endswith:\n            - '\\DisableAntiSpyware'\n            - '\\DisableAntiVirus'\n            - '\\Real-Time Protection\\DisableBehaviorMonitoring'\n            - '\\Real-Time Protection\\DisableIntrusionPreventionSystem'\n            - '\\Real-Time Protection\\DisableIOAVProtection'\n            - '\\Real-Time Protection\\DisableOnAccessProtection'\n            - '\\Real-Time Protection\\DisableRealtimeMonitoring'\n            - '\\Real-Time Protection\\DisableScanOnRealtimeEnable'\n            - '\\Real-Time Protection\\DisableScriptScanning'\n            - '\\Reporting\\DisableEnhancedNotifications'\n            - '\\SpyNet\\DisableBlockAtFirstSeen'\n        Details: 'DWORD (0x00000001)'\n    selection_dword_0:\n        TargetObject|endswith:\n            - '\\App and Browser protection\\DisallowExploitProtectionOverride'\n            - '\\Features\\TamperProtection'\n            - '\\MpEngine\\MpEnablePus'\n            - '\\PUAProtection'\n            - '\\Signature Update\\ForceUpdateFromMU'\n            - '\\SpyNet\\SpynetReporting'\n            - '\\SpyNet\\SubmitSamplesConsent'\n            - '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess'\n        Details: 'DWORD (0x00000000)'\n    condition: selection_main and 1 of selection_dword_*\nfalsepositives:\n    - Administrator actions via the Windows Defender interface\nlevel: high\n",
      "question": "when attackers or tools disable Windows Defender functionalities via the Windows registry",
      "answer": "In order to detect when attackers or tools disable Windows Defender functionalities via the Windows registry, you should monitor the Windows registry for specific changes that indicate such activities. These activities can be identified by watching for the 'SetValue' event type within the registry, specifically targeting modifications in the Windows Defender configurations. The changes of interest involve modifications to registry paths that include: \n\n1. Directories related to Windows Defender and Windows Defender Security Center settings under the '\\SOFTWARE\\Microsoft\\Windows Defender\\' and '\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\'.\n2. Potential modifications to key configurations that are critical for the functioning of Windows Defender's antivirus and anti-spyware capabilities, real-time protection features, reporting mechanisms, and spyware protections. These changes can be in the form of enabling or disabling functionalities such as disabling anti-virus, anti-spyware, behavior monitoring, intrusion prevention system, IOAV protection (Input Output Anti-Virus), on-access protection, real-time monitoring, script scanning, enhanced notifications, block at first seen in SpyNet, and tamper protection features among others.\n\nChanges are considered suspicious if they involve setting certain registry values that effectively disable these protections. For instance, setting a registry value to 'DWORD (0x00000001)' in paths that end with configurations like '\\DisableAntiSpyware', '\\Real-Time Protection\\DisableRealtimeMonitoring' signifies the disabling of these respective features. Conversely, setting a value to 'DWORD (0x00000000)' in paths related to enabling protection features like '\\App and Browser protection\\DisallowExploitProtectionOverride' or '\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess' could be legitimate actions but also need monitoring as they might indicate attempts to tamper with the system's default security posture.\n\nMonitoring these changes is critical for maintaining the integrity of Windows Defender as a key component of the system's security posture against malware and other threats. However, it's important to consider that some of these registry changes could result from legitimate administrative actions via the Windows Defender interface. Therefore, a high level of vigilance in the analysis of these events is recommended to differentiate between legitimate and malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting javaw.exe in AppData folder as used by Adwind / JRAT.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect javaw.exe in AppData folder as used by Adwind / JRAT, you should monitor for registry set actions in Windows where the event type involves setting a value. Specifically, keep an eye on modifications targeting the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run' registry path, a common location for configuring startup programs. Any instance where the target object begins with this path and the details of the modification point to an executable within the '%AppData%\\Roaming\\Oracle\\bin\\' directory should raise an alert. This behavior might indicate an attempt to ensure that malware, such as Adwind or JRAT which often masquerades as a legitimate Java process, persists across reboots by adding itself to the system\u2019s startup items. This kind of activity is considered suspicious and should be flagged for further investigation with a high level of concern due to its potential impact and the tactics, techniques, and procedures associated with persistent access and evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n        Details|startswith: '%AppData%\\Roaming\\Oracle\\bin\\'\n    condition: selection\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'\n        Details|startswith: '%AppData%\\Roaming\\Oracle\\bin\\'\n    condition: selection\nlevel: high\n",
      "question": "javaw.exe in AppData folder as used by Adwind / JRAT",
      "answer": "In order to detect javaw.exe in AppData folder as used by Adwind / JRAT, you should monitor for registry set actions in Windows where the event type involves setting a value. Specifically, keep an eye on modifications targeting the 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run' registry path, a common location for configuring startup programs. Any instance where the target object begins with this path and the details of the modification point to an executable within the '%AppData%\\Roaming\\Oracle\\bin\\' directory should raise an alert. This behavior might indicate an attempt to ensure that malware, such as Adwind or JRAT which often masquerades as a legitimate Java process, persists across reboots by adding itself to the system\u2019s startup items. This kind of activity is considered suspicious and should be flagged for further investigation with a high level of concern due to its potential impact and the tactics, techniques, and procedures associated with persistent access and evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Use of hostname to get information.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to use hostname to get information, you should: Monitor the creation of processes on Windows systems, focusing on identifying the initiation of any process whose image name ends with '\\HOSTNAME.EXE'. This tracking is pivotal as it could indicate attempts to gather information by exploiting the system's hostname properties or related functionalities. False positives might occur and are currently unknown, suggesting the need for cautious interpretation of detection alerts. This activity is noted with a low level of severity, indicating that while it may not immediately signify a high-threat action, it is still worth surveillance for comprehensive security monitoring.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\HOSTNAME.EXE'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\HOSTNAME.EXE'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Use of hostname to get information",
      "answer": "In order to use hostname to get information, you should: Monitor the creation of processes on Windows systems, focusing on identifying the initiation of any process whose image name ends with '\\HOSTNAME.EXE'. This tracking is pivotal as it could indicate attempts to gather information by exploiting the system's hostname properties or related functionalities. False positives might occur and are currently unknown, suggesting the need for cautious interpretation of detection alerts. This activity is noted with a low level of severity, indicating that while it may not immediately signify a high-threat action, it is still worth surveillance for comprehensive security monitoring."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for processes that have been launched by the Microsoft Management Console (mmc.exe) where the command line used for launching involves the Windows Firewall snap-in (WF.msc). It is essential to exclude any instances where the process 'WerFault.exe' is launched in this manner, as these do not constitute part of the attack pattern. This approach aims at identifying malicious activities that could be leveraging the MMC with the Windows Firewall snap-in to bypass UAC, without being detected by standard security measures. Keep an eye out for any activity that meets these criteria, as they might not have known false positives, indicating a medium risk level of security threat due to this specific method of attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\mmc.exe'\n        ParentCommandLine|contains: 'WF.msc'\n    filter:\n        Image|endswith: '\\WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\mmc.exe'\n        ParentCommandLine|contains: 'WF.msc'\n    filter:\n        Image|endswith: '\\WerFault.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in",
      "answer": "In order to detect attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for processes that have been launched by the Microsoft Management Console (mmc.exe) where the command line used for launching involves the Windows Firewall snap-in (WF.msc). It is essential to exclude any instances where the process 'WerFault.exe' is launched in this manner, as these do not constitute part of the attack pattern. This approach aims at identifying malicious activities that could be leveraging the MMC with the Windows Firewall snap-in to bypass UAC, without being detected by standard security measures. Keep an eye out for any activity that meets these criteria, as they might not have known false positives, indicating a medium risk level of security threat due to this specific method of attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Checks whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to check whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process), you should: Monitor the process creation logs on Windows systems for occurrences where the path of the executed image does not contain a backslash ('\\'), implying it's not a full path. Additionally, disregard any events where the 'Image' field is null, empty, or contains a hyphen, which are indicative of normal or non-suspicious activities. Specific system processes such as System, Registry, MemCompression, and vmmem, along with their command lines, should also be excluded from the detection criteria due to their routine nature and low likelihood of being exploited in this context. This approach is aimed at identifying potentially malicious activities where attackers may employ techniques like process ghosting to execute their payloads without using a standard filesystem path, thereby evading certain types of detection mechanisms. The criteria for a match require that none of the filtered conditions apply, thus highlighting cases with high suspicion and reducing the chances of false positives, although some unknown false positives may still occur. This monitoring is set at a high level of importance due to the severity of the attack tactic it seeks to uncover.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    image_absolute_path:\n        Image|contains: '\\'\n    filter_null:\n        Image: null\n    filter_empty:\n        Image:\n            - '-'\n            - ''\n    filter_4688:\n        - Image:\n            - 'System'\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n        - CommandLine:\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n    condition: not image_absolute_path and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    image_absolute_path:\n        Image|contains: '\\'\n    filter_null:\n        Image: null\n    filter_empty:\n        Image:\n            - '-'\n            - ''\n    filter_4688:\n        - Image:\n            - 'System'\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n        - CommandLine:\n            - 'Registry'\n            - 'MemCompression'\n            - 'vmmem'\n    condition: not image_absolute_path and not 1 of filter*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Checks whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process)",
      "answer": "In order to check whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process), you should: Monitor the process creation logs on Windows systems for occurrences where the path of the executed image does not contain a backslash ('\\'), implying it's not a full path. Additionally, disregard any events where the 'Image' field is null, empty, or contains a hyphen, which are indicative of normal or non-suspicious activities. Specific system processes such as System, Registry, MemCompression, and vmmem, along with their command lines, should also be excluded from the detection criteria due to their routine nature and low likelihood of being exploited in this context. This approach is aimed at identifying potentially malicious activities where attackers may employ techniques like process ghosting to execute their payloads without using a standard filesystem path, thereby evading certain types of detection mechanisms. The criteria for a match require that none of the filtered conditions apply, thus highlighting cases with high suspicion and reducing the chances of false positives, although some unknown false positives may still occur. This monitoring is set at a high level of importance due to the severity of the attack tactic it seeks to uncover."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows command line executable started from MMC.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a Windows command line executable started from MMC, you should monitor process creation events on Windows operating systems. Specifically, you should look for instances where a command line utility such as Cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Script Host (wscript.exe or cscript.exe), shell scripts (sh.exe or bash.exe), registry command line tools (reg.exe or regsvr32.exe), or any process containing 'BITSADMIN' in its name is launched as a child process of the Microsoft Management Console (mmc.exe). Keep an eye on the command line parameters and image paths of these processes for any suspicious activity. Given the potential severity associated with this behavior, such events should be treated with a high level of concern. This approach helps in identifying misuse of administrative tools and command line utilities, which can be indicative of various types of attacks including those involving privilege escalation, lateral movement, and persistence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|endswith: '\\mmc.exe'\n    selection2:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n        - Image|contains: '\\BITSADMIN'\n    condition: all of selection*\nfields:\n    - CommandLine\n    - Image\n    - ParentCommandLine\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        ParentImage|endswith: '\\mmc.exe'\n    selection2:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\reg.exe'\n            - '\\regsvr32.exe'\n        - Image|contains: '\\BITSADMIN'\n    condition: all of selection*\nfields:\n    - CommandLine\n    - Image\n    - ParentCommandLine\nlevel: high\n",
      "question": "Windows command line executable started from MMC",
      "answer": "In order to detect a Windows command line executable started from MMC, you should monitor process creation events on Windows operating systems. Specifically, you should look for instances where a command line utility such as Cmd.exe, PowerShell (powershell.exe or pwsh.exe), Windows Script Host (wscript.exe or cscript.exe), shell scripts (sh.exe or bash.exe), registry command line tools (reg.exe or regsvr32.exe), or any process containing 'BITSADMIN' in its name is launched as a child process of the Microsoft Management Console (mmc.exe). Keep an eye on the command line parameters and image paths of these processes for any suspicious activity. Given the potential severity associated with this behavior, such events should be treated with a high level of concern. This approach helps in identifying misuse of administrative tools and command line utilities, which can be indicative of various types of attacks including those involving privilege escalation, lateral movement, and persistence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious PowerShell invocation command parameters.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell invocation command parameters, you should: focus on monitoring PowerShell scripts on Windows systems, ensuring that Script Block Logging is enabled for detailed observation. Look for scripts that contain specific command-line parameters indicating potentially malicious activities. These parameters include forms of encoded commands such as ' -enc ', ' -EncodedCommand ', and ' -ec ', which are often used by attackers to obscure malicious scripts from plain sight. Additionally, watch for indicators that a script is trying to hide its window or execute without interacting with the desktop, through parameters like ' -w hidden ', ' -window hidden ', ' -windowstyle hidden ', ' -w 1 ', ' -noni ', and ' -noninteractive '. These techniques are commonly employed in stealth operations to avoid detection by users or administrators. The presence of any of these command-line arguments should raise a high level of suspicion, although be aware of the rare legitimate cases that may generate false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_encoded:\n        ScriptBlockText|contains:\n            - ' -enc '\n            - ' -EncodedCommand '\n            - ' -ec '\n    selection_hidden:\n        ScriptBlockText|contains:\n            - ' -w hidden '\n            - ' -window hidden '\n            - ' -windowstyle hidden '\n            - ' -w 1 '\n    selection_noninteractive:\n        ScriptBlockText|contains:\n            - ' -noni '\n            - ' -noninteractive '\n    condition: all of selection*\nfalsepositives:\n    - Very special / sneaky PowerShell scripts\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_encoded:\n        ScriptBlockText|contains:\n            - ' -enc '\n            - ' -EncodedCommand '\n            - ' -ec '\n    selection_hidden:\n        ScriptBlockText|contains:\n            - ' -w hidden '\n            - ' -window hidden '\n            - ' -windowstyle hidden '\n            - ' -w 1 '\n    selection_noninteractive:\n        ScriptBlockText|contains:\n            - ' -noni '\n            - ' -noninteractive '\n    condition: all of selection*\nfalsepositives:\n    - Very special / sneaky PowerShell scripts\nlevel: high\n",
      "question": "suspicious PowerShell invocation command parameters",
      "answer": "In order to detect suspicious PowerShell invocation command parameters, you should: focus on monitoring PowerShell scripts on Windows systems, ensuring that Script Block Logging is enabled for detailed observation. Look for scripts that contain specific command-line parameters indicating potentially malicious activities. These parameters include forms of encoded commands such as ' -enc ', ' -EncodedCommand ', and ' -ec ', which are often used by attackers to obscure malicious scripts from plain sight. Additionally, watch for indicators that a script is trying to hide its window or execute without interacting with the desktop, through parameters like ' -w hidden ', ' -window hidden ', ' -windowstyle hidden ', ' -w 1 ', ' -noni ', and ' -noninteractive '. These techniques are commonly employed in stealth operations to avoid detection by users or administrators. The presence of any of these command-line arguments should raise a high level of suspicion, although be aware of the rare legitimate cases that may generate false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious files created via the OneNote application. This could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious files created via the OneNote application, which could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild, you should: Monitor file events on Windows systems, particularly focusing on the execution of OneNote application executables (onenote.exe, onenotem.exe, onenoteim.exe). Pay close attention to files created in the '\\AppData\\Local\\Temp\\OneNote\\' directory, especially those with extensions such as '.bat', '.chm', '.cmd', '.dll', '.exe', '.hta', '.htm', '.html', '.js', '.lnk', '.ps1', '.vbe', '.vbs', and '.wsf'. These file types are known to be leveraged in attacks and their creation in the context of OneNote activity is highly suspicious. The rule is designed with a high confidence level, implying that false positives should be minimal unless OneNote is regularly used for embedding and sharing different document types, in which case, occasional false positives may occur.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\onenote.exe'\n            - '\\onenotem.exe'\n            - '\\onenoteim.exe'\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\OneNote\\'\n        TargetFilename|endswith:\n            # TODO: Add more suspicious extensions\n            - '.bat'\n            - '.chm'\n            - '.cmd'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.htm'\n            - '.html'\n            - '.js'\n            - '.lnk'\n            - '.ps1'\n            - '.vbe'\n            - '.vbs'\n            - '.wsf'\n    condition: selection\nfalsepositives:\n    - False positives should be very low with the extensions list cited. Especially if you don't heavily utilize OneNote.\n    - Occasional FPs might occur if OneNote is used internally to share different embedded documents\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\onenote.exe'\n            - '\\onenotem.exe'\n            - '\\onenoteim.exe'\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\OneNote\\'\n        TargetFilename|endswith:\n            # TODO: Add more suspicious extensions\n            - '.bat'\n            - '.chm'\n            - '.cmd'\n            - '.dll'\n            - '.exe'\n            - '.hta'\n            - '.htm'\n            - '.html'\n            - '.js'\n            - '.lnk'\n            - '.ps1'\n            - '.vbe'\n            - '.vbs'\n            - '.wsf'\n    condition: selection\nfalsepositives:\n    - False positives should be very low with the extensions list cited. Especially if you don't heavily utilize OneNote.\n    - Occasional FPs might occur if OneNote is used internally to share different embedded documents\nlevel: high\n",
      "question": "suspicious files created via the OneNote application. This could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild",
      "answer": "In order to detect suspicious files created via the OneNote application, which could indicate a potential malicious \".one\"/\".onepkg\" file was executed as seen being used in malware activity in the wild, you should: Monitor file events on Windows systems, particularly focusing on the execution of OneNote application executables (onenote.exe, onenotem.exe, onenoteim.exe). Pay close attention to files created in the '\\AppData\\Local\\Temp\\OneNote\\' directory, especially those with extensions such as '.bat', '.chm', '.cmd', '.dll', '.exe', '.hta', '.htm', '.html', '.js', '.lnk', '.ps1', '.vbe', '.vbs', and '.wsf'. These file types are known to be leveraged in attacks and their creation in the context of OneNote activity is highly suspicious. The rule is designed with a high confidence level, implying that false positives should be minimal unless OneNote is regularly used for embedding and sharing different document types, in which case, occasional false positives may occur."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user disables a critical security feature for an organization..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user disables a critical security feature for an organization, you should monitor GitHub audit logs, which requires the audit log streaming feature to be enabled. This monitoring targets activities that compromise security configurations, specifically within GitHub organizations or repositories. The key actions indicative of such activities include disabling OAuth app restrictions, disabling the requirement for two-factor authentication, disabling advanced security for a repository, and selecting a member to disable advanced security policy. \n\nFor effective detection, focus on the following data points extracted from the audit logs: the specific action taken, the actor who performed the action, the organization affected, the country code of the actor's location, the transport protocol used, the targeted repository, the public status of the repository, and the timestamp of the action. It is important to distinguish between legitimate administrative activities and malicious actions. Any activity falling outside approved administrative tasks should be considered a high-level security concern. \n\nThis approach is aligned with the MITRE ATT&CK tactics and techniques for Initial Access and Persistence by monitoring and flagging the disabling of critical security measures in GitHub environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: github\n    service: audit\n    definition: 'Requirements: The audit log streaming feature must be enabled to be able to receive such logs. You can enable following the documentation here: https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise#setting-up-audit-log-streaming'\ndetection:\n    selection:\n        action:\n            - 'org.disable_oauth_app_restrictions'\n            - 'org.disable_two_factor_requirement'\n            - 'repo.advanced_security_disabled'\n            - 'org.advanced_security_policy_selected_member_disabled'\n    condition: selection\nfields:\n    - 'action'\n    - 'actor'\n    - 'org'\n    - 'actor_location.country_code'\n    - 'transport_protocol_name'\n    - 'repository'\n    - 'repo'\n    - 'repository_public'\n    - '@timestamp'\nfalsepositives:\n     - Approved administrator/owner activities.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: github\n    service: audit\n    definition: 'Requirements: The audit log streaming feature must be enabled to be able to receive such logs. You can enable following the documentation here: https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise#setting-up-audit-log-streaming'\ndetection:\n    selection:\n        action:\n            - 'org.disable_oauth_app_restrictions'\n            - 'org.disable_two_factor_requirement'\n            - 'repo.advanced_security_disabled'\n            - 'org.advanced_security_policy_selected_member_disabled'\n    condition: selection\nfields:\n    - 'action'\n    - 'actor'\n    - 'org'\n    - 'actor_location.country_code'\n    - 'transport_protocol_name'\n    - 'repository'\n    - 'repo'\n    - 'repository_public'\n    - '@timestamp'\nfalsepositives:\n     - Approved administrator/owner activities.\nlevel: high\n",
      "question": "user disables a critical security feature for an organization.",
      "answer": "In order to detect when a user disables a critical security feature for an organization, you should monitor GitHub audit logs, which requires the audit log streaming feature to be enabled. This monitoring targets activities that compromise security configurations, specifically within GitHub organizations or repositories. The key actions indicative of such activities include disabling OAuth app restrictions, disabling the requirement for two-factor authentication, disabling advanced security for a repository, and selecting a member to disable advanced security policy. \n\nFor effective detection, focus on the following data points extracted from the audit logs: the specific action taken, the actor who performed the action, the organization affected, the country code of the actor's location, the transport protocol used, the targeted repository, the public status of the repository, and the timestamp of the action. It is important to distinguish between legitimate administrative activities and malicious actions. Any activity falling outside approved administrative tasks should be considered a high-level security concern. \n\nThis approach is aligned with the MITRE ATT&CK tactics and techniques for Initial Access and Persistence by monitoring and flagging the disabling of critical security measures in GitHub environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt of the OWASSRF variant targeting exchange servers It uses the OWA endpoint to access the powershell backend endpoint.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts of the OWASSRF variant targeting exchange servers using the OWA endpoint to access the PowerShell backend endpoint, you should: Monitor webserver logs, specifically focusing on POST requests that result in a 200 status code. These requests should be scrutinized if their query URI contains both '/owa/' and '/powershell', indicating a direct attempt to access PowerShell through the Outlook Web Access (OWA) interface, a common vector in such attacks. Additionally, the presence of '@' or its URL-encoded counterpart '%40' in the URI query should raise suspicions, as these characters might be used in the exploitation process.\n\nHowever, it is essential to filter out and disregard any logs where the User-Agent string matches those commonly used by legitimate service components such as 'ClientInfo', 'Microsoft WinRM Client', or 'Exchange BackEnd Probes', to reduce false positives. These User-Agents are typically associated with routine, legitimate operations and their presence in logs could otherwise mask or mimic malicious activity.\n\nIt's noteworthy that there will be some instances (such as web vulnerability scanners) where similar patterns might be observed, but these should be considered false positives. The level of concern for these types of activities is high, warranting a cautious and thorough examination of matching log entries to ensure that any potential exploitation attempts are promptly addressed.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        sc-status: 200\n        cs-uri-query|contains|all:\n            - '/owa/'\n            - '/powershell'\n        cs-uri-query|contains:\n            - '@'\n            - '%40'\n    filter:\n        cs-user-agent:\n            - 'ClientInfo'\n            - 'Microsoft WinRM Client'\n            - 'Exchange BackEnd Probes'\n    condition: selection and not filter\nfalsepositives:\n    - Web vulnerability scanners\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-method: 'POST'\n        sc-status: 200\n        cs-uri-query|contains|all:\n            - '/owa/'\n            - '/powershell'\n        cs-uri-query|contains:\n            - '@'\n            - '%40'\n    filter:\n        cs-user-agent:\n            - 'ClientInfo'\n            - 'Microsoft WinRM Client'\n            - 'Exchange BackEnd Probes'\n    condition: selection and not filter\nfalsepositives:\n    - Web vulnerability scanners\nlevel: high\n",
      "question": "exploitation attempt of the OWASSRF variant targeting exchange servers It uses the OWA endpoint to access the powershell backend endpoint",
      "answer": "In order to detect exploitation attempts of the OWASSRF variant targeting exchange servers using the OWA endpoint to access the PowerShell backend endpoint, you should: Monitor webserver logs, specifically focusing on POST requests that result in a 200 status code. These requests should be scrutinized if their query URI contains both '/owa/' and '/powershell', indicating a direct attempt to access PowerShell through the Outlook Web Access (OWA) interface, a common vector in such attacks. Additionally, the presence of '@' or its URL-encoded counterpart '%40' in the URI query should raise suspicions, as these characters might be used in the exploitation process.\n\nHowever, it is essential to filter out and disregard any logs where the User-Agent string matches those commonly used by legitimate service components such as 'ClientInfo', 'Microsoft WinRM Client', or 'Exchange BackEnd Probes', to reduce false positives. These User-Agents are typically associated with routine, legitimate operations and their presence in logs could otherwise mask or mimic malicious activity.\n\nIt's noteworthy that there will be some instances (such as web vulnerability scanners) where similar patterns might be observed, but these should be considered false positives. The level of concern for these types of activities is high, warranting a cautious and thorough examination of matching log entries to ensure that any potential exploitation attempts are promptly addressed."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a local hidden user account which should not happen for event ID 4720..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a local hidden user account which should not happen for event ID 4720, you should: Monitor Windows security event logs specifically for event ID 4720, which signals the creation of a user account. Focus on instances where the TargetUserName ends with a '$' character because this is often used to denote hidden user accounts or machine accounts which are not typically manually created. This activity is highly suspicious and typically not expected under normal operational circumstances. It's important to be aware that there might be instances where such activity could be legitimate, but they are rare, hence the high level of alert for this detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4720\n        TargetUserName|endswith: '$'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4720\n        TargetUserName|endswith: '$'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "creation of a local hidden user account which should not happen for event ID 4720.",
      "answer": "In order to detect the creation of a local hidden user account which should not happen for event ID 4720, you should: Monitor Windows security event logs specifically for event ID 4720, which signals the creation of a user account. Focus on instances where the TargetUserName ends with a '$' character because this is often used to denote hidden user accounts or machine accounts which are not typically manually created. This activity is highly suspicious and typically not expected under normal operational circumstances. It's important to be aware that there might be instances where such activity could be legitimate, but they are rare, hence the high level of alert for this detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting files seen being requested by RomCom while potentially exploiting CVE-2023-36884.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect files seen being requested by RomCom while potentially exploiting CVE-2023-36884, you should: Monitor proxy logs for GET requests to specific URLs that contain the following paths: '/ex001.url', '/file001.search-ms', '/file001.url', '/file001.vbs', '/file1.mht', '/o2010.asp', '/redir_obj.html', '/RFile.asp', '/zip_k.asp', '/zip_k2.asp', and '/zip_k3.asp'. These files are indicative of attempt to exploit this vulnerability, and detecting requests for them can alert you to potential malicious activity. The detection level for these activities is set at medium due to the possibility of unknown false positives, outlining the need for further investigation upon alert.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        c-uri|contains:\n            - '/ex001.url'\n            - '/file001.search-ms'\n            - '/file001.url'\n            - '/file001.vbs'\n            - '/file1.mht'\n            - '/o2010.asp'\n            - '/redir_obj.html'\n            - '/RFile.asp'\n            - '/zip_k.asp'\n            - '/zip_k2.asp'\n            - '/zip_k3.asp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        c-uri|contains:\n            - '/ex001.url'\n            - '/file001.search-ms'\n            - '/file001.url'\n            - '/file001.vbs'\n            - '/file1.mht'\n            - '/o2010.asp'\n            - '/redir_obj.html'\n            - '/RFile.asp'\n            - '/zip_k.asp'\n            - '/zip_k2.asp'\n            - '/zip_k3.asp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "files seen being requested by RomCom while potentially exploiting CVE-2023-36884",
      "answer": "In order to detect files seen being requested by RomCom while potentially exploiting CVE-2023-36884, you should: Monitor proxy logs for GET requests to specific URLs that contain the following paths: '/ex001.url', '/file001.search-ms', '/file001.url', '/file001.vbs', '/file1.mht', '/o2010.asp', '/redir_obj.html', '/RFile.asp', '/zip_k.asp', '/zip_k2.asp', and '/zip_k3.asp'. These files are indicative of attempt to exploit this vulnerability, and detecting requests for them can alert you to potential malicious activity. The detection level for these activities is set at medium due to the possibility of unknown false positives, outlining the need for further investigation upon alert."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) from non default locations as seen with bumblebee activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) from non-default locations as seen with Bumblebee activity, you should focus on monitoring the creation of processes within a Windows environment. Specifically, you should look for events where the name of the process being initiated ends with '\\wab.exe' or '\\wabmig.exe', which are key indicators of the mentioned activities. It's crucial to filter out the instances where these processes start from the default, legitimate locations such as 'C:\\Windows\\WinSxS\\', 'C:\\Program Files\\Windows Mail\\', or 'C:\\Program Files (x86)\\Windows Mail\\' to avoid false positives. The detection of processes starting from locations other than these specified paths might indicate malicious activity associated with tactics and techniques used by threat actors, specifically pointing towards Bumblebee activity. This focus is important with a high level of alert due to the potential for unknown false positives, signaling the need for immediate attention and investigation when such criteria are met.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Program Files\\Windows Mail\\'\n            - 'C:\\Program Files (x86)\\Windows Mail\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\wab.exe'\n            - '\\wabmig.exe'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Program Files\\Windows Mail\\'\n            - 'C:\\Program Files (x86)\\Windows Mail\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) from non default locations as seen with bumblebee activity",
      "answer": "In order to detect execution of wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) from non-default locations as seen with Bumblebee activity, you should focus on monitoring the creation of processes within a Windows environment. Specifically, you should look for events where the name of the process being initiated ends with '\\wab.exe' or '\\wabmig.exe', which are key indicators of the mentioned activities. It's crucial to filter out the instances where these processes start from the default, legitimate locations such as 'C:\\Windows\\WinSxS\\', 'C:\\Program Files\\Windows Mail\\', or 'C:\\Program Files (x86)\\Windows Mail\\' to avoid false positives. The detection of processes starting from locations other than these specified paths might indicate malicious activity associated with tactics and techniques used by threat actors, specifically pointing towards Bumblebee activity. This focus is important with a high level of alert due to the potential for unknown false positives, signaling the need for immediate attention and investigation when such criteria are met."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of default named pipes used by the Koh tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect creation of default named pipes used by the Koh tool, you should: Monitor Windows systems for the creation of named pipes, focusing on those with specific names that include '\\imposecost' and '\\imposingcost'. This monitoring can be achieved by configuring logging for Named Pipe Events, particularly leveraging Sysmon's Event ID 17 and Event ID 18. It is essential to ensure that the logging for these events is properly configured, which might involve reviewing and potentially adjusting the Sysmon configuration according to templates found in well-regarded repositories such as those maintained by SwiftOnSecurity, Neo23x0, or Olafhartong. Additionally, detection efforts can be validated through testing mechanisms, such as using the PowerShell script available from SVCH0ST's guide on named pipes and Cobalt Strike pipe hunting. Given the specificity of the named pipes associated with the Koh tool, false positives are unlikely; however, any detection of pipe creation matching these criteria should be treated with a critical level of concern due to its association with malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|contains:\n            - '\\imposecost'\n            - '\\imposingcost'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|contains:\n            - '\\imposecost'\n            - '\\imposingcost'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "creation of default named pipes used by the Koh tool",
      "answer": "In order to detect creation of default named pipes used by the Koh tool, you should: Monitor Windows systems for the creation of named pipes, focusing on those with specific names that include '\\imposecost' and '\\imposingcost'. This monitoring can be achieved by configuring logging for Named Pipe Events, particularly leveraging Sysmon's Event ID 17 and Event ID 18. It is essential to ensure that the logging for these events is properly configured, which might involve reviewing and potentially adjusting the Sysmon configuration according to templates found in well-regarded repositories such as those maintained by SwiftOnSecurity, Neo23x0, or Olafhartong. Additionally, detection efforts can be validated through testing mechanisms, such as using the PowerShell script available from SVCH0ST's guide on named pipes and Cobalt Strike pipe hunting. Given the specificity of the named pipes associated with the Koh tool, false positives are unlikely; however, any detection of pipe creation matching these criteria should be treated with a critical level of concern due to its association with malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. Rule detects when adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when adversaries abuse Extensible Stylesheet Language (XSL) files to execute arbitrary files while potentially bypassing application whitelisting defenses, you should: Monitor Windows process creation logs for the execution of `wmic.exe` or `msxsl.exe`. Specifically, look for instances where `wmic.exe` is being invoked with command line arguments including `/format` or `-format`, indicative of an attempt to manipulate or query WMI (Windows Management Instrumentation) in a suspicious manner, which could be related to the execution of arbitrary files. These command line arguments are typically used to format output but might be misused in an attack scenario. False positives may arise if the command line contains common format values like 'Format:List', 'Format:htable', and similar, so such instances should be excluded from alerts. Additionally, pay attention to the execution of `msxsl.exe`, which is not installed by default on Windows systems and thus its presence or usage should be considered suspicious. Acknowledge that false positives for WMIC usage could depend on the legitimate administrative scripts and methods used within your environment. The detection strategy is of medium urgency and aims to cover tactics and techniques including execution of arbitrary code, evasion of application whitelisting, and potentially, the abuse of system administration tools for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wmic:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains: \n            - '/format'     # wmic process list /FORMAT /?\n            - '-format'     # wmic process list -FORMAT /?\n    selection_msxsl:\n        Image|endswith: '\\msxsl.exe'\n    false_positives:\n        CommandLine|contains:\n            - 'Format:List'\n            - 'Format:htable'\n            - 'Format:hform'\n            - 'Format:table'\n            - 'Format:mof'\n            - 'Format:value'\n            - 'Format:rawxml'\n            - 'Format:xml'\n            - 'Format:csv'\n    condition: (selection_wmic and not false_positives) or selection_msxsl\nfalsepositives:\n    - WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.\n    - Msxsl.exe is not installed by default, so unlikely.\n    - Static format arguments - https://petri.com/command-line-wmi-part-3\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_wmic:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains: \n            - '/format'     # wmic process list /FORMAT /?\n            - '-format'     # wmic process list -FORMAT /?\n    selection_msxsl:\n        Image|endswith: '\\msxsl.exe'\n    false_positives:\n        CommandLine|contains:\n            - 'Format:List'\n            - 'Format:htable'\n            - 'Format:hform'\n            - 'Format:table'\n            - 'Format:mof'\n            - 'Format:value'\n            - 'Format:rawxml'\n            - 'Format:xml'\n            - 'Format:csv'\n    condition: (selection_wmic and not false_positives) or selection_msxsl\nfalsepositives:\n    - WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.\n    - Msxsl.exe is not installed by default, so unlikely.\n    - Static format arguments - https://petri.com/command-line-wmi-part-3\nlevel: medium\n",
      "question": "Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. Rule detects when adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.",
      "answer": "In order to detect when adversaries abuse Extensible Stylesheet Language (XSL) files to execute arbitrary files while potentially bypassing application whitelisting defenses, you should: Monitor Windows process creation logs for the execution of `wmic.exe` or `msxsl.exe`. Specifically, look for instances where `wmic.exe` is being invoked with command line arguments including `/format` or `-format`, indicative of an attempt to manipulate or query WMI (Windows Management Instrumentation) in a suspicious manner, which could be related to the execution of arbitrary files. These command line arguments are typically used to format output but might be misused in an attack scenario. False positives may arise if the command line contains common format values like 'Format:List', 'Format:htable', and similar, so such instances should be excluded from alerts. Additionally, pay attention to the execution of `msxsl.exe`, which is not installed by default on Windows systems and thus its presence or usage should be considered suspicious. Acknowledge that false positives for WMIC usage could depend on the legitimate administrative scripts and methods used within your environment. The detection strategy is of medium urgency and aims to cover tactics and techniques including execution of arbitrary code, evasion of application whitelisting, and potentially, the abuse of system administration tools for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This method detects malicious services mentioned in Turla PNG dropper report by NCC Group in November 2018.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect malicious services mentioned in Turla PNG dropper report by NCC Group in November 2018, you should monitor Windows system service logs for events that are indicative of the suspicious activity associated with these services. Specifically, look for logs that come from the Service Control Manager with an EventID of 7045, which denotes a service installation. Be particularly vigilant for the installation of a service named 'WerFaultSvc'. This specific service name has been identified in connection with the Turla PNG dropper, a type of malware deployment. Considering the context and specificity of these indicators - the service name and event ID - false positives are considered unlikely. Given the critical nature of this threat, immediate attention to such alerts is advisable. This analysis focuses on identifying tactics and techniques without directly referencing specific MITRE ATT&CK framework identifiers; however, it aligns with strategies observed in sophisticated cyber espionage campaigns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'WerFaultSvc'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'WerFaultSvc'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "This method detects malicious services mentioned in Turla PNG dropper report by NCC Group in November 2018",
      "answer": "In order to detect malicious services mentioned in Turla PNG dropper report by NCC Group in November 2018, you should monitor Windows system service logs for events that are indicative of the suspicious activity associated with these services. Specifically, look for logs that come from the Service Control Manager with an EventID of 7045, which denotes a service installation. Be particularly vigilant for the installation of a service named 'WerFaultSvc'. This specific service name has been identified in connection with the Turla PNG dropper, a type of malware deployment. Considering the context and specificity of these indicators - the service name and event ID - false positives are considered unlikely. Given the critical nature of this threat, immediate attention to such alerts is advisable. This analysis focuses on identifying tactics and techniques without directly referencing specific MITRE ATT&CK framework identifiers; however, it aligns with strategies observed in sophisticated cyber espionage campaigns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of known compromised version of 3CXDesktopApp.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of known compromised version of 3CXDesktopApp, you should monitor process creation events on Windows systems for specific indicators of compromise. These indicators include a variety of cryptographic hashes representing known malicious versions of the 3CXDesktopApp software. Specifically, look out for process creation events where the hash of the executable matches any in a list that includes both SHA256, SHA1, and MD5 hashes. Additionally, monitor for processes that have filenames, image paths, or product names matching '3CXDesktopApp' or where the file version contains '18.12.', which are indicative of potentially compromised software versions.\n\nBe aware that legitimate usage of the 3CXDesktopApp may sometimes trigger these alerts; thus, it's crucial to validate potential incidents carefully to distinguish between malicious and benign activities. The detection level for these indicators is considered high due to the specificity and potential impact of executing a compromised application version.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_hashes_1:\n        Hashes|contains:\n            # 3CX Desktop 18.12.407\n            - 'SHA256=DDE03348075512796241389DFEA5560C20A3D2A2EAC95C894E7BBED5E85A0ACC'\n            - 'SHA256=54004DFAA48CA5FA91E3304FB99559A2395301C570026450882D6AAD89132A02'\n            - 'SHA256=D45674F941BE3CCA2FBC1AF42778043CC18CD86D95A2ECB9E6F0E212ED4C74AE'\n            - 'SHA1=480DC408EF50BE69EBCF84B95750F7E93A8A1859'\n            - 'SHA1=3B43A5D8B83C637D00D769660D01333E88F5A187'\n            - 'SHA1=6285FFB5F98D35CD98E78D48B63A05AF6E4E4DEA'\n            - 'MD5=BB915073385DD16A846DFA318AFA3C19'\n            - 'MD5=08D79E1FFFA244CC0DC61F7D2036ACA9'\n            - 'MD5=4965EDF659753E3C05D800C6C8A23A7A'\n            # 3CX Desktop 18.12.416\n            - 'SHA256=FAD482DED2E25CE9E1DD3D3ECC3227AF714BDFBBDE04347DBC1B21D6A3670405'\n            - 'SHA256=5D99EFA36F34AA6B43CD81E77544961C5C8D692C96059FEF92C2DF2624550734'\n            - 'SHA256=A60A61BF844BC181D4540C9FAC53203250A982E7C3AD6153869F01E19CC36203'\n            - 'SHA1=E272715737B51C01DC2BED0F0AEE2BF6FEEF25F1'\n            - 'SHA1=8433A94AEDB6380AC8D4610AF643FB0E5220C5CB'\n            - 'SHA1=413D9CBFCBF8D1E8304EAB0AA5484F5EEC5185F5'\n            - 'MD5=9833A4779B69B38E3E51F04E395674C6'\n            - 'MD5=704DB9184700481A56E5100FB56496CE'\n            - 'MD5=8EE6802F085F7A9DF7E0303E65722DC0'\n            # 3CXDesktopApp MSI\n            - 'SHA256=AA124A4B4DF12B34E74EE7F6C683B2EBEC4CE9A8EDCF9BE345823B4FDCF5D868'\n            - 'SHA256=59E1EDF4D82FAE4978E97512B0331B7EB21DD4B838B850BA46794D9C7A2C0983'\n            - 'SHA1=BEA77D1E59CF18DCE22AD9A2FAD52948FD7A9EFA'\n            - 'SHA1=BFECB8CE89A312D2EF4AFC64A63847AE11C6F69E'\n            - 'MD5=F3D4144860CA10BA60F7EF4D176CC736'\n            - 'MD5=0EEB1C0133EB4D571178B2D9D14CE3E9'\n    selection_hashes_2:\n        - sha256:\n            - 'DDE03348075512796241389DFEA5560C20A3D2A2EAC95C894E7BBED5E85A0ACC'\n            - '54004DFAA48CA5FA91E3304FB99559A2395301C570026450882D6AAD89132A02'\n            - 'D45674F941BE3CCA2FBC1AF42778043CC18CD86D95A2ECB9E6F0E212ED4C74AE'\n            - 'FAD482DED2E25CE9E1DD3D3ECC3227AF714BDFBBDE04347DBC1B21D6A3670405'\n            - '5D99EFA36F34AA6B43CD81E77544961C5C8D692C96059FEF92C2DF2624550734'\n            - 'A60A61BF844BC181D4540C9FAC53203250A982E7C3AD6153869F01E19CC36203'\n            - 'AA124A4B4DF12B34E74EE7F6C683B2EBEC4CE9A8EDCF9BE345823B4FDCF5D868'\n            - '59E1EDF4D82FAE4978E97512B0331B7EB21DD4B838B850BA46794D9C7A2C0983'\n        - sha1:\n            - '480DC408EF50BE69EBCF84B95750F7E93A8A1859'\n            - '3B43A5D8B83C637D00D769660D01333E88F5A187'\n            - '6285FFB5F98D35CD98E78D48B63A05AF6E4E4DEA'\n            - 'E272715737B51C01DC2BED0F0AEE2BF6FEEF25F1'\n            - '8433A94AEDB6380AC8D4610AF643FB0E5220C5CB'\n            - '413D9CBFCBF8D1E8304EAB0AA5484F5EEC5185F5'\n            - 'BEA77D1E59CF18DCE22AD9A2FAD52948FD7A9EFA'\n            - 'BFECB8CE89A312D2EF4AFC64A63847AE11C6F69E'\n        - md5:\n            - 'BB915073385DD16A846DFA318AFA3C19'\n            - '08D79E1FFFA244CC0DC61F7D2036ACA9'\n            - '4965EDF659753E3C05D800C6C8A23A7A'\n            - '9833A4779B69B38E3E51F04E395674C6'\n            - '704DB9184700481A56E5100FB56496CE'\n            - '8EE6802F085F7A9DF7E0303E65722DC0'\n            - 'F3D4144860CA10BA60F7EF4D176CC736'\n            - '0EEB1C0133EB4D571178B2D9D14CE3E9'\n    selection_pe_1:\n        - OriginalFileName: '3CXDesktopApp.exe'\n        - Image|endswith: '\\3CXDesktopApp.exe'\n        - Product: '3CX Desktop App'\n    selection_pe_2:\n        FileVersion|contains: '18.12.'\n    condition: all of selection_pe_* or 1 of selection_hashes_*\nfalsepositives:\n    - Legitimate usage of 3CXDesktopApp\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_hashes_1:\n        Hashes|contains:\n            # 3CX Desktop 18.12.407\n            - 'SHA256=DDE03348075512796241389DFEA5560C20A3D2A2EAC95C894E7BBED5E85A0ACC'\n            - 'SHA256=54004DFAA48CA5FA91E3304FB99559A2395301C570026450882D6AAD89132A02'\n            - 'SHA256=D45674F941BE3CCA2FBC1AF42778043CC18CD86D95A2ECB9E6F0E212ED4C74AE'\n            - 'SHA1=480DC408EF50BE69EBCF84B95750F7E93A8A1859'\n            - 'SHA1=3B43A5D8B83C637D00D769660D01333E88F5A187'\n            - 'SHA1=6285FFB5F98D35CD98E78D48B63A05AF6E4E4DEA'\n            - 'MD5=BB915073385DD16A846DFA318AFA3C19'\n            - 'MD5=08D79E1FFFA244CC0DC61F7D2036ACA9'\n            - 'MD5=4965EDF659753E3C05D800C6C8A23A7A'\n            # 3CX Desktop 18.12.416\n            - 'SHA256=FAD482DED2E25CE9E1DD3D3ECC3227AF714BDFBBDE04347DBC1B21D6A3670405'\n            - 'SHA256=5D99EFA36F34AA6B43CD81E77544961C5C8D692C96059FEF92C2DF2624550734'\n            - 'SHA256=A60A61BF844BC181D4540C9FAC53203250A982E7C3AD6153869F01E19CC36203'\n            - 'SHA1=E272715737B51C01DC2BED0F0AEE2BF6FEEF25F1'\n            - 'SHA1=8433A94AEDB6380AC8D4610AF643FB0E5220C5CB'\n            - 'SHA1=413D9CBFCBF8D1E8304EAB0AA5484F5EEC5185F5'\n            - 'MD5=9833A4779B69B38E3E51F04E395674C6'\n            - 'MD5=704DB9184700481A56E5100FB56496CE'\n            - 'MD5=8EE6802F085F7A9DF7E0303E65722DC0'\n            # 3CXDesktopApp MSI\n            - 'SHA256=AA124A4B4DF12B34E74EE7F6C683B2EBEC4CE9A8EDCF9BE345823B4FDCF5D868'\n            - 'SHA256=59E1EDF4D82FAE4978E97512B0331B7EB21DD4B838B850BA46794D9C7A2C0983'\n            - 'SHA1=BEA77D1E59CF18DCE22AD9A2FAD52948FD7A9EFA'\n            - 'SHA1=BFECB8CE89A312D2EF4AFC64A63847AE11C6F69E'\n            - 'MD5=F3D4144860CA10BA60F7EF4D176CC736'\n            - 'MD5=0EEB1C0133EB4D571178B2D9D14CE3E9'\n    selection_hashes_2:\n        - sha256:\n            - 'DDE03348075512796241389DFEA5560C20A3D2A2EAC95C894E7BBED5E85A0ACC'\n            - '54004DFAA48CA5FA91E3304FB99559A2395301C570026450882D6AAD89132A02'\n            - 'D45674F941BE3CCA2FBC1AF42778043CC18CD86D95A2ECB9E6F0E212ED4C74AE'\n            - 'FAD482DED2E25CE9E1DD3D3ECC3227AF714BDFBBDE04347DBC1B21D6A3670405'\n            - '5D99EFA36F34AA6B43CD81E77544961C5C8D692C96059FEF92C2DF2624550734'\n            - 'A60A61BF844BC181D4540C9FAC53203250A982E7C3AD6153869F01E19CC36203'\n            - 'AA124A4B4DF12B34E74EE7F6C683B2EBEC4CE9A8EDCF9BE345823B4FDCF5D868'\n            - '59E1EDF4D82FAE4978E97512B0331B7EB21DD4B838B850BA46794D9C7A2C0983'\n        - sha1:\n            - '480DC408EF50BE69EBCF84B95750F7E93A8A1859'\n            - '3B43A5D8B83C637D00D769660D01333E88F5A187'\n            - '6285FFB5F98D35CD98E78D48B63A05AF6E4E4DEA'\n            - 'E272715737B51C01DC2BED0F0AEE2BF6FEEF25F1'\n            - '8433A94AEDB6380AC8D4610AF643FB0E5220C5CB'\n            - '413D9CBFCBF8D1E8304EAB0AA5484F5EEC5185F5'\n            - 'BEA77D1E59CF18DCE22AD9A2FAD52948FD7A9EFA'\n            - 'BFECB8CE89A312D2EF4AFC64A63847AE11C6F69E'\n        - md5:\n            - 'BB915073385DD16A846DFA318AFA3C19'\n            - '08D79E1FFFA244CC0DC61F7D2036ACA9'\n            - '4965EDF659753E3C05D800C6C8A23A7A'\n            - '9833A4779B69B38E3E51F04E395674C6'\n            - '704DB9184700481A56E5100FB56496CE'\n            - '8EE6802F085F7A9DF7E0303E65722DC0'\n            - 'F3D4144860CA10BA60F7EF4D176CC736'\n            - '0EEB1C0133EB4D571178B2D9D14CE3E9'\n    selection_pe_1:\n        - OriginalFileName: '3CXDesktopApp.exe'\n        - Image|endswith: '\\3CXDesktopApp.exe'\n        - Product: '3CX Desktop App'\n    selection_pe_2:\n        FileVersion|contains: '18.12.'\n    condition: all of selection_pe_* or 1 of selection_hashes_*\nfalsepositives:\n    - Legitimate usage of 3CXDesktopApp\nlevel: high\n",
      "question": "execution of known compromised version of 3CXDesktopApp",
      "answer": "In order to detect execution of known compromised version of 3CXDesktopApp, you should monitor process creation events on Windows systems for specific indicators of compromise. These indicators include a variety of cryptographic hashes representing known malicious versions of the 3CXDesktopApp software. Specifically, look out for process creation events where the hash of the executable matches any in a list that includes both SHA256, SHA1, and MD5 hashes. Additionally, monitor for processes that have filenames, image paths, or product names matching '3CXDesktopApp' or where the file version contains '18.12.', which are indicative of potentially compromised software versions.\n\nBe aware that legitimate usage of the 3CXDesktopApp may sometimes trigger these alerts; thus, it's crucial to validate potential incidents carefully to distinguish between malicious and benign activities. The detection level for these indicators is considered high due to the specificity and potential impact of executing a compromised application version."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting connections to interplanetary file system (IPFS) containing a user's email address which mirrors behaviours observed in recent phishing campaigns leveraging IPFS to host credential harvesting webpages..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect connections to interplanetary file system (IPFS) containing a user's email address which mirrors behaviours observed in recent phishing campaigns leveraging IPFS to host credential harvesting webpages, you should monitor proxy logs for any Uniform Resource Identifiers (URIs) that match a specific pattern indicating they are part of the IPFS network and include what seems to be a user's email address. Specifically, look for URIs that contain 'ipfs.io/' or 'ipfs.io ' followed by any characters and an '@' symbol, which typically signifies an email address. This pattern helps identify potential phishing attempts exploiting IPFS to host malicious webpages designed to capture credentials. It's important to note that there may be legitimate uses of IPFS within an organization, but the specific pattern focusing on the presence of an email address within the URI is less likely to represent normal activity and more likely to indicate a phishing attempt. The sensitivity of the rule is considered low due to the possibility of false positives in environments where IPFS is used for legitimate purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-uri|re: '(?i)(ipfs\\.io/|ipfs\\.io\\s).+\\..+@.+\\.[a-z]+'\n    condition: selection\nfalsepositives:\n    - Legitimate use of IPFS being used in the organisation. However the cs-uri regex looking for a user email will likely negate this.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-uri|re: '(?i)(ipfs\\.io/|ipfs\\.io\\s).+\\..+@.+\\.[a-z]+'\n    condition: selection\nfalsepositives:\n    - Legitimate use of IPFS being used in the organisation. However the cs-uri regex looking for a user email will likely negate this.\nlevel: low\n",
      "question": "connections to interplanetary file system (IPFS) containing a user's email address which mirrors behaviours observed in recent phishing campaigns leveraging IPFS to host credential harvesting webpages.",
      "answer": "In order to detect connections to interplanetary file system (IPFS) containing a user's email address which mirrors behaviours observed in recent phishing campaigns leveraging IPFS to host credential harvesting webpages, you should monitor proxy logs for any Uniform Resource Identifiers (URIs) that match a specific pattern indicating they are part of the IPFS network and include what seems to be a user's email address. Specifically, look for URIs that contain 'ipfs.io/' or 'ipfs.io ' followed by any characters and an '@' symbol, which typically signifies an email address. This pattern helps identify potential phishing attempts exploiting IPFS to host malicious webpages designed to capture credentials. It's important to note that there may be legitimate uses of IPFS within an organization, but the specific pattern focusing on the presence of an email address within the URI is less likely to represent normal activity and more likely to indicate a phishing attempt. The sensitivity of the rule is considered low due to the possibility of false positives in environments where IPFS is used for legitimate purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of \"DumpMinitool.exe\" a tool that allows the dump of process memory via the use of the \"MiniDumpWriteDump\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of \"DumpMinitool.exe\", a tool that allows the dumping of process memory via the use of the \"MiniDumpWriteDump\", you should: Monitor Windows process creation logs for occurrences where processes are started with names ending in '\\DumpMinitool.exe', '\\DumpMinitool.x86.exe', or '\\DumpMinitool.arm64.exe'. Additionally, watch for instances where the OriginalFileName attribute matches 'DumpMinitool.exe', 'DumpMinitool.x86.exe', or 'DumpMinitool.arm64.exe'. It is also crucial to check if the processes were initiated with command line arguments containing ' Full', ' Mini', or ' WithHeap', as these are indicative of attempts to dump process memory using specific features of the tool. All these criteria need to be met for a definitive detection. Be aware that there might be unknown false positives and this detection has been rated at a medium level of confidence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\DumpMinitool.exe'\n            - '\\DumpMinitool.x86.exe'\n            - '\\DumpMinitool.arm64.exe'\n        - OriginalFileName:\n            - 'DumpMinitool.exe'\n            - 'DumpMinitool.x86.exe'\n            - 'DumpMinitool.arm64.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' Full'\n            - ' Mini'\n            - ' WithHeap'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\DumpMinitool.exe'\n            - '\\DumpMinitool.x86.exe'\n            - '\\DumpMinitool.arm64.exe'\n        - OriginalFileName:\n            - 'DumpMinitool.exe'\n            - 'DumpMinitool.x86.exe'\n            - 'DumpMinitool.arm64.exe'\n    selection_cli:\n        CommandLine|contains:\n            - ' Full'\n            - ' Mini'\n            - ' WithHeap'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "use of \"DumpMinitool.exe\" a tool that allows the dump of process memory via the use of the \"MiniDumpWriteDump\"",
      "answer": "In order to detect the use of \"DumpMinitool.exe\", a tool that allows the dumping of process memory via the use of the \"MiniDumpWriteDump\", you should: Monitor Windows process creation logs for occurrences where processes are started with names ending in '\\DumpMinitool.exe', '\\DumpMinitool.x86.exe', or '\\DumpMinitool.arm64.exe'. Additionally, watch for instances where the OriginalFileName attribute matches 'DumpMinitool.exe', 'DumpMinitool.x86.exe', or 'DumpMinitool.arm64.exe'. It is also crucial to check if the processes were initiated with command line arguments containing ' Full', ' Mini', or ' WithHeap', as these are indicative of attempts to dump process memory using specific features of the tool. All these criteria need to be met for a definitive detection. Be aware that there might be unknown false positives and this detection has been rated at a medium level of confidence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of a renamed AdFind.exe, which continues to be seen across the majority of breaches and is used for domain trust discovery to plan out subsequent steps in the attack chain, you should monitor for the creation of processes on Windows systems that exhibit specific characteristics indicative of such reconnaissance activities. Key indicators include command lines containing references to domain information querying such as 'domainlist,' 'trustdmp,' 'dcmodes,' 'adinfo,' 'dclist,' 'computer_pwdnotreqd,' 'objectcategory=,' '-subnets -f,' 'name=\"Domain Admins\",' '-sc u:,' 'domainncs,' 'dompol,' 'oudmp,' 'subnetdmp,' 'gpodmp,' 'fspdmp,' 'users_noexpire,' 'computers_active,' and 'computers_pwdnotreqd.' Additionally, detection can be bolstered by identifying processes with specific hash values known to be associated with AdFind, specifically bca5675746d13a1f246e2da3c2217492 and 53e117a96057eaf19c41380d0e87f1c2, or processes where the original file name is 'AdFind.exe,' while ensuring to exclude legitimate instances of AdFind.exe. This approach aims at minimizing the risk of overlooking a potentially malicious activity designed to gain insights into domain trusts and facilitate the planning of further malicious operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'domainlist'\n            - 'trustdmp'\n            - 'dcmodes'\n            - 'adinfo'\n            - ' dclist '\n            - 'computer_pwdnotreqd'\n            - 'objectcategory='\n            - '-subnets -f'\n            - 'name=\"Domain Admins\"'\n            - '-sc u:'\n            - 'domainncs'\n            - 'dompol'\n            - ' oudmp '\n            - 'subnetdmp'\n            - 'gpodmp'\n            - 'fspdmp'\n            - 'users_noexpire'\n            - 'computers_active'\n            - 'computers_pwdnotreqd'\n    selection_2:\n        - Imphash:\n            - bca5675746d13a1f246e2da3c2217492\n            - 53e117a96057eaf19c41380d0e87f1c2\n        - Hashes|contains:\n            - 'IMPHASH=BCA5675746D13A1F246E2DA3C2217492'\n            - 'IMPHASH=53E117A96057EAF19C41380D0E87F1C2'\n    selection_3:\n        OriginalFileName: 'AdFind.exe'\n    filter:\n        Image|endswith: '\\AdFind.exe'\n    condition: 1 of selection* and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'domainlist'\n            - 'trustdmp'\n            - 'dcmodes'\n            - 'adinfo'\n            - ' dclist '\n            - 'computer_pwdnotreqd'\n            - 'objectcategory='\n            - '-subnets -f'\n            - 'name=\"Domain Admins\"'\n            - '-sc u:'\n            - 'domainncs'\n            - 'dompol'\n            - ' oudmp '\n            - 'subnetdmp'\n            - 'gpodmp'\n            - 'fspdmp'\n            - 'users_noexpire'\n            - 'computers_active'\n            - 'computers_pwdnotreqd'\n    selection_2:\n        - Imphash:\n            - bca5675746d13a1f246e2da3c2217492\n            - 53e117a96057eaf19c41380d0e87f1c2\n        - Hashes|contains:\n            - 'IMPHASH=BCA5675746D13A1F246E2DA3C2217492'\n            - 'IMPHASH=53E117A96057EAF19C41380D0E87F1C2'\n    selection_3:\n        OriginalFileName: 'AdFind.exe'\n    filter:\n        Image|endswith: '\\AdFind.exe'\n    condition: 1 of selection* and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.",
      "answer": "In order to detect the use of a renamed AdFind.exe, which continues to be seen across the majority of breaches and is used for domain trust discovery to plan out subsequent steps in the attack chain, you should monitor for the creation of processes on Windows systems that exhibit specific characteristics indicative of such reconnaissance activities. Key indicators include command lines containing references to domain information querying such as 'domainlist,' 'trustdmp,' 'dcmodes,' 'adinfo,' 'dclist,' 'computer_pwdnotreqd,' 'objectcategory=,' '-subnets -f,' 'name=\"Domain Admins\",' '-sc u:,' 'domainncs,' 'dompol,' 'oudmp,' 'subnetdmp,' 'gpodmp,' 'fspdmp,' 'users_noexpire,' 'computers_active,' and 'computers_pwdnotreqd.' Additionally, detection can be bolstered by identifying processes with specific hash values known to be associated with AdFind, specifically bca5675746d13a1f246e2da3c2217492 and 53e117a96057eaf19c41380d0e87f1c2, or processes where the original file name is 'AdFind.exe,' while ensuring to exclude legitimate instances of AdFind.exe. This approach aims at minimizing the risk of overlooking a potentially malicious activity designed to gain insights into domain trusts and facilitate the planning of further malicious operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suppression rule is created in Azure. Adversary's could attempt this to evade detection..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a suppression rule is created in Azure, which adversaries could attempt to evade detection, you should: Monitor Azure activity logs specifically for actions related to creating alert suppression rules. Focus on detecting events where the operation name is MICROSOFT.SECURITY/ALERTSSUPPRESSIONRULES/WRITE. This kind of activity can sometimes be legitimate, such as when a system administrator is performing routine tasks. However, to differentiate between normal and suspicious activities, you need to verify the user identity, user agent, and hostname involved in creating the suppression rule. If the action is initiated by an unfamiliar user or from an unexpected source, it should be considered suspicious and warrants further investigation. It is important to note that legitimate cases where known behaviors cause false alarms can be set to bypass this monitoring to reduce noise. The detection of such events is rated at a medium level of importance, and these activities are associated with tactics and techniques like defense evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName: MICROSOFT.SECURITY/ALERTSSUPPRESSIONRULES/WRITE\n    condition: selection\nfalsepositives:\n    - Suppression Rule being created may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Suppression Rule created from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName: MICROSOFT.SECURITY/ALERTSSUPPRESSIONRULES/WRITE\n    condition: selection\nfalsepositives:\n    - Suppression Rule being created may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Suppression Rule created from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "suppression rule is created in Azure. Adversary's could attempt this to evade detection.",
      "answer": "In order to identify when a suppression rule is created in Azure, which adversaries could attempt to evade detection, you should: Monitor Azure activity logs specifically for actions related to creating alert suppression rules. Focus on detecting events where the operation name is MICROSOFT.SECURITY/ALERTSSUPPRESSIONRULES/WRITE. This kind of activity can sometimes be legitimate, such as when a system administrator is performing routine tasks. However, to differentiate between normal and suspicious activities, you need to verify the user identity, user agent, and hostname involved in creating the suppression rule. If the action is initiated by an unfamiliar user or from an unexpected source, it should be considered suspicious and warrants further investigation. It is important to note that legitimate cases where known behaviors cause false alarms can be set to bypass this monitoring to reduce noise. The detection of such events is rated at a medium level of importance, and these activities are associated with tactics and techniques like defense evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.\nScreen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who attempt to take screen captures of the desktop to gather information over the course of an operation, where screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations, you should focus on monitoring PowerShell script activity within the Windows environment. Specifically, ensure that Script Block Logging is enabled, as it plays a crucial role in identifying potentially malicious activities. Look for PowerShell scripts that include the method '.CopyFromScreen' in their text. This method is a tell-tale sign that a script is attempting to capture the screen, which is often associated with adversarial behavior aiming to collect sensitive information post system compromise. Be aware that there are scenarios where this detection might flag benign activities, although such cases are currently unknown, indicating the rule's relevance and specificity towards malicious conduct. This detection strategy is especially critical, given its medium-level prioritization, in the broader context of defending against information gathering tactics and techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: '.CopyFromScreen'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: '.CopyFromScreen'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.\nScreen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations\n",
      "answer": "In order to detect adversaries who attempt to take screen captures of the desktop to gather information over the course of an operation, where screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations, you should focus on monitoring PowerShell script activity within the Windows environment. Specifically, ensure that Script Block Logging is enabled, as it plays a crucial role in identifying potentially malicious activities. Look for PowerShell scripts that include the method '.CopyFromScreen' in their text. This method is a tell-tale sign that a script is attempting to capture the screen, which is often associated with adversarial behavior aiming to collect sensitive information post system compromise. Be aware that there are scenarios where this detection might flag benign activities, although such cases are currently unknown, indicating the rule's relevance and specificity towards malicious conduct. This detection strategy is especially critical, given its medium-level prioritization, in the broader context of defending against information gathering tactics and techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries can use curl to download payloads remotely and execute them. Curl is included by default in Windows 10 build 17063 and later..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who might be using curl to download payloads remotely and execute them, a process increasingly common with Windows 10 build 17063 and later where curl is included by default, you should: monitor process creation events on Windows systems for command lines that simultaneously contain all of the following components: ' /c ', indicating a command is being executed; 'curl ', signifying the use of the curl command-line tool; 'http', which is typically present in URLs for downloading content from the internet; '-o', a parameter used in curl commands to specify the output file name of the download, indicating that data is being written to disk; and '&', suggesting that commands are being chained together, a technique often used in malicious scripts to execute multiple commands in succession. Pay special attention to the parent image and command line fields in logs to help ascertain the context and source of these curl download commands. Given the high potential for malicious use, any detection matching these criteria should be treated with a high level of scrutiny, even though it's acknowledged that not all uses of curl with these parameters are malicious in nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' /c '\n            - 'curl '\n            - 'http'\n            - '-o'\n            - '&'\n    condition: selection\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - ' /c '\n            - 'curl '\n            - 'http'\n            - '-o'\n            - '&'\n    condition: selection\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Adversaries can use curl to download payloads remotely and execute them. Curl is included by default in Windows 10 build 17063 and later.",
      "answer": "In order to detect adversaries who might be using curl to download payloads remotely and execute them, a process increasingly common with Windows 10 build 17063 and later where curl is included by default, you should: monitor process creation events on Windows systems for command lines that simultaneously contain all of the following components: ' /c ', indicating a command is being executed; 'curl ', signifying the use of the curl command-line tool; 'http', which is typically present in URLs for downloading content from the internet; '-o', a parameter used in curl commands to specify the output file name of the download, indicating that data is being written to disk; and '&', suggesting that commands are being chained together, a technique often used in malicious scripts to execute multiple commands in succession. Pay special attention to the parent image and command line fields in logs to help ascertain the context and source of these curl download commands. Given the high potential for malicious use, any detection matching these criteria should be treated with a high level of scrutiny, even though it's acknowledged that not all uses of curl with these parameters are malicious in nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of AppX packages with known suspicious or malicious signature.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of AppX packages with known suspicious or malicious signature, you should monitor Windows application packaging logs for specific events related to the installation or execution of AppX packages. Focus your attention on events with the ID 157 within the AppX packaging service logs. This particular event ID indicates the activation of an AppX package, which could potentially be harmful if it originates from untrusted sources. Specifically, lookout for packages signed by the certificate with a subject name of \"CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\". This certificate has been identified as suspicious or malicious based on its usage in various attacks. It is crucial to be aware that there might be instances where this detection could trigger false positives, although the circumstances under which these might occur are unknown. The severity level for this detection has been set to medium, indicating a balanced caution between overlooking potential threats and overreacting to benign activities. This detection is aligned with techniques identified by MITRE ATT&CK relating to the abuse of application deployment systems for the purpose of executing untrusted code.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: appxpackaging-om\ndetection:\n    selection:\n        EventID: 157\n        # Add more known suspicious/malicious certificates used in different attacks\n        subjectName: 'CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: appxpackaging-om\ndetection:\n    selection:\n        EventID: 157\n        # Add more known suspicious/malicious certificates used in different attacks\n        subjectName: 'CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of AppX packages with known suspicious or malicious signature",
      "answer": "In order to detect execution of AppX packages with known suspicious or malicious signature, you should monitor Windows application packaging logs for specific events related to the installation or execution of AppX packages. Focus your attention on events with the ID 157 within the AppX packaging service logs. This particular event ID indicates the activation of an AppX package, which could potentially be harmful if it originates from untrusted sources. Specifically, lookout for packages signed by the certificate with a subject name of \"CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\". This certificate has been identified as suspicious or malicious based on its usage in various attacks. It is crucial to be aware that there might be instances where this detection could trigger false positives, although the circumstances under which these might occur are unknown. The severity level for this detection has been set to medium, indicating a balanced caution between overlooking potential threats and overreacting to benign activities. This detection is aligned with techniques identified by MITRE ATT&CK relating to the abuse of application deployment systems for the purpose of executing untrusted code."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer.\nThis behavior is typically used during a kerberos or silver ticket attack.\nA successful execution will output the SPNs for the endpoint in question.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer, which is typically used during a Kerberos or silver ticket attack with the intent of outputting the SPNs for the endpoint in question, you should monitor Windows PowerShell script logs. Specifically, look for the execution of scripts that contain the text \"System.IdentityModel.Tokens.KerberosRequestorSecurityToken\" within the Script Block Logging feature of Windows. This feature must be enabled to catch such activities. The presence of this particular script text is a strong indicator of an attack aiming to exploit Kerberos for unauthorized access to resources by gathering the Service Principal Names. This detection is considered to be of a high level of importance due to its potential impact. Be aware that there might be cases (false positives) where the detection could be triggered without a malicious intent; however, such cases are unknown or very rare.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: System.IdentityModel.Tokens.KerberosRequestorSecurityToken\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: System.IdentityModel.Tokens.KerberosRequestorSecurityToken\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer.\nThis behavior is typically used during a kerberos or silver ticket attack.\nA successful execution will output the SPNs for the endpoint in question.\n",
      "answer": "In order to utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer, which is typically used during a Kerberos or silver ticket attack with the intent of outputting the SPNs for the endpoint in question, you should monitor Windows PowerShell script logs. Specifically, look for the execution of scripts that contain the text \"System.IdentityModel.Tokens.KerberosRequestorSecurityToken\" within the Script Block Logging feature of Windows. This feature must be enabled to catch such activities. The presence of this particular script text is a strong indicator of an attack aiming to exploit Kerberos for unauthorized access to resources by gathering the Service Principal Names. This detection is considered to be of a high level of importance due to its potential impact. Be aware that there might be cases (false positives) where the detection could be triggered without a malicious intent; however, such cases are unknown or very rare."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting different loaders as described in various threat reports on Lazarus group activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect different loaders as described in various threat reports on Lazarus group activity, you should: Monitor process creation logs on Windows systems for specific command line patterns that indicate potential malicious activity. Specifically, look for instances where `cmd.exe` is executed with a command line containing both '/c' and '-p 0x', which might suggest an attempt to execute commands or scripts in a particular manner often associated with malicious loaders. Additionally, be on the alert for processes that involve file paths pointing to `C:\\ProgramData\\` or `C:\\RECYCLER\\`, as these directories can be used by attackers to discreetly place and execute malicious payloads. Furthermore, pay close attention to the execution of `rundll32.exe` with command lines that include `C:\\ProgramData\\`, paired with file extensions such as `.bin`, `.tmp`, `.dat`, `.io`, `.ini`, and `.db`. These patterns can indicate the use of specific file types for loading malicious code, which is a tactic known in reports on activities by threat groups like Lazarus. The detection of these criteria in the command execution paths should raise alerts due to their critical nature and potential relation to sophisticated threat actor behaviors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd1:\n        CommandLine|contains|all:\n            - 'cmd.exe /c '\n            - ' -p 0x'\n    selection_cmd2:\n        CommandLine|contains:\n            - 'C:\\ProgramData\\'\n            - 'C:\\RECYCLER\\'\n    selection_rundll1:\n        CommandLine|contains|all:\n            - 'rundll32.exe '\n            - 'C:\\ProgramData\\'\n    selection_rundll2:\n        CommandLine|contains:\n            - '.bin,'\n            - '.tmp,'\n            - '.dat,'\n            - '.io,'\n            - '.ini,'\n            - '.db,'\n    condition: ( selection_cmd1 and selection_cmd2 ) or ( selection_rundll1 and selection_rundll2 )\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd1:\n        CommandLine|contains|all:\n            - 'cmd.exe /c '\n            - ' -p 0x'\n    selection_cmd2:\n        CommandLine|contains:\n            - 'C:\\ProgramData\\'\n            - 'C:\\RECYCLER\\'\n    selection_rundll1:\n        CommandLine|contains|all:\n            - 'rundll32.exe '\n            - 'C:\\ProgramData\\'\n    selection_rundll2:\n        CommandLine|contains:\n            - '.bin,'\n            - '.tmp,'\n            - '.dat,'\n            - '.io,'\n            - '.ini,'\n            - '.db,'\n    condition: ( selection_cmd1 and selection_cmd2 ) or ( selection_rundll1 and selection_rundll2 )\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "different loaders as described in various threat reports on Lazarus group activity",
      "answer": "In order to detect different loaders as described in various threat reports on Lazarus group activity, you should: Monitor process creation logs on Windows systems for specific command line patterns that indicate potential malicious activity. Specifically, look for instances where `cmd.exe` is executed with a command line containing both '/c' and '-p 0x', which might suggest an attempt to execute commands or scripts in a particular manner often associated with malicious loaders. Additionally, be on the alert for processes that involve file paths pointing to `C:\\ProgramData\\` or `C:\\RECYCLER\\`, as these directories can be used by attackers to discreetly place and execute malicious payloads. Furthermore, pay close attention to the execution of `rundll32.exe` with command lines that include `C:\\ProgramData\\`, paired with file extensions such as `.bin`, `.tmp`, `.dat`, `.io`, `.ini`, and `.db`. These patterns can indicate the use of specific file types for loading malicious code, which is a tactic known in reports on activities by threat groups like Lazarus. The detection of these criteria in the command execution paths should raise alerts due to their critical nature and potential relation to sophisticated threat actor behaviors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting commandline operations on shell history files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect commandline operations on shell history files, you should: focus on monitoring process creation events on macOS systems for commands that interact with shell history files. Specifically, look for instances where the command line involves activities on files such as '.bash_history', '.zsh_history', '.zhistory', '.history', '.sh_history', and 'fish_history'. It's important to be aware that not all instances detected might indicate malicious activities; some may be legitimate administrative tasks or software operations aimed at cleaning history files. The sensitivity of this monitoring has been set to a medium level due to the potential for legitimate activities to trigger false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.bash_history'\n            - '.zsh_history'\n            - '.zhistory'\n            - '.history'\n            - '.sh_history'\n            - 'fish_history'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\n    - Legitimate software, cleaning hist file\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.bash_history'\n            - '.zsh_history'\n            - '.zhistory'\n            - '.history'\n            - '.sh_history'\n            - 'fish_history'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\n    - Legitimate software, cleaning hist file\nlevel: medium\n",
      "question": "commandline operations on shell history files",
      "answer": "In order to detect commandline operations on shell history files, you should: focus on monitoring process creation events on macOS systems for commands that interact with shell history files. Specifically, look for instances where the command line involves activities on files such as '.bash_history', '.zsh_history', '.zhistory', '.history', '.sh_history', and 'fish_history'. It's important to be aware that not all instances detected might indicate malicious activities; some may be legitimate administrative tasks or software operations aimed at cleaning history files. The sensitivity of this monitoring has been set to a medium level due to the potential for legitimate activities to trigger false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process command line that uses base64 encoded input for execution with a shell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious process command line that uses base64 encoded input for execution with a shell, you should: focus on monitoring process creation events on Linux systems for commands that contain 'base64 ' in their command line. Additionally, watch for commands that pipe input into shell interpreters like bash or sh, specifically those that include '| bash ', '| sh ', '|bash ', and '|sh ' in their command line, as well as those that end with ' |sh', '| bash', '| sh', or '|bash'. It's important to consider all these patterns together to effectively identify this activity. Be mindful that legitimate administration activities may sometimes use similar techniques, so these should be treated as potential false positives. The risk level associated with these detections is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_base64:\n        CommandLine|contains: 'base64 '\n    selection_exec:\n        - CommandLine|contains:\n            - '| bash '\n            - '| sh '\n            - '|bash '\n            - '|sh '\n        - CommandLine|endswith:\n            - ' |sh'\n            - '| bash'\n            - '| sh'\n            - '|bash'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_base64:\n        CommandLine|contains: 'base64 '\n    selection_exec:\n        - CommandLine|contains:\n            - '| bash '\n            - '| sh '\n            - '|bash '\n            - '|sh '\n        - CommandLine|endswith:\n            - ' |sh'\n            - '| bash'\n            - '| sh'\n            - '|bash'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "suspicious process command line that uses base64 encoded input for execution with a shell",
      "answer": "In order to detect suspicious process command line that uses base64 encoded input for execution with a shell, you should: focus on monitoring process creation events on Linux systems for commands that contain 'base64 ' in their command line. Additionally, watch for commands that pipe input into shell interpreters like bash or sh, specifically those that include '| bash ', '| sh ', '|bash ', and '|sh ' in their command line, as well as those that end with ' |sh', '| bash', '| sh', or '|bash'. It's important to consider all these patterns together to effectively identify this activity. Be mindful that legitimate administration activities may sometimes use similar techniques, so these should be treated as potential false positives. The risk level associated with these detections is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting A General detection for files being created in the Windows startup directory. This could be an indicator of persistence..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a general indication of persistence through files being created in the Windows startup directory, you should monitor for file events within Windows environments, specifically looking for any instance where files are being created or modified in the '\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp' directory. This activity can signify an attempt by malicious software or actors to gain persistence on a system by ensuring their code is executed every time the system boots up. However, it's essential to exclude and not alert on events where the file modifications are made by the Windows Update Client ('C:\\Windows\\System32\\wuauclt.exe') or are part of a Windows upgrade process (files starting with 'C:\\$WINDOWS.~BT\\NewOS\\'). Be mindful that legitimate applications might occasionally write shortcuts to the startup folder, which can cause false positives; such occurrences necessitate manual inspection to confirm their legitimacy. This strategy is aimed at maintaining a balanced level of vigilance, acknowledging that while the creation of files in the startup directory is indeed suspicious, there can be benign explanations that merit a careful approach to avoid misinterpretation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp'\n    filter_update:\n        - Image: 'C:\\Windows\\System32\\wuauclt.exe'\n        - TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\NewOS\\'\n    condition: selection and not filter_update\nfalsepositives:\n    - FP could be caused by legitimate application writing shortcuts for example. This folder should always be inspected to make sure that all the files in there are legitimate\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp'\n    filter_update:\n        - Image: 'C:\\Windows\\System32\\wuauclt.exe'\n        - TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\NewOS\\'\n    condition: selection and not filter_update\nfalsepositives:\n    - FP could be caused by legitimate application writing shortcuts for example. This folder should always be inspected to make sure that all the files in there are legitimate\nlevel: medium\n",
      "question": "A General detection for files being created in the Windows startup directory. This could be an indicator of persistence.",
      "answer": "In order to detect a general indication of persistence through files being created in the Windows startup directory, you should monitor for file events within Windows environments, specifically looking for any instance where files are being created or modified in the '\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp' directory. This activity can signify an attempt by malicious software or actors to gain persistence on a system by ensuring their code is executed every time the system boots up. However, it's essential to exclude and not alert on events where the file modifications are made by the Windows Update Client ('C:\\Windows\\System32\\wuauclt.exe') or are part of a Windows upgrade process (files starting with 'C:\\$WINDOWS.~BT\\NewOS\\'). Be mindful that legitimate applications might occasionally write shortcuts to the startup folder, which can cause false positives; such occurrences necessitate manual inspection to confirm their legitimacy. This strategy is aimed at maintaining a balanced level of vigilance, acknowledging that while the creation of files in the startup directory is indeed suspicious, there can be benign explanations that merit a careful approach to avoid misinterpretation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect when users in your Azure AD tenant are authenticating to other Azure AD Tenants..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when users in your Azure AD tenant are authenticiating to other Azure AD Tenants, you should: focus on monitoring Azure Sign-In logs. Specifically, pay attention to successful sign-in attempts (`Status: 'Success'`) where the `HomeTenantId` field is populated with the designated tenant's ID. It is critical to filter out activity where the `ResourceTenantId` matches the `HomeTenantID`, as this indicates legitimate internal activity. The primary aim is to detect scenarios where the `ResourceTenantId` does not match the `HomeTenantID`, which could imply that a user from your Azure AD tenant is gaining access to resources from another AD tenant potentially without authorization. It's equally important to consider legitimate activities that could produce similar patterns, such as sign-ins approved by System Administrators, which might not represent a security threat. This monitoring is tagged with medium severity and links to tactics and techniques including Credential Access, but doesn't explicitly restrict its scope to any specific techniques within the MITRE ATT&CK framework.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n        HomeTenantId: 'HomeTenantID'\n    filter:\n        ResourceTenantId|contains: 'HomeTenantID'\n    condition: selection and not filter\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n        HomeTenantId: 'HomeTenantID'\n    filter:\n        ResourceTenantId|contains: 'HomeTenantID'\n    condition: selection and not filter\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
      "question": "Detect when users in your Azure AD tenant are authenticating to other Azure AD Tenants.",
      "answer": "In order to detect when users in your Azure AD tenant are authenticiating to other Azure AD Tenants, you should: focus on monitoring Azure Sign-In logs. Specifically, pay attention to successful sign-in attempts (`Status: 'Success'`) where the `HomeTenantId` field is populated with the designated tenant's ID. It is critical to filter out activity where the `ResourceTenantId` matches the `HomeTenantID`, as this indicates legitimate internal activity. The primary aim is to detect scenarios where the `ResourceTenantId` does not match the `HomeTenantID`, which could imply that a user from your Azure AD tenant is gaining access to resources from another AD tenant potentially without authorization. It's equally important to consider legitimate activities that could produce similar patterns, such as sign-ins approved by System Administrators, which might not represent a security threat. This monitoring is tagged with medium severity and links to tactics and techniques including Credential Access, but doesn't explicitly restrict its scope to any specific techniques within the MITRE ATT&CK framework."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting When IIS uses an old .Net Framework it's possible to enumerate folders with the symbol \"~\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect if an attacker is attempting to enumerate folders on an Internet Information Services (IIS) web server using an outdated .Net Framework, identifiable by the usage of the \"~\" symbol, you should focus on monitoring web server logs for specific request patterns. These patterns include requests that contain the \"~1\" in the query part of the Uniform Resource Identifier (URI) and those where the URI query ends with 'a.aspx'. It's important to look for requests made using either the 'GET' or 'OPTIONS' methods. Additionally, only responses with status codes indicating success such as 200 (OK) or 301 (Moved Permanently) should be considered indicative of potential folder enumeration activity. This detection is crucial because it helps in identifying attempts to exploit older .Net Framework vulnerabilities to gain unauthorized access or information about the folder structure of the web application hosted on IIS web servers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: '~1'\n        cs-uri-query|endswith: 'a.aspx'\n        cs-method:\n            - GET\n            - OPTIONS\n        #Success only\n        sc-status:\n            - 200\n            - 301\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: '~1'\n        cs-uri-query|endswith: 'a.aspx'\n        cs-method:\n            - GET\n            - OPTIONS\n        #Success only\n        sc-status:\n            - 200\n            - 301\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "When IIS uses an old .Net Framework it's possible to enumerate folders with the symbol \"~\"",
      "answer": "In order to detect if an attacker is attempting to enumerate folders on an Internet Information Services (IIS) web server using an outdated .Net Framework, identifiable by the usage of the \"~\" symbol, you should focus on monitoring web server logs for specific request patterns. These patterns include requests that contain the \"~1\" in the query part of the Uniform Resource Identifier (URI) and those where the URI query ends with 'a.aspx'. It's important to look for requests made using either the 'GET' or 'OPTIONS' methods. Additionally, only responses with status codes indicating success such as 200 (OK) or 301 (Moved Permanently) should be considered indicative of potential folder enumeration activity. This detection is crucial because it helps in identifying attempts to exploit older .Net Framework vulnerabilities to gain unauthorized access or information about the folder structure of the web application hosted on IIS web servers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling security tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling security tools, you should monitor Linux system logs, specifically focusing on syslog entries. Key indicators of this type of activity include log entries that contain phrases like \"stopping iptables,\" \"stopping ip6tables,\" \"stopping firewalld,\" \"stopping cbdaemon,\" and \"stopping falcon-sensor.\" These entries suggest actions that could disable vital security components on a Linux system, potentially making it more vulnerable to attacks. It is important to note, however, that there could be legitimate reasons for these actions, such as during routine administration tasks, so not every instance identified might indicate a security threat. The severity of these findings is considered medium, indicating that while this activity can be a serious security concern, context is key to understanding the risk it poses.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: syslog\ndetection:\n    keywords:\n        - 'stopping iptables'\n        - 'stopping ip6tables'\n        - 'stopping firewalld'\n        - 'stopping cbdaemon'\n        - 'stopping falcon-sensor'\n    condition: keywords\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: syslog\ndetection:\n    keywords:\n        - 'stopping iptables'\n        - 'stopping ip6tables'\n        - 'stopping firewalld'\n        - 'stopping cbdaemon'\n        - 'stopping falcon-sensor'\n    condition: keywords\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "disabling security tools",
      "answer": "In order to detect disabling security tools, you should monitor Linux system logs, specifically focusing on syslog entries. Key indicators of this type of activity include log entries that contain phrases like \"stopping iptables,\" \"stopping ip6tables,\" \"stopping firewalld,\" \"stopping cbdaemon,\" and \"stopping falcon-sensor.\" These entries suggest actions that could disable vital security components on a Linux system, potentially making it more vulnerable to attacks. It is important to note, however, that there could be legitimate reasons for these actions, such as during routine administration tasks, so not every instance identified might indicate a security threat. The severity of these findings is considered medium, indicating that while this activity can be a serious security concern, context is key to understanding the risk it poses."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of the registry to allow a driver or service to persist in Safe Mode..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the modification of the registry to allow a driver or service to persist in Safe Mode, you should focus on monitoring registry modification events within Windows systems, specifically those targeting the registry keys related to Safe Mode services or drivers. Pay attention to events where the EventType is 'Setvalue', indicating a change to a registry value. The primary registry keys of interest start with 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\' or 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\', and target objects ending with '\\(Default)', implying modifications at the default startup settings level for services in Safe Mode. Detecting modifications to these registry paths would involve looking for changes that contain the detail 'Service', indicating a service-related modification.\n\nHowever, not all modifications might be malicious. For example, changes involving 'C:\\WINDOWS\\system32\\msiexec.exe' modifying the registry keys 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\SAVService\\(Default)' or 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Network\\SAVService\\(Default)' could be considered legitimate, particularly from software like Sophos. It is critical to exclude these known good modifications from triggering alerts to avoid false positives.\n\nIn evaluating the logs for these modifications, a high level of scrutiny is advised due to the potentially severe impact that unauthorized changes can have, enabling malware or other unwanted programs to persist and operate even when the system is in Safe Mode, a state often used for troubleshooting and security scans. \n\nThis analysis assumes a high-severity level for detected events due to their potential use in bypassing security measures or maintaining persistence by adversaries. It is aimed at identifying tactics and techniques such as Persistence and Privilege Escalation, where attackers aim to maintain their foothold on a system across reboots, even into modes intended for system recovery.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|startswith:\n            - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\'\n            - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\'\n        TargetObject|endswith: '\\(Default)'\n        Details: Service\n    filter_sophos:\n        Image: 'C:\\WINDOWS\\system32\\msiexec.exe'\n        TargetObject:\n            - 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\SAVService\\(Default)'\n            - 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Network\\SAVService\\(Default)'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|startswith:\n            - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\'\n            - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\'\n        TargetObject|endswith: '\\(Default)'\n        Details: Service\n    filter_sophos:\n        Image: 'C:\\WINDOWS\\system32\\msiexec.exe'\n        TargetObject:\n            - 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\SAVService\\(Default)'\n            - 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Network\\SAVService\\(Default)'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "modification of the registry to allow a driver or service to persist in Safe Mode.",
      "answer": "In order to detect the modification of the registry to allow a driver or service to persist in Safe Mode, you should focus on monitoring registry modification events within Windows systems, specifically those targeting the registry keys related to Safe Mode services or drivers. Pay attention to events where the EventType is 'Setvalue', indicating a change to a registry value. The primary registry keys of interest start with 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\' or 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\', and target objects ending with '\\(Default)', implying modifications at the default startup settings level for services in Safe Mode. Detecting modifications to these registry paths would involve looking for changes that contain the detail 'Service', indicating a service-related modification.\n\nHowever, not all modifications might be malicious. For example, changes involving 'C:\\WINDOWS\\system32\\msiexec.exe' modifying the registry keys 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\SAVService\\(Default)' or 'HKLM\\System\\CurrentControlSet\\Control\\SafeBoot\\Network\\SAVService\\(Default)' could be considered legitimate, particularly from software like Sophos. It is critical to exclude these known good modifications from triggering alerts to avoid false positives.\n\nIn evaluating the logs for these modifications, a high level of scrutiny is advised due to the potentially severe impact that unauthorized changes can have, enabling malware or other unwanted programs to persist and operate even when the system is in Safe Mode, a state often used for troubleshooting and security scans. \n\nThis analysis assumes a high-severity level for detected events due to their potential use in bypassing security measures or maintaining persistence by adversaries. It is aimed at identifying tactics and techniques such as Persistence and Privilege Escalation, where attackers aim to maintain their foothold on a system across reboots, even into modes intended for system recovery."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the \"TracingDisabled\" key in order to disable ETW logging for services.exe (SCM).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the \"TracingDisabled\" key in order to disable ETW logging for services.exe (SCM), you should focus on monitoring Windows Registry setting modifications. Specifically, look for events where a SetValue operation occurs targeting the registry key path ending with 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Tracing\\SCM\\Regular\\TracingDisabled'. The detection is particularly interested in cases where this registry key's value is set to 'DWORD (0x00000001)', which intriguingly is its default state but its modification indicates an attempt to manipulate ETW logging behavior for the Service Control Manager (SCM). It's crucial to monitor such changes, despite the assigned low level of threat and acknowledging that some modifications might not signify malicious activity (hence, the potential for unknown false positives). This activity aligns with attack techniques focused on evasion or impeding event logging, aiming to reduce the visibility of the attacker's actions on the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Tracing\\SCM\\Regular\\TracingDisabled'\n        Details: 'DWORD (0x00000001)' # Funny (sad) enough, this value is by default 1.\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Tracing\\SCM\\Regular\\TracingDisabled'\n        Details: 'DWORD (0x00000001)' # Funny (sad) enough, this value is by default 1.\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "changes to the \"TracingDisabled\" key in order to disable ETW logging for services.exe (SCM)",
      "answer": "In order to detect changes to the \"TracingDisabled\" key in order to disable ETW logging for services.exe (SCM), you should focus on monitoring Windows Registry setting modifications. Specifically, look for events where a SetValue operation occurs targeting the registry key path ending with 'Software\\Microsoft\\Windows NT\\CurrentVersion\\Tracing\\SCM\\Regular\\TracingDisabled'. The detection is particularly interested in cases where this registry key's value is set to 'DWORD (0x00000001)', which intriguingly is its default state but its modification indicates an attempt to manipulate ETW logging behavior for the Service Control Manager (SCM). It's crucial to monitor such changes, despite the assigned low level of threat and acknowledging that some modifications might not signify malicious activity (hence, the potential for unknown false positives). This activity aligns with attack techniques focused on evasion or impeding event logging, aiming to reduce the visibility of the attacker's actions on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tamper attempts to sophos av functionality via registry key modification.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tamper attempts to Sophos AV functionality via registry key modification, you should: Focus on monitoring registry set actions within Windows environments. Specifically, look out for the event type `SetValue`, indicating a modification attempt on registry keys. Key targets for this detection are registry paths related to Sophos Endpoint Defense and SAVService tamper protection configurations, which include:\n\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled`\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled`\n- `\\Sophos\\SAVService\\TamperProtection\\Enabled`\n\nA critical signal of a tampering attempt is the modification of these registry keys' values to `DWORD (0x00000000)`, effectively disabling the Sophos Endpoint Defense tamper protection features. \n\nKeep in mind that there might be false positives, such as when the antivirus itself legitimately disables this feature. Thus, any modifications to these registry keys should be investigated to confirm whether they are legitimate changes or potential security threats. The severity level of this detection is high, underscoring the importance of such monitoring in maintaining the integrity of Sophos antivirus functionalities against tampering efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled'\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled'\n            - '\\Sophos\\SAVService\\TamperProtection\\Enabled'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Some FP may occur when the feature is disabled by the AV itself, you should always investigate if the action was legitimate\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled'\n            - '\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled'\n            - '\\Sophos\\SAVService\\TamperProtection\\Enabled'\n        Details: DWORD (0x00000000)\n    condition: selection\nfalsepositives:\n    - Some FP may occur when the feature is disabled by the AV itself, you should always investigate if the action was legitimate\nlevel: high\n",
      "question": "tamper attempts to sophos av functionality via registry key modification",
      "answer": "In order to detect tamper attempts to Sophos AV functionality via registry key modification, you should: Focus on monitoring registry set actions within Windows environments. Specifically, look out for the event type `SetValue`, indicating a modification attempt on registry keys. Key targets for this detection are registry paths related to Sophos Endpoint Defense and SAVService tamper protection configurations, which include:\n\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SAVEnabled`\n- `\\Sophos Endpoint Defense\\TamperProtection\\Config\\SEDEnabled`\n- `\\Sophos\\SAVService\\TamperProtection\\Enabled`\n\nA critical signal of a tampering attempt is the modification of these registry keys' values to `DWORD (0x00000000)`, effectively disabling the Sophos Endpoint Defense tamper protection features. \n\nKeep in mind that there might be false positives, such as when the antivirus itself legitimately disables this feature. Thus, any modifications to these registry keys should be investigated to confirm whether they are legitimate changes or potential security threats. The severity level of this detection is high, underscoring the importance of such monitoring in maintaining the integrity of Sophos antivirus functionalities against tampering efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting FlowCloud malware from threat group TA410..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect FlowCloud malware from threat group TA410, you should monitor the Windows Registry for interactions with very specific keys. These interactions involve looking for any activities targeting the registry keys: 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}', 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}', and 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'. In addition to these specific keys, attention should also be given to any registry operations involving keys that begin with 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'. This approach is crucial in the effort to intercept and identify actions that could be related to the FlowCloud malware's operational footprint within an infected system. Given the critical nature of this detection, vigilance is advised, although one should be aware of the possibility of encountering unknown false positives during monitoring.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        - TargetObject:\n            - 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}'\n            - 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}'\n            - 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'\n        - TargetObject|startswith: 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        - TargetObject:\n            - 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}'\n            - 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}'\n            - 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'\n        - TargetObject|startswith: 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "FlowCloud malware from threat group TA410.",
      "answer": "In order to detect FlowCloud malware from threat group TA410, you should monitor the Windows Registry for interactions with very specific keys. These interactions involve looking for any activities targeting the registry keys: 'HKLM\\HARDWARE\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}', 'HKLM\\HARDWARE\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}', and 'HKLM\\HARDWARE\\{2DB80286-1784-48b5-A751-B6ED1F490303}'. In addition to these specific keys, attention should also be given to any registry operations involving keys that begin with 'HKLM\\SYSTEM\\Setup\\PrintResponsor\\'. This approach is crucial in the effort to intercept and identify actions that could be related to the FlowCloud malware's operational footprint within an infected system. Given the critical nature of this detection, vigilance is advised, although one should be aware of the possibility of encountering unknown false positives during monitoring."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of nimgrab, a tool bundled with the Nim programming framework and used for downloading files..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of nimgrab, a tool bundled with the Nim programming framework and used for downloading files, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for processes that end with the file name '\\nimgrab.exe'. Additionally, verify if these processes match any of the following cryptographic hashes: MD5 hash value of 2DD44C3C29D667F5C0EF5F9D7C7FFB8B, SHA256 hash value of F266609E91985F0FE3E31C5E8FAEEEC4FFA5E0322D8B6F15FE69F4C5165B9559, or an IMPHASH (Import Hash) of C07FDDD21D123EA9B3A08EEF44AAAC45. These checks help in accurately identifying nimgrab processes. However, it is important to note that there might be false positives, particularly in systems of developers using Nim for legitimate purposes. This detection is considered high in severity due to the potential misuse of nimgrab for malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        Image|endswith: '\\nimgrab.exe'\n    selection_hashes:\n        Hashes|contains:\n            - MD5=2DD44C3C29D667F5C0EF5F9D7C7FFB8B\n            - SHA256=F266609E91985F0FE3E31C5E8FAEEEC4FFA5E0322D8B6F15FE69F4C5165B9559\n            - IMPHASH=C07FDDD21D123EA9B3A08EEF44AAAC45\n    selection_hash:\n        - md5: 2DD44C3C29D667F5C0EF5F9D7C7FFB8B\n        - sha256: F266609E91985F0FE3E31C5E8FAEEEC4FFA5E0322D8B6F15FE69F4C5165B9559\n        - Imphash: C07FDDD21D123EA9B3A08EEF44AAAC45\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of Nim on a developer systems\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        Image|endswith: '\\nimgrab.exe'\n    selection_hashes:\n        Hashes|contains:\n            - MD5=2DD44C3C29D667F5C0EF5F9D7C7FFB8B\n            - SHA256=F266609E91985F0FE3E31C5E8FAEEEC4FFA5E0322D8B6F15FE69F4C5165B9559\n            - IMPHASH=C07FDDD21D123EA9B3A08EEF44AAAC45\n    selection_hash:\n        - md5: 2DD44C3C29D667F5C0EF5F9D7C7FFB8B\n        - sha256: F266609E91985F0FE3E31C5E8FAEEEC4FFA5E0322D8B6F15FE69F4C5165B9559\n        - Imphash: C07FDDD21D123EA9B3A08EEF44AAAC45\n    condition: 1 of selection_*\nfalsepositives:\n    - Legitimate use of Nim on a developer systems\nlevel: high\n",
      "question": "usage of nimgrab, a tool bundled with the Nim programming framework and used for downloading files.",
      "answer": "In order to detect the usage of nimgrab, a tool bundled with the Nim programming framework and used for downloading files, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for processes that end with the file name '\\nimgrab.exe'. Additionally, verify if these processes match any of the following cryptographic hashes: MD5 hash value of 2DD44C3C29D667F5C0EF5F9D7C7FFB8B, SHA256 hash value of F266609E91985F0FE3E31C5E8FAEEEC4FFA5E0322D8B6F15FE69F4C5165B9559, or an IMPHASH (Import Hash) of C07FDDD21D123EA9B3A08EEF44AAAC45. These checks help in accurately identifying nimgrab processes. However, it is important to note that there might be false positives, particularly in systems of developers using Nim for legitimate purposes. This detection is considered high in severity due to the potential misuse of nimgrab for malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli_flag:\n        CommandLine|contains:\n            - 'save'\n            - 'export'\n            - '\u02e2ave'\n            - 'e\u02e3port'\n    selection_cli_hklm:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hk\u02eam'\n            - 'hkey_local_machine'\n            - 'hkey_\u02eaocal_machine'\n            - 'hkey_loca\u02ea_machine'\n            - 'hkey_\u02eaoca\u02ea_machine'\n    selection_cli_hive:\n        CommandLine|contains:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n            - '\\\u02e2ystem'\n            - '\\sy\u02e2tem'\n            - '\\\u02e2y\u02e2tem'\n            - '\\\u02e2am'\n            - '\\\u02e2ecurity'\n    condition: all of selection_*\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli_flag:\n        CommandLine|contains:\n            - 'save'\n            - 'export'\n            - '\u02e2ave'\n            - 'e\u02e3port'\n    selection_cli_hklm:\n        CommandLine|contains:\n            - 'hklm'\n            - 'hk\u02eam'\n            - 'hkey_local_machine'\n            - 'hkey_\u02eaocal_machine'\n            - 'hkey_loca\u02ea_machine'\n            - 'hkey_\u02eaoca\u02ea_machine'\n    selection_cli_hive:\n        CommandLine|contains:\n            - '\\system'\n            - '\\sam'\n            - '\\security'\n            - '\\\u02e2ystem'\n            - '\\sy\u02e2tem'\n            - '\\\u02e2y\u02e2tem'\n            - '\\\u02e2am'\n            - '\\\u02e2ecurity'\n    condition: all of selection_*\nfalsepositives:\n    - Dumping hives for legitimate purpouse i.e. backup or forensic investigation\nlevel: high\n",
      "question": "usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM and SECURITY",
      "answer": "In order to detect the usage of \"reg.exe\" in order to dump sensitive registry hives, which includes SAM, SYSTEM, and SECURITY, you should look for processes being created on Windows systems where the process image ends with '\\reg.exe' or the original file name is identified as 'reg.exe'. This focuses on detecting commands that involve saving or exporting information, specifically when these commands contain flags like 'save', 'export', or variations thereof that may attempt to evade detection by slightly altering the characters. Furthermore, attention is paid to commands targeting critical registry hive keys such as HKLM (HKEY_LOCAL_MACHINE) or any obfuscated variations of this term. The detection extends to specifics about which registry hives are being targeted for dumping, including SYSTEM, SAM, and SECURITY, along with any attempts to obfuscate these terms within the command line. It's also important to consider that there could be legitimate reasons for such activities, including backups or forensic investigations, which might be considered as false positives in such detection efforts. The detection level for these activities is set to high due to their potential impact on system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious script execution in temporary folders or folders accessible by environment variables.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious script execution in temporary folders or folders accessible by environment variables, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for the execution of `cscript.exe`, `mshta.exe`, or `wscript.exe` scripts, which are commonly utilized by attackers for executing malicious code through scripts. Be vigilant for command line flags that attempt to bypass execution policies (`-ep bypass`, ` -ExecutionPolicy bypass`) or run scripts in a hidden window (`-w hidden`), as well as attempts to execute JavaScript or VBScript (`/e:javascript`, `/e:Jscript`, `/e:vbscript`). Additionally, scrutinize any script execution occurring within certain directories that are commonly abused by threat actors, including temporary folders like `\\AppData\\Local\\Temp`, `\\Windows\\Temp`, or folders normally accessible through environment variables such as `:\\Perflogs\\`, `:\\Users\\Public\\`. Special attention should be given to scripts run from user directories in combination with specific subfolders like `\\Favorites\\`, `\\Favourites\\`, or `\\Contacts\\`, which could signify an attempt to leverage user profiles for malicious purposes. This vigilance aids in identifying tactics and techniques related to execution and persistence, among others, which are pivotal for safeguarding against possible threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_proc_image:\n        Image|endswith:\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\wscript.exe'\n    selection_proc_flags:\n        CommandLine|contains:\n            - ' -ep bypass '\n            - ' -ExecutionPolicy bypass '\n            - ' -w hidden '\n            - '/e:javascript '\n            - '/e:Jscript '\n            - '/e:vbscript '\n    selection_proc_original:\n        OriginalFileName:\n            - 'cscript.exe'\n            - 'mshta.exe'\n            - 'wscript.exe'\n    selection_folders_1:\n        CommandLine|contains:\n            - ':\\Perflogs\\'\n            - ':\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp'\n            - '\\AppData\\Roaming\\Temp'\n            - '\\Temporary Internet'\n            - '\\Windows\\Temp'\n    selection_folders_2:\n        - CommandLine|contains|all:\n            - ':\\Users\\'\n            - '\\Favorites\\'\n        - CommandLine|contains|all:\n            - ':\\Users\\'\n            - '\\Favourites\\'\n        - CommandLine|contains|all:\n            - ':\\Users\\'\n            - '\\Contacts\\'\n    condition: 1 of selection_proc_* and 1 of selection_folders_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_proc_image:\n        Image|endswith:\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\wscript.exe'\n    selection_proc_flags:\n        CommandLine|contains:\n            - ' -ep bypass '\n            - ' -ExecutionPolicy bypass '\n            - ' -w hidden '\n            - '/e:javascript '\n            - '/e:Jscript '\n            - '/e:vbscript '\n    selection_proc_original:\n        OriginalFileName:\n            - 'cscript.exe'\n            - 'mshta.exe'\n            - 'wscript.exe'\n    selection_folders_1:\n        CommandLine|contains:\n            - ':\\Perflogs\\'\n            - ':\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp'\n            - '\\AppData\\Roaming\\Temp'\n            - '\\Temporary Internet'\n            - '\\Windows\\Temp'\n    selection_folders_2:\n        - CommandLine|contains|all:\n            - ':\\Users\\'\n            - '\\Favorites\\'\n        - CommandLine|contains|all:\n            - ':\\Users\\'\n            - '\\Favourites\\'\n        - CommandLine|contains|all:\n            - ':\\Users\\'\n            - '\\Contacts\\'\n    condition: 1 of selection_proc_* and 1 of selection_folders_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious script execution in temporary folders or folders accessible by environment variables",
      "answer": "In order to detect a suspicious script execution in temporary folders or folders accessible by environment variables, you should focus on monitoring the creation of processes on Windows systems. Specifically, watch for the execution of `cscript.exe`, `mshta.exe`, or `wscript.exe` scripts, which are commonly utilized by attackers for executing malicious code through scripts. Be vigilant for command line flags that attempt to bypass execution policies (`-ep bypass`, ` -ExecutionPolicy bypass`) or run scripts in a hidden window (`-w hidden`), as well as attempts to execute JavaScript or VBScript (`/e:javascript`, `/e:Jscript`, `/e:vbscript`). Additionally, scrutinize any script execution occurring within certain directories that are commonly abused by threat actors, including temporary folders like `\\AppData\\Local\\Temp`, `\\Windows\\Temp`, or folders normally accessible through environment variables such as `:\\Perflogs\\`, `:\\Users\\Public\\`. Special attention should be given to scripts run from user directories in combination with specific subfolders like `\\Favorites\\`, `\\Favourites\\`, or `\\Contacts\\`, which could signify an attempt to leverage user profiles for malicious purposes. This vigilance aids in identifying tactics and techniques related to execution and persistence, among others, which are pivotal for safeguarding against possible threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious execution from ManageEngine as seen used by Mint Sandstorm.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious execution from ManageEngine as seen used by Mint Sandstorm, you should:\n\nFocus on the creation of processes within Windows operating systems, specifically monitoring the parent processes for instances of ManageEngine applications or the use of Java. You should be vigilant for child processes that involve PowerShell (either powershell.exe or powershell_ise.exe). Additionally, pay attention to PowerShell command lines that include specific keywords indicating potentially malicious activities, such as commands for dumping credentials, manipulating local group memberships, downloading files, executing web requests, handling encoded commands, and various other suspicious activities.\n\nAlso, monitor for the use of command-line tools targeting the Local Security Authority Subsystem Service (LSASS), including use cases that might involve dumping process memory or querying system information, commands initiating external network connections via tools like `wget` or `curl`, and the manipulation of user groups and system configurations through command-line interfaces. This includes adding users to local administrator groups, making unauthorized network configurations, disabling anti-spyware features, deleting shadow copies, and other actions that could undermine system integrity and security.\n\nPay extra attention to commands attempting to modify critical system settings through the Registry Editor, use of WMIC for process creation or deletion, and the utilization of utilities designed for backup management or shadow copy deletion, indicating an attempt to hamper system recovery.\n\nBe wary of false positive indicators and ensure that legitimate administrative activities, especially those involving ManageEngine sites or downloading Microsoft components, are not incorrectly flagged. The detection thresholds outlined are critical due to the potential impact and sophistication of the tactics involved.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent_path:\n        ParentImage|contains:\n            - 'manageengine'\n            - 'ServiceDesk'\n    selection_parent_image:\n        ParentImage|contains: '\\java'\n    selection_special_child_powershell_img:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n    selection_special_child_powershell_cli:\n        - CommandLine|contains:\n            - ' echo '\n            - '-dumpmode'\n            - '-ssh'\n            - '.dmp'\n            - 'add-MpPreference'\n            - 'adscredentials'\n            - 'bitsadmin'\n            - 'certutil'\n            - 'csvhost.exe'\n            - 'DownloadFile'\n            - 'DownloadString'\n            - 'dsquery'\n            - 'ekern.exe'\n            - 'FromBase64String'\n            - 'iex '\n            - 'iex('\n            - 'Invoke-Expression'\n            - 'Invoke-WebRequest'\n            - 'localgroup administrators'\n            - 'net group'\n            - 'net user'\n            - 'o365accountconfiguration'\n            - 'query session'\n            - 'samaccountname='\n            - 'set-MpPreference'\n            - 'svhost.exe'\n            - 'System.IO.Compression'\n            - 'System.IO.MemoryStream'\n            - 'usoprivate'\n            - 'usoshared'\n            - 'whoami'\n        - CommandLine|re: '[-/\u2013][Ee^]{1,2}[ncodema^]*\\s[A-Za-z0-9+/=]{15,}'\n    selection_special_child_lsass_1:\n        CommandLine|contains: 'lsass'\n    selection_special_child_lsass_2:\n        CommandLine|contains:\n            - 'procdump'\n            - 'tasklist'\n            - 'findstr'\n    selection_child_wget:\n        Image|endswith: '\\wget.exe'\n        CommandLine|contains: 'http'\n    selection_child_curl:\n        Image|endswith: '\\curl.exe'\n        CommandLine|contains: 'http'\n    selection_child_script:\n        CommandLine|contains:\n            - 'E:jscript'\n            - 'e:vbscript'\n    selection_child_localgroup:\n        CommandLine|contains|all:\n            - 'localgroup Administrators'\n            - '/add'\n    selection_child_net:\n        CommandLine|contains: 'net' # Covers net1\n        CommandLine|contains|all:\n            - 'user'\n            - '/add'\n    selection_child_reg:\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableAntiSpyware'\n            - '\\Microsoft\\Windows Defender'\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableRestrictedAdmin'\n            - 'CurrentControlSet\\Control\\Lsa'\n    selection_child_wmic_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'process call create'\n    selection_child_wmic_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'delete'\n            - 'shadowcopy'\n    selection_child_vssadmin:\n        CommandLine|contains|all:\n            - 'vssadmin'\n            - 'delete'\n            - 'shadows'\n    selection_child_wbadmin:\n        CommandLine|contains|all:\n            - 'wbadmin'\n            - 'delete'\n            - 'catalog'\n    filter_main:\n        CommandLine|contains|all:\n            - 'download.microsoft.com'\n            - 'manageengine.com'\n            - 'msiexec'\n    condition: all of selection_parent_* and (all of selection_special_child_powershell_* or all of selection_special_child_lsass_* or 1 of selection_child_*) and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent_path:\n        ParentImage|contains:\n            - 'manageengine'\n            - 'ServiceDesk'\n    selection_parent_image:\n        ParentImage|contains: '\\java'\n    selection_special_child_powershell_img:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n    selection_special_child_powershell_cli:\n        - CommandLine|contains:\n            - ' echo '\n            - '-dumpmode'\n            - '-ssh'\n            - '.dmp'\n            - 'add-MpPreference'\n            - 'adscredentials'\n            - 'bitsadmin'\n            - 'certutil'\n            - 'csvhost.exe'\n            - 'DownloadFile'\n            - 'DownloadString'\n            - 'dsquery'\n            - 'ekern.exe'\n            - 'FromBase64String'\n            - 'iex '\n            - 'iex('\n            - 'Invoke-Expression'\n            - 'Invoke-WebRequest'\n            - 'localgroup administrators'\n            - 'net group'\n            - 'net user'\n            - 'o365accountconfiguration'\n            - 'query session'\n            - 'samaccountname='\n            - 'set-MpPreference'\n            - 'svhost.exe'\n            - 'System.IO.Compression'\n            - 'System.IO.MemoryStream'\n            - 'usoprivate'\n            - 'usoshared'\n            - 'whoami'\n        - CommandLine|re: '[-/\u2013][Ee^]{1,2}[ncodema^]*\\s[A-Za-z0-9+/=]{15,}'\n    selection_special_child_lsass_1:\n        CommandLine|contains: 'lsass'\n    selection_special_child_lsass_2:\n        CommandLine|contains:\n            - 'procdump'\n            - 'tasklist'\n            - 'findstr'\n    selection_child_wget:\n        Image|endswith: '\\wget.exe'\n        CommandLine|contains: 'http'\n    selection_child_curl:\n        Image|endswith: '\\curl.exe'\n        CommandLine|contains: 'http'\n    selection_child_script:\n        CommandLine|contains:\n            - 'E:jscript'\n            - 'e:vbscript'\n    selection_child_localgroup:\n        CommandLine|contains|all:\n            - 'localgroup Administrators'\n            - '/add'\n    selection_child_net:\n        CommandLine|contains: 'net' # Covers net1\n        CommandLine|contains|all:\n            - 'user'\n            - '/add'\n    selection_child_reg:\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableAntiSpyware'\n            - '\\Microsoft\\Windows Defender'\n        - CommandLine|contains|all:\n            - 'reg add'\n            - 'DisableRestrictedAdmin'\n            - 'CurrentControlSet\\Control\\Lsa'\n    selection_child_wmic_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'process call create'\n    selection_child_wmic_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'delete'\n            - 'shadowcopy'\n    selection_child_vssadmin:\n        CommandLine|contains|all:\n            - 'vssadmin'\n            - 'delete'\n            - 'shadows'\n    selection_child_wbadmin:\n        CommandLine|contains|all:\n            - 'wbadmin'\n            - 'delete'\n            - 'catalog'\n    filter_main:\n        CommandLine|contains|all:\n            - 'download.microsoft.com'\n            - 'manageengine.com'\n            - 'msiexec'\n    condition: all of selection_parent_* and (all of selection_special_child_powershell_* or all of selection_special_child_lsass_* or 1 of selection_child_*) and not filter_main\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "suspicious execution from ManageEngine as seen used by Mint Sandstorm",
      "answer": "In order to detect suspicious execution from ManageEngine as seen used by Mint Sandstorm, you should:\n\nFocus on the creation of processes within Windows operating systems, specifically monitoring the parent processes for instances of ManageEngine applications or the use of Java. You should be vigilant for child processes that involve PowerShell (either powershell.exe or powershell_ise.exe). Additionally, pay attention to PowerShell command lines that include specific keywords indicating potentially malicious activities, such as commands for dumping credentials, manipulating local group memberships, downloading files, executing web requests, handling encoded commands, and various other suspicious activities.\n\nAlso, monitor for the use of command-line tools targeting the Local Security Authority Subsystem Service (LSASS), including use cases that might involve dumping process memory or querying system information, commands initiating external network connections via tools like `wget` or `curl`, and the manipulation of user groups and system configurations through command-line interfaces. This includes adding users to local administrator groups, making unauthorized network configurations, disabling anti-spyware features, deleting shadow copies, and other actions that could undermine system integrity and security.\n\nPay extra attention to commands attempting to modify critical system settings through the Registry Editor, use of WMIC for process creation or deletion, and the utilization of utilities designed for backup management or shadow copy deletion, indicating an attempt to hamper system recovery.\n\nBe wary of false positive indicators and ensure that legitimate administrative activities, especially those involving ManageEngine sites or downloading Microsoft components, are not incorrectly flagged. The detection thresholds outlined are critical due to the potential impact and sophistication of the tactics involved."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of autostart extensibility point (ASEP) in registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor Windows registry events for any alterations to specific registry keys known to be used for persistent access by malicious software or unauthorized activities. These registry entries include, but are not limited to, paths related to software autostart mechanisms, command processor configurations, active setup components, session manager settings, current version and NT current version specifics, office and internet explorer add-ons, class identifiers, scripting policies, WinSock parameters, system control settings, and more. By tracking modifications to these entries, it's possible to identify attempts at establishing persistence mechanisms, executing malware at system startup, or altering system configurations to benefit unauthorized or malicious processes. This monitoring should exclude known benign alterations that might trigger false positives, such as legitimate software installations or administrative modifications to autorun keys. By focusing on these areas, effective surveillance is established against tactics and techniques for persistence, specifically those categorized under Persistence and Registry Run Keys / Startup Folder strategies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\nlevel: medium\ndetection:\n    main_selection:\n        TargetObject|contains:\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows CE Services\\AutoStart'\n            - '\\Software\\Wow6432Node\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnDisconnect'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnConnect'\n            - '\\SYSTEM\\Setup\\CmdLine'\n            - '\\Software\\Microsoft\\Ctf\\LangBarAddin'\n            - '\\Software\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Classes\\Protocols\\Handler'\n            - '\\SOFTWARE\\Classes\\Protocols\\Filter'\n            - '\\SOFTWARE\\Classes\\Htmlfile\\Shell\\Open\\Command\\(Default)'\n            - '\\Environment\\UserInitMprLogonScript'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\\Scrnsave.exe'\n            - '\\Software\\Microsoft\\Internet Explorer\\UrlSearchHooks'\n            - '\\SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components'\n            - '\\Software\\Classes\\Clsid\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\Inprocserver32'\n            - '\\Control Panel\\Desktop\\Scrnsave.exe'\n    session_manager_base:\n        TargetObject|contains: '\\System\\CurrentControlSet\\Control\\Session Manager'\n    session_manager:\n        TargetObject|contains:\n            - '\\SetupExecute'\n            - '\\S0InitialCommand'\n            - '\\KnownDlls'\n            - '\\Execute'\n            - '\\BootExecute'\n            - '\\AppCertDlls'\n    current_version_base:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion'\n    current_version:\n        TargetObject|contains:\n            - '\\ShellServiceObjectDelayLoad'\n            - '\\Run'\n            - '\\Policies\\System\\Shell'\n            - '\\Policies\\Explorer\\Run'\n            - '\\Group Policy\\Scripts\\Startup'\n            - '\\Group Policy\\Scripts\\Shutdown'\n            - '\\Group Policy\\Scripts\\Logon'\n            - '\\Group Policy\\Scripts\\Logoff'\n            - '\\Explorer\\ShellServiceObjects'\n            - '\\Explorer\\ShellIconOverlayIdentifiers'\n            - '\\Explorer\\ShellExecuteHooks'\n            - '\\Explorer\\SharedTaskScheduler'\n            - '\\Explorer\\Browser Helper Objects'\n            - '\\Authentication\\PLAP Providers'\n            - '\\Authentication\\Credential Providers'\n            - '\\Authentication\\Credential Provider Filters'\n    nt_current_version_base:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion'\n    nt_current_version:\n        TargetObject|contains:\n            - '\\Winlogon\\VmApplet'\n            - '\\Winlogon\\Userinit'\n            - '\\Winlogon\\Taskman'\n            - '\\Winlogon\\Shell'\n            - '\\Winlogon\\GpExtensions'\n            - '\\Winlogon\\AppSetup'\n            - '\\Winlogon\\AlternateShells\\AvailableShells'\n            - '\\Windows\\IconServiceLib'\n            - '\\Windows\\Appinit_Dlls'\n            - '\\Image File Execution Options'\n            - '\\Font Drivers'\n            - '\\Drivers32'\n            - '\\Windows\\Run'\n            - '\\Windows\\Load'\n    wow_current_version_base:\n        TargetObject|contains: '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion'\n    wow_current_version:\n        TargetObject|contains:\n            - '\\ShellServiceObjectDelayLoad'\n            - '\\Run'\n            - '\\Explorer\\ShellServiceObjects'\n            - '\\Explorer\\ShellIconOverlayIdentifiers'\n            - '\\Explorer\\ShellExecuteHooks'\n            - '\\Explorer\\SharedTaskScheduler'\n            - '\\Explorer\\Browser Helper Objects'\n    wow_nt_current_version_base:\n        TargetObject|contains: '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion'\n    wow_nt_current_version:\n        TargetObject|contains:\n            - '\\Windows\\Appinit_Dlls'\n            - '\\Image File Execution Options'\n            - '\\Drivers32'\n    wow_office:\n        TargetObject|contains: '\\Software\\Wow6432Node\\Microsoft\\Office'\n    office:\n        TargetObject|contains: '\\Software\\Microsoft\\Office'\n    wow_office_details:\n        TargetObject|contains:\n            - '\\Word\\Addins'\n            - '\\PowerPoint\\Addins'\n            - '\\Outlook\\Addins'\n            - '\\Onenote\\Addins'\n            - '\\Excel\\Addins'\n            - '\\Access\\Addins'\n            - 'test\\Special\\Perf'\n    wow_ie:\n        TargetObject|contains: '\\Software\\Wow6432Node\\Microsoft\\Internet Explorer'\n    ie:\n        TargetObject|contains: '\\Software\\Microsoft\\Internet Explorer'\n    wow_ie_details:\n        TargetObject|contains:\n            - '\\Toolbar'\n            - '\\Extensions'\n            - '\\Explorer Bars'\n    wow_classes_base:\n        TargetObject|contains: '\\Software\\Wow6432Node\\Classes'\n    wow_classes:\n        TargetObject|contains:\n            - '\\Folder\\ShellEx\\ExtShellFolderViews'\n            - '\\Folder\\ShellEx\\DragDropHandlers'\n            - '\\Folder\\ShellEx\\ColumnHandlers'\n            - '\\Directory\\Shellex\\DragDropHandlers'\n            - '\\Directory\\Shellex\\CopyHookHandlers'\n            - '\\CLSID\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\Instance'\n            - '\\CLSID\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\Instance'\n            - '\\CLSID\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\Instance'\n            - '\\CLSID\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\Instance'\n            - '\\AllFileSystemObjects\\ShellEx\\DragDropHandlers'\n            - '\\ShellEx\\PropertySheetHandlers'\n            - '\\ShellEx\\ContextMenuHandlers'\n    classes_base:\n        TargetObject|contains: '\\Software\\Classes'\n    classes:\n        TargetObject|contains:\n            - '\\Folder\\ShellEx\\ExtShellFolderViews'\n            - '\\Folder\\ShellEx\\DragDropHandlers'\n            - '\\Folder\\Shellex\\ColumnHandlers'\n            - '\\Filter'\n            - '\\Exefile\\Shell\\Open\\Command\\(Default)'\n            - '\\Directory\\Shellex\\DragDropHandlers'\n            - '\\Directory\\Shellex\\CopyHookHandlers'\n            - '\\CLSID\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\Instance'\n            - '\\CLSID\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\Instance'\n            - '\\CLSID\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\Instance'\n            - '\\CLSID\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\Instance'\n            - '\\Classes\\AllFileSystemObjects\\ShellEx\\DragDropHandlers'\n            - '\\.exe'\n            - '\\.cmd'\n            - '\\ShellEx\\PropertySheetHandlers'\n            - '\\ShellEx\\ContextMenuHandlers'\n    scripts_base:\n        TargetObject|contains: '\\Software\\Policies\\Microsoft\\Windows\\System\\Scripts'\n    scripts:\n        TargetObject|contains:\n            - '\\Startup'\n            - '\\Shutdown'\n            - '\\Logon'\n            - '\\Logoff'\n    winsock_parameters_base:\n        TargetObject|contains: '\\System\\CurrentControlSet\\Services\\WinSock2\\Parameters'\n    winsock_parameters:\n        TargetObject|contains:\n            - '\\Protocol_Catalog9\\Catalog_Entries'\n            - '\\NameSpace_Catalog5\\Catalog_Entries'\n    system_control_base:\n        TargetObject|contains: '\\SYSTEM\\CurrentControlSet\\Control'\n    system_control:\n        TargetObject|contains:\n            - '\\Terminal Server\\WinStations\\RDP-Tcp\\InitialProgram'\n            - '\\Terminal Server\\Wds\\rdpwd\\StartupPrograms'\n            - '\\SecurityProviders\\SecurityProviders'\n            - '\\SafeBoot\\AlternateShell'\n            - '\\Print\\Providers'\n            - '\\Print\\Monitors'\n            - '\\NetworkProvider\\Order'\n            - '\\Lsa\\Notification Packages'\n            - '\\Lsa\\Authentication Packages'\n            - '\\BootVerificationProgram\\ImagePath'\n    filter:\n        - Details: '(Empty)'\n        - TargetObject|endswith: '\\NgcFirst\\ConsecutiveSwitchCount'\n        - Image: 'C:\\WINDOWS\\System32\\svchost.exe'\n    condition: ( main_selection or\n               session_manager_base and session_manager or\n               current_version_base and current_version or\n               nt_current_version_base and nt_current_version or\n               wow_current_version_base and wow_current_version or\n               wow_nt_current_version_base and wow_nt_current_version or\n               (wow_office or office) and wow_office_details or\n               (wow_ie or ie) and wow_ie_details or\n               wow_classes_base and wow_classes or\n               classes_base and classes or\n               scripts_base and scripts or\n               winsock_parameters_base and winsock_parameters or\n               system_control_base and system_control ) and not filter\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\ntags:\n    - attack.persistence\n    - attack.t1547.001",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\nlevel: medium\ndetection:\n    main_selection:\n        TargetObject|contains:\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows CE Services\\AutoStart'\n            - '\\Software\\Wow6432Node\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Wow6432Node\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnDisconnect'\n            - '\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnConnect'\n            - '\\SYSTEM\\Setup\\CmdLine'\n            - '\\Software\\Microsoft\\Ctf\\LangBarAddin'\n            - '\\Software\\Microsoft\\Command Processor\\Autorun'\n            - '\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n            - '\\SOFTWARE\\Classes\\Protocols\\Handler'\n            - '\\SOFTWARE\\Classes\\Protocols\\Filter'\n            - '\\SOFTWARE\\Classes\\Htmlfile\\Shell\\Open\\Command\\(Default)'\n            - '\\Environment\\UserInitMprLogonScript'\n            - '\\SOFTWARE\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\\Scrnsave.exe'\n            - '\\Software\\Microsoft\\Internet Explorer\\UrlSearchHooks'\n            - '\\SOFTWARE\\Microsoft\\Internet Explorer\\Desktop\\Components'\n            - '\\Software\\Classes\\Clsid\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\Inprocserver32'\n            - '\\Control Panel\\Desktop\\Scrnsave.exe'\n    session_manager_base:\n        TargetObject|contains: '\\System\\CurrentControlSet\\Control\\Session Manager'\n    session_manager:\n        TargetObject|contains:\n            - '\\SetupExecute'\n            - '\\S0InitialCommand'\n            - '\\KnownDlls'\n            - '\\Execute'\n            - '\\BootExecute'\n            - '\\AppCertDlls'\n    current_version_base:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion'\n    current_version:\n        TargetObject|contains:\n            - '\\ShellServiceObjectDelayLoad'\n            - '\\Run'\n            - '\\Policies\\System\\Shell'\n            - '\\Policies\\Explorer\\Run'\n            - '\\Group Policy\\Scripts\\Startup'\n            - '\\Group Policy\\Scripts\\Shutdown'\n            - '\\Group Policy\\Scripts\\Logon'\n            - '\\Group Policy\\Scripts\\Logoff'\n            - '\\Explorer\\ShellServiceObjects'\n            - '\\Explorer\\ShellIconOverlayIdentifiers'\n            - '\\Explorer\\ShellExecuteHooks'\n            - '\\Explorer\\SharedTaskScheduler'\n            - '\\Explorer\\Browser Helper Objects'\n            - '\\Authentication\\PLAP Providers'\n            - '\\Authentication\\Credential Providers'\n            - '\\Authentication\\Credential Provider Filters'\n    nt_current_version_base:\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion'\n    nt_current_version:\n        TargetObject|contains:\n            - '\\Winlogon\\VmApplet'\n            - '\\Winlogon\\Userinit'\n            - '\\Winlogon\\Taskman'\n            - '\\Winlogon\\Shell'\n            - '\\Winlogon\\GpExtensions'\n            - '\\Winlogon\\AppSetup'\n            - '\\Winlogon\\AlternateShells\\AvailableShells'\n            - '\\Windows\\IconServiceLib'\n            - '\\Windows\\Appinit_Dlls'\n            - '\\Image File Execution Options'\n            - '\\Font Drivers'\n            - '\\Drivers32'\n            - '\\Windows\\Run'\n            - '\\Windows\\Load'\n    wow_current_version_base:\n        TargetObject|contains: '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion'\n    wow_current_version:\n        TargetObject|contains:\n            - '\\ShellServiceObjectDelayLoad'\n            - '\\Run'\n            - '\\Explorer\\ShellServiceObjects'\n            - '\\Explorer\\ShellIconOverlayIdentifiers'\n            - '\\Explorer\\ShellExecuteHooks'\n            - '\\Explorer\\SharedTaskScheduler'\n            - '\\Explorer\\Browser Helper Objects'\n    wow_nt_current_version_base:\n        TargetObject|contains: '\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion'\n    wow_nt_current_version:\n        TargetObject|contains:\n            - '\\Windows\\Appinit_Dlls'\n            - '\\Image File Execution Options'\n            - '\\Drivers32'\n    wow_office:\n        TargetObject|contains: '\\Software\\Wow6432Node\\Microsoft\\Office'\n    office:\n        TargetObject|contains: '\\Software\\Microsoft\\Office'\n    wow_office_details:\n        TargetObject|contains:\n            - '\\Word\\Addins'\n            - '\\PowerPoint\\Addins'\n            - '\\Outlook\\Addins'\n            - '\\Onenote\\Addins'\n            - '\\Excel\\Addins'\n            - '\\Access\\Addins'\n            - 'test\\Special\\Perf'\n    wow_ie:\n        TargetObject|contains: '\\Software\\Wow6432Node\\Microsoft\\Internet Explorer'\n    ie:\n        TargetObject|contains: '\\Software\\Microsoft\\Internet Explorer'\n    wow_ie_details:\n        TargetObject|contains:\n            - '\\Toolbar'\n            - '\\Extensions'\n            - '\\Explorer Bars'\n    wow_classes_base:\n        TargetObject|contains: '\\Software\\Wow6432Node\\Classes'\n    wow_classes:\n        TargetObject|contains:\n            - '\\Folder\\ShellEx\\ExtShellFolderViews'\n            - '\\Folder\\ShellEx\\DragDropHandlers'\n            - '\\Folder\\ShellEx\\ColumnHandlers'\n            - '\\Directory\\Shellex\\DragDropHandlers'\n            - '\\Directory\\Shellex\\CopyHookHandlers'\n            - '\\CLSID\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\Instance'\n            - '\\CLSID\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\Instance'\n            - '\\CLSID\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\Instance'\n            - '\\CLSID\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\Instance'\n            - '\\AllFileSystemObjects\\ShellEx\\DragDropHandlers'\n            - '\\ShellEx\\PropertySheetHandlers'\n            - '\\ShellEx\\ContextMenuHandlers'\n    classes_base:\n        TargetObject|contains: '\\Software\\Classes'\n    classes:\n        TargetObject|contains:\n            - '\\Folder\\ShellEx\\ExtShellFolderViews'\n            - '\\Folder\\ShellEx\\DragDropHandlers'\n            - '\\Folder\\Shellex\\ColumnHandlers'\n            - '\\Filter'\n            - '\\Exefile\\Shell\\Open\\Command\\(Default)'\n            - '\\Directory\\Shellex\\DragDropHandlers'\n            - '\\Directory\\Shellex\\CopyHookHandlers'\n            - '\\CLSID\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\Instance'\n            - '\\CLSID\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\Instance'\n            - '\\CLSID\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\Instance'\n            - '\\CLSID\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\Instance'\n            - '\\Classes\\AllFileSystemObjects\\ShellEx\\DragDropHandlers'\n            - '\\.exe'\n            - '\\.cmd'\n            - '\\ShellEx\\PropertySheetHandlers'\n            - '\\ShellEx\\ContextMenuHandlers'\n    scripts_base:\n        TargetObject|contains: '\\Software\\Policies\\Microsoft\\Windows\\System\\Scripts'\n    scripts:\n        TargetObject|contains:\n            - '\\Startup'\n            - '\\Shutdown'\n            - '\\Logon'\n            - '\\Logoff'\n    winsock_parameters_base:\n        TargetObject|contains: '\\System\\CurrentControlSet\\Services\\WinSock2\\Parameters'\n    winsock_parameters:\n        TargetObject|contains:\n            - '\\Protocol_Catalog9\\Catalog_Entries'\n            - '\\NameSpace_Catalog5\\Catalog_Entries'\n    system_control_base:\n        TargetObject|contains: '\\SYSTEM\\CurrentControlSet\\Control'\n    system_control:\n        TargetObject|contains:\n            - '\\Terminal Server\\WinStations\\RDP-Tcp\\InitialProgram'\n            - '\\Terminal Server\\Wds\\rdpwd\\StartupPrograms'\n            - '\\SecurityProviders\\SecurityProviders'\n            - '\\SafeBoot\\AlternateShell'\n            - '\\Print\\Providers'\n            - '\\Print\\Monitors'\n            - '\\NetworkProvider\\Order'\n            - '\\Lsa\\Notification Packages'\n            - '\\Lsa\\Authentication Packages'\n            - '\\BootVerificationProgram\\ImagePath'\n    filter:\n        - Details: '(Empty)'\n        - TargetObject|endswith: '\\NgcFirst\\ConsecutiveSwitchCount'\n        - Image: 'C:\\WINDOWS\\System32\\svchost.exe'\n    condition: ( main_selection or\n               session_manager_base and session_manager or\n               current_version_base and current_version or\n               nt_current_version_base and nt_current_version or\n               wow_current_version_base and wow_current_version or\n               wow_nt_current_version_base and wow_nt_current_version or\n               (wow_office or office) and wow_office_details or\n               (wow_ie or ie) and wow_ie_details or\n               wow_classes_base and wow_classes or\n               classes_base and classes or\n               scripts_base and scripts or\n               winsock_parameters_base and winsock_parameters or\n               system_control_base and system_control ) and not filter\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\ntags:\n    - attack.persistence\n    - attack.t1547.001",
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in the registry, you should monitor Windows registry events for any alterations to specific registry keys known to be used for persistent access by malicious software or unauthorized activities. These registry entries include, but are not limited to, paths related to software autostart mechanisms, command processor configurations, active setup components, session manager settings, current version and NT current version specifics, office and internet explorer add-ons, class identifiers, scripting policies, WinSock parameters, system control settings, and more. By tracking modifications to these entries, it's possible to identify attempts at establishing persistence mechanisms, executing malware at system startup, or altering system configurations to benefit unauthorized or malicious processes. This monitoring should exclude known benign alterations that might trigger false positives, such as legitimate software installations or administrative modifications to autorun keys. By focusing on these areas, effective surveillance is established against tactics and techniques for persistence, specifically those categorized under Persistence and Registry Run Keys / Startup Folder strategies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential C2 communication related to Devil Bait malware.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-uri|all:\n            - '/cross.php?op='\n            - '&dt='\n            - '&uid='\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        cs-uri|all:\n            - '/cross.php?op='\n            - '&dt='\n            - '&uid='\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential C2 communication related to Devil Bait malware",
      "answer": "In order to detect potential C2 communication related to Devil Bait malware, you should: focus on monitoring proxy logs for specific patterns of HTTP GET requests. Look for requests that include the following indicators in their URL: '/cross.php?op=', '&dt=', and '&uid='. These parameters within the requests are characteristic of communication patterns associated with Devil Bait malware, attempting to reach out to its command and control servers. This type of analysis is crucial for identifying potential breaches, as the detection of these specific request patterns, especially when they are found together in proxy logs, is a strong indicator of malicious activity linked to Devil Bait malware. False positives are considered unlikely due to the specificity of these patterns, indicating that such detection should be treated with a high level of concern."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the Process Monitor driver by processes other than Process Monitor (procmon) itself..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the Process Monitor driver by processes other than Process Monitor (procmon) itself, you should monitor file events within Windows environments for the creation of files that contain the name '\\procmon' or end with the '.sys' extension, signifying driver files. However, it's crucial to exclude files initiated by the legitimate Process Monitor executables, namely 'procmon.exe' and 'procmon64.exe'. This approach helps in identifying potentially malicious attempts to mimic or misuse Process Monitor's functionalities, possibly for nefarious activities such as process injection, privilege escalation, or system surveillance. Be aware that there might be scenarios where legitimate instances of renamed Process Monitor binaries could trigger alerts, leading to false positives. This monitoring is tagged with techniques related to evasion and persistence, considering the medium level of alert it raises.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\procmon'\n        TargetFilename|endswith: '.sys'\n    filter_main_process_explorer:\n        Image|endswith:\n            - '\\procmon.exe'\n            - '\\procmon64.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives may occur with legitimate renamed process monitor binaries\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\procmon'\n        TargetFilename|endswith: '.sys'\n    filter_main_process_explorer:\n        Image|endswith:\n            - '\\procmon.exe'\n            - '\\procmon64.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Some false positives may occur with legitimate renamed process monitor binaries\nlevel: medium\n",
      "question": "creation of the Process Monitor driver by processes other than Process Monitor (procmon) itself.",
      "answer": "In order to detect the creation of the Process Monitor driver by processes other than Process Monitor (procmon) itself, you should monitor file events within Windows environments for the creation of files that contain the name '\\procmon' or end with the '.sys' extension, signifying driver files. However, it's crucial to exclude files initiated by the legitimate Process Monitor executables, namely 'procmon.exe' and 'procmon64.exe'. This approach helps in identifying potentially malicious attempts to mimic or misuse Process Monitor's functionalities, possibly for nefarious activities such as process injection, privilege escalation, or system surveillance. Be aware that there might be scenarios where legitimate instances of renamed Process Monitor binaries could trigger alerts, leading to false positives. This monitoring is tagged with techniques related to evasion and persistence, considering the medium level of alert it raises."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the PUA/Recon tool Seatbelt via PE information of command line parameters.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the PUA/Recon tool Seatbelt via PE information of command line parameters, you should: focus on monitoring process creations within Windows environments. Specifically, be vigilant for the initiation of processes where the image name ends with '\\Seatbelt.exe', the original file name is identified as 'Seatbelt.exe', or the description directly mentions 'Seatbelt'. Furthermore, scrutinizing the command line parameters is crucial as Seatbelt can be executed with various commands that signify different reconnaissance activities, such as gathering information about DPAPI master keys, processes, files deemed interesting, certificate thumbprints, Chromium bookmarks and history, presence of Chromium, cloud credentials, credentials enumeration and Credential Guard, Firefox history, and process creation events among others.\n\nAdditionally, pay attention to the execution of Seatbelt with parameters indicating the use of grouped commands like '-group=misc', '-group=remote', '-group=chromium', '-group=slack', '-group=system', '-group=user', or '-group=all'. These grouped commands likely encapsulate multiple reconnaissance operations in one execution. Detection efforts should also encompass cases where Seatbelt is executed with an intent to output the gathered information to a file, identifiable by command line parameters containing ' -outputfile='.\n\nGiven the nature of these indicators, it's considered highly unlikely to encounter false positives, indicating that occurrences matching these descriptions should be treated with a high level of scrutiny. The methodology here focuses on the detection of malicious reconnaissance activities, commonly associated with tactics and techniques like discovery, Credential Access, and Collection within MITRE ATT&CK's framework for understanding adversary behaviors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Seatbelt.exe'\n        - OriginalFileName: 'Seatbelt.exe'\n        - Description: 'Seatbelt'\n        - CommandLine|contains:\n            # This just a list of the commands that will produce the least amount of FP in \"theory\"\n            # Comment out/in as needed in your environment\n            # To get the full list of commands see reference section\n            - ' DpapiMasterKeys'\n            - ' InterestingProcesses'\n            - ' InterestingFiles'\n            - ' CertificateThumbprints'\n            - ' ChromiumBookmarks'\n            - ' ChromiumHistory'\n            - ' ChromiumPresence'\n            - ' CloudCredentials'\n            - ' CredEnum'\n            - ' CredGuard'\n            - ' FirefoxHistory'\n            - ' ProcessCreationEvents'\n            #- ' RDPSessions'\n            #- ' PowerShellHistory'\n    selection_group_list:\n        CommandLine|contains:\n            - ' -group=misc'\n            - ' -group=remote'\n            - ' -group=chromium'\n            - ' -group=slack'\n            - ' -group=system'\n            - ' -group=user'\n            - ' -group=all'\n    selection_group_output:\n        CommandLine|contains: ' -outputfile='\n    condition: selection_img or all of selection_group_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\Seatbelt.exe'\n        - OriginalFileName: 'Seatbelt.exe'\n        - Description: 'Seatbelt'\n        - CommandLine|contains:\n            # This just a list of the commands that will produce the least amount of FP in \"theory\"\n            # Comment out/in as needed in your environment\n            # To get the full list of commands see reference section\n            - ' DpapiMasterKeys'\n            - ' InterestingProcesses'\n            - ' InterestingFiles'\n            - ' CertificateThumbprints'\n            - ' ChromiumBookmarks'\n            - ' ChromiumHistory'\n            - ' ChromiumPresence'\n            - ' CloudCredentials'\n            - ' CredEnum'\n            - ' CredGuard'\n            - ' FirefoxHistory'\n            - ' ProcessCreationEvents'\n            #- ' RDPSessions'\n            #- ' PowerShellHistory'\n    selection_group_list:\n        CommandLine|contains:\n            - ' -group=misc'\n            - ' -group=remote'\n            - ' -group=chromium'\n            - ' -group=slack'\n            - ' -group=system'\n            - ' -group=user'\n            - ' -group=all'\n    selection_group_output:\n        CommandLine|contains: ' -outputfile='\n    condition: selection_img or all of selection_group_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of the PUA/Recon tool Seatbelt via PE information of command line parameters",
      "answer": "In order to detect the execution of the PUA/Recon tool Seatbelt via PE information of command line parameters, you should: focus on monitoring process creations within Windows environments. Specifically, be vigilant for the initiation of processes where the image name ends with '\\Seatbelt.exe', the original file name is identified as 'Seatbelt.exe', or the description directly mentions 'Seatbelt'. Furthermore, scrutinizing the command line parameters is crucial as Seatbelt can be executed with various commands that signify different reconnaissance activities, such as gathering information about DPAPI master keys, processes, files deemed interesting, certificate thumbprints, Chromium bookmarks and history, presence of Chromium, cloud credentials, credentials enumeration and Credential Guard, Firefox history, and process creation events among others.\n\nAdditionally, pay attention to the execution of Seatbelt with parameters indicating the use of grouped commands like '-group=misc', '-group=remote', '-group=chromium', '-group=slack', '-group=system', '-group=user', or '-group=all'. These grouped commands likely encapsulate multiple reconnaissance operations in one execution. Detection efforts should also encompass cases where Seatbelt is executed with an intent to output the gathered information to a file, identifiable by command line parameters containing ' -outputfile='.\n\nGiven the nature of these indicators, it's considered highly unlikely to encounter false positives, indicating that occurrences matching these descriptions should be treated with a high level of scrutiny. The methodology here focuses on the detection of malicious reconnaissance activities, commonly associated with tactics and techniques like discovery, Credential Access, and Collection within MITRE ATT&CK's framework for understanding adversary behaviors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor. As seen used in the DAMP project..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor, as seen used in the DAMP project, you should: Focus on the monitoring of PowerShell scripts within Windows environments by ensuring that Script Block Logging is enabled. Specifically, watch for scripts that contain the terms 'win32_Trustee', 'win32_Ace', '.AccessMask', '.AceType', and '.SetSecurityDescriptor'. These terms are indicative of actions taken to manipulate security descriptors. Additionally, the presence of strings such as '\\Lsa\\JD', '\\Lsa\\Skew1', '\\Lsa\\Data', '\\Lsa\\GBG' within the scripts should also raise alerts. These are associated with attempts to interact with or manipulate Windows Security Accounts Manager (SAM) database files, potentially to create backdoors. Given the sophisticated nature of these techniques, this monitoring approach is set to a high alert level due to the rarity and potential impact of such actions, although it acknowledges the possibility of unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'win32_Trustee'\n            - 'win32_Ace'\n            - '.AccessMask'\n            - '.AceType'\n            - '.SetSecurityDescriptor'\n        ScriptBlockText|contains:\n            - '\\Lsa\\JD'\n            - '\\Lsa\\Skew1'\n            - '\\Lsa\\Data'\n            - '\\Lsa\\GBG'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'win32_Trustee'\n            - 'win32_Ace'\n            - '.AccessMask'\n            - '.AceType'\n            - '.SetSecurityDescriptor'\n        ScriptBlockText|contains:\n            - '\\Lsa\\JD'\n            - '\\Lsa\\Skew1'\n            - '\\Lsa\\Data'\n            - '\\Lsa\\GBG'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor. As seen used in the DAMP project.",
      "answer": "In order to detect usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor, as seen used in the DAMP project, you should: Focus on the monitoring of PowerShell scripts within Windows environments by ensuring that Script Block Logging is enabled. Specifically, watch for scripts that contain the terms 'win32_Trustee', 'win32_Ace', '.AccessMask', '.AceType', and '.SetSecurityDescriptor'. These terms are indicative of actions taken to manipulate security descriptors. Additionally, the presence of strings such as '\\Lsa\\JD', '\\Lsa\\Skew1', '\\Lsa\\Data', '\\Lsa\\GBG' within the scripts should also raise alerts. These are associated with attempts to interact with or manipulate Windows Security Accounts Manager (SAM) database files, potentially to create backdoors. Given the sophisticated nature of these techniques, this monitoring approach is set to a high alert level due to the rarity and potential impact of such actions, although it acknowledges the possibility of unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting See what files are being deleted from flash file systems.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to see what files are being deleted from flash file systems, you should: Monitor Cisco devices that use AAA services for certain activities that indicate files being erased from the flash storage. Specifically, focus on logging activities that involve keywords such as 'erase', 'delete', and 'format'. These actions typically appear in the command set (CmdSet) field within your logs. It's important to note that while detecting these keywords can indicate malicious behavior, there are legitimate scenarios where administrators might use these commands to clean up local flash space. Therefore, these detections are considered to have a medium level of confidence, and further investigation is recommended to differentiate between benign and malicious intentions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'erase'\n        - 'delete'\n        - 'format'\n    condition: keywords\nfields:\n    - CmdSet\nfalsepositives:\n    - Will be used sometimes by admins to clean up local flash space\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'erase'\n        - 'delete'\n        - 'format'\n    condition: keywords\nfields:\n    - CmdSet\nfalsepositives:\n    - Will be used sometimes by admins to clean up local flash space\nlevel: medium\n",
      "question": "See what files are being deleted from flash file systems",
      "answer": "In order to see what files are being deleted from flash file systems, you should: Monitor Cisco devices that use AAA services for certain activities that indicate files being erased from the flash storage. Specifically, focus on logging activities that involve keywords such as 'erase', 'delete', and 'format'. These actions typically appear in the command set (CmdSet) field within your logs. It's important to note that while detecting these keywords can indicate malicious behavior, there are legitimate scenarios where administrators might use these commands to clean up local flash space. Therefore, these detections are considered to have a medium level of confidence, and further investigation is recommended to differentiate between benign and malicious intentions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service ticket requests using RC4 encryption type.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect service ticket requests using RC4 encryption type, you should focus on Windows security event logs. Specifically, monitor for event ID 4769, which indicates a service ticket request. The detection hinges on identifying instances where the ticket options field equals '0x40810000' and the ticket encryption type field is set to '0x17', which corresponds to RC4 encryption. However, it's important to filter out and not alert on events where the service name ends with a '$' sign, as these are often legitimate service account activities, particularly on legacy systems or within Windows Domains with Domain Functional Level (DFL) 2003. Be aware of potential false positives, especially concerning service accounts used on legacy systems like NetApp, or in environments with older Windows Domain configurations. The severity level for this activity is considered medium, indicating it's important but not an immediate critical threat. This approach is aligned with understanding the usage of deprecated or less secure encryption types in service ticket requests, which can be indicative of an attacker's attempt to exploit weaker encryption for credential access or lateral movement within a network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4769\n        TicketOptions: '0x40810000'\n        TicketEncryptionType: '0x17'\n    reduction:\n        ServiceName|endswith: '$'\n    condition: selection and not reduction\nfalsepositives:\n    - Service accounts used on legacy systems (e.g. NetApp)\n    - Windows Domains with DFL 2003 and legacy systems\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4769\n        TicketOptions: '0x40810000'\n        TicketEncryptionType: '0x17'\n    reduction:\n        ServiceName|endswith: '$'\n    condition: selection and not reduction\nfalsepositives:\n    - Service accounts used on legacy systems (e.g. NetApp)\n    - Windows Domains with DFL 2003 and legacy systems\nlevel: medium\n",
      "question": "service ticket requests using RC4 encryption type",
      "answer": "In order to detect service ticket requests using RC4 encryption type, you should focus on Windows security event logs. Specifically, monitor for event ID 4769, which indicates a service ticket request. The detection hinges on identifying instances where the ticket options field equals '0x40810000' and the ticket encryption type field is set to '0x17', which corresponds to RC4 encryption. However, it's important to filter out and not alert on events where the service name ends with a '$' sign, as these are often legitimate service account activities, particularly on legacy systems or within Windows Domains with Domain Functional Level (DFL) 2003. Be aware of potential false positives, especially concerning service accounts used on legacy systems like NetApp, or in environments with older Windows Domain configurations. The severity level for this activity is considered medium, indicating it's important but not an immediate critical threat. This approach is aligned with understanding the usage of deprecated or less secure encryption types in service ticket requests, which can be indicative of an attacker's attempt to exploit weaker encryption for credential access or lateral movement within a network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect change of the user account associated with the FAX service to avoid the escalation problem..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect change of the user account associated with the FAX service to avoid the escalation problem, you should: Monitor the Windows registry for modifications to the `ObjectName` value within the `HKLM\\System\\CurrentControlSet\\Services\\Fax` key. Specifically, detection should trigger if any changes are made to this registry value except those that involve setting the `Details` to contain the `NetworkService`. This approach is aimed at identifying unauthorized attempts to modify the user account that the FAX service runs under, a tactic that could be used by attackers to escalate their privileges on the system. The log source pertinent to this detection mechanism is Windows registry modification events. Despite the potential for unknown false positives, the severity of this detection is considered high, highlighting the critical nature of preventing unauthorized privilege escalation through the manipulation of service account configurations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        TargetObject: HKLM\\System\\CurrentControlSet\\Services\\Fax\\ObjectName\n    filter:\n        Details|contains: NetworkService\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        TargetObject: HKLM\\System\\CurrentControlSet\\Services\\Fax\\ObjectName\n    filter:\n        Details|contains: NetworkService\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect change of the user account associated with the FAX service to avoid the escalation problem.",
      "answer": "In order to detect change of the user account associated with the FAX service to avoid the escalation problem, you should: Monitor the Windows registry for modifications to the `ObjectName` value within the `HKLM\\System\\CurrentControlSet\\Services\\Fax` key. Specifically, detection should trigger if any changes are made to this registry value except those that involve setting the `Details` to contain the `NetworkService`. This approach is aimed at identifying unauthorized attempts to modify the user account that the FAX service runs under, a tactic that could be used by attackers to escalate their privileges on the system. The log source pertinent to this detection mechanism is Windows registry modification events. Despite the potential for unknown false positives, the severity of this detection is considered high, highlighting the critical nature of preventing unauthorized privilege escalation through the manipulation of service account configurations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation of flaw in path normalization in Apache HTTP server 2.4.49.\nAn attacker could use a path traversal attack to map URLs to files outside the expected document root.\nIf files outside of the document root are not protected by \"require all denied\" these requests can succeed.\nAdditionally this flaw could leak the source of interpreted files like CGI scripts.\nThis issue is known to be exploited in the wild. This issue only affects Apache 2.4.49 and not earlier versions.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation of flaw in path normalization in Apache HTTP server 2.4.49, where an attacker could use a path traversal attack to map URLs to files outside the expected document root, leading to potential unauthorized access or information leakage if files outside of the document root are not protected by \"require all denied\", you should monitor web server logs for specific request patterns. Look for requests to the `/cgi-bin/` or `/icons/` directories that contain unusual character sequences like `.%2e/`, `.%%32%65/`, `.%%%25%33` which are indicative of attempts to bypass normal path restrictions and access files or directories that are located outside of the intended document root. Additionally, pay attention to the HTTP status codes in the logs. Specifically, look for the status codes `200` (OK) and `301` (Moved Permanently) associated with these requests, as these codes could indicate that the request was successfully processed by the server, possibly due to this vulnerability. This behavior is a sign that the Apache 2.4.49 server might be under attack, exploiting this specific path normalization flaw, and warrants further investigation. Ensure to keep an eye out for such activities in your webserver logs to safeguard against unauthorized access and information leakage. This issue is known for its exploitation in the wild and is specific to Apache version 2.4.49, without affecting earlier versions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains:\n            - '/cgi-bin/.%2e/'\n            - '/icons/.%2e/'\n            - '/cgi-bin/.%%32%65/'\n            - '/icons/.%%32%65/'\n            - '/cgi-bin/.%%%25%33'\n            - '/icons/.%%%25%33'\n        sc-status:\n            - 200\n            - 301\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains:\n            - '/cgi-bin/.%2e/'\n            - '/icons/.%2e/'\n            - '/cgi-bin/.%%32%65/'\n            - '/icons/.%%32%65/'\n            - '/cgi-bin/.%%%25%33'\n            - '/icons/.%%%25%33'\n        sc-status:\n            - 200\n            - 301\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "exploitation of flaw in path normalization in Apache HTTP server 2.4.49.\nAn attacker could use a path traversal attack to map URLs to files outside the expected document root.\nIf files outside of the document root are not protected by \"require all denied\" these requests can succeed.\nAdditionally this flaw could leak the source of interpreted files like CGI scripts.\nThis issue is known to be exploited in the wild. This issue only affects Apache 2.4.49 and not earlier versions.\n",
      "answer": "In order to detect exploitation of flaw in path normalization in Apache HTTP server 2.4.49, where an attacker could use a path traversal attack to map URLs to files outside the expected document root, leading to potential unauthorized access or information leakage if files outside of the document root are not protected by \"require all denied\", you should monitor web server logs for specific request patterns. Look for requests to the `/cgi-bin/` or `/icons/` directories that contain unusual character sequences like `.%2e/`, `.%%32%65/`, `.%%%25%33` which are indicative of attempts to bypass normal path restrictions and access files or directories that are located outside of the intended document root. Additionally, pay attention to the HTTP status codes in the logs. Specifically, look for the status codes `200` (OK) and `301` (Moved Permanently) associated with these requests, as these codes could indicate that the request was successfully processed by the server, possibly due to this vulnerability. This behavior is a sign that the Apache 2.4.49 server might be under attack, exploiting this specific path normalization flaw, and warrants further investigation. Ensure to keep an eye out for such activities in your webserver logs to safeguard against unauthorized access and information leakage. This issue is known for its exploitation in the wild and is specific to Apache version 2.4.49, without affecting earlier versions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", which can be used to gather information about the target machine, you should monitor process creation events on Windows systems for any command line execution that includes 'gatherNetworkInfo.vbs'. It's crucial to exclude processes where the command line execution image ends with '\\cscript.exe' or '\\wscript.exe' to reduce false positives. This approach is designed to identify potential reconnaissance activity where adversaries attempt to gather valuable information about the network configuration and settings of the target machine. The associated tactics and techniques based on the MITRE ATT&CK framework for this detection include Discovery and Scripting. It is important to note that the reliability of this detection is high, but unknown false positives may occur, implying a need for further investigation into any alerts generated from this detection strategy.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'gatherNetworkInfo.vbs'\n    filter:\n        Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'gatherNetworkInfo.vbs'\n    filter:\n        Image|endswith:\n            - '\\cscript.exe'\n            - '\\wscript.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
      "answer": "In order to detect execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\", which can be used to gather information about the target machine, you should monitor process creation events on Windows systems for any command line execution that includes 'gatherNetworkInfo.vbs'. It's crucial to exclude processes where the command line execution image ends with '\\cscript.exe' or '\\wscript.exe' to reduce false positives. This approach is designed to identify potential reconnaissance activity where adversaries attempt to gather valuable information about the network configuration and settings of the target machine. The associated tactics and techniques based on the MITRE ATT&CK framework for this detection include Discovery and Scripting. It is important to note that the reliability of this detection is high, but unknown false positives may occur, implying a need for further investigation into any alerts generated from this detection strategy."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting recovery of a new public database instance from a snapshot. It may be a part of data exfiltration..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the recovery of a new public database instance from a snapshot. It may be a part of data exfiltration, you should: Monitor AWS CloudTrail logs for activities involving the recovery of database instances from snapshots where the database is set to be publicly accessible. Specifically, keep an eye out for events that come from the RDS (Relational Database Service) indicated by the event source `rds.amazonaws.com`. Look for the event name `RestoreDBInstanceFromDBSnapshot` which signifies the action of restoring a database instance from a snapshot. Importantly, ensure that the `responseElements.publiclyAccessible` attribute is set to 'true', indicating that the database instance is publicly accessible post-restoration. This detection is rated with a high-level importance due to the potential risk of exfiltrating data through such publicly accessible databases. Awareness of false positives is essential, although currently unknown, implying that monitoring and context are crucial when interpreting alerts based on this detection criterion. Identifying such activity could signify a breach or an inadvertent configuration that could expose sensitive data publicly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: rds.amazonaws.com\n        responseElements.publiclyAccessible: 'true'\n        eventName: RestoreDBInstanceFromDBSnapshot\n    condition: selection_source\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: rds.amazonaws.com\n        responseElements.publiclyAccessible: 'true'\n        eventName: RestoreDBInstanceFromDBSnapshot\n    condition: selection_source\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "recovery of a new public database instance from a snapshot. It may be a part of data exfiltration.",
      "answer": "In order to detect the recovery of a new public database instance from a snapshot. It may be a part of data exfiltration, you should: Monitor AWS CloudTrail logs for activities involving the recovery of database instances from snapshots where the database is set to be publicly accessible. Specifically, keep an eye out for events that come from the RDS (Relational Database Service) indicated by the event source `rds.amazonaws.com`. Look for the event name `RestoreDBInstanceFromDBSnapshot` which signifies the action of restoring a database instance from a snapshot. Importantly, ensure that the `responseElements.publiclyAccessible` attribute is set to 'true', indicating that the database instance is publicly accessible post-restoration. This detection is rated with a high-level importance due to the potential risk of exfiltrating data through such publicly accessible databases. Awareness of false positives is essential, although currently unknown, implying that monitoring and context are crucial when interpreting alerts based on this detection criterion. Identifying such activity could signify a breach or an inadvertent configuration that could expose sensitive data publicly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of system utilities to discover system network connections.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of system utilities to discover system network connections, you should: Monitor the creation of processes on MacOS systems, specifically looking for the execution of certain system utilities that are commonly used to investigate the system's network connections. These utilities include 'who', 'w', 'last', 'lsof', and 'netstat'. When any of these utilities are executed (noting that the focus is on the command being run rather than any accompanying parameters or context), it could indicate an attempt to discover network connections and gather information about the system's networking environment. This activity, while potentially indicative of reconnaissance or other preliminary stages of an attack, can also arise from legitimate system administration or troubleshooting tasks. Thus, it's important to consider the context in which these utilities are used to minimize false positives. The detection of such activity is principally aimed at providing informational insights, given the dual-use nature of these tools.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith:\n            - '/who'\n            - '/w'\n            - '/last'\n            - '/lsof'\n            - '/netstat'\n    condition: selection\nfalsepositives:\n    - Legitimate activities\nlevel: informational\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        Image|endswith:\n            - '/who'\n            - '/w'\n            - '/last'\n            - '/lsof'\n            - '/netstat'\n    condition: selection\nfalsepositives:\n    - Legitimate activities\nlevel: informational\n",
      "question": "usage of system utilities to discover system network connections",
      "answer": "In order to detect usage of system utilities to discover system network connections, you should: Monitor the creation of processes on MacOS systems, specifically looking for the execution of certain system utilities that are commonly used to investigate the system's network connections. These utilities include 'who', 'w', 'last', 'lsof', and 'netstat'. When any of these utilities are executed (noting that the focus is on the command being run rather than any accompanying parameters or context), it could indicate an attempt to discover network connections and gather information about the system's networking environment. This activity, while potentially indicative of reconnaissance or other preliminary stages of an attack, can also arise from legitimate system administration or troubleshooting tasks. Thus, it's important to consider the context in which these utilities are used to minimize false positives. The detection of such activity is principally aimed at providing informational insights, given the dual-use nature of these tools."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service creation persistence used by the Goofy Guineapig backdoor.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect service creation persistence used by the Goofy Guineapig backdoor, you should focus on monitoring Windows system service logs for specific events that indicate potential malicious activity. Look for logs from the Service Control Manager with an Event ID of 7045. This event ID indicates a service was installed on the system. Pay special attention to any service named 'GoogleUpdate'. However, the critical aspect to look out for in identifying this specific backdoor is the path specified in the service's installation. If the ImagePath contains all the following sequences: 'rundll32', 'FileProtocolHandler', and includes a path that seems to be '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', it suggests that the service being installed is not a legitimate Google Update service but is instead masquerading as one to gain persistence on the system. Given the specifics of the detection method, false positives are considered unlikely. The severity of this type of detection is marked as critical due to the potential impact of allowing backdoor access to persist on a compromised system through seemingly legitimate service creation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'GoogleUpdate'\n        ImagePath|contains|all:\n            - 'rundll32'\n            - 'FileProtocolHandler'\n            - '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: 'GoogleUpdate'\n        ImagePath|contains|all:\n            - 'rundll32'\n            - 'FileProtocolHandler'\n            - '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "service creation persistence used by the Goofy Guineapig backdoor",
      "answer": "In order to detect service creation persistence used by the Goofy Guineapig backdoor, you should focus on monitoring Windows system service logs for specific events that indicate potential malicious activity. Look for logs from the Service Control Manager with an Event ID of 7045. This event ID indicates a service was installed on the system. Pay special attention to any service named 'GoogleUpdate'. However, the critical aspect to look out for in identifying this specific backdoor is the path specified in the service's installation. If the ImagePath contains all the following sequences: 'rundll32', 'FileProtocolHandler', and includes a path that seems to be '\\ProgramData\\GoogleUpdate\\GoogleUpdate.exe', it suggests that the service being installed is not a legitimate Google Update service but is instead masquerading as one to gain persistence on the system. Given the specifics of the detection method, false positives are considered unlikely. The severity of this type of detection is marked as critical due to the potential impact of allowing backdoor access to persist on a compromised system through seemingly legitimate service creation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker registers a new AMSI provider in order to achieve persistence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker registers a new AMSI provider in order to achieve persistence, you should: Focus on monitoring registry addition events on Windows systems, specifically looking into cases where keys are created under the registry paths '\\SOFTWARE\\Microsoft\\AMSI\\Providers\\' and '\\SOFTWARE\\WOW6432Node\\Microsoft\\AMSI\\Providers\\'. However, it's crucial to exclude events triggered by legitimate processes that start from 'C:\\Windows\\System32\\', 'C:\\Program Files\\', and 'C:\\Program Files (x86)\\' to reduce false positives. Bear in mind that legitimate security products might add their own AMSI providers, and these should be filtered out according to your specific environment to avoid misinterpreting benign activities as malicious. This detection strategy is essential for identifying efforts by attackers to gain persistence on a system by manipulating the Anti-Malware Scan Interface (AMSI) through the registry, and it is classified at a high level of importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_add\n    product: windows\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\AMSI\\Providers\\'\n            - '\\SOFTWARE\\WOW6432Node\\Microsoft\\AMSI\\Providers\\'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate security products adding their own AMSI providers. Filter these according to your environment\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_add\n    product: windows\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\AMSI\\Providers\\'\n            - '\\SOFTWARE\\WOW6432Node\\Microsoft\\AMSI\\Providers\\'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate security products adding their own AMSI providers. Filter these according to your environment\nlevel: high\n",
      "question": "when an attacker registers a new AMSI provider in order to achieve persistence",
      "answer": "In order to detect when an attacker registers a new AMSI provider in order to achieve persistence, you should: Focus on monitoring registry addition events on Windows systems, specifically looking into cases where keys are created under the registry paths '\\SOFTWARE\\Microsoft\\AMSI\\Providers\\' and '\\SOFTWARE\\WOW6432Node\\Microsoft\\AMSI\\Providers\\'. However, it's crucial to exclude events triggered by legitimate processes that start from 'C:\\Windows\\System32\\', 'C:\\Program Files\\', and 'C:\\Program Files (x86)\\' to reduce false positives. Bear in mind that legitimate security products might add their own AMSI providers, and these should be filtered out according to your specific environment to avoid misinterpreting benign activities as malicious. This detection strategy is essential for identifying efforts by attackers to gain persistence on a system by manipulating the Anti-Malware Scan Interface (AMSI) through the registry, and it is classified at a high level of importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification addition to the 'TypedPaths' key in the user or admin registry from a non standard application. Which might indicate persistence attempt.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification addition to the 'TypedPaths' key in the user or admin registry from a non-standard application, which might indicate a persistence attempt, you should: Monitor your Windows environment specifically for registry settings modifications. Focus on the registry set category, where the involved product is Windows. Keep an eye out for events where the type of action is SetValue, particularly those that affect the registry path '\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TypedPaths\\'. It's crucial to exclude modifications made by standard system processes, notably any changes originating from 'C:\\Windows\\explorer.exe' and 'C:\\Windows\\SysWOW64\\explorer.exe', as these are considered typical and not suspicious. The detection strategy emphasizes that any SetValue EventType targeting the specified registry path not originating from the listed system processes should be scrutinized. False positives are considered unlikely, indicating a high level of confidence in this detection method's specificity towards identifying genuine attempts at establishing persistence through registry manipulation. This approach is underpinned by a high severity level, denoting the critical nature of such detection in protecting against persistence mechanisms commonly used by adversaries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TypedPaths\\'\n    filter:\n        Image:\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\Windows\\SysWOW64\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TypedPaths\\'\n    filter:\n        Image:\n            - 'C:\\Windows\\explorer.exe'\n            - 'C:\\Windows\\SysWOW64\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "modification addition to the 'TypedPaths' key in the user or admin registry from a non standard application. Which might indicate persistence attempt",
      "answer": "In order to detect modification addition to the 'TypedPaths' key in the user or admin registry from a non-standard application, which might indicate a persistence attempt, you should: Monitor your Windows environment specifically for registry settings modifications. Focus on the registry set category, where the involved product is Windows. Keep an eye out for events where the type of action is SetValue, particularly those that affect the registry path '\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TypedPaths\\'. It's crucial to exclude modifications made by standard system processes, notably any changes originating from 'C:\\Windows\\explorer.exe' and 'C:\\Windows\\SysWOW64\\explorer.exe', as these are considered typical and not suspicious. The detection strategy emphasizes that any SetValue EventType targeting the specified registry path not originating from the listed system processes should be scrutinized. False positives are considered unlikely, indicating a high level of confidence in this detection method's specificity towards identifying genuine attempts at establishing persistence through registry manipulation. This approach is underpinned by a high severity level, denoting the critical nature of such detection in protecting against persistence mechanisms commonly used by adversaries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting A login from a public IP can indicate a misconfigured firewall or network boundary..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a login from a public IP which can indicate a misconfigured firewall or network boundary, you should monitor for unsuccessful login attempts (EventID 4625) in Windows security event logs. It's important to consider logins that do not originate from known private or reserved IP ranges, as these could signify attempts to access resources from potentially unauthorized or external locations. Specifically, exclude events where the source IP address is either not specified (indicated with a '-') or falls within typical private IPv4 address spaces like 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0 through 172.31.0.0/12, the localhost 127.0.0.0/8, or the automatic private IP addressing (APIPA) range 169.254.0.0/16. Similarly, for IPv6, exclude source addresses that are the loopback address (::1), link-local addresses (fe80::/10), or unique local addresses (fc00::/7). The focus should be on identifying logins from addresses not fitting these filters, as they may imply access attempts from outside the established network perimeters, potentially highlighting security misconfigurations or malicious activities. Though one must consider the possibility of legitimate logon attempts over the internet or the use of IPv4-to-IPv6 mapped addresses, which may lead to false positives, this approach provides a balanced monitoring level for potential security incidents related to public IP access.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4625\n    filter_ip_unknown:\n        IpAddress|contains: '-'\n    filter_ip_privatev4:\n        IpAddress|startswith:\n            - '10.' #10.0.0.0/8\n            - '192.168.' #192.168.0.0/16\n            - '172.16.' #172.16.0.0/12\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.' #127.0.0.0/8\n            - '169.254.' #169.254.0.0/16\n    filter_ip_privatev6:\n        - IpAddress: '::1' #loopback\n        - IpAddress|startswith:\n            - 'fe80::' #link-local\n            - 'fc00::' #unique local\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate logon attempts over the internet\n    - IPv4-to-IPv6 mapped IPs\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4625\n    filter_ip_unknown:\n        IpAddress|contains: '-'\n    filter_ip_privatev4:\n        IpAddress|startswith:\n            - '10.' #10.0.0.0/8\n            - '192.168.' #192.168.0.0/16\n            - '172.16.' #172.16.0.0/12\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '127.' #127.0.0.0/8\n            - '169.254.' #169.254.0.0/16\n    filter_ip_privatev6:\n        - IpAddress: '::1' #loopback\n        - IpAddress|startswith:\n            - 'fe80::' #link-local\n            - 'fc00::' #unique local\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate logon attempts over the internet\n    - IPv4-to-IPv6 mapped IPs\nlevel: medium\n",
      "question": "A login from a public IP can indicate a misconfigured firewall or network boundary.",
      "answer": "In order to detect a login from a public IP which can indicate a misconfigured firewall or network boundary, you should monitor for unsuccessful login attempts (EventID 4625) in Windows security event logs. It's important to consider logins that do not originate from known private or reserved IP ranges, as these could signify attempts to access resources from potentially unauthorized or external locations. Specifically, exclude events where the source IP address is either not specified (indicated with a '-') or falls within typical private IPv4 address spaces like 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0 through 172.31.0.0/12, the localhost 127.0.0.0/8, or the automatic private IP addressing (APIPA) range 169.254.0.0/16. Similarly, for IPv6, exclude source addresses that are the loopback address (::1), link-local addresses (fe80::/10), or unique local addresses (fc00::/7). The focus should be on identifying logins from addresses not fitting these filters, as they may imply access attempts from outside the established network perimeters, potentially highlighting security misconfigurations or malicious activities. Though one must consider the possibility of legitimate logon attempts over the internet or the use of IPv4-to-IPv6 mapped addresses, which may lead to false positives, this approach provides a balanced monitoring level for potential security incidents related to public IP access."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious shell spawned from Java host process (e.g. log4j exploitation).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious shell spawned from Java host process (e.g., log4j exploitation), you should monitor for the creation of specific processes in the Windows environment. This involves looking for situations where a process traditionally associated with Java, such as 'java.exe', acts as a parent process to a variety of other potentially suspicious executables. These child executables include common command-line shells and utilities like 'sh.exe', 'bash.exe', 'powershell.exe', and 'pwsh.exe', among others that can be misused for malicious activities, for instance, 'schtasks.exe', 'certutil.exe', 'whoami.exe', etc. \n\nMonitoring should catch uses of administrative tools ('wmic.exe'), scripting environments ('cscript.exe', 'wscript.exe'), and other utilities that can be co-opted into malicious behavior ('curl.exe', 'systeminfo.exe'). This detection strategy is especially high-priority, given the likelihood of false positives is acknowledged; indeed, while many of these process creations could stem from legitimate administrative or developmental work, the specific pattern of being spawned by a Java process raises the risk they are part of an exploit attempt, such as leveraging the log4j vulnerabilities.\n\nTherefore, attention to the parent-child process relationships and the specific executable names in the Windows process creation logs is crucial. Additionally, while scrutinizing these logs, it's important to consider normal use cases within the specific environment to minimize the impact of potential false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\scrcons.exe'\n            - '\\regsvr32.exe'\n            - '\\hh.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n            - '\\mftrace.exe'\n            - '\\AppVLP.exe'\n            - '\\curl.exe'\n            - '\\systeminfo.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\java.exe'\n        Image|endswith:\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\scrcons.exe'\n            - '\\regsvr32.exe'\n            - '\\hh.exe'\n            - '\\wmic.exe'        # https://app.any.run/tasks/c903e9c8-0350-440c-8688-3881b556b8e0/\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\forfiles.exe'\n            - '\\scriptrunner.exe'\n            - '\\mftrace.exe'\n            - '\\AppVLP.exe'\n            - '\\curl.exe'\n            - '\\systeminfo.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\reg.exe'\n            - '\\query.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate calls to system binaries\n    - Company specific internal usage\nlevel: high\n",
      "question": "suspicious shell spawned from Java host process (e.g. log4j exploitation)",
      "answer": "In order to detect suspicious shell spawned from Java host process (e.g., log4j exploitation), you should monitor for the creation of specific processes in the Windows environment. This involves looking for situations where a process traditionally associated with Java, such as 'java.exe', acts as a parent process to a variety of other potentially suspicious executables. These child executables include common command-line shells and utilities like 'sh.exe', 'bash.exe', 'powershell.exe', and 'pwsh.exe', among others that can be misused for malicious activities, for instance, 'schtasks.exe', 'certutil.exe', 'whoami.exe', etc. \n\nMonitoring should catch uses of administrative tools ('wmic.exe'), scripting environments ('cscript.exe', 'wscript.exe'), and other utilities that can be co-opted into malicious behavior ('curl.exe', 'systeminfo.exe'). This detection strategy is especially high-priority, given the likelihood of false positives is acknowledged; indeed, while many of these process creations could stem from legitimate administrative or developmental work, the specific pattern of being spawned by a Java process raises the risk they are part of an exploit attempt, such as leveraging the log4j vulnerabilities.\n\nTherefore, attention to the parent-child process relationships and the specific executable names in the Windows process creation logs is crucial. Additionally, while scrutinizing these logs, it's important to consider normal use cases within the specific environment to minimize the impact of potential false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB, you should monitor DNS query logs for requests to specific domains that have been identified as indicators of compromise. These domains include 'addatamarket.net', 'ans7tv.net', 'anstv.net', 'backuprabbit.com', 'businessvideonews.com', 'cloudsponcer.com', 'datamarketplace.net', 'growthtransport.com', 'mobilegamerstats.com', 'snoweeanalytics.com', 'tagclick-cdn.com', 'topographyupdates.com', 'unlimitedteacup.com', 'virtuallaughing.com', and 'web-trackers.com'. Any DNS queries to these domains should be considered suspicious and warrant further investigation, as they could signal an ongoing attack or compromise involving iOS devices. This monitoring is crucial for identifying potential security breaches early on, allowing for a timely response to mitigate any damage. Note that while this detection has a high importance level, there may be unknown false positives, and not all detections may signify malicious activity. However, given these domains' association with sophisticated attacks, any hits on these indicators should be taken seriously and investigated accordingly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: dns\ndetection:\n    selection:\n        query:\n            - 'addatamarket.net'\n            - 'ans7tv.net'\n            - 'anstv.net'\n            - 'backuprabbit.com'\n            - 'businessvideonews.com'\n            - 'cloudsponcer.com'\n            - 'datamarketplace.net'\n            - 'growthtransport.com'\n            - 'mobilegamerstats.com'\n            - 'snoweeanalytics.com'\n            - 'tagclick-cdn.com'\n            - 'topographyupdates.com'\n            - 'unlimitedteacup.com'\n            - 'virtuallaughing.com'\n            - 'web-trackers.com'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns\ndetection:\n    selection:\n        query:\n            - 'addatamarket.net'\n            - 'ans7tv.net'\n            - 'anstv.net'\n            - 'backuprabbit.com'\n            - 'businessvideonews.com'\n            - 'cloudsponcer.com'\n            - 'datamarketplace.net'\n            - 'growthtransport.com'\n            - 'mobilegamerstats.com'\n            - 'snoweeanalytics.com'\n            - 'tagclick-cdn.com'\n            - 'topographyupdates.com'\n            - 'unlimitedteacup.com'\n            - 'virtuallaughing.com'\n            - 'web-trackers.com'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB",
      "answer": "In order to detect potential beaconing activity to domains used in 0day attacks on iOS devices and revealed by Kaspersky and the FSB, you should monitor DNS query logs for requests to specific domains that have been identified as indicators of compromise. These domains include 'addatamarket.net', 'ans7tv.net', 'anstv.net', 'backuprabbit.com', 'businessvideonews.com', 'cloudsponcer.com', 'datamarketplace.net', 'growthtransport.com', 'mobilegamerstats.com', 'snoweeanalytics.com', 'tagclick-cdn.com', 'topographyupdates.com', 'unlimitedteacup.com', 'virtuallaughing.com', and 'web-trackers.com'. Any DNS queries to these domains should be considered suspicious and warrant further investigation, as they could signal an ongoing attack or compromise involving iOS devices. This monitoring is crucial for identifying potential security breaches early on, allowing for a timely response to mitigate any damage. Note that while this detection has a high importance level, there may be unknown false positives, and not all detections may signify malicious activity. However, given these domains' association with sophisticated attacks, any hits on these indicators should be taken seriously and investigated accordingly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting accounts that are created or deleted by non-approved users..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect accounts that are created or deleted by non-approved users, you should: Monitor the Azure audit logs to identify events where users are added or deleted, ensuring these actions are successful. Focus specifically on the `properties.message` field for occurrences of \"Add user\" or \"Delete user\" activities. Additionally, verify if the initiated action was performed by someone other than those listed in `%ApprovedUserUpn%`, indicating they're not recognized as legitimate administrators for these sensitive operations. This approach helps in filtering out authorized administrative activities, which could be considered as false positives such as legitimate user management actions by approved personnel. The importance of this process lies in its ability to flag potentially unauthorized or malicious attempts to modify user account lists, aligning with medium-level security concerns. The associated tags include tactics and techniques related to Initial Access and Persistence by managing accounts in a way that could facilitate unauthorized access or maintain persistent control over a compromised environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Add user\n            - Delete user\n        Status: Sucess\n    valid_admin:\n        Initiatied.By: '%ApprovedUserUpn%'\n    condition: selection and not valid_admin\nfalsepositives:\n    - Legit administrative action\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Add user\n            - Delete user\n        Status: Sucess\n    valid_admin:\n        Initiatied.By: '%ApprovedUserUpn%'\n    condition: selection and not valid_admin\nfalsepositives:\n    - Legit administrative action\nlevel: medium\n",
      "question": "accounts that are created or deleted by non-approved users.",
      "answer": "In order to detect accounts that are created or deleted by non-approved users, you should: Monitor the Azure audit logs to identify events where users are added or deleted, ensuring these actions are successful. Focus specifically on the `properties.message` field for occurrences of \"Add user\" or \"Delete user\" activities. Additionally, verify if the initiated action was performed by someone other than those listed in `%ApprovedUserUpn%`, indicating they're not recognized as legitimate administrators for these sensitive operations. This approach helps in filtering out authorized administrative activities, which could be considered as false positives such as legitimate user management actions by approved personnel. The importance of this process lies in its ability to flag potentially unauthorized or malicious attempts to modify user account lists, aligning with medium-level security concerns. The associated tags include tactics and techniques related to Initial Access and Persistence by managing accounts in a way that could facilitate unauthorized access or maintain persistent control over a compromised environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server and helps to bypass protection mechanisms based on the analysis of script blocks logs, you should: Monitor the process creation logs on Windows systems for instances where the 'sqlps.exe' utility is initiated. Specifically, you should look for scenarios where 'sqlps.exe' acts as a parent process or is launched directly, indicating potential use for executing PowerShell code in a manner that may evade script block logging. It is important to also apply a filter to exclude cases where 'sqlps.exe' is a child process of 'sqlagent.exe', as this is a recognized legitimate action. Be aware that direct PowerShell command execution via 'sqlps.exe' is unusual, so such events merit scrutiny, albeit with an understanding that false positives can occur under certain legitimate use cases. This approach helps in identifying tactics that may be employed to avoid detection through log bypass mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlps.exe'\n    selection_image:\n        - Image|endswith: '\\sqlps.exe'\n        - OriginalFileName: 'sqlps.exe'\n    filter_image:\n        ParentImage|endswith: '\\sqlagent.exe'\n    condition: selection_parent or (selection_image and not filter_image)\nfalsepositives:\n    - Direct PS command execution through SQLPS.exe is uncommon, childprocess sqlps.exe spawned by sqlagent.exe is a legitimate action.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\sqlps.exe'\n    selection_image:\n        - Image|endswith: '\\sqlps.exe'\n        - OriginalFileName: 'sqlps.exe'\n    filter_image:\n        ParentImage|endswith: '\\sqlagent.exe'\n    condition: selection_parent or (selection_image and not filter_image)\nfalsepositives:\n    - Direct PS command execution through SQLPS.exe is uncommon, childprocess sqlps.exe spawned by sqlagent.exe is a legitimate action.\nlevel: medium\n",
      "question": "execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
      "answer": "In order to detect execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server and helps to bypass protection mechanisms based on the analysis of script blocks logs, you should: Monitor the process creation logs on Windows systems for instances where the 'sqlps.exe' utility is initiated. Specifically, you should look for scenarios where 'sqlps.exe' acts as a parent process or is launched directly, indicating potential use for executing PowerShell code in a manner that may evade script block logging. It is important to also apply a filter to exclude cases where 'sqlps.exe' is a child process of 'sqlagent.exe', as this is a recognized legitimate action. Be aware that direct PowerShell command execution via 'sqlps.exe' is unusual, so such events merit scrutiny, albeit with an understanding that false positives can occur under certain legitimate use cases. This approach helps in identifying tactics that may be employed to avoid detection through log bypass mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect set DisallowRun to 1 to prevent user running specific computer program.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect set DisallowRun to 1 to prevent user running specific computer program, you should: Monitor the Windows registry for modifications where an event of type SetValue targets the specific registry key path ending with 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'. Specifically, detect changes where the Details of the modification suggest that the DisallowRun feature is being enabled, indicated by setting its value to 'DWORD (0x00000001)'. This action can potentially restrict users from running certain programs, which might be indicative of a system configuration change with potentially malicious intent or unauthorized control. It's important to note that false positives may exist as the exact intentions behind changing this setting can vary. The detection operates at a medium level of significance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect set DisallowRun to 1 to prevent user running specific computer program",
      "answer": "In order to detect set DisallowRun to 1 to prevent user running specific computer program, you should: Monitor the Windows registry for modifications where an event of type SetValue targets the specific registry key path ending with 'Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun'. Specifically, detect changes where the Details of the modification suggest that the DisallowRun feature is being enabled, indicated by setting its value to 'DWORD (0x00000001)'. This action can potentially restrict users from running certain programs, which might be indicative of a system configuration change with potentially malicious intent or unauthorized control. It's important to note that false positives may exist as the exact intentions behind changing this setting can vary. The detection operates at a medium level of significance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of an encoded/obfuscated version of an IP address (hex, octal...) via commandline.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of an encoded/obfuscated version of an IP address (hex, octal...) via commandline, you should monitor the creation of processes on Windows systems. Specifically, focus on the execution of `ping.exe` and `arp.exe` commands. Look for command lines that contain IP addresses in either hexadecimal format (indicated by the presence of ' 0x') or octal format (numbers consisting of 7 to 13 digits). It's important to watch for both of these indicators in the command lines to catch attempts to obfuscate IP addresses using encoding techniques. The level of concern for these observations is considered medium, although it's acknowledged that there could be instances where these patterns occur and are not related to malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\ping.exe'\n            - '\\arp.exe'\n    selection_ip:\n        - CommandLine|contains: ' 0x' # For hex format\n        - CommandLine|re: ' [0-9]{7,13}' # For octal format\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith:\n            - '\\ping.exe'\n            - '\\arp.exe'\n    selection_ip:\n        - CommandLine|contains: ' 0x' # For hex format\n        - CommandLine|re: ' [0-9]{7,13}' # For octal format\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of an encoded/obfuscated version of an IP address (hex, octal...) via commandline",
      "answer": "In order to detect usage of an encoded/obfuscated version of an IP address (hex, octal...) via commandline, you should monitor the creation of processes on Windows systems. Specifically, focus on the execution of `ping.exe` and `arp.exe` commands. Look for command lines that contain IP addresses in either hexadecimal format (indicated by the presence of ' 0x') or octal format (numbers consisting of 7 to 13 digits). It's important to watch for both of these indicators in the command lines to catch attempts to obfuscate IP addresses using encoding techniques. The level of concern for these observations is considered medium, although it's acknowledged that there could be instances where these patterns occur and are not related to malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential DLL sideloading of rcdll.dll.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential DLL sideloading of rcdll.dll, you should: Monitor for instances where the specific Dynamic Link Library (DLL) file named 'rcdll.dll' is loaded into the memory space of a process on Windows systems, particularly paying attention to the event of this DLL being loaded outside of the usual, legitimate paths. Typically, 'rcdll.dll' may be legitimately loaded from paths associated with Microsoft Visual Studio or the Windows Kits directories. Hence, any loading of 'rcdll.dll' from locations that do not start with 'C:\\Program Files (x86)\\Microsoft Visual Studio\\' or 'C:\\Program Files (x86)\\Windows Kits\\' should be flagged for further investigation. This detection mechanism is important because attackers might attempt to exploit legitimate processes by sideloading a malicious version of 'rcdll.dll', a technique that could bypass traditional security measures. The detection focuses on the image load category within the Windows environment, drawing attention to instances that diverge from the expected, safeguarded behavior. It's also noted that while this checking mechanism is in place, cases of unknown false positives are acknowledged, reinforcing the need for periodic review and validation of the detection logic to maintain a high level of security vigilance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\rcdll.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Windows Kits\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\rcdll.dll'\n    filter:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Windows Kits\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential DLL sideloading of rcdll.dll",
      "answer": "In order to detect potential DLL sideloading of rcdll.dll, you should: Monitor for instances where the specific Dynamic Link Library (DLL) file named 'rcdll.dll' is loaded into the memory space of a process on Windows systems, particularly paying attention to the event of this DLL being loaded outside of the usual, legitimate paths. Typically, 'rcdll.dll' may be legitimately loaded from paths associated with Microsoft Visual Studio or the Windows Kits directories. Hence, any loading of 'rcdll.dll' from locations that do not start with 'C:\\Program Files (x86)\\Microsoft Visual Studio\\' or 'C:\\Program Files (x86)\\Windows Kits\\' should be flagged for further investigation. This detection mechanism is important because attackers might attempt to exploit legitimate processes by sideloading a malicious version of 'rcdll.dll', a technique that could bypass traditional security measures. The detection focuses on the image load category within the Windows environment, drawing attention to instances that diverge from the expected, safeguarded behavior. It's also noted that while this checking mechanism is in place, cases of unknown false positives are acknowledged, reinforcing the need for periodic review and validation of the detection logic to maintain a high level of security vigilance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the AgentExecutor.exe binary, which can be abused as a LOLBIN to execute PowerShell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by the 6th positional argument, you should: focus on monitoring the creation of processes on Windows machines. Specifically, keep an eye out for instances where the AgentExecutor.exe file is initiated. This can typically be identified through the image name 'AgentExecutor.exe' or the original file name being exactly 'AgentExecutor.exe'. Additionally, it's crucial to monitor command lines associated with this process for specific flags including ' -powershell' or ' -remediationScript'. These flags indicate that PowerShell may be used, potentially with settings that circumvent execution policy restrictions. This behavior signals a potential security risk, especially if the PowerShell script is executed with a policy set to bypass, which is often a tactic used by malicious actors to execute scripts without triggering security measures. It's important to differentiate between legitimate and suspicious uses of this executable, particularly in environments where Intune management is used, to minimize false positives. Focus on the command lines used with AgentExecutor.exe to distinguish between regular administrative tasks and potentially harmful activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use via Intune management. You exclude script paths and names to reduce FP rate\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image: '\\AgentExecutor.exe'\n        - OriginalFileName: 'AgentExecutor.exe'\n    selection_cli:\n        # Example:\n        #   AgentExecutor.exe -powershell [scriptPath] [outputFilePath] [errorFilePath] [timeoutFilePath] [timeoutSeconds] [powershellPath] [enforceSignatureCheck] [runAs32BitOn64]\n        # Note:\n        #   - If [timeoutSeconds] is NULL then it defaults to 60000\n        #   - If [enforceSignatureCheck] is:\n        #       - \"NULL\" or \"1\" then a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy allsigned -file \"\n        #       - Else a PowerShell instance is spawned with the args: \"-NoProfile -executionPolicy bypass -file \"\n        #   - [powershellPath] is always concatendated to \"powershell.exe\"\n        CommandLine|contains:\n            - ' -powershell' # Also covers the \"-powershellDetection\" flag\n            - ' -remediationScript'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use via Intune management. You exclude script paths and names to reduce FP rate\nlevel: medium\n",
      "question": "execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th positional argument",
      "answer": "In order to detect execution of the AgentExecutor.exe binary, which can be abused as a LOLBIN to execute PowerShell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by the 6th positional argument, you should: focus on monitoring the creation of processes on Windows machines. Specifically, keep an eye out for instances where the AgentExecutor.exe file is initiated. This can typically be identified through the image name 'AgentExecutor.exe' or the original file name being exactly 'AgentExecutor.exe'. Additionally, it's crucial to monitor command lines associated with this process for specific flags including ' -powershell' or ' -remediationScript'. These flags indicate that PowerShell may be used, potentially with settings that circumvent execution policy restrictions. This behavior signals a potential security risk, especially if the PowerShell script is executed with a policy set to bypass, which is often a tactic used by malicious actors to execute scripts without triggering security measures. It's important to differentiate between legitimate and suspicious uses of this executable, particularly in environments where Intune management is used, to minimize false positives. Focus on the command lines used with AgentExecutor.exe to distinguish between regular administrative tasks and potentially harmful activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting presence of an LSASS dump file in the \"CrashDumps\" folder. This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering have been seen abusing the Windows Error Reporting to dump said process..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the presence of an LSASS dump file in the \"CrashDumps\" folder, which could be a sign of LSASS credential dumping, you should monitor Windows file events specifically in the category of file_event. Look for files in the 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\' path that contain 'lsass.exe.' in their names and end with '.dmp'. Such activities often indicate LSASS credential dumping practices, including techniques like LSASS Shtinkering that exploit Windows Error Reporting for malicious process dumping. Be aware that there could be rare instances where the operating system legitimately dumps the LSASS process due to a crash, which should be considered a potential false positive. Nonetheless, given the high-risk level associated with this detection, it is crucial to pay close attention to such occurrences as they commonly relate to tactics and techniques aiming to exploit credential access.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\'\n        TargetFilename|contains: 'lsass.exe.'\n        TargetFilename|endswith: '.dmp'\n    condition: selection\nfalsepositives:\n    - Rare legitimate dump of the process by the operating system due to a crash of lsass\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\'\n        TargetFilename|contains: 'lsass.exe.'\n        TargetFilename|endswith: '.dmp'\n    condition: selection\nfalsepositives:\n    - Rare legitimate dump of the process by the operating system due to a crash of lsass\nlevel: high\n",
      "question": "presence of an LSASS dump file in the \"CrashDumps\" folder. This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering have been seen abusing the Windows Error Reporting to dump said process.",
      "answer": "In order to detect the presence of an LSASS dump file in the \"CrashDumps\" folder, which could be a sign of LSASS credential dumping, you should monitor Windows file events specifically in the category of file_event. Look for files in the 'C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\' path that contain 'lsass.exe.' in their names and end with '.dmp'. Such activities often indicate LSASS credential dumping practices, including techniques like LSASS Shtinkering that exploit Windows Error Reporting for malicious process dumping. Be aware that there could be rare instances where the operating system legitimately dumps the LSASS process due to a crash, which should be considered a potential false positive. Nonetheless, given the high-risk level associated with this detection, it is crucial to pay close attention to such occurrences as they commonly relate to tactics and techniques aiming to exploit credential access."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process.\nThis way we are also able to catch cases in which the attacker has renamed the procdump executable.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process, enabling the detection of cases in which the attacker has renamed the procdump executable, you should: Focus on monitoring the creation of processes within Windows. Specifically, look for instances where the command line includes '-ma' or '/ma', which are parameters possibly used in dumping the lsass process memory, a common target for attackers seeking to extract credentials. Also, be on the lookout for command line instances containing ' ls', a shorthand indicating operations targeting the lsass process. The occurrence of these specific command line flags in process creation events suggests a high likelihood of an attack, aiming to misuse the SysInternals Procdump utility for malicious purposes. Given that legitimate use of these command line options for dumping the lsass process memory is highly unlikely, any detection of such activity should be treated with suspicion. However, be mindful of potential false positives, for instance, from another tool utilizing command line flags that appear similar to those used by ProcDump.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_flags:\n        CommandLine|contains:\n            - ' -ma '\n            - ' /ma '\n    selection_process:\n        CommandLine|contains: ' ls' # Short for lsass\n    condition: all of selection*\nfalsepositives:\n    - Unlikely, because no one should dump an lsass process memory\n    - Another tool that uses command line flags similar to ProcDump\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_flags:\n        CommandLine|contains:\n            - ' -ma '\n            - ' /ma '\n    selection_process:\n        CommandLine|contains: ' ls' # Short for lsass\n    condition: all of selection*\nfalsepositives:\n    - Unlikely, because no one should dump an lsass process memory\n    - Another tool that uses command line flags similar to ProcDump\nlevel: high\n",
      "question": "suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process.\nThis way we are also able to catch cases in which the attacker has renamed the procdump executable.\n",
      "answer": "In order to detect suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process, enabling the detection of cases in which the attacker has renamed the procdump executable, you should: Focus on monitoring the creation of processes within Windows. Specifically, look for instances where the command line includes '-ma' or '/ma', which are parameters possibly used in dumping the lsass process memory, a common target for attackers seeking to extract credentials. Also, be on the lookout for command line instances containing ' ls', a shorthand indicating operations targeting the lsass process. The occurrence of these specific command line flags in process creation events suggests a high likelihood of an attack, aiming to misuse the SysInternals Procdump utility for malicious purposes. Given that legitimate use of these command line options for dumping the lsass process memory is highly unlikely, any detection of such activity should be treated with suspicion. However, be mindful of potential false positives, for instance, from another tool utilizing command line flags that appear similar to those used by ProcDump."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Domain user and group enumeration via network reconnaissance.\nSeen in APT 29 and other common tactics and actors. set of RPC (remote procedure calls) used to enumerate a domain controller.\nThe rule was created based off the datasets and hackathon from https://github.com/OTRF/detection-hackathon-apt29\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect domain user and group enumeration via network reconnaissance, seen in APT 29 and other common tactics and actors, you should monitor the Zeek logs, specifically focusing on the DCE/RPC service. This service, when leveraged by adversaries, can reveal significant information about the internal structuring and user accounts of a domain through various methods.\n\nLook for security principal names being translated into their SID form or vice versa, which could indicate an attempt to map out users and their permissions. This can be done through operations such as LsarLookupNames3 and LsarLookupSids3, respectively. Additionally, watch for methods like SamrGetGroupsForUser, SamrLookupIdsInDomain, SamrLookupNamesInDomain, SamrQuerySecurityObject, and SamrQueryInformationGroup being called. These methods are crucial for adversaries as they provide listings of groups a user is a member of, translate sets of RIDs into account names or vice versa, query the access control on various objects, and obtain attributes from a group object, all of which could be used to gain further foothold into the network.\n\nIt is critical to gather these logs within a short timeframe, ideally 30 seconds, and aggregate the counts of these operations by source IP. If a single source IP is seen making more than four distinct types of these operations within this timeframe, it could indicate suspicious activity worth investigating further.\n\nBe mindful of potential false positives, such as devices that perform authentication tasks, like VPNs or firewalls that may look up IPs to username for legitimate purposes. Additionally, consider the specific scripts and administrative tools used within your environment, as they might legitimately use these methods for non-malicious purposes.\n\nThis approach aligns with practices to counter activities by advanced persistent threats such as APT 29, by focusing on the detection of a set of remote procedure calls (RPC) used to enumerate a domain controller, reflecting tactics and techniques associated with reconnaissance and initial access phases of an attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: dce_rpc\ndetection:\n    selection:\n        operation:\n            #- LsarEnumerateTrustedDomains #potentially too many FPs, removing. caused by netlogon\n            #- SamrEnumerateDomainsInSamServer #potentially too many FPs, removing. #method obtains a listing of all domains hosted by the server side of this protocol. This value is a cookie that the server can use to continue an enumeration on a subsequent call\n            - LsarLookupNames3 #method translates a batch of security principal names to their SID form  \n            - LsarLookupSids3 #translates a batch of security principal SIDs to their name forms\n            - SamrGetGroupsForUser #obtains a listing of groups that a user is a member of\n            - SamrLookupIdsInDomain #method translates a set of RIDs into account names\n            - SamrLookupNamesInDomain #method translates a set of account names into a set of RIDs\n            - SamrQuerySecurityObject #method queries the access control on a server, domain, user, group, or alias object\n            - SamrQueryInformationGroup #obtains attributes from a group object\n    timeframe: 30s\n    condition: selection | count(operation) by src_ip > 4\nfalsepositives:\n    - Devices that may do authentication like a VPN or a firewall that looksup IPs to username\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: dce_rpc\ndetection:\n    selection:\n        operation:\n            #- LsarEnumerateTrustedDomains #potentially too many FPs, removing. caused by netlogon\n            #- SamrEnumerateDomainsInSamServer #potentially too many FPs, removing. #method obtains a listing of all domains hosted by the server side of this protocol. This value is a cookie that the server can use to continue an enumeration on a subsequent call\n            - LsarLookupNames3 #method translates a batch of security principal names to their SID form  \n            - LsarLookupSids3 #translates a batch of security principal SIDs to their name forms\n            - SamrGetGroupsForUser #obtains a listing of groups that a user is a member of\n            - SamrLookupIdsInDomain #method translates a set of RIDs into account names\n            - SamrLookupNamesInDomain #method translates a set of account names into a set of RIDs\n            - SamrQuerySecurityObject #method queries the access control on a server, domain, user, group, or alias object\n            - SamrQueryInformationGroup #obtains attributes from a group object\n    timeframe: 30s\n    condition: selection | count(operation) by src_ip > 4\nfalsepositives:\n    - Devices that may do authentication like a VPN or a firewall that looksup IPs to username\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n",
      "question": "Domain user and group enumeration via network reconnaissance.\nSeen in APT 29 and other common tactics and actors. set of RPC (remote procedure calls) used to enumerate a domain controller.\nThe rule was created based off the datasets and hackathon from https://github.com/OTRF/detection-hackathon-apt29\n",
      "answer": "In order to detect domain user and group enumeration via network reconnaissance, seen in APT 29 and other common tactics and actors, you should monitor the Zeek logs, specifically focusing on the DCE/RPC service. This service, when leveraged by adversaries, can reveal significant information about the internal structuring and user accounts of a domain through various methods.\n\nLook for security principal names being translated into their SID form or vice versa, which could indicate an attempt to map out users and their permissions. This can be done through operations such as LsarLookupNames3 and LsarLookupSids3, respectively. Additionally, watch for methods like SamrGetGroupsForUser, SamrLookupIdsInDomain, SamrLookupNamesInDomain, SamrQuerySecurityObject, and SamrQueryInformationGroup being called. These methods are crucial for adversaries as they provide listings of groups a user is a member of, translate sets of RIDs into account names or vice versa, query the access control on various objects, and obtain attributes from a group object, all of which could be used to gain further foothold into the network.\n\nIt is critical to gather these logs within a short timeframe, ideally 30 seconds, and aggregate the counts of these operations by source IP. If a single source IP is seen making more than four distinct types of these operations within this timeframe, it could indicate suspicious activity worth investigating further.\n\nBe mindful of potential false positives, such as devices that perform authentication tasks, like VPNs or firewalls that may look up IPs to username for legitimate purposes. Additionally, consider the specific scripts and administrative tools used within your environment, as they might legitimately use these methods for non-malicious purposes.\n\nThis approach aligns with practices to counter activities by advanced persistent threats such as APT 29, by focusing on the detection of a set of remote procedure calls (RPC) used to enumerate a domain controller, reflecting tactics and techniques associated with reconnaissance and initial access phases of an attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario, you should: Monitor Windows file events for instances where a file is created or modified in the system, specifically looking for actions involving the `System` image and a target filename ending with `\\wbem\\wbemcomn.dll`. This indicates a high likelihood of a WMI DLL Hijacking attempt, which is a critical security threat. It's necessary to keep an eye on this activity as the lack of known false positives suggests that occurrences could likely denote malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image: System\n        TargetFilename|endswith: '\\wbem\\wbemcomn.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image: System\n        TargetFilename|endswith: '\\wbem\\wbemcomn.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario.",
      "answer": "In order to detect a threat actor creating a file named `wbemcomn.dll` in the `C:\\Windows\\System32\\wbem\\` directory over the network and loading it for a WMI DLL Hijack scenario, you should: Monitor Windows file events for instances where a file is created or modified in the system, specifically looking for actions involving the `System` image and a target filename ending with `\\wbem\\wbemcomn.dll`. This indicates a high likelihood of a WMI DLL Hijacking attempt, which is a critical security threat. It's necessary to keep an eye on this activity as the lack of known false positives suggests that occurrences could likely denote malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of crontab to list the tasks of the user.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of crontab to list the tasks of the user, you should: Monitor for process creation events within Linux systems where the image path ends with '/crontab' and the command line contains the '-l' argument. This specific behavior indicates that the command executed is aiming to list scheduled tasks for the user, a legitimate but potentially suspicious activity if executed unexpectedly. Be aware that legitimate use of the crontab to list tasks is common; thus, this detection is marked with a low level of confidence and might require additional context or correlation with other suspicious activities to accurately identify malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/crontab'\n        CommandLine|contains: ' -l'\n    condition: selection\nfalsepositives:\n    - Legitimate use of crontab\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/crontab'\n        CommandLine|contains: ' -l'\n    condition: selection\nfalsepositives:\n    - Legitimate use of crontab\nlevel: low\n",
      "question": "usage of crontab to list the tasks of the user",
      "answer": "In order to detect the usage of crontab to list the tasks of the user, you should: Monitor for process creation events within Linux systems where the image path ends with '/crontab' and the command line contains the '-l' argument. This specific behavior indicates that the command executed is aiming to list scheduled tasks for the user, a legitimate but potentially suspicious activity if executed unexpectedly. Be aware that legitimate use of the crontab to list tasks is common; thus, this detection is marked with a low level of confidence and might require additional context or correlation with other suspicious activities to accurately identify malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a process from Windows task manager.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a process from Windows task manager, you should: focus on the creation of processes within Windows environments. Specifically, monitor for instances where the Windows Task Manager ('taskmgr.exe') is the parent process initiating the creation of a new process. However, it's important to exclude any processes that are commonly associated with administrative tasks and are initiated by the Task Manager itself, such as 'resmon.exe' (Resource Monitor), 'mmc.exe' (Microsoft Management Console), or 'taskmgr.exe'. This involves keeping an eye on the logs that detail process creation, paying special attention to the parent process involved, while ensuring to differentiate between legitimate administrative activities and potential malicious usage. Generally, the fields of interest in these logs would include the names and command line parameters of both the newly created process and its parent process. This approach typically generates a low level of false positives, primarily related to standard administrative activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\taskmgr.exe'\n    filter:\n        Image|endswith:\n            - '\\resmon.exe'\n            - '\\mmc.exe'\n            - '\\taskmgr.exe'\n    condition: selection and not filter\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\taskmgr.exe'\n    filter:\n        Image|endswith:\n            - '\\resmon.exe'\n            - '\\mmc.exe'\n            - '\\taskmgr.exe'\n    condition: selection and not filter\nfields:\n    - Image\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Administrative activity\nlevel: low\n",
      "question": "creation of a process from Windows task manager",
      "answer": "In order to detect the creation of a process from Windows task manager, you should: focus on the creation of processes within Windows environments. Specifically, monitor for instances where the Windows Task Manager ('taskmgr.exe') is the parent process initiating the creation of a new process. However, it's important to exclude any processes that are commonly associated with administrative tasks and are initiated by the Task Manager itself, such as 'resmon.exe' (Resource Monitor), 'mmc.exe' (Microsoft Management Console), or 'taskmgr.exe'. This involves keeping an eye on the logs that detail process creation, paying special attention to the parent process involved, while ensuring to differentiate between legitimate administrative activities and potential malicious usage. Generally, the fields of interest in these logs would include the names and command line parameters of both the newly created process and its parent process. This approach typically generates a low level of false positives, primarily related to standard administrative activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the Impersonate tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should monitor for specific activity indicative of this tool's operation within Windows process creation logs. Look for the execution of a process named \"impersonate.exe\" in the command line. Additionally, watch for command-line options indicative of the tool's use, such as 'list', 'exec', and 'adduser'. To enhance the detection accuracy, also check for the presence of specific hash values associated with the Impersonate tool. These hash values include an MD5 hash of '9520714AB576B0ED01D1513691377D01', a SHA256 hash of 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A', and an IMPHASH of '0A358FFC1697B7A07D0E817AC740DF62'. The detection should trigger if any of the command-line criteria are met or if one of the specified hashes is identified. Maintaining a cautious approach to potential false positives is advised, as their occurrence is currently deemed unknown. This observance is evaluated at a medium level of importance in the context of cybersecurity efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_commandline_exe:\n        CommandLine|contains: 'impersonate.exe'\n    selection_commandline_opt:\n        CommandLine|contains:\n            - ' list '\n            - ' exec '\n            - ' adduser '\n    selection_hash_plain:\n        Hashes|contains:\n            - 'MD5=9520714AB576B0ED01D1513691377D01'\n            - 'SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n            - 'IMPHASH=0A358FFC1697B7A07D0E817AC740DF62'\n    selection_hash_ext:\n        - md5: '9520714AB576B0ED01D1513691377D01'\n        - sha256: 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n        - Imphash: '0A358FFC1697B7A07D0E817AC740DF62'\n    condition: all of selection_commandline_* or 1 of selection_hash_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_commandline_exe:\n        CommandLine|contains: 'impersonate.exe'\n    selection_commandline_opt:\n        CommandLine|contains:\n            - ' list '\n            - ' exec '\n            - ' adduser '\n    selection_hash_plain:\n        Hashes|contains:\n            - 'MD5=9520714AB576B0ED01D1513691377D01'\n            - 'SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n            - 'IMPHASH=0A358FFC1697B7A07D0E817AC740DF62'\n    selection_hash_ext:\n        - md5: '9520714AB576B0ED01D1513691377D01'\n        - sha256: 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A'\n        - Imphash: '0A358FFC1697B7A07D0E817AC740DF62'\n    condition: all of selection_commandline_* or 1 of selection_hash_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
      "answer": "In order to detect execution of the Impersonate tool, which can be used to manipulate tokens on Windows computers remotely (PsExec/WmiExec) or interactively, you should monitor for specific activity indicative of this tool's operation within Windows process creation logs. Look for the execution of a process named \"impersonate.exe\" in the command line. Additionally, watch for command-line options indicative of the tool's use, such as 'list', 'exec', and 'adduser'. To enhance the detection accuracy, also check for the presence of specific hash values associated with the Impersonate tool. These hash values include an MD5 hash of '9520714AB576B0ED01D1513691377D01', a SHA256 hash of 'E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A', and an IMPHASH of '0A358FFC1697B7A07D0E817AC740DF62'. The detection should trigger if any of the command-line criteria are met or if one of the specified hashes is identified. Maintaining a cautious approach to potential false positives is advised, as their occurrence is currently deemed unknown. This observance is evaluated at a medium level of importance in the context of cybersecurity efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of ie4uinit.exe to execute commands from a specially prepared ie4uinit.inf file from a directory other than the usual directories.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of ie4uinit.exe to execute commands from a specially prepared ie4uinit.inf file from a directory other than the usual directories, you should focus on monitoring process creation logs within Windows environments. Look for instances where the process image ends with \"\\ie4uinit.exe\" or where the OriginalFileName is identified as \"IE4UINIT.EXE.\" These binaries are legitimate Windows components, often referred to as living off the land binaries (LOLBINs), which can be exploited to execute malicious commands.\n\nTo reduce false positives and ensure accurate detection, it is important to disregard events where the process's current directory matches the typical system directories, specifically \"c:\\windows\\system32\\\" and \"c:\\windows\\sysWOW64\\\". The absence of a CurrentDirectory field should also not trigger an alert, as it may indicate normal, non-suspicious activity.\n\nIt's worth noting that certain legitimate applications, such as the ViberPC updater, may call ie4uinit.exe with the command line argument \"-ClearIconCache\". Such activities should be considered when evaluating potential false positives to avoid unnecessary alerts.\n\nOverall, this monitoring strategy is essential in identifying suspicious usage of ie4uinit.exe that diverges from standard system behavior, suggesting an attempt to execute unauthorized or malicious commands through abuse of system tools. This approach leverages the Windows process creation logs as a source, aiding in the detection of adversarial tactics and techniques without relying on abnormal file paths alone.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    lolbin:\n        - Image|endswith: '\\ie4uinit.exe'\n        - OriginalFileName: 'IE4UINIT.EXE'\n    filter_correct:\n        CurrentDirectory:\n            - 'c:\\windows\\system32\\'\n            - 'c:\\windows\\sysWOW64\\'\n    filter_missing:\n        CurrentDirectory: null\n    condition: lolbin and not 1 of filter_*\nfalsepositives:\n    - ViberPC updater calls this binary with the following commandline \"ie4uinit.exe -ClearIconCache\"\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    lolbin:\n        - Image|endswith: '\\ie4uinit.exe'\n        - OriginalFileName: 'IE4UINIT.EXE'\n    filter_correct:\n        CurrentDirectory:\n            - 'c:\\windows\\system32\\'\n            - 'c:\\windows\\sysWOW64\\'\n    filter_missing:\n        CurrentDirectory: null\n    condition: lolbin and not 1 of filter_*\nfalsepositives:\n    - ViberPC updater calls this binary with the following commandline \"ie4uinit.exe -ClearIconCache\"\nlevel: medium\n",
      "question": "Detect use of ie4uinit.exe to execute commands from a specially prepared ie4uinit.inf file from a directory other than the usual directories",
      "answer": "In order to detect the use of ie4uinit.exe to execute commands from a specially prepared ie4uinit.inf file from a directory other than the usual directories, you should focus on monitoring process creation logs within Windows environments. Look for instances where the process image ends with \"\\ie4uinit.exe\" or where the OriginalFileName is identified as \"IE4UINIT.EXE.\" These binaries are legitimate Windows components, often referred to as living off the land binaries (LOLBINs), which can be exploited to execute malicious commands.\n\nTo reduce false positives and ensure accurate detection, it is important to disregard events where the process's current directory matches the typical system directories, specifically \"c:\\windows\\system32\\\" and \"c:\\windows\\sysWOW64\\\". The absence of a CurrentDirectory field should also not trigger an alert, as it may indicate normal, non-suspicious activity.\n\nIt's worth noting that certain legitimate applications, such as the ViberPC updater, may call ie4uinit.exe with the command line argument \"-ClearIconCache\". Such activities should be considered when evaluating potential false positives to avoid unnecessary alerts.\n\nOverall, this monitoring strategy is essential in identifying suspicious usage of ie4uinit.exe that diverges from standard system behavior, suggesting an attempt to execute unauthorized or malicious commands through abuse of system tools. This approach leverages the Windows process creation logs as a source, aiding in the detection of adversarial tactics and techniques without relying on abnormal file paths alone."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting processes setting a new DLL in DllName in under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nAdversaries may abuse time providers to execute DLLs when the system boots.\nThe Windows Time service (W32Time) enables time synchronization across and within domains.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect processes setting a new DLL in DllName under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider, as adversaries may abuse time providers to execute DLLs when the system boots, you should: Focus on monitoring registry set actions within Windows systems, specifically looking at events where the type is SetValue. This involves scrutinizing any changes made to the \u2018DllName\u2019 fields that start with 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders' and end with 'DllName'. It is crucial to exclude any events that specifically alter the Details to \u2018C:\\Windows\\SYSTEM32\\w32time.DLL\u2019 as this is considered a legitimate action and not part of this targeted detection process. No known false positives have been identified, indicating the high specificity of the conditions outlined, which underscores the importance of this monitoring in securing against adversaries exploiting the Windows Time service for malicious DLL execution as part of their initial access strategy or persistence mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders'\n        TargetObject|endswith: 'DllName'\n    filter:\n        Details: 'C:\\Windows\\SYSTEM32\\w32time.DLL'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders'\n        TargetObject|endswith: 'DllName'\n    filter:\n        Details: 'C:\\Windows\\SYSTEM32\\w32time.DLL'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "processes setting a new DLL in DllName in under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nAdversaries may abuse time providers to execute DLLs when the system boots.\nThe Windows Time service (W32Time) enables time synchronization across and within domains.\n",
      "answer": "In order to detect processes setting a new DLL in DllName under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider, as adversaries may abuse time providers to execute DLLs when the system boots, you should: Focus on monitoring registry set actions within Windows systems, specifically looking at events where the type is SetValue. This involves scrutinizing any changes made to the \u2018DllName\u2019 fields that start with 'HKLM\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders' and end with 'DllName'. It is crucial to exclude any events that specifically alter the Details to \u2018C:\\Windows\\SYSTEM32\\w32time.DLL\u2019 as this is considered a legitimate action and not part of this targeted detection process. No known false positives have been identified, indicating the high specificity of the conditions outlined, which underscores the importance of this monitoring in securing against adversaries exploiting the Windows Time service for malicious DLL execution as part of their initial access strategy or persistence mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of wsudo (Windows Sudo Utility), which is a tool that lets the user execute programs with different permissions (System, Trusted Installer, Administrator, etc), you should focus on monitoring process creation logs within Windows environments. Specifically, you should look for instances where a process named 'wsudo.exe' is created, as indicated by either the image name ending with '\\wsudo.exe' or having an original file name of 'wsudo.exe'. Additionally, when the description of the process explicitly mentions 'Windows sudo utility', or when the parent image of the process ends with '\\wsudo-bridge.exe', these are key indicators of wsudo usage.\n\nMoreover, the command lines associated with these processes should be scrutinized for specific flags that denote elevation of privilege or execution as a particular user type. Command-line arguments to watch for include '-u System', '-uSystem', '-u TrustedInstaller', '-uTrustedInstaller', or the presence of ' --ti ', as these indicate attempts to execute programs with elevated permissions or as specific system-level users.\n\nGiven the potential for this tool to be used in both legitimate and malicious contexts, there are not many known false positives; however, any unexpected or unauthorized use of wsudo within a Windows environment should be considered suspicious, especially at a high alert level. Identifying such activity revolves around the close examination of process creation logs, command-line arguments, and the relationship between parent and child processes related to wsudo activity. Monitoring for these specific indicators helps in promptly detecting and responding to unauthorized or malicious use of the Windows sudo utility, thereby mitigating the risks associated with privilege escalation and system compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\wsudo.exe'\n        - OriginalFileName: 'wsudo.exe'\n        - Description: 'Windows sudo utility'\n        - ParentImage|endswith: '\\wsudo-bridge.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-u System'\n            - '-uSystem'\n            - '-u TrustedInstaller'\n            - '-uTrustedInstaller'\n            - ' --ti '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_metadata:\n        - Image|endswith: '\\wsudo.exe'\n        - OriginalFileName: 'wsudo.exe'\n        - Description: 'Windows sudo utility'\n        - ParentImage|endswith: '\\wsudo-bridge.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '-u System'\n            - '-uSystem'\n            - '-u TrustedInstaller'\n            - '-uTrustedInstaller'\n            - ' --ti '\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc)",
      "answer": "In order to detect usage of wsudo (Windows Sudo Utility), which is a tool that lets the user execute programs with different permissions (System, Trusted Installer, Administrator, etc), you should focus on monitoring process creation logs within Windows environments. Specifically, you should look for instances where a process named 'wsudo.exe' is created, as indicated by either the image name ending with '\\wsudo.exe' or having an original file name of 'wsudo.exe'. Additionally, when the description of the process explicitly mentions 'Windows sudo utility', or when the parent image of the process ends with '\\wsudo-bridge.exe', these are key indicators of wsudo usage.\n\nMoreover, the command lines associated with these processes should be scrutinized for specific flags that denote elevation of privilege or execution as a particular user type. Command-line arguments to watch for include '-u System', '-uSystem', '-u TrustedInstaller', '-uTrustedInstaller', or the presence of ' --ti ', as these indicate attempts to execute programs with elevated permissions or as specific system-level users.\n\nGiven the potential for this tool to be used in both legitimate and malicious contexts, there are not many known false positives; however, any unexpected or unauthorized use of wsudo within a Windows environment should be considered suspicious, especially at a high alert level. Identifying such activity revolves around the close examination of process creation logs, command-line arguments, and the relationship between parent and child processes related to wsudo activity. Monitoring for these specific indicators helps in promptly detecting and responding to unauthorized or malicious use of the Windows sudo utility, thereby mitigating the risks associated with privilege escalation and system compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server, you should: Monitor process creation logs on Linux systems for instances where the process being started ends with '/curl'. This activity may suggest an attempt to download files from a remote location or make web requests to remote servers, which could be benign or malicious depending on the context. However, it is important to note that there might be false positives, such as scripts created by developers and admins as well as legitimate administrative activity. The severity of this rule is considered low, given that not all instances of curl usage are malicious but warrant attention to discern the intent behind the usage.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/curl'\n    condition: selection\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/curl'\n    condition: selection\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: low\n",
      "question": "curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server",
      "answer": "In order to detect a curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server, you should: Monitor process creation logs on Linux systems for instances where the process being started ends with '/curl'. This activity may suggest an attempt to download files from a remote location or make web requests to remote servers, which could be benign or malicious depending on the context. However, it is important to note that there might be false positives, such as scripts created by developers and admins as well as legitimate administrative activity. The severity of this rule is considered low, given that not all instances of curl usage are malicious but warrant attention to discern the intent behind the usage."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious activities as declared by Florian Roth in its 'Best Practice Auditd Configuration'.\nThis includes the detection of the following commands; wget, curl, base64, nc, netcat, ncat, ssh, socat, wireshark, rawshark, rdesktop, nmap.\nThese commands match a few techniques from the tactics \"Command and Control\", including not exhaustively the following; Application Layer Protocol (T1071), Non-Application Layer Protocol (T1095), Data Encoding (T1132)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious activities as declared by Florian Roth in its 'Best Practice Auditd Configuration', you should focus on monitoring auditd logs within a Linux environment. Specifically, keep an eye out for activities related to key commands that are often leveraged in attacks. These commands include wget, curl, base64, nc (netcat), ncat, ssh, socat, wireshark, rawshark, rdesktop, and nmap. Such commands may be indicative of various malicious activities, especially those aimed at establishing command and control channels, bypassing network security measures, or exfiltrating data. These activities correlate with several tactics and techniques, notably Application Layer Protocol, Non-Application Layer Protocol, and Data Encoding. It's important to note that these detections might sometimes trigger false positives, such as legitimate administrative or user activities. Therefore, while maintaining a medium level of alertness for these indicators, it's crucial to contextually analyze these alerts for potential benign uses of these commands to avoid misinterpretation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        key: 'susp_activity'\n    condition: selection\nfalsepositives:\n    - Admin or User activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        key: 'susp_activity'\n    condition: selection\nfalsepositives:\n    - Admin or User activity\nlevel: medium\n",
      "question": "suspicious activities as declared by Florian Roth in its 'Best Practice Auditd Configuration'.\nThis includes the detection of the following commands; wget, curl, base64, nc, netcat, ncat, ssh, socat, wireshark, rawshark, rdesktop, nmap.\nThese commands match a few techniques from the tactics \"Command and Control\", including not exhaustively the following; Application Layer Protocol (T1071), Non-Application Layer Protocol (T1095), Data Encoding (T1132)\n",
      "answer": "In order to detect suspicious activities as declared by Florian Roth in its 'Best Practice Auditd Configuration', you should focus on monitoring auditd logs within a Linux environment. Specifically, keep an eye out for activities related to key commands that are often leveraged in attacks. These commands include wget, curl, base64, nc (netcat), ncat, ssh, socat, wireshark, rawshark, rdesktop, and nmap. Such commands may be indicative of various malicious activities, especially those aimed at establishing command and control channels, bypassing network security measures, or exfiltrating data. These activities correlate with several tactics and techniques, notably Application Layer Protocol, Non-Application Layer Protocol, and Data Encoding. It's important to note that these detections might sometimes trigger false positives, such as legitimate administrative or user activities. Therefore, while maintaining a medium level of alertness for these indicators, it's crucial to contextually analyze these alerts for potential benign uses of these commands to avoid misinterpretation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Exfiltration Over Alternative Protocol - ICMP, where adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel, you should focus on monitoring PowerShell scripts in Windows environments. Ensure that Script Block Logging is enabled to capture the PowerShell activities. Specifically, look for scripts that create a new object instance followed by initiating a ping using the 'System.Net.NetworkInformation.Ping' class and then sending it. This behavior could indicate an attempt to use ICMP for data exfiltration, which is not typical for standard PowerShell usage. Be aware, though, that legitimate scripts might also use the Ping class for valid purposes, so consider this when assessing alerts. This approach targets intermediate-level threats and helps to identify suspicious activities related to alternative data exfiltration methods.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'System.Net.NetworkInformation.Ping'\n            - '.Send('\n    condition: selection\nfalsepositives:\n    - Legitimate usage of System.Net.NetworkInformation.Ping class\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'New-Object'\n            - 'System.Net.NetworkInformation.Ping'\n            - '.Send('\n    condition: selection\nfalsepositives:\n    - Legitimate usage of System.Net.NetworkInformation.Ping class\nlevel: medium\n",
      "question": "Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.",
      "answer": "In order to detect Exfiltration Over Alternative Protocol - ICMP, where adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel, you should focus on monitoring PowerShell scripts in Windows environments. Ensure that Script Block Logging is enabled to capture the PowerShell activities. Specifically, look for scripts that create a new object instance followed by initiating a ping using the 'System.Net.NetworkInformation.Ping' class and then sending it. This behavior could indicate an attempt to use ICMP for data exfiltration, which is not typical for standard PowerShell usage. Be aware, though, that legitimate scripts might also use the Ping class for valid purposes, so consider this when assessing alerts. This approach targets intermediate-level threats and helps to identify suspicious activities related to alternative data exfiltration methods."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting network connections and DNS queries initiated by Regsvr32.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect network connections and DNS queries initiated by Regsvr32.exe, you should: Monitor network connection logs from Windows-based systems for any instances where the process image name ends with '\\regsvr32.exe'. This involves keeping an eye out for any activity that involves the regsvr32.exe executable making network connections. Specifically, you should focus on logging and analyzing details such as the name of the computer where the activity was detected, the user under which regsvr32.exe was executed, the full path of the regsvr32.exe image, the destination IP address it connected to, and the destination port used for the connection. It's important to consider that there might be instances where this detection could trigger on legitimate activities; thus, all detections should be analyzed carefully to determine if they represent malicious behavior or if they are false positives. This monitoring and detection effort is critical as it relates to identifying potential misuse of regsvr32.exe for surreptitious network communications, a technique often associated with command and control operations and exfiltration in cyber attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - Image\n    - DestinationIp\n    - DestinationPort\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - Image\n    - DestinationIp\n    - DestinationPort\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "network connections and DNS queries initiated by Regsvr32.exe",
      "answer": "In order to detect network connections and DNS queries initiated by Regsvr32.exe, you should: Monitor network connection logs from Windows-based systems for any instances where the process image name ends with '\\regsvr32.exe'. This involves keeping an eye out for any activity that involves the regsvr32.exe executable making network connections. Specifically, you should focus on logging and analyzing details such as the name of the computer where the activity was detected, the user under which regsvr32.exe was executed, the full path of the regsvr32.exe image, the destination IP address it connected to, and the destination port used for the connection. It's important to consider that there might be instances where this detection could trigger on legitimate activities; thus, all detections should be analyzed carefully to determine if they represent malicious behavior or if they are false positives. This monitoring and detection effort is critical as it relates to identifying potential misuse of regsvr32.exe for surreptitious network communications, a technique often associated with command and control operations and exfiltration in cyber attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies when an ElastiCache security group has been modified or deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when an ElastiCache security group has been modified or deleted, you should monitor CloudTrail logs for AWS services for specific activities. Look for events sourced from elasticache.amazonaws.com that indicate modifications to Elasticache security groups. These events include 'DeleteCacheSecurityGroup', which signifies the deletion of a security group; 'AuthorizeCacheSecurityGroupIngress' and 'RevokeCacheSecurityGroupIngress', which pertain to the authorization or revocation of ingress rules; and 'AuthorizeCacheSecurityGroupEgress' and 'RevokeCacheSecurityGroupEgress', relevant to the authorization or revocation of egress rules. It is important to note that not all modifications may be unauthorized or malicious. Sometimes, system or network administrators may perform legitimate modifications. Therefore, it is advisable to verify the identity of the user making the changes, as well as the user agent and/or hostname, to ensure they are recognized entities within your environment. Modifications from unfamiliar users or hosts should be subjected to further investigation. Known behaviors that repeatedly trigger false positives can be exempted from monitoring to refine the detection process. This practice maintains a focus on identifying potentially malicious activities surrounding ElastiCache security groups while minimizing noise from legitimate administrative actions.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName:\n            - 'DeleteCacheSecurityGroup'\n            - 'AuthorizeCacheSecurityGroupIngress'\n            - 'RevokeCacheSecurityGroupIngress'\n            - 'AuthorizeCacheSecurityGroupEgress'\n            - 'RevokeCacheSecurityGroupEgress'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group deletion may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security Group deletions from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: elasticache.amazonaws.com\n        eventName:\n            - 'DeleteCacheSecurityGroup'\n            - 'AuthorizeCacheSecurityGroupIngress'\n            - 'RevokeCacheSecurityGroupIngress'\n            - 'AuthorizeCacheSecurityGroupEgress'\n            - 'RevokeCacheSecurityGroupEgress'\n    condition: selection\nfalsepositives:\n    - A ElastiCache security group deletion may be done by a system or network administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment. Security Group deletions from unfamiliar users or hosts should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\n\n\nlevel: low\n",
      "question": "Identifies when an ElastiCache security group has been modified or deleted.",
      "answer": "In order to identify when an ElastiCache security group has been modified or deleted, you should monitor CloudTrail logs for AWS services for specific activities. Look for events sourced from elasticache.amazonaws.com that indicate modifications to Elasticache security groups. These events include 'DeleteCacheSecurityGroup', which signifies the deletion of a security group; 'AuthorizeCacheSecurityGroupIngress' and 'RevokeCacheSecurityGroupIngress', which pertain to the authorization or revocation of ingress rules; and 'AuthorizeCacheSecurityGroupEgress' and 'RevokeCacheSecurityGroupEgress', relevant to the authorization or revocation of egress rules. It is important to note that not all modifications may be unauthorized or malicious. Sometimes, system or network administrators may perform legitimate modifications. Therefore, it is advisable to verify the identity of the user making the changes, as well as the user agent and/or hostname, to ensure they are recognized entities within your environment. Modifications from unfamiliar users or hosts should be subjected to further investigation. Known behaviors that repeatedly trigger false positives can be exempted from monitoring to refine the detection process. This practice maintains a focus on identifying potentially malicious activities surrounding ElastiCache security groups while minimizing noise from legitimate administrative actions."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_flags_1:\n        # Escalation to LOCAL_SYSTEM\n        CommandLine|contains:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' /s cmd'\n            - ' -s -i cmd'\n            - ' /s /i cmd'\n            - ' /s -i cmd'\n            - ' -s /i cmd'\n            - ' -i -s cmd'\n            - ' /i /s cmd'\n            - ' -i /s cmd'\n            - ' /i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' /s pwsh'\n            - ' -s -i pwsh'\n            - ' /s /i pwsh'\n            - ' /s -i pwsh'\n            - ' -s /i pwsh'\n            - ' -i -s pwsh'\n            - ' /i /s pwsh'\n            - ' -i /s pwsh'\n            - ' /i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' /s powershell'\n            - ' -s -i powershell'\n            - ' /s /i powershell'\n            - ' /s -i powershell'\n            - ' -s /i powershell'\n            - ' -i -s powershell'\n            - ' /i /s powershell'\n            - ' -i /s powershell'\n            - ' /i -s powershell'\n    filter:\n        # This filter exclude strings covered by 8834e2f7-6b4b-4f09-8906-d2276470ee23\n        CommandLine|contains:\n            - 'paexec'\n            - 'PsExec'\n            - 'accepteula'\n    condition: 1 of selection_flags_* and not filter\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_flags_1:\n        # Escalation to LOCAL_SYSTEM\n        CommandLine|contains:\n            # Note that you don't need to add the \".exe\" part when using psexec/paexec\n            # The \"-\" can also be replaced with \"/\"\n            # The order of args isn't important\n            # \"cmd\" can be replaced by \"powershell\", \"pwsh\" or any other console like software\n            - ' -s cmd'\n            - ' /s cmd'\n            - ' -s -i cmd'\n            - ' /s /i cmd'\n            - ' /s -i cmd'\n            - ' -s /i cmd'\n            - ' -i -s cmd'\n            - ' /i /s cmd'\n            - ' -i /s cmd'\n            - ' /i -s cmd'\n            # Pwsh (For PowerShell 7)\n            - ' -s pwsh'\n            - ' /s pwsh'\n            - ' -s -i pwsh'\n            - ' /s /i pwsh'\n            - ' /s -i pwsh'\n            - ' -s /i pwsh'\n            - ' -i -s pwsh'\n            - ' /i /s pwsh'\n            - ' -i /s pwsh'\n            - ' /i -s pwsh'\n            # PowerShell (For PowerShell 5)\n            - ' -s powershell'\n            - ' /s powershell'\n            - ' -s -i powershell'\n            - ' /s /i powershell'\n            - ' /s -i powershell'\n            - ' -s /i powershell'\n            - ' -i -s powershell'\n            - ' /i /s powershell'\n            - ' -i /s powershell'\n            - ' /i -s powershell'\n    filter:\n        # This filter exclude strings covered by 8834e2f7-6b4b-4f09-8906-d2276470ee23\n        CommandLine|contains:\n            - 'paexec'\n            - 'PsExec'\n            - 'accepteula'\n    condition: 1 of selection_flags_* and not filter\nfalsepositives:\n    - Weird admins that rename their tools\n    - Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing\nlevel: high\n",
      "question": "unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
      "answer": "In order to detect unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM privileges, you should monitor the creation of Windows processes for specific command-line arguments that indicate an elevation attempt to the LOCAL_SYSTEM account. These arguments include variations of '-s' and '/s' flags in combination with 'cmd', 'powershell', 'pwsh', or any similar command line interpreter software, often paired with '-i' or '/i' to start an interactive session. It's crucial to note that these flags can be used interchangeably (e.g., '-' can be replaced with '/') and the order of the arguments might not always be the same. Furthermore, variations specific to PowerShell version 7 (pwsh) and version 5 (powershell) are also considered. To avoid false alerts, the rule excludes known instances where command-line arguments include 'paexec', 'PsExec', or 'accepteula', as they are common tools that use similar flags but may not indicate malicious activity. These command-line arguments are typically associated with legitimate administrative tools, and exclusions are made for instances that may resemble typical tool usage or instances where software companies include such tools with their products under different names. This detection process is set to a high level of alert due to the potential impact of an attacker gaining SYSTEM privileges."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an security threat is detected in Okta..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a security threat is detected in Okta, you should monitor the logs produced by Okta services for specific events that indicate a threat has been detected. Specifically, look for events with the type \"security.threat.detected\". These events signal that Okta has identified a potential security issue. It's important to address these threats with a medium level of urgency, although be aware that some events might be false positives where the activity is benign and does not actually pose any security risk. Nevertheless, all detected threats should be investigated to determine their legitimacy and impact.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: security.threat.detected\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: security.threat.detected\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "when an security threat is detected in Okta.",
      "answer": "In order to detect when a security threat is detected in Okta, you should monitor the logs produced by Okta services for specific events that indicate a threat has been detected. Specifically, look for events with the type \"security.threat.detected\". These events signal that Okta has identified a potential security issue. It's important to address these threats with a medium level of urgency, although be aware that some events might be false positives where the activity is benign and does not actually pose any security risk. Nevertheless, all detected threats should be investigated to determine their legitimacy and impact."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation), you should:\n\nMonitor DNS query logs from Windows systems for specific requests that are indicative of interaction with TeamViewer domains. These DNS requests are particularly aimed at querying 'taf.teamviewer.com' and 'udp.ping.teamviewer.com'. It's essential to scrutinize programs initiating these DNS queries to ensure they are genuinely associated with TeamViewer. If the initiating program image does not contain the name 'TeamViewer', it may signal an attempt at obfuscation by threat actors intending to disguise malicious activities. It is important to be aware of potential false positives, which can emerge from unknown binary names of TeamViewer or other legitimate programs that may also query the observed domains. This monitoring activity is of medium priority and aligns with tactics and techniques that involve the utilization of legitimate software (such as TeamViewer) by malicious actors in their operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: dns_query\ndetection:\n    dns_request:\n        QueryName:\n            - 'taf.teamviewer.com'\n            - 'udp.ping.teamviewer.com'\n    filter:\n        Image|contains: 'TeamViewer'\n    condition: dns_request and not filter\nfalsepositives:\n    - Unknown binary names of TeamViewer\n    - Other programs that also lookup the observed domain\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: dns_query\ndetection:\n    dns_request:\n        QueryName:\n            - 'taf.teamviewer.com'\n            - 'udp.ping.teamviewer.com'\n    filter:\n        Image|contains: 'TeamViewer'\n    condition: dns_request and not filter\nfalsepositives:\n    - Unknown binary names of TeamViewer\n    - Other programs that also lookup the observed domain\nlevel: medium\n",
      "question": "DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation)",
      "answer": "In order to detect DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation), you should:\n\nMonitor DNS query logs from Windows systems for specific requests that are indicative of interaction with TeamViewer domains. These DNS requests are particularly aimed at querying 'taf.teamviewer.com' and 'udp.ping.teamviewer.com'. It's essential to scrutinize programs initiating these DNS queries to ensure they are genuinely associated with TeamViewer. If the initiating program image does not contain the name 'TeamViewer', it may signal an attempt at obfuscation by threat actors intending to disguise malicious activities. It is important to be aware of potential false positives, which can emerge from unknown binary names of TeamViewer or other legitimate programs that may also query the observed domains. This monitoring activity is of medium priority and aligns with tactics and techniques that involve the utilization of legitimate software (such as TeamViewer) by malicious actors in their operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"ConvertTo-SecureString\" cmdlet via the commandline. Which is fairly uncommon and could indicate potential suspicious activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the \"ConvertTo-SecureString\" cmdlet via the commandline, which is fairly uncommon and could indicate potential suspicious activity, you should: Monitor process creation logs on Windows systems for instances where `powershell.exe` or `pwsh.exe` are initiated, specifically looking out for the executables named `PowerShell.EXE` or `pwsh.dll`. Further narrow down the detection by identifying command lines that contain the `ConvertTo-SecureString` command. This activity, while unusual, can sometimes be part of legitimate operations where passwords are passed to different PowerShell commands. As such, it's rated at a medium level of concern, and any detections should be investigated to rule out false positives or legitimate usage within the context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cli:\n        CommandLine|contains: 'ConvertTo-SecureString'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use to pass password to different powershell commands\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cli:\n        CommandLine|contains: 'ConvertTo-SecureString'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use to pass password to different powershell commands\nlevel: medium\n",
      "question": "usage of the \"ConvertTo-SecureString\" cmdlet via the commandline. Which is fairly uncommon and could indicate potential suspicious activity",
      "answer": "In order to detect usage of the \"ConvertTo-SecureString\" cmdlet via the commandline, which is fairly uncommon and could indicate potential suspicious activity, you should: Monitor process creation logs on Windows systems for instances where `powershell.exe` or `pwsh.exe` are initiated, specifically looking out for the executables named `PowerShell.EXE` or `pwsh.dll`. Further narrow down the detection by identifying command lines that contain the `ConvertTo-SecureString` command. This activity, while unusual, can sometimes be part of legitimate operations where passwords are passed to different PowerShell commands. As such, it's rated at a medium level of concern, and any detections should be investigated to rule out false positives or legitimate usage within the context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys. Often used by attacker to allow the ransomware to work in safe mode as some security products do not.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys, often used by attacker to allow the ransomware to work in safe mode as some security products do not, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the \"reg.exe\" program is executed, indicated either by the program's image name ending with 'reg.exe' or the original file name being 'reg.exe'. Additionally, pay attention to the command line arguments accompanying the execution of \"reg.exe\". It's critical to identify instances where the command line includes references to the system's safe boot configuration, specifically paths containing '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'. Moreover, detect command lines that include the use of 'copy' or 'add' commands, which are red flags for potential malicious activity aimed at modifying the registry to ensure malware persistence even in safe mode. Given the unlikely chance of false positives and the high severity of such an action, prompt and thorough investigation is warranted upon detection of these criteria.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: 'reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_safeboot:\n        CommandLine|contains: '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'\n    selection_flag:\n        CommandLine|contains:\n            - ' copy '\n            - ' add '\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: 'reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_safeboot:\n        CommandLine|contains: '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'\n    selection_flag:\n        CommandLine|contains:\n            - ' copy '\n            - ' add '\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys. Often used by attacker to allow the ransomware to work in safe mode as some security products do not",
      "answer": "In order to detect execution of \"reg.exe\" commands with the \"add\" or \"copy\" flags on safe boot registry keys, often used by attacker to allow the ransomware to work in safe mode as some security products do not, you should: Focus on monitoring process creation events within Windows environments. Specifically, look for instances where the \"reg.exe\" program is executed, indicated either by the program's image name ending with 'reg.exe' or the original file name being 'reg.exe'. Additionally, pay attention to the command line arguments accompanying the execution of \"reg.exe\". It's critical to identify instances where the command line includes references to the system's safe boot configuration, specifically paths containing '\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot'. Moreover, detect command lines that include the use of 'copy' or 'add' commands, which are red flags for potential malicious activity aimed at modifying the registry to ensure malware persistence even in safe mode. Given the unlikely chance of false positives and the high severity of such an action, prompt and thorough investigation is warranted upon detection of these criteria."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass.\nThe \"Extensions\" list contains filenames of DLLs being automatically loaded by lsass.exe. Each DLL has its InitializeLsaExtension() method called after loading.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass, you should monitor registry setting activities on Windows systems, specifically focusing on events where a SetValue operation occurs. Pay close attention to modifications targeting the registry path `\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions`. This specific registry path is crucial as it stores a list of DLL filenames automatically loaded by the Local Security Authority Subsystem Service (lsass.exe), where each DLL\u2019s `InitializeLsaExtension()` method is called upon loading. Such an unauthorized modification is a red flag for a high-level security threat aimed at achieving malicious persistence on the system by exploiting the way lsass.exe manages its extensions. Tracking changes to this registry value helps in identifying attempts to inject malicious DLLs into the legitimate process of lsass.exe, indicating a potential compromise. The detection of such activities is deemed to have a high level of importance due to the unlikely nature of false positives in this context, indicating that alterations to this registry key are typically not part of regular system operations or benign configurations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass.\nThe \"Extensions\" list contains filenames of DLLs being automatically loaded by lsass.exe. Each DLL has its InitializeLsaExtension() method called after loading.\n",
      "answer": "In order to detect when an attacker modifies the \"REG_MULTI_SZ\" value named \"Extensions\" to include a custom DLL to achieve persistence via lsass, you should monitor registry setting activities on Windows systems, specifically focusing on events where a SetValue operation occurs. Pay close attention to modifications targeting the registry path `\\SYSTEM\\CurrentControlSet\\Control\\LsaExtensionConfig\\LsaSrv\\Extensions`. This specific registry path is crucial as it stores a list of DLL filenames automatically loaded by the Local Security Authority Subsystem Service (lsass.exe), where each DLL\u2019s `InitializeLsaExtension()` method is called upon loading. Such an unauthorized modification is a red flag for a high-level security threat aimed at achieving malicious persistence on the system by exploiting the way lsass.exe manages its extensions. Tracking changes to this registry value helps in identifying attempts to inject malicious DLLs into the legitimate process of lsass.exe, indicating a potential compromise. The detection of such activities is deemed to have a high level of importance due to the unlikely nature of false positives in this context, indicating that alterations to this registry key are typically not part of regular system operations or benign configurations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.\nAdversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.\nWindows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries executing their own malicious payloads by hijacking the Registry entries used by services, you should monitor the process creation logs on Windows systems. Focus on tracking the usage of the \"reg.exe\" application, specifically when it is involved in adding or modifying the ImagePath for services under \"SYSTEM\\CurrentControlSet\\Services\\\" in the registry. Detection criteria include command lines that end with \"\\reg.exe\" and contain the strings \"add \", \"SYSTEM\\CurrentControlSet\\Services\\\", and \" ImagePath \", along with optional flags \" /d \" or \" -d \" which are used to specify the data for a registry value. This detection helps identify attempts to use Registry modifications for redirecting service executables to malicious files, leveraging potential flaws in registry permissions. Be aware that some activity might generate false positives due to the dynamic nature of registry operations and should be investigated accordingly. The severity level for this detection strategy is considered medium, highlighting its importance in identifying service hijacking attempts as part of broader tactics such as Persistence, Privilege Escalation, and Execution, but also recognizing that not all modifications may be malicious in nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\reg.exe'\n        CommandLine|contains|all:\n            - 'add '\n            - 'SYSTEM\\CurrentControlSet\\Services\\'\n            - ' ImagePath '\n    selection_value:\n        CommandLine|contains:\n            - ' /d '\n            - ' -d '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\reg.exe'\n        CommandLine|contains|all:\n            - 'add '\n            - 'SYSTEM\\CurrentControlSet\\Services\\'\n            - ' ImagePath '\n    selection_value:\n        CommandLine|contains:\n            - ' /d '\n            - ' -d '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.\nAdversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.\nWindows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services\n",
      "answer": "In order to detect adversaries executing their own malicious payloads by hijacking the Registry entries used by services, you should monitor the process creation logs on Windows systems. Focus on tracking the usage of the \"reg.exe\" application, specifically when it is involved in adding or modifying the ImagePath for services under \"SYSTEM\\CurrentControlSet\\Services\\\" in the registry. Detection criteria include command lines that end with \"\\reg.exe\" and contain the strings \"add \", \"SYSTEM\\CurrentControlSet\\Services\\\", and \" ImagePath \", along with optional flags \" /d \" or \" -d \" which are used to specify the data for a registry value. This detection helps identify attempts to use Registry modifications for redirecting service executables to malicious files, leveraging potential flaws in registry permissions. Be aware that some activity might generate false positives due to the dynamic nature of registry operations and should be investigated accordingly. The severity level for this detection strategy is considered medium, highlighting its importance in identifying service hijacking attempts as part of broader tactics such as Persistence, Privilege Escalation, and Execution, but also recognizing that not all modifications may be malicious in nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious winrar execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious winrar execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration, you should: Monitor process creation events on Windows systems to identify executions of WinRAR or RAR via the command line, especially those that involve files with \".dmp\" or \".dump\" extensions. Specifically, look for processes spawned with images that end in \"\\rar.exe\" or \"\\winrar.exe\". Additionally, pay attention to command-line arguments that contain references to \".dmp\" or \".dump\" file extensions, indicating the potential manipulation or compression of dump files which might be exfiltrated later. Be cautious of legitimate uses of WinRAR from the command line that include \".dmp\" file references by mistake, as these may generate false positives. The threat level for this activity is considered high due to its potential role in sensitive data extraction scenarios.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\rar.exe'\n            - '\\winrar.exe'\n        - Description: 'Command line RAR'\n    selection_extension:\n        CommandLine|contains:\n            - '.dmp'\n            - '.dump'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of WinRAR with a command line in which .dmp appears accidentally\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\rar.exe'\n            - '\\winrar.exe'\n        - Description: 'Command line RAR'\n    selection_extension:\n        CommandLine|contains:\n            - '.dmp'\n            - '.dump'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of WinRAR with a command line in which .dmp appears accidentally\nlevel: high\n",
      "question": "suspicious winrar execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration",
      "answer": "In order to detect a suspicious winrar execution that involves a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration, you should: Monitor process creation events on Windows systems to identify executions of WinRAR or RAR via the command line, especially those that involve files with \".dmp\" or \".dump\" extensions. Specifically, look for processes spawned with images that end in \"\\rar.exe\" or \"\\winrar.exe\". Additionally, pay attention to command-line arguments that contain references to \".dmp\" or \".dump\" file extensions, indicating the potential manipulation or compression of dump files which might be exfiltrated later. Be cautious of legitimate uses of WinRAR from the command line that include \".dmp\" file references by mistake, as these may generate false positives. The threat level for this activity is considered high due to its potential role in sensitive data extraction scenarios."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Office applications executing a child process that includes directory traversal patterns. This could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Office applications executing a child process that includes directory traversal patterns, which could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE), you should: monitor the creation of processes on Windows systems, specifically focusing on those spawned by Microsoft Office applications such as Word, Excel, PowerPoint, Access, Publisher, Equation Editor, and Visio. Look for command lines that contain directory traversal patterns such as '../../../..' or '..\\..\\..\\..' or '..//..//..//..'. These patterns suggest an attempt to break out of the restricted directory to potentially execute malicious files or commands located in other directories. This behavior is highly indicative of an attack aiming to exploit vulnerabilities in Microsoft Office products, warranting a high level of concern due to the potential for remote code execution and the consequent exposure to a significant risk.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\msaccess.exe'\n            - '\\mspub.exe'\n            - '\\eqnedt32.exe'\n            - '\\visio.exe'\n        CommandLine|contains:\n            - '../../../..'\n            - '..\\..\\..\\..'\n            - '..//..//..//..'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\winword.exe'\n            - '\\excel.exe'\n            - '\\powerpnt.exe'\n            - '\\msaccess.exe'\n            - '\\mspub.exe'\n            - '\\eqnedt32.exe'\n            - '\\visio.exe'\n        CommandLine|contains:\n            - '../../../..'\n            - '..\\..\\..\\..'\n            - '..//..//..//..'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Office applications executing a child process that includes directory traversal patterns. This could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE)",
      "answer": "In order to detect Office applications executing a child process that includes directory traversal patterns, which could be an attempt to exploit CVE-2022-30190 (MSDT RCE) or CVE-2021-40444 (MSHTML RCE), you should: monitor the creation of processes on Windows systems, specifically focusing on those spawned by Microsoft Office applications such as Word, Excel, PowerPoint, Access, Publisher, Equation Editor, and Visio. Look for command lines that contain directory traversal patterns such as '../../../..' or '..\\..\\..\\..' or '..//..//..//..'. These patterns suggest an attempt to break out of the restricted directory to potentially execute malicious files or commands located in other directories. This behavior is highly indicative of an attack aiming to exploit vulnerabilities in Microsoft Office products, warranting a high level of concern due to the potential for remote code execution and the consequent exposure to a significant risk."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility, you should: monitor process creation logs in Windows systems for instances where command lines include the presence of 'accepteula', coupled with the parameters ' -u ' (user), ' -p ' (password), and a double-backslash ' \\\\\\\\' indicating a network path. This pattern is often observed in automated attacks leveraging PsExec for remote execution. It's important to keep an eye out for these specific command-line flags to identify suspicious activity, although it's also noted that there may be legitimate uses not known that could trigger false positives. The severity of identifying such patterns is considered high, due to the potential misuse of PsExec for malicious purposes on the network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Accepting EULA in commandline - often used in automated attacks\n        CommandLine|contains|all:\n            - 'accepteula'\n            - ' -u '\n            - ' -p '\n            - ' \\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Accepting EULA in commandline - often used in automated attacks\n        CommandLine|contains|all:\n            - 'accepteula'\n            - ' -u '\n            - ' -p '\n            - ' \\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility",
      "answer": "In order to detect potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility, you should: monitor process creation logs in Windows systems for instances where command lines include the presence of 'accepteula', coupled with the parameters ' -u ' (user), ' -p ' (password), and a double-backslash ' \\\\\\\\' indicating a network path. This pattern is often observed in automated attacks leveraging PsExec for remote execution. It's important to keep an eye out for these specific command-line flags to identify suspicious activity, although it's also noted that there may be legitimate uses not known that could trigger false positives. The severity of identifying such patterns is considered high, due to the potential misuse of PsExec for malicious purposes on the network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the sc.exe utility spawning by a user with Medium integrity level to change service ImagePath or FailureCommand, you should focus on monitoring process creation events on Windows systems. Specifically, look for instances where the sc.exe command is being executed by a non-administrative user (one operating at a 'Medium' integrity level). The key activities to monitor include attempts to modify a service's configuration\u2014this can be detected by the presence of both 'config' and 'binPath' in the sc.exe command line arguments, indicating a change to the service's image path. Alternatively, detecting the inclusion of both 'failure' and 'command' in the command line arguments points to a modification of the service's failure command settings. It's important to apply this rule with caution as there could be legitimate but unknown cases of these activities, though such scenarios are considered to have a high significance level due to their potential impact on security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    scbynonadmin:\n        Image|endswith: '\\sc.exe'\n        IntegrityLevel: 'Medium'\n    selection_binpath:\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n    selection_failure:\n        CommandLine|contains|all:\n            - 'failure'\n            - 'command'\n    condition: scbynonadmin and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    scbynonadmin:\n        Image|endswith: '\\sc.exe'\n        IntegrityLevel: 'Medium'\n    selection_binpath:\n        CommandLine|contains|all:\n            - 'config'\n            - 'binPath'\n    selection_failure:\n        CommandLine|contains|all:\n            - 'failure'\n            - 'command'\n    condition: scbynonadmin and 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand",
      "answer": "In order to detect the sc.exe utility spawning by a user with Medium integrity level to change service ImagePath or FailureCommand, you should focus on monitoring process creation events on Windows systems. Specifically, look for instances where the sc.exe command is being executed by a non-administrative user (one operating at a 'Medium' integrity level). The key activities to monitor include attempts to modify a service's configuration\u2014this can be detected by the presence of both 'config' and 'binPath' in the sc.exe command line arguments, indicating a change to the service's image path. Alternatively, detecting the inclusion of both 'failure' and 'command' in the command line arguments points to a modification of the service's failure command settings. It's important to apply this rule with caution as there could be legitimate but unknown cases of these activities, though such scenarios are considered to have a high significance level due to their potential impact on security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion, you should: Monitor for the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\DefenderCheck.exe' or the process description is 'DefenderCheck'. This activity highlights the execution of the DefenderCheck tool, which could potentially be used by adversaries to understand and evade detection by Microsoft Defender. Given the specific nature of this detection and the tool involved, false positives are considered unlikely, and such detections should be treated with a high level of concern due to their implications for anti-virus evasion efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\DefenderCheck.exe'\n        - Description: 'DefenderCheck'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\DefenderCheck.exe'\n        - Description: 'DefenderCheck'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion.",
      "answer": "In order to detect the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion, you should: Monitor for the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\DefenderCheck.exe' or the process description is 'DefenderCheck'. This activity highlights the execution of the DefenderCheck tool, which could potentially be used by adversaries to understand and evade detection by Microsoft Defender. Given the specific nature of this detection and the tool involved, false positives are considered unlikely, and such detections should be treated with a high level of concern due to their implications for anti-virus evasion efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempt of the vulnerability described in CVE-2021-4034..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempt of the vulnerability described in CVE-2021-4034, you should: monitor Linux systems using auditd for specific patterns of activity that are indicative of an attack. Look for audit logs where the process title (proctitle) is registered as '(null)' in close proximity to syscall events generated by the command `pkexec` executed from `/usr/bin/pkexec`. This pattern of activity is highly indicative of an exploitation attempt against the mentioned vulnerability, noting that legitimate use of `pkexec` with a null proctitle is highly unusual and thus should be regarded with suspicion. Although there is a possibility of false positives being recorded, they are considered unknown, and the risk level of this activity is classified as high due to the severity of the vulnerability being exploited. This detection focuses on observing for abnormal execution behavior associated with privilege escalation attempts typically employed by attackers exploiting this vulnerability.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_proctitle:\n        type: PROCTITLE\n        proctitle: '(null)'\n    selection_syscall:\n        type: SYSCALL\n        comm: pkexec\n        exe: '/usr/bin/pkexec'\n    condition: selection_proctitle |near selection_syscall\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_proctitle:\n        type: PROCTITLE\n        proctitle: '(null)'\n    selection_syscall:\n        type: SYSCALL\n        comm: pkexec\n        exe: '/usr/bin/pkexec'\n    condition: selection_proctitle |near selection_syscall\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "exploitation attempt of the vulnerability described in CVE-2021-4034.",
      "answer": "In order to detect exploitation attempt of the vulnerability described in CVE-2021-4034, you should: monitor Linux systems using auditd for specific patterns of activity that are indicative of an attack. Look for audit logs where the process title (proctitle) is registered as '(null)' in close proximity to syscall events generated by the command `pkexec` executed from `/usr/bin/pkexec`. This pattern of activity is highly indicative of an exploitation attempt against the mentioned vulnerability, noting that legitimate use of `pkexec` with a null proctitle is highly unusual and thus should be regarded with suspicion. Although there is a possibility of false positives being recorded, they are considered unknown, and the risk level of this activity is classified as high due to the severity of the vulnerability being exploited. This detection focuses on observing for abnormal execution behavior associated with privilege escalation attempts typically employed by attackers exploiting this vulnerability."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting command line parameters used by Hydra password guessing hack tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect command line parameters used by Hydra password guessing hack tool, you should look for process creation events on Windows systems where the command line includes certain patterns indicative of Hydra's usage. Specifically, look out for command line commands containing both '-u ' and '-p ' together. Additionally, watch for commands that include the keywords 'USER' and 'PASS', both surrounded by carets ('^'). These patterns are strongly associated with the attack method employed by the Hydra tool, which aims at guessing passwords through brute force or dictionary attacks. It is essential to be aware of potential false positives, which may arise from legitimate software that happens to use these keywords in its command line in a similar format. Given the high level of threat associated with this behavior, it's crucial to monitor for these indicators to effectively thwart attempts at unauthorized access through password guessing.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '-u '\n            - '-p '\n        CommandLine|contains:\n            - '^USER^'\n            - '^PASS^'\n    condition: selection\nfalsepositives:\n    - Software that uses the caret encased keywords PASS and USER in its command line\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '-u '\n            - '-p '\n        CommandLine|contains:\n            - '^USER^'\n            - '^PASS^'\n    condition: selection\nfalsepositives:\n    - Software that uses the caret encased keywords PASS and USER in its command line\nlevel: high\n",
      "question": "command line parameters used by Hydra password guessing hack tool",
      "answer": "In order to detect command line parameters used by Hydra password guessing hack tool, you should look for process creation events on Windows systems where the command line includes certain patterns indicative of Hydra's usage. Specifically, look out for command line commands containing both '-u ' and '-p ' together. Additionally, watch for commands that include the keywords 'USER' and 'PASS', both surrounded by carets ('^'). These patterns are strongly associated with the attack method employed by the Hydra tool, which aims at guessing passwords through brute force or dictionary attacks. It is essential to be aware of potential false positives, which may arise from legitimate software that happens to use these keywords in its command line in a similar format. Given the high level of threat associated with this behavior, it's crucial to monitor for these indicators to effectively thwart attempts at unauthorized access through password guessing."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PsExec service installation and execution events (service and Sysmon).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PsExec service installation and execution events (service and Sysmon), you should: Focus on monitoring the creation of named pipes, specifically targeting those associated with the PsExec service, which is known by its distinctive pipe name '\\PSEXESVC'. This detection mechanism is primarily applicable to Windows systems and requires the configuration of logging for Named Pipe Events, which can be done through Sysmon with Event IDs 17 and 18. It is essential to ensure that your Sysmon configuration is properly set up to capture these events, which can be achieved by referring to popular Sysmon configurations available online. Additionally, it is crucial to observe various fields associated with these events, including EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName, to gather comprehensive details about the suspicious activity. Be aware that there may be instances where the detection flags activities that are not malicious, categorized under unknown false positives. The severity of this rule is considered low, implying that while it represents a potential security risk, it might not always indicate a high-threat level attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: pipe_created\n    product: windows\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName: '\\PSEXESVC'\n    condition: selection\nfields:\n    - EventID\n    - CommandLine\n    - ParentCommandLine\n    - ServiceName\n    - ServiceFileName\n    - TargetFilename\n    - PipeName\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: pipe_created\n    product: windows\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName: '\\PSEXESVC'\n    condition: selection\nfields:\n    - EventID\n    - CommandLine\n    - ParentCommandLine\n    - ServiceName\n    - ServiceFileName\n    - TargetFilename\n    - PipeName\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "PsExec service installation and execution events (service and Sysmon)",
      "answer": "In order to detect PsExec service installation and execution events (service and Sysmon), you should: Focus on monitoring the creation of named pipes, specifically targeting those associated with the PsExec service, which is known by its distinctive pipe name '\\PSEXESVC'. This detection mechanism is primarily applicable to Windows systems and requires the configuration of logging for Named Pipe Events, which can be done through Sysmon with Event IDs 17 and 18. It is essential to ensure that your Sysmon configuration is properly set up to capture these events, which can be achieved by referring to popular Sysmon configurations available online. Additionally, it is crucial to observe various fields associated with these events, including EventID, CommandLine, ParentCommandLine, ServiceName, ServiceFileName, TargetFilename, and PipeName, to gather comprehensive details about the suspicious activity. Be aware that there may be instances where the detection flags activities that are not malicious, categorized under unknown false positives. The severity of this rule is considered low, implying that while it represents a potential security risk, it might not always indicate a high-threat level attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect download by BITS jobs via PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect download by BITS jobs via PowerShell, you should: Monitor the creation of processes on Windows systems. Specifically, focus on instances where either 'powershell.exe' or 'pwsh.exe' are being executed. It is critical to pay attention to the command line used during these executions and look for the presence of the 'Start-BitsTransfer' command. This command is a clear indicator of the Background Intelligent Transfer Service (BITS) being used, potentially to download files in the context of the PowerShell session. Important information such as the name of the computer and the user executing the command should also be logged. Despite the high importance of this monitoring, be aware of potential false positives, as not all usage of 'Start-BitsTransfer' might be malicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains: 'Start-BitsTransfer'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains: 'Start-BitsTransfer'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect download by BITS jobs via PowerShell",
      "answer": "In order to detect download by BITS jobs via PowerShell, you should: Monitor the creation of processes on Windows systems. Specifically, focus on instances where either 'powershell.exe' or 'pwsh.exe' are being executed. It is critical to pay attention to the command line used during these executions and look for the presence of the 'Start-BitsTransfer' command. This command is a clear indicator of the Background Intelligent Transfer Service (BITS) being used, potentially to download files in the context of the PowerShell session. Important information such as the name of the computer and the user executing the command should also be logged. Despite the high importance of this monitoring, be aware of potential false positives, as not all usage of 'Start-BitsTransfer' might be malicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect AD credential dumping using impacket secretdump HKTL. Based on the SIGMA rules/windows/builtin/win_impacket_secretdump.yml.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect AD credential dumping using impacket secretdump HKTL, you should focus on monitoring SMB file activities from Zeek logs. Specifically, look out for file activities where the file path contains a backslash '\\' and 'ADMIN$' indicating access to an administrative share typically used in this attack context. Additionally, be vigilant for files within the 'SYSTEM32\\' directory that have a '.tmp' extension, as these are often signs of illicit activity related to dumping credentials. It's important to note that while these indicators can be significant, there might be rare cases where they do not signify malicious behavior; however, such instances are currently unknown, lending a high level of confidence to these detection criteria. This approach aligns with understanding tactics and techniques such as Credential Access through Credential Dumping, leveraging the tools like the 'impacket secretdump' utility often used by attackers to extract sensitive information from a compromised system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: smb_files\ndetection:\n    selection:\n        path|contains|all:\n            - '\\'\n            - 'ADMIN$'\n        name|contains: 'SYSTEM32\\'\n        name|endswith: '.tmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: smb_files\ndetection:\n    selection:\n        path|contains|all:\n            - '\\'\n            - 'ADMIN$'\n        name|contains: 'SYSTEM32\\'\n        name|endswith: '.tmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect AD credential dumping using impacket secretdump HKTL. Based on the SIGMA rules/windows/builtin/win_impacket_secretdump.yml",
      "answer": "In order to detect AD credential dumping using impacket secretdump HKTL, you should focus on monitoring SMB file activities from Zeek logs. Specifically, look out for file activities where the file path contains a backslash '\\' and 'ADMIN$' indicating access to an administrative share typically used in this attack context. Additionally, be vigilant for files within the 'SYSTEM32\\' directory that have a '.tmp' extension, as these are often signs of illicit activity related to dumping credentials. It's important to note that while these indicators can be significant, there might be rare cases where they do not signify malicious behavior; however, such instances are currently unknown, lending a high level of confidence to these detection criteria. This approach aligns with understanding tactics and techniques such as Credential Access through Credential Dumping, leveraging the tools like the 'impacket secretdump' utility often used by attackers to extract sensitive information from a compromised system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of msiexec.exe from an uncommon directory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of msiexec.exe from an uncommon directory, you should: monitor the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\msiexec.exe' or the OriginalFileName is specified as '\\msiexec.exe'. However, it's crucial to exclude any occurrences that originate from common, legitimate directories for msiexec.exe, such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', and 'C:\\Windows\\WinSxS\\'. This approach helps in identifying potentially malicious activities where msiexec.exe is executed from directories that are not typically used for legitimate purposes, which is a tactic often employed in various attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: '\\msiexec.exe'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\msiexec.exe'\n        - OriginalFileName: '\\msiexec.exe'\n    filter:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of msiexec.exe from an uncommon directory",
      "answer": "In order to detect the execution of msiexec.exe from an uncommon directory, you should: monitor the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\msiexec.exe' or the OriginalFileName is specified as '\\msiexec.exe'. However, it's crucial to exclude any occurrences that originate from common, legitimate directories for msiexec.exe, such as 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', and 'C:\\Windows\\WinSxS\\'. This approach helps in identifying potentially malicious activities where msiexec.exe is executed from directories that are not typically used for legitimate purposes, which is a tactic often employed in various attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tampering of RDP Terminal Service/Server sensitive settings.\nSuch as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections', etc.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tampering of RDP Terminal Service/Server sensitive settings, such as allowing unauthorized users access to a system via 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections', etc., you should monitor Windows registry settings for specific changes that typically indicate an attempt to modify RDP-related security parameters. This includes tracking the modification of registry entries that control whether Remote Desktop connections are allowed ('fDenyTSConnections'), if multiple RDP sessions are permitted per user ('fSingleSessionPerUser'), and whether Network-Level Authentication (NLA) is required before establishing a remote desktop connection ('\\UserAuthentication'). Specifically, you should be alert for any activities that set these registry values to 'DWORD (0x00000000)', effectively enabling RDP connections, allowing multiple RDP sessions by the same user, or disabling NLA, which could compromise the security of the system. \n\nBear in mind that while monitoring these settings, certain legitimate administrative actions, such as group policy modifications, may trigger similar changes. Such instances should not be immediately deemed as malicious without further investigation. However, due to the sensitivity and potential security implications of these settings, any modifications should be scrutinized and possibly corroborated with other suspicious activities or configurations to confirm an actual threat.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith:\n            - '\\fDenyTSConnections' # Specifies whether Remote Desktop connections are enabled - When set to zero RDP is enabled\n            - '\\fSingleSessionPerUser' # When changed to 0 it allows multiple RDP sessions\n            - '\\UserAuthentication' # Specifies that Network-Level user authentication is not required before the remote desktop connection is established\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Some of the keys mentioned here could be modified by an administrator while setting group policy (it should be investigated either way)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith:\n            - '\\fDenyTSConnections' # Specifies whether Remote Desktop connections are enabled - When set to zero RDP is enabled\n            - '\\fSingleSessionPerUser' # When changed to 0 it allows multiple RDP sessions\n            - '\\UserAuthentication' # Specifies that Network-Level user authentication is not required before the remote desktop connection is established\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Some of the keys mentioned here could be modified by an administrator while setting group policy (it should be investigated either way)\nlevel: medium\n",
      "question": "tampering of RDP Terminal Service/Server sensitive settings.\nSuch as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections', etc.\n",
      "answer": "In order to detect tampering of RDP Terminal Service/Server sensitive settings, such as allowing unauthorized users access to a system via 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections', etc., you should monitor Windows registry settings for specific changes that typically indicate an attempt to modify RDP-related security parameters. This includes tracking the modification of registry entries that control whether Remote Desktop connections are allowed ('fDenyTSConnections'), if multiple RDP sessions are permitted per user ('fSingleSessionPerUser'), and whether Network-Level Authentication (NLA) is required before establishing a remote desktop connection ('\\UserAuthentication'). Specifically, you should be alert for any activities that set these registry values to 'DWORD (0x00000000)', effectively enabling RDP connections, allowing multiple RDP sessions by the same user, or disabling NLA, which could compromise the security of the system. \n\nBear in mind that while monitoring these settings, certain legitimate administrative actions, such as group policy modifications, may trigger similar changes. Such instances should not be immediately deemed as malicious without further investigation. However, due to the sensitivity and potential security implications of these settings, any modifications should be scrutinized and possibly corroborated with other suspicious activities or configurations to confirm an actual threat.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting access to DEWMODE webshell as described in FIREEYE report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect access to DEWMODE webshell as described in FIREEYE report, you should: Monitor your webserver logs for queries that match specific patterns indicating an attempt to interact with the DEWMODE webshell. These patterns are identified by searching for specific parameters in the query string of the URL. Two primary patterns are defined for detection:\n\n1. The query must contain all of the following elements: '?dwn=', '&fn=', and '.html?'.\n2. Alternatively, the query must include '&dwn=', '?fn=', and '.html?'.\n\nIf any of these patterns are detected in the query string of a URL request, it suggests that the DEWMODE webshell is being accessed or attempted to be accessed. It is essential to capture and analyze the client IP address and the server's response for further investigation because of the high severity level associated with this detection. Be aware that while this rule is crucial for identifying potential webshell access, there may be unknown false positives, hence additional verification might be required.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains|all:\n            - '?dwn='\n            - '&fn='\n            - '.html?'\n    selection2:\n        cs-uri-query|contains|all:\n            - '&dwn='\n            - '?fn='\n            - '.html?'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - response\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains|all:\n            - '?dwn='\n            - '&fn='\n            - '.html?'\n    selection2:\n        cs-uri-query|contains|all:\n            - '&dwn='\n            - '?fn='\n            - '.html?'\n    condition: 1 of selection*\nfields:\n    - client_ip\n    - response\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "access to DEWMODE webshell as described in FIREEYE report",
      "answer": "In order to detect access to DEWMODE webshell as described in FIREEYE report, you should: Monitor your webserver logs for queries that match specific patterns indicating an attempt to interact with the DEWMODE webshell. These patterns are identified by searching for specific parameters in the query string of the URL. Two primary patterns are defined for detection:\n\n1. The query must contain all of the following elements: '?dwn=', '&fn=', and '.html?'.\n2. Alternatively, the query must include '&dwn=', '?fn=', and '.html?'.\n\nIf any of these patterns are detected in the query string of a URL request, it suggests that the DEWMODE webshell is being accessed or attempted to be accessed. It is essential to capture and analyze the client IP address and the server's response for further investigation because of the high severity level associated with this detection. Be aware that while this rule is crucial for identifying potential webshell access, there may be unknown false positives, hence additional verification might be required."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an user assumed another user account..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user assumed another user account, you should: Monitor events from OneLogin, specifically focusing on the OneLogin event logs. Pay attention to events with an event_type_id of 3 within the onelogin.events service. This specific event type is indicative of an activity where one user account is possibly being assumed by another. It's crucial to analyze these events to discern any suspicious activity that could suggest unauthorized account usage, which could potentially lead to compromise. Though it's noted that there may be instances where activities are benign and thus labeled as unknown false positives, the overall threat level for this kind of detection is considered low. Keep an eye out for any anomalies in user behavior that could hint towards this type of account assumption.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: onelogin\n    service: onelogin.events\ndetection:\n    selection:\n        event_type_id: 3\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: onelogin\n    service: onelogin.events\ndetection:\n    selection:\n        event_type_id: 3\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "when an user assumed another user account.",
      "answer": "In order to detect when a user assumed another user account, you should: Monitor events from OneLogin, specifically focusing on the OneLogin event logs. Pay attention to events with an event_type_id of 3 within the onelogin.events service. This specific event type is indicative of an activity where one user account is possibly being assumed by another. It's crucial to analyze these events to discern any suspicious activity that could suggest unauthorized account usage, which could potentially lead to compromise. Though it's noted that there may be instances where activities are benign and thus labeled as unknown false positives, the overall threat level for this kind of detection is considered low. Keep an eye out for any anomalies in user behavior that could hint towards this type of account assumption."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Mimikatz MemSSP default log file creation.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Mimikatz MemSSP default log file creation, you should focus on monitoring file events within the Windows operating system. Specifically, look for any instances where a file is created with the name ending in 'mimilsa.log'. This particular filename is indicative of the Mimikatz MemSSP module operation, which is often used by attackers to extract plaintext passwords and other sensitive information from memory. The creation of this file is considered a critical indicator of compromise, and occurrences are unlikely to be false positives, highlighting the necessity of immediate investigation and response when this activity is detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: 'mimilsa.log'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: 'mimilsa.log'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "Mimikatz MemSSP default log file creation",
      "answer": "In order to detect Mimikatz MemSSP default log file creation, you should focus on monitoring file events within the Windows operating system. Specifically, look for any instances where a file is created with the name ending in 'mimilsa.log'. This particular filename is indicative of the Mimikatz MemSSP module operation, which is often used by attackers to extract plaintext passwords and other sensitive information from memory. The creation of this file is considered a critical indicator of compromise, and occurrences are unlikely to be false positives, highlighting the necessity of immediate investigation and response when this activity is detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares), you should monitor the creation of processes on Windows systems, particularly focusing on those instances where Outlook appears to be the parent application launching these processes. Specifically, look for cases where the child process (the executable image being launched) has its path starting with double backslashes `\\\\`, which typically indicates access to network resources, such as SMB or WebDAV shares. This scenario could signify a potentially malicious activity, where Outlook is being used to execute code from a remote location, possibly as part of a phishing attack or another form of compromise. Given the high risk associated with such behavior, it is marked with a high level of alert, although it's important to acknowledge that there could be unknown scenarios where this behavior might be legitimate.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\outlook.exe'\n        Image|startswith: '\\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\outlook.exe'\n        Image|startswith: '\\\\\\\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares).",
      "answer": "In order to detect a suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares), you should monitor the creation of processes on Windows systems, particularly focusing on those instances where Outlook appears to be the parent application launching these processes. Specifically, look for cases where the child process (the executable image being launched) has its path starting with double backslashes `\\\\`, which typically indicates access to network resources, such as SMB or WebDAV shares. This scenario could signify a potentially malicious activity, where Outlook is being used to execute code from a remote location, possibly as part of a phishing attack or another form of compromise. Given the high risk associated with such behavior, it is marked with a high level of alert, although it's important to acknowledge that there could be unknown scenarios where this behavior might be legitimate."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting AnyDesk Remote Desktop silent installation. Which can be used by attackers to gain remote access..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect AnyDesk Remote Desktop silent installation, which can be used by attackers to gain remote access, you should: Look for the creation of processes on Windows operating systems where the command line execution includes the specific arguments '--install', '--start-with-win', and '--silent'. These particular arguments indicate an attempt to install the AnyDesk software silently and configure it to start automatically with Windows, potentially without the user's knowledge. This behavior is noteworthy when monitoring for unauthorized remote access tools being deployed on systems. Key information to collect includes the command line that initiated the process, the parent process's command line, and the current directory from which the command was executed. While monitoring for these indicators, consider that legitimate deployments of AnyDesk for authorized remote work scenarios might also use these command-line arguments, representing potential false positives. This detection is significant due to its high level of implication for unauthorized access.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '--install'\n            - '--start-with-win'\n            - '--silent'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - Legitimate deployment of AnyDesk\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '--install'\n            - '--start-with-win'\n            - '--silent'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - Legitimate deployment of AnyDesk\nlevel: high\n",
      "question": "AnyDesk Remote Desktop silent installation. Which can be used by attackers to gain remote access.",
      "answer": "In order to detect AnyDesk Remote Desktop silent installation, which can be used by attackers to gain remote access, you should: Look for the creation of processes on Windows operating systems where the command line execution includes the specific arguments '--install', '--start-with-win', and '--silent'. These particular arguments indicate an attempt to install the AnyDesk software silently and configure it to start automatically with Windows, potentially without the user's knowledge. This behavior is noteworthy when monitoring for unauthorized remote access tools being deployed on systems. Key information to collect includes the command line that initiated the process, the parent process's command line, and the current directory from which the command was executed. While monitoring for these indicators, consider that legitimate deployments of AnyDesk for authorized remote work scenarios might also use these command-line arguments, representing potential false positives. This detection is significant due to its high level of implication for unauthorized access."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting WerFault creating a dump file with a name that indicates that the dump file could be an LSASS process memory, which contains user credentials.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect WerFault creating a dump file with a name that indicates that the dump file could be an LSASS process memory, which contains user credentials, you should: Monitor file events on Windows systems focusing on instances where the WerFault.exe program, located in C:\\WINDOWS\\system32, is involved in creating or modifying files. Pay particular attention to files that have 'lsass' or 'lsass.exe' in their names as part of their file paths. These specific activities are indicative of attempts to dump or access the LSASS process memory, which is a critical component of the Windows security subsystem holding user credentials. It's important to note that while monitoring these actions, the level of alert for such detections is classified as high due to the potentially malicious nature of accessing LSASS memory content, even though there may be instances where the activities are benign and thus could result in unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image: C:\\WINDOWS\\system32\\WerFault.exe\n        TargetFilename|contains:\n            - '\\lsass'\n            - 'lsass.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image: C:\\WINDOWS\\system32\\WerFault.exe\n        TargetFilename|contains:\n            - '\\lsass'\n            - 'lsass.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "WerFault creating a dump file with a name that indicates that the dump file could be an LSASS process memory, which contains user credentials",
      "answer": "In order to detect WerFault creating a dump file with a name that indicates that the dump file could be an LSASS process memory, which contains user credentials, you should: Monitor file events on Windows systems focusing on instances where the WerFault.exe program, located in C:\\WINDOWS\\system32, is involved in creating or modifying files. Pay particular attention to files that have 'lsass' or 'lsass.exe' in their names as part of their file paths. These specific activities are indicative of attempts to dump or access the LSASS process memory, which is a critical component of the Windows security subsystem holding user credentials. It's important to note that while monitoring these actions, the level of alert for such detections is classified as high due to the potentially malicious nature of accessing LSASS memory content, even though there may be instances where the activities are benign and thus could result in unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious and uncommon child processes of WmiPrvSE.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious and uncommon child processes of WmiPrvSE, you should: monitor the creation of processes on Windows systems, specifically looking for instances where the Windows Management Instrumentation Provider Service (WmiPrvSE.exe) spawns child processes. Pay particular attention to child processes that are typically associated with living off the land binaries and scripts (LOLBAS) or are otherwise suspicious in the context of WmiPrvSE.exe, such as certutil.exe, cscript.exe, mshta.exe, msiexec.exe, regsvr32.exe, rundll32.exe, verclsid.exe, and wscript.exe. Another critical set of detections involves monitoring for the command-line interpreter (cmd.exe) being spawned as a child process of WmiPrvSE.exe, particularly if the command line includes references to scripts or tools often used in attacks, like cscript, mshta, powershell, pwsh, regsvr32, rundll32, and wscript. Exclude any instances where WerFault.exe or additional instances of WmiPrvSE.exe are spawned, as these can be indicative of legitimate behavior or error conditions. It's important to act on these detections due to their high potential for being indicative of malicious activity, although there may be unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\wbem\\WmiPrvSE.exe'\n    selection_children_1:\n        # TODO: Add more LOLBINs or suspicious processes that make sens in your environment\n        Image|endswith:\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\verclsid.exe'\n            - '\\wscript.exe'\n    selection_children_2:\n        # This is in a separate selection due to the nature of FP generated with CMD\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains:\n            - 'cscript'\n            - 'mshta'\n            - 'powershell'\n            - 'pwsh'\n            - 'regsvr32'\n            - 'rundll32'\n            - 'wscript'\n    filter_werfault:\n        Image|endswith: '\\WerFault.exe'\n    filter_wmiprvse:\n        Image|endswith: '\\WmiPrvSE.exe' # In some legitimate case WmiPrvSE was seen spawning itself\n    condition: selection_parent and 1 of selection_children_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith: '\\wbem\\WmiPrvSE.exe'\n    selection_children_1:\n        # TODO: Add more LOLBINs or suspicious processes that make sens in your environment\n        Image|endswith:\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\msiexec.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\verclsid.exe'\n            - '\\wscript.exe'\n    selection_children_2:\n        # This is in a separate selection due to the nature of FP generated with CMD\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains:\n            - 'cscript'\n            - 'mshta'\n            - 'powershell'\n            - 'pwsh'\n            - 'regsvr32'\n            - 'rundll32'\n            - 'wscript'\n    filter_werfault:\n        Image|endswith: '\\WerFault.exe'\n    filter_wmiprvse:\n        Image|endswith: '\\WmiPrvSE.exe' # In some legitimate case WmiPrvSE was seen spawning itself\n    condition: selection_parent and 1 of selection_children_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious and uncommon child processes of WmiPrvSE",
      "answer": "In order to detect suspicious and uncommon child processes of WmiPrvSE, you should: monitor the creation of processes on Windows systems, specifically looking for instances where the Windows Management Instrumentation Provider Service (WmiPrvSE.exe) spawns child processes. Pay particular attention to child processes that are typically associated with living off the land binaries and scripts (LOLBAS) or are otherwise suspicious in the context of WmiPrvSE.exe, such as certutil.exe, cscript.exe, mshta.exe, msiexec.exe, regsvr32.exe, rundll32.exe, verclsid.exe, and wscript.exe. Another critical set of detections involves monitoring for the command-line interpreter (cmd.exe) being spawned as a child process of WmiPrvSE.exe, particularly if the command line includes references to scripts or tools often used in attacks, like cscript, mshta, powershell, pwsh, regsvr32, rundll32, and wscript. Exclude any instances where WerFault.exe or additional instances of WmiPrvSE.exe are spawned, as these can be indicative of legitimate behavior or error conditions. It's important to act on these detections due to their high potential for being indicative of malicious activity, although there may be unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Log4J Wstomcat process execution as seen in Mint Sandstorm activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Log4J Wstomcat process execution as seen in Mint Sandstorm activity, you should: Focus on monitoring process creation events within Windows systems. Specifically, look for instances where the Wstomcat service ('ws_tomcatservice.exe') is listed as the parent image and is responsible for starting the 'repadmin.exe' process. This particular pattern of activity is indicative of the tactics and techniques associated with Mint Sandstorm activity, where adversaries might exploit Log4J vulnerabilities through specific process execution chains. It is important to pay close attention to these events, although be mindful that there might be cases where similar activity does not signify malicious intent, but such instances are currently unknown. The severity of detecting this activity is considered high, underscoring the potential risk involved.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\ws_tomcatservice.exe'\n        Image|endswith: '\\repadmin.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\ws_tomcatservice.exe'\n        Image|endswith: '\\repadmin.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Log4J Wstomcat process execution as seen in Mint Sandstorm activity",
      "answer": "In order to detect Log4J Wstomcat process execution as seen in Mint Sandstorm activity, you should: Focus on monitoring process creation events within Windows systems. Specifically, look for instances where the Wstomcat service ('ws_tomcatservice.exe') is listed as the parent image and is responsible for starting the 'repadmin.exe' process. This particular pattern of activity is indicative of the tactics and techniques associated with Mint Sandstorm activity, where adversaries might exploit Log4J vulnerabilities through specific process execution chains. It is important to pay close attention to these events, although be mindful that there might be cases where similar activity does not signify malicious intent, but such instances are currently unknown. The severity of detecting this activity is considered high, underscoring the potential risk involved."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific command line of \"regsvr32\" where the \"calc\" keyword is used in conjunction with the \"/s\" flag. This behavior is often seen used by Qakbot.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a specific command line of \"regsvr32\" where the \"calc\" keyword is used in conjunction with the \"/s\" flag, a behavior often seen used by Qakbot, you should focus on monitoring process creation logs within Windows environments. Specifically, look for instances where the process image name ends with '\\regsvr32.exe'. Furthermore, in the command line arguments, there should be a presence of either ' /s' or ' -s', indicating silent operation, and these arguments should end with ' calc', highlighting the execution of the calculator application in a manner not typical for legitimate use. This detection is of high importance due to the unlikelihood of false positives, signifying that such activity is strongly indicative of malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains:\n            - ' /s'\n            - ' -s'\n        CommandLine|endswith: ' calc'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains:\n            - ' /s'\n            - ' -s'\n        CommandLine|endswith: ' calc'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "specific command line of \"regsvr32\" where the \"calc\" keyword is used in conjunction with the \"/s\" flag. This behavior is often seen used by Qakbot",
      "answer": "In order to detect a specific command line of \"regsvr32\" where the \"calc\" keyword is used in conjunction with the \"/s\" flag, a behavior often seen used by Qakbot, you should focus on monitoring process creation logs within Windows environments. Specifically, look for instances where the process image name ends with '\\regsvr32.exe'. Furthermore, in the command line arguments, there should be a presence of either ' /s' or ' -s', indicating silent operation, and these arguments should end with ' calc', highlighting the execution of the calculator application in a manner not typical for legitimate use. This detection is of high importance due to the unlikelihood of false positives, signifying that such activity is strongly indicative of malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting code fragments found in small and obfuscated AMSI bypass PowerShell scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect code fragments found in small and obfuscated AMSI bypass PowerShell scripts, you should: Focus on Windows platform, particularly monitoring PowerShell script activities where Script Block Logging is enabled. Identify scripts containing all the specific strings '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static', as these are indicative of attempts to bypass the Anti-Malware Scan Interface (AMSI) using obfuscation techniques. This detection strategy is of high importance due to the significant security risk posed by executing obfuscated scripts that attempt to evade malware detection mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "code fragments found in small and obfuscated AMSI bypass PowerShell scripts",
      "answer": "In order to detect code fragments found in small and obfuscated AMSI bypass PowerShell scripts, you should: Focus on Windows platform, particularly monitoring PowerShell script activities where Script Block Logging is enabled. Identify scripts containing all the specific strings '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static', as these are indicative of attempts to bypass the Anti-Malware Scan Interface (AMSI) using obfuscation techniques. This detection strategy is of high importance due to the significant security risk posed by executing obfuscated scripts that attempt to evade malware detection mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting handles requested to SAM registry hive.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect handles requested to SAM registry hive, you should monitor security logs from Windows systems. Look specifically for event ID 4656, which indicates an attempt to request a handle. Focus on instances where the object type is 'Key' and the name of the object ends with '\\SAM', as this suggests the Security Accounts Manager (SAM) registry hive is being targeted. Capture details such as the computer name, the domain name of the subject, the username of the subject, the process name, and the exact name of the object involved in the event. Be aware that while this detection is crucial for identifying potential security breaches, there may be cases where legitimate processes trigger these alerts, although such instances are not well-documented and thus labeled as unknown false positives. The severity level for these detections is considered high due to the sensitivity of the SAM registry hive, which stores critical system and user account information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4656\n        ObjectType: 'Key'\n        ObjectName|endswith: '\\SAM'\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\n    - ProcessName\n    - ObjectName\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4656\n        ObjectType: 'Key'\n        ObjectName|endswith: '\\SAM'\n    condition: selection\nfields:\n    - ComputerName\n    - SubjectDomainName\n    - SubjectUserName\n    - ProcessName\n    - ObjectName\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "handles requested to SAM registry hive",
      "answer": "In order to detect handles requested to SAM registry hive, you should monitor security logs from Windows systems. Look specifically for event ID 4656, which indicates an attempt to request a handle. Focus on instances where the object type is 'Key' and the name of the object ends with '\\SAM', as this suggests the Security Accounts Manager (SAM) registry hive is being targeted. Capture details such as the computer name, the domain name of the subject, the username of the subject, the process name, and the exact name of the object involved in the event. Be aware that while this detection is crucial for identifying potential security breaches, there may be cases where legitimate processes trigger these alerts, although such instances are not well-documented and thus labeled as unknown false positives. The severity level for these detections is considered high due to the sensitivity of the SAM registry hive, which stores critical system and user account information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities where adversaries install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor for the creation of processes on Windows systems where the command line contains specific indicators. These indicators include the use of 'Import-Certificate' along with ' -FilePath ' and the path 'Cert:\\LocalMachine\\Root', suggesting the installation of a certificate into the system's root store. Additionally, the command line may contain references to common temporary and user directories, such as '\\AppData\\Local\\Temp\\', ':\\Windows\\TEMP\\', '\\Desktop\\', '\\Downloads\\', '\\Perflogs\\', and ':\\Users\\Public\\'. These directories are often used by adversaries to temporarily store malicious files. Monitoring for these command-line patterns is crucial for identifying potentially malicious activities related to the installation of unauthorized root certificates. Such activities are flagged with a high level of concern due to their rare legitimate use, making false positives unlikely. This detection strategy is focused on identifying the tactics and techniques associated with credential access, persistence, and defense evasion by monitoring process creation logs in Windows environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Import-Certificate'\n            - ' -FilePath '\n            - 'Cert:\\LocalMachine\\Root'\n        CommandLine|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - ':\\Windows\\TEMP\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Perflogs\\'\n            - ':\\Users\\Public\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Import-Certificate'\n            - ' -FilePath '\n            - 'Cert:\\LocalMachine\\Root'\n        CommandLine|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - ':\\Windows\\TEMP\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Perflogs\\'\n            - ':\\Users\\Public\\'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.",
      "answer": "In order to detect activities where adversaries install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor for the creation of processes on Windows systems where the command line contains specific indicators. These indicators include the use of 'Import-Certificate' along with ' -FilePath ' and the path 'Cert:\\LocalMachine\\Root', suggesting the installation of a certificate into the system's root store. Additionally, the command line may contain references to common temporary and user directories, such as '\\AppData\\Local\\Temp\\', ':\\Windows\\TEMP\\', '\\Desktop\\', '\\Downloads\\', '\\Perflogs\\', and ':\\Users\\Public\\'. These directories are often used by adversaries to temporarily store malicious files. Monitoring for these command-line patterns is crucial for identifying potentially malicious activities related to the installation of unauthorized root certificates. Such activities are flagged with a high level of concern due to their rare legitimate use, making false positives unlikely. This detection strategy is focused on identifying the tactics and techniques associated with credential access, persistence, and defense evasion by monitoring process creation logs in Windows environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The infrastructure for management data and operations that enables local and remote management of Windows personal computers and servers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potentially malicious activities within the management data and operations infrastructure that enable both local and remote management of Windows PCs and servers, you should monitor PowerShell script execution with Script Block Logging enabled on Windows systems. Specifically, look for scripts containing the commands 'Get-WmiObject' or 'gwmi', which are used to query WMI (Windows Management Instrumentation) objects. These commands might be leveraged by attackers to gather sensitive information or perform reconnaissance within the target environment. However, it's important to exclude any instances where the script path ends with '\\CL_Utility.ps1' and the ScriptBlockText includes both 'function Get-FreeSpace' and the SQL query 'SELECT * FROM Win32_LogicalDisk WHERE MediaType=12', as this is considered a legitimate utility script usage. Due to the potential for legitimate PowerShell scripts to also use these commands, this detection should be considered low level, requiring further investigation to confirm as malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject'\n            - 'gwmi'\n    filter_cl_utility:\n        Path|endswith: '\\CL_Utility.ps1'\n        ScriptBlockText|contains|all:\n            - 'function Get-FreeSpace'\n            - 'SELECT * FROM Win32_LogicalDisk WHERE MediaType=12'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'Get-WmiObject'\n            - 'gwmi'\n    filter_cl_utility:\n        Path|endswith: '\\CL_Utility.ps1'\n        ScriptBlockText|contains|all:\n            - 'function Get-FreeSpace'\n            - 'SELECT * FROM Win32_LogicalDisk WHERE MediaType=12'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
      "question": "The infrastructure for management data and operations that enables local and remote management of Windows personal computers and servers",
      "answer": "In order to detect potentially malicious activities within the management data and operations infrastructure that enable both local and remote management of Windows PCs and servers, you should monitor PowerShell script execution with Script Block Logging enabled on Windows systems. Specifically, look for scripts containing the commands 'Get-WmiObject' or 'gwmi', which are used to query WMI (Windows Management Instrumentation) objects. These commands might be leveraged by attackers to gather sensitive information or perform reconnaissance within the target environment. However, it's important to exclude any instances where the script path ends with '\\CL_Utility.ps1' and the ScriptBlockText includes both 'function Get-FreeSpace' and the SQL query 'SELECT * FROM Win32_LogicalDisk WHERE MediaType=12', as this is considered a legitimate utility script usage. Due to the potential for legitimate PowerShell scripts to also use these commands, this detection should be considered low level, requiring further investigation to confirm as malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting discovery of domain trusts..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a discovery of domain trusts, you should: Monitor the creation of processes on Windows systems for executions of 'dsquery.exe' or 'nltest.exe' with specific command-line arguments indicating a search for domain trusts. Specifically, look for 'dsquery.exe' processes that include both '-filter' and 'trustedDomain' in the command line. Additionally, watch for 'nltest.exe' processes that include 'domain_trusts' in their command lines. It is important to note that while these behaviors can indicate an attacker's intent to discover domain trusts, they may also be part of legitimate system administration activities. Therefore, it's classified with a medium level of caution due to possible false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n      - Image|endswith: '\\dsquery.exe'\n        CommandLine|contains|all:\n            - '-filter'\n            - 'trustedDomain'\n      - Image|endswith: '\\nltest.exe'\n        CommandLine|contains: 'domain_trusts'\n    condition: selection\nfalsepositives:\n    - Administration of systems.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n      - Image|endswith: '\\dsquery.exe'\n        CommandLine|contains|all:\n            - '-filter'\n            - 'trustedDomain'\n      - Image|endswith: '\\nltest.exe'\n        CommandLine|contains: 'domain_trusts'\n    condition: selection\nfalsepositives:\n    - Administration of systems.\nlevel: medium\n",
      "question": "discovery of domain trusts.",
      "answer": "In order to detect a discovery of domain trusts, you should: Monitor the creation of processes on Windows systems for executions of 'dsquery.exe' or 'nltest.exe' with specific command-line arguments indicating a search for domain trusts. Specifically, look for 'dsquery.exe' processes that include both '-filter' and 'trustedDomain' in the command line. Additionally, watch for 'nltest.exe' processes that include 'domain_trusts' in their command lines. It is important to note that while these behaviors can indicate an attacker's intent to discover domain trusts, they may also be part of legitimate system administration activities. Therefore, it's classified with a medium level of caution due to possible false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting users trying to exploit sudo vulnerability reported in CVE-2019-14287.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect users trying to exploit the sudo vulnerability reported in CVE-2019-14287, you should focus on monitoring sudo service logs on Linux systems. Specifically, look for instances where the USER field in these logs matches either of two patterns: beginning with a dash followed by any characters ('#-*') or containing the numeric string '#*4294967295'. These patterns are indicative of attempts to exploit the mentioned vulnerability. Due to the critical nature of this vulnerability, any detection of these patterns should be treated with high urgency. False positives are considered unlikely in this context, suggesting that almost any detection based on these criteria is a potential exploitation attempt. This detection strategy is designed to protect against the exploitation of the sudo service, which falls under various attack tactics and techniques but specifically targets privilege escalation vulnerabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: sudo\ndetection:\n    selection_user:\n        USER:\n            - '#-*'\n            - '#*4294967295'\n    condition: selection_user\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: sudo\ndetection:\n    selection_user:\n        USER:\n            - '#-*'\n            - '#*4294967295'\n    condition: selection_user\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "users trying to exploit sudo vulnerability reported in CVE-2019-14287",
      "answer": "In order to detect users trying to exploit the sudo vulnerability reported in CVE-2019-14287, you should focus on monitoring sudo service logs on Linux systems. Specifically, look for instances where the USER field in these logs matches either of two patterns: beginning with a dash followed by any characters ('#-*') or containing the numeric string '#*4294967295'. These patterns are indicative of attempts to exploit the mentioned vulnerability. Due to the critical nature of this vulnerability, any detection of these patterns should be treated with high urgency. False positives are considered unlikely in this context, suggesting that almost any detection based on these criteria is a potential exploitation attempt. This detection strategy is designed to protect against the exploitation of the sudo service, which falls under various attack tactics and techniques but specifically targets privilege escalation vulnerabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS queries for subdomains used for upload to MEGA.io.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS queries for subdomains used for upload to MEGA.io, you should focus on monitoring DNS query logs within Windows environments. Specifically, scrutinize DNS queries for occurrences that include 'userstorage.mega.co.nz' in the query name. This activity can be indicative of uploads to the cloud storage service MEGA, which might be used by attackers to exfiltrate data. While performing this detection, be aware that there might be false positives including legitimate DNS requests to MEGA, especially if the service is used for business or personal file storage purposes. The threat level for this type of detection is considered high, suggesting that occurrences should be prioritized in your security monitoring efforts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'userstorage.mega.co.nz'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Mega\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'userstorage.mega.co.nz'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Mega\nlevel: high\n",
      "question": "DNS queries for subdomains used for upload to MEGA.io",
      "answer": "In order to detect DNS queries for subdomains used for upload to MEGA.io, you should focus on monitoring DNS query logs within Windows environments. Specifically, scrutinize DNS queries for occurrences that include 'userstorage.mega.co.nz' in the query name. This activity can be indicative of uploads to the cloud storage service MEGA, which might be used by attackers to exfiltrate data. While performing this detection, be aware that there might be false positives including legitimate DNS requests to MEGA, especially if the service is used for business or personal file storage purposes. The threat level for this type of detection is considered high, suggesting that occurrences should be prioritized in your security monitoring efforts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious PowerShell invocation command parameters.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious PowerShell invocation command parameters, you should monitor Windows PowerShell modules for specific command parameters that can indicate a malicious intent. Look for the presence of encoded command parameters, such as '-enc', '-EncodedCommand', or '-ec'. These parameters are often used by adversaries to obscure the actual commands being executed, making detection by security tools more difficult.\n\nAdditionally, pay attention to PowerShell commands executed with parameters indicating the command window should be hidden. These include '-w hidden', '-window hidden', '-windowstyle hidden', and '-w 1'. This technique is commonly used to avoid drawing the user's attention to potentially malicious activities occurring in the background.\n\nAlso, scrutinize for usage of non-interactive modes signified by '-noni' or '-noninteractive'. Attackers use this approach to execute scripts or commands without any prompts or indications to the user, allowing the attack to proceed undetected.\n\nIt's important to note that while these indicators can be highly suggestive of malicious activity, there can be legitimate cases where such command parameters are used for non-malicious purposes. Therefore, these detections might trigger false positives in the context of very special or sneaky PowerShell scripts used benignly.\n\nMonitoring for these signs is critical in identifying and thwarting attempts to leverage PowerShell for nefarious purposes, encompassing tactics and techniques such as execution, defense evasion, and potentially others depending on the context of the attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_encoded:\n        ContextInfo|contains:\n            - ' -enc '\n            - ' -EncodedCommand '\n            - ' -ec '\n    selection_hidden:\n        ContextInfo|contains:\n            - ' -w hidden '\n            - ' -window hidden '\n            - ' -windowstyle hidden '\n            - ' -w 1 '\n    selection_noninteractive:\n        ContextInfo|contains:\n            - ' -noni '\n            - ' -noninteractive '\n    condition: all of selection*\nfalsepositives:\n    - Very special / sneaky PowerShell scripts\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_encoded:\n        ContextInfo|contains:\n            - ' -enc '\n            - ' -EncodedCommand '\n            - ' -ec '\n    selection_hidden:\n        ContextInfo|contains:\n            - ' -w hidden '\n            - ' -window hidden '\n            - ' -windowstyle hidden '\n            - ' -w 1 '\n    selection_noninteractive:\n        ContextInfo|contains:\n            - ' -noni '\n            - ' -noninteractive '\n    condition: all of selection*\nfalsepositives:\n    - Very special / sneaky PowerShell scripts\nlevel: high\n",
      "question": "suspicious PowerShell invocation command parameters",
      "answer": "In order to detect suspicious PowerShell invocation command parameters, you should monitor Windows PowerShell modules for specific command parameters that can indicate a malicious intent. Look for the presence of encoded command parameters, such as '-enc', '-EncodedCommand', or '-ec'. These parameters are often used by adversaries to obscure the actual commands being executed, making detection by security tools more difficult.\n\nAdditionally, pay attention to PowerShell commands executed with parameters indicating the command window should be hidden. These include '-w hidden', '-window hidden', '-windowstyle hidden', and '-w 1'. This technique is commonly used to avoid drawing the user's attention to potentially malicious activities occurring in the background.\n\nAlso, scrutinize for usage of non-interactive modes signified by '-noni' or '-noninteractive'. Attackers use this approach to execute scripts or commands without any prompts or indications to the user, allowing the attack to proceed undetected.\n\nIt's important to note that while these indicators can be highly suggestive of malicious activity, there can be legitimate cases where such command parameters are used for non-malicious purposes. Therefore, these detections might trigger false positives in the context of very special or sneaky PowerShell scripts used benignly.\n\nMonitoring for these signs is critical in identifying and thwarting attempts to leverage PowerShell for nefarious purposes, encompassing tactics and techniques such as execution, defense evasion, and potentially others depending on the context of the attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SQL Injection attempts via GET requests in access logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SQL Injection attempts via GET requests in access logs, you should monitor web server logs for specific patterns indicative of such attacks. Focus on logs from web servers as the primary source of data. Look for GET requests that contain certain keywords or phrases often used in SQL injection attacks. These include:\n\n- Explicit 'SELECT' statements, which might appear URL-encoded as '=select ', '=select%20', '=select(', and variations thereof.\n- 'UNION SELECT' statements, including 'UNION%20SELECT', 'UNION ALL SELECT', and 'UNION%20ALL%20SELECT', which attackers use to combine results from multiple SELECT queries.\n- Attempts to concatenate strings within queries, indicated by 'CONCAT(0x'.\n- Usage of 'ORDER BY' clauses, either in plain text ('order by ') or URL-encoded ('order%20by%20').\n- Probing for 'information_schema.tables', which is a metadata table containing the names and other details of all tables in a database.\n- The presence of 'group_concat(', 'table_schema', 'select%28sleep%2810%29', which can be indicators of attempts to extract data or induce time delays in response.\n- The version of the database server being queried ('@@version').\n- Attempts to exploit logical weaknesses, such as \"'1'='1\" or its URL-encoded version, and variations of 'or 1=1#' to bypass authentication or authorization checks.\n- Queries attempting to select all records, via 'select * ' or 'select%20*%20'.\n\nExclude log entries with a 404 status code (`sc-status: 404`) as these requests did not result in a page or resource being found, and may reduce the number of false positives.\n\nPay attention to the origin of the requests by logging fields such as 'client_ip', 'vhost' (virtual host), 'url', and 'response'. These details will be crucial for investigating and mitigating any detected attacks.\n\nBe aware that there could be false positives from legitimate actions, such as Java scripts and CSS file requests, legitimate user searches in website search boxes, and internal vulnerability scanning activities. To reduce false positives, consider refining the detection mechanism by excluding patterns typical for benign requests or by adding more filters like specific user agent strings and additional response codes.\n\nOverall, monitoring for these patterns at a high level of vigilance is critical for identifying potential SQL Injection attacks conducted through GET requests in web server access logs.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    select_method:\n        cs-method: 'GET'\n    keywords:\n        - '=select '\n        - '=select%20'\n        - '=select('\n        - 'UNION SELECT'\n        - 'UNION%20SELECT'\n        - 'UNION ALL SELECT'\n        - 'UNION%20ALL%20SELECT'\n        - 'CONCAT(0x'\n        - 'order by '\n        - 'order%20by%20'\n        - 'information_schema.tables'\n        - 'group_concat('\n        - 'table_schema'\n        - 'select%28sleep%2810%29'\n        - '@@version'\n        - \"'1'='1\"\n        - '%271%27%3D%271'\n        - 'SELECTCHAR('\n        - 'select * '\n        - 'select%20*%20'\n        - 'or 1=1#'\n        - 'or%201=1#'\n    filter:\n        sc-status: 404\n    condition: select_method and keywords and not 1 of filter*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Java scripts and CSS Files\n    - User searches in search boxes of the respective website\n    - Internal vulnerability scanners can cause some serious FPs when used, if you experience a lot of FPs due to this think of adding more filters such as \"User Agent\" strings and more response codes\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    select_method:\n        cs-method: 'GET'\n    keywords:\n        - '=select '\n        - '=select%20'\n        - '=select('\n        - 'UNION SELECT'\n        - 'UNION%20SELECT'\n        - 'UNION ALL SELECT'\n        - 'UNION%20ALL%20SELECT'\n        - 'CONCAT(0x'\n        - 'order by '\n        - 'order%20by%20'\n        - 'information_schema.tables'\n        - 'group_concat('\n        - 'table_schema'\n        - 'select%28sleep%2810%29'\n        - '@@version'\n        - \"'1'='1\"\n        - '%271%27%3D%271'\n        - 'SELECTCHAR('\n        - 'select * '\n        - 'select%20*%20'\n        - 'or 1=1#'\n        - 'or%201=1#'\n    filter:\n        sc-status: 404\n    condition: select_method and keywords and not 1 of filter*\nfields:\n    - client_ip\n    - vhost\n    - url\n    - response\nfalsepositives:\n    - Java scripts and CSS Files\n    - User searches in search boxes of the respective website\n    - Internal vulnerability scanners can cause some serious FPs when used, if you experience a lot of FPs due to this think of adding more filters such as \"User Agent\" strings and more response codes\nlevel: high\n",
      "question": "SQL Injection attempts via GET requests in access logs",
      "answer": "In order to detect SQL Injection attempts via GET requests in access logs, you should monitor web server logs for specific patterns indicative of such attacks. Focus on logs from web servers as the primary source of data. Look for GET requests that contain certain keywords or phrases often used in SQL injection attacks. These include:\n\n- Explicit 'SELECT' statements, which might appear URL-encoded as '=select ', '=select%20', '=select(', and variations thereof.\n- 'UNION SELECT' statements, including 'UNION%20SELECT', 'UNION ALL SELECT', and 'UNION%20ALL%20SELECT', which attackers use to combine results from multiple SELECT queries.\n- Attempts to concatenate strings within queries, indicated by 'CONCAT(0x'.\n- Usage of 'ORDER BY' clauses, either in plain text ('order by ') or URL-encoded ('order%20by%20').\n- Probing for 'information_schema.tables', which is a metadata table containing the names and other details of all tables in a database.\n- The presence of 'group_concat(', 'table_schema', 'select%28sleep%2810%29', which can be indicators of attempts to extract data or induce time delays in response.\n- The version of the database server being queried ('@@version').\n- Attempts to exploit logical weaknesses, such as \"'1'='1\" or its URL-encoded version, and variations of 'or 1=1#' to bypass authentication or authorization checks.\n- Queries attempting to select all records, via 'select * ' or 'select%20*%20'.\n\nExclude log entries with a 404 status code (`sc-status: 404`) as these requests did not result in a page or resource being found, and may reduce the number of false positives.\n\nPay attention to the origin of the requests by logging fields such as 'client_ip', 'vhost' (virtual host), 'url', and 'response'. These details will be crucial for investigating and mitigating any detected attacks.\n\nBe aware that there could be false positives from legitimate actions, such as Java scripts and CSS file requests, legitimate user searches in website search boxes, and internal vulnerability scanning activities. To reduce false positives, consider refining the detection mechanism by excluding patterns typical for benign requests or by adding more filters like specific user agent strings and additional response codes.\n\nOverall, monitoring for these patterns at a high level of vigilance is critical for identifying potential SQL Injection attacks conducted through GET requests in web server access logs."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting powershell script installed as a Service.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a PowerShell script installed as a service, you should focus on monitoring Windows system logs, specifically targeting events logged by the Service Control Manager. Look for event ID 7045, which is indicative of a new service being installed on the system. Pay special attention to the service's image path. If the image path contains references to 'powershell' or 'pwsh', it may suggest that a PowerShell script is being installed as a service, a common technique utilized by adversaries to maintain persistence on a compromised system or execute malicious scripts. It's important to note that while this detection strategy is significant, it may also yield unknown false positives due to legitimate uses of PowerShell scripts as services in some environments. Therefore, the analysis level for this kind of detection is considered high due to the potentially severe implications of PowerShell scripts being maliciously installed as services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains:\n            - 'powershell'\n            - 'pwsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ImagePath|contains:\n            - 'powershell'\n            - 'pwsh'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "powershell script installed as a Service",
      "answer": "In order to detect a PowerShell script installed as a service, you should focus on monitoring Windows system logs, specifically targeting events logged by the Service Control Manager. Look for event ID 7045, which is indicative of a new service being installed on the system. Pay special attention to the service's image path. If the image path contains references to 'powershell' or 'pwsh', it may suggest that a PowerShell script is being installed as a service, a common technique utilized by adversaries to maintain persistence on a compromised system or execute malicious scripts. It's important to note that while this detection strategy is significant, it may also yield unknown false positives due to legitimate uses of PowerShell scripts as services in some environments. Therefore, the analysis level for this kind of detection is considered high due to the potentially severe implications of PowerShell scripts being maliciously installed as services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of Environment Variables to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of environment variables to execute PowerShell, you should focus on monitoring process creation events on Windows systems. Look for the activation of the command line interface (`cmd.exe`) with specific patterns that indicate an attempt to hide the true nature of the commands being executed. Specifically, watch for commands that include sequences such as \"cmd\", \"/c\" or \"/r\", followed closely by a \"set\" command. The presence of the \"-f\" argument within these commands is another critical indicator. \n\nThese command lines often involve complex expressions that dynamically construct and execute PowerShell commands, making use of environment variables in a way that is not straightforward. The intention is to bypass detection mechanisms by disguising the command's functionality. This technique might include the downloading and execution of malicious scripts through PowerShell, initiated in an obscured manner via the command line interface.\n\nIt's important to consider any matches to these patterns with a high level of suspicion, although there's a possibility of encountering scenarios where similar commands are used for legitimate purposes (though such cases may be rare). As these activities are directly related to techniques used for execution and defense evasion, they are associated with MITRE ATT&CK tactics such as Execution and Defense Evasion. \n\nMonitoring for these patterns requires a vigilant approach to analyzing process creation logs and a readiness to investigate occurrences that match these criteria, given the high potential for these actions to be part of a malicious operation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # CommandLine|re: '.*cmd.{0,5}(?:\\/c|\\/r)(?:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?:.*\\)){1,}.*\\\"'\n        # Example 1: C:\\winDoWs\\SySTeM32\\cmd.Exe /C\"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\\\"{2}{3}{0}{1}\\\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\\\"IN`VO`KecOmMaND\\\".\\\"inVo`KES`crIPt\\\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\\\"{1}{4}{2}{3}{0}\\\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \\\"{0}{1}\\\"-f'n','oti' ),( \\\"{0}{1}\\\" -f'pRoC','esS') )) )\"\n        # Example 2: cMD.exe /C \"seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\\\"{1}{0}{2}{3}\\\" -f 'eT-vaR','G','iab','lE' ) (\\\"{0}{1}\\\" -f '*m','DR*' ) ).\\\"na`ME\\\"[3,11,2]-JOIN'' ) ( ( ^&(\\\"{0}{1}\\\" -f'g','CI' ) (\\\"{0}{1}\\\" -f 'ENV',':SlDb' ) ).\\\"VA`luE\\\" ) \"\n        CommandLine|contains|all:\n            - 'cmd'\n            - '\"set'\n            - '-f'\n        CommandLine|contains:\n            - '/c'\n            - '/r'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # CommandLine|re: '.*cmd.{0,5}(?:\\/c|\\/r)(?:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?:.*\\)){1,}.*\\\"'\n        # Example 1: C:\\winDoWs\\SySTeM32\\cmd.Exe /C\"SET NOtI=Invoke-Expression (New-Object Net.WebClient).DownloadString&& PowERshElL -NOl SET-iteM ( 'VAR' + 'i'+ 'A' + 'blE:Ao6' + 'I0') ( [TYpe](\\\"{2}{3}{0}{1}\\\"-F 'iRoN','mENT','e','nv') ) ; ${exECUtIONCOnTEXT}.\\\"IN`VO`KecOmMaND\\\".\\\"inVo`KES`crIPt\\\"( ( ( GEt-VAriAble ( 'a' + 'o6I0') -vaLU )::(\\\"{1}{4}{2}{3}{0}\\\" -f'e','gETenvIR','NtvaRIa','BL','ONme' ).Invoke(( \\\"{0}{1}\\\"-f'n','oti' ),( \\\"{0}{1}\\\" -f'pRoC','esS') )) )\"\n        # Example 2: cMD.exe /C \"seT SlDb=Invoke-Expression (New-Object Net.WebClient).DownloadString&& pOWErShell .(( ^&(\\\"{1}{0}{2}{3}\\\" -f 'eT-vaR','G','iab','lE' ) (\\\"{0}{1}\\\" -f '*m','DR*' ) ).\\\"na`ME\\\"[3,11,2]-JOIN'' ) ( ( ^&(\\\"{0}{1}\\\" -f'g','CI' ) (\\\"{0}{1}\\\" -f 'ENV',':SlDb' ) ).\\\"VA`luE\\\" ) \"\n        CommandLine|contains|all:\n            - 'cmd'\n            - '\"set'\n            - '-f'\n        CommandLine|contains:\n            - '/c'\n            - '/r'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of Environment Variables to execute PowerShell",
      "answer": "In order to detect obfuscated use of environment variables to execute PowerShell, you should focus on monitoring process creation events on Windows systems. Look for the activation of the command line interface (`cmd.exe`) with specific patterns that indicate an attempt to hide the true nature of the commands being executed. Specifically, watch for commands that include sequences such as \"cmd\", \"/c\" or \"/r\", followed closely by a \"set\" command. The presence of the \"-f\" argument within these commands is another critical indicator. \n\nThese command lines often involve complex expressions that dynamically construct and execute PowerShell commands, making use of environment variables in a way that is not straightforward. The intention is to bypass detection mechanisms by disguising the command's functionality. This technique might include the downloading and execution of malicious scripts through PowerShell, initiated in an obscured manner via the command line interface.\n\nIt's important to consider any matches to these patterns with a high level of suspicion, although there's a possibility of encountering scenarios where similar commands are used for legitimate purposes (though such cases may be rare). As these activities are directly related to techniques used for execution and defense evasion, they are associated with MITRE ATT&CK tactics such as Execution and Defense Evasion. \n\nMonitoring for these patterns requires a vigilant approach to analyzing process creation logs and a readiness to investigate occurrences that match these criteria, given the high potential for these actions to be part of a malicious operation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"find\" binary in a suspicious manner to perform discovery.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of \"find\" binary in a suspicious manner to perform discovery, you should focus on monitoring the creation of processes on Linux systems. Specifically, look out for processes that are being created where the name of the binary ends with '/find'. This indication focuses on the usage of the \"find\" command which is deployed in potentially malicious ways. The command lines to pay close attention to include those containing permission-related flags such as '-perm -4000', '-perm -2000', '-perm 0777', '-perm -222', '-perm -o w', '-perm -o x', '-perm -u=s', and '-perm -g=s'. These flags are typically used to search for files with specific permissions, which can be an indicator of an attacker trying to identify sensitive or executable files, modify file permissions, or locate files that can be written to or executed for exploitation purposes. Not all uses of these command-line options are malicious, but their presence, especially when combined, can signify an attempt at reconnaissance or preparation for further attacks. As with any detection mechanism, it's important to consider the context in which these commands are used to minimize false positives. The level of threat associated with this activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/find'\n        CommandLine|contains:\n            - '-perm -4000'\n            - '-perm -2000'\n            - '-perm 0777'\n            - '-perm -222'\n            - '-perm -o w'\n            - '-perm -o x'\n            - '-perm -u=s'\n            - '-perm -g=s'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/find'\n        CommandLine|contains:\n            - '-perm -4000'\n            - '-perm -2000'\n            - '-perm 0777'\n            - '-perm -222'\n            - '-perm -o w'\n            - '-perm -o x'\n            - '-perm -u=s'\n            - '-perm -g=s'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "usage of \"find\" binary in a suspicious manner to perform discovery",
      "answer": "In order to detect usage of \"find\" binary in a suspicious manner to perform discovery, you should focus on monitoring the creation of processes on Linux systems. Specifically, look out for processes that are being created where the name of the binary ends with '/find'. This indication focuses on the usage of the \"find\" command which is deployed in potentially malicious ways. The command lines to pay close attention to include those containing permission-related flags such as '-perm -4000', '-perm -2000', '-perm 0777', '-perm -222', '-perm -o w', '-perm -o x', '-perm -u=s', and '-perm -g=s'. These flags are typically used to search for files with specific permissions, which can be an indicator of an attacker trying to identify sensitive or executable files, modify file permissions, or locate files that can be written to or executed for exploitation purposes. Not all uses of these command-line options are malicious, but their presence, especially when combined, can signify an attempt at reconnaissance or preparation for further attacks. As with any detection mechanism, it's important to consider the context in which these commands are used to minimize false positives. The level of threat associated with this activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting conditional access changes..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to monitor and alert on conditional access changes, you should focus on the audit logs from Azure products. Specifically, keep an eye out for logs that record the message \"Add conditional access policy\". This action could indicate an attempt to modify access controls, which can impact the security posture of your environment. However, be mindful of potential false positives which might arise from misconfigured role permissions or legitimate but unexpected changes from certain users, user agents, or hostnames in your environment. The significance of these logs are considered to be of medium level, suggesting that while they are important to track, they should be contextualized within the broader security operations of your organization.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add conditional access policy\n    condition: selection\nfalsepositives:\n    - Misconfigured role permissions\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add conditional access policy\n    condition: selection\nfalsepositives:\n    - Misconfigured role permissions\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\nlevel: medium\n",
      "question": "conditional access changes.",
      "answer": "In order to monitor and alert on conditional access changes, you should focus on the audit logs from Azure products. Specifically, keep an eye out for logs that record the message \"Add conditional access policy\". This action could indicate an attempt to modify access controls, which can impact the security posture of your environment. However, be mindful of potential false positives which might arise from misconfigured role permissions or legitimate but unexpected changes from certain users, user agents, or hostnames in your environment. The significance of these logs are considered to be of medium level, suggesting that while they are important to track, they should be contextualized within the broader security operations of your organization."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Backdooring domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to backdoor domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer, you should: Monitor Windows security logs for event IDs related to changes in directory services. Specifically, watch for event ID 5136, which indicates a modification to an Active Directory object. This event becomes significant when the 'ntSecurityDescriptor' attribute is altered, especially if the change involves specific GUIDs ('1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'). These GUIDs represent permissions often sought in attacks aiming to grant DCSync rights, which could enable adversaries to replicate the contents of Active Directory, including password hashes, potentially leading to domain-wide escalation of privileges. Be sure to exclude events that pertain to 'dnsNode', 'dnsZoneScope', and 'dnsZone' object classes, as changes to these objects are less likely to be related to the described attack scenario.\n\nWhen investigating potential security events, it's important to consider the context of detected changes. For example, the creation of a new Domain Controller computer account could trigger similar alerts. When such events are detected, verify the user or machine account involved by inspecting the SID within the 'AttributeValue' of event 5136 to determine whether it's a regular user or Domain Controller computer account. This attack and defense technique typically involves MITRE ATT&CK tactics and techniques such as Privilege Escalation and Credential Access, focusing on replicating directory services to extract sensitive information like password hashes. Keep the alert level high due to the significant impact of successfully executing this type of attack.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)\ndetection:\n    selection:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'ntSecurityDescriptor'\n        AttributeValue|contains:\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '89e95b76-444d-4c62-991a-0facbeda640c'\n    filter1:\n        ObjectClass:\n            - 'dnsNode'\n            - 'dnsZoneScope'\n            - 'dnsZone'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - New Domain Controller computer account, check user SIDs within the value attribute of event 5136 and verify if it's a regular user or DC computer account.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)\ndetection:\n    selection:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'ntSecurityDescriptor'\n        AttributeValue|contains:\n            - '1131f6ad-9c07-11d1-f79f-00c04fc2dcd2'\n            - '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2'\n            - '89e95b76-444d-4c62-991a-0facbeda640c'\n    filter1:\n        ObjectClass:\n            - 'dnsNode'\n            - 'dnsZoneScope'\n            - 'dnsZone'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - New Domain Controller computer account, check user SIDs within the value attribute of event 5136 and verify if it's a regular user or DC computer account.\nlevel: high\n",
      "question": "Backdooring domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer",
      "answer": "In order to backdoor domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer, you should: Monitor Windows security logs for event IDs related to changes in directory services. Specifically, watch for event ID 5136, which indicates a modification to an Active Directory object. This event becomes significant when the 'ntSecurityDescriptor' attribute is altered, especially if the change involves specific GUIDs ('1131f6ad-9c07-11d1-f79f-00c04fc2dcd2', '1131f6aa-9c07-11d1-f79f-00c04fc2dcd2', '89e95b76-444d-4c62-991a-0facbeda640c'). These GUIDs represent permissions often sought in attacks aiming to grant DCSync rights, which could enable adversaries to replicate the contents of Active Directory, including password hashes, potentially leading to domain-wide escalation of privileges. Be sure to exclude events that pertain to 'dnsNode', 'dnsZoneScope', and 'dnsZone' object classes, as changes to these objects are less likely to be related to the described attack scenario.\n\nWhen investigating potential security events, it's important to consider the context of detected changes. For example, the creation of a new Domain Controller computer account could trigger similar alerts. When such events are detected, verify the user or machine account involved by inspecting the SID within the 'AttributeValue' of event 5136 to determine whether it's a regular user or Domain Controller computer account. This attack and defense technique typically involves MITRE ATT&CK tactics and techniques such as Privilege Escalation and Credential Access, focusing on replicating directory services to extract sensitive information like password hashes. Keep the alert level high due to the significant impact of successfully executing this type of attack."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon process or a process located in a suspicious directory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon process or a process located in a suspicious directory, you should monitor Windows file events for the creation of files ending with \"\\ntds.dit\". Additionally, pay attention to the execution of specific processes that could be involved in unauthorized creation or manipulation of such files. These processes include 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', 'wscript.exe', 'wsl.exe', and 'wt.exe'. It's particularly noteworthy when these processes are executed from unusual paths such as directories within '\\AppData\\', '\\Temp\\', '\\Public\\', and '\\PerfLogs\\'. This behavior is indicative of potential malicious activity, as normal operations do not typically involve direct interaction with the \"ntds.dit\" file by these executables, especially from the specified directory paths. This monitoring strategy is aimed at identifying potentially unauthorized and malicious attempts to access or manipulate the Active Directory Database, thereby enhancing the detection of advanced attacks targeting domain credentials and network security infrastructure.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_ntds:\n        TargetFilename|endswith: '\\ntds.dit'\n    selection_process_img:\n        Image|endswith:\n            # Add more suspicious processes as you see fit\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            - '\\wt.exe'\n    selection_process_paths:\n        Image|contains:\n            - '\\AppData\\'\n            - '\\Temp\\'\n            - '\\Public\\'\n            - '\\PerfLogs\\'\n    condition: selection_ntds and 1 of selection_process_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection_ntds:\n        TargetFilename|endswith: '\\ntds.dit'\n    selection_process_img:\n        Image|endswith:\n            # Add more suspicious processes as you see fit\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            - '\\wt.exe'\n    selection_process_paths:\n        Image|contains:\n            - '\\AppData\\'\n            - '\\Temp\\'\n            - '\\Public\\'\n            - '\\PerfLogs\\'\n    condition: selection_ntds and 1 of selection_process_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon process or a process located in a suspicious directory",
      "answer": "In order to detect the creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon process or a process located in a suspicious directory, you should monitor Windows file events for the creation of files ending with \"\\ntds.dit\". Additionally, pay attention to the execution of specific processes that could be involved in unauthorized creation or manipulation of such files. These processes include 'cmd.exe', 'cscript.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', 'regsvr32.exe', 'rundll32.exe', 'wscript.exe', 'wsl.exe', and 'wt.exe'. It's particularly noteworthy when these processes are executed from unusual paths such as directories within '\\AppData\\', '\\Temp\\', '\\Public\\', and '\\PerfLogs\\'. This behavior is indicative of potential malicious activity, as normal operations do not typically involve direct interaction with the \"ntds.dit\" file by these executables, especially from the specified directory paths. This monitoring strategy is aimed at identifying potentially unauthorized and malicious attempts to access or manipulate the Active Directory Database, thereby enhancing the detection of advanced attacks targeting domain credentials and network security infrastructure."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DLL sideloading of \"dbgcore.dll\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DLL sideloading of \"dbgcore.dll\", you should monitor the loading of images within Windows environments, specifically focusing on instances where \"dbgcore.dll\" is loaded in a manner inconsistent with standard operations. This involves observing if the \"dbgcore.dll\" file is loaded in an unusual way or from suspicious locations that do not include common directories such as \"C:\\Program Files (x86)\\\", \"C:\\Program Files\\\", \"C:\\Windows\\SoftwareDistribution\\\", \"C:\\Windows\\System32\\\", \"C:\\Windows\\SystemTemp\\\", \"C:\\Windows\\SysWOW64\\\", and \"C:\\Windows\\WinSxS\\\". Additionally, an exception is made for instances where \"dbgcore.dll\" is loaded from a path ending with \"\\Steam\\bin\\cef\\cef.win7x64\\dbgcore.dll\" to minimize false positives from legitimate applications, including certain games that may use this library. The goal is to capture unusual activities that could indicate an attacker is attempting to disguise malicious activities by leveraging the sideloading of the \"dbgcore.dll\" file, a technique often employed to bypass security measures. It is important to note that some legitimate applications may trigger this detection by loading their own versions of \"dbgcore.dll\" from non-standard locations, which should be considered when evaluating alerts. The severity level for this detection has been set to medium, reflecting the balance between the potential risk of the activity and the likelihood of false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\dbgcore.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SystemTemp\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    filter_optional_steam:\n        ImageLoaded|endswith: '\\Steam\\bin\\cef\\cef.win7x64\\dbgcore.dll'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate applications loading their own versions of the DLL mentioned in this rule\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|endswith: '\\dbgcore.dll'\n    filter_main_generic:\n        ImageLoaded|startswith:\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SystemTemp\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n    filter_optional_steam:\n        ImageLoaded|endswith: '\\Steam\\bin\\cef\\cef.win7x64\\dbgcore.dll'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Legitimate applications loading their own versions of the DLL mentioned in this rule\nlevel: medium\n",
      "question": "DLL sideloading of \"dbgcore.dll\"",
      "answer": "In order to detect DLL sideloading of \"dbgcore.dll\", you should monitor the loading of images within Windows environments, specifically focusing on instances where \"dbgcore.dll\" is loaded in a manner inconsistent with standard operations. This involves observing if the \"dbgcore.dll\" file is loaded in an unusual way or from suspicious locations that do not include common directories such as \"C:\\Program Files (x86)\\\", \"C:\\Program Files\\\", \"C:\\Windows\\SoftwareDistribution\\\", \"C:\\Windows\\System32\\\", \"C:\\Windows\\SystemTemp\\\", \"C:\\Windows\\SysWOW64\\\", and \"C:\\Windows\\WinSxS\\\". Additionally, an exception is made for instances where \"dbgcore.dll\" is loaded from a path ending with \"\\Steam\\bin\\cef\\cef.win7x64\\dbgcore.dll\" to minimize false positives from legitimate applications, including certain games that may use this library. The goal is to capture unusual activities that could indicate an attacker is attempting to disguise malicious activities by leveraging the sideloading of the \"dbgcore.dll\" file, a technique often employed to bypass security measures. It is important to note that some legitimate applications may trigger this detection by loading their own versions of \"dbgcore.dll\" from non-standard locations, which should be considered when evaluating alerts. The severity level for this detection has been set to medium, reflecting the balance between the potential risk of the activity and the likelihood of false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious RDP session redirect using tscon.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious RDP session redirect using tscon.exe, you should: Focus on monitoring the creation of processes within Windows systems. Specifically, look for instances where the command line invocation includes the parameter ' /dest:rdp-tcp#' which is indicative of an attempt to redirect a Remote Desktop Protocol (RDP) session using the utility tscon.exe. Such activity is usually not common in day-to-day operations and could signify malicious intent, especially tactics that involve gaining or exercising control over remote systems. The importance of identifying this behavior is marked as high due to the potential for unauthorized access and control over targeted systems. There are no known benign instances automatically associated with this behavior, but care should be taken to verify the context of detections to minimize false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /dest:rdp-tcp#'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /dest:rdp-tcp#'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious RDP session redirect using tscon.exe",
      "answer": "In order to detect a suspicious RDP session redirect using tscon.exe, you should: Focus on monitoring the creation of processes within Windows systems. Specifically, look for instances where the command line invocation includes the parameter ' /dest:rdp-tcp#' which is indicative of an attempt to redirect a Remote Desktop Protocol (RDP) session using the utility tscon.exe. Such activity is usually not common in day-to-day operations and could signify malicious intent, especially tactics that involve gaining or exercising control over remote systems. The importance of identifying this behavior is marked as high due to the potential for unauthorized access and control over targeted systems. There are no known benign instances automatically associated with this behavior, but care should be taken to verify the context of detections to minimize false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting rare use of the command line tool shutdown to logoff a user.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the rare use of the command line tool shutdown to logoff a user, you should: Monitor for the creation of processes within Windows environments, specifically focusing on instances where the process image name ends with '\\shutdown.exe' and the command line includes the argument '/l'. This activity is uncommon and may indicate an attempt to discreetly log off a user. It's important to note that while this detection is set at a medium level due to its rarity, false positives are a possibility and unknown factors may influence the accuracy of detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains: '/l'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\shutdown.exe'\n        CommandLine|contains: '/l'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "rare use of the command line tool shutdown to logoff a user",
      "answer": "In order to detect the rare use of the command line tool shutdown to logoff a user, you should: Monitor for the creation of processes within Windows environments, specifically focusing on instances where the process image name ends with '\\shutdown.exe' and the command line includes the argument '/l'. This activity is uncommon and may indicate an attempt to discreetly log off a user. It's important to note that while this detection is set at a medium level due to its rarity, false positives are a possibility and unknown factors may influence the accuracy of detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting setting a custom URL for OneDriveStandaloneUpdater.exe to download a file from the Internet without executing any\nanomalous executables with suspicious arguments. The downloaded file will be in C:\\Users\\redacted\\AppData\\Local\\Microsoft\\OneDrive\\StandaloneUpdaterreSignInSettingsConfig.json\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect setting a custom URL for OneDriveStandaloneUpdater.exe to download a file from the Internet without executing any anomalous executables with suspicious arguments, you should: focus on monitoring registry set operations within Windows systems. Specifically, you need to watch for events where the SetValue action is taken on the registry. The critical path to keep an eye on is any modification to '\\SOFTWARE\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC' in the registry. It is essential because any changes to this registry entry may indicate an attempt to redirect the OneDrive standalone updater to download potentially malicious files from a custom URL. This monitoring approach does not expect known false positives; however, it remains crucial to maintain vigilance for any unknown falsepositives that may arise. The detection of such a configuration change is deemed to have a high level of importance due to its potential misuse in cyber attacks, specifically targeting how software updates and configurations can be manipulated to facilitate unauthorized downloads from the internet.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "setting a custom URL for OneDriveStandaloneUpdater.exe to download a file from the Internet without executing any\nanomalous executables with suspicious arguments. The downloaded file will be in C:\\Users\\redacted\\AppData\\Local\\Microsoft\\OneDrive\\StandaloneUpdaterreSignInSettingsConfig.json\n",
      "answer": "In order to detect setting a custom URL for OneDriveStandaloneUpdater.exe to download a file from the Internet without executing any anomalous executables with suspicious arguments, you should: focus on monitoring registry set operations within Windows systems. Specifically, you need to watch for events where the SetValue action is taken on the registry. The critical path to keep an eye on is any modification to '\\SOFTWARE\\Microsoft\\OneDrive\\UpdateOfficeConfig\\UpdateRingSettingURLFromOC' in the registry. It is essential because any changes to this registry entry may indicate an attempt to redirect the OneDrive standalone updater to download potentially malicious files from a custom URL. This monitoring approach does not expect known false positives; however, it remains crucial to maintain vigilance for any unknown falsepositives that may arise. The detection of such a configuration change is deemed to have a high level of importance due to its potential misuse in cyber attacks, specifically targeting how software updates and configurations can be manipulated to facilitate unauthorized downloads from the internet."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using a msconfig GUI hack (UACMe 55).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55), you should: Focus on monitoring process creation events within Windows environments. Look specifically for processes that are initiated with a High or System integrity level, which is indicative of elevated privileges. Pay close attention if the parent process image path ends with '\\AppData\\Local\\Temp\\pkgmgr.exe', as this is a common temporary path exploited by attackers to launch malicious processes or scripts. The command line execution to be on the lookout for includes the launch of 'C:\\Windows\\system32\\msconfig.exe' with a '-5' argument, a known technique for UAC Bypass. Despite the potential for unknown false positives, the detection level for this activity is considered high due to the suspicious nature of the command and paths involved. This monitoring is tied to identifying tactics and techniques such as Privilege Escalation and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n        ParentImage|endswith: '\\AppData\\Local\\Temp\\pkgmgr.exe'\n        CommandLine: '\"C:\\Windows\\system32\\msconfig.exe\" -5'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        IntegrityLevel:\n            - 'High'\n            - 'System'\n        ParentImage|endswith: '\\AppData\\Local\\Temp\\pkgmgr.exe'\n        CommandLine: '\"C:\\Windows\\system32\\msconfig.exe\" -5'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
      "answer": "In order to detect the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55), you should: Focus on monitoring process creation events within Windows environments. Look specifically for processes that are initiated with a High or System integrity level, which is indicative of elevated privileges. Pay close attention if the parent process image path ends with '\\AppData\\Local\\Temp\\pkgmgr.exe', as this is a common temporary path exploited by attackers to launch malicious processes or scripts. The command line execution to be on the lookout for includes the launch of 'C:\\Windows\\system32\\msconfig.exe' with a '-5' argument, a known technique for UAC Bypass. Despite the potential for unknown false positives, the detection level for this activity is considered high due to the suspicious nature of the command and paths involved. This monitoring is tied to identifying tactics and techniques such as Privilege Escalation and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Russian group activity as described in Global Threat Report 2019 by Crowdstrike.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Russian group activity as described in Global Threat Report 2019 by Crowdstrike, you should: Focus on monitoring process creation events in Windows systems for specific suspicious activities. These activities include the use of the `xcopy` command with parameters \"/S /E /C /Q /H\" followed by a network path that contains \"\\sysvol\\\", indicating an attempt to copy sensitive data stealthily. Another significant indicator of malicious activity is the execution of `adexplorer -snapshot` command with paths directing to the users' downloads folder and targeting files with the \".snp\" extension, suggesting exfiltration or snapshotting of Active Directory data. Due to the specificity of these command lines, such activities are flagged as critical and unlikely to be false positives, pointing directly towards tactics and techniques employed by sophisticated threat actors.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_xcopy:\n        CommandLine|contains|all:\n            - 'xcopy /S /E /C /Q /H \\\\\\\\'\n            - '\\sysvol\\'\n    selection_adexplorer:\n        CommandLine|contains|all:\n            - 'adexplorer -snapshot \"\" c:\\users\\'\n            - '\\downloads\\'\n            - '.snp'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_xcopy:\n        CommandLine|contains|all:\n            - 'xcopy /S /E /C /Q /H \\\\\\\\'\n            - '\\sysvol\\'\n    selection_adexplorer:\n        CommandLine|contains|all:\n            - 'adexplorer -snapshot \"\" c:\\users\\'\n            - '\\downloads\\'\n            - '.snp'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "Russian group activity as described in Global Threat Report 2019 by Crowdstrike",
      "answer": "In order to detect Russian group activity as described in Global Threat Report 2019 by Crowdstrike, you should: Focus on monitoring process creation events in Windows systems for specific suspicious activities. These activities include the use of the `xcopy` command with parameters \"/S /E /C /Q /H\" followed by a network path that contains \"\\sysvol\\\", indicating an attempt to copy sensitive data stealthily. Another significant indicator of malicious activity is the execution of `adexplorer -snapshot` command with paths directing to the users' downloads folder and targeting files with the \".snp\" extension, suggesting exfiltration or snapshotting of Active Directory data. Due to the specificity of these command lines, such activities are flagged as critical and unlikely to be false positives, pointing directly towards tactics and techniques employed by sophisticated threat actors."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services, you should: focus on monitoring process creation events within Linux systems. Specifically, watch for processes that are being initiated whose image names end with '/service', '/systemctl', or '/chkconfig'. Furthermore, scrutinize the command line arguments of these processes for the presence of strings such as 'stop' or 'disable', which indicate an attempt to halt or deactivate certain system services or tools. Be mindful, however, that such activities could also originate from legitimate administration tasks. This detection operates at a medium severity level, suggesting a balanced approach to alerting to avoid overwhelming security personnel with false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            - '/service'\n            - '/systemctl'\n            - '/chkconfig'\n        CommandLine|contains:\n            - 'stop'\n            - 'disable'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith:\n            - '/service'\n            - '/systemctl'\n            - '/chkconfig'\n        CommandLine|contains:\n            - 'stop'\n            - 'disable'\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services",
      "answer": "In order to detect the usage of utilities such as 'systemctl', 'service'...etc to stop or disable tools and services, you should: focus on monitoring process creation events within Linux systems. Specifically, watch for processes that are being initiated whose image names end with '/service', '/systemctl', or '/chkconfig'. Furthermore, scrutinize the command line arguments of these processes for the presence of strings such as 'stop' or 'disable', which indicate an attempt to halt or deactivate certain system services or tools. Be mindful, however, that such activities could also originate from legitimate administration tasks. This detection operates at a medium severity level, suggesting a balanced approach to alerting to avoid overwhelming security personnel with false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity, you should: Focus on monitoring the creation of processes on Windows systems, especially looking out for instances where the ImagingDevices.exe process is initiated by or gives rise to suspicious processes. Specifically, be alert for the ImagingDevices.exe process being spawned by unexpected parent processes such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Additionally, it is crucial to remain vigilant for cases where ImagingDevices.exe itself acts as a parent to suspicious child processes. Though specifics on what constitutes a suspicious child process are not provided, typically, these would include command-line utilities or scripts like cmd or PowerShell that are not standard children of ImagingDevices.exe. Due to the high level of concern and potential for false positives being unknown, such detection efforts should be prioritized and investigated with due diligence.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith: '\\ImagingDevices.exe'\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith: '\\ImagingDevices.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            # Add more if known\n            - \\WmiPrvSE.exe\n            - \\svchost.exe\n            - \\dllhost.exe\n        Image|endswith: '\\ImagingDevices.exe'\n    selection_child:\n        # You can add specific suspicious child processes (such as cmd, powershell...) to increase the accuracy\n        ParentImage|endswith: '\\ImagingDevices.exe'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity",
      "answer": "In order to detect unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity, you should: Focus on monitoring the creation of processes on Windows systems, especially looking out for instances where the ImagingDevices.exe process is initiated by or gives rise to suspicious processes. Specifically, be alert for the ImagingDevices.exe process being spawned by unexpected parent processes such as WmiPrvSE.exe, svchost.exe, or dllhost.exe. Additionally, it is crucial to remain vigilant for cases where ImagingDevices.exe itself acts as a parent to suspicious child processes. Though specifics on what constitutes a suspicious child process are not provided, typically, these would include command-line utilities or scripts like cmd or PowerShell that are not standard children of ImagingDevices.exe. Due to the high level of concern and potential for false positives being unknown, such detection efforts should be prioritized and investigated with due diligence."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the PowerShell execution policy registry key in order to bypass signing requirements for script execution from the CommandLine.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the PowerShell execution policy registry key in order to bypass signing requirements for script execution from the CommandLine, you should: Monitor process creation logs in Windows for commands that modify the PowerShell execution policy registry keys. Specifically, watch for the use of '\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy' and '\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy' in command lines. Additionally, be alert for commands that include options such as 'Bypass', 'RemoteSigned', or 'Unrestricted'. These options can indicate attempts to alter the execution policy to allow unsigned or remote scripts to run, which might bypass security controls. This activity is considered high risk and warrants close attention due to the potential for abuse in executing malicious scripts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_path:\n        CommandLine|contains:\n            - '\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy'\n            - '\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy'\n    selection_values:\n        CommandLine|contains:\n            - 'Bypass'\n            - 'RemoteSigned'\n            - 'Unrestricted'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_path:\n        CommandLine|contains:\n            - '\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy'\n            - '\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy'\n    selection_values:\n        CommandLine|contains:\n            - 'Bypass'\n            - 'RemoteSigned'\n            - 'Unrestricted'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to the PowerShell execution policy registry key in order to bypass signing requirements for script execution from the CommandLine",
      "answer": "In order to detect changes to the PowerShell execution policy registry key in order to bypass signing requirements for script execution from the CommandLine, you should: Monitor process creation logs in Windows for commands that modify the PowerShell execution policy registry keys. Specifically, watch for the use of '\\ShellIds\\Microsoft.PowerShell\\ExecutionPolicy' and '\\Policies\\Microsoft\\Windows\\PowerShell\\ExecutionPolicy' in command lines. Additionally, be alert for commands that include options such as 'Bypass', 'RemoteSigned', or 'Unrestricted'. These options can indicate attempts to alter the execution policy to allow unsigned or remote scripts to run, which might bypass security controls. This activity is considered high risk and warrants close attention due to the potential for abuse in executing malicious scripts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker calls the \"ALTER SERVER AUDIT\" or \"DROP SERVER AUDIT\" transaction in order to delete or disable audit logs on the server.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker calls the \"ALTER SERVER AUDIT\" or \"DROP SERVER AUDIT\" transaction in order to delete or disable audit logs on the server, you should monitor the Windows application logs, specifically for events from the MSSQLSERVER provider. Focus on identifying event ID 33205, which indicates that there has been an attempt to modify the SQL Server's audit configuration. This event should capture when someone issues commands to either alter or drop server audit settings\u2014actions that could significantly impact the ability to track and analyze activities on the server. These modifications are critical security events, as they could be indicative of an attacker trying to cover their tracks by disabling or deleting audit logs.\n\nIt's essential to recognize that instances of these events should be infrequent, primarily occurring during initial setup or rare configurations changes by administrators. Due to the high sensitivity and potential risk associated with these actions, they are classified at a high level of concern.\n\nMonitoring for these specific modifications will involve looking for the occurrence of text strings 'statement:ALTER SERVER AUDIT' and 'statement:DROP SERVER AUDIT' within the data field of the captured event logs. Identifying these actions promptly can serve to alert on potential malicious attempts to undermine the server's auditing capability, enabling appropriate and swift response measures to be taken.\n\nWithin the context of MITRE ATT&CK tactics and techniques, these observations are closely related to Persistence, Privilege Escalation, and Defense Evasion. Each of these tactics represents different aspects of how an attacker might seek to maintain access, elevate their control, or avoid detection within a compromised system respectively. By ensuring that audit logs are closely monitored for such critical changes, defenders can better safeguard against these tactics, thereby reinforcing the security posture of their SQL Server environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy must be enabled in order to receive this event in the application log\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains:\n            - 'statement:ALTER SERVER AUDIT'\n            - 'statement:DROP SERVER AUDIT'\n    condition: selection\nfalsepositives:\n    - This event should only fire when an administrator is modifying the audit policy. Which should be a rare occurrence once it's set up\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: application\n    definition: MSSQL audit policy must be enabled in order to receive this event in the application log\n    # warning: The 'data' field used in the detection section is the container for the event data as a whole. You may have to adapt the rule for your backend accordingly\ndetection:\n    selection:\n        Provider_Name: 'MSSQLSERVER'\n        EventID: 33205\n        Data|contains:\n            - 'statement:ALTER SERVER AUDIT'\n            - 'statement:DROP SERVER AUDIT'\n    condition: selection\nfalsepositives:\n    - This event should only fire when an administrator is modifying the audit policy. Which should be a rare occurrence once it's set up\nlevel: high\n",
      "question": "when an attacker calls the \"ALTER SERVER AUDIT\" or \"DROP SERVER AUDIT\" transaction in order to delete or disable audit logs on the server",
      "answer": "In order to detect when an attacker calls the \"ALTER SERVER AUDIT\" or \"DROP SERVER AUDIT\" transaction in order to delete or disable audit logs on the server, you should monitor the Windows application logs, specifically for events from the MSSQLSERVER provider. Focus on identifying event ID 33205, which indicates that there has been an attempt to modify the SQL Server's audit configuration. This event should capture when someone issues commands to either alter or drop server audit settings\u2014actions that could significantly impact the ability to track and analyze activities on the server. These modifications are critical security events, as they could be indicative of an attacker trying to cover their tracks by disabling or deleting audit logs.\n\nIt's essential to recognize that instances of these events should be infrequent, primarily occurring during initial setup or rare configurations changes by administrators. Due to the high sensitivity and potential risk associated with these actions, they are classified at a high level of concern.\n\nMonitoring for these specific modifications will involve looking for the occurrence of text strings 'statement:ALTER SERVER AUDIT' and 'statement:DROP SERVER AUDIT' within the data field of the captured event logs. Identifying these actions promptly can serve to alert on potential malicious attempts to undermine the server's auditing capability, enabling appropriate and swift response measures to be taken.\n\nWithin the context of MITRE ATT&CK tactics and techniques, these observations are closely related to Persistence, Privilege Escalation, and Defense Evasion. Each of these tactics represents different aspects of how an attacker might seek to maintain access, elevate their control, or avoid detection within a compromised system respectively. By ensuring that audit logs are closely monitored for such critical changes, defenders can better safeguard against these tactics, thereby reinforcing the security posture of their SQL Server environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell creating a PowerShell file (.ps1). While often times this behavior is benign, sometimes it can be a sign of a dropper script trying to achieve persistence..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell creating a PowerShell file (.ps1), which might indicate benign activity or potentially a dropper script trying to achieve persistence, you should focus on monitoring file events on Windows systems. Specifically, keep an eye out for instances where 'powershell.exe' or 'pwsh.exe' results in the creation of '.ps1' files. This behavior can be captured by evaluating file event logs for occurrences where the image path ends with either '\\powershell.exe' or '\\pwsh.exe' and the target filename ends with '.ps1'. However, it's important to exclude certain cases to reduce false positives: ignore any instances where the target filename contains '__PSScriptPolicyTest_', starts with 'C:\\Users\\' and contains '\\AppData\\Local\\Temp\\', or begins with 'C:\\Windows\\Temp\\'. Keep in mind that the exact nature of false positives may vary based on the environment and the PowerShell scripts being utilized. It may be necessary to apply additional filters based on the specific context to accurately identify suspicious activity without overwhelming the system with benign triggers. This approach aims at striking a balance between vigilance against potential threats and minimizing the noise from false alarms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetFilename|endswith: '.ps1'\n    filter_main_psscriptpolicytest:\n        TargetFilename|contains: '__PSScriptPolicyTest_'\n    filter_main_appdata:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\'\n    filter_main_windows_temp:\n        TargetFilename|startswith: 'C:\\Windows\\Temp\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - False positives will differ depending on the environement and scripts used. Apply additional filters accordingly.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        TargetFilename|endswith: '.ps1'\n    filter_main_psscriptpolicytest:\n        TargetFilename|contains: '__PSScriptPolicyTest_'\n    filter_main_appdata:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\'\n    filter_main_windows_temp:\n        TargetFilename|startswith: 'C:\\Windows\\Temp\\'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - False positives will differ depending on the environement and scripts used. Apply additional filters accordingly.\nlevel: low\n",
      "question": "PowerShell creating a PowerShell file (.ps1). While often times this behavior is benign, sometimes it can be a sign of a dropper script trying to achieve persistence.",
      "answer": "In order to detect PowerShell creating a PowerShell file (.ps1), which might indicate benign activity or potentially a dropper script trying to achieve persistence, you should focus on monitoring file events on Windows systems. Specifically, keep an eye out for instances where 'powershell.exe' or 'pwsh.exe' results in the creation of '.ps1' files. This behavior can be captured by evaluating file event logs for occurrences where the image path ends with either '\\powershell.exe' or '\\pwsh.exe' and the target filename ends with '.ps1'. However, it's important to exclude certain cases to reduce false positives: ignore any instances where the target filename contains '__PSScriptPolicyTest_', starts with 'C:\\Users\\' and contains '\\AppData\\Local\\Temp\\', or begins with 'C:\\Windows\\Temp\\'. Keep in mind that the exact nature of false positives may vary based on the environment and the PowerShell scripts being utilized. It may be necessary to apply additional filters based on the specific context to accurately identify suspicious activity without overwhelming the system with benign triggers. This approach aims at striking a balance between vigilance against potential threats and minimizing the noise from false alarms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64...etc)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64, etc.), you should monitor file events on Windows systems. Specifically, look for occurrences where the targeted file name ends with names commonly associated with critical Windows processes, such as 'AtBroker.exe', 'audiodg.exe', 'cmd.exe', 'powershell.exe', and many others, suggesting that an executable is impersonating a system process.\n\nPay special attention to the creation of these executables in locations that do not start with standard system paths like 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Windows\\WinSxS\\', 'C:\\Windows\\SoftwareDistribution\\', and '\\SystemRoot\\System32\\'. Moreover, certain conditions like files starting with 'C:\\$WINDOWS.~BT\\' and specific image paths such as 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' or 'C:\\Windows\\system32\\wbengine.exe' associated with 'RuntimeBroker.exe' should raise flags. Additional scrutiny is advised for files created under 'C:\\Windows\\SoftwareDistribution\\Download\\' by 'svchost.exe', and any activity involving 'C:\\Program Files\\WindowsApps\\' as well as operations performed by 'wuauclt.exe', 'explorer.exe', and 'msiexec.exe' in unexpected directories.\n\nExclude from your alerts any instance where these files are part of legitimate actions, such as system processes copied for testing outside their default directories or third-party software naming their applications similarly to system processes. Due to the close match between these executable names and vital system components, activities flagged by this monitoring approach are typically treated with a high level of suspicion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\AtBroker.exe'\n            - '\\audiodg.exe'\n            - '\\backgroundTaskHost.exe'\n            - '\\bcdedit.exe'\n            - '\\bitsadmin.exe'\n            - '\\cmdl32.exe'\n            - '\\cmstp.exe'\n            - '\\conhost.exe'\n            - '\\csrss.exe'\n            - '\\dasHost.exe'\n            - '\\dfrgui.exe'\n            - '\\dllhost.exe'\n            - '\\dwm.exe'\n            - '\\eventcreate.exe'\n            - '\\eventvwr.exe'\n            - '\\explorer.exe'\n            - '\\extrac32.exe'\n            - '\\fontdrvhost.exe'\n            - '\\ipconfig.exe'\n            - '\\iscsicli.exe'\n            - '\\iscsicpl.exe'\n            - '\\logman.exe'\n            - '\\LogonUI.exe'\n            - '\\LsaIso.exe'\n            - '\\lsass.exe'\n            - '\\lsm.exe'\n            - '\\msiexec.exe'\n            - '\\msinfo32.exe'\n            - '\\mstsc.exe'\n            - '\\nbtstat.exe'\n            - '\\odbcconf.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regini.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\RuntimeBroker.exe'\n            - '\\schtasks.exe'\n            - '\\SearchFilterHost.exe'\n            - '\\SearchIndexer.exe'\n            - '\\SearchProtocolHost.exe'\n            - '\\SecurityHealthService.exe'\n            - '\\SecurityHealthSystray.exe'\n            - '\\services.exe'\n            - '\\ShellAppRuntime.exe'\n            - '\\sihost.exe'\n            - '\\smartscreen.exe'\n            - '\\smss.exe'\n            - '\\spoolsv.exe'\n            - '\\svchost.exe'\n            - '\\SystemSettingsBroker.exe'\n            - '\\taskhost.exe'\n            - '\\taskhostw.exe'\n            - '\\Taskmgr.exe'\n            - '\\TiWorker.exe'\n            - '\\vssadmin.exe'\n            - '\\w32tm.exe'\n            - '\\WerFault.exe'\n            - '\\WerFaultSecure.exe'\n            - '\\wermgr.exe'\n            - '\\wevtutil.exe'\n            - '\\wininit.exe'\n            - '\\winlogon.exe'\n            - '\\winrshost.exe'\n            - '\\WinRTNetMUAHostServer.exe'\n            - '\\wlanext.exe'\n            - '\\wlrmdr.exe'\n            - '\\WmiPrvSE.exe'\n            - '\\wslhost.exe'\n            - '\\WSReset.exe'\n            - '\\WUDFHost.exe'\n            - '\\WWAHost.exe'\n    filter1:\n        TargetFilename|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - '\\SystemRoot\\System32\\'\n        Image|endswith:\n            - '\\Windows\\System32\\dism.exe'\n            - '\\TiWorker.exe'\n    filter2:\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\'\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe'\n    filter3:\n        TargetFilename|endswith: '\\RuntimeBroker.exe'\n        Image: 'C:\\Windows\\system32\\wbengine.exe'\n    filter4:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:\\Windows\\SoftwareDistribution\\Download\\'\n        TargetFilename|endswith:\n            - '\\spoolsv.exe'\n            - '\\bcdedit.exe'\n    filter5:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:Program Files\\WindowsApps\\'\n    filter6:\n        Image: C:\\Windows\\System32\\wuauclt.exe\n    filter7:\n        TargetFilename: 'C:\\Windows\\explorer.exe'\n    filter8:\n        # This filter handles system processes who are updated/installed using misexec.\n        Image: C:\\WINDOWS\\system32\\msiexec.exe\n        # Add more processes if you find them or simply filter msiexec on its own. If the list grows big\n        TargetFilename: C:\\Program Files\\PowerShell\\7\\pwsh.exe\n    filter_healtray:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\SecurityHealth\\'\n        TargetFilename|endswith: '\\SecurityHealthSystray.exe'\n        Image|endswith: '\\SecurityHealthSetup.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - Image\nfalsepositives:\n    - System processes copied outside their default folders for testing purposes\n    - Third party software naming their software with the same names as the processes mentioned here\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '\\AtBroker.exe'\n            - '\\audiodg.exe'\n            - '\\backgroundTaskHost.exe'\n            - '\\bcdedit.exe'\n            - '\\bitsadmin.exe'\n            - '\\cmdl32.exe'\n            - '\\cmstp.exe'\n            - '\\conhost.exe'\n            - '\\csrss.exe'\n            - '\\dasHost.exe'\n            - '\\dfrgui.exe'\n            - '\\dllhost.exe'\n            - '\\dwm.exe'\n            - '\\eventcreate.exe'\n            - '\\eventvwr.exe'\n            - '\\explorer.exe'\n            - '\\extrac32.exe'\n            - '\\fontdrvhost.exe'\n            - '\\ipconfig.exe'\n            - '\\iscsicli.exe'\n            - '\\iscsicpl.exe'\n            - '\\logman.exe'\n            - '\\LogonUI.exe'\n            - '\\LsaIso.exe'\n            - '\\lsass.exe'\n            - '\\lsm.exe'\n            - '\\msiexec.exe'\n            - '\\msinfo32.exe'\n            - '\\mstsc.exe'\n            - '\\nbtstat.exe'\n            - '\\odbcconf.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regini.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\RuntimeBroker.exe'\n            - '\\schtasks.exe'\n            - '\\SearchFilterHost.exe'\n            - '\\SearchIndexer.exe'\n            - '\\SearchProtocolHost.exe'\n            - '\\SecurityHealthService.exe'\n            - '\\SecurityHealthSystray.exe'\n            - '\\services.exe'\n            - '\\ShellAppRuntime.exe'\n            - '\\sihost.exe'\n            - '\\smartscreen.exe'\n            - '\\smss.exe'\n            - '\\spoolsv.exe'\n            - '\\svchost.exe'\n            - '\\SystemSettingsBroker.exe'\n            - '\\taskhost.exe'\n            - '\\taskhostw.exe'\n            - '\\Taskmgr.exe'\n            - '\\TiWorker.exe'\n            - '\\vssadmin.exe'\n            - '\\w32tm.exe'\n            - '\\WerFault.exe'\n            - '\\WerFaultSecure.exe'\n            - '\\wermgr.exe'\n            - '\\wevtutil.exe'\n            - '\\wininit.exe'\n            - '\\winlogon.exe'\n            - '\\winrshost.exe'\n            - '\\WinRTNetMUAHostServer.exe'\n            - '\\wlanext.exe'\n            - '\\wlrmdr.exe'\n            - '\\WmiPrvSE.exe'\n            - '\\wslhost.exe'\n            - '\\WSReset.exe'\n            - '\\WUDFHost.exe'\n            - '\\WWAHost.exe'\n    filter1:\n        TargetFilename|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\WinSxS\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - '\\SystemRoot\\System32\\'\n        Image|endswith:\n            - '\\Windows\\System32\\dism.exe'\n            - '\\TiWorker.exe'\n    filter2:\n        TargetFilename|startswith: 'C:\\$WINDOWS.~BT\\'\n        Image: 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe'\n    filter3:\n        TargetFilename|endswith: '\\RuntimeBroker.exe'\n        Image: 'C:\\Windows\\system32\\wbengine.exe'\n    filter4:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:\\Windows\\SoftwareDistribution\\Download\\'\n        TargetFilename|endswith:\n            - '\\spoolsv.exe'\n            - '\\bcdedit.exe'\n    filter5:\n        Image|endswith: ':\\Windows\\system32\\svchost.exe'\n        TargetFilename|startswith: 'C:Program Files\\WindowsApps\\'\n    filter6:\n        Image: C:\\Windows\\System32\\wuauclt.exe\n    filter7:\n        TargetFilename: 'C:\\Windows\\explorer.exe'\n    filter8:\n        # This filter handles system processes who are updated/installed using misexec.\n        Image: C:\\WINDOWS\\system32\\msiexec.exe\n        # Add more processes if you find them or simply filter msiexec on its own. If the list grows big\n        TargetFilename: C:\\Program Files\\PowerShell\\7\\pwsh.exe\n    filter_healtray:\n        TargetFilename|startswith: 'C:\\Windows\\System32\\SecurityHealth\\'\n        TargetFilename|endswith: '\\SecurityHealthSystray.exe'\n        Image|endswith: '\\SecurityHealthSetup.exe'\n    condition: selection and not 1 of filter*\nfields:\n    - Image\nfalsepositives:\n    - System processes copied outside their default folders for testing purposes\n    - Third party software naming their software with the same names as the processes mentioned here\nlevel: high\n",
      "question": "creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64...etc).",
      "answer": "In order to detect the creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64, etc.), you should monitor file events on Windows systems. Specifically, look for occurrences where the targeted file name ends with names commonly associated with critical Windows processes, such as 'AtBroker.exe', 'audiodg.exe', 'cmd.exe', 'powershell.exe', and many others, suggesting that an executable is impersonating a system process.\n\nPay special attention to the creation of these executables in locations that do not start with standard system paths like 'C:\\Windows\\System32\\', 'C:\\Windows\\SysWOW64\\', 'C:\\Windows\\WinSxS\\', 'C:\\Windows\\SoftwareDistribution\\', and '\\SystemRoot\\System32\\'. Moreover, certain conditions like files starting with 'C:\\$WINDOWS.~BT\\' and specific image paths such as 'C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe' or 'C:\\Windows\\system32\\wbengine.exe' associated with 'RuntimeBroker.exe' should raise flags. Additional scrutiny is advised for files created under 'C:\\Windows\\SoftwareDistribution\\Download\\' by 'svchost.exe', and any activity involving 'C:\\Program Files\\WindowsApps\\' as well as operations performed by 'wuauclt.exe', 'explorer.exe', and 'msiexec.exe' in unexpected directories.\n\nExclude from your alerts any instance where these files are part of legitimate actions, such as system processes copied for testing outside their default directories or third-party software naming their applications similarly to system processes. Due to the close match between these executable names and vital system components, activities flagged by this monitoring approach are typically treated with a high level of suspicion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of autostart extensibility point (ASEP) in registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring registry set activities within the Windows environment, specifically targeting the Internet Explorer settings stored in the Windows registry. Monitoring should flag events where the \"SetValue\" action is performed on registry keys related to Internet Explorer, including both the standard and Wow6432Node paths.\n\nSpecial attention should be paid to modifications aimed at Internet Explorer's toolbar settings, extensions, and explorer bars, as these areas are common targets for attackers seeking to maintain persistence or execute malicious code upon system startup. To accurately detect potential threats, filters should be applied to exclude known benign alterations, like those stemming from legitimate software installations or configurations performed by an administrator. These exclusions involve ignoring certain detailed registry paths that signify legitimate extensions or toolbar settings.\n\nFor effective detection, the analysis should capture specific fields such as the SecurityID, ObjectName, OldValueType, and NewValueType, providing context to the registry modification event.\n\nHowever, it's important to handle alerts with caution, acknowledging that false positives can occur. These can result from legitimate software installations that necessitate changes to autostart configurations or from administrative actions taken for genuine reasons. The level of threat associated with detected alterations is considered medium, underscoring the potential for misuse but also recognizing that not all modifications are indicative of malicious intent.\n\nBy closely observing these specific registry interactions and employing a discerning filtering process, one can robustly detect unauthorized modifications that compromise the autostart extensibility points (ASEP) in the system, thereby protecting against attacks that seek to leverage Internet Explorer as a vector for persistent access or malicious execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    ie:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Software\\Wow6432Node\\Microsoft\\Internet Explorer'\n            - '\\Software\\Microsoft\\Internet Explorer'\n    ie_details:\n        TargetObject|contains:\n            - '\\Toolbar'\n            - '\\Extensions'\n            - '\\Explorer Bars'\n    filter_empty:\n        Details: '(Empty)'\n    filter_extensions:\n        TargetObject|contains:\n            - '\\Extensions\\{2670000A-7350-4f3c-8081-5663EE0C6C49}'\n            - '\\Extensions\\{31D09BA0-12F5-4CCE-BE8A-2923E76605DA}'\n            - '\\Extensions\\{789FE86F-6FC4-46A1-9849-EDE0DB0C95CA}'\n            - '\\Extensions\\{A95fe080-8f5d-11d2-a20b-00aa003c157a}'\n    filter_toolbar:\n        TargetObject|endswith:\n            - '\\Toolbar\\ShellBrowser\\ITBar7Layout'\n            - '\\Toolbar\\ShowDiscussionButton'\n            - '\\Toolbar\\Locked'\n    condition: ie and ie_details and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    ie:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Software\\Wow6432Node\\Microsoft\\Internet Explorer'\n            - '\\Software\\Microsoft\\Internet Explorer'\n    ie_details:\n        TargetObject|contains:\n            - '\\Toolbar'\n            - '\\Extensions'\n            - '\\Explorer Bars'\n    filter_empty:\n        Details: '(Empty)'\n    filter_extensions:\n        TargetObject|contains:\n            - '\\Extensions\\{2670000A-7350-4f3c-8081-5663EE0C6C49}'\n            - '\\Extensions\\{31D09BA0-12F5-4CCE-BE8A-2923E76605DA}'\n            - '\\Extensions\\{789FE86F-6FC4-46A1-9849-EDE0DB0C95CA}'\n            - '\\Extensions\\{A95fe080-8f5d-11d2-a20b-00aa003c157a}'\n    filter_toolbar:\n        TargetObject|endswith:\n            - '\\Toolbar\\ShellBrowser\\ITBar7Layout'\n            - '\\Toolbar\\ShowDiscussionButton'\n            - '\\Toolbar\\Locked'\n    condition: ie and ie_details and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should focus on monitoring registry set activities within the Windows environment, specifically targeting the Internet Explorer settings stored in the Windows registry. Monitoring should flag events where the \"SetValue\" action is performed on registry keys related to Internet Explorer, including both the standard and Wow6432Node paths.\n\nSpecial attention should be paid to modifications aimed at Internet Explorer's toolbar settings, extensions, and explorer bars, as these areas are common targets for attackers seeking to maintain persistence or execute malicious code upon system startup. To accurately detect potential threats, filters should be applied to exclude known benign alterations, like those stemming from legitimate software installations or configurations performed by an administrator. These exclusions involve ignoring certain detailed registry paths that signify legitimate extensions or toolbar settings.\n\nFor effective detection, the analysis should capture specific fields such as the SecurityID, ObjectName, OldValueType, and NewValueType, providing context to the registry modification event.\n\nHowever, it's important to handle alerts with caution, acknowledging that false positives can occur. These can result from legitimate software installations that necessitate changes to autostart configurations or from administrative actions taken for genuine reasons. The level of threat associated with detected alterations is considered medium, underscoring the potential for misuse but also recognizing that not all modifications are indicative of malicious intent.\n\nBy closely observing these specific registry interactions and employing a discerning filtering process, one can robustly detect unauthorized modifications that compromise the autostart extensibility points (ASEP) in the system, thereby protecting against attacks that seek to leverage Internet Explorer as a vector for persistent access or malicious execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting guest users being invited to tenant by non-approved inviters.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect guest users being invited to tenant by non-approved inviters, you should:\n\nMonitor the audit logs from Azure, specifically focusing on user management activities. Look for operations named 'Invite external user' which are carried out under the 'UserManagement' category. It is essential to filter out actions initiated by approved guest inviters, which will require maintaining a list of such entities. If an invitation to an external user is detected and it does not come from any approved inviter, it should be considered a potential security threat. This detection mechanism is crucial for identifying unauthorized attempts to add guest users to your tenant, which could potentially lead to unauthorized access or other security complications. False positives might occur if the activity was actually approved by a System Administrator, hence it's fundamental to verify such actions with the respective administrators. The severity of this kind of alert is considered medium, as it might indicate an attempt to compromise your environment or violate policy but might also be a legitimate action that hasn't been properly flagged as approved. Tags associated with this detection strategy include Persistence, Initial Access, and the relevant technique External Remote Services, reflecting the MITRE ATT&CK framework's classification of such security concerns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: 'UserManagement'\n        OperationName: 'Invite external user'\n    filter:\n        InitiatedBy|contains: '<approved guest inviter use OR for multiple>'\n    condition: selection and not filter\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        Category: 'UserManagement'\n        OperationName: 'Invite external user'\n    filter:\n        InitiatedBy|contains: '<approved guest inviter use OR for multiple>'\n    condition: selection and not filter\nfalsepositives:\n    - If this was approved by System Administrator.\nlevel: medium\n",
      "question": "guest users being invited to tenant by non-approved inviters",
      "answer": "In order to detect guest users being invited to tenant by non-approved inviters, you should:\n\nMonitor the audit logs from Azure, specifically focusing on user management activities. Look for operations named 'Invite external user' which are carried out under the 'UserManagement' category. It is essential to filter out actions initiated by approved guest inviters, which will require maintaining a list of such entities. If an invitation to an external user is detected and it does not come from any approved inviter, it should be considered a potential security threat. This detection mechanism is crucial for identifying unauthorized attempts to add guest users to your tenant, which could potentially lead to unauthorized access or other security complications. False positives might occur if the activity was actually approved by a System Administrator, hence it's fundamental to verify such actions with the respective administrators. The severity of this kind of alert is considered medium, as it might indicate an attempt to compromise your environment or violate policy but might also be a legitimate action that hasn't been properly flagged as approved. Tags associated with this detection strategy include Persistence, Initial Access, and the relevant technique External Remote Services, reflecting the MITRE ATT&CK framework's classification of such security concerns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when threat actors use the auditpol binary to change audit policy configuration to impair detection capability, which can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor, you should monitor the creation of processes on Windows systems for the execution of 'auditpol.exe'. Specifically, look for instances where the command line includes actions such as 'disable', 'clear', 'remove', or 'restore', which are indicative of attempts to alter audit policies in a way that could hinder detection of malicious activities. It is important to note that while such commands might sometimes be used by administrators or in administrator scripts, any usage of these flags should be carefully monitored due to the high risk associated with altering audit policies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\auditpol.exe'\n        - OriginalFileName: 'AUDITPOL.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'disable' # disables a specific audit policy\n            - 'clear'   # delete or clears audit policy\n            - 'remove'  # removes an audit policy\n            - 'restore' # restores an audit policy\n    condition: all of selection_*\nfalsepositives:\n    - Administrator or administrator scripts might leverage the flags mentioned in the detection section. Either way, it should always be monitored\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\auditpol.exe'\n        - OriginalFileName: 'AUDITPOL.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'disable' # disables a specific audit policy\n            - 'clear'   # delete or clears audit policy\n            - 'remove'  # removes an audit policy\n            - 'restore' # restores an audit policy\n    condition: all of selection_*\nfalsepositives:\n    - Administrator or administrator scripts might leverage the flags mentioned in the detection section. Either way, it should always be monitored\nlevel: high\n",
      "question": "Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n",
      "answer": "In order to detect when threat actors use the auditpol binary to change audit policy configuration to impair detection capability, which can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor, you should monitor the creation of processes on Windows systems for the execution of 'auditpol.exe'. Specifically, look for instances where the command line includes actions such as 'disable', 'clear', 'remove', or 'restore', which are indicative of attempts to alter audit policies in a way that could hinder detection of malicious activities. It is important to note that while such commands might sometimes be used by administrators or in administrator scripts, any usage of these flags should be carefully monitored due to the high risk associated with altering audit policies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Dllhost that communicates with public IP addresses.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Dllhost that communicates with public IP addresses, you should monitor network connections from Windows systems, specifically looking for activities where the process image name ends with '\\dllhost.exe' indicating the DllHost process and where such a process initiates a connection. It is crucial to focus on connections that are destined for public IP addresses, which means excluding any connection attempts to private or reserved IP address ranges often used within corporate or private networks. These ranges include the commonly used private IPv4 addresses such as 10.x.x.x, 192.168.x.x, and various segments of 172.16.x.x to 172.31.x.x, as well as the link-local address 169.254.x.x and the loopback address 127.x.x.x. For IPv6, exclude connections to the loopback addresses (::1 and 0:0:0:0:0:0:0:1), link-local addresses starting with 'fe80:', and private address ranges starting with 'fc' or 'fd'.\n\nAdditionally, connections to certain Microsoft-owned public subnets, such as those in the range of 20.184.x.x to 20.191.x.x, 23.79.x.x, 51.10.x.x to 51.105.x.x, and 52.239.x.x, should not be considered indicators of this suspicious activity. This approach minimizes false positives, especially in corporate environments where legitimate communication may occur with public IP addresses for genuine business purposes. The associative tags for this detection strategy include tactics and techniques like Command and Control and Exfiltration over Command and Control Channel. Monitoring these parameters carefully can help identify potentially malicious communication initiated by Dllhost to public IPs, indicating a possible compromise or unauthorized data exfiltration attempt.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dllhost.exe'\n        Initiated: 'true'\n    filter_ipv4:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '169.254.'  # link-local address\n            - '127.'  # loopback address\n    filter_ipv6:\n        DestinationIp|startswith:\n            - '::1'  # IPv6 loopback variant\n            - '0:0:0:0:0:0:0:1'  # IPv6 loopback variant\n            - 'fe80:'  # link-local address\n            - 'fc'  # private address range fc00::/7\n            - 'fd'  # private address range fc00::/7\n    filter_msrange:\n        DestinationIp|startswith:\n            # Subnet: 20.184.0.0/13\n            - '20.184.'\n            - '20.185.'\n            - '20.186.'\n            - '20.187.'\n            - '20.188.'\n            - '20.189.'\n            - '20.190.'\n            - '20.191.'\n            - '23.79.'\n            - '51.10.'\n            # Subnet: 51.103.210.0/23\n            - '51.103.'\n            - '51.104.'\n            - '51.105.'\n            - '52.239.'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Communication to other corporate systems that use IP addresses from public address spaces\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\dllhost.exe'\n        Initiated: 'true'\n    filter_ipv4:\n        DestinationIp|startswith:\n            - '10.'\n            - '192.168.'\n            - '172.16.'\n            - '172.17.'\n            - '172.18.'\n            - '172.19.'\n            - '172.20.'\n            - '172.21.'\n            - '172.22.'\n            - '172.23.'\n            - '172.24.'\n            - '172.25.'\n            - '172.26.'\n            - '172.27.'\n            - '172.28.'\n            - '172.29.'\n            - '172.30.'\n            - '172.31.'\n            - '169.254.'  # link-local address\n            - '127.'  # loopback address\n    filter_ipv6:\n        DestinationIp|startswith:\n            - '::1'  # IPv6 loopback variant\n            - '0:0:0:0:0:0:0:1'  # IPv6 loopback variant\n            - 'fe80:'  # link-local address\n            - 'fc'  # private address range fc00::/7\n            - 'fd'  # private address range fc00::/7\n    filter_msrange:\n        DestinationIp|startswith:\n            # Subnet: 20.184.0.0/13\n            - '20.184.'\n            - '20.185.'\n            - '20.186.'\n            - '20.187.'\n            - '20.188.'\n            - '20.189.'\n            - '20.190.'\n            - '20.191.'\n            - '23.79.'\n            - '51.10.'\n            # Subnet: 51.103.210.0/23\n            - '51.103.'\n            - '51.104.'\n            - '51.105.'\n            - '52.239.'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Communication to other corporate systems that use IP addresses from public address spaces\nlevel: medium\n",
      "question": "Dllhost that communicates with public IP addresses",
      "answer": "In order to detect Dllhost that communicates with public IP addresses, you should monitor network connections from Windows systems, specifically looking for activities where the process image name ends with '\\dllhost.exe' indicating the DllHost process and where such a process initiates a connection. It is crucial to focus on connections that are destined for public IP addresses, which means excluding any connection attempts to private or reserved IP address ranges often used within corporate or private networks. These ranges include the commonly used private IPv4 addresses such as 10.x.x.x, 192.168.x.x, and various segments of 172.16.x.x to 172.31.x.x, as well as the link-local address 169.254.x.x and the loopback address 127.x.x.x. For IPv6, exclude connections to the loopback addresses (::1 and 0:0:0:0:0:0:0:1), link-local addresses starting with 'fe80:', and private address ranges starting with 'fc' or 'fd'.\n\nAdditionally, connections to certain Microsoft-owned public subnets, such as those in the range of 20.184.x.x to 20.191.x.x, 23.79.x.x, 51.10.x.x to 51.105.x.x, and 52.239.x.x, should not be considered indicators of this suspicious activity. This approach minimizes false positives, especially in corporate environments where legitimate communication may occur with public IP addresses for genuine business purposes. The associative tags for this detection strategy include tactics and techniques like Command and Control and Exfiltration over Command and Control Channel. Monitoring these parameters carefully can help identify potentially malicious communication initiated by Dllhost to public IPs, indicating a possible compromise or unauthorized data exfiltration attempt."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific combinations of encoding methods in PowerShell via the commandline.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific combinations of encoding methods in PowerShell via the commandline, you should: observe processes created in Windows environments, particularly focusing on instances where 'powershell.exe' or 'pwsh.exe' are launched or when the original file names are identified as 'PowerShell.EXE' or 'pwsh.dll'. From there, examine the command line arguments for presence of certain patterns. These patterns include methods related to data type conversions such as 'ToInt', 'ToDecimal', 'ToByte', 'ToUint', 'ToSingle', 'ToSByte', 'ToChar', 'ToString', and 'String'. Additionally, detect sequences where 'char' and 'join' are used together, or 'split' and 'join' are used in conjunction, as these combinations can indicate encoding attempts. Detection based on these conditions should operate with caution due to the low possibility of false positives, where legitimate use of these commands may unintentionally trigger alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_to_1:\n        CommandLine|contains:\n            - 'ToInt'\n            - 'ToDecimal'\n            - 'ToByte'\n            - 'ToUint'\n            - 'ToSingle'\n            - 'ToSByte'\n    selection_to_2:\n        CommandLine|contains:\n            - 'ToChar'\n            - 'ToString'\n            - 'String'\n    selection_gen_1:\n        CommandLine|contains|all:\n            - 'char'\n            - 'join'\n    selection_gen_2:\n        CommandLine|contains|all:\n            - 'split'\n            - 'join'\n    condition: selection_img and (all of selection_to_* or 1 of selection_gen_*)\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_to_1:\n        CommandLine|contains:\n            - 'ToInt'\n            - 'ToDecimal'\n            - 'ToByte'\n            - 'ToUint'\n            - 'ToSingle'\n            - 'ToSByte'\n    selection_to_2:\n        CommandLine|contains:\n            - 'ToChar'\n            - 'ToString'\n            - 'String'\n    selection_gen_1:\n        CommandLine|contains|all:\n            - 'char'\n            - 'join'\n    selection_gen_2:\n        CommandLine|contains|all:\n            - 'split'\n            - 'join'\n    condition: selection_img and (all of selection_to_* or 1 of selection_gen_*)\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "specific combinations of encoding methods in PowerShell via the commandline",
      "answer": "In order to detect specific combinations of encoding methods in PowerShell via the commandline, you should: observe processes created in Windows environments, particularly focusing on instances where 'powershell.exe' or 'pwsh.exe' are launched or when the original file names are identified as 'PowerShell.EXE' or 'pwsh.dll'. From there, examine the command line arguments for presence of certain patterns. These patterns include methods related to data type conversions such as 'ToInt', 'ToDecimal', 'ToByte', 'ToUint', 'ToSingle', 'ToSByte', 'ToChar', 'ToString', and 'String'. Additionally, detect sequences where 'char' and 'join' are used together, or 'split' and 'join' are used in conjunction, as these combinations can indicate encoding attempts. Detection based on these conditions should operate with caution due to the low possibility of false positives, where legitimate use of these commands may unintentionally trigger alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a named pipe as used by CobaltStrike.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a named pipe as used by CobaltStrike, you should: Focus on monitoring the creation of Windows named pipes which could indicate malicious activity. Ensure your monitoring tools, especially those analyzing logs from Windows systems, are configured to capture Named Pipe Events, specifically looking for Event IDs 17 and 18 in Sysmon logs. This requires verifying if your Sysmon configuration actively logs these events, and adjustments might be necessary using popular configurations found on GitHub. \n\nDuring detection, pay close attention to the pipe names. If a pipe name contains both '\\MSSE-' and '-server', starts with '\\postex_', '\\status_', '\\msagent_', '\\mojo_', '\\interprocess_', '\\samr_', '\\netlogon_', '\\srvsvc_', '\\lsarpc_', '\\wkssvc_', it could indicate a compromised system. These specific patterns are chosen because they are commonly utilized by Cobalt Strike and other malware to establish communication channels on the infected host.\n\nRemember that while this strategy is critical for identifying potential threats, there might be cases where legitimate software uses similar named pipes, leading to unknown false positives. Thus, it\u2019s crucial to analyze detections within the broader context of behavior on the system to accurately identify malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection_MSSE:\n        PipeName|contains|all:\n            - '\\MSSE-'\n            - '-server'\n    selection_postex:\n        PipeName|startswith: '\\postex_' # Also include the pipe \"\\postex_ssh_\"\n    selection_status:\n        PipeName|startswith: '\\status_'\n    selection_msagent:\n        PipeName|startswith: '\\msagent_'\n    selection_mojo:\n        PipeName|startswith: '\\mojo_'\n    selection_interprocess:\n        PipeName|startswith: '\\interprocess_'\n    selection_samr:\n        PipeName|startswith: '\\samr_'\n    selection_netlogon:\n        PipeName|startswith: '\\netlogon_'\n    selection_srvsvc:\n        PipeName|startswith: '\\srvsvc_'\n    selection_lsarpc:\n        PipeName|startswith: '\\lsarpc_'\n    selection_wkssvc:\n        PipeName|startswith: '\\wkssvc_'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection_MSSE:\n        PipeName|contains|all:\n            - '\\MSSE-'\n            - '-server'\n    selection_postex:\n        PipeName|startswith: '\\postex_' # Also include the pipe \"\\postex_ssh_\"\n    selection_status:\n        PipeName|startswith: '\\status_'\n    selection_msagent:\n        PipeName|startswith: '\\msagent_'\n    selection_mojo:\n        PipeName|startswith: '\\mojo_'\n    selection_interprocess:\n        PipeName|startswith: '\\interprocess_'\n    selection_samr:\n        PipeName|startswith: '\\samr_'\n    selection_netlogon:\n        PipeName|startswith: '\\netlogon_'\n    selection_srvsvc:\n        PipeName|startswith: '\\srvsvc_'\n    selection_lsarpc:\n        PipeName|startswith: '\\lsarpc_'\n    selection_wkssvc:\n        PipeName|startswith: '\\wkssvc_'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "creation of a named pipe as used by CobaltStrike",
      "answer": "In order to detect the creation of a named pipe as used by CobaltStrike, you should: Focus on monitoring the creation of Windows named pipes which could indicate malicious activity. Ensure your monitoring tools, especially those analyzing logs from Windows systems, are configured to capture Named Pipe Events, specifically looking for Event IDs 17 and 18 in Sysmon logs. This requires verifying if your Sysmon configuration actively logs these events, and adjustments might be necessary using popular configurations found on GitHub. \n\nDuring detection, pay close attention to the pipe names. If a pipe name contains both '\\MSSE-' and '-server', starts with '\\postex_', '\\status_', '\\msagent_', '\\mojo_', '\\interprocess_', '\\samr_', '\\netlogon_', '\\srvsvc_', '\\lsarpc_', '\\wkssvc_', it could indicate a compromised system. These specific patterns are chosen because they are commonly utilized by Cobalt Strike and other malware to establish communication channels on the infected host.\n\nRemember that while this strategy is critical for identifying potential threats, there might be cases where legitimate software uses similar named pipes, leading to unknown false positives. Thus, it\u2019s crucial to analyze detections within the broader context of behavior on the system to accurately identify malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting group membership additions of groups that have CA policy modification access.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to monitor and alert on group membership additions of groups that have CA policy modification access, you should:\n\nLook for activity in Azure's audit logs that indicates a member has been added to a group. Specifically, pay attention to audit log entries where the message property contains \"Add member from group.\" This reflects a crucial action where users are granted additional privileges, likely affecting Conditional Access (CA) policy modification capabilities. It is essential to scrutinize these events as they could signify an attempt to modify access control and policies within the Azure environment. While doing so, consider that not all additions might be malevolent. Approved user changes to groups should be treated as legitimate and recorded as false positives to refine the alerting process. The severity of this rule is considered medium, suggesting a balanced approach towards monitoring while being aware of potentially innocuous group modifications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add member from group\n    condition: selection\nfalsepositives:\n    - User removed from the group is approved\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message: Add member from group\n    condition: selection\nfalsepositives:\n    - User removed from the group is approved\nlevel: medium\n",
      "question": "group membership additions of groups that have CA policy modification access",
      "answer": "In order to monitor and alert on group membership additions of groups that have CA policy modification access, you should:\n\nLook for activity in Azure's audit logs that indicates a member has been added to a group. Specifically, pay attention to audit log entries where the message property contains \"Add member from group.\" This reflects a crucial action where users are granted additional privileges, likely affecting Conditional Access (CA) policy modification capabilities. It is essential to scrutinize these events as they could signify an attempt to modify access control and policies within the Azure environment. While doing so, consider that not all additions might be malevolent. Approved user changes to groups should be treated as legitimate and recorded as false positives to refine the alerting process. The severity of this rule is considered medium, suggesting a balanced approach towards monitoring while being aware of potentially innocuous group modifications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting registry key used by IceID in a campaign that distributes malicious OneNote files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a registry key used by IceID in a campaign that distributes malicious OneNote files, you should monitor registry event logs on Windows systems for any activity indicating access to or modification of the specific registry key ending with '\\Software\\firm\\soft\\Name'. This particular pattern of registry key modification or access is commonly associated with the IceID malware, which has been known to distribute itself through malicious OneNote files. The detection of such activity should be treated with high severity due to the potential for significant damage or data loss. As false positives are currently unknown, any detection warrants immediate investigation to ensure the system's integrity and security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: '\\Software\\firm\\soft\\Name'\n    condition: selection\nfalsepositives:\n     - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: '\\Software\\firm\\soft\\Name'\n    condition: selection\nfalsepositives:\n     - Unknown\nlevel: high\n",
      "question": "registry key used by IceID in a campaign that distributes malicious OneNote files",
      "answer": "In order to detect a registry key used by IceID in a campaign that distributes malicious OneNote files, you should monitor registry event logs on Windows systems for any activity indicating access to or modification of the specific registry key ending with '\\Software\\firm\\soft\\Name'. This particular pattern of registry key modification or access is commonly associated with the IceID malware, which has been known to distribute itself through malicious OneNote files. The detection of such activity should be treated with high severity due to the potential for significant damage or data loss. As false positives are currently unknown, any detection warrants immediate investigation to ensure the system's integrity and security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting base64 encoded listing Win32_Shadowcopy.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect base64 encoded listing Win32_Shadowcopy, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain base64 encoded strings indicative of operations associated with Win32_Shadowcopy, potentially wrapped within a ForEach-Object PowerShell cmdlet. These strings are highly unique and their presence in the command line is a strong indicator of an attempt to interact with or exploit Windows Shadow Copy capabilities, possibly for malicious purposes like data theft, ransomware preparation, or evasion. Given the encoded nature of the command lines being searched for and the specificity of the operation, this type of activity is considered highly suspicious and false positives are unlikely. Monitoring for these encoded command lines is crucial for early detection of such malicious activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Win32_Shadowcopy | ForEach-Object\n        CommandLine|contains:\n            - 'VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA'\n            - 'cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A'\n            - 'XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Win32_Shadowcopy | ForEach-Object\n        CommandLine|contains:\n            - 'VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA'\n            - 'cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A'\n            - 'XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "base64 encoded listing Win32_Shadowcopy",
      "answer": "In order to detect base64 encoded listing Win32_Shadowcopy, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for command lines that contain base64 encoded strings indicative of operations associated with Win32_Shadowcopy, potentially wrapped within a ForEach-Object PowerShell cmdlet. These strings are highly unique and their presence in the command line is a strong indicator of an attempt to interact with or exploit Windows Shadow Copy capabilities, possibly for malicious purposes like data theft, ransomware preparation, or evasion. Given the encoded nature of the command lines being searched for and the specificity of the operation, this type of activity is considered highly suspicious and false positives are unlikely. Monitoring for these encoded command lines is crucial for early detection of such malicious activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use MSHTA in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated PowerShell via use MSHTA in scripts, you should monitor Windows PowerShell script log sources, particularly focusing on Script Block Logging, which must be enabled for detection. Specifically, look for script blocks that contain all the following characteristics: the use of 'set', the logical AND operator '&&', the keyword 'mshta', the command for creating an object 'vbscript:createobject', the method '.run', and the script '(window.close)'. These specific patterns suggest an attempt to obfuscate the malicious script's true purpose, possibly by leveraging MSHTA (Microsoft HTML Application Host) to execute scripts outside the standard PowerShell environment. Such tactics are indicative of a sophisticated attack attempting to bypass detection mechanisms. It's crucial to note, however, that there may be unknown cases where these patterns might emerge in non-malicious contexts, indicating potential for false positives. Given the high level of threat this activity represents, any detection of these script characteristics should be prioritized and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|contains|all:\n            - 'set'\n            - '&&'\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - '(window.close)'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_4104:\n        ScriptBlockText|contains|all:\n            - 'set'\n            - '&&'\n            - 'mshta'\n            - 'vbscript:createobject'\n            - '.run'\n            - '(window.close)'\n    condition: selection_4104\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use MSHTA in Scripts",
      "answer": "In order to detect obfuscated PowerShell via use MSHTA in scripts, you should monitor Windows PowerShell script log sources, particularly focusing on Script Block Logging, which must be enabled for detection. Specifically, look for script blocks that contain all the following characteristics: the use of 'set', the logical AND operator '&&', the keyword 'mshta', the command for creating an object 'vbscript:createobject', the method '.run', and the script '(window.close)'. These specific patterns suggest an attempt to obfuscate the malicious script's true purpose, possibly by leveraging MSHTA (Microsoft HTML Application Host) to execute scripts outside the standard PowerShell environment. Such tactics are indicative of a sophisticated attack attempting to bypass detection mechanisms. It's crucial to note, however, that there may be unknown cases where these patterns might emerge in non-malicious contexts, indicating potential for false positives. Given the high level of threat this activity represents, any detection of these script characteristics should be prioritized and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a method often used by ransomware, which combines the use of \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question to hide the file responsible for the initial infection for example, you should: monitor process creation logs on Windows systems for command lines that contain specific patterns indicative of this attack method. These patterns include the presence of ' -n ' or ' /n ' which are used in ping commands to specify the number of echo requests to send, and the term 'Nul' indicating that the output of the command is being discarded. Additionally, look for command lines that contain ' /f ', ' -f ', ' /q ', or ' -q ' which are parameters for the 'del' command used to force delete files without prompting for confirmation and to delete files quietly without displaying output. For a command line to be considered suspect under this rule, it must contain all the following: the 'ping' command, which is used here to create a delay, the 'del' command signaling the deletion of files, and the aforementioned parameters and conditions that suggest an attempt to delete evidence of an initial infection stealthily. This detection strategy is tagged with ransomware, indicating its relevance in identifying attempts by such malware to operate undetected on infected systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: \"C:\\Windows\\System32\\cmd.exe\"  /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\" & Del /f /q \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\".\n    selection_count:\n        CommandLine|contains:\n            - ' -n '\n            - ' /n '\n    selection_nul:\n        CommandLine|contains: 'Nul' # Covers \"> Nul\" and \">Nul \"\n    selection_del_param:\n        CommandLine|contains:\n            - ' /f '\n            - ' -f '\n            - ' /q '\n            - ' -q '\n    selection_all:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'del '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: \"C:\\Windows\\System32\\cmd.exe\"  /C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\" & Del /f /q \"C:\\Users\\User\\Desktop\\lockbit\\lockbit.exe\".\n    selection_count:\n        CommandLine|contains:\n            - ' -n '\n            - ' /n '\n    selection_nul:\n        CommandLine|contains: 'Nul' # Covers \"> Nul\" and \">Nul \"\n    selection_del_param:\n        CommandLine|contains:\n            - ' /f '\n            - ' -f '\n            - ' /q '\n            - ' -q '\n    selection_all:\n        CommandLine|contains|all:\n            - 'ping' # Covers \"ping\" and \"ping.exe\"\n            - 'del '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example",
      "answer": "In order to detect a method often used by ransomware, which combines the use of \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question to hide the file responsible for the initial infection for example, you should: monitor process creation logs on Windows systems for command lines that contain specific patterns indicative of this attack method. These patterns include the presence of ' -n ' or ' /n ' which are used in ping commands to specify the number of echo requests to send, and the term 'Nul' indicating that the output of the command is being discarded. Additionally, look for command lines that contain ' /f ', ' -f ', ' /q ', or ' -q ' which are parameters for the 'del' command used to force delete files without prompting for confirmation and to delete files quietly without displaying output. For a command line to be considered suspect under this rule, it must contain all the following: the 'ping' command, which is used here to create a delay, the 'del' command signaling the deletion of files, and the aforementioned parameters and conditions that suggest an attempt to delete evidence of an initial infection stealthily. This detection strategy is tagged with ransomware, indicating its relevance in identifying attempts by such malware to operate undetected on infected systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Looks for potential enumeration of AWS buckets via ListBuckets..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to looks for potential enumeration of AWS buckets via ListBuckets, you should: Monitor AWS CloudTrail logs for activities that indicate attempts to list all S3 buckets. Specifically, focus on events where the `eventSource` is `s3.amazonaws.com` and the `eventName` is `ListBuckets`. These events are essential to watch because they can suggest that someone is trying to enumerate, or list, all the AWS S3 buckets, which might be an early step in an attack aiming to discover data or assets to exploit. It's crucial to filter out events generated by `AssumedRole` types to reduce false positives, as these are more likely to be legitimate administrative activities. However, it's recommended to remain cautious and consider context, as administrators legitimately listing buckets can trigger this detection. In such cases, it might be necessary to refine the monitoring process to filter out users who are known to perform this task as part of their normal duties. The sensitivity level for this detection is set to low, acknowledging that while it's a potentially indicative behavior of reconnaissance, it can also be a common administrative task.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 's3.amazonaws.com'\n        eventName: 'ListBuckets'\n    filter:\n        type: 'AssumedRole'\n    condition: selection and not filter\nfalsepositives:\n    - Administrators listing buckets, it may be necessary to filter out users who commonly conduct this activity.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection:\n        eventSource: 's3.amazonaws.com'\n        eventName: 'ListBuckets'\n    filter:\n        type: 'AssumedRole'\n    condition: selection and not filter\nfalsepositives:\n    - Administrators listing buckets, it may be necessary to filter out users who commonly conduct this activity.\nlevel: low\n",
      "question": "Looks for potential enumeration of AWS buckets via ListBuckets.",
      "answer": "In order to looks for potential enumeration of AWS buckets via ListBuckets, you should: Monitor AWS CloudTrail logs for activities that indicate attempts to list all S3 buckets. Specifically, focus on events where the `eventSource` is `s3.amazonaws.com` and the `eventName` is `ListBuckets`. These events are essential to watch because they can suggest that someone is trying to enumerate, or list, all the AWS S3 buckets, which might be an early step in an attack aiming to discover data or assets to exploit. It's crucial to filter out events generated by `AssumedRole` types to reduce false positives, as these are more likely to be legitimate administrative activities. However, it's recommended to remain cautious and consider context, as administrators legitimately listing buckets can trigger this detection. In such cases, it might be necessary to refine the monitoring process to filter out users who are known to perform this task as part of their normal duties. The sensitivity level for this detection is set to low, acknowledging that while it's a potentially indicative behavior of reconnaissance, it can also be a common administrative task."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting URL patterns that could be found in ProxyShell exploitation attempts against Exchange servers (failed and successful).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect URL patterns that could be found in ProxyShell exploitation attempts against Exchange servers (failed and successful), you should: Monitor web server logs for suspicious activity that could indicate an attack attempt. Specifically, look for HTTP status codes of 401, which denote unauthorized access attempts. Pay special attention to the content of the URI query. Key indicators of a ProxyShell exploit attempt include the presence of '/autodiscover.json', as well as other specific paths such as '/powershell', '/mapi/nspi', '/EWS', and 'X-Rps-CAT'. Moreover, variations of 'autodiscover.json' in the query, with potential URL encoding schemes and unusual character combinations like '?@' and 'Email=autodiscover/autodiscover.json', are strong indicators of exploitation attempts. Any logs matching these criteria should be treated with a high level of suspicion due to the potential for severe security implications. Given the nature of these signs, there are limited false positive concerns; however, any unknown or unexpected matches should still be investigated thoroughly to confirm their nature. This monitoring approach uses insights from tactics and techniques associated with web server exploitation and unauthorized access attempts, ensuring a comprehensive defensive stance against ProxyShell attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection_1:\n        sc-status: 401\n    selection_1_auto:\n        cs-uri-query|contains: '/autodiscover.json'\n    selection_1_uri:\n        cs-uri-query|contains:\n            - '/powershell'\n            - '/mapi/nspi'\n            - '/EWS'\n            - 'X-Rps-CAT'\n    selection_poc:\n        sc-status: 401\n        cs-uri-query|contains:\n            # since we don't know how it will appear in the log files, we'll just use all versions\n            - 'autodiscover.json?@'\n            - 'autodiscover.json%3f@'\n            - '%3f@foo.com'\n            - 'Email=autodiscover/autodiscover.json'\n            - 'json?@foo.com'\n    condition: all of selection_1* or selection_poc\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection_1:\n        sc-status: 401\n    selection_1_auto:\n        cs-uri-query|contains: '/autodiscover.json'\n    selection_1_uri:\n        cs-uri-query|contains:\n            - '/powershell'\n            - '/mapi/nspi'\n            - '/EWS'\n            - 'X-Rps-CAT'\n    selection_poc:\n        sc-status: 401\n        cs-uri-query|contains:\n            # since we don't know how it will appear in the log files, we'll just use all versions\n            - 'autodiscover.json?@'\n            - 'autodiscover.json%3f@'\n            - '%3f@foo.com'\n            - 'Email=autodiscover/autodiscover.json'\n            - 'json?@foo.com'\n    condition: all of selection_1* or selection_poc\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "URL patterns that could be found in ProxyShell exploitation attempts against Exchange servers (failed and successful)",
      "answer": "In order to detect URL patterns that could be found in ProxyShell exploitation attempts against Exchange servers (failed and successful), you should: Monitor web server logs for suspicious activity that could indicate an attack attempt. Specifically, look for HTTP status codes of 401, which denote unauthorized access attempts. Pay special attention to the content of the URI query. Key indicators of a ProxyShell exploit attempt include the presence of '/autodiscover.json', as well as other specific paths such as '/powershell', '/mapi/nspi', '/EWS', and 'X-Rps-CAT'. Moreover, variations of 'autodiscover.json' in the query, with potential URL encoding schemes and unusual character combinations like '?@' and 'Email=autodiscover/autodiscover.json', are strong indicators of exploitation attempts. Any logs matching these criteria should be treated with a high level of suspicion due to the potential for severe security implications. Given the nature of these signs, there are limited false positive concerns; however, any unknown or unexpected matches should still be investigated thoroughly to confirm their nature. This monitoring approach uses insights from tactics and techniques associated with web server exploitation and unauthorized access attempts, ensuring a comprehensive defensive stance against ProxyShell attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting registry keys related to Ursnif malware..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect registry keys related to Ursnif malware, you should monitor for the creation of new registry keys within Windows, specifically targeting instances where the registry category indicates an addition to the registry. Look for events where a new registry key creation (EventType: CreateKey) is detected, especially those that involve path strings containing '\\Software\\AppDataLow\\Software\\Microsoft\\'. However, to improve precision and reduce false alarms, it is crucial to exclude any events that involve the creation of keys under the paths that include '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\', or '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'. This focused approach helps in isolating registry key creations that are more likely to be associated with malicious activities, particularly those that could be linked to the Ursnif malware, a prevalent threat. While there may still be unknown false positives, given the high level of specificity in the detection criteria, any match should be treated with a high degree of suspicion and investigated accordingly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains: '\\Software\\AppDataLow\\Software\\Microsoft\\'\n    filter:\n        TargetObject|contains:\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_add\ndetection:\n    selection:\n        EventType: CreateKey\n        TargetObject|contains: '\\Software\\AppDataLow\\Software\\Microsoft\\'\n    filter:\n        TargetObject|contains:\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\'\n            - '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "registry keys related to Ursnif malware.",
      "answer": "In order to detect registry keys related to Ursnif malware, you should monitor for the creation of new registry keys within Windows, specifically targeting instances where the registry category indicates an addition to the registry. Look for events where a new registry key creation (EventType: CreateKey) is detected, especially those that involve path strings containing '\\Software\\AppDataLow\\Software\\Microsoft\\'. However, to improve precision and reduce false alarms, it is crucial to exclude any events that involve the creation of keys under the paths that include '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Internet Explorer\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\RepService\\', '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\IME\\', or '\\SOFTWARE\\AppDataLow\\Software\\Microsoft\\Edge\\'. This focused approach helps in isolating registry key creations that are more likely to be associated with malicious activities, particularly those that could be linked to the Ursnif malware, a prevalent threat. While there may still be unknown false positives, given the high level of specificity in the detection criteria, any match should be treated with a high degree of suspicion and investigated accordingly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Focus on monitoring PowerShell activity within Windows environments. Specifically, look for any instances where the process 'SyncAppvPublishingServer.exe' is executed. This process is commonly exploited by attackers to circumvent PowerShell execution restrictions. It is crucial to be aware of legitimate App-V client interactions, as they may also trigger this detection, leading to potential false positives. This detection strategy is rated with a medium level of confidence and has been marked as deprecated, indicating that while it may still be relevant, there may be more current or accurate methods of detection. The associated attacker tactics and techniques include leveraging system utilities to bypass security measures.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: powershell\ndetection:\n    selection:\n        - 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\nstatus: deprecated",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: powershell\ndetection:\n    selection:\n        - 'SyncAppvPublishingServer.exe'\n    condition: selection\nfalsepositives:\n    - App-V clients\nlevel: medium\nstatus: deprecated",
      "question": "SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
      "answer": "In order to detect SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions, you should: Focus on monitoring PowerShell activity within Windows environments. Specifically, look for any instances where the process 'SyncAppvPublishingServer.exe' is executed. This process is commonly exploited by attackers to circumvent PowerShell execution restrictions. It is crucial to be aware of legitimate App-V client interactions, as they may also trigger this detection, leading to potential false positives. This detection strategy is rated with a medium level of confidence and has been marked as deprecated, indicating that while it may still be relevant, there may be more current or accurate methods of detection. The associated attacker tactics and techniques include leveraging system utilities to bypass security measures."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of certutil with certain flags that allow the utility to download files from direct IPs..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of certutil with certain flags that allow the utility to download files from direct IPs, you should monitor the creation of processes on Windows systems. Specifically, look for instances where the process image ends with '\\certutil.exe' or has an original filename of 'CertUtil.exe'. Additionally, watch for command lines that contain flags such as 'urlcache ' or 'verifyctl ', which are indicative of certutil being used for file manipulation or certificate verification tasks. Moreover, it's important to scrutinize any command line that includes direct IP addresses, signified by '://1' through '://9', as these could signal an attempt to download files directly using IPs, bypassing typical DNS resolution methods. However, be cautious of command lines that contain '://7-', as this might refer to legitimate usage related to the 7-zip utility, and thus, should be excluded to reduce false positives. This approach targets the identification of potential misuse of certutil for suspicious file download activities, aligning with defense tactics against Execution and Command and Control techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains:\n            - '://1'\n            - '://2'\n            - '://3'\n            - '://4'\n            - '://5'\n            - '://6'\n            - '://7'\n            - '://8'\n            - '://9'\n    #filter_local_ips:\n    #    # Note: Uncomment this filter if you want to exclude local IPs\n    #    CommandLine|contains:\n    #        - '://10.' #10.0.0.0/8\n    #        - '://192.168.' #192.168.0.0/16\n    #        - '://172.16.' #172.16.0.0/12\n    #        - '://172.17.'\n    #        - '://172.18.'\n    #        - '://172.19.'\n    #        - '://172.20.'\n    #        - '://172.21.'\n    #        - '://172.22.'\n    #        - '://172.23.'\n    #        - '://172.24.'\n    #        - '://172.25.'\n    #        - '://172.26.'\n    #        - '://172.27.'\n    #        - '://172.28.'\n    #        - '://172.29.'\n    #        - '://172.30.'\n    #        - '://172.31.'\n    #        - '://127.' #127.0.0.0/8\n    #        - '://169.254.' #169.254.0.0/16\n    filter_seven_zip:\n        CommandLine|contains: '://7-' # For https://7-zip.org/\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\certutil.exe'\n        - OriginalFileName: 'CertUtil.exe'\n    selection_flags:\n        CommandLine|contains:\n            - 'urlcache '\n            - 'verifyctl '\n    selection_http:\n        CommandLine|contains:\n            - '://1'\n            - '://2'\n            - '://3'\n            - '://4'\n            - '://5'\n            - '://6'\n            - '://7'\n            - '://8'\n            - '://9'\n    #filter_local_ips:\n    #    # Note: Uncomment this filter if you want to exclude local IPs\n    #    CommandLine|contains:\n    #        - '://10.' #10.0.0.0/8\n    #        - '://192.168.' #192.168.0.0/16\n    #        - '://172.16.' #172.16.0.0/12\n    #        - '://172.17.'\n    #        - '://172.18.'\n    #        - '://172.19.'\n    #        - '://172.20.'\n    #        - '://172.21.'\n    #        - '://172.22.'\n    #        - '://172.23.'\n    #        - '://172.24.'\n    #        - '://172.25.'\n    #        - '://172.26.'\n    #        - '://172.27.'\n    #        - '://172.28.'\n    #        - '://172.29.'\n    #        - '://172.30.'\n    #        - '://172.31.'\n    #        - '://127.' #127.0.0.0/8\n    #        - '://169.254.' #169.254.0.0/16\n    filter_seven_zip:\n        CommandLine|contains: '://7-' # For https://7-zip.org/\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of certutil with certain flags that allow the utility to download files from direct IPs.",
      "answer": "In order to detect the execution of certutil with certain flags that allow the utility to download files from direct IPs, you should monitor the creation of processes on Windows systems. Specifically, look for instances where the process image ends with '\\certutil.exe' or has an original filename of 'CertUtil.exe'. Additionally, watch for command lines that contain flags such as 'urlcache ' or 'verifyctl ', which are indicative of certutil being used for file manipulation or certificate verification tasks. Moreover, it's important to scrutinize any command line that includes direct IP addresses, signified by '://1' through '://9', as these could signal an attempt to download files directly using IPs, bypassing typical DNS resolution methods. However, be cautious of command lines that contain '://7-', as this might refer to legitimate usage related to the 7-zip utility, and thus, should be excluded to reduce false positives. This approach targets the identification of potential misuse of certutil for suspicious file download activities, aligning with defense tactics against Execution and Command and Control techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Local accounts, System Owner/User discovery using operating systems utilities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities associated with local accounts, system owner/user discovery using operating systems utilities, you should monitor for the execution of specific Windows utilities and command patterns indicative of enumeration or information gathering efforts. This includes the launching of utilities like 'whoami.exe', 'quser.exe', 'qwinsta.exe', 'wmic.exe' specifically with command lines aimed at retrieving user account information, 'cmdkey.exe' with commands for listing stored user credentials, and 'cmd.exe' with commands that attempt to list directories under the \\Users\\ path but exclude commands aimed at removing directories to avoid false positives. Additionally, execution of 'net.exe' or 'net1.exe' with commands including 'user' but excluding switches that indicate legitimate account management purposes such as '/add', '/domain', '/delete' etc., should also be watched. This approach focuses on identifying actions that suggest an attempt to discover local user accounts or system owners, which are essential steps in many attack scenarios where attackers aim to escalate privileges or move laterally within a network. It is important to keep in mind that there may be legitimate reasons for these utilities to be run by administrators or users, which can lead to potential false positives, thus the alert level is considered low until further investigation confirms malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other_img:\n        Image|endswith:\n            - '\\whoami.exe'\n            - '\\quser.exe'\n            - '\\qwinsta.exe'\n    selection_other_wmi:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains|all:\n            - 'useraccount'\n            - 'get'\n    selection_other_cmdkey:\n        Image|endswith: '\\cmdkey.exe'\n        CommandLine|contains: ' /l'\n    selection_cmd:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains|all:\n            - ' /c'\n            - 'dir '\n            - '\\Users\\'\n    filter_cmd:\n        CommandLine|contains: ' rmdir ' # don't match on 'dir'   \"C:\\Windows\\System32\\cmd.exe\" /q /c rmdir /s /q \"C:\\Users\\XX\\AppData\\Local\\Microsoft\\OneDrive\\19.232.1124.0005\"\n    selection_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'user'\n    filter_net:\n        CommandLine|contains:\n            - '/domain'       # local account discovery only\n            - '/add'          # discovery only\n            - '/delete'       # discovery only\n            - '/active'       # discovery only\n            - '/expires'      # discovery only\n            - '/passwordreq'  # discovery only\n            - '/scriptpath'   # discovery only\n            - '/times'        # discovery only\n            - '/workstations' # discovery only\n    condition: (selection_cmd and not filter_cmd) or (selection_net and not filter_net) or 1 of selection_other_*\nfalsepositives:\n    - Legitimate administrator or user enumerates local users for legitimate reason\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other_img:\n        Image|endswith:\n            - '\\whoami.exe'\n            - '\\quser.exe'\n            - '\\qwinsta.exe'\n    selection_other_wmi:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains|all:\n            - 'useraccount'\n            - 'get'\n    selection_other_cmdkey:\n        Image|endswith: '\\cmdkey.exe'\n        CommandLine|contains: ' /l'\n    selection_cmd:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains|all:\n            - ' /c'\n            - 'dir '\n            - '\\Users\\'\n    filter_cmd:\n        CommandLine|contains: ' rmdir ' # don't match on 'dir'   \"C:\\Windows\\System32\\cmd.exe\" /q /c rmdir /s /q \"C:\\Users\\XX\\AppData\\Local\\Microsoft\\OneDrive\\19.232.1124.0005\"\n    selection_net:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'user'\n    filter_net:\n        CommandLine|contains:\n            - '/domain'       # local account discovery only\n            - '/add'          # discovery only\n            - '/delete'       # discovery only\n            - '/active'       # discovery only\n            - '/expires'      # discovery only\n            - '/passwordreq'  # discovery only\n            - '/scriptpath'   # discovery only\n            - '/times'        # discovery only\n            - '/workstations' # discovery only\n    condition: (selection_cmd and not filter_cmd) or (selection_net and not filter_net) or 1 of selection_other_*\nfalsepositives:\n    - Legitimate administrator or user enumerates local users for legitimate reason\nlevel: low\n",
      "question": "Local accounts, System Owner/User discovery using operating systems utilities",
      "answer": "In order to detect activities associated with local accounts, system owner/user discovery using operating systems utilities, you should monitor for the execution of specific Windows utilities and command patterns indicative of enumeration or information gathering efforts. This includes the launching of utilities like 'whoami.exe', 'quser.exe', 'qwinsta.exe', 'wmic.exe' specifically with command lines aimed at retrieving user account information, 'cmdkey.exe' with commands for listing stored user credentials, and 'cmd.exe' with commands that attempt to list directories under the \\Users\\ path but exclude commands aimed at removing directories to avoid false positives. Additionally, execution of 'net.exe' or 'net1.exe' with commands including 'user' but excluding switches that indicate legitimate account management purposes such as '/add', '/domain', '/delete' etc., should also be watched. This approach focuses on identifying actions that suggest an attempt to discover local user accounts or system owners, which are essential steps in many attack scenarios where attackers aim to escalate privileges or move laterally within a network. It is important to keep in mind that there may be legitimate reasons for these utilities to be run by administrators or users, which can lead to potential false positives, thus the alert level is considered low until further investigation confirms malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should: Monitor Windows PowerShell script logs to identify any instances where scripts include the commands 'Add-AppPackage ' or 'Add-AppxPackage ', especially when these commands are combined with the flag ' -AllowUnsigned'. This monitoring is predicated on having Script Block Logging enabled to capture PowerShell script activities. It is important to be cautious as there may be legitimate reasons for installing unsigned packages, such as during testing phases. The risk level associated with this activity is deemed medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: Script Block Logging must be enable\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains:\n            - 'Add-AppPackage '\n            - 'Add-AppxPackage '\n    selection_flag:\n        ScriptBlockText|contains: ' -AllowUnsigned'\n    condition: all of selection_*\nfalsepositives:\n    - Installation of unsigned packages for testing purposes\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: Script Block Logging must be enable\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains:\n            - 'Add-AppPackage '\n            - 'Add-AppxPackage '\n    selection_flag:\n        ScriptBlockText|contains: ' -AllowUnsigned'\n    condition: all of selection_*\nfalsepositives:\n    - Installation of unsigned packages for testing purposes\nlevel: medium\n",
      "question": "usage of the \"Add-AppxPackage\" or it's alias \"Add-AppPackage\" to install unsigned AppX packages",
      "answer": "In order to detect usage of the \"Add-AppxPackage\" or its alias \"Add-AppPackage\" to install unsigned AppX packages, you should: Monitor Windows PowerShell script logs to identify any instances where scripts include the commands 'Add-AppPackage ' or 'Add-AppxPackage ', especially when these commands are combined with the flag ' -AllowUnsigned'. This monitoring is predicated on having Script Block Logging enabled to capture PowerShell script activities. It is important to be cautious as there may be legitimate reasons for installing unsigned packages, such as during testing phases. The risk level associated with this activity is deemed medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting highly relevant Antivirus alert that reports a web shell. It's highly recommended to tune this rule to the specific strings used by your anti virus solution by downloading a big webshell repo from e.g. github and checking the matches..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a highly relevant Antivirus alert that reports a web shell, you should focus on monitoring antivirus logs for specific signatures that indicate the presence of web shell malware. These signatures are primarily associated with file types and naming conventions that are commonly used by web shells, including patterns starting with 'PHP.', 'JSP.', 'ASP.', 'Perl.', and 'VBS/Uxor' among others. Additionally, signatures that contain keywords like 'Webshell', 'Chopper', 'SinoChoper', 'ASPXSpy', and similar terms are crucial for detection. This strategy covers a broad spectrum of potential web shell threats by identifying files and scripts named or structured in a way that's typical for malicious web-based backdoors.\n\nThe detection process should be automated to trigger alerts whenever these specific signature patterns are found in the antivirus logs. This includes both cases where the signature starts with or contains the outlined patterns and keywords. Monitoring for these signatures helps in the early identification of web shells, which are scripts placed maliciously on a web server to enable remote administration.\n\nGiven the varying nature of web shells and the evolving tactics of threat actors, it's important to periodically update and refine the list of signatures used for detection based on current threat intelligence and emerging patterns of web shell use. This may involve incorporating custom signatures tailored to the unique environment and potential threat vectors faced by an organization.\n\nDetecting web shells is a critical aspect of maintaining web server security. Web shells can enable attackers to steal data, deploy additional malicious software, and gain persistent access to compromised systems. By focusing on antivirus alerts that specifically report signatures indicative of web shell activity, security professionals can mitigate the risk of unauthorized access and potential data breaches. Paying attention to the fields like 'FileName' and 'User' associated with these alerts will also aid in the investigation and remediation processes. \n\nFurthermore, while the likelihood of false positives is considered low, any alerts should be thoroughly investigated to confirm the presence of a web shell and to determine the scope of any potential security breach. This proactive approach to detecting and responding to web shell threats is an essential component of a comprehensive cybersecurity strategy.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        - Signature|startswith:\n            - 'PHP.'\n            - 'JSP.'\n            - 'ASP.'\n            - 'Perl.'\n            - 'VBS/Uxor' # looking for 'VBS/' would also find downloaders and droppers meant for desktops\n            - 'IIS/BackDoor'\n            - 'JAVA/Backdoor'\n            - 'Troj/ASP'\n            - 'Troj/PHP'\n            - 'Troj/JSP'\n        - Signature|contains:\n            - 'Webshell'\n            - 'Chopper'\n            - 'SinoChoper'\n            - 'ASPXSpy'\n            - 'Aspdoor'\n            - 'filebrowser'\n            - 'PHP_'\n            - 'JSP_'\n            - 'ASP_' # looking for 'VBS_' would also find downloaders and droppers meant for desktops\n            - 'PHP:'\n            - 'JSP:'\n            - 'ASP:'\n            - 'Perl:'\n            - 'PHP/'\n            - 'JSP/'\n            - 'ASP/'\n            - 'Perl/'\n            - 'PHPShell'\n            - 'Trojan.PHP'\n            - 'Trojan.ASP'\n            - 'Trojan.JSP'\n            - 'Trojan.VBS'\n            - 'PHP/Agent'\n            - 'ASP/Agent'\n            - 'JSP/Agent'\n            - 'VBS/Agent'\n            - 'Backdoor/PHP'\n            - 'Backdoor/JSP'\n            - 'Backdoor/ASP'\n            - 'Backdoor/VBS'\n            - 'Backdoor/Java'\n            - 'PHP.Agent'\n            - 'ASP.Agent'\n            - 'JSP.Agent'\n            - 'VBS.Agent'\n            - 'Backdoor.PHP'\n            - 'Backdoor.JSP'\n            - 'Backdoor.ASP'\n            - 'Backdoor.VBS'\n            - 'Backdoor.Java'\n            - 'PShlSpy'\n            - 'C99shell'\n    condition: selection\nfields:\n    - FileName\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: antivirus\ndetection:\n    selection:\n        - Signature|startswith:\n            - 'PHP.'\n            - 'JSP.'\n            - 'ASP.'\n            - 'Perl.'\n            - 'VBS/Uxor' # looking for 'VBS/' would also find downloaders and droppers meant for desktops\n            - 'IIS/BackDoor'\n            - 'JAVA/Backdoor'\n            - 'Troj/ASP'\n            - 'Troj/PHP'\n            - 'Troj/JSP'\n        - Signature|contains:\n            - 'Webshell'\n            - 'Chopper'\n            - 'SinoChoper'\n            - 'ASPXSpy'\n            - 'Aspdoor'\n            - 'filebrowser'\n            - 'PHP_'\n            - 'JSP_'\n            - 'ASP_' # looking for 'VBS_' would also find downloaders and droppers meant for desktops\n            - 'PHP:'\n            - 'JSP:'\n            - 'ASP:'\n            - 'Perl:'\n            - 'PHP/'\n            - 'JSP/'\n            - 'ASP/'\n            - 'Perl/'\n            - 'PHPShell'\n            - 'Trojan.PHP'\n            - 'Trojan.ASP'\n            - 'Trojan.JSP'\n            - 'Trojan.VBS'\n            - 'PHP/Agent'\n            - 'ASP/Agent'\n            - 'JSP/Agent'\n            - 'VBS/Agent'\n            - 'Backdoor/PHP'\n            - 'Backdoor/JSP'\n            - 'Backdoor/ASP'\n            - 'Backdoor/VBS'\n            - 'Backdoor/Java'\n            - 'PHP.Agent'\n            - 'ASP.Agent'\n            - 'JSP.Agent'\n            - 'VBS.Agent'\n            - 'Backdoor.PHP'\n            - 'Backdoor.JSP'\n            - 'Backdoor.ASP'\n            - 'Backdoor.VBS'\n            - 'Backdoor.Java'\n            - 'PShlSpy'\n            - 'C99shell'\n    condition: selection\nfields:\n    - FileName\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "highly relevant Antivirus alert that reports a web shell. It's highly recommended to tune this rule to the specific strings used by your anti virus solution by downloading a big webshell repo from e.g. github and checking the matches.",
      "answer": "In order to detect a highly relevant Antivirus alert that reports a web shell, you should focus on monitoring antivirus logs for specific signatures that indicate the presence of web shell malware. These signatures are primarily associated with file types and naming conventions that are commonly used by web shells, including patterns starting with 'PHP.', 'JSP.', 'ASP.', 'Perl.', and 'VBS/Uxor' among others. Additionally, signatures that contain keywords like 'Webshell', 'Chopper', 'SinoChoper', 'ASPXSpy', and similar terms are crucial for detection. This strategy covers a broad spectrum of potential web shell threats by identifying files and scripts named or structured in a way that's typical for malicious web-based backdoors.\n\nThe detection process should be automated to trigger alerts whenever these specific signature patterns are found in the antivirus logs. This includes both cases where the signature starts with or contains the outlined patterns and keywords. Monitoring for these signatures helps in the early identification of web shells, which are scripts placed maliciously on a web server to enable remote administration.\n\nGiven the varying nature of web shells and the evolving tactics of threat actors, it's important to periodically update and refine the list of signatures used for detection based on current threat intelligence and emerging patterns of web shell use. This may involve incorporating custom signatures tailored to the unique environment and potential threat vectors faced by an organization.\n\nDetecting web shells is a critical aspect of maintaining web server security. Web shells can enable attackers to steal data, deploy additional malicious software, and gain persistent access to compromised systems. By focusing on antivirus alerts that specifically report signatures indicative of web shell activity, security professionals can mitigate the risk of unauthorized access and potential data breaches. Paying attention to the fields like 'FileName' and 'User' associated with these alerts will also aid in the investigation and remediation processes. \n\nFurthermore, while the likelihood of false positives is considered low, any alerts should be thoroughly investigated to confirm the presence of a web shell and to determine the scope of any potential security breach. This proactive approach to detecting and responding to web shell threats is an essential component of a comprehensive cybersecurity strategy."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known suspicious (default) user-agents related to scanning/recon tools.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known suspicious (default) user-agents related to scanning/recon tools, you should: Monitor your webserver logs for any occurrences of specific user-agent strings that are commonly associated with scanning or reconnaissance tools. These include user-agent strings containing 'Wfuzz/', 'WPScan v', 'Recon-ng/v', or 'GIS - AppSec Team - Project Vision'. The detection of these strings may indicate an attempt to scan your webserver for vulnerabilities or gather information in preparation for an attack. It's important to note that while the identification of these user-agents can signal potentially malicious activity, there may also be unknown instances where these detections do not signify an actual threat. The severity level for these detections is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-user-agent|contains:\n            # Add more tools as you see fit\n            - 'Wfuzz/'\n            - 'WPScan v'\n            - 'Recon-ng/v'\n            - 'GIS - AppSec Team - Project Vision'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-user-agent|contains:\n            # Add more tools as you see fit\n            - 'Wfuzz/'\n            - 'WPScan v'\n            - 'Recon-ng/v'\n            - 'GIS - AppSec Team - Project Vision'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "known suspicious (default) user-agents related to scanning/recon tools",
      "answer": "In order to detect known suspicious (default) user-agents related to scanning/recon tools, you should: Monitor your webserver logs for any occurrences of specific user-agent strings that are commonly associated with scanning or reconnaissance tools. These include user-agent strings containing 'Wfuzz/', 'WPScan v', 'Recon-ng/v', or 'GIS - AppSec Team - Project Vision'. The detection of these strings may indicate an attempt to scan your webserver for vulnerabilities or gather information in preparation for an attack. It's important to note that while the identification of these user-agents can signal potentially malicious activity, there may also be unknown instances where these detections do not signify an actual threat. The severity level for these detections is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives), you should: Monitor the creation of processes on Windows systems for any instances where the name of the executable file indicates it could be part of the impacket collection of networking tools. Specifically, look out for files named or containing certain key strings such as 'goldenPac', 'karmaSMB', 'kintercept', 'ntlmrelayx', 'rpcdump', 'samrdump', 'secretsdump', 'smbexec', 'smbrelayx', 'wmiexec', 'wmipersist' or ending with 'atexec_windows.exe', 'dcomexec_windows.exe', 'dpapi_windows.exe', 'findDelegation_windows.exe', 'GetADUsers_windows.exe', 'GetNPUsers_windows.exe', 'getPac_windows.exe', 'getST_windows.exe', 'getTGT_windows.exe', 'GetUserSPNs_windows.exe', 'ifmap_windows.exe', 'mimikatz_windows.exe', 'netview_windows.exe', 'nmapAnswerMachine_windows.exe', 'opdump_windows.exe', 'psexec_windows.exe', 'rdp_check_windows.exe', 'sambaPipe_windows.exe', 'smbclient_windows.exe', 'smbserver_windows.exe', 'sniffer_windows.exe', 'sniff_windows.exe', 'split_windows.exe', 'ticketer_windows.exe'. Be aware that, while these detections are highly indicative of impacket toolset usage, they may also flag legitimate uses of these tools, thus careful analysis is required to distinguish between malicious activity and approved operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|contains:\n            - '\\goldenPac'\n            - '\\karmaSMB'\n            - '\\kintercept'\n            - '\\ntlmrelayx'\n            - '\\rpcdump'\n            - '\\samrdump'\n            - '\\secretsdump'\n            - '\\smbexec'\n            - '\\smbrelayx'\n            - '\\wmiexec'\n            - '\\wmipersist'\n        - Image|endswith:\n            # - '\\addcomputer_windows.exe'\n            - '\\atexec_windows.exe'\n            - '\\dcomexec_windows.exe'\n            - '\\dpapi_windows.exe'\n            # - '\\esentutl_windows.exe'\n            - '\\findDelegation_windows.exe'\n            - '\\GetADUsers_windows.exe'\n            # - '\\getArch_windows.exe'\n            - '\\GetNPUsers_windows.exe'\n            - '\\getPac_windows.exe'\n            - '\\getST_windows.exe'\n            - '\\getTGT_windows.exe'\n            - '\\GetUserSPNs_windows.exe'\n            - '\\ifmap_windows.exe'\n            # - '\\lookupsid_windows.exe'\n            - '\\mimikatz_windows.exe'\n            # - '\\mqtt_check_windows.exe'\n            # - '\\mssqlclient_windows.exe'\n            # - '\\mssqlinstance_windows.exe'\n            - '\\netview_windows.exe'\n            - '\\nmapAnswerMachine_windows.exe'\n            #- '\\ntfs-read_windows.exe'\n            - '\\opdump_windows.exe'\n            # - '\\ping6_windows.exe'\n            # - '\\ping_windows.exe'\n            - '\\psexec_windows.exe'\n            # - '\\raiseChild_windows.exe'\n            - '\\rdp_check_windows.exe'\n            #- '\\registry-read_windows.exe'\n            #- '\\reg_windows.exe'\n            - '\\sambaPipe_windows.exe'\n            # - '\\services_windows.exe'\n            - '\\smbclient_windows.exe'\n            - '\\smbserver_windows.exe'\n            - '\\sniffer_windows.exe'\n            - '\\sniff_windows.exe'\n            - '\\split_windows.exe'\n            - '\\ticketer_windows.exe'\n            # - '\\wmiquery_windows.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the impacket tools\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|contains:\n            - '\\goldenPac'\n            - '\\karmaSMB'\n            - '\\kintercept'\n            - '\\ntlmrelayx'\n            - '\\rpcdump'\n            - '\\samrdump'\n            - '\\secretsdump'\n            - '\\smbexec'\n            - '\\smbrelayx'\n            - '\\wmiexec'\n            - '\\wmipersist'\n        - Image|endswith:\n            # - '\\addcomputer_windows.exe'\n            - '\\atexec_windows.exe'\n            - '\\dcomexec_windows.exe'\n            - '\\dpapi_windows.exe'\n            # - '\\esentutl_windows.exe'\n            - '\\findDelegation_windows.exe'\n            - '\\GetADUsers_windows.exe'\n            # - '\\getArch_windows.exe'\n            - '\\GetNPUsers_windows.exe'\n            - '\\getPac_windows.exe'\n            - '\\getST_windows.exe'\n            - '\\getTGT_windows.exe'\n            - '\\GetUserSPNs_windows.exe'\n            - '\\ifmap_windows.exe'\n            # - '\\lookupsid_windows.exe'\n            - '\\mimikatz_windows.exe'\n            # - '\\mqtt_check_windows.exe'\n            # - '\\mssqlclient_windows.exe'\n            # - '\\mssqlinstance_windows.exe'\n            - '\\netview_windows.exe'\n            - '\\nmapAnswerMachine_windows.exe'\n            #- '\\ntfs-read_windows.exe'\n            - '\\opdump_windows.exe'\n            # - '\\ping6_windows.exe'\n            # - '\\ping_windows.exe'\n            - '\\psexec_windows.exe'\n            # - '\\raiseChild_windows.exe'\n            - '\\rdp_check_windows.exe'\n            #- '\\registry-read_windows.exe'\n            #- '\\reg_windows.exe'\n            - '\\sambaPipe_windows.exe'\n            # - '\\services_windows.exe'\n            - '\\smbclient_windows.exe'\n            - '\\smbserver_windows.exe'\n            - '\\sniffer_windows.exe'\n            - '\\sniff_windows.exe'\n            - '\\split_windows.exe'\n            - '\\ticketer_windows.exe'\n            # - '\\wmiquery_windows.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of the impacket tools\nlevel: high\n",
      "question": "execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives)",
      "answer": "In order to detect the execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives), you should: Monitor the creation of processes on Windows systems for any instances where the name of the executable file indicates it could be part of the impacket collection of networking tools. Specifically, look out for files named or containing certain key strings such as 'goldenPac', 'karmaSMB', 'kintercept', 'ntlmrelayx', 'rpcdump', 'samrdump', 'secretsdump', 'smbexec', 'smbrelayx', 'wmiexec', 'wmipersist' or ending with 'atexec_windows.exe', 'dcomexec_windows.exe', 'dpapi_windows.exe', 'findDelegation_windows.exe', 'GetADUsers_windows.exe', 'GetNPUsers_windows.exe', 'getPac_windows.exe', 'getST_windows.exe', 'getTGT_windows.exe', 'GetUserSPNs_windows.exe', 'ifmap_windows.exe', 'mimikatz_windows.exe', 'netview_windows.exe', 'nmapAnswerMachine_windows.exe', 'opdump_windows.exe', 'psexec_windows.exe', 'rdp_check_windows.exe', 'sambaPipe_windows.exe', 'smbclient_windows.exe', 'smbserver_windows.exe', 'sniffer_windows.exe', 'sniff_windows.exe', 'split_windows.exe', 'ticketer_windows.exe'. Be aware that, while these detections are highly indicative of impacket toolset usage, they may also flag legitimate uses of these tools, thus careful analysis is required to distinguish between malicious activity and approved operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting file download using curl.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect file download using curl.exe, you should monitor Windows process creation logs for instances where `curl.exe` is executed. Look for command line usage of `curl.exe` that includes accessing URLs directly through IP addresses or referencing commonly used file-sharing or pasting services such as anonfiles.com, cdn.discordapp.com/attachments/, ddns.net, and several others including mediafire.com, mega.nz, pastebin.com, etc. Specifically, track the use of command lines containing 'http' indicating that HTTP protocol is being used for the file transfer. \n\nPay close attention to command lines that include flags like '-O', '--remote-name', or '--output', which are used in curl commands to save the downloaded file with a specific name or in a specific location. Further, be alert for command lines ending with file extensions such as '.ps1', '.bat', '.exe', '.vbs', '.vbe', '.hta', '.dll', and '.psm1', which indicate the types of files being downloaded. These can include scripts, executables, and libraries, which could be indicative of malicious activity if they are being sourced from untrusted or suspicious sites. \n\nIf all these conditions are met, it's indicative of a high chance that a file download is occurring using curl.exe which could be malicious in nature. It\u2019s essential to monitor these activities as they align with tactics and techniques associated with the delivery and execution of potential malicious payloads.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_websites:\n        - CommandLine|re: '://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n        - CommandLine|contains:\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com/attachments/'\n            - 'ddns.net'\n            - 'ghostbin.co/'\n            - 'gist.githubusercontent.com'\n            - 'hastebin.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'raw.githubusercontent.com'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'temp.sh'\n            - 'transfer.sh'\n            - 'ufile.io'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_flag:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    selection_ext:\n        CommandLine|endswith:\n            - \".ps1\"\n            - \".ps1'\"\n            - '.ps1\"'\n            - \".bat\"\n            - \".bat'\"\n            - '.bat\"'\n            - \".exe\"\n            - \".exe'\"\n            - '.exe\"'\n            - \".vbs\"\n            - \".vbs'\"\n            - '.vbs\"'\n            - \".vbe\"\n            - \".vbe'\"\n            - '.vbe\"'\n            - \".hta\"\n            - \".hta'\"\n            - '.hta\"'\n            - \".dll\"\n            - \".dll'\"\n            - '.dll\"'\n            - \".psm1\"\n            - \".psm1'\"\n            - '.psm1\"'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\curl.exe'\n        - OriginalFileName: 'curl.exe'\n    selection_websites:\n        - CommandLine|re: '://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n        - CommandLine|contains:\n            - 'anonfiles.com'\n            - 'cdn.discordapp.com/attachments/'\n            - 'ddns.net'\n            - 'ghostbin.co/'\n            - 'gist.githubusercontent.com'\n            - 'hastebin.com'\n            - 'mediafire.com'\n            - 'mega.nz'\n            - 'paste.ee'\n            - 'pastebin.com'\n            - 'pastebin.pl'\n            - 'pastetext.net'\n            - 'privatlab.com'\n            - 'privatlab.net'\n            - 'raw.githubusercontent.com'\n            - 'send.exploit.in'\n            - 'sendspace.com'\n            - 'storage.googleapis.com'\n            - 'temp.sh'\n            - 'transfer.sh'\n            - 'ufile.io'\n    selection_http:\n        CommandLine|contains: 'http'\n    selection_flag:\n        CommandLine|contains:\n            - ' -O'  # covers the alias for --remote-name and --output\n            - '--remote-name'\n            - '--output'\n    selection_ext:\n        CommandLine|endswith:\n            - \".ps1\"\n            - \".ps1'\"\n            - '.ps1\"'\n            - \".bat\"\n            - \".bat'\"\n            - '.bat\"'\n            - \".exe\"\n            - \".exe'\"\n            - '.exe\"'\n            - \".vbs\"\n            - \".vbs'\"\n            - '.vbs\"'\n            - \".vbe\"\n            - \".vbe'\"\n            - '.vbe\"'\n            - \".hta\"\n            - \".hta'\"\n            - '.hta\"'\n            - \".dll\"\n            - \".dll'\"\n            - '.dll\"'\n            - \".psm1\"\n            - \".psm1'\"\n            - '.psm1\"'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "file download using curl.exe",
      "answer": "In order to detect file download using curl.exe, you should monitor Windows process creation logs for instances where `curl.exe` is executed. Look for command line usage of `curl.exe` that includes accessing URLs directly through IP addresses or referencing commonly used file-sharing or pasting services such as anonfiles.com, cdn.discordapp.com/attachments/, ddns.net, and several others including mediafire.com, mega.nz, pastebin.com, etc. Specifically, track the use of command lines containing 'http' indicating that HTTP protocol is being used for the file transfer. \n\nPay close attention to command lines that include flags like '-O', '--remote-name', or '--output', which are used in curl commands to save the downloaded file with a specific name or in a specific location. Further, be alert for command lines ending with file extensions such as '.ps1', '.bat', '.exe', '.vbs', '.vbe', '.hta', '.dll', and '.psm1', which indicate the types of files being downloaded. These can include scripts, executables, and libraries, which could be indicative of malicious activity if they are being sourced from untrusted or suspicious sites. \n\nIf all these conditions are met, it's indicative of a high chance that a file download is occurring using curl.exe which could be malicious in nature. It\u2019s essential to monitor these activities as they align with tactics and techniques associated with the delivery and execution of potential malicious payloads."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious usage of the ShellExec_RunDLL function to launch other commands as seen in the the raspberry-robin attack.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious usage of the ShellExec_RunDLL function to launch other commands as seen in the raspberry-robin attack, you should monitor process creation events on Windows systems. Specifically, pay attention to the command line for any instances where 'ShellExec_RunDLL' is used, which indicates an attempt to execute commands in a manner that might be leveraging ShellExecute, a common technique in various attacks including raspberry-robin. Additionally, look for the use of other potentially suspicious command-line invocations that include utilities and paths often abused by attackers, such as 'regsvr32', 'msiexec', paths involving '\\Users\\Public\\', '\\Desktop\\', '\\Temp\\', or the use of scripting techniques like 'Invoke-' and 'iex', as well as 'comspec' and 'odbcconf'. These patterns are indicative of attempts to misuse legitimate Windows features or Living Off The Land Binaries and Scripts (LOLBAS) to execute malicious payloads without directly running malware, making them harder to detect. It's important to note that while monitoring for these indicators, one should be aware that there may be false positives since these commands can be used for legitimate purposes. However, given the high risk associated with these behaviors, any detection should be treated with high priority and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_openasrundll:\n        CommandLine|contains: 'ShellExec_RunDLL'\n    selection_suspcli:\n        CommandLine|contains:\n            # Add more LOLBINs and Susp Paths\n            - 'regsvr32'\n            - 'msiexec'\n            - '\\Users\\Public\\'\n            - 'odbcconf'\n            - '\\Desktop\\'\n            - '\\Temp\\'\n            - 'Invoke-'\n            - 'iex'\n            - 'comspec'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_openasrundll:\n        CommandLine|contains: 'ShellExec_RunDLL'\n    selection_suspcli:\n        CommandLine|contains:\n            # Add more LOLBINs and Susp Paths\n            - 'regsvr32'\n            - 'msiexec'\n            - '\\Users\\Public\\'\n            - 'odbcconf'\n            - '\\Desktop\\'\n            - '\\Temp\\'\n            - 'Invoke-'\n            - 'iex'\n            - 'comspec'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious usage of the ShellExec_RunDLL function to launch other commands as seen in the the raspberry-robin attack",
      "answer": "In order to detect suspicious usage of the ShellExec_RunDLL function to launch other commands as seen in the raspberry-robin attack, you should monitor process creation events on Windows systems. Specifically, pay attention to the command line for any instances where 'ShellExec_RunDLL' is used, which indicates an attempt to execute commands in a manner that might be leveraging ShellExecute, a common technique in various attacks including raspberry-robin. Additionally, look for the use of other potentially suspicious command-line invocations that include utilities and paths often abused by attackers, such as 'regsvr32', 'msiexec', paths involving '\\Users\\Public\\', '\\Desktop\\', '\\Temp\\', or the use of scripting techniques like 'Invoke-' and 'iex', as well as 'comspec' and 'odbcconf'. These patterns are indicative of attempts to misuse legitimate Windows features or Living Off The Land Binaries and Scripts (LOLBAS) to execute malicious payloads without directly running malware, making them harder to detect. It's important to note that while monitoring for these indicators, one should be aware that there may be false positives since these commands can be used for legitimate purposes. However, given the high risk associated with these behaviors, any detection should be treated with high priority and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exploitation attempts using Pulse Connect Secure(PCS) vulnerability (CVE-2021-22893).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exploitation attempts using Pulse Connect Secure (PCS) vulnerability (CVE-2021-22893), you should monitor your web server's logs for specific patterns in the query strings of URIs. Look for URIs containing '/dana-na/auth/', '/dana-ws/', '/dana-cached/', which are indicative of accessing different components of the PCS. Additionally, keep an eye out for query parameters such as '?id=', '?token=', 'Secid_canceltoken.cgi', 'CGI::param', 'meeting', 'smb', 'namedusers', and 'metric'. These parameters often appear in malicious queries attempting to exploit the PCS vulnerability. Both sets of patterns need to be present in the logs for an alert to be generated. Be aware that vulnerability scanning activities might also trigger these alerts even if an actual attack is not taking place, so these instances should be considered when evaluating alerts. This detection is important for maintaining the integrity of the PCS and ensuring it is not compromised by attackers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains:\n            - '/dana-na/auth/'\n            - '/dana-ws/'\n            - '/dana-cached/'\n    selection2:\n        cs-uri-query|contains:\n            - '?id='\n            - '?token='\n            - 'Secid_canceltoken.cgi'\n            - 'CGI::param'\n            - 'meeting'\n            - 'smb'\n            - 'namedusers'\n            - 'metric'\n    condition: all of selection*\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection1:\n        cs-uri-query|contains:\n            - '/dana-na/auth/'\n            - '/dana-ws/'\n            - '/dana-cached/'\n    selection2:\n        cs-uri-query|contains:\n            - '?id='\n            - '?token='\n            - 'Secid_canceltoken.cgi'\n            - 'CGI::param'\n            - 'meeting'\n            - 'smb'\n            - 'namedusers'\n            - 'metric'\n    condition: all of selection*\nfalsepositives:\n    - Vulnerability Scanning\nlevel: high\n",
      "question": "exploitation attempts using Pulse Connect Secure(PCS) vulnerability (CVE-2021-22893)",
      "answer": "In order to detect exploitation attempts using Pulse Connect Secure (PCS) vulnerability (CVE-2021-22893), you should monitor your web server's logs for specific patterns in the query strings of URIs. Look for URIs containing '/dana-na/auth/', '/dana-ws/', '/dana-cached/', which are indicative of accessing different components of the PCS. Additionally, keep an eye out for query parameters such as '?id=', '?token=', 'Secid_canceltoken.cgi', 'CGI::param', 'meeting', 'smb', 'namedusers', and 'metric'. These parameters often appear in malicious queries attempting to exploit the PCS vulnerability. Both sets of patterns need to be present in the logs for an alert to be generated. Be aware that vulnerability scanning activities might also trigger these alerts even if an actual attack is not taking place, so these instances should be considered when evaluating alerts. This detection is important for maintaining the integrity of the PCS and ensuring it is not compromised by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs",
      "answer": "In order to execute arbitrary PowerShell code using SyncAppvPublishingServer.vbs, you should: focus on monitoring the creation of processes within Windows environments. Specifically, look for instances where the command line contains references to '\\SyncAppvPublishingServer.vbs' combined with the use of a semi-colon, indicating the possible execution of additional arbitrary code. This activity can be indicative of attempts to execute unauthorized PowerShell commands, potentially for malicious purposes. It is essential to keep track of the computer name, user, command line, and parent command line used in these situations to aid in identifying and mitigating such threats. Be aware that while this method of detection is useful, there may be instances where it does not apply (unknown false positives), so it's important to verify the context of detections to avoid misinterpretation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Windows DCE-RPC functions which indicate an execution techniques on the remote system. All credit for the Zeek mapping of the suspicious endpoint/operation field goes to MITRE.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution techniques on the remote system via Windows DCE-RPC functions, you should monitor for specific endpoint and operation pairs in Zeek logs from the DCE_RPC service. These pairs signify potentially malicious activity and are crucial for identifying attempts to execute code remotely. The endpoints and operations to be vigilant for include:\n\n1. The 'JobAdd' operation within the 'atsvc' endpoint, which indicates an attempt to add a job to the AT service schedule.\n2. Operations 'SchRpcEnableTask', 'SchRpcRegisterTask', and 'SchRpcRun' within the 'ITaskSchedulerService' endpoint, pointing towards manipulation of scheduled tasks possibly to maintain persistence or execute malicious tasks at specific times.\n3. The 'ExecMethod' and 'ExecMethodAsync' operations within the 'IWbemServices' endpoint, which are indicative of executing methods on WMI services, potentially for executing code.\n4. Operations 'CreateServiceA', 'CreateServiceW', 'StartServiceA', and 'StartServiceW' within the 'svcctl' endpoint, that suggest creation and starting of a new service, a common tactic for persistent malware execution or system manipulation.\n\nThese activities, when identified, should be investigated to distinguish between benign Windows administration tasks or script/software management activities and malicious actions. It is important to be aware that these logs can generate false positives, such as when administrators are performing legitimate tasks for maintenance or troubleshooting, or when management scripts or software operate as designed.\n\nMonitoring for these patterns carries a medium level of importance and is linked with various MITRE ATT&CK tactics and techniques, primarily focusing on the execution phase of an attack. Each observed operation can serve as an indicator of compromise (IoC) and warrants further investigation to ensure the security of the Windows environment against unauthorized execution techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: dce_rpc\ndetection:\n    op1:\n        endpoint: 'JobAdd'\n        operation: 'atsvc'\n    op2:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcEnableTask'\n    op3:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcRegisterTask'\n    op4:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcRun'\n    op5:\n        endpoint: 'IWbemServices'\n        operation: 'ExecMethod'\n    op6:\n        endpoint: 'IWbemServices'\n        operation: 'ExecMethodAsync'\n    op7:\n        endpoint: 'svcctl'\n        operation: 'CreateServiceA'\n    op8:\n        endpoint: 'svcctl'\n        operation: 'CreateServiceW'\n    op9:\n        endpoint: 'svcctl'\n        operation: 'StartServiceA'\n    op10:\n        endpoint: 'svcctl'\n        operation: 'StartServiceW'\n    condition: 1 of op*\nfalsepositives:\n    - Windows administrator tasks or troubleshooting\n    - Windows management scripts or software\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: dce_rpc\ndetection:\n    op1:\n        endpoint: 'JobAdd'\n        operation: 'atsvc'\n    op2:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcEnableTask'\n    op3:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcRegisterTask'\n    op4:\n        endpoint: 'ITaskSchedulerService'\n        operation: 'SchRpcRun'\n    op5:\n        endpoint: 'IWbemServices'\n        operation: 'ExecMethod'\n    op6:\n        endpoint: 'IWbemServices'\n        operation: 'ExecMethodAsync'\n    op7:\n        endpoint: 'svcctl'\n        operation: 'CreateServiceA'\n    op8:\n        endpoint: 'svcctl'\n        operation: 'CreateServiceW'\n    op9:\n        endpoint: 'svcctl'\n        operation: 'StartServiceA'\n    op10:\n        endpoint: 'svcctl'\n        operation: 'StartServiceW'\n    condition: 1 of op*\nfalsepositives:\n    - Windows administrator tasks or troubleshooting\n    - Windows management scripts or software\nlevel: medium\n",
      "question": "Windows DCE-RPC functions which indicate an execution techniques on the remote system. All credit for the Zeek mapping of the suspicious endpoint/operation field goes to MITRE",
      "answer": "In order to detect execution techniques on the remote system via Windows DCE-RPC functions, you should monitor for specific endpoint and operation pairs in Zeek logs from the DCE_RPC service. These pairs signify potentially malicious activity and are crucial for identifying attempts to execute code remotely. The endpoints and operations to be vigilant for include:\n\n1. The 'JobAdd' operation within the 'atsvc' endpoint, which indicates an attempt to add a job to the AT service schedule.\n2. Operations 'SchRpcEnableTask', 'SchRpcRegisterTask', and 'SchRpcRun' within the 'ITaskSchedulerService' endpoint, pointing towards manipulation of scheduled tasks possibly to maintain persistence or execute malicious tasks at specific times.\n3. The 'ExecMethod' and 'ExecMethodAsync' operations within the 'IWbemServices' endpoint, which are indicative of executing methods on WMI services, potentially for executing code.\n4. Operations 'CreateServiceA', 'CreateServiceW', 'StartServiceA', and 'StartServiceW' within the 'svcctl' endpoint, that suggest creation and starting of a new service, a common tactic for persistent malware execution or system manipulation.\n\nThese activities, when identified, should be investigated to distinguish between benign Windows administration tasks or script/software management activities and malicious actions. It is important to be aware that these logs can generate false positives, such as when administrators are performing legitimate tasks for maintenance or troubleshooting, or when management scripts or software operate as designed.\n\nMonitoring for these patterns carries a medium level of importance and is linked with various MITRE ATT&CK tactics and techniques, primarily focusing on the execution phase of an attack. Each observed operation can serve as an indicator of compromise (IoC) and warrants further investigation to ensure the security of the Windows environment against unauthorized execution techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a named pipe with a pattern found in CobaltStrike malleable C2 profiles.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a named pipe with a pattern found in CobaltStrike malleable C2 profiles, you should monitor for the creation of named pipes in Windows systems. This involves looking out for specific named pipe creation events that could be indicative of Cobalt Strike activities, a tool commonly used by attackers for command and control (C2) infrastructure. The monitoring process requires having logging for Named Pipe Events (Event ID 17 and Event ID 18) configured in Sysmon, a Windows system monitoring tool. \n\nThe detection should focus on named pipes that start with certain patterns, which are typically associated with Cobalt Strike based on their malleable Command and Control (C2) profiles. These patterns include various specific strings like '\\mojo.5688.8052.xxxx', '\\mypipe-f', '\\msrpc_', '\\win\\msrpc_', and several others. Additionally, any pipes that begin with '\\Winsock2\\CatalogChangeListener-' and end with '-0,' should also be monitored, as they pertain to another selection criterion related to Cobalt Strike's malleable C2 profiles.\n\nHowever, it's crucial to exclude certain named pipes during detection, such as '\\wkssvc', '\\spoolss', '\\scerpc', '\\ntsvcs', '\\SearchTextHarvester', '\\PGMessagePipe', and '\\MsFteWds', as these could lead to false positives, including specific instances where Chrome uses similar naming conventions for its pipes (e.g., \"mojo.something\").\n\nMonitoring for these specific named pipe creation patterns and applying the mentioned filters can significantly aid in identifying potential Cobalt Strike C2 activities, giving cybersecurity defenders a high level of alert when such patterns are detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection_malleable_profiles:\n        - PipeName|startswith:\n            - '\\mojo.5688.8052.183894939787088877'\n            - '\\mojo.5688.8052.35780273329370473'\n            - '\\mypipe-f'\n            - '\\mypipe-h'\n            - '\\ntsvcs'\n            - '\\scerpc'\n            - '\\win_svc'\n            - '\\spoolss'\n            - '\\msrpc_'\n            - '\\win\\msrpc_'\n            - '\\wkssvc'\n            - '\\f53f'\n            - '\\windows.update.manager'\n            - '\\SearchTextHarvester'\n            - '\\DserNamePipe'\n            - '\\PGMessagePipe'\n            - '\\MsFteWds'\n            - '\\f4c3'\n            - '\\fullduplex_'\n            - '\\rpc_'\n        - PipeName:\n            - '\\demoagent_11'\n            - '\\demoagent_22'\n    selection_malleable_profile_CatalogChangeListener:\n        PipeName|startswith: '\\Winsock2\\CatalogChangeListener-'\n        PipeName|endswith: '-0,'\n    filter:\n        PipeName:\n            - '\\wkssvc'\n            - '\\spoolss'\n            - '\\scerpc'\n            - '\\ntsvcs'\n            - '\\SearchTextHarvester'\n            - '\\PGMessagePipe'\n            - '\\MsFteWds'\n    condition: 1 of selection_malleable_profile* and not filter\nfalsepositives:\n    - Chrome instances using the exact same pipe name \"mojo.something\"\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can always use Cobalt Strike, but also you can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection_malleable_profiles:\n        - PipeName|startswith:\n            - '\\mojo.5688.8052.183894939787088877'\n            - '\\mojo.5688.8052.35780273329370473'\n            - '\\mypipe-f'\n            - '\\mypipe-h'\n            - '\\ntsvcs'\n            - '\\scerpc'\n            - '\\win_svc'\n            - '\\spoolss'\n            - '\\msrpc_'\n            - '\\win\\msrpc_'\n            - '\\wkssvc'\n            - '\\f53f'\n            - '\\windows.update.manager'\n            - '\\SearchTextHarvester'\n            - '\\DserNamePipe'\n            - '\\PGMessagePipe'\n            - '\\MsFteWds'\n            - '\\f4c3'\n            - '\\fullduplex_'\n            - '\\rpc_'\n        - PipeName:\n            - '\\demoagent_11'\n            - '\\demoagent_22'\n    selection_malleable_profile_CatalogChangeListener:\n        PipeName|startswith: '\\Winsock2\\CatalogChangeListener-'\n        PipeName|endswith: '-0,'\n    filter:\n        PipeName:\n            - '\\wkssvc'\n            - '\\spoolss'\n            - '\\scerpc'\n            - '\\ntsvcs'\n            - '\\SearchTextHarvester'\n            - '\\PGMessagePipe'\n            - '\\MsFteWds'\n    condition: 1 of selection_malleable_profile* and not filter\nfalsepositives:\n    - Chrome instances using the exact same pipe name \"mojo.something\"\nlevel: high\n",
      "question": "creation of a named pipe with a pattern found in CobaltStrike malleable C2 profiles",
      "answer": "In order to detect the creation of a named pipe with a pattern found in CobaltStrike malleable C2 profiles, you should monitor for the creation of named pipes in Windows systems. This involves looking out for specific named pipe creation events that could be indicative of Cobalt Strike activities, a tool commonly used by attackers for command and control (C2) infrastructure. The monitoring process requires having logging for Named Pipe Events (Event ID 17 and Event ID 18) configured in Sysmon, a Windows system monitoring tool. \n\nThe detection should focus on named pipes that start with certain patterns, which are typically associated with Cobalt Strike based on their malleable Command and Control (C2) profiles. These patterns include various specific strings like '\\mojo.5688.8052.xxxx', '\\mypipe-f', '\\msrpc_', '\\win\\msrpc_', and several others. Additionally, any pipes that begin with '\\Winsock2\\CatalogChangeListener-' and end with '-0,' should also be monitored, as they pertain to another selection criterion related to Cobalt Strike's malleable C2 profiles.\n\nHowever, it's crucial to exclude certain named pipes during detection, such as '\\wkssvc', '\\spoolss', '\\scerpc', '\\ntsvcs', '\\SearchTextHarvester', '\\PGMessagePipe', and '\\MsFteWds', as these could lead to false positives, including specific instances where Chrome uses similar naming conventions for its pipes (e.g., \"mojo.something\").\n\nMonitoring for these specific named pipe creation patterns and applying the mentioned filters can significantly aid in identifying potential Cobalt Strike C2 activities, giving cybersecurity defenders a high level of alert when such patterns are detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell scripts with potential registry reconnaissance capabilities. Adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell scripts with potential registry reconnaissance capabilities, where adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software, you should: monitor Windows PowerShell scripts for specific patterns of accessing the registry. Focus on script block logging, specifically on scripts that involve commands like Get-Item, gci, or Get-ChildItem, followed within a short distance by a '-Path' argument that points towards critical registry paths. These paths include locations within the registry such as 'currentcontrolset\\\\services', 'CurrentVersion\\\\Policies\\\\Explorer\\\\Run', 'CurrentVersion\\\\Run', 'CurrentVersion\\\\ShellServiceObjectDelayLoad', and 'CurrentVersion\\\\Windows\\\\winlogon', which are often queried by adversaries looking for valuable information or settings to exploit. Remember, this detection requires that PowerShell's Script Block Logging feature is enabled to capture the relevant script content for analysis. Be aware that there might be false positives due to the nature of the script block, so use this method as a tool for hunting potential malicious activities rather than definitive evidence. The detection level set for this activity is medium, indicating it requires additional investigation when alerted.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        # TODO: switch to |re|i: after sigma specification v2 is released\n        ScriptBlockText|re: '(Get-Item|gci|Get-ChildItem).{1,64}-Path.{1,64}\\\\(currentcontrolset\\\\services|CurrentVersion\\\\Policies\\\\Explorer\\\\Run|CurrentVersion\\\\Run|CurrentVersion\\\\ShellServiceObjectDelayLoad|CurrentVersion\\\\Windows\\winlogon)\\\\'\n    condition: selection\nfalsepositives:\n    - Due to the nature of the script block, the matching of the string could sometimes result in a false positive. Use this rule to hunt for potential malicious or suspicious scripts.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        # TODO: switch to |re|i: after sigma specification v2 is released\n        ScriptBlockText|re: '(Get-Item|gci|Get-ChildItem).{1,64}-Path.{1,64}\\\\(currentcontrolset\\\\services|CurrentVersion\\\\Policies\\\\Explorer\\\\Run|CurrentVersion\\\\Run|CurrentVersion\\\\ShellServiceObjectDelayLoad|CurrentVersion\\\\Windows\\winlogon)\\\\'\n    condition: selection\nfalsepositives:\n    - Due to the nature of the script block, the matching of the string could sometimes result in a false positive. Use this rule to hunt for potential malicious or suspicious scripts.\nlevel: medium\n",
      "question": "PowerShell scripts with potential registry reconnaissance capabilities. Adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software.",
      "answer": "In order to detect PowerShell scripts with potential registry reconnaissance capabilities, where adversaries may interact with the Windows registry to gather information about the system credentials, configuration, and installed software, you should: monitor Windows PowerShell scripts for specific patterns of accessing the registry. Focus on script block logging, specifically on scripts that involve commands like Get-Item, gci, or Get-ChildItem, followed within a short distance by a '-Path' argument that points towards critical registry paths. These paths include locations within the registry such as 'currentcontrolset\\\\services', 'CurrentVersion\\\\Policies\\\\Explorer\\\\Run', 'CurrentVersion\\\\Run', 'CurrentVersion\\\\ShellServiceObjectDelayLoad', and 'CurrentVersion\\\\Windows\\\\winlogon', which are often queried by adversaries looking for valuable information or settings to exploit. Remember, this detection requires that PowerShell's Script Block Logging feature is enabled to capture the relevant script content for analysis. Be aware that there might be false positives due to the nature of the script block, so use this method as a tool for hunting potential malicious activities rather than definitive evidence. The detection level set for this activity is medium, indicating it requires additional investigation when alerted."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the default output filename used by the wmiexec tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the default output filename used by the wmiexec tool, you should monitor file events on Windows systems for the creation of specific filenames that match a regular expression pattern indicating they were likely generated by the wmiexec tool. These filenames are characterized by being located in the Windows, C:\\, or D:\\ directories and follow a distinct pattern that includes a sequence of numbers matched by '\\d{9}\\.\\d{1,7}'. This pattern suggests that the file's name starts with a sequence of 9 digits followed by a period and then 1 to 7 more digits. The use of such specific filename patterns makes detection more reliable and is considered critical due to the potential malicious use of the wmiexec tool. This detection mechanism is designed to have a low rate of false positives, highlighting the importance and specificity of the detection criteria.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        - TargetFilename|re: '\\\\Windows\\\\__1\\d{9}\\.\\d{1,7}$' # Admin$\n        - TargetFilename|re: 'C:\\\\__1\\d{9}\\.\\d{1,7}$' # C$\n        - TargetFilename|re: 'D:\\\\__1\\d{9}\\.\\d{1,7}$' # D$\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        - TargetFilename|re: '\\\\Windows\\\\__1\\d{9}\\.\\d{1,7}$' # Admin$\n        - TargetFilename|re: 'C:\\\\__1\\d{9}\\.\\d{1,7}$' # C$\n        - TargetFilename|re: 'D:\\\\__1\\d{9}\\.\\d{1,7}$' # D$\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "creation of the default output filename used by the wmiexec tool",
      "answer": "In order to detect the creation of the default output filename used by the wmiexec tool, you should monitor file events on Windows systems for the creation of specific filenames that match a regular expression pattern indicating they were likely generated by the wmiexec tool. These filenames are characterized by being located in the Windows, C:\\, or D:\\ directories and follow a distinct pattern that includes a sequence of numbers matched by '\\d{9}\\.\\d{1,7}'. This pattern suggests that the file's name starts with a sequence of 9 digits followed by a period and then 1 to 7 more digits. The use of such specific filename patterns makes detection more reliable and is considered critical due to the potential malicious use of the wmiexec tool. This detection mechanism is designed to have a low rate of false positives, highlighting the importance and specificity of the detection criteria."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting scenarios where one can control another users or computers account without having to use their credentials..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect scenarios where one can control another users or computers account without having to use their credentials, you should: Focus on monitoring Windows security event logs, specifically looking for significant events that could indicate unauthorized control or delegation attempts. You should setup your system to audit User Account Management and Directory Service Changes as detailed by Windows Audit Policies and Group Policy configurations. \n\nSpecifically, look out for event ID 4738 in security logs, which signals modifications to an account that could be malicious, especially if the 'AllowedToDelegateTo' attribute is not set to null or has been altered, indicating an attempt to delegate control.\n\nAdditionally, you should pay attention to event ID 5136, which gets raised when changes occur to directory service objects. There are three critical scenarios to watch out for:\n1. Modifications to the 'msDS-AllowedToDelegateTo' attribute, which could indicate attempts to permit unauthorized delegations.\n2. Changes to the 'servicePrincipalName' attribute for user objects, which could signify manipulation of service accounts to impersonate or control other accounts.\n3. Alterations to the 'msDS-AllowedToActOnBehalfOfOtherIdentity' attribute, further pointing towards attempts to gain unauthorized control or impersonation capabilities.\n\nWhile monitoring these activities, it's important to understand there might be unknown scenarios that could trigger these events, which should be considered potential false positives. Since the detection level is set to high, any triggered alerts should be investigated thoroughly to confirm if they signify malicious activity or are benign system or user actions. \n\nThis detailed monitoring strategy is designed to protect against tactics and techniques such as privilege escalation and credential access by catching unauthorized attempts to gain control over other users' or computers' accounts without needing their actual credentials.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management, DS Access > Audit Directory Service Changes, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\DS Access\\Audit Directory Service Changes'\ndetection:\n    selection1:\n        EventID: 4738\n    filter_null:\n        - AllowedToDelegateTo: '-'\n        - AllowedToDelegateTo:\n    selection_5136_1:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'msDS-AllowedToDelegateTo'\n    selection_5136_2:\n        EventID: 5136\n        ObjectClass: 'user'\n        AttributeLDAPDisplayName: 'servicePrincipalName'\n    selection_5136_3:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'msDS-AllowedToActOnBehalfOfOtherIdentity'\n    condition: (selection1 and not filter_null) or 1 of selection_5136_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management, DS Access > Audit Directory Service Changes, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\DS Access\\Audit Directory Service Changes'\ndetection:\n    selection1:\n        EventID: 4738\n    filter_null:\n        - AllowedToDelegateTo: '-'\n        - AllowedToDelegateTo:\n    selection_5136_1:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'msDS-AllowedToDelegateTo'\n    selection_5136_2:\n        EventID: 5136\n        ObjectClass: 'user'\n        AttributeLDAPDisplayName: 'servicePrincipalName'\n    selection_5136_3:\n        EventID: 5136\n        AttributeLDAPDisplayName: 'msDS-AllowedToActOnBehalfOfOtherIdentity'\n    condition: (selection1 and not filter_null) or 1 of selection_5136_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "scenarios where one can control another users or computers account without having to use their credentials.",
      "answer": "In order to detect scenarios where one can control another users or computers account without having to use their credentials, you should: Focus on monitoring Windows security event logs, specifically looking for significant events that could indicate unauthorized control or delegation attempts. You should setup your system to audit User Account Management and Directory Service Changes as detailed by Windows Audit Policies and Group Policy configurations. \n\nSpecifically, look out for event ID 4738 in security logs, which signals modifications to an account that could be malicious, especially if the 'AllowedToDelegateTo' attribute is not set to null or has been altered, indicating an attempt to delegate control.\n\nAdditionally, you should pay attention to event ID 5136, which gets raised when changes occur to directory service objects. There are three critical scenarios to watch out for:\n1. Modifications to the 'msDS-AllowedToDelegateTo' attribute, which could indicate attempts to permit unauthorized delegations.\n2. Changes to the 'servicePrincipalName' attribute for user objects, which could signify manipulation of service accounts to impersonate or control other accounts.\n3. Alterations to the 'msDS-AllowedToActOnBehalfOfOtherIdentity' attribute, further pointing towards attempts to gain unauthorized control or impersonation capabilities.\n\nWhile monitoring these activities, it's important to understand there might be unknown scenarios that could trigger these events, which should be considered potential false positives. Since the detection level is set to high, any triggered alerts should be investigated thoroughly to confirm if they signify malicious activity or are benign system or user actions. \n\nThis detailed monitoring strategy is designed to protect against tactics and techniques such as privilege escalation and credential access by catching unauthorized attempts to gain control over other users' or computers' accounts without needing their actual credentials.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Monitor and alert for Sign-ins by unknown devices from non-Trusted locations..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to Monitor and alert for Sign-ins by unknown devices from non-Trusted locations, you should: Focus on monitoring sign-in logs in Azure environments. Particularly, you will need to keep an eye on sign-in attempts that meet specific criteria indicating potential security risks. This involves looking for sign-ins that are performed using single-factor authentication, which is considered less secure compared to multi-factor authentication methods. Additionally, you should pay attention to sign-ins that result in a successful login (indicated by ResultType 0), but somewhat suspiciously, do not provide any network location details or device identifiers. Such sign-ins could suggest that an unknown device, possibly from a non-trusted location, is trying to access the system. Despite these indicators potentially signaling unauthorized access attempts, it's important to consider that there might be instances of false positives, where legitimate sign-ins are erroneously flagged due to lack of information. The security level for these detections is considered low, implying that while they should not be ignored, they may not always represent critical threats. Tags associated with this activity include tactics and techniques related to Initial Access, which might involve adversaries attempting to gain entry into your network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        AuthenticationRequirement: singleFactorAuthentication\n        ResultType: 0\n        NetworkLocationDetails: '[]'\n        DeviceDetail.deviceId: ''\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        AuthenticationRequirement: singleFactorAuthentication\n        ResultType: 0\n        NetworkLocationDetails: '[]'\n        DeviceDetail.deviceId: ''\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Monitor and alert for Sign-ins by unknown devices from non-Trusted locations.",
      "answer": "In order to Monitor and alert for Sign-ins by unknown devices from non-Trusted locations, you should: Focus on monitoring sign-in logs in Azure environments. Particularly, you will need to keep an eye on sign-in attempts that meet specific criteria indicating potential security risks. This involves looking for sign-ins that are performed using single-factor authentication, which is considered less secure compared to multi-factor authentication methods. Additionally, you should pay attention to sign-ins that result in a successful login (indicated by ResultType 0), but somewhat suspiciously, do not provide any network location details or device identifiers. Such sign-ins could suggest that an unknown device, possibly from a non-trusted location, is trying to access the system. Despite these indicators potentially signaling unauthorized access attempts, it's important to consider that there might be instances of false positives, where legitimate sign-ins are erroneously flagged due to lack of information. The security level for these detections is considered low, implying that while they should not be ignored, they may not always represent critical threats. Tags associated with this activity include tactics and techniques related to Initial Access, which might involve adversaries attempting to gain entry into your network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Attackers can use print.exe for remote file copy.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to prevent attackers from using print.exe for remote file copy, you should monitor for the creation of processes on Windows systems where the process name ends with '\\print.exe'. Additionally, check if the command line initiating the process starts with 'print' and contains both '/D' and '.exe' in any order. However, exclude any instances where the command line explicitly contains 'print.exe' to reduce false positives. This approach focuses on identifying and mitigating tactics and techniques related to Initial Access and Execution, by specifically looking for abuse of the printing utility which can be leveraged in an unconventional way to copy files remotely.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\print.exe'\n        CommandLine|startswith: 'print'\n        CommandLine|contains|all:\n            - '/D'\n            - '.exe'\n    filter_print:\n        CommandLine|contains: 'print.exe'\n    condition: selection and not filter_print\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\print.exe'\n        CommandLine|startswith: 'print'\n        CommandLine|contains|all:\n            - '/D'\n            - '.exe'\n    filter_print:\n        CommandLine|contains: 'print.exe'\n    condition: selection and not filter_print\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Attackers can use print.exe for remote file copy",
      "answer": "In order to prevent attackers from using print.exe for remote file copy, you should monitor for the creation of processes on Windows systems where the process name ends with '\\print.exe'. Additionally, check if the command line initiating the process starts with 'print' and contains both '/D' and '.exe' in any order. However, exclude any instances where the command line explicitly contains 'print.exe' to reduce false positives. This approach focuses on identifying and mitigating tactics and techniques related to Initial Access and Execution, by specifically looking for abuse of the printing utility which can be leveraged in an unconventional way to copy files remotely."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempted file load events that did not meet the signing level requirements. It often means the file's signature is revoked or a signature with the Lifetime Signing EKU has expired.\nThis event is best correlated with EID 3089 to determine the error of the validation.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempted file load events that did not meet the signing level requirements, indicating that the file's signature is revoked or a signature with the Lifetime Signing EKU has expired, you should monitor code integrity events in the Windows Code Integrity operational log. This entails tracking specific Event IDs that signify an attempt by a process to load a file not meeting the required signing level or violating code integrity policy. The events of interest are Event ID 3033, indicating a failed attempt due to signing level requirements, and Event ID 3034, which shows a failed attempt but the image was allowed to load due to auditing policy.\n\nTo refine detection and reduce false positives, several optional filters exclude known benign occurrences related to specific processes and files. For instance, detections involving the DTrace tool, antivirus software processes like those of Windows Defender or Avast, electron-based applications, Microsoft Office components, and common third-party applications like Slack or Firefox have their own set of conditions based on file names or processes involved. This refining process relies on matching file and process names, requested and validated signing policies to identify suspicious activities correctly. Additionally, the Global Assembly Cache (GAC) is monitored for loads by the .NET optimization service, considering certain policy conditions to filter out standard operations from potential threats.\n\nIt is crucial to apply additional filters to account for legitimate activities by antivirus and third-party products to mitigate false positives. High-level monitoring coupled with detailed exclusion criteria ensures effective identification of malicious attempts to bypass code signing verification processes, crucial for maintaining system integrity and security. This detection mechanism is particularly beneficial when correlated with Event ID 3089 to understand the specific cause of the signature validation failure, enhancing incident response and forensic capabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID:\n            - 3033 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements.\n            - 3034 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements or violated code integrity policy. However, due to code integrity auditing policy, the image was allowed to load.\n    filter_optional_dtrace:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Windows\\System32\\svchost.exe) attempted to load \\Device\\HarddiskVolume5\\Program Files\\DTrace\\dtrace.dll that did not meet the Windows signing level requirements.\n        FileNameBuffer|endswith: '\\Program Files\\DTrace\\dtrace.dll'\n        ProcessNameBuffer|endswith: '\\Windows\\System32\\svchost.exe'\n        RequestedPolicy: 12\n        ValidatedPolicy: 1\n    filter_optional_av_generic:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2207.7-0\\MsMpEng.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\DriverStore\\FileRepository\\iigd_dch.inf_amd64_36fb67bd6dbd887d\\igd10iumd64.dll that did not meet the Custom 3 / Antimalware signing level requirements.\n        FileNameBuffer|contains: '\\Windows\\System32\\DriverStore\\FileRepository\\'\n        FileNameBuffer|endswith: '\\igd10iumd64.dll'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_electron_based_app:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Users\\user\\AppData\\Local\\Keybase\\Gui\\Keybase.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\nvspcap64.dll that did not meet the Microsoft signing level requirements.\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|endswith:\n            - '\\AppData\\Local\\Keybase\\Gui\\Keybase.exe'\n            - '\\Microsoft\\Teams\\stage\\Teams.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_bonjour:\n        FileNameBuffer|endswith: '\\Program Files\\Bonjour\\mdnsNSP.dll'\n        ProcessNameBuffer|endswith:\n            - '\\Windows\\System32\\svchost.exe'\n            - '\\Windows\\System32\\SIHClient.exe'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_optional_msoffice:\n        FileNameBuffer|contains: '\\Microsoft Office\\root\\vfs\\ProgramFilesCommonX64\\Microsoft Shared\\OFFICE'\n        FileNameBuffer|endswith: '\\MSOXMLMF.DLL'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_slack:\n        # Example: https://user-images.githubusercontent.com/112784902/197407680-96d4b662-8a59-4289-a483-b24d630ac2a9.png\n        # Even though it's the same DLL as the one used in the electron based app filter. We need to do a separate selection due to slack's folder naming convention with the version number :)\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|contains: '\\AppData\\Local\\slack\\app-'\n        ProcessNameBuffer|endswith: '\\slack.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_firefox:\n        # Example: https://user-images.githubusercontent.com/62423083/197451483-70e89010-ed96-4357-8079-b5a061a239d6.png\n        FileNameBuffer|endswith:\n            - '\\Mozilla Firefox\\mozavcodec.dll'\n            - '\\Mozilla Firefox\\mozavutil.dll'\n        ProcessNameBuffer|endswith: '\\Mozilla Firefox\\firefox.exe'\n        RequestedPolicy: 8\n    filter_optional_avast:\n        FileNameBuffer|endswith:\n            - '\\Program Files\\Avast Software\\Avast\\aswAMSI.dll'\n            - '\\Program Files (x86)\\Avast Software\\Avast\\aswAMSI.dll'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_main_gac:\n        # Filtering the path containing this string because of multiple possible DLLs in that location\n        FileNameBuffer|contains: '\\Windows\\assembly\\GAC\\'\n        ProcessNameBuffer|endswith: '\\mscorsvw.exe'\n        ProcessNameBuffer|contains: '\\Windows\\Microsoft.NET\\'\n        RequestedPolicy: 8\n        ValidatedPolicy:\n            - 1\n            - 2\n    filter_optional_google_drive:\n        # Example: \\Program Files\\Google\\Drive File Stream\\67.0.2.0\\crashpad_handler.exe\n        FileNameBuffer|contains: '\\Program Files\\Google\\Drive File Stream\\'\n        FileNameBuffer|endswith: '\\crashpad_handler.exe'\n        ProcessNameBuffer|endswith: '\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_trend_micro:\n        FileNameBuffer|endswith: '\\Trend Micro\\Client Server Security Agent\\perficrcperfmonmgr.dll'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Antivirus and other third party products. Apply additional filters accordingly\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: codeintegrity-operational\ndetection:\n    selection:\n        EventID:\n            - 3033 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements.\n            - 3034 # Code Integrity determined that a process (%4) attempted to load %2 that did not meet the %5 signing level requirements or violated code integrity policy. However, due to code integrity auditing policy, the image was allowed to load.\n    filter_optional_dtrace:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Windows\\System32\\svchost.exe) attempted to load \\Device\\HarddiskVolume5\\Program Files\\DTrace\\dtrace.dll that did not meet the Windows signing level requirements.\n        FileNameBuffer|endswith: '\\Program Files\\DTrace\\dtrace.dll'\n        ProcessNameBuffer|endswith: '\\Windows\\System32\\svchost.exe'\n        RequestedPolicy: 12\n        ValidatedPolicy: 1\n    filter_optional_av_generic:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2207.7-0\\MsMpEng.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\DriverStore\\FileRepository\\iigd_dch.inf_amd64_36fb67bd6dbd887d\\igd10iumd64.dll that did not meet the Custom 3 / Antimalware signing level requirements.\n        FileNameBuffer|contains: '\\Windows\\System32\\DriverStore\\FileRepository\\'\n        FileNameBuffer|endswith: '\\igd10iumd64.dll'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_electron_based_app:\n        # Example: Code Integrity determined that a process (\\Device\\HarddiskVolume5\\Users\\user\\AppData\\Local\\Keybase\\Gui\\Keybase.exe) attempted to load \\Device\\HarddiskVolume5\\Windows\\System32\\nvspcap64.dll that did not meet the Microsoft signing level requirements.\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|endswith:\n            - '\\AppData\\Local\\Keybase\\Gui\\Keybase.exe'\n            - '\\Microsoft\\Teams\\stage\\Teams.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_bonjour:\n        FileNameBuffer|endswith: '\\Program Files\\Bonjour\\mdnsNSP.dll'\n        ProcessNameBuffer|endswith:\n            - '\\Windows\\System32\\svchost.exe'\n            - '\\Windows\\System32\\SIHClient.exe'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_optional_msoffice:\n        FileNameBuffer|contains: '\\Microsoft Office\\root\\vfs\\ProgramFilesCommonX64\\Microsoft Shared\\OFFICE'\n        FileNameBuffer|endswith: '\\MSOXMLMF.DLL'\n        # ProcessNameBuffer is AV products\n        RequestedPolicy: 7\n        ValidatedPolicy: 1\n    filter_optional_slack:\n        # Example: https://user-images.githubusercontent.com/112784902/197407680-96d4b662-8a59-4289-a483-b24d630ac2a9.png\n        # Even though it's the same DLL as the one used in the electron based app filter. We need to do a separate selection due to slack's folder naming convention with the version number :)\n        FileNameBuffer|endswith: '\\Windows\\System32\\nvspcap64.dll'\n        ProcessNameBuffer|contains: '\\AppData\\Local\\slack\\app-'\n        ProcessNameBuffer|endswith: '\\slack.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_firefox:\n        # Example: https://user-images.githubusercontent.com/62423083/197451483-70e89010-ed96-4357-8079-b5a061a239d6.png\n        FileNameBuffer|endswith:\n            - '\\Mozilla Firefox\\mozavcodec.dll'\n            - '\\Mozilla Firefox\\mozavutil.dll'\n        ProcessNameBuffer|endswith: '\\Mozilla Firefox\\firefox.exe'\n        RequestedPolicy: 8\n    filter_optional_avast:\n        FileNameBuffer|endswith:\n            - '\\Program Files\\Avast Software\\Avast\\aswAMSI.dll'\n            - '\\Program Files (x86)\\Avast Software\\Avast\\aswAMSI.dll'\n        RequestedPolicy:\n            - 8\n            - 12\n        ValidatedPolicy: 1\n    filter_main_gac:\n        # Filtering the path containing this string because of multiple possible DLLs in that location\n        FileNameBuffer|contains: '\\Windows\\assembly\\GAC\\'\n        ProcessNameBuffer|endswith: '\\mscorsvw.exe'\n        ProcessNameBuffer|contains: '\\Windows\\Microsoft.NET\\'\n        RequestedPolicy: 8\n        ValidatedPolicy:\n            - 1\n            - 2\n    filter_optional_google_drive:\n        # Example: \\Program Files\\Google\\Drive File Stream\\67.0.2.0\\crashpad_handler.exe\n        FileNameBuffer|contains: '\\Program Files\\Google\\Drive File Stream\\'\n        FileNameBuffer|endswith: '\\crashpad_handler.exe'\n        ProcessNameBuffer|endswith: '\\Windows\\ImmersiveControlPanel\\SystemSettings.exe'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    filter_optional_trend_micro:\n        FileNameBuffer|endswith: '\\Trend Micro\\Client Server Security Agent\\perficrcperfmonmgr.dll'\n        RequestedPolicy: 8\n        ValidatedPolicy: 1\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Antivirus and other third party products. Apply additional filters accordingly\nlevel: high\n",
      "question": "attempted file load events that did not meet the signing level requirements. It often means the file's signature is revoked or a signature with the Lifetime Signing EKU has expired.\nThis event is best correlated with EID 3089 to determine the error of the validation.\n",
      "answer": "In order to detect attempted file load events that did not meet the signing level requirements, indicating that the file's signature is revoked or a signature with the Lifetime Signing EKU has expired, you should monitor code integrity events in the Windows Code Integrity operational log. This entails tracking specific Event IDs that signify an attempt by a process to load a file not meeting the required signing level or violating code integrity policy. The events of interest are Event ID 3033, indicating a failed attempt due to signing level requirements, and Event ID 3034, which shows a failed attempt but the image was allowed to load due to auditing policy.\n\nTo refine detection and reduce false positives, several optional filters exclude known benign occurrences related to specific processes and files. For instance, detections involving the DTrace tool, antivirus software processes like those of Windows Defender or Avast, electron-based applications, Microsoft Office components, and common third-party applications like Slack or Firefox have their own set of conditions based on file names or processes involved. This refining process relies on matching file and process names, requested and validated signing policies to identify suspicious activities correctly. Additionally, the Global Assembly Cache (GAC) is monitored for loads by the .NET optimization service, considering certain policy conditions to filter out standard operations from potential threats.\n\nIt is crucial to apply additional filters to account for legitimate activities by antivirus and third-party products to mitigate false positives. High-level monitoring coupled with detailed exclusion criteria ensures effective identification of malicious attempts to bypass code signing verification processes, crucial for maintaining system integrity and security. This detection mechanism is particularly beneficial when correlated with Event ID 3089 to understand the specific cause of the signature validation failure, enhancing incident response and forensic capabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity, you should: \n\nFocus on monitoring Windows system logs, specifically those related to the creation of processes. Keep an eye out for instances where well-known system processes such as 'cmd.exe', 'cscript.exe', 'curl.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe' are parents to the 'rundll32.exe' process. This combination of parent and child processes is unusual under normal operation circumstances and has been associated with the behavior of the Qakbot malware. Additionally, pay attention to 'rundll32.exe' processes that originate with command lines containing specific paths known to be utilized by Qakbot, such as directories within 'ProgramData', 'Users\\Public', 'AppData\\Local\\Temp', and 'AppData\\Roaming'. \n\nMoreover, scrutinize the 'rundll32.exe' processes for command lines that end with particular exports indicative of Qakbot\u2019s malicious activities. These exports include, but are not limited to, 'aslr', 'bind', 'DrawThemeIcon', 'GG10', 'GL70', 'jhbvygftr', 'kjhbhkjvydrt', 'LS88', 'Motd', 'N115', 'next', 'Nikn', 'print', 'qqqb', 'qqqq', 'RS32', 'Test', 'Time', 'Updt', 'vips', 'Wind', 'WW50', 'X555', 'XL55', 'xlAutoOpen', and 'XS88'. \n\nThe detection of these paths and exports, especially when found in conjunction with each other, is critical. Spawning of 'rundll32.exe' with these peculiar characteristics is an indicator of compromise and suggests the presence of Qakbot malware within the system. Given the sophistication and potentially severe impact of a Qakbot infection, such detections are treated with a high level of suspicion, and the likelihood of false positives is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_paths:\n        ParentImage|endswith:\n            # Note: Only add processes seen used by Qakbot to avoid collision with other strains of malware\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            # Note: Only add paths seen used by Qakbot to avoid collision with other strains of malware\n            - ':\\ProgramData\\'\n            - ':\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n    selection_exports:\n        CommandLine|endswith:\n            # Note: Only add additional exports seen used by Qakbot\n            - 'aslr' # https://tria.ge/230524-scgq9add9v/behavioral1#report\n            - 'bind'\n            - 'DrawThemeIcon'\n            - 'GG10'\n            - 'GL70'\n            - 'jhbvygftr'\n            - 'kjhbhkjvydrt'\n            - 'LS88'\n            - 'Motd'\n            - 'N115'\n            - 'next' # https://tria.ge/230530-n3rxpahf9w/behavioral2\n            - 'Nikn'\n            - 'print'\n            - 'qqqb'\n            - 'qqqq'\n            - 'RS32'\n            - 'Test'\n            - 'Time'\n            - 'Updt'\n            - 'vips'\n            - 'Wind'\n            - 'WW50'\n            - 'X555'\n            - 'XL55'\n            - 'xlAutoOpen'\n            - 'XS88'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_paths:\n        ParentImage|endswith:\n            # Note: Only add processes seen used by Qakbot to avoid collision with other strains of malware\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\curl.exe'\n            - '\\mshta.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            # Note: Only add paths seen used by Qakbot to avoid collision with other strains of malware\n            - ':\\ProgramData\\'\n            - ':\\Users\\Public\\'\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n    selection_exports:\n        CommandLine|endswith:\n            # Note: Only add additional exports seen used by Qakbot\n            - 'aslr' # https://tria.ge/230524-scgq9add9v/behavioral1#report\n            - 'bind'\n            - 'DrawThemeIcon'\n            - 'GG10'\n            - 'GL70'\n            - 'jhbvygftr'\n            - 'kjhbhkjvydrt'\n            - 'LS88'\n            - 'Motd'\n            - 'N115'\n            - 'next' # https://tria.ge/230530-n3rxpahf9w/behavioral2\n            - 'Nikn'\n            - 'print'\n            - 'qqqb'\n            - 'qqqq'\n            - 'RS32'\n            - 'Test'\n            - 'Time'\n            - 'Updt'\n            - 'vips'\n            - 'Wind'\n            - 'WW50'\n            - 'X555'\n            - 'XL55'\n            - 'xlAutoOpen'\n            - 'XS88'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity.",
      "answer": "In order to detect specific process tree behavior of a \"rundll32\" execution with exports linked with Qakbot activity, you should: \n\nFocus on monitoring Windows system logs, specifically those related to the creation of processes. Keep an eye out for instances where well-known system processes such as 'cmd.exe', 'cscript.exe', 'curl.exe', 'mshta.exe', 'powershell.exe', 'pwsh.exe', and 'wscript.exe' are parents to the 'rundll32.exe' process. This combination of parent and child processes is unusual under normal operation circumstances and has been associated with the behavior of the Qakbot malware. Additionally, pay attention to 'rundll32.exe' processes that originate with command lines containing specific paths known to be utilized by Qakbot, such as directories within 'ProgramData', 'Users\\Public', 'AppData\\Local\\Temp', and 'AppData\\Roaming'. \n\nMoreover, scrutinize the 'rundll32.exe' processes for command lines that end with particular exports indicative of Qakbot\u2019s malicious activities. These exports include, but are not limited to, 'aslr', 'bind', 'DrawThemeIcon', 'GG10', 'GL70', 'jhbvygftr', 'kjhbhkjvydrt', 'LS88', 'Motd', 'N115', 'next', 'Nikn', 'print', 'qqqb', 'qqqq', 'RS32', 'Test', 'Time', 'Updt', 'vips', 'Wind', 'WW50', 'X555', 'XL55', 'xlAutoOpen', and 'XS88'. \n\nThe detection of these paths and exports, especially when found in conjunction with each other, is critical. Spawning of 'rundll32.exe' with these peculiar characteristics is an indicator of compromise and suggests the presence of Qakbot malware within the system. Given the sophistication and potentially severe impact of a Qakbot infection, such detections are treated with a high level of suspicion, and the likelihood of false positives is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Commandlet names from well-known PowerShell exploitation frameworks.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Commandlet names from well-known PowerShell exploitation frameworks, you should monitor Windows PowerShell script activity, ensuring that Script Block Logging is enabled. This monitoring aims to identify any usage of specific commandlets that are commonly associated with various stages of cyber-attacks, such as establishing persistence, backdoor insertion, data exfiltration, environment reconnaissance, credential dumping, and many others that are part of well-known exploitation frameworks. Look for the presence of any suspicious PowerShell commandlet names in script blocks, which could include operations like adding various forms of backdoors (e.g., 'Add-RegBackdoor', 'Add-RemoteRegBackdoor'), performing exfiltration tasks ('Do-Exfiltration'), disabling security measures ('Disable-ADIDNSNode'), exploiting vulnerabilities ('Exploit-Jboss'), among other indicative signs of malicious activities. It is critical to exclude potential false positives related to Amazon EC2 instances by considering specific script block text content that may lead to incorrect detections. The level of concern for these detections is high due to the severe implications of successful exploitation through PowerShell, which ranges from unauthorized access to sensitive information leakage and system compromise.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            # Note: Please ensure alphabetical order when adding new entries\n            - 'Add-Exfiltration'\n            - 'Add-Persistence'\n            - 'Add-RegBackdoor'\n            - 'Add-RemoteRegBackdoor'\n            - 'Add-ScrnSaveBackdoor'\n            - 'Check-VM'\n            - 'ConvertTo-Rc4ByteStream'\n            - 'Decrypt-Hash'\n            - 'Disable-ADIDNSNode'\n            - 'Disable-MachineAccount'\n            - 'Do-Exfiltration'\n            - 'Enable-ADIDNSNode'\n            - 'Enable-MachineAccount'\n            - 'Enabled-DuplicateToken'\n            - 'Exploit-Jboss'\n            - 'Export-ADR'\n            - 'Export-ADRCSV'\n            - 'Export-ADRExcel'\n            - 'Export-ADRHTML'\n            - 'Export-ADRJSON'\n            - 'Export-ADRXML'\n            - 'Find-Fruit'\n            - 'Find-GPOLocation'\n            - 'Find-TrustedDocuments'\n            - 'Get-ADIDNS' # Covers: Get-ADIDNSNodeAttribute, Get-ADIDNSNodeOwner, Get-ADIDNSNodeTombstoned, Get-ADIDNSPermission, Get-ADIDNSZone\n            - 'Get-ApplicationHost'\n            - 'Get-ChromeDump'\n            - 'Get-ClipboardContents'\n            - 'Get-FoxDump'\n            - 'Get-GPPPassword'\n            - 'Get-IndexedItem'\n            - 'Get-KerberosAESKey'\n            - 'Get-Keystrokes'\n            - 'Get-LSASecret'\n            - 'Get-MachineAccountAttribute'\n            - 'Get-MachineAccountCreator'\n            - 'Get-PassHashes'\n            - 'Get-RegAlwaysInstallElevated'\n            - 'Get-RegAutoLogon'\n            - 'Get-RemoteBootKey'\n            - 'Get-RemoteCachedCredential'\n            - 'Get-RemoteLocalAccountHash'\n            - 'Get-RemoteLSAKey'\n            - 'Get-RemoteMachineAccountHash'\n            - 'Get-RemoteNLKMKey'\n            - 'Get-RickAstley'\n            - 'Get-Screenshot'\n            - 'Get-SecurityPackages'\n            - 'Get-ServiceFilePermission'\n            - 'Get-ServicePermission'\n            - 'Get-ServiceUnquoted'\n            - 'Get-SiteListPassword'\n            - 'Get-System'\n            - 'Get-TimedScreenshot'\n            - 'Get-UnattendedInstallFile'\n            - 'Get-Unconstrained'\n            - 'Get-USBKeystrokes'\n            - 'Get-VaultCredential'\n            - 'Get-VulnAutoRun'\n            - 'Get-VulnSchTask'\n            - 'Grant-ADIDNSPermission'\n            - 'Gupt-Backdoor'\n            - 'HTTP-Login'\n            - 'Install-ServiceBinary'\n            - 'Install-SSP'\n            - 'Invoke-ACLScanner'\n            - 'Invoke-ADRecon'\n            - 'Invoke-ADSBackdoor'\n            - 'Invoke-AgentSmith'\n            - 'Invoke-AllChecks'\n            - 'Invoke-ARPScan'\n            - 'Invoke-AzureHound'\n            - 'Invoke-BackdoorLNK'\n            - 'Invoke-BadPotato'\n            - 'Invoke-BetterSafetyKatz'\n            - 'Invoke-BypassUAC'\n            - 'Invoke-Carbuncle'\n            - 'Invoke-Certify'\n            - 'Invoke-ConPtyShell'\n            - 'Invoke-CredentialInjection'\n            - 'Invoke-DAFT'\n            - 'Invoke-DCSync'\n            - 'Invoke-DinvokeKatz'\n            - 'Invoke-DllInjection'\n            - 'Invoke-DNSUpdate'\n            - 'Invoke-DomainPasswordSpray'\n            - 'Invoke-DowngradeAccount'\n            - 'Invoke-EgressCheck'\n            - 'Invoke-Eyewitness'\n            - 'Invoke-FakeLogonScreen'\n            - 'Invoke-Farmer'\n            - 'Invoke-Get-RBCD-Threaded'\n            - 'Invoke-Gopher'\n            - 'Invoke-Grouper' # Also Covers Invoke-GrouperX\n            - 'Invoke-HandleKatz'\n            - 'Invoke-ImpersonatedProcess'\n            - 'Invoke-ImpersonateSystem'\n            - 'Invoke-InteractiveSystemPowerShell'\n            - 'Invoke-Internalmonologue'\n            - 'Invoke-Inveigh'\n            - 'Invoke-InveighRelay'\n            - 'Invoke-KrbRelay'\n            - 'Invoke-LdapSignCheck'\n            - 'Invoke-Lockless'\n            - 'Invoke-MalSCCM'\n            - 'Invoke-Mimikatz'\n            - 'Invoke-Mimikittenz'\n            - 'Invoke-MITM6'\n            - 'Invoke-NanoDump'\n            - 'Invoke-NetRipper'\n            - 'Invoke-Nightmare'\n            - 'Invoke-NinjaCopy'\n            - 'Invoke-OfficeScrape'\n            - 'Invoke-OxidResolver'\n            - 'Invoke-P0wnedshell'\n            - 'Invoke-Paranoia'\n            - 'Invoke-PortScan'\n            - 'Invoke-PoshRatHttp' # Also Covers Invoke-PoshRatHttps\n            - 'Invoke-PostExfil'\n            - 'Invoke-PowerDump'\n            - 'Invoke-PowerShellTCP'\n            - 'Invoke-PowerShellWMI'\n            - 'Invoke-PPLDump'\n            - 'Invoke-PsExec'\n            - 'Invoke-PSInject'\n            - 'Invoke-PsUaCme'\n            - 'Invoke-ReflectivePEInjection'\n            - 'Invoke-ReverseDNSLookup'\n            - 'Invoke-Rubeus'\n            - 'Invoke-RunAs'\n            - 'Invoke-SafetyKatz'\n            - 'Invoke-SauronEye'\n            - 'Invoke-SCShell'\n            - 'Invoke-Seatbelt'\n            - 'Invoke-ServiceAbuse'\n            - 'Invoke-ShadowSpray'\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - 'Invoke-Shellcode'\n            - 'Invoke-SMBScanner'\n            - 'Invoke-Snaffler'\n            - 'Invoke-Spoolsample'\n            - 'Invoke-SpraySinglePassword'\n            - 'Invoke-SSHCommand'\n            - 'Invoke-StandIn'\n            - 'Invoke-StickyNotesExtract'\n            - 'Invoke-SystemCommand'\n            - 'Invoke-Tasksbackdoor'\n            - 'Invoke-Tater'\n            - 'Invoke-Thunderfox'\n            - 'Invoke-ThunderStruck'\n            - 'Invoke-TokenManipulation'\n            - 'Invoke-Tokenvator'\n            - 'Invoke-TotalExec'\n            - 'Invoke-UrbanBishop'\n            - 'Invoke-UserHunter'\n            - 'Invoke-VoiceTroll'\n            - 'Invoke-Whisker'\n            - 'Invoke-WinEnum'\n            - 'Invoke-winPEAS'\n            - 'Invoke-WireTap'\n            - 'Invoke-WmiCommand'\n            - 'Invoke-WMIExec'\n            - 'Invoke-WScriptBypassUAC'\n            - 'Invoke-Zerologon'\n            - 'MailRaider'\n            - 'New-ADIDNSNode'\n            - 'New-DNSRecordArray'\n            - 'New-HoneyHash'\n            - 'New-InMemoryModule'\n            - 'New-MachineAccount'\n            - 'New-SOASerialNumberArray'\n            - 'Out-Minidump'\n            - 'Port-Scan'\n            - 'PowerBreach'\n            - 'powercat '\n            - 'PowerUp'\n            - 'PowerView'\n            - 'Remove-ADIDNSNode'\n            - 'Remove-MachineAccount'\n            - 'Remove-Update'\n            - 'Rename-ADIDNSNode'\n            - 'Revoke-ADIDNSPermission'\n            - 'Set-ADIDNSNode' # Covers: Set-ADIDNSNodeAttribute, Set-ADIDNSNodeOwner\n            - 'Set-MacAttribute'\n            - 'Set-MachineAccountAttribute'\n            - 'Set-Wallpaper'\n            - 'Show-TargetScreen'\n            - 'Start-CaptureServer'\n            - 'Start-WebcamRecorder'\n            - 'VolumeShadowCopyTools'\n    filter_optional_amazon_ec2:\n        ScriptBlockText|contains:\n            - Get-SystemDriveInfo  # http://bheltborg.dk/Windows/WinSxS/amd64_microsoft-windows-maintenancediagnostic_31bf3856ad364e35_10.0.10240.16384_none_91ef7543a4514b5e/CL_Utility.ps1\n            - C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Module\\  # false positive form Amazon EC2\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            # Note: Please ensure alphabetical order when adding new entries\n            - 'Add-Exfiltration'\n            - 'Add-Persistence'\n            - 'Add-RegBackdoor'\n            - 'Add-RemoteRegBackdoor'\n            - 'Add-ScrnSaveBackdoor'\n            - 'Check-VM'\n            - 'ConvertTo-Rc4ByteStream'\n            - 'Decrypt-Hash'\n            - 'Disable-ADIDNSNode'\n            - 'Disable-MachineAccount'\n            - 'Do-Exfiltration'\n            - 'Enable-ADIDNSNode'\n            - 'Enable-MachineAccount'\n            - 'Enabled-DuplicateToken'\n            - 'Exploit-Jboss'\n            - 'Export-ADR'\n            - 'Export-ADRCSV'\n            - 'Export-ADRExcel'\n            - 'Export-ADRHTML'\n            - 'Export-ADRJSON'\n            - 'Export-ADRXML'\n            - 'Find-Fruit'\n            - 'Find-GPOLocation'\n            - 'Find-TrustedDocuments'\n            - 'Get-ADIDNS' # Covers: Get-ADIDNSNodeAttribute, Get-ADIDNSNodeOwner, Get-ADIDNSNodeTombstoned, Get-ADIDNSPermission, Get-ADIDNSZone\n            - 'Get-ApplicationHost'\n            - 'Get-ChromeDump'\n            - 'Get-ClipboardContents'\n            - 'Get-FoxDump'\n            - 'Get-GPPPassword'\n            - 'Get-IndexedItem'\n            - 'Get-KerberosAESKey'\n            - 'Get-Keystrokes'\n            - 'Get-LSASecret'\n            - 'Get-MachineAccountAttribute'\n            - 'Get-MachineAccountCreator'\n            - 'Get-PassHashes'\n            - 'Get-RegAlwaysInstallElevated'\n            - 'Get-RegAutoLogon'\n            - 'Get-RemoteBootKey'\n            - 'Get-RemoteCachedCredential'\n            - 'Get-RemoteLocalAccountHash'\n            - 'Get-RemoteLSAKey'\n            - 'Get-RemoteMachineAccountHash'\n            - 'Get-RemoteNLKMKey'\n            - 'Get-RickAstley'\n            - 'Get-Screenshot'\n            - 'Get-SecurityPackages'\n            - 'Get-ServiceFilePermission'\n            - 'Get-ServicePermission'\n            - 'Get-ServiceUnquoted'\n            - 'Get-SiteListPassword'\n            - 'Get-System'\n            - 'Get-TimedScreenshot'\n            - 'Get-UnattendedInstallFile'\n            - 'Get-Unconstrained'\n            - 'Get-USBKeystrokes'\n            - 'Get-VaultCredential'\n            - 'Get-VulnAutoRun'\n            - 'Get-VulnSchTask'\n            - 'Grant-ADIDNSPermission'\n            - 'Gupt-Backdoor'\n            - 'HTTP-Login'\n            - 'Install-ServiceBinary'\n            - 'Install-SSP'\n            - 'Invoke-ACLScanner'\n            - 'Invoke-ADRecon'\n            - 'Invoke-ADSBackdoor'\n            - 'Invoke-AgentSmith'\n            - 'Invoke-AllChecks'\n            - 'Invoke-ARPScan'\n            - 'Invoke-AzureHound'\n            - 'Invoke-BackdoorLNK'\n            - 'Invoke-BadPotato'\n            - 'Invoke-BetterSafetyKatz'\n            - 'Invoke-BypassUAC'\n            - 'Invoke-Carbuncle'\n            - 'Invoke-Certify'\n            - 'Invoke-ConPtyShell'\n            - 'Invoke-CredentialInjection'\n            - 'Invoke-DAFT'\n            - 'Invoke-DCSync'\n            - 'Invoke-DinvokeKatz'\n            - 'Invoke-DllInjection'\n            - 'Invoke-DNSUpdate'\n            - 'Invoke-DomainPasswordSpray'\n            - 'Invoke-DowngradeAccount'\n            - 'Invoke-EgressCheck'\n            - 'Invoke-Eyewitness'\n            - 'Invoke-FakeLogonScreen'\n            - 'Invoke-Farmer'\n            - 'Invoke-Get-RBCD-Threaded'\n            - 'Invoke-Gopher'\n            - 'Invoke-Grouper' # Also Covers Invoke-GrouperX\n            - 'Invoke-HandleKatz'\n            - 'Invoke-ImpersonatedProcess'\n            - 'Invoke-ImpersonateSystem'\n            - 'Invoke-InteractiveSystemPowerShell'\n            - 'Invoke-Internalmonologue'\n            - 'Invoke-Inveigh'\n            - 'Invoke-InveighRelay'\n            - 'Invoke-KrbRelay'\n            - 'Invoke-LdapSignCheck'\n            - 'Invoke-Lockless'\n            - 'Invoke-MalSCCM'\n            - 'Invoke-Mimikatz'\n            - 'Invoke-Mimikittenz'\n            - 'Invoke-MITM6'\n            - 'Invoke-NanoDump'\n            - 'Invoke-NetRipper'\n            - 'Invoke-Nightmare'\n            - 'Invoke-NinjaCopy'\n            - 'Invoke-OfficeScrape'\n            - 'Invoke-OxidResolver'\n            - 'Invoke-P0wnedshell'\n            - 'Invoke-Paranoia'\n            - 'Invoke-PortScan'\n            - 'Invoke-PoshRatHttp' # Also Covers Invoke-PoshRatHttps\n            - 'Invoke-PostExfil'\n            - 'Invoke-PowerDump'\n            - 'Invoke-PowerShellTCP'\n            - 'Invoke-PowerShellWMI'\n            - 'Invoke-PPLDump'\n            - 'Invoke-PsExec'\n            - 'Invoke-PSInject'\n            - 'Invoke-PsUaCme'\n            - 'Invoke-ReflectivePEInjection'\n            - 'Invoke-ReverseDNSLookup'\n            - 'Invoke-Rubeus'\n            - 'Invoke-RunAs'\n            - 'Invoke-SafetyKatz'\n            - 'Invoke-SauronEye'\n            - 'Invoke-SCShell'\n            - 'Invoke-Seatbelt'\n            - 'Invoke-ServiceAbuse'\n            - 'Invoke-ShadowSpray'\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - 'Invoke-Shellcode'\n            - 'Invoke-SMBScanner'\n            - 'Invoke-Snaffler'\n            - 'Invoke-Spoolsample'\n            - 'Invoke-SpraySinglePassword'\n            - 'Invoke-SSHCommand'\n            - 'Invoke-StandIn'\n            - 'Invoke-StickyNotesExtract'\n            - 'Invoke-SystemCommand'\n            - 'Invoke-Tasksbackdoor'\n            - 'Invoke-Tater'\n            - 'Invoke-Thunderfox'\n            - 'Invoke-ThunderStruck'\n            - 'Invoke-TokenManipulation'\n            - 'Invoke-Tokenvator'\n            - 'Invoke-TotalExec'\n            - 'Invoke-UrbanBishop'\n            - 'Invoke-UserHunter'\n            - 'Invoke-VoiceTroll'\n            - 'Invoke-Whisker'\n            - 'Invoke-WinEnum'\n            - 'Invoke-winPEAS'\n            - 'Invoke-WireTap'\n            - 'Invoke-WmiCommand'\n            - 'Invoke-WMIExec'\n            - 'Invoke-WScriptBypassUAC'\n            - 'Invoke-Zerologon'\n            - 'MailRaider'\n            - 'New-ADIDNSNode'\n            - 'New-DNSRecordArray'\n            - 'New-HoneyHash'\n            - 'New-InMemoryModule'\n            - 'New-MachineAccount'\n            - 'New-SOASerialNumberArray'\n            - 'Out-Minidump'\n            - 'Port-Scan'\n            - 'PowerBreach'\n            - 'powercat '\n            - 'PowerUp'\n            - 'PowerView'\n            - 'Remove-ADIDNSNode'\n            - 'Remove-MachineAccount'\n            - 'Remove-Update'\n            - 'Rename-ADIDNSNode'\n            - 'Revoke-ADIDNSPermission'\n            - 'Set-ADIDNSNode' # Covers: Set-ADIDNSNodeAttribute, Set-ADIDNSNodeOwner\n            - 'Set-MacAttribute'\n            - 'Set-MachineAccountAttribute'\n            - 'Set-Wallpaper'\n            - 'Show-TargetScreen'\n            - 'Start-CaptureServer'\n            - 'Start-WebcamRecorder'\n            - 'VolumeShadowCopyTools'\n    filter_optional_amazon_ec2:\n        ScriptBlockText|contains:\n            - Get-SystemDriveInfo  # http://bheltborg.dk/Windows/WinSxS/amd64_microsoft-windows-maintenancediagnostic_31bf3856ad364e35_10.0.10240.16384_none_91ef7543a4514b5e/CL_Utility.ps1\n            - C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Module\\  # false positive form Amazon EC2\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Commandlet names from well-known PowerShell exploitation frameworks",
      "answer": "In order to detect Commandlet names from well-known PowerShell exploitation frameworks, you should monitor Windows PowerShell script activity, ensuring that Script Block Logging is enabled. This monitoring aims to identify any usage of specific commandlets that are commonly associated with various stages of cyber-attacks, such as establishing persistence, backdoor insertion, data exfiltration, environment reconnaissance, credential dumping, and many others that are part of well-known exploitation frameworks. Look for the presence of any suspicious PowerShell commandlet names in script blocks, which could include operations like adding various forms of backdoors (e.g., 'Add-RegBackdoor', 'Add-RemoteRegBackdoor'), performing exfiltration tasks ('Do-Exfiltration'), disabling security measures ('Disable-ADIDNSNode'), exploiting vulnerabilities ('Exploit-Jboss'), among other indicative signs of malicious activities. It is critical to exclude potential false positives related to Amazon EC2 instances by considering specific script block text content that may lead to incorrect detections. The level of concern for these detections is high due to the severe implications of successful exploitation through PowerShell, which ranges from unauthorized access to sensitive information leakage and system compromise."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting encoded base64 MZ header in the commandline.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect encoded base64 MZ header in the commandline, you should: monitor the creation of processes on Windows systems for command lines that contain specific base64 encoded strings that correlate with the MZ header indicative of executable files. These strings include 'TVqQAAMAAAAEAAAA', 'TVpQAAIAAAAEAA8A', 'TVqAAAEAAAAEABAA', 'TVoAAAAAAAAAAAAA', and 'TVpTAQEAAAAEAAAA'. Given these conditions are met, the activity is considered highly suspicious with a low likelihood of being a false positive, suggesting an attempt to execute potentially malicious code or evade detection mechanisms by disguising executable files.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'TVqQAAMAAAAEAAAA' # MZ..........\n            - 'TVpQAAIAAAAEAA8A'\n            - 'TVqAAAEAAAAEABAA'\n            - 'TVoAAAAAAAAAAAAA'\n            - 'TVpTAQEAAAAEAAAA'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'TVqQAAMAAAAEAAAA' # MZ..........\n            - 'TVpQAAIAAAAEAA8A'\n            - 'TVqAAAEAAAAEABAA'\n            - 'TVoAAAAAAAAAAAAA'\n            - 'TVpTAQEAAAAEAAAA'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "encoded base64 MZ header in the commandline",
      "answer": "In order to detect encoded base64 MZ header in the commandline, you should: monitor the creation of processes on Windows systems for command lines that contain specific base64 encoded strings that correlate with the MZ header indicative of executable files. These strings include 'TVqQAAMAAAAEAAAA', 'TVpQAAIAAAAEAA8A', 'TVqAAAEAAAAEABAA', 'TVoAAAAAAAAAAAAA', and 'TVpTAQEAAAAEAAAA'. Given these conditions are met, the activity is considered highly suspicious with a low likelihood of being a false positive, suggesting an attempt to execute potentially malicious code or evade detection mechanisms by disguising executable files."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of netcat with the \"-e\" flag followed by common shells. This could be a sign of a potential reverse shell setup..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of netcat with the \"-e\" flag followed by common shells, which could be a sign of a potential reverse shell setup, you should: Monitor the creation of processes on Linux systems for the execution of the `nc` or `ncat` commands, particularly looking for instances where their command lines contain the `-c` or `-e` flags. These flags are notable for their use in setting up reverse shells, where `-e` specifies a program to execute after connection, essentially granting shell access to the remote party. Additionally, watch for command lines that include the invocation of common shell programs like `ash`, `bash`, `sh`, and others, including their paths (such as `/bin/bash`). This comprehensive approach helps identify suspicious activity where netcat is potentially used to establish a reverse shell, providing unauthorized access to the system shell. This activity is associated with tactics like Execution and Persistence, indicating a high level of threat when such patterns are detected.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_nc:\n        Image|endswith:\n           - '/nc'\n           - '/ncat'\n    selection_flags:\n        CommandLine|contains:\n            - ' -c '\n            - ' -e '\n    selection_shell:\n        CommandLine|contains:\n            - ' ash'\n            - ' bash'\n            - ' bsh'\n            - ' csh'\n            - ' ksh'\n            - ' pdksh'\n            - ' sh'\n            - ' tcsh'\n            - '/bin/ash'\n            - '/bin/bash'\n            - '/bin/bsh'\n            - '/bin/csh'\n            - '/bin/ksh'\n            - '/bin/pdksh'\n            - '/bin/sh'\n            - '/bin/tcsh'\n            - '/bin/zsh'\n            - '$IFSash'\n            - '$IFSbash'\n            - '$IFSbsh'\n            - '$IFScsh'\n            - '$IFSksh'\n            - '$IFSpdksh'\n            - '$IFSsh'\n            - '$IFStcsh'\n            - '$IFSzsh'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_nc:\n        Image|endswith:\n           - '/nc'\n           - '/ncat'\n    selection_flags:\n        CommandLine|contains:\n            - ' -c '\n            - ' -e '\n    selection_shell:\n        CommandLine|contains:\n            - ' ash'\n            - ' bash'\n            - ' bsh'\n            - ' csh'\n            - ' ksh'\n            - ' pdksh'\n            - ' sh'\n            - ' tcsh'\n            - '/bin/ash'\n            - '/bin/bash'\n            - '/bin/bsh'\n            - '/bin/csh'\n            - '/bin/ksh'\n            - '/bin/pdksh'\n            - '/bin/sh'\n            - '/bin/tcsh'\n            - '/bin/zsh'\n            - '$IFSash'\n            - '$IFSbash'\n            - '$IFSbsh'\n            - '$IFScsh'\n            - '$IFSksh'\n            - '$IFSpdksh'\n            - '$IFSsh'\n            - '$IFStcsh'\n            - '$IFSzsh'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of netcat with the \"-e\" flag followed by common shells. This could be a sign of a potential reverse shell setup.",
      "answer": "In order to detect execution of netcat with the \"-e\" flag followed by common shells, which could be a sign of a potential reverse shell setup, you should: Monitor the creation of processes on Linux systems for the execution of the `nc` or `ncat` commands, particularly looking for instances where their command lines contain the `-c` or `-e` flags. These flags are notable for their use in setting up reverse shells, where `-e` specifies a program to execute after connection, essentially granting shell access to the remote party. Additionally, watch for command lines that include the invocation of common shell programs like `ash`, `bash`, `sh`, and others, including their paths (such as `/bin/bash`). This comprehensive approach helps identify suspicious activity where netcat is potentially used to establish a reverse shell, providing unauthorized access to the system shell. This activity is associated with tactics like Execution and Persistence, indicating a high level of threat when such patterns are detected."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect adversaries enumerate sensitive files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries enumerating sensitive files, you should: Monitor Windows PowerShell script activities, specifically focusing on script block logging which must be enabled for accurate detection. Look for scripts containing commands like 'ls', 'get-childitem', or 'gci' indicating an intention to list directory contents. Further scrutiny should be applied to scripts attempting to use the '-recurse' option, indicating a deeper, possibly malicious directory traversal. Pay special attention to scripts that seem to search for sensitive file types, such as '.pass', '.kdbx', or '.kdb', as this could signify an attempt to locate and potentially compromise crucial data. The detection should be considered genuine if all the mentioned conditions are met, acknowledging the possibility of unknown false positives at a medium severity level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - ls\n            - get-childitem\n            - gci\n    selection_recurse:\n        ScriptBlockText|contains: '-recurse'\n    selection_file:\n        ScriptBlockText|contains:\n            - '.pass'\n            - '.kdbx'\n            - '.kdb'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_action:\n        ScriptBlockText|contains:\n            - ls\n            - get-childitem\n            - gci\n    selection_recurse:\n        ScriptBlockText|contains: '-recurse'\n    selection_file:\n        ScriptBlockText|contains:\n            - '.pass'\n            - '.kdbx'\n            - '.kdb'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect adversaries enumerate sensitive files",
      "answer": "In order to detect adversaries enumerating sensitive files, you should: Monitor Windows PowerShell script activities, specifically focusing on script block logging which must be enabled for accurate detection. Look for scripts containing commands like 'ls', 'get-childitem', or 'gci' indicating an intention to list directory contents. Further scrutiny should be applied to scripts attempting to use the '-recurse' option, indicating a deeper, possibly malicious directory traversal. Pay special attention to scripts that seem to search for sensitive file types, such as '.pass', '.kdbx', or '.kdb', as this could signify an attempt to locate and potentially compromise crucial data. The detection should be considered genuine if all the mentioned conditions are met, acknowledging the possibility of unknown false positives at a medium severity level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect suspicious Kerberos TGT requests.\nOnce an attacer obtains a computer certificate by abusing Active Directory Certificate Services in combination with PetitPotam, the next step would be to leverage the certificate for malicious purposes.\nOne way of doing this is to request a Kerberos Ticket Granting Ticket using a tool like Rubeus.\nThis request will generate a 4768 event with some unusual fields depending on the environment.\nThis analytic will require tuning, we recommend filtering Account_Name to the Domain Controller computer accounts.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious Kerberos TGT requests, you should focus on monitoring security logs from Windows systems, specifically looking out for the advanced audit policy setting \"Account Logon > Kerberos Authentication Service\" which must be configured to log Success and Failure events. Pay special attention to event ID 4768, which logs Kerberos authentication ticket requests. An indicator of suspicious activity might include the TargetUserName field ending with a '$' character and the presence of any value in the CertThumbprint field, suggesting a certificate was used in the authentication process, a tactic attackers may employ after obtaining a computer certificate through vulnerabilities like PetitPotam. However, it's important to exclude events that have an IpAddress equal to '::1', as this is the IPv6 loopback address representing local system activity, and events where the CertThumbprint is empty to reduce the likelihood of false positives. \n\nGiven the possibility of false positives, especially in environments where certificates are used for legitimate authentication purposes, additional filtering is recommended based on the Account_Name to focus specifically on Domain Controller computer accounts, which are more likely targets in these attack scenarios. This detailed approach helps in pinpointing attempts to misuse the Active Directory Certificate Services for obtaining a Ticket Granting Ticket (TGT) using tools like Rubeus, falling under suspicious Kerberos TGT request activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Account Logon > Kerberos Authentication Service\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 4768\n        TargetUserName|endswith: '$'\n        CertThumbprint|contains: '*'\n    filter_local:\n        IpAddress: '::1'\n    filter_thumbprint:\n        CertThumbprint: ''\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - False positives are possible if the environment is using certificates for authentication. We recommend filtering Account_Name to the Domain Controller computer accounts.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Account Logon > Kerberos Authentication Service\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 4768\n        TargetUserName|endswith: '$'\n        CertThumbprint|contains: '*'\n    filter_local:\n        IpAddress: '::1'\n    filter_thumbprint:\n        CertThumbprint: ''\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - False positives are possible if the environment is using certificates for authentication. We recommend filtering Account_Name to the Domain Controller computer accounts.\nlevel: high\n",
      "question": "Detect suspicious Kerberos TGT requests.\nOnce an attacer obtains a computer certificate by abusing Active Directory Certificate Services in combination with PetitPotam, the next step would be to leverage the certificate for malicious purposes.\nOne way of doing this is to request a Kerberos Ticket Granting Ticket using a tool like Rubeus.\nThis request will generate a 4768 event with some unusual fields depending on the environment.\nThis analytic will require tuning, we recommend filtering Account_Name to the Domain Controller computer accounts.\n",
      "answer": "In order to detect suspicious Kerberos TGT requests, you should focus on monitoring security logs from Windows systems, specifically looking out for the advanced audit policy setting \"Account Logon > Kerberos Authentication Service\" which must be configured to log Success and Failure events. Pay special attention to event ID 4768, which logs Kerberos authentication ticket requests. An indicator of suspicious activity might include the TargetUserName field ending with a '$' character and the presence of any value in the CertThumbprint field, suggesting a certificate was used in the authentication process, a tactic attackers may employ after obtaining a computer certificate through vulnerabilities like PetitPotam. However, it's important to exclude events that have an IpAddress equal to '::1', as this is the IPv6 loopback address representing local system activity, and events where the CertThumbprint is empty to reduce the likelihood of false positives. \n\nGiven the possibility of false positives, especially in environments where certificates are used for legitimate authentication purposes, additional filtering is recommended based on the Account_Name to focus specifically on Domain Controller computer accounts, which are more likely targets in these attack scenarios. This detailed approach helps in pinpointing attempts to misuse the Active Directory Certificate Services for obtaining a Ticket Granting Ticket (TGT) using tools like Rubeus, falling under suspicious Kerberos TGT request activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor. Which loads a malicious version of the expected \"version.dll\" dll.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor, which loads a malicious version of the expected \"version.dll\" dll, you should: Focus on monitoring image load events within Windows environments. Specifically, keep an eye for instances where the \"C:\\Windows\\ADFS\\version.dll\" is loaded. This activity is indicative of an attempt to exploit the system by replacing a legitimate DLL with a malicious version, a common tactic in sophisticated cyber-attacks like those executed by NOBELIUM. Given the critical nature of this detection and its association with high-profile threats, false positives are considered unlikely. This indicates that any hit on this rule should be taken seriously and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded: 'C:\\Windows\\ADFS\\version.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded: 'C:\\Windows\\ADFS\\version.dll'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor. Which loads a malicious version of the expected \"version.dll\" dll",
      "answer": "In order to detect DLL hijacking technique used by NOBELIUM in their FoggyWeb backdoor, which loads a malicious version of the expected \"version.dll\" dll, you should: Focus on monitoring image load events within Windows environments. Specifically, keep an eye for instances where the \"C:\\Windows\\ADFS\\version.dll\" is loaded. This activity is indicative of an attempt to exploit the system by replacing a legitimate DLL with a malicious version, a common tactic in sophisticated cyber-attacks like those executed by NOBELIUM. Given the critical nature of this detection and its association with high-profile threats, false positives are considered unlikely. This indicates that any hit on this rule should be taken seriously and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential persistence using Appx DebugPath.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential persistence using Appx DebugPath, you should monitor the Windows Registry for specific set value operations indicative of such suspicious activities. Focus on logging and analyzing registry set events (`SetValue` EventType) within the Windows operating system. You should pay close attention to changes to two key paths. The first involves registry keys that contain the string `Classes\\ActivatableClasses\\Package\\Microsoft.` and end with `\\DebugPath`. The second selection criteria involve keys containing the string `\\Software\\Microsoft\\Windows\\CurrentVersion\\PackagedAppXDebug\\Microsoft.` and ending with `\\Default`. These particular patterns of registry modifications are often associated with unauthorized or malicious attempts to establish persistence mechanisms through the abuse of the Appx DebugPath feature in Windows. Be aware that these monitoring activities might generate unknown false positives, requiring expert analysis to confirm malicious intent. The severity level of these activities is considered medium, indicating a balanced approach to detection sensitivity and potential impact.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_debug:\n        EventType: SetValue\n        TargetObject|contains: 'Classes\\ActivatableClasses\\Package\\Microsoft.'\n        TargetObject|endswith: '\\DebugPath'\n    selection_default:\n        EventType: SetValue\n        TargetObject|contains: '\\Software\\Microsoft\\Windows\\CurrentVersion\\PackagedAppXDebug\\Microsoft.'\n        TargetObject|endswith: '\\(Default)'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_debug:\n        EventType: SetValue\n        TargetObject|contains: 'Classes\\ActivatableClasses\\Package\\Microsoft.'\n        TargetObject|endswith: '\\DebugPath'\n    selection_default:\n        EventType: SetValue\n        TargetObject|contains: '\\Software\\Microsoft\\Windows\\CurrentVersion\\PackagedAppXDebug\\Microsoft.'\n        TargetObject|endswith: '\\(Default)'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential persistence using Appx DebugPath",
      "answer": "In order to detect potential persistence using Appx DebugPath, you should monitor the Windows Registry for specific set value operations indicative of such suspicious activities. Focus on logging and analyzing registry set events (`SetValue` EventType) within the Windows operating system. You should pay close attention to changes to two key paths. The first involves registry keys that contain the string `Classes\\ActivatableClasses\\Package\\Microsoft.` and end with `\\DebugPath`. The second selection criteria involve keys containing the string `\\Software\\Microsoft\\Windows\\CurrentVersion\\PackagedAppXDebug\\Microsoft.` and ending with `\\Default`. These particular patterns of registry modifications are often associated with unauthorized or malicious attempts to establish persistence mechanisms through the abuse of the Appx DebugPath feature in Windows. Be aware that these monitoring activities might generate unknown false positives, requiring expert analysis to confirm malicious intent. The severity level of these activities is considered medium, indicating a balanced approach to detection sensitivity and potential impact."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting parameters used by WMImplant.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect parameters used by WMImplant, you should monitor Windows PowerShell scripts for specific signs that suggest the presence of malicious activity typical of WMImplant usage. This involves analyzing script block texts for certain keywords that indicate actions WMImplant might perform. The required environment to catch such activities includes having Script Block Logging enabled on the Windows system. The key indicators for detecting potential WMImplant activity encompass a range of operations, from user account modifications (like changing a user account with 'change_user') and command executions ('command_exec') to more specific system manipulations such as disabling or enabling Windows Remote Management ('disable_winrm', 'enable_winrm') and Digest Authentication ('disable_wdigest', 'enable_wdigest'). It also involves looking for evidence of registry modifications ('registry_mod'), remote PowerShell sessions ('remote_posh'), scheduled tasks creation ('sched_job'), service modifications ('service_mod'), process termination ('process_kill'), tracking active users ('active_users'), gathering basic system information ('basic_info'), system shutdown ('power_off'), identifying systems with no active users ('vacant_system'), and examining logon events ('logon_events'). It's important to be aware that legitimate administrative scripts might also use some of these keywords, resulting in potential false positives. Due to the serious implications of detecting such activity, this monitoring is considered to be of high importance.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'WMImplant'\n            - ' change_user '\n            - ' gen_cli '\n            - ' command_exec '\n            - ' disable_wdigest '\n            - ' disable_winrm '\n            - ' enable_wdigest '\n            - ' enable_winrm '\n            - ' registry_mod '\n            - ' remote_posh '\n            - ' sched_job '\n            - ' service_mod '\n            - ' process_kill '\n            # - ' process_start '\n            - ' active_users '\n            - ' basic_info '\n            # - ' drive_list '\n            # - ' installed_programs '\n            - ' power_off '\n            - ' vacant_system '\n            - ' logon_events '\n    condition: selection\nfalsepositives:\n    - Administrative scripts that use the same keywords.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'WMImplant'\n            - ' change_user '\n            - ' gen_cli '\n            - ' command_exec '\n            - ' disable_wdigest '\n            - ' disable_winrm '\n            - ' enable_wdigest '\n            - ' enable_winrm '\n            - ' registry_mod '\n            - ' remote_posh '\n            - ' sched_job '\n            - ' service_mod '\n            - ' process_kill '\n            # - ' process_start '\n            - ' active_users '\n            - ' basic_info '\n            # - ' drive_list '\n            # - ' installed_programs '\n            - ' power_off '\n            - ' vacant_system '\n            - ' logon_events '\n    condition: selection\nfalsepositives:\n    - Administrative scripts that use the same keywords.\nlevel: high\n",
      "question": "parameters used by WMImplant",
      "answer": "In order to detect parameters used by WMImplant, you should monitor Windows PowerShell scripts for specific signs that suggest the presence of malicious activity typical of WMImplant usage. This involves analyzing script block texts for certain keywords that indicate actions WMImplant might perform. The required environment to catch such activities includes having Script Block Logging enabled on the Windows system. The key indicators for detecting potential WMImplant activity encompass a range of operations, from user account modifications (like changing a user account with 'change_user') and command executions ('command_exec') to more specific system manipulations such as disabling or enabling Windows Remote Management ('disable_winrm', 'enable_winrm') and Digest Authentication ('disable_wdigest', 'enable_wdigest'). It also involves looking for evidence of registry modifications ('registry_mod'), remote PowerShell sessions ('remote_posh'), scheduled tasks creation ('sched_job'), service modifications ('service_mod'), process termination ('process_kill'), tracking active users ('active_users'), gathering basic system information ('basic_info'), system shutdown ('power_off'), identifying systems with no active users ('vacant_system'), and examining logon events ('logon_events'). It's important to be aware that legitimate administrative scripts might also use some of these keywords, resulting in potential false positives. Due to the serious implications of detecting such activity, this monitoring is considered to be of high importance."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor network connections from Windows products for any instances where the application involved ends with '\\3CXDesktopApp.exe' and the destination hostname includes one of several specified suspicious domains. These domains, such as 'akamaicontainer.com', 'azuredeploystore.com', and 'officeaddons.com' among others, are indicators that the 3CXDesktopApp may have been compromised and is possibly communicating with a command and control server. Due to the high confidence in these indicators, false positives are considered unlikely. This method focuses on identifying malicious network activity that signals a compromised application, potentially signaling a larger security breach.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\3CXDesktopApp.exe'\n        DestinationHostname|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\3CXDesktopApp.exe'\n        DestinationHostname|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
      "answer": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor network connections from Windows products for any instances where the application involved ends with '\\3CXDesktopApp.exe' and the destination hostname includes one of several specified suspicious domains. These domains, such as 'akamaicontainer.com', 'azuredeploystore.com', and 'officeaddons.com' among others, are indicators that the 3CXDesktopApp may have been compromised and is possibly communicating with a command and control server. Due to the high confidence in these indicators, false positives are considered unlikely. This method focuses on identifying malicious network activity that signals a compromised application, potentially signaling a larger security breach."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Bitsadmin connections to domains with uncommon TLDs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Bitsadmin connections to domains with uncommon TLDs, you should monitor proxy logs for connections initiated by the Microsoft Background Intelligent Transfer Service (BITS). Look specifically for user agents that start with 'Microsoft BITS/'. However, it's important to filter out connections to common top-level domains (TLDs) such as '.com', '.net', '.org', as well as specific domains known to be benign, like '.scdn.co' (used by Spotify for streaming) and '.sfx.ms' (a Microsoft domain). The presence of requests not directed towards these filtered domains could indicate suspicious activity, potentially linked to the use of Bitsadmin for malicious purposes, such as data exfiltration or malware download from uncommon or suspicious TLDs.\n\nEnsure that you record the client's IP address, the requested URI, and the user-agent string for further investigation. Be aware that there might be legitimate, though rare, cases of programs using Bitsadmin to update from regional TLDs, so it's essential to consider the context of detections and investigate potential false positives thoroughly. This approach is crucial in identifying the misuse of BITS, which could relate to various cyber attack tactics and techniques, primarily focusing on initial access, command and control, and exfiltration activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith: 'Microsoft BITS/'\n    falsepositives:\n        cs-host|endswith:\n            - '.com'\n            - '.net'\n            - '.org'\n            - '.scdn.co' # spotify streaming\n            - '.sfx.ms' # Microsoft domain, example request: https://oneclient.sfx.ms/PreSignInSettings/Prod/2022-08-15-21-xx-xx/PreSignInSettingsConfig.json\n    condition: selection and not falsepositives\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Rare programs that use Bitsadmin and update from regional TLDs e.g. .uk or .ca\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent|startswith: 'Microsoft BITS/'\n    falsepositives:\n        cs-host|endswith:\n            - '.com'\n            - '.net'\n            - '.org'\n            - '.scdn.co' # spotify streaming\n            - '.sfx.ms' # Microsoft domain, example request: https://oneclient.sfx.ms/PreSignInSettings/Prod/2022-08-15-21-xx-xx/PreSignInSettingsConfig.json\n    condition: selection and not falsepositives\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Rare programs that use Bitsadmin and update from regional TLDs e.g. .uk or .ca\nlevel: high\n",
      "question": "Bitsadmin connections to domains with uncommon TLDs",
      "answer": "In order to detect Bitsadmin connections to domains with uncommon TLDs, you should monitor proxy logs for connections initiated by the Microsoft Background Intelligent Transfer Service (BITS). Look specifically for user agents that start with 'Microsoft BITS/'. However, it's important to filter out connections to common top-level domains (TLDs) such as '.com', '.net', '.org', as well as specific domains known to be benign, like '.scdn.co' (used by Spotify for streaming) and '.sfx.ms' (a Microsoft domain). The presence of requests not directed towards these filtered domains could indicate suspicious activity, potentially linked to the use of Bitsadmin for malicious purposes, such as data exfiltration or malware download from uncommon or suspicious TLDs.\n\nEnsure that you record the client's IP address, the requested URI, and the user-agent string for further investigation. Be aware that there might be legitimate, though rare, cases of programs using Bitsadmin to update from regional TLDs, so it's essential to consider the context of detections and investigate potential false positives thoroughly. This approach is crucial in identifying the misuse of BITS, which could relate to various cyber attack tactics and techniques, primarily focusing on initial access, command and control, and exfiltration activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting removal of a port or application rule in the Windows Firewall configuration using netsh.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the removal of a port or application rule in the Windows Firewall configuration using netsh, you should: Look for the creation of processes on Windows systems specifically invoking 'netsh.exe', either by the exact name in the Image path or by the OriginalFileName. Pay attention to commands that include both 'firewall' and 'delete' within the CommandLine to catch incidences where firewall rules are being altered. However, ensure to exclude any actions originating from 'Dropbox.exe' or containing 'name=Dropbox' in the command line, as these are marked as known exceptions. Be aware that legitimate administration activities or software installations and removals might trigger this detection, which has been classified with a medium level of urgency. This process is aligned with identifying and mitigating tactics where attackers might try to disable security measures by manipulating firewall rules.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'firewall'\n            - 'delete '\n    filter_dropbox:\n        ParentImage|endswith: '\\Dropbox.exe'\n        CommandLine|contains: 'name=Dropbox'\n    condition: all of selection_* and not filter_dropbox\nfalsepositives:\n    - Legitimate administration activity\n    - Software installations and removal\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'firewall'\n            - 'delete '\n    filter_dropbox:\n        ParentImage|endswith: '\\Dropbox.exe'\n        CommandLine|contains: 'name=Dropbox'\n    condition: all of selection_* and not filter_dropbox\nfalsepositives:\n    - Legitimate administration activity\n    - Software installations and removal\nlevel: medium\n",
      "question": "removal of a port or application rule in the Windows Firewall configuration using netsh",
      "answer": "In order to detect the removal of a port or application rule in the Windows Firewall configuration using netsh, you should: Look for the creation of processes on Windows systems specifically invoking 'netsh.exe', either by the exact name in the Image path or by the OriginalFileName. Pay attention to commands that include both 'firewall' and 'delete' within the CommandLine to catch incidences where firewall rules are being altered. However, ensure to exclude any actions originating from 'Dropbox.exe' or containing 'name=Dropbox' in the command line, as these are marked as known exceptions. Be aware that legitimate administration activities or software installations and removals might trigger this detection, which has been classified with a medium level of urgency. This process is aligned with identifying and mitigating tactics where attackers might try to disable security measures by manipulating firewall rules."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting using WorkFolders.exe to execute an arbitrary control.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect using WorkFolders.exe to execute an arbitrary control.exe, you should: Look for instances where a process creation event occurs on Windows systems, specifically focusing on the execution of 'control.exe' that originates from 'WorkFolders.exe'. However, it's important to exclude any occurrences where 'control.exe' is being executed from its standard location at 'C:\\Windows\\System32\\control.exe' to reduce false positives. Although instances where this pattern is observed might sometimes relate to legitimate usage of the Windows Work Folders feature, such activity is considered suspicious and merits a high alert level due to its potential misuse for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\control.exe'\n        ParentImage|endswith: '\\WorkFolders.exe'\n    filter:\n        Image: 'C:\\Windows\\System32\\control.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate usage of the uncommon Windows Work Folders feature.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\control.exe'\n        ParentImage|endswith: '\\WorkFolders.exe'\n    filter:\n        Image: 'C:\\Windows\\System32\\control.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate usage of the uncommon Windows Work Folders feature.\nlevel: high\n",
      "question": "using WorkFolders.exe to execute an arbitrary control.exe",
      "answer": "In order to detect using WorkFolders.exe to execute an arbitrary control.exe, you should: Look for instances where a process creation event occurs on Windows systems, specifically focusing on the execution of 'control.exe' that originates from 'WorkFolders.exe'. However, it's important to exclude any occurrences where 'control.exe' is being executed from its standard location at 'C:\\Windows\\System32\\control.exe' to reduce false positives. Although instances where this pattern is observed might sometimes relate to legitimate usage of the Windows Work Folders feature, such activity is considered suspicious and merits a high alert level due to its potential misuse for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an an application is removed from Google Workspace..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an application is removed from Google Workspace, you should: Focus on monitoring logs from the Google Workspace, specifically within the admin service. The detection mechanism should keenly watch for logs coming from the event service \"admin.googleapis.com\". Specifically, the log events to be vigilant for include \"REMOVE_APPLICATION\" and \"REMOVE_APPLICATION_FROM_WHITELIST\". These events indicate that an application is being removed from Google Workspace or from a whitelist, which could signify a potential security incident. However, be mindful that there are legitimate scenarios where a System Administrator might remove applications, which are considered false positives in this context. This activity is classified at a medium level of concern and is associated with tactics and techniques that could imply unauthorized changes or manipulation within Google Workspace environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection:\n        eventService: admin.googleapis.com\n        eventName:\n            - REMOVE_APPLICATION\n            - REMOVE_APPLICATION_FROM_WHITELIST\n    condition: selection\nfalsepositives:\n    - Application being removed may be performed by a System Administrator.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection:\n        eventService: admin.googleapis.com\n        eventName:\n            - REMOVE_APPLICATION\n            - REMOVE_APPLICATION_FROM_WHITELIST\n    condition: selection\nfalsepositives:\n    - Application being removed may be performed by a System Administrator.\nlevel: medium\n",
      "question": "when an an application is removed from Google Workspace.",
      "answer": "In order to detect when an application is removed from Google Workspace, you should: Focus on monitoring logs from the Google Workspace, specifically within the admin service. The detection mechanism should keenly watch for logs coming from the event service \"admin.googleapis.com\". Specifically, the log events to be vigilant for include \"REMOVE_APPLICATION\" and \"REMOVE_APPLICATION_FROM_WHITELIST\". These events indicate that an application is being removed from Google Workspace or from a whitelist, which could signify a potential security incident. However, be mindful that there are legitimate scenarios where a System Administrator might remove applications, which are considered false positives in this context. This activity is classified at a medium level of concern and is associated with tactics and techniques that could imply unauthorized changes or manipulation within Google Workspace environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and\nto identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify adversaries who are attempting to discover folders and drives shared on remote systems as part of their initial information gathering or to pinpoint potential targets for lateral movement within a network, you should monitor for specific activities within Windows PowerShell modules. Look for any instances where the commands containing 'get-smbshare' are executed. This can indicate an attempt to enumerate SMB shares available on the network, which often serve as shared network drives and folders allowing access to file directories across different systems. These activities can be detected in logs that originate from PowerShell modules, which would typically be part of the Windows product log sources.\n\nIt's important to note, however, that occurrences of these commands may not always signify malicious intent. Administrators or legitimate automated scripts may execute these commands for valid operational reasons, such as routine network maintenance or auditing. Therefore, these detections are considered to have a low level of confidence in indicating malicious activity without additional context. However, continuous monitoring and analysis of these detections, especially in correlation with other suspicious activities, could reveal attempts by adversaries to gather information necessary for further collection of sensitive data or to facilitate lateral movement within the targeted network environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        - Payload|contains: get-smbshare\n        - ContextInfo|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Administrator script\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        - Payload|contains: get-smbshare\n        - ContextInfo|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Administrator script\nlevel: low\n",
      "question": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and\nto identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
      "answer": "In order to identify adversaries who are attempting to discover folders and drives shared on remote systems as part of their initial information gathering or to pinpoint potential targets for lateral movement within a network, you should monitor for specific activities within Windows PowerShell modules. Look for any instances where the commands containing 'get-smbshare' are executed. This can indicate an attempt to enumerate SMB shares available on the network, which often serve as shared network drives and folders allowing access to file directories across different systems. These activities can be detected in logs that originate from PowerShell modules, which would typically be part of the Windows product log sources.\n\nIt's important to note, however, that occurrences of these commands may not always signify malicious intent. Administrators or legitimate automated scripts may execute these commands for valid operational reasons, such as routine network maintenance or auditing. Therefore, these detections are considered to have a low level of confidence in indicating malicious activity without additional context. However, continuous monitoring and analysis of these detections, especially in correlation with other suspicious activities, could reveal attempts by adversaries to gather information necessary for further collection of sensitive data or to facilitate lateral movement within the targeted network environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting MODx manager - Local File Inclusion:Directory traversal vulnerability in manager/controllers/default/resource/tvs.php in MODx Revolution 2.0.2-pl, and possibly earlier,\nwhen magic_quotes_gpc is disabled, allows remote attackers to read arbitrary files via a .. (dot dot) in the class_key parameter.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a directory traversal vulnerability exploit attempt on a MODx Revolution webserver, specifically targeting the ability of attackers to read arbitrary files by manipulating the 'class_key' parameter in 'manager/controllers/default/resource/tvs.php', you should: look for webserver log entries where the Uniform Resource Identifier (URI) query contains the suspicious sequence '/manager/controllers/default/resource/tvs.php?class_key=../../../../../../../../../../windows/win.ini%00'. This pattern suggests an attempt to exploit a path traversal flaw to access the 'win.ini' file on a Windows server, indicative of an attacker trying to read sensitive files outside the intended directory. Be aware that legitimate scanning activities from tools like Nuclei and other unclassified actions can generate similar log entries, which are considered false positives. This detection is classified as critical due to the potential impact of allowing attackers to read arbitrary files on the server.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: /manager/controllers/default/resource/tvs.php?class_key=../../../../../../../../../../windows/win.ini%00\n    condition: selection\nfalsepositives:\n    - Scanning from Nuclei\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: webserver\ndetection:\n    selection:\n        cs-uri-query|contains: /manager/controllers/default/resource/tvs.php?class_key=../../../../../../../../../../windows/win.ini%00\n    condition: selection\nfalsepositives:\n    - Scanning from Nuclei\n    - Unknown\nlevel: critical\n",
      "question": "MODx manager - Local File Inclusion:Directory traversal vulnerability in manager/controllers/default/resource/tvs.php in MODx Revolution 2.0.2-pl, and possibly earlier,\nwhen magic_quotes_gpc is disabled, allows remote attackers to read arbitrary files via a .. (dot dot) in the class_key parameter.\n",
      "answer": "In order to detect a directory traversal vulnerability exploit attempt on a MODx Revolution webserver, specifically targeting the ability of attackers to read arbitrary files by manipulating the 'class_key' parameter in 'manager/controllers/default/resource/tvs.php', you should: look for webserver log entries where the Uniform Resource Identifier (URI) query contains the suspicious sequence '/manager/controllers/default/resource/tvs.php?class_key=../../../../../../../../../../windows/win.ini%00'. This pattern suggests an attempt to exploit a path traversal flaw to access the 'win.ini' file on a Windows server, indicative of an attacker trying to read sensitive files outside the intended directory. Be aware that legitimate scanning activities from tools like Nuclei and other unclassified actions can generate similar log entries, which are considered false positives. This detection is classified as critical due to the potential impact of allowing attackers to read arbitrary files on the server."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance, you should: Monitor process creation events on Windows systems, looking specifically for instances where command line interpreters or scripting engines like cmd.exe, cscript.exe, mshta.exe, powershell_ise.exe, powershell.exe, pwsh.exe, and wscript.exe initiate the process regsvr32.exe. It's important to filter out and exclude legitimate uses of these scripts, as well as some Windows services to reduce false positives. Notably, an instance where cmd.exe is used to start \"regsvr32.exe\" specifically with a command line ending in '/s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll' should be excluded from this detection to avoid false flags on legitimate usage. This monitoring approach aims to detect malicious activities while minimizing the chance of misidentifying benign behaviors commonly observed in enterprise environments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell_ise.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        Image|endswith: '\\regsvr32.exe'\n    filter_main_rpcproxy:\n        ParentImage: C:\\Windows\\System32\\cmd.exe\n        CommandLine|endswith: ' /s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate \".bat\", \".hta\", \".ps1\" or \".vbs\" scripts leverage legitimately often. Apply additional filter and exclusions as necessary\n    - Some legitimate Windows services\nlevel: medium # Can be reduced to low if you experience a ton of FP\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell_ise.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        Image|endswith: '\\regsvr32.exe'\n    filter_main_rpcproxy:\n        ParentImage: C:\\Windows\\System32\\cmd.exe\n        CommandLine|endswith: ' /s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate \".bat\", \".hta\", \".ps1\" or \".vbs\" scripts leverage legitimately often. Apply additional filter and exclusions as necessary\n    - Some legitimate Windows services\nlevel: medium # Can be reduced to low if you experience a ton of FP\n",
      "question": "various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance.",
      "answer": "In order to detect various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance, you should: Monitor process creation events on Windows systems, looking specifically for instances where command line interpreters or scripting engines like cmd.exe, cscript.exe, mshta.exe, powershell_ise.exe, powershell.exe, pwsh.exe, and wscript.exe initiate the process regsvr32.exe. It's important to filter out and exclude legitimate uses of these scripts, as well as some Windows services to reduce false positives. Notably, an instance where cmd.exe is used to start \"regsvr32.exe\" specifically with a command line ending in '/s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll' should be excluded from this detection to avoid false flags on legitimate usage. This monitoring approach aims to detect malicious activities while minimizing the chance of misidentifying benign behaviors commonly observed in enterprise environments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the Sharp Chisel via the commandline arguments.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SharpChisel.exe'\n        - Product: 'SharpChisel'\n    # See rule 8b0e12da-d3c3-49db-bb4f-256703f380e5 for Chisel.exe coverage\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\SharpChisel.exe'\n        - Product: 'SharpChisel'\n    # See rule 8b0e12da-d3c3-49db-bb4f-256703f380e5 for Chisel.exe coverage\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "usage of the Sharp Chisel via the commandline arguments",
      "answer": "In order to detect usage of the Sharp Chisel via the commandline arguments, you should: Monitor Windows process creation logs for instances where the process image name ends with '\\SharpChisel.exe' or where the product name is identified as 'SharpChisel'. Such an event is indicative of Sharp Chisel's execution. Given the context, this activity is highly suspicious and is unlikely to generate false positives, underlining its significance in identifying potential malicious behavior. The detection of this activity is crucial as it can point towards an attacker using Sharp Chisel for nefarious purposes, which is flagged at a high severity level due to its potential impact."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting WRITE_DAC access to a domain object.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect WRITE_DAC access to a domain object, you should: monitor for specific events within Windows security logs that match certain criteria indicating potential unauthorized or malicious activity. Specifically, look for Event ID 4662 within these logs, which corresponds to an attempt to perform an operation on an Active Directory object. The operation in question is identified by the AccessMask value '0x40000', which specifically denotes WRITE_DAC access. This type of access allows changes to be made to the Discretionary Access Control List (DACL) of an object, thus potentially altering who has permissions to the object. The objects of interest are identified by their ObjectType values, either '19195a5b-6da0-11d0-afd3-00c04fd930c9' or labeled as 'domainDNS'. These indicate attempts to modify the access control lists of critical domain objects, a tactic that can be employed to escalate privileges or maintain persistence within a network. It is crucial to monitor these activities as they pertain to the 'DS' ObjectServer, which is the directory service, and are flagged as critical due to the potential for significant security implications. Such activities are often indicators of malicious actors attempting to gain elevated access or control within an organization's IT environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        ObjectServer: 'DS'\n        AccessMask: '0x40000'\n        ObjectType:\n            - '19195a5b-6da0-11d0-afd3-00c04fd930c9'\n            - 'domainDNS'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        ObjectServer: 'DS'\n        AccessMask: '0x40000'\n        ObjectType:\n            - '19195a5b-6da0-11d0-afd3-00c04fd930c9'\n            - 'domainDNS'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "WRITE_DAC access to a domain object",
      "answer": "In order to detect WRITE_DAC access to a domain object, you should: monitor for specific events within Windows security logs that match certain criteria indicating potential unauthorized or malicious activity. Specifically, look for Event ID 4662 within these logs, which corresponds to an attempt to perform an operation on an Active Directory object. The operation in question is identified by the AccessMask value '0x40000', which specifically denotes WRITE_DAC access. This type of access allows changes to be made to the Discretionary Access Control List (DACL) of an object, thus potentially altering who has permissions to the object. The objects of interest are identified by their ObjectType values, either '19195a5b-6da0-11d0-afd3-00c04fd930c9' or labeled as 'domainDNS'. These indicate attempts to modify the access control lists of critical domain objects, a tactic that can be employed to escalate privileges or maintain persistence within a network. It is crucial to monitor these activities as they pertain to the 'DS' ObjectServer, which is the directory service, and are flagged as critical due to the potential for significant security implications. Such activities are often indicators of malicious actors attempting to gain elevated access or control within an organization's IT environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Host Without Firewall. Alert means not complied. Sigma for Qualys vulnerability scanner. Scan type - Vulnerability Management..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a host without a firewall and thus not compliant with security policies, as indicated by scans from Qualys focusing on Vulnerability Management, you should: Monitor the logs from Qualys for events categorized under 'Security Policy'. Specifically, look for entries where the vulnerability name indicates that a 'Firewall Product Not Detected' on the host. This detection signals that the host may be vulnerable due to the absence of a firewall, aligning with vulnerability management practices. It is flagged with a low level of severity, reflecting its nature as a basic, yet crucial, compliance check.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: qualys\ndetection:\n    selection:\n        event.category: 'Security Policy'\n        host.scan.vuln_name|contains: 'Firewall Product Not Detected'\n    condition: selection\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: qualys\ndetection:\n    selection:\n        event.category: 'Security Policy'\n        host.scan.vuln_name|contains: 'Firewall Product Not Detected'\n    condition: selection\nlevel: low\n",
      "question": "Host Without Firewall. Alert means not complied. Sigma for Qualys vulnerability scanner. Scan type - Vulnerability Management.",
      "answer": "In order to detect a host without a firewall and thus not compliant with security policies, as indicated by scans from Qualys focusing on Vulnerability Management, you should: Monitor the logs from Qualys for events categorized under 'Security Policy'. Specifically, look for entries where the vulnerability name indicates that a 'Firewall Product Not Detected' on the host. This detection signals that the host may be vulnerable due to the absence of a firewall, aligning with vulnerability management practices. It is flagged with a low level of severity, reflecting its nature as a basic, yet crucial, compliance check."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet, you should monitor Windows system process creation logs. Specifically, look for instances where the command line contains attempts to modify or remove settings related to Windows Defender through the 'Remove-MpPreference' command. Additionally, watch for modifications to crucial Defender configurations such as Protected Folders, Attack Surface Reduction Rules including their IDs and Actions, and the Check for Signatures Before Running Scan setting. These modifications can serve as indicators of malicious tampering with Defender's protective measures. It's crucial to note that while these detections are robust indicators of potential security policy tampering, there could be legitimate reasons for these actions to be performed through PowerShell scripts, so careful analysis is required to distinguish between benign and malicious intent. The severity level for these detections is considered high due to the potential impact on the system's security posture.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_remove:\n        CommandLine|contains: 'Remove-MpPreference'\n    selection_tamper:\n        CommandLine|contains:\n            - '-ControlledFolderAccessProtectedFolders '\n            - '-AttackSurfaceReductionRules_Ids '\n            - '-AttackSurfaceReductionRules_Actions '\n            - '-CheckForSignaturesBeforeRunningScan '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_remove:\n        CommandLine|contains: 'Remove-MpPreference'\n    selection_tamper:\n        CommandLine|contains:\n            - '-ControlledFolderAccessProtectedFolders '\n            - '-AttackSurfaceReductionRules_Ids '\n            - '-AttackSurfaceReductionRules_Actions '\n            - '-CheckForSignaturesBeforeRunningScan '\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: high\n",
      "question": "attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet",
      "answer": "In order to detect attempts to remove Windows Defender configurations using the 'MpPreference' cmdlet, you should monitor Windows system process creation logs. Specifically, look for instances where the command line contains attempts to modify or remove settings related to Windows Defender through the 'Remove-MpPreference' command. Additionally, watch for modifications to crucial Defender configurations such as Protected Folders, Attack Surface Reduction Rules including their IDs and Actions, and the Check for Signatures Before Running Scan setting. These modifications can serve as indicators of malicious tampering with Defender's protective measures. It's crucial to note that while these detections are robust indicators of potential security policy tampering, there could be legitimate reasons for these actions to be performed through PowerShell scripts, so careful analysis is required to distinguish between benign and malicious intent. The severity level for these detections is considered high due to the potential impact on the system's security posture."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may communicate using a protocol and port paring that are typically not associated.\nFor example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who may be communicating using a protocol and port pairing that are usually not associated, such as HTTPS over unconventional ports like 8088 or 587 instead of the standard port 443, you should focus on monitoring Windows PowerShell script activity. Specifically, you need to ensure Script Block Logging is enabled to capture PowerShell script executions. Look for instances where PowerShell scripts contain commands like `Test-NetConnection` along with parameters specifying `-ComputerName` and `-port`. These elements together might indicate attempts to test network connections to unusual ports, which could signify malicious activity based on the technique of leveraging different protocol and port combinations to evade detection or firewall rules. However, it's important to exclude scripts that are explicitly testing or using standard ports like 443 and 80 in their connection attempts, as these are typically associated with legitimate activities. This approach aims to strike a balance between identifying potential threats and reducing false positives, bearing in mind that legitimate administrative scripts could sometimes use similar patterns for valid purposes. The sensitivity of the detection is set to a medium level, acknowledging that while this method can effectively indicate suspicious behavior, it might not catch all variants of such activities and could occasionally flag benign actions as suspicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Test-NetConnection\n            - '-ComputerName '\n            - '-port '\n    filter:\n        ScriptBlockText|contains:\n            - ' 443 '\n            - ' 80 '\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Test-NetConnection\n            - '-ComputerName '\n            - '-port '\n    filter:\n        ScriptBlockText|contains:\n            - ' 443 '\n            - ' 80 '\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Adversaries may communicate using a protocol and port paring that are typically not associated.\nFor example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.\n",
      "answer": "In order to detect adversaries who may be communicating using a protocol and port pairing that are usually not associated, such as HTTPS over unconventional ports like 8088 or 587 instead of the standard port 443, you should focus on monitoring Windows PowerShell script activity. Specifically, you need to ensure Script Block Logging is enabled to capture PowerShell script executions. Look for instances where PowerShell scripts contain commands like `Test-NetConnection` along with parameters specifying `-ComputerName` and `-port`. These elements together might indicate attempts to test network connections to unusual ports, which could signify malicious activity based on the technique of leveraging different protocol and port combinations to evade detection or firewall rules. However, it's important to exclude scripts that are explicitly testing or using standard ports like 443 and 80 in their connection attempts, as these are typically associated with legitimate activities. This approach aims to strike a balance between identifying potential threats and reducing false positives, bearing in mind that legitimate administrative scripts could sometimes use similar patterns for valid purposes. The sensitivity of the detection is set to a medium level, acknowledging that while this method can effectively indicate suspicious behavior, it might not catch all variants of such activities and could occasionally flag benign actions as suspicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user is added to a privileged role..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user is added to a privileged role, you should: Monitor Azure audit logs for specific activities related to the addition of users to privileged roles. Specifically, look for log entries where the message indicates that an \"Add eligible member (permanent)\" or an \"Add eligible member (eligible)\" action has taken place. These log entries are critical to identify unauthorized or suspicious attempts to elevate privileges within an Azure environment. However, it's important to consider that there might be legitimate administrative actions where users are added to roles as part of normal operations, which could be considered as false positives. The severity level for this kind of activity is considered high due to the potential impact of unauthorized access to privileged roles.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Add eligible member (permanent)\n            - Add eligible member (eligible)\n    condition: selection\nfalsepositives:\n    - Legtimate administrator actions of adding members from a role\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        properties.message:\n            - Add eligible member (permanent)\n            - Add eligible member (eligible)\n    condition: selection\nfalsepositives:\n    - Legtimate administrator actions of adding members from a role\nlevel: high\n",
      "question": "user is added to a privileged role.",
      "answer": "In order to detect when a user is added to a privileged role, you should: Monitor Azure audit logs for specific activities related to the addition of users to privileged roles. Specifically, look for log entries where the message indicates that an \"Add eligible member (permanent)\" or an \"Add eligible member (eligible)\" action has taken place. These log entries are critical to identify unauthorized or suspicious attempts to elevate privileges within an Azure environment. However, it's important to consider that there might be legitimate administrative actions where users are added to roles as part of normal operations, which could be considered as false positives. The severity level for this kind of activity is considered high due to the potential impact of unauthorized access to privileged roles."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor for specific process creations associated with utility tools used in Windows environments for certificate management. Specifically, pay attention to instances where 'certutil.exe' or 'CertMgr.exe' is executed with command-line arguments indicative of root certificate installation actions.\n\nFor the 'certutil.exe' utility, look for command-line activity that includes '-addstore' followed by 'root', which is a clear indication of an attempt to add a root certificate. Similarly, for 'CertMgr.exe', monitor for command lines containing '/add' along with 'root', signaling the addition of a root certificate to the system.\n\nIt's important to consider legitimate use cases where help desk or IT departments may manually add corporate Root Certificates of Authority (CAs) for valid reasons. Thus, while monitoring for these activities, be aware of potential false positives, especially in environments where manual additions of root CAs are part of regular IT operations. The detection of such activities should be set at a medium level of importance, balancing the need to identify malicious activities with the need to minimize disruptions to legitimate operations.\n\nIn essence, by focusing on process creation logs in Windows environments and identifying specific execution patterns of 'certutil.exe' and 'CertMgr.exe' related to root certificate installation, you can effectively spot potentially malicious efforts to subvert security warnings related to adversary-controlled web servers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\certutil.exe'     # Example: certutil -addstore -f -user ROOT CertificateFileName.der\n        CommandLine|contains|all:\n            - '-addstore'\n            - 'root'\n    selection2:\n        Image|endswith: '\\CertMgr.exe'      # Example: CertMgr.exe /add CertificateFileName.cer /s /r localMachine root /all\n        CommandLine|contains|all:\n            - '/add'\n            - 'root'\n    condition: selection1 or selection2\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\certutil.exe'     # Example: certutil -addstore -f -user ROOT CertificateFileName.der\n        CommandLine|contains|all:\n            - '-addstore'\n            - 'root'\n    selection2:\n        Image|endswith: '\\CertMgr.exe'      # Example: CertMgr.exe /add CertificateFileName.cer /s /r localMachine root /all\n        CommandLine|contains|all:\n            - '/add'\n            - 'root'\n    condition: selection1 or selection2\nfalsepositives:\n    - Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP\nlevel: medium\n",
      "question": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.",
      "answer": "In order to detect adversaries attempting to install a root certificate on a compromised system to avoid warnings when connecting to adversary-controlled web servers, you should monitor for specific process creations associated with utility tools used in Windows environments for certificate management. Specifically, pay attention to instances where 'certutil.exe' or 'CertMgr.exe' is executed with command-line arguments indicative of root certificate installation actions.\n\nFor the 'certutil.exe' utility, look for command-line activity that includes '-addstore' followed by 'root', which is a clear indication of an attempt to add a root certificate. Similarly, for 'CertMgr.exe', monitor for command lines containing '/add' along with 'root', signaling the addition of a root certificate to the system.\n\nIt's important to consider legitimate use cases where help desk or IT departments may manually add corporate Root Certificates of Authority (CAs) for valid reasons. Thus, while monitoring for these activities, be aware of potential false positives, especially in environments where manual additions of root CAs are part of regular IT operations. The detection of such activities should be set at a medium level of importance, balancing the need to identify malicious activities with the need to minimize disruptions to legitimate operations.\n\nIn essence, by focusing on process creation logs in Windows environments and identifying specific execution patterns of 'certutil.exe' and 'CertMgr.exe' related to root certificate installation, you can effectively spot potentially malicious efforts to subvert security warnings related to adversary-controlled web servers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files, you should: Monitor Windows process creation logs for any instances where the name of the created process ends with '\\PowerTool.exe' or '\\PowerTool64.exe', or where the original filename is explicitly 'PowerTool.exe'. These indicators are highly suggestive of the PowerTool utility being executed on the system, which is known for its capabilities to interact dangerously with processes and drivers. Given the nature of these activities, occurrences are unlikely to be false positives and should be treated with a high level of suspicion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\PowerTool.exe'\n            - '\\PowerTool64.exe'\n        - OriginalFileName: 'PowerTool.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\PowerTool.exe'\n            - '\\PowerTool64.exe'\n        - OriginalFileName: 'PowerTool.exe'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files",
      "answer": "In order to detect the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files, you should: Monitor Windows process creation logs for any instances where the name of the created process ends with '\\PowerTool.exe' or '\\PowerTool64.exe', or where the original filename is explicitly 'PowerTool.exe'. These indicators are highly suggestive of the PowerTool utility being executed on the system, which is known for its capabilities to interact dangerously with processes and drivers. Given the nature of these activities, occurrences are unlikely to be false positives and should be treated with a high level of suspicion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS queries to \"ufile.io\". Which is often abused by malware for upload and exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS queries to \"ufile.io\", which is often abused by malware for upload and exfiltration, you should focus on monitoring DNS client events within Windows environments. This involves ensuring that the Microsoft-Windows-DNS Client Events/Operational Event Log is enabled and collected. Specifically, look for events with an EventID of 3008, which indicate DNS queries. Within these events, pay close attention to queries that contain the domain 'ufile.io', as this is a known vector for malicious activity, specifically related to malware's use of the domain for uploading and exfiltrating data. However, it's important to consider that there can be legitimate DNS queries and usages of Ufile, which are identified as potential false positives in analyzing these events. The level of concern for such detections is categorized as high, underlining the importance and potential severity associated with these activities. \n\nMonitoring for these specific DNS query events will aid in identifying possible malicious activities related to common tactics and techniques used by adversaries, such as \"Exfiltration Over Command and Control Channel\". This aligns with understanding and mitigating threats that leverage DNS queries to domains known for malicious use, thus enhancing the security posture against such malware-related activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: dns-client\n    definition: 'Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.'\ndetection:\n    selection:\n        EventID: 3008\n        QueryName|contains: 'ufile.io'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Ufile\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: dns-client\n    definition: 'Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.'\ndetection:\n    selection:\n        EventID: 3008\n        QueryName|contains: 'ufile.io'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Ufile\nlevel: high\n",
      "question": "DNS queries to \"ufile.io\". Which is often abused by malware for upload and exfiltration",
      "answer": "In order to detect DNS queries to \"ufile.io\", which is often abused by malware for upload and exfiltration, you should focus on monitoring DNS client events within Windows environments. This involves ensuring that the Microsoft-Windows-DNS Client Events/Operational Event Log is enabled and collected. Specifically, look for events with an EventID of 3008, which indicate DNS queries. Within these events, pay close attention to queries that contain the domain 'ufile.io', as this is a known vector for malicious activity, specifically related to malware's use of the domain for uploading and exfiltrating data. However, it's important to consider that there can be legitimate DNS queries and usages of Ufile, which are identified as potential false positives in analyzing these events. The level of concern for such detections is categorized as high, underlining the importance and potential severity associated with these activities. \n\nMonitoring for these specific DNS query events will aid in identifying possible malicious activities related to common tactics and techniques used by adversaries, such as \"Exfiltration Over Command and Control Channel\". This aligns with understanding and mitigating threats that leverage DNS queries to domains known for malicious use, thus enhancing the security posture against such malware-related activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious scheduled task creation events. Based on attributes such as paths, commands line flags, etc..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious scheduled task creation events, based on attributes such as paths, commands line flags, etc., you should: Analyze Windows security logs, specifically looking for events with a focus on scheduled tasks. The detection requires that the Advanced Audit Policy setting for Object Access > Audit Other Object Access Events is enabled. This allows for the capture of relevant data.\n\nPay particular attention to event ID 4698, which is indicative of a scheduled task being created. Also, scrutinize the content within the TaskContent field for certain paths and commands that are commonly leveraged by attackers. This includes paths such as `\\AppData\\Local\\Temp\\`, `\\AppData\\Roaming\\`, `\\Users\\Public\\`, `\\WINDOWS\\Temp\\`, `C:\\Temp\\`, `\\Desktop\\`, `\\Downloads\\`, and `\\Temporary Internet`, as well as others that might suggest the task is being set up in locations commonly used for malicious activities.\n\nAdditionally, be on the lookout for commands within the task content that are often used in attacks, including `regsvr32`, `rundll32`, `cmd.exe`, `cmd`, commands that start with `<Arguments>/c `, `<Arguments>/k `, and `<Arguments>/r `, along with `powershell`, `pwsh`, `mshta`, `wscript`, `cscript`, `certutil`, `bitsadmin`, `bash.exe`, `bash `, `scrcons`, `wmic`, `wmic.exe`, `forfiles`, `scriptrunner`, and `hh.exe`. These commands in the context of a scheduled task could indicate an attempt to execute malicious activities on the system.\n\nThis analysis should consider the combined appearance of suspicious paths and commands within the scheduled task configuration as an indicator of compromise or an active attack. Be aware that there might be unknown false positives, and the alert level for these detections is considered high due to the potential impact of the activities involved.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The Advanced Audit Policy setting Object Access > Audit Other Object Access Events has to be configured to allow this detection. We also recommend extracting the Command field from the embedded XML in the event data.'\ndetection:\n    selection_eid:\n        EventID: 4698\n    selection_paths:\n        TaskContent|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Users\\Public\\'\n            - '\\WINDOWS\\Temp\\'\n            - 'C:\\Temp\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Temporary Internet'\n            - 'C:\\ProgramData\\'\n            - 'C:\\Perflogs\\'\n    selection_commands:\n        TaskContent|contains:\n            - 'regsvr32'\n            - 'rundll32'\n            - 'cmd.exe</Command>'\n            - 'cmd</Command>'\n            - '<Arguments>/c '\n            - '<Arguments>/k '\n            - '<Arguments>/r '\n            - 'powershell'\n            - 'pwsh'\n            - 'mshta'\n            - 'wscript'\n            - 'cscript'\n            - 'certutil'\n            - 'bitsadmin'\n            - 'bash.exe'\n            - 'bash '\n            - 'scrcons'\n            - 'wmic '\n            - 'wmic.exe'\n            - 'forfiles'\n            - 'scriptrunner'\n            - 'hh.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The Advanced Audit Policy setting Object Access > Audit Other Object Access Events has to be configured to allow this detection. We also recommend extracting the Command field from the embedded XML in the event data.'\ndetection:\n    selection_eid:\n        EventID: 4698\n    selection_paths:\n        TaskContent|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - '\\AppData\\Roaming\\'\n            - '\\Users\\Public\\'\n            - '\\WINDOWS\\Temp\\'\n            - 'C:\\Temp\\'\n            - '\\Desktop\\'\n            - '\\Downloads\\'\n            - '\\Temporary Internet'\n            - 'C:\\ProgramData\\'\n            - 'C:\\Perflogs\\'\n    selection_commands:\n        TaskContent|contains:\n            - 'regsvr32'\n            - 'rundll32'\n            - 'cmd.exe</Command>'\n            - 'cmd</Command>'\n            - '<Arguments>/c '\n            - '<Arguments>/k '\n            - '<Arguments>/r '\n            - 'powershell'\n            - 'pwsh'\n            - 'mshta'\n            - 'wscript'\n            - 'cscript'\n            - 'certutil'\n            - 'bitsadmin'\n            - 'bash.exe'\n            - 'bash '\n            - 'scrcons'\n            - 'wmic '\n            - 'wmic.exe'\n            - 'forfiles'\n            - 'scriptrunner'\n            - 'hh.exe'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious scheduled task creation events. Based on attributes such as paths, commands line flags, etc.",
      "answer": "In order to detect suspicious scheduled task creation events, based on attributes such as paths, commands line flags, etc., you should: Analyze Windows security logs, specifically looking for events with a focus on scheduled tasks. The detection requires that the Advanced Audit Policy setting for Object Access > Audit Other Object Access Events is enabled. This allows for the capture of relevant data.\n\nPay particular attention to event ID 4698, which is indicative of a scheduled task being created. Also, scrutinize the content within the TaskContent field for certain paths and commands that are commonly leveraged by attackers. This includes paths such as `\\AppData\\Local\\Temp\\`, `\\AppData\\Roaming\\`, `\\Users\\Public\\`, `\\WINDOWS\\Temp\\`, `C:\\Temp\\`, `\\Desktop\\`, `\\Downloads\\`, and `\\Temporary Internet`, as well as others that might suggest the task is being set up in locations commonly used for malicious activities.\n\nAdditionally, be on the lookout for commands within the task content that are often used in attacks, including `regsvr32`, `rundll32`, `cmd.exe`, `cmd`, commands that start with `<Arguments>/c `, `<Arguments>/k `, and `<Arguments>/r `, along with `powershell`, `pwsh`, `mshta`, `wscript`, `cscript`, `certutil`, `bitsadmin`, `bash.exe`, `bash `, `scrcons`, `wmic`, `wmic.exe`, `forfiles`, `scriptrunner`, and `hh.exe`. These commands in the context of a scheduled task could indicate an attempt to execute malicious activities on the system.\n\nThis analysis should consider the combined appearance of suspicious paths and commands within the scheduled task configuration as an indicator of compromise or an active attack. Be aware that there might be unknown false positives, and the alert level for these detections is considered high due to the potential impact of the activities involved."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies when an admission controller is executed in GCP Kubernetes.\nA Kubernetes Admission controller intercepts, and possibly modifies, requests to the Kubernetes API server.\nThe behavior of this admission controller is determined by an admission webhook (MutatingAdmissionWebhook or ValidatingAdmissionWebhook) that the user deploys in the cluster.\nAn adversary can use such webhooks as the MutatingAdmissionWebhook for obtaining persistence in the cluster.\nFor example, attackers can intercept and modify the pod creation operations in the cluster and add their malicious container to every created pod. An adversary can use the webhook ValidatingAdmissionWebhook, which could be used to obtain access credentials.\nAn adversary could use the webhook to intercept the requests to the API server, record secrets, and other sensitive information.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when an admission controller is executed in GCP Kubernetes, you should: Monitor GCP audit logs for specific method names that start with 'admissionregistration.k8s.io.v', contain either '.mutatingwebhookconfigurations.' or '.validatingwebhookconfigurations.', and end with 'create', 'patch', or 'replace'. These method names are associated with Kubernetes Admission Controllers, which play a crucial role in the Kubernetes API request processing pipeline. Admission controllers can intercept, modify, or deny requests to the Kubernetes API, thus controlling the behavior of the cluster. By monitoring for the creation, modification, or replacement of mutating or validating webhook configurations, it's possible to detect potential malicious activity aimed at gaining persistence within the cluster or intercepting sensitive information. This detection focuses on operations within the Google Cloud Platform's Kubernetes service, specifically actions that could indicate an adversary's attempt to deploy a mutating admission webhook for malicious pod alteration or a validating admission webhook to capture access credentials and other sensitive data. Note that legitimate administrative activity may also trigger these detections, so it's important to validate and exempt known good behavior to reduce false positives. The level of concern for such detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name|startswith: 'admissionregistration.k8s.io.v'\n        gcp.audit.method_name|contains:\n            - '.mutatingwebhookconfigurations.'\n            - '.validatingwebhookconfigurations.'\n        gcp.audit.method_name|endswith:\n            - 'create'\n            - 'patch'\n            - 'replace'\n    condition: selection\nfalsepositives:\n    - Google Cloud Kubernetes Admission Controller may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: gcp\n    service: gcp.audit\ndetection:\n    selection:\n        gcp.audit.method_name|startswith: 'admissionregistration.k8s.io.v'\n        gcp.audit.method_name|contains:\n            - '.mutatingwebhookconfigurations.'\n            - '.validatingwebhookconfigurations.'\n        gcp.audit.method_name|endswith:\n            - 'create'\n            - 'patch'\n            - 'replace'\n    condition: selection\nfalsepositives:\n    - Google Cloud Kubernetes Admission Controller may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Identifies when an admission controller is executed in GCP Kubernetes.\nA Kubernetes Admission controller intercepts, and possibly modifies, requests to the Kubernetes API server.\nThe behavior of this admission controller is determined by an admission webhook (MutatingAdmissionWebhook or ValidatingAdmissionWebhook) that the user deploys in the cluster.\nAn adversary can use such webhooks as the MutatingAdmissionWebhook for obtaining persistence in the cluster.\nFor example, attackers can intercept and modify the pod creation operations in the cluster and add their malicious container to every created pod. An adversary can use the webhook ValidatingAdmissionWebhook, which could be used to obtain access credentials.\nAn adversary could use the webhook to intercept the requests to the API server, record secrets, and other sensitive information.\n",
      "answer": "In order to identify when an admission controller is executed in GCP Kubernetes, you should: Monitor GCP audit logs for specific method names that start with 'admissionregistration.k8s.io.v', contain either '.mutatingwebhookconfigurations.' or '.validatingwebhookconfigurations.', and end with 'create', 'patch', or 'replace'. These method names are associated with Kubernetes Admission Controllers, which play a crucial role in the Kubernetes API request processing pipeline. Admission controllers can intercept, modify, or deny requests to the Kubernetes API, thus controlling the behavior of the cluster. By monitoring for the creation, modification, or replacement of mutating or validating webhook configurations, it's possible to detect potential malicious activity aimed at gaining persistence within the cluster or intercepting sensitive information. This detection focuses on operations within the Google Cloud Platform's Kubernetes service, specifically actions that could indicate an adversary's attempt to deploy a mutating admission webhook for malicious pod alteration or a validating admission webhook to capture access credentials and other sensitive data. Note that legitimate administrative activity may also trigger these detections, so it's important to validate and exempt known good behavior to reduce false positives. The level of concern for such detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect findstring commands that include the keyword lsass, which indicates recon activity for the LSASS process PID, you should: monitor process creation events on Windows systems specifically for the execution of 'findstr.exe.' Ensure to check for instances where the 'Image' field ends with '\\findstr.exe' or the 'OriginalFileName' is 'FINDSTR.EXE.' Additionally, examine any command line input for the presence of 'lsass' to capture attempts at querying or manipulating the Local Security Authority Subsystem Service (LSASS) process. Special attention should be given to command lines that include variations such as ' /i lsass.exe', ' /i \"lsass', along with direct 'findstr' commands targeting 'lsass' either as 'findstr lsass', 'findstr.exe lsass', 'findstr \"lsass', or 'findstr.exe \"lsass'. The detection of any such activities should trigger a high-level alert due to the reconnaissance nature targeting the LSASS process, a critical component in Windows authentication mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr_img:\n        - Image|endswith: '\\findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_findstr_cli:\n        CommandLine|contains: 'lsass'\n    selection_special:\n        CommandLine|contains:\n            - ' /i lsass.exe'\n            - ' /i \"lsass'\n            - 'findstr lsass'\n            - 'findstr.exe lsass'\n            - 'findstr \"lsass'\n            - 'findstr.exe \"lsass'\n    condition: all of selection_findstr_* or selection_special\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_findstr_img:\n        - Image|endswith: '\\findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_findstr_cli:\n        CommandLine|contains: 'lsass'\n    selection_special:\n        CommandLine|contains:\n            - ' /i lsass.exe'\n            - ' /i \"lsass'\n            - 'findstr lsass'\n            - 'findstr.exe lsass'\n            - 'findstr \"lsass'\n            - 'findstr.exe \"lsass'\n    condition: all of selection_findstr_* or selection_special\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID",
      "answer": "In order to detect findstring commands that include the keyword lsass, which indicates recon activity for the LSASS process PID, you should: monitor process creation events on Windows systems specifically for the execution of 'findstr.exe.' Ensure to check for instances where the 'Image' field ends with '\\findstr.exe' or the 'OriginalFileName' is 'FINDSTR.EXE.' Additionally, examine any command line input for the presence of 'lsass' to capture attempts at querying or manipulating the Local Security Authority Subsystem Service (LSASS) process. Special attention should be given to command lines that include variations such as ' /i lsass.exe', ' /i \"lsass', along with direct 'findstr' commands targeting 'lsass' either as 'findstr lsass', 'findstr.exe lsass', 'findstr \"lsass', or 'findstr.exe \"lsass'. The detection of any such activities should trigger a high-level alert due to the reconnaissance nature targeting the LSASS process, a critical component in Windows authentication mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including\nCobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads \nthat often undergo minimal changes by attackers due to bad opsec.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to focus on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including Cobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads that often undergo minimal changes by attackers due to bad opsec, you should: monitor Windows PowerShell module logs for specific strings of text that are common to these attack tools. These include '$DoIt', 'harmj0y', 'mattifestation', '_RastaMouse', 'tifkin_', and '0xdeadbeef'. These strings are artifacts that could indicate the use of known malicious PowerShell scripts involved in the execution of these payloads. The detection relies heavily on identifying these strings within the PowerShell module logs. It should be noted that while there may be moderate-to-low false positives, the specificity of these strings to offensive PowerShell operations makes this a critical alert. The analysis and monitoring for these specific strings help in identifying potentially malicious activity associated with well-known attack tools, indicative of bad operational security practices by attackers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains:\n            - '$DoIt'\n            - 'harmj0y'\n            - 'mattifestation'\n            - '_RastaMouse'\n            - 'tifkin_'\n            - '0xdeadbeef'\n    condition: selection_4103\nfalsepositives:\n    - 'Moderate-to-low; Despite the shorter length/lower entropy for some of these, because of high specificity, fp appears to be fairly limited in many environments.'\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|contains:\n            - '$DoIt'\n            - 'harmj0y'\n            - 'mattifestation'\n            - '_RastaMouse'\n            - 'tifkin_'\n            - '0xdeadbeef'\n    condition: selection_4103\nfalsepositives:\n    - 'Moderate-to-low; Despite the shorter length/lower entropy for some of these, because of high specificity, fp appears to be fairly limited in many environments.'\nlevel: critical\n",
      "question": "focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including\nCobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads \nthat often undergo minimal changes by attackers due to bad opsec.\n",
      "answer": "In order to focus on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including Cobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads that often undergo minimal changes by attackers due to bad opsec, you should: monitor Windows PowerShell module logs for specific strings of text that are common to these attack tools. These include '$DoIt', 'harmj0y', 'mattifestation', '_RastaMouse', 'tifkin_', and '0xdeadbeef'. These strings are artifacts that could indicate the use of known malicious PowerShell scripts involved in the execution of these payloads. The detection relies heavily on identifying these strings within the PowerShell module logs. It should be noted that while there may be moderate-to-low false positives, the specificity of these strings to offensive PowerShell operations makes this a critical alert. The analysis and monitoring for these specific strings help in identifying potentially malicious activity associated with well-known attack tools, indicative of bad operational security practices by attackers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant, you should focus on monitoring process creation logs within Windows environments. Specifically, look for processes initiated with command lines containing: \n\n1. '-noni -ep bypass $' which is typically employed to bypass execution policies in PowerShell, indicating a potential attempt to execute unauthorized scripts or commands.\n2. Both 'cyzfc.dat,' and 'PointFunctionCall' within the same command line, suggesting the use of specific obfuscated files or functions commonly associated with APT 29 activities.\n\nThese indicators are critical to identify as they directly align with tactics and techniques associated with sophisticated threat actors like APT 29. Given the nature of these indicators and the context of their use in documented campaigns by APT 29, false positives are considered unlikely. Always prioritize the analysis and investigation of alerts generated based on these conditions due to the severe threat level associated.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains: '-noni -ep bypass $'\n        - CommandLine|contains|all:\n            - 'cyzfc.dat,'\n            - 'PointFunctionCall'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains: '-noni -ep bypass $'\n        - CommandLine|contains|all:\n            - 'cyzfc.dat,'\n            - 'PointFunctionCall'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant",
      "answer": "In order to detect indicators of APT 29 (Cozy Bear) phishing-campaign as reported by mandiant, you should focus on monitoring process creation logs within Windows environments. Specifically, look for processes initiated with command lines containing: \n\n1. '-noni -ep bypass $' which is typically employed to bypass execution policies in PowerShell, indicating a potential attempt to execute unauthorized scripts or commands.\n2. Both 'cyzfc.dat,' and 'PointFunctionCall' within the same command line, suggesting the use of specific obfuscated files or functions commonly associated with APT 29 activities.\n\nThese indicators are critical to identify as they directly align with tactics and techniques associated with sophisticated threat actors like APT 29. Given the nature of these indicators and the context of their use in documented campaigns by APT 29, false positives are considered unlikely. Always prioritize the analysis and investigation of alerts generated based on these conditions due to the severe threat level associated."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.\nWithout knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to prevent adversaries with no prior knowledge of legitimate credentials within the system or environment from guessing passwords in an attempt to access accounts, you should monitor PowerShell scripts for specific signs of malicious activity targeting LDAP (Lightweight Directory Access Protocol) services. Focus on the Windows platform and ensure Script Block Logging is enabled to capture the necessary information. Look for any PowerShell scripts containing references to 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier', 'System.Net.NetworkCredential', or 'System.DirectoryServices.Protocols.LdapConnection'. These references might indicate an attempt to access LDAP services possibly for credential validation or usage in unauthorized manners. Be aware that this detection operates at a low level of alert, suggesting there might be unknown scenarios that trigger false positives. Therefore, while monitoring for these indicators is crucial, each alert should be carefully investigated to differentiate between malicious activities and benign operations involving LDAP queries or connections.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier'\n            - 'System.Net.NetworkCredential'\n            - 'System.DirectoryServices.Protocols.LdapConnection'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier'\n            - 'System.Net.NetworkCredential'\n            - 'System.DirectoryServices.Protocols.LdapConnection'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.\nWithout knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism\n",
      "answer": "In order to prevent adversaries with no prior knowledge of legitimate credentials within the system or environment from guessing passwords in an attempt to access accounts, you should monitor PowerShell scripts for specific signs of malicious activity targeting LDAP (Lightweight Directory Access Protocol) services. Focus on the Windows platform and ensure Script Block Logging is enabled to capture the necessary information. Look for any PowerShell scripts containing references to 'System.DirectoryServices.Protocols.LdapDirectoryIdentifier', 'System.Net.NetworkCredential', or 'System.DirectoryServices.Protocols.LdapConnection'. These references might indicate an attempt to access LDAP services possibly for credential validation or usage in unauthorized manners. Be aware that this detection operates at a low level of alert, suggesting there might be unknown scenarios that trigger false positives. Therefore, while monitoring for these indicators is crucial, each alert should be carefully investigated to differentiate between malicious activities and benign operations involving LDAP queries or connections."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting detects BPFDoor .lock and .pid files access in temporary file storage facility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detects BPFDoor .lock and .pid files access in temporary file storage facility, you should: Focus on monitoring Linux systems, specifically through the auditd service. The detection criteria are centered on the access of specific file paths, namely /var/run/haldrund.pid, /var/run/xinetd.lock, and /var/run/kdevrund.pid. These files are significant because their access might indicate the manipulation or monitoring by BPFDoor, a known malicious activity. This activity typically involves the use of temporary file storage facilities for .lock and .pid files, which are critical in the context of Linux system operations. The detection of any interactions with these specific files\u2014in this context, having the file type 'PATH'\u2014should be treated with high suspicion, as there are few legitimate reasons for such files to be accessed in a normal operational framework. False positives are considered unlikely, emphasizing the importance of closely monitoring and investigating any hits against these criteria. This approach is crucial in identifying potential security breaches or unauthorized activities related to BPFDoor's mechanisms. The tags relevant to this kind of detection would include tactics and techniques like Execution, Persistence, and Privilege Escalation, though they are not explicitly mentioned in the provided information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name:\n            - /var/run/haldrund.pid\n            - /var/run/xinetd.lock\n            - /var/run/kdevrund.pid\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection:\n        type: 'PATH'\n        name:\n            - /var/run/haldrund.pid\n            - /var/run/xinetd.lock\n            - /var/run/kdevrund.pid\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "detects BPFDoor .lock and .pid files access in temporary file storage facility",
      "answer": "In order to detects BPFDoor .lock and .pid files access in temporary file storage facility, you should: Focus on monitoring Linux systems, specifically through the auditd service. The detection criteria are centered on the access of specific file paths, namely /var/run/haldrund.pid, /var/run/xinetd.lock, and /var/run/kdevrund.pid. These files are significant because their access might indicate the manipulation or monitoring by BPFDoor, a known malicious activity. This activity typically involves the use of temporary file storage facilities for .lock and .pid files, which are critical in the context of Linux system operations. The detection of any interactions with these specific files\u2014in this context, having the file type 'PATH'\u2014should be treated with high suspicion, as there are few legitimate reasons for such files to be accessed in a normal operational framework. False positives are considered unlikely, emphasizing the importance of closely monitoring and investigating any hits against these criteria. This approach is crucial in identifying potential security breaches or unauthorized activities related to BPFDoor's mechanisms. The tags relevant to this kind of detection would include tactics and techniques like Execution, Persistence, and Privilege Escalation, though they are not explicitly mentioned in the provided information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious use of XORDump process memory dumping utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious use of XORDump process memory dumping utility, you should: Monitor the creation of processes on Windows systems, particularly looking for any instances where a process ends with '\\xordump.exe'. Additionally, scrutinize the command lines used to initiate processes, especially those containing specific parameters such as ' -process lsass.exe ', ' -m comsvcs ', ' -m dbghelp ', or ' -m dbgcore '. These parameters are indicators of potentially malicious activity related to memory dumping methods that are commonly associated with gaining unauthorized access or executing malign code on the system. It is critical to note, however, that there may be legitimate uses of these command line switches by other tools, which should be considered as possible false positives. The importance of this detection mechanism is rated high due to the severe implications of successful exploitation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\xordump.exe'\n        - CommandLine|contains:\n            - ' -process lsass.exe '\n            - ' -m comsvcs '\n            - ' -m dbghelp '\n            - ' -m dbgcore '\n    condition: selection\nfalsepositives:\n    - Another tool that uses the command line switches of XORdump\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\xordump.exe'\n        - CommandLine|contains:\n            - ' -process lsass.exe '\n            - ' -m comsvcs '\n            - ' -m dbghelp '\n            - ' -m dbgcore '\n    condition: selection\nfalsepositives:\n    - Another tool that uses the command line switches of XORdump\nlevel: high\n",
      "question": "suspicious use of XORDump process memory dumping utility",
      "answer": "In order to detect suspicious use of XORDump process memory dumping utility, you should: Monitor the creation of processes on Windows systems, particularly looking for any instances where a process ends with '\\xordump.exe'. Additionally, scrutinize the command lines used to initiate processes, especially those containing specific parameters such as ' -process lsass.exe ', ' -m comsvcs ', ' -m dbghelp ', or ' -m dbgcore '. These parameters are indicators of potentially malicious activity related to memory dumping methods that are commonly associated with gaining unauthorized access or executing malign code on the system. It is critical to note, however, that there may be legitimate uses of these command line switches by other tools, which should be considered as possible false positives. The importance of this detection mechanism is rated high due to the severe implications of successful exploitation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an attack where the Fax service tries to load a non-existent DLL named ualapi.dll, allowing an attacker to side-load their own malicious DLL using this service, you should monitor Windows image load events.\n\nSpecifically, focus on instances where the process `\\fxssvc.exe`, which is associated with the Windows Fax service, attempts to load a DLL. If the DLL being loaded ends with 'ualapi.dll', it signals a potential malicious activity because 'ualapi.dll' does not exist by default in Windows systems. This anomaly might indicate an attacker's attempt to exploit the Fax service for DLL side-loading.\n\nHowever, to reduce false positives, any loading of DLL files that start with the path 'C:\\Windows\\WinSxS\\' should be excluded from alerts. This path is a legitimate system directory used for storing side-by-side assemblies in Windows and could contain various versions of DLLs needed by the system or legitimate applications.\n\nThis analysis falls under the high importance level due to the potential for malicious actors to exploit the Fax service to achieve persistence, evade defenses, or execute their code with the privileges of the fax service. Monitoring for such behavior is critical in identifying sophisticated adversaries attempting to utilize this technique.\n\nLook for these signs in the logs of Windows image loading events, focusing on filtering out legitimate uses while catching malicious attempts at exploiting the Fax service through DLL side-loading.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\fxssvc.exe'\n        ImageLoaded|endswith: 'ualapi.dll'\n    filter:\n        ImageLoaded|startswith: 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\fxssvc.exe'\n        ImageLoaded|endswith: 'ualapi.dll'\n    filter:\n        ImageLoaded|startswith: 'C:\\Windows\\WinSxS\\'\n    condition: selection and not filter\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "The Fax service attempts to load ualapi.dll, which is non-existent. An attacker can then (side)load their own malicious DLL using this service.",
      "answer": "In order to detect an attack where the Fax service tries to load a non-existent DLL named ualapi.dll, allowing an attacker to side-load their own malicious DLL using this service, you should monitor Windows image load events.\n\nSpecifically, focus on instances where the process `\\fxssvc.exe`, which is associated with the Windows Fax service, attempts to load a DLL. If the DLL being loaded ends with 'ualapi.dll', it signals a potential malicious activity because 'ualapi.dll' does not exist by default in Windows systems. This anomaly might indicate an attacker's attempt to exploit the Fax service for DLL side-loading.\n\nHowever, to reduce false positives, any loading of DLL files that start with the path 'C:\\Windows\\WinSxS\\' should be excluded from alerts. This path is a legitimate system directory used for storing side-by-side assemblies in Windows and could contain various versions of DLLs needed by the system or legitimate applications.\n\nThis analysis falls under the high importance level due to the potential for malicious actors to exploit the Fax service to achieve persistence, evade defenses, or execute their code with the privileges of the fax service. Monitoring for such behavior is critical in identifying sophisticated adversaries attempting to utilize this technique.\n\nLook for these signs in the logs of Windows image loading events, focusing on filtering out legitimate uses while catching malicious attempts at exploiting the Fax service through DLL side-loading."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an attacker create a similar folder structure to windows system folders such as (Windows, Program Files...)\nbut with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an attacker creates a similar folder structure to Windows system folders such as (Windows, Program Files...) but with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack, you should monitor file events on Windows systems, specifically focusing on the creation of .dll files that begin with paths closely resembling 'C:\\Windows \\', 'C:\\Program Files \\', or 'C:\\Program Files (x86) \\' but with an additional space. This approach aims to identify attempts to exploit the DLL search order hijacking technique by placing malicious DLLs in directories that might be searched before the legitimate ones. It's critical to pay high attention to such activities due to their high threat level, although it's acknowledged that determining false positives can be challenging in this context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith:\n            - 'C:\\Windows \\'\n            - 'C:\\Program Files \\'\n            - 'C:\\Program Files (x86) \\'\n        TargetFilename|endswith: '.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith:\n            - 'C:\\Windows \\'\n            - 'C:\\Program Files \\'\n            - 'C:\\Program Files (x86) \\'\n        TargetFilename|endswith: '.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "when an attacker create a similar folder structure to windows system folders such as (Windows, Program Files...)\nbut with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack\n",
      "answer": "In order to detect when an attacker creates a similar folder structure to Windows system folders such as (Windows, Program Files...) but with a space in order to trick DLL load search order and perform a \"DLL Search Order Hijacking\" attack, you should monitor file events on Windows systems, specifically focusing on the creation of .dll files that begin with paths closely resembling 'C:\\Windows \\', 'C:\\Program Files \\', or 'C:\\Program Files (x86) \\' but with an additional space. This approach aims to identify attempts to exploit the DLL search order hijacking technique by placing malicious DLLs in directories that might be searched before the legitimate ones. It's critical to pay high attention to such activities due to their high threat level, although it's acknowledged that determining false positives can be challenging in this context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious LOLBIN AccCheckConsole execution with parameters as used to load an arbitrary DLL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious LOLBIN AccCheckConsole execution with parameters as used to load an arbitrary DLL, you should: focus on monitoring process creation events within Windows environments. Watch for processes that are initiated with an image name ending in '\\AccCheckConsole.exe' or have an original file name of 'AccCheckConsole.exe'. Moreover, pay close attention to the command line arguments, specifically looking for occurrences where both '-window' and a '.dll' file are mentioned together. This particular behavior indicates an attempt to load an arbitrary DLL, which is a common technique used by adversaries to execute malicious code. Be aware that there can be legitimate uses of the UI Accessibility Checker (AccCheckConsole), so it's essential to differentiate between benign and malicious activity. The associated detection strategy carries a high level of importance due to the potential for abuse in executing unauthorized or malicious code on a system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AccCheckConsole.exe'\n        - OriginalFileName: 'AccCheckConsole.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -window '\n            - '.dll'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of the UI Accessibility Checker\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\AccCheckConsole.exe'\n        - OriginalFileName: 'AccCheckConsole.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' -window '\n            - '.dll'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate use of the UI Accessibility Checker\nlevel: high\n",
      "question": "suspicious LOLBIN AccCheckConsole execution with parameters as used to load an arbitrary DLL",
      "answer": "In order to detect suspicious LOLBIN AccCheckConsole execution with parameters as used to load an arbitrary DLL, you should: focus on monitoring process creation events within Windows environments. Watch for processes that are initiated with an image name ending in '\\AccCheckConsole.exe' or have an original file name of 'AccCheckConsole.exe'. Moreover, pay close attention to the command line arguments, specifically looking for occurrences where both '-window' and a '.dll' file are mentioned together. This particular behavior indicates an attempt to load an arbitrary DLL, which is a common technique used by adversaries to execute malicious code. Be aware that there can be legitimate uses of the UI Accessibility Checker (AccCheckConsole), so it's essential to differentiate between benign and malicious activity. The associated detection strategy carries a high level of importance due to the potential for abuse in executing unauthorized or malicious code on a system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting command used by conti to dump database.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a command used by conti to dump database, you should monitor process creation events on Windows systems for the execution of sqlcmd.exe or any command-line interaction that includes 'sqlcmd' or 'sqlcmd.exe'. Specifically, look for command lines that attempt to connect to the localhost using the switch '-S localhost' which indicates an attempt to access the local server. Additionally, be vigilant for queries that target system processes, databases, or actions such as 'sys.sysprocesses', 'master.dbo.sysdatabases', and 'BACKUP DATABASE', which are indicative of attempts to interact with, gather information from, or backup databases respectively. This activity should be regarded with a high level of suspicion due to its potential association with malicious database dumping activities, often utilized in attacks aimed at data theft or sabotage.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools:\n        - Image|endswith: '\\sqlcmd.exe'\n        - CommandLine|contains:\n            - 'sqlcmd '\n            - 'sqlcmd.exe'\n    selection_svr:\n        CommandLine|contains: ' -S localhost '\n    selection_query:\n        CommandLine|contains:\n            - 'sys.sysprocesses'\n            - 'master.dbo.sysdatabases'\n            - 'BACKUP DATABASE'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools:\n        - Image|endswith: '\\sqlcmd.exe'\n        - CommandLine|contains:\n            - 'sqlcmd '\n            - 'sqlcmd.exe'\n    selection_svr:\n        CommandLine|contains: ' -S localhost '\n    selection_query:\n        CommandLine|contains:\n            - 'sys.sysprocesses'\n            - 'master.dbo.sysdatabases'\n            - 'BACKUP DATABASE'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "command used by conti to dump database",
      "answer": "In order to detect a command used by conti to dump database, you should monitor process creation events on Windows systems for the execution of sqlcmd.exe or any command-line interaction that includes 'sqlcmd' or 'sqlcmd.exe'. Specifically, look for command lines that attempt to connect to the localhost using the switch '-S localhost' which indicates an attempt to access the local server. Additionally, be vigilant for queries that target system processes, databases, or actions such as 'sys.sysprocesses', 'master.dbo.sysdatabases', and 'BACKUP DATABASE', which are indicative of attempts to interact with, gather information from, or backup databases respectively. This activity should be regarded with a high level of suspicion due to its potential association with malicious database dumping activities, often utilized in attacks aimed at data theft or sabotage."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The FSharp Interpreters, FsiAnyCpu.exe and FSi.exe, can be used for AWL bypass and is listed in Microsoft recommended block rules..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the utilization of FSharp Interpreters (FsiAnyCpu.exe and FSi.exe) for AWL (Application Allowlisting) bypass, which is highlighted in Microsoft's recommended block rules, you should monitor for the creation of processes on Windows systems that are linked to these interpreters. This involves looking for instances where either 'fsianycpu.exe' or 'fsi.exe' are executed, indicated by the end portion of the process image path or the original file name used during process creation. Regarding considerations to avoid false positives, it's important to note that the legitimate use of these interpreters by software developers can occur; therefore, such instances should be carefully assessed. The severity level associated with detecting this activity is classified as medium, emphasizing the necessity for attention while also considering possible legitimate use cases. This strategy is aimed at identifying potential misuse of these interpreters which could circumvent application allowlisting defenses, a tactic attackers might use to execute unauthorized code on a system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\fsianycpu.exe'\n        - OriginalFileName: 'fsianycpu.exe'\n        - Image|endswith: '\\fsi.exe'\n        - OriginalFileName: 'fsi.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\fsianycpu.exe'\n        - OriginalFileName: 'fsianycpu.exe'\n        - Image|endswith: '\\fsi.exe'\n        - OriginalFileName: 'fsi.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use by a software developer.\nlevel: medium\n",
      "question": "The FSharp Interpreters, FsiAnyCpu.exe and FSi.exe, can be used for AWL bypass and is listed in Microsoft recommended block rules.",
      "answer": "In order to detect the utilization of FSharp Interpreters (FsiAnyCpu.exe and FSi.exe) for AWL (Application Allowlisting) bypass, which is highlighted in Microsoft's recommended block rules, you should monitor for the creation of processes on Windows systems that are linked to these interpreters. This involves looking for instances where either 'fsianycpu.exe' or 'fsi.exe' are executed, indicated by the end portion of the process image path or the original file name used during process creation. Regarding considerations to avoid false positives, it's important to note that the legitimate use of these interpreters by software developers can occur; therefore, such instances should be carefully assessed. The severity level associated with detecting this activity is classified as medium, emphasizing the necessity for attention while also considering possible legitimate use cases. This strategy is aimed at identifying potential misuse of these interpreters which could circumvent application allowlisting defenses, a tactic attackers might use to execute unauthorized code on a system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\'\n        TargetObject|endswith:\n            - '\\Internet'\n            - '\\LocalIntranet'\n            - '\\MyComputer'\n            - '\\TrustedSites'\n            - '\\UntrustedSites'\n        Details: 'Enabled'\n    condition: selection\nfalsepositives:\n    - Legitimate internal requirements.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\'\n        TargetObject|endswith:\n            - '\\Internet'\n            - '\\LocalIntranet'\n            - '\\MyComputer'\n            - '\\TrustedSites'\n            - '\\UntrustedSites'\n        Details: 'Enabled'\n    condition: selection\nfalsepositives:\n    - Legitimate internal requirements.\nlevel: medium\n",
      "question": "changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
      "answer": "In order to detect changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet, you should monitor Windows Registry settings specifically for \"SetValue\" events. Focus on changes made under the `\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\` path with particular attention to any modifications ending with '\\Internet', '\\LocalIntranet', '\\MyComputer', '\\TrustedSites', or '\\UntrustedSites'. The critical detail to look for is the 'Enabled' status in these registry settings. These changes might signal an attempt to lower security measures and facilitate installations from less secure or trusted locations. However, be aware that some legitimate internal requirements might necessitate such modifications, leading to possible false positives. The severity of this detection is considered medium, emphasizing its importance without suggesting it signals an immediate and critical threat. Understanding these modifications can play a crucial role in identifying potential security risks associated with the weakening of ClickOnce trust prompts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell scripts to set the ACL to a file in the Windows folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell scripts to set the ACL to a file in the Windows folder, you should look for process creation events in Windows operating systems that include the execution of PowerShell executables or libraries. Specifically, monitor for processes with original file names `PowerShell.EXE` or `pwsh.dll`, as well as those where the image name ends with `\\powershell.exe` or `\\pwsh.exe`.\n\nAdditionally, focus on command lines that contain specific patterns indicating attempts to modify Access Control Lists (ACLs). These patterns include the presence of commands like `Set-Acl`, along with the parameter `-AclObject`. To further refine the detection, check for command lines attempting to modify paths within the Windows directory. This can be indicated by any of the following patterns: `-Path \"C:\\Windows`, `-Path 'C:\\\\Windows`, `-Path %windir%`, or `-Path $env:windir`.\n\nBeyond path modifications, it's crucial to also monitor for command lines that specify permissions adjustments, especially those mentioning `FullControl` or `Allow`, as these indicate attempts to change permissions to allow full control over system files.\n\nWhile implementing this detection strategy, be aware that there could be legitimate uses of these commands and pathways. Therefore, each detection should be carefully investigated to determine its context and intent. The level of risk associated with these detections is considered high due to the potential for significant security implications if PowerShell is used maliciously to alter ACLs in sensitive Windows directories.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    selection_cmdlet:\n        CommandLine|contains|all:\n            - 'Set-Acl '\n            - '-AclObject '\n    selection_paths:\n        # Note: Add more suspicious paths\n        CommandLine|contains:\n            - '-Path \"C:\\Windows'\n            - \"-Path 'C:\\\\Windows\"\n            - '-Path %windir%'\n            - '-Path $env:windir'\n    selection_permissions:\n        # Note: Add more suspicious permissions\n        CommandLine|contains:\n            - 'FullControl'\n            - 'Allow'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n    selection_cmdlet:\n        CommandLine|contains|all:\n            - 'Set-Acl '\n            - '-AclObject '\n    selection_paths:\n        # Note: Add more suspicious paths\n        CommandLine|contains:\n            - '-Path \"C:\\Windows'\n            - \"-Path 'C:\\\\Windows\"\n            - '-Path %windir%'\n            - '-Path $env:windir'\n    selection_permissions:\n        # Note: Add more suspicious permissions\n        CommandLine|contains:\n            - 'FullControl'\n            - 'Allow'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "PowerShell scripts to set the ACL to a file in the Windows folder",
      "answer": "In order to detect PowerShell scripts to set the ACL to a file in the Windows folder, you should look for process creation events in Windows operating systems that include the execution of PowerShell executables or libraries. Specifically, monitor for processes with original file names `PowerShell.EXE` or `pwsh.dll`, as well as those where the image name ends with `\\powershell.exe` or `\\pwsh.exe`.\n\nAdditionally, focus on command lines that contain specific patterns indicating attempts to modify Access Control Lists (ACLs). These patterns include the presence of commands like `Set-Acl`, along with the parameter `-AclObject`. To further refine the detection, check for command lines attempting to modify paths within the Windows directory. This can be indicated by any of the following patterns: `-Path \"C:\\Windows`, `-Path 'C:\\\\Windows`, `-Path %windir%`, or `-Path $env:windir`.\n\nBeyond path modifications, it's crucial to also monitor for command lines that specify permissions adjustments, especially those mentioning `FullControl` or `Allow`, as these indicate attempts to change permissions to allow full control over system files.\n\nWhile implementing this detection strategy, be aware that there could be legitimate uses of these commands and pathways. Therefore, each detection should be carefully investigated to determine its context and intent. The level of risk associated with these detections is considered high due to the potential for significant security implications if PowerShell is used maliciously to alter ACLs in sensitive Windows directories."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting well-known credential dumping tools execution via specific named pipes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect well-known credential dumping tools execution via specific named pipes, you should monitor Windows named pipe creation events. Specifically, look for the creation of named pipes that contain the strings '\\lsadump', '\\cachedump', or '\\wceservicepipe'. These particular named pipe names are commonly associated with credential dumping activities, which are tactics employed to retrieve authentication credentials from Windows systems. Monitoring for these events requires configuring logging for Named Pipe Events in Sysmon, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected). It's essential to ensure that your Sysmon configuration is set to log these types of events, which is a configuration that can be found in popular Sysmon configurations available online. However, organizations should verify that their current configuration supports this level of monitoring.\n\nThe detection of such activities is critical as it directly relates to the tactics and techniques of Credential Access through Credential Dumping. Be aware that there could be legitimate uses of tools that interact with named pipes in this manner, such as administrators using tools for password recovery. These instances are considered false positives in the context of this monitoring strategy. Given the critical level of this rule, it's important to investigate and differentiate between malicious activities and legitimate administrative actions to avoid unnecessary alarm.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|contains:\n            - '\\lsadump'\n            - '\\cachedump'\n            - '\\wceservicepipe'\n    condition: selection\nfalsepositives:\n    - Legitimate Administrator using tool for password recovery\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|contains:\n            - '\\lsadump'\n            - '\\cachedump'\n            - '\\wceservicepipe'\n    condition: selection\nfalsepositives:\n    - Legitimate Administrator using tool for password recovery\nlevel: critical\n",
      "question": "well-known credential dumping tools execution via specific named pipes",
      "answer": "In order to detect well-known credential dumping tools execution via specific named pipes, you should monitor Windows named pipe creation events. Specifically, look for the creation of named pipes that contain the strings '\\lsadump', '\\cachedump', or '\\wceservicepipe'. These particular named pipe names are commonly associated with credential dumping activities, which are tactics employed to retrieve authentication credentials from Windows systems. Monitoring for these events requires configuring logging for Named Pipe Events in Sysmon, specifically Event ID 17 (Pipe Created) and Event ID 18 (Pipe Connected). It's essential to ensure that your Sysmon configuration is set to log these types of events, which is a configuration that can be found in popular Sysmon configurations available online. However, organizations should verify that their current configuration supports this level of monitoring.\n\nThe detection of such activities is critical as it directly relates to the tactics and techniques of Credential Access through Credential Dumping. Be aware that there could be legitimate uses of tools that interact with named pipes in this manner, such as administrators using tools for password recovery. These instances are considered false positives in the context of this monitoring strategy. Given the critical level of this rule, it's important to investigate and differentiate between malicious activities and legitimate administrative actions to avoid unnecessary alarm."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an end user consents to an application.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an end user consents to an application, you should monitor Azure audit logs for entries indicating that an end user has consented to an application without administrator approval. This is identified by checking if the \"ConsentContext.IsAdminConsent\" field is set to 'false', which implies that the consent was given by an end user rather than by an administrator. This kind of activity can be indicative of applications trying to gain permissions without going through proper administrative approval channels. It's important to note, however, that this detection can sometimes yield false positives where legitimate user consent to applications is flagged, and it is assessed as a low-level threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        ConsentContext.IsAdminConsent: 'false'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: auditlogs\ndetection:\n    selection:\n        ConsentContext.IsAdminConsent: 'false'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "when an end user consents to an application",
      "answer": "In order to detect when an end user consents to an application, you should monitor Azure audit logs for entries indicating that an end user has consented to an application without administrator approval. This is identified by checking if the \"ConsentContext.IsAdminConsent\" field is set to 'false', which implies that the consent was given by an end user rather than by an administrator. This kind of activity can be indicative of applications trying to gain permissions without going through proper administrative approval channels. It's important to note, however, that this detection can sometimes yield false positives where legitimate user consent to applications is flagged, and it is assessed as a low-level threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file, you should: monitor process creation logs in Windows for instances where the command line execution includes both the use of 'diantz.exe' and the '.cab' file extension together. Furthermore, it's crucial to watch for command lines matching a regular expression pattern that indicates the use of a colon followed by any character except a backslash, which is a typical method for specifying Alternate Data Streams (ADS) in Windows file systems. Be advised that there's a substantial chance of encountering false positives with this detection strategy, and the risk level associated with this activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - .cab\n        CommandLine|re: ':[^\\\\]'\n    condition: selection\nfalsepositives:\n    - Very Possible\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - diantz.exe\n            - .cab\n        CommandLine|re: ':[^\\\\]'\n    condition: selection\nfalsepositives:\n    - Very Possible\nlevel: medium\n",
      "question": "Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file.",
      "answer": "In order to compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file, you should: monitor process creation logs in Windows for instances where the command line execution includes both the use of 'diantz.exe' and the '.cab' file extension together. Furthermore, it's crucial to watch for command lines matching a regular expression pattern that indicates the use of a colon followed by any character except a backslash, which is a typical method for specifying Alternate Data Streams (ADS) in Windows file systems. Be advised that there's a substantial chance of encountering false positives with this detection strategy, and the risk level associated with this activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Microsoft Cloud App Security reported for users whose account were terminated in Azure AD, but still perform activities in other platforms such as AWS or Salesforce.\nThis is especially relevant for users who use another account to manage resources, since these accounts are often not terminated when a user leaves the company.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Microsoft Cloud App Security reported for users whose account were terminated in Azure AD, but still perform activities in other platforms such as AWS or Salesforce, you should: Monitor the Threat Management logs within Microsoft 365 services for specific events. Look for logs coming from the Security Compliance Center, focusing on events named \"Activity performed by terminated user\" with a status marked as successful. This entails scrutinizing activities undertaken by users who, despite having their accounts terminated in Azure AD, continue to carry out actions in other platforms, possibly using different accounts. These situations are particularly significant for accounts used to manage resources on platforms like AWS or Salesforce, which may not be deactivated alongside the user's primary account upon their departure from the company. This monitoring is pivotal in identifying potential security breaches or misconfigurations that allow terminated users to retain access. Be aware that there might be unknown scenarios causing false positives; hence, each alert should be thoroughly investigated. This process is classified at a medium level of importance due to the balance between the necessity of detection and the likelihood of false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Activity performed by terminated user'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Activity performed by terminated user'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Microsoft Cloud App Security reported for users whose account were terminated in Azure AD, but still perform activities in other platforms such as AWS or Salesforce.\nThis is especially relevant for users who use another account to manage resources, since these accounts are often not terminated when a user leaves the company.\n",
      "answer": "In order to detect when a Microsoft Cloud App Security reported for users whose account were terminated in Azure AD, but still perform activities in other platforms such as AWS or Salesforce, you should: Monitor the Threat Management logs within Microsoft 365 services for specific events. Look for logs coming from the Security Compliance Center, focusing on events named \"Activity performed by terminated user\" with a status marked as successful. This entails scrutinizing activities undertaken by users who, despite having their accounts terminated in Azure AD, continue to carry out actions in other platforms, possibly using different accounts. These situations are particularly significant for accounts used to manage resources on platforms like AWS or Salesforce, which may not be deactivated alongside the user's primary account upon their departure from the company. This monitoring is pivotal in identifying potential security breaches or misconfigurations that allow terminated users to retain access. Be aware that there might be unknown scenarios causing false positives; hence, each alert should be thoroughly investigated. This process is classified at a medium level of importance due to the balance between the necessity of detection and the likelihood of false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the builtin \"del\"/\"erase\" commands in order to delete files.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the builtin \"del\"/\"erase\" commands in order to delete files since adversaries may delete files left behind by the actions of their intrusion activity, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the initiation of the command prompt executable 'cmd.exe', identified either through the image path ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Once command prompt activity is identified, further inspect if any command lines include the use of 'del ' or 'erase ' commands which are known to delete files. Additionally, pay special attention to command lines that contain flags like ' /f' indicating the forced deletion of read-only files, ' /s' for the deletion of specified files from all subdirectories, and ' /q' for quiet mode operation where no confirmation is asked when deleting files globally. This form of monitoring helps in identifying the malicious deletion of files which could be part of an adversary's efforts to minimize their footprint and hide their activities following an intrusion. Be aware, however, that the level of false positives can vary, and it might be necessary to further refine detection by considering additional context such as the parent image of the process or specific command line patterns deemed legitimate within your environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_flags:\n        CommandLine|contains:\n            - ' /f' # Force deleting of read-only files.\n            - ' /s' # Delete specified files from all subdirectories.\n            - ' /q' # Quiet mode, do not ask if ok to delete on global wildcard\n    condition: all of selection_*\nfalsepositives:\n    - False positives levels will differ Depending on the environment. You can use a combination of ParentImage and other keywords from the CommandLine field to filter legitimate activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_del:\n        CommandLine|contains:\n            - 'del '\n            - 'erase '\n    selection_flags:\n        CommandLine|contains:\n            - ' /f' # Force deleting of read-only files.\n            - ' /s' # Delete specified files from all subdirectories.\n            - ' /q' # Quiet mode, do not ask if ok to delete on global wildcard\n    condition: all of selection_*\nfalsepositives:\n    - False positives levels will differ Depending on the environment. You can use a combination of ParentImage and other keywords from the CommandLine field to filter legitimate activity\nlevel: low\n",
      "question": "execution of the builtin \"del\"/\"erase\" commands in order to delete files.\nAdversaries may delete files left behind by the actions of their intrusion activity.\nMalware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.\nRemoval of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n",
      "answer": "In order to detect execution of the builtin \"del\"/\"erase\" commands in order to delete files since adversaries may delete files left behind by the actions of their intrusion activity, you should: Focus on monitoring the creation of processes on Windows systems. Specifically, watch for the initiation of the command prompt executable 'cmd.exe', identified either through the image path ending with '\\cmd.exe' or the original file name being 'Cmd.Exe'. Once command prompt activity is identified, further inspect if any command lines include the use of 'del ' or 'erase ' commands which are known to delete files. Additionally, pay special attention to command lines that contain flags like ' /f' indicating the forced deletion of read-only files, ' /s' for the deletion of specified files from all subdirectories, and ' /q' for quiet mode operation where no confirmation is asked when deleting files globally. This form of monitoring helps in identifying the malicious deletion of files which could be part of an adversary's efforts to minimize their footprint and hide their activities following an intrusion. Be aware, however, that the level of false positives can vary, and it might be necessary to further refine detection by considering additional context such as the parent image of the process or specific command line patterns deemed legitimate within your environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential suspicious applet or osascript executing \"osacompile\"..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential suspicious applet or osascript executing \"osacompile\", you should: Monitor the creation of processes on macOS systems for occurrences where the parent process is either an applet or osascript, indicated by their paths ending with '/applet' or '/osascript'. Additionally, you should look for the command line invoking 'osacompile'. This detection points to a potential misuse or exploitation attempt, as 'osacompile' may be used maliciously to compile AppleScripts into executable binaries, which could be a part of an attack workflow. Given the medium level of this rule, while there might be unknown false positives, it is critical to investigate instances meeting these criteria to identify possible security incidents.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '/applet'\n            - '/osascript'\n        CommandLine|contains: 'osacompile'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '/applet'\n            - '/osascript'\n        CommandLine|contains: 'osacompile'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential suspicious applet or osascript executing \"osacompile\".",
      "answer": "In order to detect potential suspicious applet or osascript executing \"osacompile\", you should: Monitor the creation of processes on macOS systems for occurrences where the parent process is either an applet or osascript, indicated by their paths ending with '/applet' or '/osascript'. Additionally, you should look for the command line invoking 'osacompile'. This detection points to a potential misuse or exploitation attempt, as 'osacompile' may be used maliciously to compile AppleScripts into executable binaries, which could be a part of an attack workflow. Given the medium level of this rule, while there might be unknown false positives, it is critical to investigate instances meeting these criteria to identify possible security incidents."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of psexec or paexec with renamed service name, helping to filter out the noise if psexec is used for legitimate purposes or if an attacker uses a different psexec client other than the sysinternal one, you should: Monitor Windows security logs for events with ID 5145, which are related to the advanced audit policy setting \"Object Access > Audit Detailed File Share\", configured for both Success and Failure. Specifically, look for events where the ShareName includes '\\\\*\\IPC$', a common indicator of psexec or paexec usage. Additionally, pay attention to the RelativeTargetName field for entries ending with '-stdin', '-stdout', or '-stderr', as these are often associated with the execution of remote commands or scripts via these tools. However, to reduce false positives and filter out legitimate use cases of psexec by system administrators, exclude any events where the RelativeTargetName starts with 'PSEXESVC'. This approach helps in identifying misuse of administrative tools and potential lateral movement or remote execution efforts by attackers, without overly focusing on legitimate administrative activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|endswith:\n            - '-stdin'\n            - '-stdout'\n            - '-stderr'\n    filter:\n        RelativeTargetName|startswith: 'PSEXESVC'\n    condition: selection1 and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure'\ndetection:\n    selection1:\n        EventID: 5145\n        ShareName: '\\\\\\\\\\*\\\\IPC$' # looking for the string \\\\*\\IPC$\n        RelativeTargetName|endswith:\n            - '-stdin'\n            - '-stdout'\n            - '-stderr'\n    filter:\n        RelativeTargetName|startswith: 'PSEXESVC'\n    condition: selection1 and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
      "answer": "In order to detect execution of psexec or paexec with renamed service name, helping to filter out the noise if psexec is used for legitimate purposes or if an attacker uses a different psexec client other than the sysinternal one, you should: Monitor Windows security logs for events with ID 5145, which are related to the advanced audit policy setting \"Object Access > Audit Detailed File Share\", configured for both Success and Failure. Specifically, look for events where the ShareName includes '\\\\*\\IPC$', a common indicator of psexec or paexec usage. Additionally, pay attention to the RelativeTargetName field for entries ending with '-stdin', '-stdout', or '-stderr', as these are often associated with the execution of remote commands or scripts via these tools. However, to reduce false positives and filter out legitimate use cases of psexec by system administrators, exclude any events where the RelativeTargetName starts with 'PSEXESVC'. This approach helps in identifying misuse of administrative tools and potential lateral movement or remote execution efforts by attackers, without overly focusing on legitimate administrative activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting activity when The Windows Defender Firewall service failed to load Group Policy.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activity when The Windows Defender Firewall service failed to load Group Policy, you should: Monitor Windows firewall logs for instances where the EventID 2009 is triggered. This event ID indicates a failure in loading the Group Policy for the Windows Defender Firewall service. By keeping track of such events, it's possible to identify issues with firewall configurations which might be indicative of a security concern or an attack trying to circumvent the firewall settings. The detection of this event is classified with a low level of severity, suggesting that while it is not immediately alarming, it is still noteworthy for maintaining firewall integrity and security posture.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: firewall-as\ndetection:\n    selection:\n        EventID: 2009 # The Windows Defender Firewall service failed to load Group Policy\n    condition: selection\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: firewall-as\ndetection:\n    selection:\n        EventID: 2009 # The Windows Defender Firewall service failed to load Group Policy\n    condition: selection\nlevel: low\n",
      "question": "activity when The Windows Defender Firewall service failed to load Group Policy",
      "answer": "In order to detect activity when The Windows Defender Firewall service failed to load Group Policy, you should: Monitor Windows firewall logs for instances where the EventID 2009 is triggered. This event ID indicates a failure in loading the Group Policy for the Windows Defender Firewall service. By keeping track of such events, it's possible to identify issues with firewall configurations which might be indicative of a security concern or an attack trying to circumvent the firewall settings. The detection of this event is classified with a low level of severity, suggesting that while it is not immediately alarming, it is still noteworthy for maintaining firewall integrity and security posture."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting default \"UserName\" used by the DiagTrackEoP POC.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the default \"UserName\" used by the DiagTrackEoP POC, you should monitor the security logs on Windows systems for specific activity patterns that match an attacker exploiting this point of compromise. Focus on scrutinizing events with the EventID 4624, which represents successful account logon events. Specifically, look for instances where the LogonType is set to 9, indicating a NewCredentials logon type, such as those used by runas with /netonly or by a Scheduled Task. An especially critical flag for this detection is the use of the TargetOutboundUserName set to 'thisisnotvaliduser'. This username is a distinct indicator of suspicious activity related to the DiagTrackEoP proof of concept (POC) attack. Given the nature of this detection, false positives are considered unlikely, and such events should be treated with a high level of scrutiny as they can indicate critical security breaches aligned with tactics and techniques observed in sophisticated cyber attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 9\n        TargetOutboundUserName: 'thisisnotvaliduser'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4624\n        LogonType: 9\n        TargetOutboundUserName: 'thisisnotvaliduser'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "default \"UserName\" used by the DiagTrackEoP POC",
      "answer": "In order to detect the default \"UserName\" used by the DiagTrackEoP POC, you should monitor the security logs on Windows systems for specific activity patterns that match an attacker exploiting this point of compromise. Focus on scrutinizing events with the EventID 4624, which represents successful account logon events. Specifically, look for instances where the LogonType is set to 9, indicating a NewCredentials logon type, such as those used by runas with /netonly or by a Scheduled Task. An especially critical flag for this detection is the use of the TargetOutboundUserName set to 'thisisnotvaliduser'. This username is a distinct indicator of suspicious activity related to the DiagTrackEoP proof of concept (POC) attack. Given the nature of this detection, false positives are considered unlikely, and such events should be treated with a high level of scrutiny as they can indicate critical security breaches aligned with tactics and techniques observed in sophisticated cyber attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process access to LSASS memory with suspicious access flags.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process access to LSASS memory with suspicious access flags, you should monitor Windows processes based on process access attempts that may be indicative of an attack. Specifically, focus on processes attempting to access 'lsass.exe', a critical Windows process associated with local security and authentication. Pay attention to attempts with granted access levels ending in '30', '50', '70', '90', 'B0', 'D0', 'F0', '18', '38', '58', '78', '98', 'B8', 'D8', 'F8', '1A', '3A', '5A', '7A', '9A', 'BA', 'DA', 'FA', and specifically '0x14C2'. These levels of access could indicate malicious intent such as credential dumping.\n\nHowever, it's crucial to exclude legitimate software from triggering false alarms by considering the source of the process access request. Exclude known paths related to common legitimate applications such as Task Manager, Malwarebytes, certain built-in Windows utilities, Cisco AnyConnect, Microsoft's Windows Defender, VMware Tools, and others specified in the rule. Additionally, consider excluding Antivirus or EDR agents specific paths, which might otherwise generate false positives.\n\nFocus especially on detecting malicious activities that haven't been excluded by the filters, as this maintains a balance between security monitoring and operational functionality, minimizing the disruption caused by false positive alerts. This approach covers a substantial portion of the methods attackers might use to access sensitive LSASS memory content, aiming to exploit it for credentials theft while reducing the noise from legitimate security and system management tools.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            # - '10'  # covered in rule 678dfc63-fefb-47a5-a04c-26bcf8cc9f65\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n    # Absolute paths to programs that cause false positives\n    filter_absolute:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\taskmgr.exe'\n            - 'C:\\Program Files\\Malwarebytes\\Anti-Malware\\MBAMService.exe'\n            - 'C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe'\n            - 'C:\\WINDOWS\\system32\\taskhostw.exe'\n            - 'C:\\Program Files\\Windows Defender\\MsMpEng.exe'\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\System32\\lsass.exe'\n            - 'C:\\WINDOWS\\System32\\perfmon.exe'\n            - 'C:\\Windows\\System32\\MRT.exe'\n            - 'C:\\Program Files\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n            - 'C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n    # VSCode\n    filter_vscode:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: '\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe'\n    # Windows Defender\n    filter_windefend_1:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    filter_windefend_2:\n        CallTrace|contains|all:\n            - '|C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{'\n            - '}\\mpengine.dll+'\n        GrantedAccess: '0x1418'\n    filter_windefend_3:\n        # Trigger Win7\n        SourceImage: 'C:\\Program Files\\Microsoft Security Client\\MsMpEng.exe'\n        GrantedAccess: '0x1418'\n    # VMware Tools\n    filter_vmwaretools:\n        SourceImage|startswith: 'C:\\ProgramData\\VMware\\VMware Tools\\'\n        SourceImage|endswith: '\\vmtoolsd.exe'\n    # Antivirus and EDR agents\n    filter_generic_av:\n        # When using this rule. Remove this filter and replace it by the path of the specific AV you use\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        SourceImage|contains: 'Antivirus'\n    filter_mrt:\n        SourceImage: 'C:\\WINDOWS\\system32\\MRT.exe'\n        GrantedAccess: '0x1418'\n    filter_mcafee:\n        SourceImage: 'C:\\Program Files\\Common Files\\McAfee\\MMSSHost\\MMSSHOST.exe'\n    filter_nextron:\n        # Remove this if you don't use Nextron Products\n        SourceImage|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n        GrantedAccess: '0x1fffff'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate software such as AV and EDR\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|endswith:\n            # - '10'  # covered in rule 678dfc63-fefb-47a5-a04c-26bcf8cc9f65\n            - '30'\n            - '50'\n            - '70'\n            - '90'\n            - 'B0'\n            - 'D0'\n            - 'F0'\n            - '18'\n            - '38'\n            - '58'\n            - '78'\n            - '98'\n            - 'B8'\n            - 'D8'\n            - 'F8'\n            - '1A'\n            - '3A'\n            - '5A'\n            - '7A'\n            - '9A'\n            - 'BA'\n            - 'DA'\n            - 'FA'\n            - '0x14C2'  # https://github.com/b4rtik/ATPMiniDump/blob/76304f93b390af3bb66e4f451ca16562a479bdc9/ATPMiniDump/ATPMiniDump.c\n    # Absolute paths to programs that cause false positives\n    filter_absolute:\n        SourceImage:\n            - 'C:\\WINDOWS\\system32\\taskmgr.exe'\n            - 'C:\\Program Files\\Malwarebytes\\Anti-Malware\\MBAMService.exe'\n            - 'C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe'\n            - 'C:\\WINDOWS\\system32\\taskhostw.exe'\n            - 'C:\\Program Files\\Windows Defender\\MsMpEng.exe'\n            - 'C:\\Windows\\SysWOW64\\msiexec.exe'\n            - 'C:\\Windows\\System32\\msiexec.exe'\n            - 'C:\\Windows\\System32\\lsass.exe'\n            - 'C:\\WINDOWS\\System32\\perfmon.exe'\n            - 'C:\\Windows\\System32\\MRT.exe'\n            - 'C:\\Program Files\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n            - 'C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe'\n    # VSCode\n    filter_vscode:\n        SourceImage|startswith: 'C:\\Users\\'\n        SourceImage|endswith: '\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe'\n    # Windows Defender\n    filter_windefend_1:\n        SourceImage|startswith: 'C:\\ProgramData\\Microsoft\\Windows Defender\\'\n        SourceImage|endswith: '\\MsMpEng.exe'\n    filter_windefend_2:\n        CallTrace|contains|all:\n            - '|C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{'\n            - '}\\mpengine.dll+'\n        GrantedAccess: '0x1418'\n    filter_windefend_3:\n        # Trigger Win7\n        SourceImage: 'C:\\Program Files\\Microsoft Security Client\\MsMpEng.exe'\n        GrantedAccess: '0x1418'\n    # VMware Tools\n    filter_vmwaretools:\n        SourceImage|startswith: 'C:\\ProgramData\\VMware\\VMware Tools\\'\n        SourceImage|endswith: '\\vmtoolsd.exe'\n    # Antivirus and EDR agents\n    filter_generic_av:\n        # When using this rule. Remove this filter and replace it by the path of the specific AV you use\n        SourceImage|startswith:\n            - 'C:\\Program Files\\'\n            - 'C:\\Program Files (x86)\\'\n        SourceImage|contains: 'Antivirus'\n    filter_mrt:\n        SourceImage: 'C:\\WINDOWS\\system32\\MRT.exe'\n        GrantedAccess: '0x1418'\n    filter_mcafee:\n        SourceImage: 'C:\\Program Files\\Common Files\\McAfee\\MMSSHost\\MMSSHOST.exe'\n    filter_nextron:\n        # Remove this if you don't use Nextron Products\n        SourceImage|startswith: 'C:\\Windows\\Temp\\asgard2-agent\\'\n        SourceImage|endswith:\n            - '\\thor64.exe'\n            - '\\thor.exe'\n        GrantedAccess: '0x1fffff'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate software such as AV and EDR\nlevel: high\n",
      "question": "process access to LSASS memory with suspicious access flags",
      "answer": "In order to detect process access to LSASS memory with suspicious access flags, you should monitor Windows processes based on process access attempts that may be indicative of an attack. Specifically, focus on processes attempting to access 'lsass.exe', a critical Windows process associated with local security and authentication. Pay attention to attempts with granted access levels ending in '30', '50', '70', '90', 'B0', 'D0', 'F0', '18', '38', '58', '78', '98', 'B8', 'D8', 'F8', '1A', '3A', '5A', '7A', '9A', 'BA', 'DA', 'FA', and specifically '0x14C2'. These levels of access could indicate malicious intent such as credential dumping.\n\nHowever, it's crucial to exclude legitimate software from triggering false alarms by considering the source of the process access request. Exclude known paths related to common legitimate applications such as Task Manager, Malwarebytes, certain built-in Windows utilities, Cisco AnyConnect, Microsoft's Windows Defender, VMware Tools, and others specified in the rule. Additionally, consider excluding Antivirus or EDR agents specific paths, which might otherwise generate false positives.\n\nFocus especially on detecting malicious activities that haven't been excluded by the filters, as this maintains a balance between security monitoring and operational functionality, minimizing the disruption caused by false positive alerts. This approach covers a substantial portion of the methods attackers might use to access sensitive LSASS memory content, aiming to exploit it for credentials theft while reducing the noise from legitimate security and system management tools."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of a Microsoft signed script to execute commands.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of a Microsoft signed script to execute commands, you should: Monitor process creation logs on Windows systems for instances where command lines contain both the '\\CL_Mutexverifiers.ps1' script and the 'runAfterCancelProcess' phrase. This involves paying attention to any process that is executed with these specific command line parameters, as it might indicate an attempt to misuse a Microsoft signed script for executing potentially unauthorized or malicious commands. The detection carries a medium severity level, suggesting a cautious approach to potential false positives, which may occur but are currently unspecified.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\CL_Mutexverifiers.ps1'\n            - 'runAfterCancelProcess '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\CL_Mutexverifiers.ps1'\n            - 'runAfterCancelProcess '\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "use of a Microsoft signed script to execute commands",
      "answer": "In order to detect the use of a Microsoft signed script to execute commands, you should: Monitor process creation logs on Windows systems for instances where command lines contain both the '\\CL_Mutexverifiers.ps1' script and the 'runAfterCancelProcess' phrase. This involves paying attention to any process that is executed with these specific command line parameters, as it might indicate an attempt to misuse a Microsoft signed script for executing potentially unauthorized or malicious commands. The detection carries a medium severity level, suggesting a cautious approach to potential false positives, which may occur but are currently unspecified."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for communications with specific ngrok tunneling endpoint hostnames. These hostnames include 'tunnel.us.ngrok.com', 'tunnel.eu.ngrok.com', 'tunnel.ap.ngrok.com', 'tunnel.au.ngrok.com', 'tunnel.sa.ngrok.com', 'tunnel.jp.ngrok.com', and 'tunnel.in.ngrok.com'. When such activity is detected, it may indicate an attempt at unauthorized data exfiltration. However, bear in mind that there could be legitimate uses of ngrok, so each detection should be investigated to confirm malicious activity. This activity is considered of high importance due to the potential for it to indicate data being exfiltrated by malicious actors, bypassing usual data transmission safeguards.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        DestinationHostname|contains:\n            - 'tunnel.us.ngrok.com'\n            - 'tunnel.eu.ngrok.com'\n            - 'tunnel.ap.ngrok.com'\n            - 'tunnel.au.ngrok.com'\n            - 'tunnel.sa.ngrok.com'\n            - 'tunnel.jp.ngrok.com'\n            - 'tunnel.in.ngrok.com'\n    condition: selection\nfalsepositives:\n    - Legitimate use of ngrok\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        DestinationHostname|contains:\n            - 'tunnel.us.ngrok.com'\n            - 'tunnel.eu.ngrok.com'\n            - 'tunnel.ap.ngrok.com'\n            - 'tunnel.au.ngrok.com'\n            - 'tunnel.sa.ngrok.com'\n            - 'tunnel.jp.ngrok.com'\n            - 'tunnel.in.ngrok.com'\n    condition: selection\nfalsepositives:\n    - Legitimate use of ngrok\nlevel: high\n",
      "question": "an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors",
      "answer": "In order to detect an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors, you should: Monitor network connections on Windows systems for communications with specific ngrok tunneling endpoint hostnames. These hostnames include 'tunnel.us.ngrok.com', 'tunnel.eu.ngrok.com', 'tunnel.ap.ngrok.com', 'tunnel.au.ngrok.com', 'tunnel.sa.ngrok.com', 'tunnel.jp.ngrok.com', and 'tunnel.in.ngrok.com'. When such activity is detected, it may indicate an attempt at unauthorized data exfiltration. However, bear in mind that there could be legitimate uses of ngrok, so each detection should be investigated to confirm malicious activity. This activity is considered of high importance due to the potential for it to indicate data being exfiltrated by malicious actors, bypassing usual data transmission safeguards."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting any deletion of entries in \".*\\shell\\open\\command\" registry keys.\nThese registry keys might have been used for COM hijacking activities by a threat actor or an attacker and the deletion could indicate steps to remove its tracks.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect any deletion of entries in \".*\\shell\\open\\command\" registry keys, which might have been used for COM hijacking activities by a threat actor or an attacker and the deletion could indicate steps to remove its tracks, you should monitor Windows registry delete operations that target registry keys ending with '\\shell\\open\\command'. The event type of interest is 'DeleteKey', indicating the actual deletion of a registry key. It is important to be aware that certain processes, such as 'C:\\Windows\\system32\\svchost.exe', various Microsoft Office ClickToRun paths, 'C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe', Dropbox, Wireshark uninstaller, Opera installer, software like PeaZip and Everything, certain uninstallers starting with 'C:\\Windows\\Installer\\MSI', and Java installers in 'C:\\Program Files (x86)\\Java\\', are excluded from the detection criteria to minimize false positives. These exclusions are based on the image paths executing the deletion. However, particular attention should be paid to registry deletions initiated by other processes not listed in the exclusions, as they may signify an attacker attempting to erase evidence of COM hijacking. Please note, legitimate software installations or uninstallations can trigger false positives; if such an instance is identified, it should be added to the exclusion list to refine detection accuracy. The security level for these observations is considered medium, indicating a balance between the necessity for vigilance and the likelihood of benign triggers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_delete\ndetection:\n    selection:\n        EventType: 'DeleteKey'\n        TargetObject|endswith: '\\shell\\open\\command'\n    filter_svchost:\n        Image: 'C:\\Windows\\system32\\svchost.exe'\n    filter_office:\n        Image|startswith:\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\'\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\Updates\\'\n        Image|endswith: '\\OfficeClickToRun.exe'\n    filter_integrator:\n        Image: 'C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe'\n    filter_dropbox:\n        Image|endswith: '\\Dropbox.exe'\n        # We don't use the HKCR anchor as it could be logged as a different variation (HKEY_CLASSES_ROOT)\n        TargetObject|contains: '\\Dropbox.'\n    filter_wireshark:\n        Image|endswith: '\\AppData\\Local\\Temp\\Wireshark_uninstaller.exe'\n        # We don't use the HKCR anchor as it could be logged as a different variation (HKEY_CLASSES_ROOT)\n        TargetObject|contains: '\\wireshark-capture-file\\'\n    filter_opera:\n        Image|startswith:\n            - 'C:\\Program Files\\Opera\\'\n            - 'C:\\Program Files (x86)\\Opera\\'\n        Image|endswith: '\\installer.exe'\n    filter_peazip:\n        Image|contains: 'peazip'\n        # We don't use the HKCR anchor as it could be logged as a different variation (HKEY_CLASSES_ROOT)\n        TargetObject|contains: '\\PeaZip.'\n    filter_everything:\n        Image|endswith: '\\Everything.exe'\n        # We don't use the HKCR anchor as it could be logged as a different variation (HKEY_CLASSES_ROOT)\n        TargetObject|contains: '\\Everything.'\n    filter_uninstallers:\n        # This image path is linked with different uninstallers when running as admin unfortunately\n        Image|startswith: 'C:\\Windows\\Installer\\MSI'\n    filter_java:\n        Image|startswith: 'C:\\Program Files (x86)\\Java\\'\n        Image|endswith: '\\installer.exe'\n        TargetObject|contains: '\\Classes\\WOW6432Node\\CLSID\\{4299124F-F2C3-41b4-9C73-9236B2AD0E8F}'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate software (un)installations are known to cause some false positives. Please add them as a filter when encountered\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_delete\ndetection:\n    selection:\n        EventType: 'DeleteKey'\n        TargetObject|endswith: '\\shell\\open\\command'\n    filter_svchost:\n        Image: 'C:\\Windows\\system32\\svchost.exe'\n    filter_office:\n        Image|startswith:\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\'\n            - 'C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\Updates\\'\n        Image|endswith: '\\OfficeClickToRun.exe'\n    filter_integrator:\n        Image: 'C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe'\n    filter_dropbox:\n        Image|endswith: '\\Dropbox.exe'\n        # We don't use the HKCR anchor as it could be logged as a different variation (HKEY_CLASSES_ROOT)\n        TargetObject|contains: '\\Dropbox.'\n    filter_wireshark:\n        Image|endswith: '\\AppData\\Local\\Temp\\Wireshark_uninstaller.exe'\n        # We don't use the HKCR anchor as it could be logged as a different variation (HKEY_CLASSES_ROOT)\n        TargetObject|contains: '\\wireshark-capture-file\\'\n    filter_opera:\n        Image|startswith:\n            - 'C:\\Program Files\\Opera\\'\n            - 'C:\\Program Files (x86)\\Opera\\'\n        Image|endswith: '\\installer.exe'\n    filter_peazip:\n        Image|contains: 'peazip'\n        # We don't use the HKCR anchor as it could be logged as a different variation (HKEY_CLASSES_ROOT)\n        TargetObject|contains: '\\PeaZip.'\n    filter_everything:\n        Image|endswith: '\\Everything.exe'\n        # We don't use the HKCR anchor as it could be logged as a different variation (HKEY_CLASSES_ROOT)\n        TargetObject|contains: '\\Everything.'\n    filter_uninstallers:\n        # This image path is linked with different uninstallers when running as admin unfortunately\n        Image|startswith: 'C:\\Windows\\Installer\\MSI'\n    filter_java:\n        Image|startswith: 'C:\\Program Files (x86)\\Java\\'\n        Image|endswith: '\\installer.exe'\n        TargetObject|contains: '\\Classes\\WOW6432Node\\CLSID\\{4299124F-F2C3-41b4-9C73-9236B2AD0E8F}'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate software (un)installations are known to cause some false positives. Please add them as a filter when encountered\nlevel: medium\n",
      "question": "any deletion of entries in \".*\\shell\\open\\command\" registry keys.\nThese registry keys might have been used for COM hijacking activities by a threat actor or an attacker and the deletion could indicate steps to remove its tracks.\n",
      "answer": "In order to detect any deletion of entries in \".*\\shell\\open\\command\" registry keys, which might have been used for COM hijacking activities by a threat actor or an attacker and the deletion could indicate steps to remove its tracks, you should monitor Windows registry delete operations that target registry keys ending with '\\shell\\open\\command'. The event type of interest is 'DeleteKey', indicating the actual deletion of a registry key. It is important to be aware that certain processes, such as 'C:\\Windows\\system32\\svchost.exe', various Microsoft Office ClickToRun paths, 'C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe', Dropbox, Wireshark uninstaller, Opera installer, software like PeaZip and Everything, certain uninstallers starting with 'C:\\Windows\\Installer\\MSI', and Java installers in 'C:\\Program Files (x86)\\Java\\', are excluded from the detection criteria to minimize false positives. These exclusions are based on the image paths executing the deletion. However, particular attention should be paid to registry deletions initiated by other processes not listed in the exclusions, as they may signify an attacker attempting to erase evidence of COM hijacking. Please note, legitimate software installations or uninstallations can trigger false positives; if such an instance is identified, it should be added to the exclusion list to refine detection accuracy. The security level for these observations is considered medium, indicating a balance between the necessity for vigilance and the likelihood of benign triggers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting automated lateral movement by Turla group.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect automated lateral movement by Turla group, you should: Look for the creation of processes in Windows environments that could indicate unauthorized access or movements across your network. Take particular notice if you see the command line being used to connect to a Domain Controller using 'net use' with a specific path and password, as well as commands searching for documents across drives or executable files in the temporary folder. These patterns are critical to identify as they could signify the Turla group\u2019s tactics to exploit network credentials and search for sensitive files or deploy malicious executables, aligning with intrusion techniques related to discovery and lateral movement within a compromised network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine:\n            - 'net use \\\\\\\\%DomainController%\\C$ \"P@ssw0rd\" *'\n            - 'dir c:\\\\*.doc* /s'\n            - 'dir %TEMP%\\\\*.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine:\n            - 'net use \\\\\\\\%DomainController%\\C$ \"P@ssw0rd\" *'\n            - 'dir c:\\\\*.doc* /s'\n            - 'dir %TEMP%\\\\*.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "automated lateral movement by Turla group",
      "answer": "In order to detect automated lateral movement by Turla group, you should: Look for the creation of processes in Windows environments that could indicate unauthorized access or movements across your network. Take particular notice if you see the command line being used to connect to a Domain Controller using 'net use' with a specific path and password, as well as commands searching for documents across drives or executable files in the temporary folder. These patterns are critical to identify as they could signify the Turla group\u2019s tactics to exploit network credentials and search for sensitive files or deploy malicious executables, aligning with intrusion techniques related to discovery and lateral movement within a compromised network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting pattern of UAC Bypass using a msconfig GUI hack (UACMe 55).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55), you should: Monitor for file events in Windows, specifically focusing on actions related to files named 'pkgmgr.exe' within any user's 'AppData\\Local\\Temp' directory. This detection is critical due to the technique utilizing this specific path and filename as part of an attempt to bypass User Account Control (UAC), a security measure in Windows. Elements to watch include the initiation or alteration of 'pkgmgr.exe' located precisely at 'C:\\Users\\[Any User]\\AppData\\Local\\Temp\\'. While assessing this activity, it is important to be thorough yet cautious, as there could be instances where similar patterns emerge without malicious intent, though such cases are currently unknown. The elevated severity level of this rule underscores the potential risk associated with this behavior, which aligns with tactics and techniques of evading security mechanisms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|endswith: '\\AppData\\Local\\Temp\\pkgmgr.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Users\\'\n        TargetFilename|endswith: '\\AppData\\Local\\Temp\\pkgmgr.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)",
      "answer": "In order to detect the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55), you should: Monitor for file events in Windows, specifically focusing on actions related to files named 'pkgmgr.exe' within any user's 'AppData\\Local\\Temp' directory. This detection is critical due to the technique utilizing this specific path and filename as part of an attempt to bypass User Account Control (UAC), a security measure in Windows. Elements to watch include the initiation or alteration of 'pkgmgr.exe' located precisely at 'C:\\Users\\[Any User]\\AppData\\Local\\Temp\\'. While assessing this activity, it is important to be thorough yet cautious, as there could be instances where similar patterns emerge without malicious intent, though such cases are currently unknown. The elevated severity level of this rule underscores the potential risk associated with this behavior, which aligns with tactics and techniques of evading security mechanisms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups), you should: Monitor Windows event logs for specific keywords that are indicative of Mimikatz use. These keywords include 'dpapi::masterkey', 'eo.oe.kiwi', 'event::clear', 'event::drop', 'gentilkiwi.com', 'kerberos::golden', 'kerberos::ptc', 'kerberos::ptt', 'kerberos::tgt', 'Kiwi Legit Printer', 'lsadump::', 'mimidrv.sys', '\\mimilib.dll', 'misc::printnightmare', 'misc::shadowcopies', 'misc::skeleton', 'privilege::backup', 'privilege::debug', 'privilege::driver', and 'sekurlsa::'. It is vital to exclude false positives that could trigger these alerts, such as actions by system administrators, antivirus signature updates, or files innocently named after Mimikatz. These criteria mainly concern monitoring Sysmon's FileStream events, specifically avoiding EventID 15 due to its potential for false positives. The focus on these specific keywords and exclusions is because they are tied with various tactics and techniques used in attacks, like credential dumping, obtaining sensitive information, and privilege escalation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\ndetection:\n    keywords:\n        - 'dpapi::masterkey'\n        - 'eo.oe.kiwi'\n        - 'event::clear'\n        - 'event::drop'\n        - 'gentilkiwi.com'\n        - 'kerberos::golden'\n        - 'kerberos::ptc'\n        - 'kerberos::ptt'\n        - 'kerberos::tgt'\n        - 'Kiwi Legit Printer'\n        - 'lsadump::'\n        - 'mimidrv.sys'\n        - '\\mimilib.dll'\n        - 'misc::printnightmare'\n        - 'misc::shadowcopies'\n        - 'misc::skeleton'\n        - 'privilege::backup'\n        - 'privilege::debug'\n        - 'privilege::driver'\n        - 'sekurlsa::'\n    filter:\n        EventID: 15  # Sysmon's FileStream Events (could cause false positives when Sigma rules get copied on/to a system)\n    condition: keywords and not filter\nfalsepositives:\n    - Naughty administrators\n    - AV Signature updates\n    - Files with Mimikatz in their filename\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\ndetection:\n    keywords:\n        - 'dpapi::masterkey'\n        - 'eo.oe.kiwi'\n        - 'event::clear'\n        - 'event::drop'\n        - 'gentilkiwi.com'\n        - 'kerberos::golden'\n        - 'kerberos::ptc'\n        - 'kerberos::ptt'\n        - 'kerberos::tgt'\n        - 'Kiwi Legit Printer'\n        - 'lsadump::'\n        - 'mimidrv.sys'\n        - '\\mimilib.dll'\n        - 'misc::printnightmare'\n        - 'misc::shadowcopies'\n        - 'misc::skeleton'\n        - 'privilege::backup'\n        - 'privilege::debug'\n        - 'privilege::driver'\n        - 'sekurlsa::'\n    filter:\n        EventID: 15  # Sysmon's FileStream Events (could cause false positives when Sigma rules get copied on/to a system)\n    condition: keywords and not filter\nfalsepositives:\n    - Naughty administrators\n    - AV Signature updates\n    - Files with Mimikatz in their filename\nlevel: high\n",
      "question": "This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups)",
      "answer": "In order to detect mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups), you should: Monitor Windows event logs for specific keywords that are indicative of Mimikatz use. These keywords include 'dpapi::masterkey', 'eo.oe.kiwi', 'event::clear', 'event::drop', 'gentilkiwi.com', 'kerberos::golden', 'kerberos::ptc', 'kerberos::ptt', 'kerberos::tgt', 'Kiwi Legit Printer', 'lsadump::', 'mimidrv.sys', '\\mimilib.dll', 'misc::printnightmare', 'misc::shadowcopies', 'misc::skeleton', 'privilege::backup', 'privilege::debug', 'privilege::driver', and 'sekurlsa::'. It is vital to exclude false positives that could trigger these alerts, such as actions by system administrators, antivirus signature updates, or files innocently named after Mimikatz. These criteria mainly concern monitoring Sysmon's FileStream events, specifically avoiding EventID 15 due to its potential for false positives. The focus on these specific keywords and exclusions is because they are tied with various tactics and techniques used in attacks, like credential dumping, obtaining sensitive information, and privilege escalation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries abusing the Windows Task Scheduler for the initial or recurring execution of malicious code, you should focus on monitoring PowerShell script activities, specifically targeting script block logging on Windows systems. This is crucial as script block logging must be enabled to catch the execution of specific cmdlets and methods that are often leveraged during such attacks.\n\nYour detection efforts should concentrate on identifying any use of PowerShell commands associated with the Task Scheduler, such as creating new scheduled tasks (`New-ScheduledTaskAction`, `New-ScheduledTaskTrigger`, `New-ScheduledTaskPrincipal`, `New-ScheduledTaskSettingsSet`, `New-ScheduledTask`) or registering these tasks (`Register-ScheduledTask`). Additionally, pay attention to instances where the `Invoke-CimMethod` command is used in conjunction with parameters pointing to the Task Scheduler, namely `-ClassName PS_ScheduledTask` and `-NameSpace Root\\Microsoft\\Windows\\TaskScheduler`. These commands and parameters are key indicators that an attacker might be attempting to schedule tasks for malicious purposes.\n\nIt's important to approach the monitoring of these indicators with an understanding that not all use of these commands is nefarious. However, in the context of detecting potential misuse of the Windows Task Scheduler for executing malicious code, these PowerShell cmdlets and CIM methods stand out as critical points of interest.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains:\n            - 'New-ScheduledTaskAction'\n            - 'New-ScheduledTaskTrigger'\n            - 'New-ScheduledTaskPrincipal'\n            - 'New-ScheduledTaskSettingsSet'\n            - 'New-ScheduledTask'\n            - 'Register-ScheduledTask'\n    selection_cimmethod:\n        ScriptBlockText|contains|all:\n            - 'Invoke-CimMethod'\n            - '-ClassName'\n            - 'PS_ScheduledTask'\n            - '-NameSpace'\n            - 'Root\\Microsoft\\Windows\\TaskScheduler'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains:\n            - 'New-ScheduledTaskAction'\n            - 'New-ScheduledTaskTrigger'\n            - 'New-ScheduledTaskPrincipal'\n            - 'New-ScheduledTaskSettingsSet'\n            - 'New-ScheduledTask'\n            - 'Register-ScheduledTask'\n    selection_cimmethod:\n        ScriptBlockText|contains|all:\n            - 'Invoke-CimMethod'\n            - '-ClassName'\n            - 'PS_ScheduledTask'\n            - '-NameSpace'\n            - 'Root\\Microsoft\\Windows\\TaskScheduler'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code",
      "answer": "In order to detect adversaries abusing the Windows Task Scheduler for the initial or recurring execution of malicious code, you should focus on monitoring PowerShell script activities, specifically targeting script block logging on Windows systems. This is crucial as script block logging must be enabled to catch the execution of specific cmdlets and methods that are often leveraged during such attacks.\n\nYour detection efforts should concentrate on identifying any use of PowerShell commands associated with the Task Scheduler, such as creating new scheduled tasks (`New-ScheduledTaskAction`, `New-ScheduledTaskTrigger`, `New-ScheduledTaskPrincipal`, `New-ScheduledTaskSettingsSet`, `New-ScheduledTask`) or registering these tasks (`Register-ScheduledTask`). Additionally, pay attention to instances where the `Invoke-CimMethod` command is used in conjunction with parameters pointing to the Task Scheduler, namely `-ClassName PS_ScheduledTask` and `-NameSpace Root\\Microsoft\\Windows\\TaskScheduler`. These commands and parameters are key indicators that an attacker might be attempting to schedule tasks for malicious purposes.\n\nIt's important to approach the monitoring of these indicators with an understanding that not all use of these commands is nefarious. However, in the context of detecting potential misuse of the Windows Task Scheduler for executing malicious code, these PowerShell cmdlets and CIM methods stand out as critical points of interest."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote thread creation in \"KeePass.exe\" which could indicates potential password dumping activity.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote thread creation in \"KeePass.exe\" which could indicate potential password dumping activity, you should: Focus on monitoring the creation of remote threads within the Windows environment, specifically targeting instances where these threads are created in the \"KeePass.exe\" process. This activity can be a strong indicator of an adversary attempting to dump or steal passwords stored within KeePass, a well-known password management application. The detection centers around identifying any event where a remote thread is initiated in the KeePass.exe application. Given the sensitivity and potential impact of this behavior, any such detection is treated with a high level of seriousness, although it's important to note that there might be scenarios where these detections could be false positives, although such cases are not specifically known. This vigilance is a part of defending against tactics and techniques that involve credential access and persistence, aiming to mitigate the risks associated with unauthorized access to sensitive information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        TargetImage|endswith: '\\KeePass.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        TargetImage|endswith: '\\KeePass.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "remote thread creation in \"KeePass.exe\" which could indicates potential password dumping activity",
      "answer": "In order to detect remote thread creation in \"KeePass.exe\" which could indicate potential password dumping activity, you should: Focus on monitoring the creation of remote threads within the Windows environment, specifically targeting instances where these threads are created in the \"KeePass.exe\" process. This activity can be a strong indicator of an adversary attempting to dump or steal passwords stored within KeePass, a well-known password management application. The detection centers around identifying any event where a remote thread is initiated in the KeePass.exe application. Given the sensitivity and potential impact of this behavior, any such detection is treated with a high level of seriousness, although it's important to note that there might be scenarios where these detections could be false positives, although such cases are not specifically known. This vigilance is a part of defending against tactics and techniques that involve credential access and persistence, aiming to mitigate the risks associated with unauthorized access to sensitive information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE), you should: Monitor the creation of processes on Windows systems, focusing particularly on processes that are children of or identical to `svchost.exe`. This involves keeping an eye out for instances where the `svchost.exe` process is both starting another `svchost.exe` and where the command lines for these processes include the argument `-k DHCPServer`. Additionally, it's crucial to pay attention to the user context under which these processes are initiated, specifically looking for variations of the \"Network Service\" account in different language settings, including \"NETWORK SERVICE\", \"NETZWERKDIENST\", \"SERVIZIO DI RETE\", and \"SERVICIO DE RED\". This detailed surveillance is essential for identifying suspicious activity that could indicate an attacker is exploiting a vulnerability to execute remote code on a Windows Server without prior authentication.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\svchost.exe'\n        ParentCommandLine|contains: '-k DHCPServer'\n        CommandLine|contains: '-k DHCPServer'\n        User|contains: # Covers many language settings for Network Service. Please expand.\n            - 'NETWORK SERVICE'\n            - 'NETZWERKDIENST'\n            - 'SERVIZIO DI RETE'\n            - 'SERVICIO DE RED'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        Image|endswith: '\\svchost.exe'\n        ParentCommandLine|contains: '-k DHCPServer'\n        CommandLine|contains: '-k DHCPServer'\n        User|contains: # Covers many language settings for Network Service. Please expand.\n            - 'NETWORK SERVICE'\n            - 'NETZWERKDIENST'\n            - 'SERVIZIO DI RETE'\n            - 'SERVICIO DE RED'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE)",
      "answer": "In order to detect potential exploitation attempt of undocumented Windows Server Pre Auth Remote Code Execution (RCE), you should: Monitor the creation of processes on Windows systems, focusing particularly on processes that are children of or identical to `svchost.exe`. This involves keeping an eye out for instances where the `svchost.exe` process is both starting another `svchost.exe` and where the command lines for these processes include the argument `-k DHCPServer`. Additionally, it's crucial to pay attention to the user context under which these processes are initiated, specifically looking for variations of the \"Network Service\" account in different language settings, including \"NETWORK SERVICE\", \"NETZWERKDIENST\", \"SERVIZIO DI RETE\", and \"SERVICIO DE RED\". This detailed surveillance is essential for identifying suspicious activity that could indicate an attacker is exploiting a vulnerability to execute remote code on a Windows Server without prior authentication."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious shell commands used in various exploit codes (see references).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious shell commands used in various exploit codes, you should monitor for specific command patterns within Linux systems. These patterns include:\n\n- Use of `wget` to download files followed by immediately executing them with `perl`, `sh`, or `bash`. This could indicate an attempt to fetch and run malicious scripts.\n- Execution of Python's SimpleHTTPServer or http.server modules which may suggest serving files from the compromised system, often used in data exfiltration or serving malicious content.\n- Invocations that involve `pty` module for spawning pseudo-terminal sessions, and `socat` commands which could be used for creating reverse shells or binding shells to a port, indicating possible remote command execution attempts.\n- Commands that alter binary files with `echo` or change permissions of files with `chmod` to make them executable, specifically in directories like `/tmp`, `/var/run`, or `/mnt`, are signs of attempts to execute or persist malware.\n- Specific patterns related to disabling firewall services (`iptables`, `SuSEfirewall2`), modifying `/etc/rc.local` for persistence, or commands typically associated with the Metasploit framework's exploit payloads such as decoding base64-encoded files, setting SUID bit on binaries, or running network listeners with `nc` are key indicators of exploitation attempts.\n- Other suspicious activities like copying shell binaries (`ksh`, `sh`) into other locations, executing or making executable various suspicious files within `/tmp` directory, including those with extensions or names related to common exploit tools (e.g., `.b64`, `ysocereal.jar`, `x`) could signal post-exploitation movements or an attempt to establish persistence.\n\nBe aware of false positives, as legitimate administration activities might occasionally use parts of these commands. However, the commands listed are generally considered high-risk and warrant investigation if detected. Monitoring for these command patterns helps in identifying potential security breaches or exploit attempts in their early stages.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\ndetection:\n    keywords:\n        # Generic suspicious commands\n        - 'wget * - http* | perl'\n        - 'wget * - http* | sh'\n        - 'wget * - http* | bash'\n        - 'python -m SimpleHTTPServer'\n        - '-m http.server'      # Python 3\n        - 'import pty; pty.spawn*'\n        - 'socat exec:*'\n        - 'socat -O /tmp/*'\n        - 'socat tcp-connect*'\n        - '*echo binary >>*'\n        # Malware\n        - '*wget *; chmod +x*'\n        - '*wget *; chmod 777 *'\n        - '*cd /tmp || cd /var/run || cd /mnt*'\n        # Apache Struts in-the-wild exploit codes\n        - '*stop;service iptables stop;*'\n        - '*stop;SuSEfirewall2 stop;*'\n        - 'chmod 777 2020*'\n        - '*>>/etc/rc.local'\n        # Metasploit framework exploit codes\n        - '*base64 -d /tmp/*'\n        - '* | base64 -d *'\n        - '*/chmod u+s *'\n        - '*chmod +s /tmp/*'\n        - '*chmod u+s /tmp/*'\n        - '* /tmp/haxhax*'\n        - '* /tmp/ns_sploit*'\n        - 'nc -l -p *'\n        - 'cp /bin/ksh *'\n        - 'cp /bin/sh *'\n        - '* /tmp/*.b64 *'\n        - '*/tmp/ysocereal.jar*'\n        - '*/tmp/x *'\n        - '*; chmod +x /tmp/*'\n        - '*;chmod +x /tmp/*'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\ndetection:\n    keywords:\n        # Generic suspicious commands\n        - 'wget * - http* | perl'\n        - 'wget * - http* | sh'\n        - 'wget * - http* | bash'\n        - 'python -m SimpleHTTPServer'\n        - '-m http.server'      # Python 3\n        - 'import pty; pty.spawn*'\n        - 'socat exec:*'\n        - 'socat -O /tmp/*'\n        - 'socat tcp-connect*'\n        - '*echo binary >>*'\n        # Malware\n        - '*wget *; chmod +x*'\n        - '*wget *; chmod 777 *'\n        - '*cd /tmp || cd /var/run || cd /mnt*'\n        # Apache Struts in-the-wild exploit codes\n        - '*stop;service iptables stop;*'\n        - '*stop;SuSEfirewall2 stop;*'\n        - 'chmod 777 2020*'\n        - '*>>/etc/rc.local'\n        # Metasploit framework exploit codes\n        - '*base64 -d /tmp/*'\n        - '* | base64 -d *'\n        - '*/chmod u+s *'\n        - '*chmod +s /tmp/*'\n        - '*chmod u+s /tmp/*'\n        - '* /tmp/haxhax*'\n        - '* /tmp/ns_sploit*'\n        - 'nc -l -p *'\n        - 'cp /bin/ksh *'\n        - 'cp /bin/sh *'\n        - '* /tmp/*.b64 *'\n        - '*/tmp/ysocereal.jar*'\n        - '*/tmp/x *'\n        - '*; chmod +x /tmp/*'\n        - '*;chmod +x /tmp/*'\n    condition: keywords\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious shell commands used in various exploit codes (see references)",
      "answer": "In order to detect suspicious shell commands used in various exploit codes, you should monitor for specific command patterns within Linux systems. These patterns include:\n\n- Use of `wget` to download files followed by immediately executing them with `perl`, `sh`, or `bash`. This could indicate an attempt to fetch and run malicious scripts.\n- Execution of Python's SimpleHTTPServer or http.server modules which may suggest serving files from the compromised system, often used in data exfiltration or serving malicious content.\n- Invocations that involve `pty` module for spawning pseudo-terminal sessions, and `socat` commands which could be used for creating reverse shells or binding shells to a port, indicating possible remote command execution attempts.\n- Commands that alter binary files with `echo` or change permissions of files with `chmod` to make them executable, specifically in directories like `/tmp`, `/var/run`, or `/mnt`, are signs of attempts to execute or persist malware.\n- Specific patterns related to disabling firewall services (`iptables`, `SuSEfirewall2`), modifying `/etc/rc.local` for persistence, or commands typically associated with the Metasploit framework's exploit payloads such as decoding base64-encoded files, setting SUID bit on binaries, or running network listeners with `nc` are key indicators of exploitation attempts.\n- Other suspicious activities like copying shell binaries (`ksh`, `sh`) into other locations, executing or making executable various suspicious files within `/tmp` directory, including those with extensions or names related to common exploit tools (e.g., `.b64`, `ysocereal.jar`, `x`) could signal post-exploitation movements or an attempt to establish persistence.\n\nBe aware of false positives, as legitimate administration activities might occasionally use parts of these commands. However, the commands listed are generally considered high-risk and warrant investigation if detected. Monitoring for these command patterns helps in identifying potential security breaches or exploit attempts in their early stages."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine, you should: monitor Windows file events for any occurrences where the target filename ends with '\\lsass.dmp'. This specific filename pattern is a strong indicator of an attack where the Local Security Authority Subsystem Service (LSASS) process's memory is being dumped. Such a memory dump is typically pursued by attackers to extract sensitive credential information from the target machine. It's important to consider that there might be scenarios where similar activities could be triggered without malicious intent; however, such cases are unknown, emphasizing the need for careful analysis of detection alerts. This method of attack detection aligns with well-known cyber defense tactics and techniques aiming to mitigate credential access threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\lsass.dmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\lsass.dmp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high",
      "question": "use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine",
      "answer": "In order to detect the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine, you should: monitor Windows file events for any occurrences where the target filename ends with '\\lsass.dmp'. This specific filename pattern is a strong indicator of an attack where the Local Security Authority Subsystem Service (LSASS) process's memory is being dumped. Such a memory dump is typically pursued by attackers to extract sensitive credential information from the target machine. It's important to consider that there might be scenarios where similar activities could be triggered without malicious intent; however, such cases are unknown, emphasizing the need for careful analysis of detection alerts. This method of attack detection aligns with well-known cyber defense tactics and techniques aiming to mitigate credential access threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting ping command that uses a hex encoded IP address.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a ping command that uses a hex encoded IP address, you should monitor process creation logs on Windows systems for occurrences where the 'ping.exe' process is executed with a command line that includes hexadecimal IP addresses. Specifically, look for the execution path ending with '\\ping.exe' and command line arguments containing '0x', which suggests a hexadecimal value is being used. For analysis, make sure to capture the ParentCommandLine fields as it might provide additional context about the execution. This activity is flagged with a high level of suspicion as under normal circumstances, administrators do not use hexadecimal IP addresses with ping commands, making legitimate use cases highly unlikely.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ping.exe'\n        CommandLine|contains: '0x'\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely, because no sane admin pings IP addresses in a hexadecimal form\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\ping.exe'\n        CommandLine|contains: '0x'\n    condition: selection\nfields:\n    - ParentCommandLine\nfalsepositives:\n    - Unlikely, because no sane admin pings IP addresses in a hexadecimal form\nlevel: high\n",
      "question": "ping command that uses a hex encoded IP address",
      "answer": "In order to detect a ping command that uses a hex encoded IP address, you should monitor process creation logs on Windows systems for occurrences where the 'ping.exe' process is executed with a command line that includes hexadecimal IP addresses. Specifically, look for the execution path ending with '\\ping.exe' and command line arguments containing '0x', which suggests a hexadecimal value is being used. For analysis, make sure to capture the ParentCommandLine fields as it might provide additional context about the execution. This activity is flagged with a high level of suspicion as under normal circumstances, administrators do not use hexadecimal IP addresses with ping commands, making legitimate use cases highly unlikely."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when multi-factor authentication (MFA) is disabled..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when multi-factor authentication (MFA) is disabled, you should: Monitor logs from Google Workspace, specifically the admin service logs. Look for events reported by the \"admin.googleapis.com\" service that indicate either the enforcement or allowance of strong authentication has been triggered. The events of interest are when \"ENFORCE_STRONG_AUTHENTICATION\" or \"ALLOW_STRONG_AUTHENTICATION\" actions are taken. Further scrutiny is required if the value associated with these actions is set to 'false', indicating that multi-factor authentication is being weakened or disabled. It's important to be aware that there may be legitimate reasons for these changes, such as actions taken by a system administrator, which could result in false positives. The severity of these incidents is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection_base:\n        eventService: admin.googleapis.com\n        eventName:\n            - ENFORCE_STRONG_AUTHENTICATION\n            - ALLOW_STRONG_AUTHENTICATION\n    selection_eventValue:\n        new_value: 'false'\n    condition: all of selection*\nfalsepositives:\n    - MFA may be disabled and performed by a system administrator.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: google_workspace\n    service: google_workspace.admin\ndetection:\n    selection_base:\n        eventService: admin.googleapis.com\n        eventName:\n            - ENFORCE_STRONG_AUTHENTICATION\n            - ALLOW_STRONG_AUTHENTICATION\n    selection_eventValue:\n        new_value: 'false'\n    condition: all of selection*\nfalsepositives:\n    - MFA may be disabled and performed by a system administrator.\nlevel: medium\n",
      "question": "when multi-factor authentication (MFA) is disabled.",
      "answer": "In order to detect when multi-factor authentication (MFA) is disabled, you should: Monitor logs from Google Workspace, specifically the admin service logs. Look for events reported by the \"admin.googleapis.com\" service that indicate either the enforcement or allowance of strong authentication has been triggered. The events of interest are when \"ENFORCE_STRONG_AUTHENTICATION\" or \"ALLOW_STRONG_AUTHENTICATION\" actions are taken. Further scrutiny is required if the value associated with these actions is set to 'false', indicating that multi-factor authentication is being weakened or disabled. It's important to be aware that there may be legitimate reasons for these changes, such as actions taken by a system administrator, which could result in false positives. The severity of these incidents is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting activity observed by different researchers to be HAFNIUM group activity (or related) on Exchange servers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activity observed by different researchers to be HAFNIUM group activity (or related) on Exchange servers, you should monitor Windows process creation logs for specific behaviors indicative of this malicious group's tactics. Look out for processes that involve:\n\n1. The use of the `attrib` command to modify file attributes secretly, specifically adding hidden, system, and read-only attributes to `.aspx` files. This may indicate an attempt to discreetly deploy malicious web shells or scripts.\n\n2. Activities involving the `\\ProgramData\\VSPerfMon\\` directory, particularly when the `schtasks` command is used in conjunction with `VSPerfMon`. This is indicative of attempts to schedule malicious tasks or manipulate performance monitoring tools for nefarious purposes.\n\n3. The execution of the Opera browser (`Opera_browser.exe`) launched from suspicious parent processes like `services.exe` or `svchost.exe`, or from an unusual location such as `Users\\Public\\opera`. This could signal an attempt to bypass security measures by leveraging legitimate software.\n\n4. The use of `vssadmin list shadows` command directing output to a temporary directory named `__output`. This could indicate attempts to interact with or manipulate volume shadow copies, possibly for data exfiltration or to avoid data loss prevention measures.\n\n5. Invocation of `makecab.exe` to compress files located in `inetpub\\wwwroot\\` or the `Microsoft\\Exchange Server\\` directory. This might denote attempts to package stolen data for exfiltration.\n\n6. Usage of `7zip` to compress data in `C:\\Programdata\\pst` into an archive named `it.zip`. This action could suggest an effort to compress and exfiltrate sensitive data stealthily.\n\n7. Commands involving `rundll32.exe` executing `comsvcs.dll` to create minidumps. This might be utilized for dumping process memory, potentially targeting sensitive information or facilitating further attacks.\n\n8. Any command-line activity involving rare or suspicious batch files (`xx.bat`), executables (`cw.exe`), or unrecognized service components (`WwanSvcdcs`).\n\nMonitoring for these specific behaviors across Windows processes is critical, given their association with HAFNIUM group activities targeting Exchange servers. These indicators are generally unlikely to trigger false positives, emphasizing the need for immediate investigation and response when detected, considering the critical severity of these activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_attrib:\n        CommandLine|contains|all:\n            - 'attrib'\n            - ' +h '\n            - ' +s '\n            - ' +r '\n            - '.aspx'\n    selection_vsperfmon:\n        - Image|contains: '\\ProgramData\\VSPerfMon\\'\n        - CommandLine|contains|all:\n            - 'schtasks'\n            - 'VSPerfMon'\n    selection_opera_1:\n        Image|endswith: 'Opera_browser.exe'\n        ParentImage|endswith:\n            - '\\services.exe'\n            - '\\svchost.exe'\n    selection_opera_2:\n        Image|endswith: 'Users\\Public\\opera\\Opera_browser.exe'\n    selection_vssadmin:\n        CommandLine|contains|all:\n            - 'vssadmin list shadows'\n            - 'Temp\\__output'\n    selection_makecab_1:\n        Image|endswith: '\\makecab.exe'\n        CommandLine|contains|all:\n            - 'inetpub\\wwwroot\\'\n            - '.dmp.zip'\n    selection_makecab_2:\n        Image|endswith: '\\makecab.exe'\n        CommandLine|contains:\n            - 'Microsoft\\Exchange Server\\'\n            - 'compressionmemory'\n            - '.gif'\n    selection_7zip:\n        CommandLine|contains|all:\n            - ' -t7z '\n            - 'C:\\Programdata\\pst'\n            - '\\it.zip'\n    selection_rundll32:\n        CommandLine|contains|all:\n            - '\\comsvcs.dll'\n            - 'Minidump'\n            - 'full '\n            - '\\inetpub\\wwwroot'\n    selection_other:\n        CommandLine|contains:\n            - 'Windows\\Temp\\xx.bat'\n            - 'Windows\\WwanSvcdcs'\n            - 'Windows\\Temp\\cw.exe'\n    condition: 1 of selection*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_attrib:\n        CommandLine|contains|all:\n            - 'attrib'\n            - ' +h '\n            - ' +s '\n            - ' +r '\n            - '.aspx'\n    selection_vsperfmon:\n        - Image|contains: '\\ProgramData\\VSPerfMon\\'\n        - CommandLine|contains|all:\n            - 'schtasks'\n            - 'VSPerfMon'\n    selection_opera_1:\n        Image|endswith: 'Opera_browser.exe'\n        ParentImage|endswith:\n            - '\\services.exe'\n            - '\\svchost.exe'\n    selection_opera_2:\n        Image|endswith: 'Users\\Public\\opera\\Opera_browser.exe'\n    selection_vssadmin:\n        CommandLine|contains|all:\n            - 'vssadmin list shadows'\n            - 'Temp\\__output'\n    selection_makecab_1:\n        Image|endswith: '\\makecab.exe'\n        CommandLine|contains|all:\n            - 'inetpub\\wwwroot\\'\n            - '.dmp.zip'\n    selection_makecab_2:\n        Image|endswith: '\\makecab.exe'\n        CommandLine|contains:\n            - 'Microsoft\\Exchange Server\\'\n            - 'compressionmemory'\n            - '.gif'\n    selection_7zip:\n        CommandLine|contains|all:\n            - ' -t7z '\n            - 'C:\\Programdata\\pst'\n            - '\\it.zip'\n    selection_rundll32:\n        CommandLine|contains|all:\n            - '\\comsvcs.dll'\n            - 'Minidump'\n            - 'full '\n            - '\\inetpub\\wwwroot'\n    selection_other:\n        CommandLine|contains:\n            - 'Windows\\Temp\\xx.bat'\n            - 'Windows\\WwanSvcdcs'\n            - 'Windows\\Temp\\cw.exe'\n    condition: 1 of selection*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "activity observed by different researchers to be HAFNIUM group activity (or related) on Exchange servers",
      "answer": "In order to detect activity observed by different researchers to be HAFNIUM group activity (or related) on Exchange servers, you should monitor Windows process creation logs for specific behaviors indicative of this malicious group's tactics. Look out for processes that involve:\n\n1. The use of the `attrib` command to modify file attributes secretly, specifically adding hidden, system, and read-only attributes to `.aspx` files. This may indicate an attempt to discreetly deploy malicious web shells or scripts.\n\n2. Activities involving the `\\ProgramData\\VSPerfMon\\` directory, particularly when the `schtasks` command is used in conjunction with `VSPerfMon`. This is indicative of attempts to schedule malicious tasks or manipulate performance monitoring tools for nefarious purposes.\n\n3. The execution of the Opera browser (`Opera_browser.exe`) launched from suspicious parent processes like `services.exe` or `svchost.exe`, or from an unusual location such as `Users\\Public\\opera`. This could signal an attempt to bypass security measures by leveraging legitimate software.\n\n4. The use of `vssadmin list shadows` command directing output to a temporary directory named `__output`. This could indicate attempts to interact with or manipulate volume shadow copies, possibly for data exfiltration or to avoid data loss prevention measures.\n\n5. Invocation of `makecab.exe` to compress files located in `inetpub\\wwwroot\\` or the `Microsoft\\Exchange Server\\` directory. This might denote attempts to package stolen data for exfiltration.\n\n6. Usage of `7zip` to compress data in `C:\\Programdata\\pst` into an archive named `it.zip`. This action could suggest an effort to compress and exfiltrate sensitive data stealthily.\n\n7. Commands involving `rundll32.exe` executing `comsvcs.dll` to create minidumps. This might be utilized for dumping process memory, potentially targeting sensitive information or facilitating further attacks.\n\n8. Any command-line activity involving rare or suspicious batch files (`xx.bat`), executables (`cw.exe`), or unrecognized service components (`WwanSvcdcs`).\n\nMonitoring for these specific behaviors across Windows processes is critical, given their association with HAFNIUM group activities targeting Exchange servers. These indicators are generally unlikely to trigger false positives, emphasizing the need for immediate investigation and response when detected, considering the critical severity of these activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect that the path to the DLL written in the registry is different from the default one when WAB.exe tries to load the DLL from Registry, you should:\n\nMonitor the Windows system for registry settings modifications, specifically focusing on events where there's a change in the values set under the registry path associated with the Windows Address Book (WAB) application. Look for events categorized under registry modifications (registry_set) with an event type of SetValue that indicates a new value assignment within the registry. This monitoring should narrowly focus on changes to the '\\Software\\Microsoft\\WAB\\DLLPath' within the registry. It's crucial to filter out and ignore modifications where the DLL path points to the default '%CommonProgramFiles%\\System\\wab32.dll' to reduce false positives, thereby concentrating on non-standard or potentially malicious changes. This approach helps in identifying scenarios where an attacker might attempt to divert the standard DLL loading process to a malicious DLL, a common technique in persistence mechanisms and method of attack execution by loading unauthorized or malicious code. Implementing such monitoring ensures a high level of scrutiny in detecting anomalies in modifications of the registry paths that are critical to the loading of legitimate software, such as the WAB application. This monitoring strategy is aimed at addressing tactics and techniques that involve Persistence, Privilege Escalation, and Defense Evasion, by noting unusual changes in DLL path settings in the Windows registry.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Software\\Microsoft\\WAB\\DLLPath'\n    filter:\n        Details: '%CommonProgramFiles%\\System\\wab32.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Software\\Microsoft\\WAB\\DLLPath'\n    filter:\n        Details: '%CommonProgramFiles%\\System\\wab32.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry.",
      "answer": "In order to detect that the path to the DLL written in the registry is different from the default one when WAB.exe tries to load the DLL from Registry, you should:\n\nMonitor the Windows system for registry settings modifications, specifically focusing on events where there's a change in the values set under the registry path associated with the Windows Address Book (WAB) application. Look for events categorized under registry modifications (registry_set) with an event type of SetValue that indicates a new value assignment within the registry. This monitoring should narrowly focus on changes to the '\\Software\\Microsoft\\WAB\\DLLPath' within the registry. It's crucial to filter out and ignore modifications where the DLL path points to the default '%CommonProgramFiles%\\System\\wab32.dll' to reduce false positives, thereby concentrating on non-standard or potentially malicious changes. This approach helps in identifying scenarios where an attacker might attempt to divert the standard DLL loading process to a malicious DLL, a common technique in persistence mechanisms and method of attack execution by loading unauthorized or malicious code. Implementing such monitoring ensures a high level of scrutiny in detecting anomalies in modifications of the registry paths that are critical to the loading of legitimate software, such as the WAB application. This monitoring strategy is aimed at addressing tactics and techniques that involve Persistence, Privilege Escalation, and Defense Evasion, by noting unusual changes in DLL path settings in the Windows registry."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rclone config file being created.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Rclone config file being created, you should monitor Windows file events for the creation of files with the '.rdp' extension by a range of applications that include browsers such as Brave, CCleaner Browser, Chromium, Firefox, Google Chrome, Internet Explorer, Microsoft Edge, Opera, Vivaldi, and Whale. Additionally, keep an eye on file creations by email clients like Outlook, the Windows Mail client (via RuntimeBroker.exe), and Thunderbird, as well as chat applications like Discord, Keybase, Microsoft Teams, and Slack. This detection focuses on a broad set of commonly used applications which might be leveraged to create or modify Rclone configuration files, suggesting potential unauthorized or malicious activities related to data exfiltration or command and control.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Covers browsers\n            - '\\brave.exe'\n            - '\\CCleaner Browser\\Application\\CCleanerBrowser.exe'\n            - '\\chromium.exe'\n            - '\\firefox.exe'\n            - '\\Google\\Chrome\\Application\\chrome.exe'\n            - '\\iexplore.exe'\n            - '\\microsoftedge.exe'\n            - '\\msedge.exe'\n            - '\\Opera.exe'\n            - '\\Vivaldi.exe'\n            - '\\Whale.exe'\n            # Covers email clients\n            - '\\Outlook.exe'\n            - '\\RuntimeBroker.exe' # If the windows mail client is used\n            - '\\Thunderbird.exe'\n            # Covers chat applications\n            - '\\Discord.exe' # Should open the browser for download, but just in case.\n            - '\\Keybase.exe'\n            - '\\msteams.exe'\n            - '\\Slack.exe'\n            - '\\teams.exe'\n        TargetFilename|contains: '.rdp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith:\n            # Covers browsers\n            - '\\brave.exe'\n            - '\\CCleaner Browser\\Application\\CCleanerBrowser.exe'\n            - '\\chromium.exe'\n            - '\\firefox.exe'\n            - '\\Google\\Chrome\\Application\\chrome.exe'\n            - '\\iexplore.exe'\n            - '\\microsoftedge.exe'\n            - '\\msedge.exe'\n            - '\\Opera.exe'\n            - '\\Vivaldi.exe'\n            - '\\Whale.exe'\n            # Covers email clients\n            - '\\Outlook.exe'\n            - '\\RuntimeBroker.exe' # If the windows mail client is used\n            - '\\Thunderbird.exe'\n            # Covers chat applications\n            - '\\Discord.exe' # Should open the browser for download, but just in case.\n            - '\\Keybase.exe'\n            - '\\msteams.exe'\n            - '\\Slack.exe'\n            - '\\teams.exe'\n        TargetFilename|contains: '.rdp'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Rclone config file being created",
      "answer": "In order to detect Rclone config file being created, you should monitor Windows file events for the creation of files with the '.rdp' extension by a range of applications that include browsers such as Brave, CCleaner Browser, Chromium, Firefox, Google Chrome, Internet Explorer, Microsoft Edge, Opera, Vivaldi, and Whale. Additionally, keep an eye on file creations by email clients like Outlook, the Windows Mail client (via RuntimeBroker.exe), and Thunderbird, as well as chat applications like Discord, Keybase, Microsoft Teams, and Slack. This detection focuses on a broad set of commonly used applications which might be leveraged to create or modify Rclone configuration files, suggesting potential unauthorized or malicious activities related to data exfiltration or command and control."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file type dropped by an Exchange component in IIS into a suspicious folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n        TargetFilename|contains:\n            - 'FrontEnd\\HttpProxy\\'           # from GTSC and MSTI reports\n            - '\\inetpub\\wwwroot\\aspnet_client\\' # from GTSC report\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n        TargetFilename|contains:\n            - 'FrontEnd\\HttpProxy\\'           # from GTSC and MSTI reports\n            - '\\inetpub\\wwwroot\\aspnet_client\\' # from GTSC report\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious file type dropped by an Exchange component in IIS into a suspicious folder",
      "answer": "In order to detect suspicious file type dropped by an Exchange component in IIS into a suspicious folder, you should: monitor Windows file event logs for occurrences where a file with an extension of either .aspx, .asp, or .ashx is created or modified in directories commonly associated with IIS web applications, particularly within the paths 'FrontEnd\\HttpProxy\\' and '\\inetpub\\wwwroot\\aspnet_client\\'. The primary executable to watch in relation to this activity is 'w3wp.exe', a process associated with IIS web application pools, especially when its command line invocation includes references to 'MSExchange'. This specific activity is flagged with a high level of concern due to its potential association with malicious operations targeting Microsoft Exchange components working within the IIS infrastructure."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may carry out malicious operations using a virtual instance to avoid detection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries carrying out malicious operations using a virtual instance to avoid detection, you should: Monitor Windows PowerShell Script Block Logging for certain commands indicative of virtual machine manipulation. Specifically, look for the execution of PowerShell commands such as `New-VM`, `Set-VMFirmware`, and `Start-VM`, which are related to the creation, configuration, and starting of virtual machines respectively. This activity requires that Script Block Logging is enabled on the system to capture PowerShell command execution. Be aware of potential legitimate uses of these PowerShell scripts, as they may lead to false positives. The detection of such activity is categorized under a medium threat level.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - New-VM\n            - Set-VMFirmware\n            - Start-VM\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains:\n            - New-VM\n            - Set-VMFirmware\n            - Start-VM\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
      "question": "Adversaries may carry out malicious operations using a virtual instance to avoid detection",
      "answer": "In order to detect adversaries carrying out malicious operations using a virtual instance to avoid detection, you should: Monitor Windows PowerShell Script Block Logging for certain commands indicative of virtual machine manipulation. Specifically, look for the execution of PowerShell commands such as `New-VM`, `Set-VMFirmware`, and `Start-VM`, which are related to the creation, configuration, and starting of virtual machines respectively. This activity requires that Script Block Logging is enabled on the system to capture PowerShell command execution. Be aware of potential legitimate uses of these PowerShell scripts, as they may lead to false positives. The detection of such activity is categorized under a medium threat level."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Get the processes that are running on the local computer..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to get the processes that are running on the local computer, you should: Monitor script block execution logs on Windows systems, specifically looking for instances where the text `Get-Process` appears within a PowerShell script. This technique requires that Script Block Logging be enabled to track and analyze PowerShell execution. It's important to be aware that there might be legitimate reasons for scripts to query running processes, which could lead to false positives. The risk associated with this specific activity is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: Get-Process\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: Get-Process\n    condition: selection\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
      "question": "Get the processes that are running on the local computer.",
      "answer": "In order to get the processes that are running on the local computer, you should: Monitor script block execution logs on Windows systems, specifically looking for instances where the text `Get-Process` appears within a PowerShell script. This technique requires that Script Block Logging be enabled to track and analyze PowerShell execution. It's important to be aware that there might be legitimate reasons for scripts to query running processes, which could lead to false positives. The risk associated with this specific activity is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious launch of a renamed version of the PSEXESVC service with, which is not often used by legitimate administrators.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious launch of a renamed version of the PSEXESVC service which is not often used by legitimate administrators, you should: look for the creation of processes on Windows systems where the original file name is identified as 'psexesvc.exe'. However, make a distinction by excluding instances where the image path directly points to 'C:\\Windows\\PSEXESVC.exe', as this specific path may denote legitimate use. Attention should be focused on scenarios where 'psexesvc.exe' is launching from unexpected locations, which could indicate malicious activity. Recognize that legitimate administrative usage of PsExec might generate false positives, thus it is deemed a high-level alert due to its potential security implications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'psexesvc.exe'\n    filter:\n        Image: 'C:\\Windows\\PSEXESVC.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate administrative tasks\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName: 'psexesvc.exe'\n    filter:\n        Image: 'C:\\Windows\\PSEXESVC.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate administrative tasks\nlevel: high\n",
      "question": "suspicious launch of a renamed version of the PSEXESVC service with, which is not often used by legitimate administrators",
      "answer": "In order to detect suspicious launch of a renamed version of the PSEXESVC service which is not often used by legitimate administrators, you should: look for the creation of processes on Windows systems where the original file name is identified as 'psexesvc.exe'. However, make a distinction by excluding instances where the image path directly points to 'C:\\Windows\\PSEXESVC.exe', as this specific path may denote legitimate use. Attention should be focused on scenarios where 'psexesvc.exe' is launching from unexpected locations, which could indicate malicious activity. Recognize that legitimate administrative usage of PsExec might generate false positives, thus it is deemed a high-level alert due to its potential security implications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user manipulates with Firmward Password on MacOS. NOTE - this command has been disabled on silicon-based apple computers..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user manipulates with Firmware Password on MacOS, you should: Monitor process creation logs on MacOS devices, especially focusing on activities involving the '/usr/sbin/firmwarepasswd' executable. Look for command line arguments that include 'setpasswd', 'full', 'delete', or 'check', which are indicative of operations that manipulate the firmware password. These actions might signify unauthorized attempts to change or query the firmware settings. However, be aware that activities related to these detections could sometimes originate from legitimate administrative tasks. The severity level of this detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection1:\n        Image: '/usr/sbin/firmwarepasswd'\n        CommandLine|contains:\n            - 'setpasswd'\n            - 'full'\n            - 'delete'\n            - 'check'\n    condition: selection1\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: macos\ndetection:\n    selection1:\n        Image: '/usr/sbin/firmwarepasswd'\n        CommandLine|contains:\n            - 'setpasswd'\n            - 'full'\n            - 'delete'\n            - 'check'\n    condition: selection1\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n",
      "question": "user manipulates with Firmward Password on MacOS. NOTE - this command has been disabled on silicon-based apple computers.",
      "answer": "In order to detect when a user manipulates with Firmware Password on MacOS, you should: Monitor process creation logs on MacOS devices, especially focusing on activities involving the '/usr/sbin/firmwarepasswd' executable. Look for command line arguments that include 'setpasswd', 'full', 'delete', or 'check', which are indicative of operations that manipulate the firmware password. These actions might signify unauthorized attempts to change or query the firmware settings. However, be aware that activities related to these detections could sometimes originate from legitimate administrative tasks. The severity level of this detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities, you should monitor the Windows System logs, particularly focusing on events from the Service Control Manager with EventID 7045. This event indicates service installations, which can be leveraged by attackers for various purposes such as executing lateral movement within a network or dumping credentials.\n\nYou will need to look for specific indicators within the logs to identify potentially malicious activities. These include:\n\n1. Any service installation where the ImagePath contains the '\\PAExec' string. PAExec is a tool that can be used for executing processes on other systems, which is commonly utilized in lateral movement.\n\n2. Services named 'mssecsvc2.0'; this service name is infamously associated with the WannaCry ransomware, indicating a highly malicious activity.\n\n3. Service installations that contain 'net user' in the ImagePath. This is often used for creating or modifying user accounts on the local system or domain, which can be an indicator of attempts to establish persistence or perform credential dumping.\n\n4. The installation of a service named 'Java(TM) Virtual Machine Support Service'. This service name can be indicative of attacks carried out by sophisticated threat actors, such as APT29, who often disguise their malware as legitimate services to avoid detection.\n\nIt's critical to approach detection with the understanding that there could be unknown false positives, given the nature of these indicators. Any match should be subjected to a critical level of scrutiny due to the potential impact of these threats. The associated tactics and techniques from the MITRE ATT&CK framework for these activities include Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Lateral Movement, and Execution.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    malsvc_paexec:\n        ImagePath|contains: '\\PAExec'\n    malsvc_wannacry:\n        ServiceName: 'mssecsvc2.0'\n    malsvc_persistence:\n        ImagePath|contains: 'net user'\n    malsvc_apt29:\n        ServiceName: 'Java(TM) Virtual Machine Support Service'\n    condition: selection and 1 of malsvc_*\nfalsepositives:\n    - Unknown\nlevel: critical\nstatus: unsupported",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    malsvc_paexec:\n        ImagePath|contains: '\\PAExec'\n    malsvc_wannacry:\n        ServiceName: 'mssecsvc2.0'\n    malsvc_persistence:\n        ImagePath|contains: 'net user'\n    malsvc_apt29:\n        ServiceName: 'Java(TM) Virtual Machine Support Service'\n    condition: selection and 1 of malsvc_*\nfalsepositives:\n    - Unknown\nlevel: critical\nstatus: unsupported",
      "question": "known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities.",
      "answer": "In order to detect known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities, you should monitor the Windows System logs, particularly focusing on events from the Service Control Manager with EventID 7045. This event indicates service installations, which can be leveraged by attackers for various purposes such as executing lateral movement within a network or dumping credentials.\n\nYou will need to look for specific indicators within the logs to identify potentially malicious activities. These include:\n\n1. Any service installation where the ImagePath contains the '\\PAExec' string. PAExec is a tool that can be used for executing processes on other systems, which is commonly utilized in lateral movement.\n\n2. Services named 'mssecsvc2.0'; this service name is infamously associated with the WannaCry ransomware, indicating a highly malicious activity.\n\n3. Service installations that contain 'net user' in the ImagePath. This is often used for creating or modifying user accounts on the local system or domain, which can be an indicator of attempts to establish persistence or perform credential dumping.\n\n4. The installation of a service named 'Java(TM) Virtual Machine Support Service'. This service name can be indicative of attacks carried out by sophisticated threat actors, such as APT29, who often disguise their malware as legitimate services to avoid detection.\n\nIt's critical to approach detection with the understanding that there could be unknown false positives, given the nature of these indicators. Any match should be subjected to a critical level of scrutiny due to the potential impact of these threats. The associated tactics and techniques from the MITRE ATT&CK framework for these activities include Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Lateral Movement, and Execution."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting setting of the \"DumpType\" registry value to \"2\" which stands for a \"Full Dump\". Technique such as LSASS Shtinkering requires this value to be \"2\" in order to dump LSASS..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the setting of the \"DumpType\" registry value to \"2\" which stands for a \"Full Dump\". Technique such as LSASS Shtinkering requires this value to be \"2\" in order to dump LSASS, you should: monitor the registry settings on Windows systems specifically targeting registry entries set under `SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps` and `SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\\lsass.exe`. The primary focus should be on the \"SetValue\" event type where the \"TargetObject\" path includes the aforementioned keys, especially changes that set the \"DumpType\" to \"DWORD (0x00000002)\", indicating a full dump configuration. This detection is crucial as manipulating the \"DumpType\" to a full memory dump configuration can be indicative of malicious activities, such as the attempt to acquire sensitive information from the LSASS process by threat actors. It's worth noting that there might be legitimate applications requiring a full process dump configuration, which should be considered during the investigation to reduce the occurrence of false positives. The detection of this activity is particularly significant as it ties back to techniques typically employed in credential access and defense evasion strategies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\\DumpType'\n            - '\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\\lsass.exe\\DumpType'\n        Details: 'DWORD (0x00000002)' # Full Dump\n    condition: selection\nfalsepositives:\n    - Legitimate application that needs to do a full dump of their process\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\\DumpType'\n            - '\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\\lsass.exe\\DumpType'\n        Details: 'DWORD (0x00000002)' # Full Dump\n    condition: selection\nfalsepositives:\n    - Legitimate application that needs to do a full dump of their process\nlevel: high\n",
      "question": "setting of the \"DumpType\" registry value to \"2\" which stands for a \"Full Dump\". Technique such as LSASS Shtinkering requires this value to be \"2\" in order to dump LSASS.",
      "answer": "In order to detect the setting of the \"DumpType\" registry value to \"2\" which stands for a \"Full Dump\". Technique such as LSASS Shtinkering requires this value to be \"2\" in order to dump LSASS, you should: monitor the registry settings on Windows systems specifically targeting registry entries set under `SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps` and `SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\\lsass.exe`. The primary focus should be on the \"SetValue\" event type where the \"TargetObject\" path includes the aforementioned keys, especially changes that set the \"DumpType\" to \"DWORD (0x00000002)\", indicating a full dump configuration. This detection is crucial as manipulating the \"DumpType\" to a full memory dump configuration can be indicative of malicious activities, such as the attempt to acquire sensitive information from the LSASS process by threat actors. It's worth noting that there might be legitimate applications requiring a full process dump configuration, which should be considered during the investigation to reduce the occurrence of false positives. The detection of this activity is particularly significant as it ties back to techniques typically employed in credential access and defense evasion strategies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Code Integrity (CI) engine blocking Microsoft Defender's processes (MpCmdRun and NisSrv) from loading unsigned DLLs which may be an attempt to sideload arbitrary DLL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Code Integrity (CI) engine blocking Microsoft Defender's processes (MpCmdRun and NisSrv) from loading unsigned DLLs which may be an attempt to sideload arbitrary DLL, you should: monitor Windows security mitigations for event IDs 11 and 12, which indicate that ExploitGuardNonMicrosoftSignedBlocked has been triggered. Focus especially on processes ending with '\\MpCmdRun.exe' and '\\NisSrv.exe'. These events suggest attempts to block these Microsoft Defender processes from loading unsigned, potentially malicious DLLs, signaling an attack attempt through DLL sideloading. This activity is considered high severity due to its implications for system security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security-mitigations\ndetection:\n    selection:\n        EventID:\n            - 11\n            - 12 # MDE: ExploitGuardNonMicrosoftSignedBlocked\n        ProcessPath|endswith:\n            - '\\MpCmdRun.exe'\n            - '\\NisSrv.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security-mitigations\ndetection:\n    selection:\n        EventID:\n            - 11\n            - 12 # MDE: ExploitGuardNonMicrosoftSignedBlocked\n        ProcessPath|endswith:\n            - '\\MpCmdRun.exe'\n            - '\\NisSrv.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Code Integrity (CI) engine blocking Microsoft Defender's processes (MpCmdRun and NisSrv) from loading unsigned DLLs which may be an attempt to sideload arbitrary DLL",
      "answer": "In order to detect Code Integrity (CI) engine blocking Microsoft Defender's processes (MpCmdRun and NisSrv) from loading unsigned DLLs which may be an attempt to sideload arbitrary DLL, you should: monitor Windows security mitigations for event IDs 11 and 12, which indicate that ExploitGuardNonMicrosoftSignedBlocked has been triggered. Focus especially on processes ending with '\\MpCmdRun.exe' and '\\NisSrv.exe'. These events suggest attempts to block these Microsoft Defender processes from loading unsigned, potentially malicious DLLs, signaling an attack attempt through DLL sideloading. This activity is considered high severity due to its implications for system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting an Antivirus alert in a highly relevant file path or with a relevant file name.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an Antivirus alert in a highly relevant file path or with a relevant file name, you should focus on monitoring antivirus logs for alerts that flag file activities within specific areas of the file system and with certain types of files that are commonly associated with malicious activity. Pay attention to files located in or containing paths such as C:\\Windows\\, C:\\Temp\\, C:\\PerfLogs\\, C:\\Users\\Public\\, and C:\\Users\\Default\\, as well as paths that include directories typically used by web applications like \\Client\\, \\tsclient\\, \\inetpub\\, /www/, and those used by web servers such as apache, tomcat, nginx, and weblogic.\n\nAdditionally, be vigilant about files with extensions that are commonly used for scripts and executables involved in cyber attacks, including but not limited to .asax, .ashx, .asmx, .asp, .aspx, .bat, .cfm, .cgi, .chm, .cmd, .dat, .ear, image files (.gif, .jpeg, .jpg, .png, .svg), Java server files (.jsp, .jspx), script files (.php, .pl, .ps1, .psm1, .py, .pyc, .rb), and web-related files (.html, .htm, .lnk, .scf, .sct, .sh, .txt, .vbe, .vbs, .war, .wsf, .wsh, .xml). \n\nThese paths and file types have been identified as significant because they are often leveraged by attackers for malicious purposes, including but not limited to deploying malware, executing remote scripts, and infiltrating web servers. The rule prioritizes a high level of alert for such detections considering the unlikelihood of false positives. Monitoring for these criteria provides a focused approach to identifying and responding to potential threats efficiently.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: antivirus\ndetection:\n    selection_path:\n        Filename|contains:\n            # could be startswith, if there is a better backend handling\n            - 'C:\\Windows\\'\n            - 'C:\\Temp\\'\n            - 'C:\\PerfLogs\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Users\\Default\\'\n            # true 'contains' matches:\n            - '\\Client\\'\n            - '\\tsclient\\'\n            - '\\inetpub\\'\n            - '/www/'\n            - 'apache'\n            - 'tomcat'\n            - 'nginx'\n            - 'weblogic'\n    selection_ext:\n        Filename|endswith:\n            - '.asax'\n            - '.ashx'\n            - '.asmx'\n            - '.asp'\n            - '.aspx'\n            - '.bat'\n            - '.cfm'\n            - '.cgi'\n            - '.chm'\n            - '.cmd'\n            - '.dat'\n            - '.ear'\n            - '.gif'\n            - '.hta'\n            - '.jpeg'\n            - '.jpg'\n            - '.jsp'\n            - '.jspx'\n            - '.lnk'\n            - '.php'\n            - '.pl'\n            - '.png'\n            - '.ps1'\n            - '.psm1'\n            - '.py'\n            - '.pyc'\n            - '.rb'\n            - '.scf'\n            - '.sct'\n            - '.sh'\n            - '.svg'\n            - '.txt'\n            - '.vbe'\n            - '.vbs'\n            - '.war'\n            - '.wsf'\n            - '.wsh'\n            - '.xml'\n    condition: 1 of selection_*\nfields:\n    - Signature\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: antivirus\ndetection:\n    selection_path:\n        Filename|contains:\n            # could be startswith, if there is a better backend handling\n            - 'C:\\Windows\\'\n            - 'C:\\Temp\\'\n            - 'C:\\PerfLogs\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Users\\Default\\'\n            # true 'contains' matches:\n            - '\\Client\\'\n            - '\\tsclient\\'\n            - '\\inetpub\\'\n            - '/www/'\n            - 'apache'\n            - 'tomcat'\n            - 'nginx'\n            - 'weblogic'\n    selection_ext:\n        Filename|endswith:\n            - '.asax'\n            - '.ashx'\n            - '.asmx'\n            - '.asp'\n            - '.aspx'\n            - '.bat'\n            - '.cfm'\n            - '.cgi'\n            - '.chm'\n            - '.cmd'\n            - '.dat'\n            - '.ear'\n            - '.gif'\n            - '.hta'\n            - '.jpeg'\n            - '.jpg'\n            - '.jsp'\n            - '.jspx'\n            - '.lnk'\n            - '.php'\n            - '.pl'\n            - '.png'\n            - '.ps1'\n            - '.psm1'\n            - '.py'\n            - '.pyc'\n            - '.rb'\n            - '.scf'\n            - '.sct'\n            - '.sh'\n            - '.svg'\n            - '.txt'\n            - '.vbe'\n            - '.vbs'\n            - '.war'\n            - '.wsf'\n            - '.wsh'\n            - '.xml'\n    condition: 1 of selection_*\nfields:\n    - Signature\n    - User\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "an Antivirus alert in a highly relevant file path or with a relevant file name",
      "answer": "In order to detect an Antivirus alert in a highly relevant file path or with a relevant file name, you should focus on monitoring antivirus logs for alerts that flag file activities within specific areas of the file system and with certain types of files that are commonly associated with malicious activity. Pay attention to files located in or containing paths such as C:\\Windows\\, C:\\Temp\\, C:\\PerfLogs\\, C:\\Users\\Public\\, and C:\\Users\\Default\\, as well as paths that include directories typically used by web applications like \\Client\\, \\tsclient\\, \\inetpub\\, /www/, and those used by web servers such as apache, tomcat, nginx, and weblogic.\n\nAdditionally, be vigilant about files with extensions that are commonly used for scripts and executables involved in cyber attacks, including but not limited to .asax, .ashx, .asmx, .asp, .aspx, .bat, .cfm, .cgi, .chm, .cmd, .dat, .ear, image files (.gif, .jpeg, .jpg, .png, .svg), Java server files (.jsp, .jspx), script files (.php, .pl, .ps1, .psm1, .py, .pyc, .rb), and web-related files (.html, .htm, .lnk, .scf, .sct, .sh, .txt, .vbe, .vbs, .war, .wsf, .wsh, .xml). \n\nThese paths and file types have been identified as significant because they are often leveraged by attackers for malicious purposes, including but not limited to deploying malware, executing remote scripts, and infiltrating web servers. The rule prioritizes a high level of alert for such detections considering the unlikelihood of false positives. Monitoring for these criteria provides a focused approach to identifying and responding to potential threats efficiently."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Access to Domain Group Policies stored in SYSVOL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect access to Domain Group Policies stored in SYSVOL, you should monitor for the creation of processes on Windows systems that involve command lines containing both '\\SYSVOL\\' and '\\policies\\' paths. This is indicative of activities related to accessing or manipulating Domain Group Policies which are typically stored within the SYSVOL folder on domain controllers. Be aware that genuine administrative activities can also trigger this detection due to legitimate access to the SYSVOL directory, thus these should be considered as potential false positives. The severity of this rule is deemed medium, reflecting the importance of vigilance against unauthorized attempts to access or alter domain policies, which could signify a security threat or an attempt to assert control over domain resources and settings.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SYSVOL\\'\n            - '\\policies\\'\n    condition: selection\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SYSVOL\\'\n            - '\\policies\\'\n    condition: selection\nfalsepositives:\n    - Administrative activity\nlevel: medium\n",
      "question": "Access to Domain Group Policies stored in SYSVOL",
      "answer": "In order to detect access to Domain Group Policies stored in SYSVOL, you should monitor for the creation of processes on Windows systems that involve command lines containing both '\\SYSVOL\\' and '\\policies\\' paths. This is indicative of activities related to accessing or manipulating Domain Group Policies which are typically stored within the SYSVOL folder on domain controllers. Be aware that genuine administrative activities can also trigger this detection due to legitimate access to the SYSVOL directory, thus these should be considered as potential false positives. The severity of this rule is deemed medium, reflecting the importance of vigilance against unauthorized attempts to access or alter domain policies, which could signify a security threat or an attempt to assert control over domain resources and settings."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information, you should: monitor process creation logs on Windows systems for instances where the gpresult.exe application is executed with specific command-line arguments. Precisely, look for the execution of gpresult.exe ending with its name in the Image path and having command-line parameters that include either '/z' or '/v'. These arguments trigger gpresult to display verbose Resultant Set of Policy information, potentially in a detailed manner. Be aware that some occurrences might not indicate malicious activity, and unknown false positives can occur. The severity level for this kind of detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\gpresult.exe'\n        CommandLine|contains:\n            - '/z'\n            - '/v'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '\\gpresult.exe'\n        CommandLine|contains:\n            - '/z'\n            - '/v'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information",
      "answer": "In order to detect cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information, you should: monitor process creation logs on Windows systems for instances where the gpresult.exe application is executed with specific command-line arguments. Precisely, look for the execution of gpresult.exe ending with its name in the Image path and having command-line parameters that include either '/z' or '/v'. These arguments trigger gpresult to display verbose Resultant Set of Policy information, potentially in a detailed manner. Be aware that some occurrences might not indicate malicious activity, and unknown false positives can occur. The severity level for this kind of detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a remote file copy attempt to a hidden network share, which may indicate lateral movement or data staging activity, you should: Monitor for process creation events within Windows operating systems that involve command-line tools such as cmd.exe and powershell.exe. Specifically, look for instances where these tools execute commands containing the strings 'echo' and '>' along with a reference to a named pipe ('\\\\\\\\.\\\\pipe\\\\'), which is a method often used in scripting to redirect output to a network location in a covert fashion. Such activity could suggest an attempt at moving files to a hidden network share, potentially for malicious purposes like data theft or spreading within a network. It's important to be aware that there are legitimate cases where similar patterns may occur, so careful analysis is necessary to distinguish between benign and malicious behavior. The level of concern for such detections is considered high, indicating that immediate investigation is recommended upon alert.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n        - OriginalFileName:\n            - 'Cmd.Exe'\n            - 'PowerShell.EXE'\n    selection_args:\n        CommandLine|contains|all:\n            - 'echo'\n            - '>'\n            - '\\\\\\\\.\\\\pipe\\\\'\n    condition: all of selection*\nfalsepositives:\n    - Other programs that cause these patterns (please report)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_name:\n        - Image|endswith:\n            - '\\cmd.exe'\n            - '\\powershell.exe'\n        - OriginalFileName:\n            - 'Cmd.Exe'\n            - 'PowerShell.EXE'\n    selection_args:\n        CommandLine|contains|all:\n            - 'echo'\n            - '>'\n            - '\\\\\\\\.\\\\pipe\\\\'\n    condition: all of selection*\nfalsepositives:\n    - Other programs that cause these patterns (please report)\nlevel: high\n",
      "question": "remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity.",
      "answer": "In order to detect a remote file copy attempt to a hidden network share, which may indicate lateral movement or data staging activity, you should: Monitor for process creation events within Windows operating systems that involve command-line tools such as cmd.exe and powershell.exe. Specifically, look for instances where these tools execute commands containing the strings 'echo' and '>' along with a reference to a named pipe ('\\\\\\\\.\\\\pipe\\\\'), which is a method often used in scripting to redirect output to a network location in a covert fashion. Such activity could suggest an attempt at moving files to a hidden network share, potentially for malicious purposes like data theft or spreading within a network. It's important to be aware that there are legitimate cases where similar patterns may occur, so careful analysis is necessary to distinguish between benign and malicious behavior. The level of concern for such detections is considered high, indicating that immediate investigation is recommended upon alert."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Possible Squirrel Packages Manager as Lolbin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible Squirrel Packages Manager as Lolbin, you should monitor process creation events on Windows systems for executions of \"update.exe\". Specifically, look for command line arguments that include '--processStart', '--processStartAndWait', or '--createShortcut'. However, it's important to exclude legitimate update activity by applications like Discord, GitHub Desktop, and Microsoft Teams, which commonly use these command line arguments in their update mechanisms. This involves filtering out any command line executions of 'update.exe' located in user-specific AppData folders for Discord, GitHubDesktop, and Teams, especially when accompanied by expected application-specific arguments like launching or creating shortcuts for those applications. Recognize that despite the utility of this monitoring, there will be a range of legitimate software updates (e.g., 1Clipboard, Beaker Browser, Figma, Slack) that may also trigger these detections, so they should be considered as potential false positives and investigated accordingly. This approach aims at a medium level of alert severity due to its potential to flag legitimate update processes alongside malicious usage of the Squirrel package manager as a Living-off-the-land binary (Lolbin).",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\update.exe'\n    selection2:\n        CommandLine|contains:\n            - '--processStart'\n            - '--processStartAndWait'\n            - '--createShortcut'\n    filter_discord:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Discord\\Update.exe'\n            - ' --processStart'\n            - 'Discord.exe'\n    filter_github_desktop:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\GitHubDesktop\\Update.exe'\n            - 'GitHubDesktop.exe'\n        CommandLine|contains:\n            - '--createShortcut'\n            - '--processStartAndWait'\n    filter_teams:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Microsoft\\Teams\\Update.exe'\n            - 'Teams.exe'\n        CommandLine|contains:\n            - '--processStart'\n            - '--createShortcut'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - 1Clipboard\n    - Beaker Browser\n    - Caret\n    - Collectie\n    - Discord\n    - Figma\n    - Flow\n    - Ghost\n    - GitHub Desktop\n    - GitKraken\n    - Hyper\n    - Insomnia\n    - JIBO\n    - Kap\n    - Kitematic\n    - Now Desktop\n    - Postman\n    - PostmanCanary\n    - Rambox\n    - Simplenote\n    - Skype\n    - Slack\n    - SourceTree\n    - Stride\n    - Svgsus\n    - WebTorrent\n    - WhatsApp\n    - WordPress.com\n    - Atom\n    - Gitkraken\n    - Slack\n    - Teams\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\update.exe'\n    selection2:\n        CommandLine|contains:\n            - '--processStart'\n            - '--processStartAndWait'\n            - '--createShortcut'\n    filter_discord:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Discord\\Update.exe'\n            - ' --processStart'\n            - 'Discord.exe'\n    filter_github_desktop:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\GitHubDesktop\\Update.exe'\n            - 'GitHubDesktop.exe'\n        CommandLine|contains:\n            - '--createShortcut'\n            - '--processStartAndWait'\n    filter_teams:\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\Microsoft\\Teams\\Update.exe'\n            - 'Teams.exe'\n        CommandLine|contains:\n            - '--processStart'\n            - '--createShortcut'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - 1Clipboard\n    - Beaker Browser\n    - Caret\n    - Collectie\n    - Discord\n    - Figma\n    - Flow\n    - Ghost\n    - GitHub Desktop\n    - GitKraken\n    - Hyper\n    - Insomnia\n    - JIBO\n    - Kap\n    - Kitematic\n    - Now Desktop\n    - Postman\n    - PostmanCanary\n    - Rambox\n    - Simplenote\n    - Skype\n    - Slack\n    - SourceTree\n    - Stride\n    - Svgsus\n    - WebTorrent\n    - WhatsApp\n    - WordPress.com\n    - Atom\n    - Gitkraken\n    - Slack\n    - Teams\nlevel: medium\n",
      "question": "Possible Squirrel Packages Manager as Lolbin",
      "answer": "In order to detect possible Squirrel Packages Manager as Lolbin, you should monitor process creation events on Windows systems for executions of \"update.exe\". Specifically, look for command line arguments that include '--processStart', '--processStartAndWait', or '--createShortcut'. However, it's important to exclude legitimate update activity by applications like Discord, GitHub Desktop, and Microsoft Teams, which commonly use these command line arguments in their update mechanisms. This involves filtering out any command line executions of 'update.exe' located in user-specific AppData folders for Discord, GitHubDesktop, and Teams, especially when accompanied by expected application-specific arguments like launching or creating shortcuts for those applications. Recognize that despite the utility of this monitoring, there will be a range of legitimate software updates (e.g., 1Clipboard, Beaker Browser, Figma, Slack) that may also trigger these detections, so they should be considered as potential false positives and investigated accordingly. This approach aims at a medium level of alert severity due to its potential to flag legitimate update processes alongside malicious usage of the Squirrel package manager as a Living-off-the-land binary (Lolbin)."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting value modification of registry key containing path to binary used as screensaver..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect value modification of registry key containing path to binary used as screensaver, you should: Monitor registry events on Windows systems, specifically focusing on changes made to the registry key at 'HKEY_CURRENT_USER\\Control Panel\\Desktop\\SCRNSAVE.EXE'. This key typically points to the executable file used as the screensaver. It's important to exclude any modifications made by known processes such as 'rundll32.exe' or 'explorer.exe', as changes from these sources could be legitimate. You should remain alert for any other modifications to this registry key, as they could indicate an unauthorized attempt to alter the screensaver settings, potentially for malicious purposes. Be aware though, that not all modifications to this key are indicative of malicious activity; legitimate changes to the screensaver settings may also trigger this detection. This kind of monitoring falls under the broader cyber-security practices aimed at identifying and mitigating Credential Access and Persistence techniques, where adversaries may attempt to maintain their foothold on a system by leveraging or modifying existing Windows features.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: '\\Control Panel\\Desktop\\SCRNSAVE.EXE' # HKEY_CURRENT_USER\\Control Panel\\Desktop\\SCRNSAVE.EXE\n    filter:\n        Image|endswith:\n            - '\\rundll32.exe'\n            - '\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate modification of screensaver\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: '\\Control Panel\\Desktop\\SCRNSAVE.EXE' # HKEY_CURRENT_USER\\Control Panel\\Desktop\\SCRNSAVE.EXE\n    filter:\n        Image|endswith:\n            - '\\rundll32.exe'\n            - '\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate modification of screensaver\nlevel: medium\n",
      "question": "value modification of registry key containing path to binary used as screensaver.",
      "answer": "In order to detect value modification of registry key containing path to binary used as screensaver, you should: Monitor registry events on Windows systems, specifically focusing on changes made to the registry key at 'HKEY_CURRENT_USER\\Control Panel\\Desktop\\SCRNSAVE.EXE'. This key typically points to the executable file used as the screensaver. It's important to exclude any modifications made by known processes such as 'rundll32.exe' or 'explorer.exe', as changes from these sources could be legitimate. You should remain alert for any other modifications to this registry key, as they could indicate an unauthorized attempt to alter the screensaver settings, potentially for malicious purposes. Be aware though, that not all modifications to this key are indicative of malicious activity; legitimate changes to the screensaver settings may also trigger this detection. This kind of monitoring falls under the broader cyber-security practices aimed at identifying and mitigating Credential Access and Persistence techniques, where adversaries may attempt to maintain their foothold on a system by leveraging or modifying existing Windows features."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Microsoft Cloud App Security reported a user has deleted a unusual a large volume of files..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Microsoft Cloud App Security reported a user has deleted an unusual large volume of files, you should: Monitor logs from the threat management service specifically for Microsoft 365 products. Focus on identifying events sourced from the SecurityComplianceCenter that are labeled with the event name 'Unusual volume of file deletion' and have a status of 'success'. This approach aims to catch activities where there might be an exceptional number of file deletions happening which is not a common behavior and could indicate a potential security threat or compromise. The level of concern for such detections is considered medium and while it might result in false positives, whose sources are unknown, it's crucial not to overlook these alerts without proper investigation. This monitoring strategy aligns with identifying suspicious behavior that could signify data destruction or exfiltration methods often associated with cybersecurity threats.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Unusual volume of file deletion'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Unusual volume of file deletion'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Microsoft Cloud App Security reported a user has deleted a unusual a large volume of files.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported a user has deleted an unusual large volume of files, you should: Monitor logs from the threat management service specifically for Microsoft 365 products. Focus on identifying events sourced from the SecurityComplianceCenter that are labeled with the event name 'Unusual volume of file deletion' and have a status of 'success'. This approach aims to catch activities where there might be an exceptional number of file deletions happening which is not a common behavior and could indicate a potential security threat or compromise. The level of concern for such detections is considered medium and while it might result in false positives, whose sources are unknown, it's crucial not to overlook these alerts without proper investigation. This monitoring strategy aligns with identifying suspicious behavior that could signify data destruction or exfiltration methods often associated with cybersecurity threats."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new office macro files on the systems.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of new office macro files on the systems, you should:\nMonitor file events on Windows systems, specifically looking for the creation of files with extensions that indicate they are macro-enabled office documents. These extensions include '.docm' (macro-enabled Word documents), '.dotm' (macro-enabled Word templates), '.xlsm' (macro-enabled Excel workbooks), '.xltm' (macro-enabled Excel templates), '.potm' (macro-enabled PowerPoint templates), and '.pptm' (macro-enabled PowerPoint presentations). It's important to note that such detections could be common in environments where using macro-enabled documents is a regular practice, thus this activity is considered to have a low-level threat indication.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '.docm'\n            - '.dotm'\n            - '.xlsm'\n            - '.xltm'\n            - '.potm'\n            - '.pptm'\n    condition: selection\nfalsepositives:\n    - Very common in environments that rely heavily on macro documents\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith:\n            - '.docm'\n            - '.dotm'\n            - '.xlsm'\n            - '.xltm'\n            - '.potm'\n            - '.pptm'\n    condition: selection\nfalsepositives:\n    - Very common in environments that rely heavily on macro documents\nlevel: low\n",
      "question": "creation of a new office macro files on the systems",
      "answer": "In order to detect the creation of new office macro files on the systems, you should:\nMonitor file events on Windows systems, specifically looking for the creation of files with extensions that indicate they are macro-enabled office documents. These extensions include '.docm' (macro-enabled Word documents), '.dotm' (macro-enabled Word templates), '.xlsm' (macro-enabled Excel workbooks), '.xltm' (macro-enabled Excel templates), '.potm' (macro-enabled PowerPoint templates), and '.pptm' (macro-enabled PowerPoint presentations). It's important to note that such detections could be common in environments where using macro-enabled documents is a regular practice, thus this activity is considered to have a low-level threat indication."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated Powershell via use Clip.exe in Scripts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated Powershell via use Clip.exe in Scripts, you should: Identify instances where Powershell modules, specifically within Windows environments, exhibit peculiar behavior suggesting the use of obfuscation techniques involving Clip.exe. This detection focuses on monitoring Powershell modules for patterns that combine the use of the \"echo\" command with \"Clip.exe\" or variations of the \"Invoke\" command. This could signify attempts to manipulate or interact with the clipboard in a manner that's not standard for typical administrative tasks, potentially indicating malicious activity designed to hide its presence or intentions. Monitoring for such patterns requires careful attention to payload content that matches regular expressions hinting at this unusual combination of commands. It is important to note that due to the complex and adaptive nature of such obfuscation techniques, there might be cases where legitimate activity triggers a false positive, although these instances are currently unknown. This detection strategy is classified with a high level of importance due to the sophisticated nature of the attack vector, which leverages obfuscation to evade detection. The tactics and techniques associated with this detection strategy align with those identified by the MITRE ATT&CK framework, specifically focusing on the execution aspect of attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|re: '(?i).*?echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?).*'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        Payload|re: '(?i).*?echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?).*'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated Powershell via use Clip.exe in Scripts",
      "answer": "In order to detect obfuscated Powershell via use Clip.exe in Scripts, you should: Identify instances where Powershell modules, specifically within Windows environments, exhibit peculiar behavior suggesting the use of obfuscation techniques involving Clip.exe. This detection focuses on monitoring Powershell modules for patterns that combine the use of the \"echo\" command with \"Clip.exe\" or variations of the \"Invoke\" command. This could signify attempts to manipulate or interact with the clipboard in a manner that's not standard for typical administrative tasks, potentially indicating malicious activity designed to hide its presence or intentions. Monitoring for such patterns requires careful attention to payload content that matches regular expressions hinting at this unusual combination of commands. It is important to note that due to the complex and adaptive nature of such obfuscation techniques, there might be cases where legitimate activity triggers a false positive, although these instances are currently unknown. This detection strategy is classified with a high level of importance due to the sophisticated nature of the attack vector, which leverages obfuscation to evade detection. The tactics and techniques associated with this detection strategy align with those identified by the MITRE ATT&CK framework, specifically focusing on the execution aspect of attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting script interpreter wscript/cscript opening a network connection to a non-local network. Adversaries may use script to download malicious payloads..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a script interpreter wscript/cscript opening a network connection to a non-local network, as adversaries may use script to download malicious payloads, you should focus on monitoring network connections initiated by Windows script host applications (wscript.exe or cscript.exe). Specifically, watch for connections where the 'Initiated' status is true, highlighting active attempts to establish a network communication. \n\nIt is crucial to filter out connections to local network addresses to reduce false positives commonly associated with legitimate scripting activities. Therefore, connections to destination IPs starting with typical private and local network ranges, such as '127.', '10.', '172.', '192.', and '169.254.', which are commonly used within internal networks, should be excluded. Additionally, connections to Microsoft's range starting with '20.' should also be omitted from alerts.\n\nMoreover, for IPv6 connections, ignore connections to addresses that start with '::1' or '0:0:0:0:0:0:0:1' (IPv6 loopback addresses), 'fe80:' (link-local addresses), and the private address range 'fc' and 'fd' (fc00::/7), as these are typically used for internal network communications and are not indicative of malicious activity.\n\nBy applying these filters, the monitoring system focuses on detecting potentially malicious outbound connections from script interpreters to external networks, which could indicate an attempt by adversaries to download malicious payloads. Keep in mind that legitimate scripts not involved in such activities could still trigger alerts, so it's essential to consider the context of detected activities carefully. This method is associated with various tactics and techniques used by attackers, including the execution of scripts and exfiltration of data.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    filter_lan:\n        DestinationIp|startswith:\n            - '127.'\n            - '10.'\n            - '172.'\n            - '192.'\n            - '169.254.' # 169.254.0.0/16\n            - '20.'  # Microsoft Range\n    filter_ipv6:\n        DestinationIp|startswith:\n            - '::1'  # IPv6 loopback variant\n            - '0:0:0:0:0:0:0:1'  # IPv6 loopback variant\n            - 'fe80:'  # link-local address\n            - 'fc'  # private address range fc00::/7\n            - 'fd'  # private address range fc00::/7\n#    filter_lan_cidr:\n#        DestinationIp|cidr:\n#            - '127.0.0.0/8'\n#            - '10.0.0.0/8'\n#            - '172.16.0.0/12'\n#            - '192.168.0.0/16'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Legitimate scripts\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: network_connection\n    product: windows\ndetection:\n    selection:\n        Initiated: 'true'\n        Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    filter_lan:\n        DestinationIp|startswith:\n            - '127.'\n            - '10.'\n            - '172.'\n            - '192.'\n            - '169.254.' # 169.254.0.0/16\n            - '20.'  # Microsoft Range\n    filter_ipv6:\n        DestinationIp|startswith:\n            - '::1'  # IPv6 loopback variant\n            - '0:0:0:0:0:0:0:1'  # IPv6 loopback variant\n            - 'fe80:'  # link-local address\n            - 'fc'  # private address range fc00::/7\n            - 'fd'  # private address range fc00::/7\n#    filter_lan_cidr:\n#        DestinationIp|cidr:\n#            - '127.0.0.0/8'\n#            - '10.0.0.0/8'\n#            - '172.16.0.0/12'\n#            - '192.168.0.0/16'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - Legitimate scripts\nlevel: high\n",
      "question": "script interpreter wscript/cscript opening a network connection to a non-local network. Adversaries may use script to download malicious payloads.",
      "answer": "In order to detect a script interpreter wscript/cscript opening a network connection to a non-local network, as adversaries may use script to download malicious payloads, you should focus on monitoring network connections initiated by Windows script host applications (wscript.exe or cscript.exe). Specifically, watch for connections where the 'Initiated' status is true, highlighting active attempts to establish a network communication. \n\nIt is crucial to filter out connections to local network addresses to reduce false positives commonly associated with legitimate scripting activities. Therefore, connections to destination IPs starting with typical private and local network ranges, such as '127.', '10.', '172.', '192.', and '169.254.', which are commonly used within internal networks, should be excluded. Additionally, connections to Microsoft's range starting with '20.' should also be omitted from alerts.\n\nMoreover, for IPv6 connections, ignore connections to addresses that start with '::1' or '0:0:0:0:0:0:0:1' (IPv6 loopback addresses), 'fe80:' (link-local addresses), and the private address range 'fc' and 'fd' (fc00::/7), as these are typically used for internal network communications and are not indicative of malicious activity.\n\nBy applying these filters, the monitoring system focuses on detecting potentially malicious outbound connections from script interpreters to external networks, which could indicate an attempt by adversaries to download malicious payloads. Keep in mind that legitimate scripts not involved in such activities could still trigger alerts, so it's essential to consider the context of detected activities carefully. This method is associated with various tactics and techniques used by attackers, including the execution of scripts and exfiltration of data."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious user agent strings used by exploit / pentest frameworks like Metasploit in proxy logs.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious user agent strings used by exploit / pentest frameworks like Metasploit in proxy logs, you should monitor for specific user agent strings that are known to be associated with various exploitation and penetration testing tools, such as Cobalt Strike and Metasploit, within your proxy logs. These distinctive user agent strings can indicate an attacker is attempting to obfuscate their malicious activity to blend in with normal traffic or is leveraging a known tool for exploitation purposes.\n\nMonitoring requires scrutinizing proxy log entries for user agent strings that mimic older versions of Internet Explorer, or other browsers, which are uncommon in modern web traffic and thereby suspicious. This includes very specific versions of browser user agent strings that are documented to be employed by penetration testing software to conduct attacks or perform reconnaissance.\n\nFurthermore, lookout for user agent strings that explicitly mention tools or activities associated with hacking or penetration testing frameworks, such as explicit references to Metasploit, Cobalt Strike, or empire frameworks. Also, peculiar user agent strings that could be related to automated scripts or bots, for example, strings that mention Googlebot outside of the context of web server logs, or that contain keywords like 'exploit' or reference tool-specific markings like 'DotDotPwn', should be flagged.\n\nThe approach requires the capture and analysis of the Client IP, the requested URI (Uniform Resource Identifier), and the user agent string (c-useragent) from the proxy logs. Even though the potential for false positives exists due to legitimate but outdated user agent strings or benign tools generating similar patterns, the identified user agent strings often correlate to malicious activity and therefore merit higher scrutiny or investigation at a high level of alert severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent:\n        # Cobalt Strike https://www.cobaltstrike.com/help-malleable-c2\n            - 'Internet Explorer *'\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; InfoPath.2)' # https://goo.gl/f4H5Ez\n\n        # Metasploit Framework - Analysis by Didier Stevens https://blog.didierstevens.com/2015/03/16/quickpost-metasploit-user-agent-strings/\n            - 'Mozilla/4.0 (compatible; Metasploit RSPEC)'\n            - 'Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)'\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N'\n            - 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)' # only use in proxy logs - not for detection in web server logs\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/4.0.221.6 Safari/525.13'\n            - 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; MAAU)' # Payloads\n\n        # Metasploit Update by Florian Roth 08.07.2017\n            - 'Mozilla/5.0'\n            - 'Mozilla/4.0 (compatible; SPIPE/1.0'\n        # - 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)'  # too many false positives expected\n        # - 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'  # too many false positives expected\n            - 'Mozilla/5.0 (Windows NT 6.3; rv:39.0) Gecko/20100101 Firefox/35.0'\n            - 'Sametime Community Agent' # Unknown if prone to false positives - used in https://goo.gl/gHZkeR\n            - 'X-FORWARDED-FOR'\n            - 'DotDotPwn v2.1'\n            - 'SIPDROID'\n            - 'Mozilla/5.0 (Windows NT 10.0; Win32; x32; rv:60.0)' # CobaltStrike https://unit42.paloaltonetworks.com/tracking-oceanlotus-new-downloader-kerrdown/\n\n        # Empire\n            - 'Mozilla/6.0 (X11; Linux x86_64; rv:24.0) Gecko/20140205     Firefox/27.0 Iceweasel/25.3.0'\n\n        # Exploits\n            - '*wordpress hash grabber*'\n            - '*exploit*'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        c-useragent:\n        # Cobalt Strike https://www.cobaltstrike.com/help-malleable-c2\n            - 'Internet Explorer *'\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; InfoPath.2)' # https://goo.gl/f4H5Ez\n\n        # Metasploit Framework - Analysis by Didier Stevens https://blog.didierstevens.com/2015/03/16/quickpost-metasploit-user-agent-strings/\n            - 'Mozilla/4.0 (compatible; Metasploit RSPEC)'\n            - 'Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)'\n            - 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)' # old browser, rare, base-lining needed\n            - 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N'\n            - 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)' # only use in proxy logs - not for detection in web server logs\n            - 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/4.0.221.6 Safari/525.13'\n            - 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; MAAU)' # Payloads\n\n        # Metasploit Update by Florian Roth 08.07.2017\n            - 'Mozilla/5.0'\n            - 'Mozilla/4.0 (compatible; SPIPE/1.0'\n        # - 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)'  # too many false positives expected\n        # - 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko'  # too many false positives expected\n            - 'Mozilla/5.0 (Windows NT 6.3; rv:39.0) Gecko/20100101 Firefox/35.0'\n            - 'Sametime Community Agent' # Unknown if prone to false positives - used in https://goo.gl/gHZkeR\n            - 'X-FORWARDED-FOR'\n            - 'DotDotPwn v2.1'\n            - 'SIPDROID'\n            - 'Mozilla/5.0 (Windows NT 10.0; Win32; x32; rv:60.0)' # CobaltStrike https://unit42.paloaltonetworks.com/tracking-oceanlotus-new-downloader-kerrdown/\n\n        # Empire\n            - 'Mozilla/6.0 (X11; Linux x86_64; rv:24.0) Gecko/20140205     Firefox/27.0 Iceweasel/25.3.0'\n\n        # Exploits\n            - '*wordpress hash grabber*'\n            - '*exploit*'\n    condition: selection\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious user agent strings used by exploit / pentest frameworks like Metasploit in proxy logs",
      "answer": "In order to detect suspicious user agent strings used by exploit / pentest frameworks like Metasploit in proxy logs, you should monitor for specific user agent strings that are known to be associated with various exploitation and penetration testing tools, such as Cobalt Strike and Metasploit, within your proxy logs. These distinctive user agent strings can indicate an attacker is attempting to obfuscate their malicious activity to blend in with normal traffic or is leveraging a known tool for exploitation purposes.\n\nMonitoring requires scrutinizing proxy log entries for user agent strings that mimic older versions of Internet Explorer, or other browsers, which are uncommon in modern web traffic and thereby suspicious. This includes very specific versions of browser user agent strings that are documented to be employed by penetration testing software to conduct attacks or perform reconnaissance.\n\nFurthermore, lookout for user agent strings that explicitly mention tools or activities associated with hacking or penetration testing frameworks, such as explicit references to Metasploit, Cobalt Strike, or empire frameworks. Also, peculiar user agent strings that could be related to automated scripts or bots, for example, strings that mention Googlebot outside of the context of web server logs, or that contain keywords like 'exploit' or reference tool-specific markings like 'DotDotPwn', should be flagged.\n\nThe approach requires the capture and analysis of the Client IP, the requested URI (Uniform Resource Identifier), and the user agent string (c-useragent) from the proxy logs. Even though the potential for false positives exists due to legitimate but outdated user agent strings or benign tools generating similar patterns, the identified user agent strings often correlate to malicious activity and therefore merit higher scrutiny or investigation at a high level of alert severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS), you should: Focus on monitoring process creation events within Windows environments. Specifically, keep an eye out for instances where the process image ends with '\\rundll32.exe' or the original file name is identified as 'RUNDLL32.EXE'. Additionally, pay close attention to the command line used for execution. Look for patterns that match the execution of 'rundll32' (case insensitive) followed by a space, then a path that includes a colon, indicating the potential use of an Alternate Data Stream. This pattern is crucial as it signifies the DLL being called from within an ADS, which is a common technique used by attackers to hide malicious activities. Be aware that this rule may yield unknown false positives, indicating that while it is set to a high alert level, each alert should still be investigated to confirm its validity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        # Example:\n        #   rundll32 \"C:\\ads\\file.txt:ADSDLL.dll\",DllMain\n        # Note: This doesn't cover the use case where a full path for the DLL isn't used. As it requires a more expensive regex\n        CommandLine|re: '[Rr][Uu][Nn][Dd][Ll][Ll]32(\\.[Ee][Xx][Ee])? \\S+?\\w:\\S+?:'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n    selection_cli:\n        # Example:\n        #   rundll32 \"C:\\ads\\file.txt:ADSDLL.dll\",DllMain\n        # Note: This doesn't cover the use case where a full path for the DLL isn't used. As it requires a more expensive regex\n        CommandLine|re: '[Rr][Uu][Nn][Dd][Ll][Ll]32(\\.[Ee][Xx][Ee])? \\S+?\\w:\\S+?:'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS).",
      "answer": "In order to detect execution of rundll32 where the DLL being called is stored in an Alternate Data Stream (ADS), you should: Focus on monitoring process creation events within Windows environments. Specifically, keep an eye out for instances where the process image ends with '\\rundll32.exe' or the original file name is identified as 'RUNDLL32.EXE'. Additionally, pay close attention to the command line used for execution. Look for patterns that match the execution of 'rundll32' (case insensitive) followed by a space, then a path that includes a colon, indicating the potential use of an Alternate Data Stream. This pattern is crucial as it signifies the DLL being called from within an ADS, which is a common technique used by attackers to hide malicious activities. Be aware that this rule may yield unknown false positives, indicating that while it is set to a high alert level, each alert should still be investigated to confirm its validity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential malicious modification of run keys by winekey or team9 backdoor.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential malicious modification of run keys by winekey or team9 backdoor, you should: Monitor registry event logs in Windows systems for any modifications targeting object paths that end with 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'. This focus is critical as attackers commonly manipulate registry run keys to achieve persistence by ensuring their malware or backdoor programs launch automatically at system startup. When such an activity is identified, it is pertinent to examine the associated computer name, the image involved in the modification, the type of event that occurred, and the specific registry object targeted. Nonetheless, it's important to acknowledge that there might be instances deemed as false positives due to unidentified reasons; hence, a high level of caution and verification is recommended in the analysis process to ascertain the legitimacy of the registry modifications observed.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'\n    condition: selection\nfields:\n    - ComputerName\n    - Image\n    - EventType\n    - TargetObject\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|endswith: 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'\n    condition: selection\nfields:\n    - ComputerName\n    - Image\n    - EventType\n    - TargetObject\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential malicious modification of run keys by winekey or team9 backdoor",
      "answer": "In order to detect potential malicious modification of run keys by winekey or team9 backdoor, you should: Monitor registry event logs in Windows systems for any modifications targeting object paths that end with 'Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr'. This focus is critical as attackers commonly manipulate registry run keys to achieve persistence by ensuring their malware or backdoor programs launch automatically at system startup. When such an activity is identified, it is pertinent to examine the associated computer name, the image involved in the modification, the type of event that occurred, and the specific registry object targeted. Nonetheless, it's important to acknowledge that there might be instances deemed as false positives due to unidentified reasons; hence, a high level of caution and verification is recommended in the analysis process to ascertain the legitimacy of the registry modifications observed."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the PSEXEC key file. Which is created anytime a PsExec command is executed. It gets written to the file system and will be recorded in the USN Journal on the target system.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the PSEXEC key file, which is created anytime a PsExec command is executed, gets written to the file system and will be recorded in the USN Journal on the target system, you should: focus on monitoring file events within the Windows operating system. Specifically, look for the creation of files where the filename begins with 'C:\\Windows\\PSEXEC-' and ends with '.key'. These file creations are indicative of PsExec command execution, which is a method often used by attackers for lateral movement and remote command execution. The fact that the creation of this specific key file is being monitored underscores the attempt to identify potential unauthorized administrative activity on the system. Given the high risk associated with the detection of such activities, any matches to these criteria should be treated with a high level of scrutiny, as false positives are unlikely. This detection strategy is vital for identifying potential breaches that leverage the PsExec utility for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\PSEXEC-'\n        TargetFilename|endswith: '.key'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith: 'C:\\Windows\\PSEXEC-'\n        TargetFilename|endswith: '.key'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "creation of the PSEXEC key file. Which is created anytime a PsExec command is executed. It gets written to the file system and will be recorded in the USN Journal on the target system",
      "answer": "In order to detect the creation of the PSEXEC key file, which is created anytime a PsExec command is executed, gets written to the file system and will be recorded in the USN Journal on the target system, you should: focus on monitoring file events within the Windows operating system. Specifically, look for the creation of files where the filename begins with 'C:\\Windows\\PSEXEC-' and ends with '.key'. These file creations are indicative of PsExec command execution, which is a method often used by attackers for lateral movement and remote command execution. The fact that the creation of this specific key file is being monitored underscores the attempt to identify potential unauthorized administrative activity on the system. Given the high risk associated with the detection of such activities, any matches to these criteria should be treated with a high level of scrutiny, as false positives are unlikely. This detection strategy is vital for identifying potential breaches that leverage the PsExec utility for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting A General detection for the Get-Clipboard commands in PowerShell logs. This could be an adversary capturing clipboard contents..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an adversary capturing clipboard contents using Get-Clipboard commands in PowerShell logs, you should: Monitor Windows PowerShell modules for instances where the command 'Get-Clipboard' is executed. This activity is of medium severity and attempts to identify scenarios wherein attackers may be trying to access data copied to the clipboard, which could include sensitive information. It is essential to note that while specific false positives are not identified, occurrences that do not follow the typical pattern of an attack may arise, and each case should be evaluated on its own merits. This detection strategy falls under the practices designed to observe and mitigate tactics associated with credential access or information gathering techniques by malicious entities.\n",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        Payload|contains: 'Get-Clipboard'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection:\n        Payload|contains: 'Get-Clipboard'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "A General detection for the Get-Clipboard commands in PowerShell logs. This could be an adversary capturing clipboard contents.",
      "answer": "In order to detect an adversary capturing clipboard contents using Get-Clipboard commands in PowerShell logs, you should: Monitor Windows PowerShell modules for instances where the command 'Get-Clipboard' is executed. This activity is of medium severity and attempts to identify scenarios wherein attackers may be trying to access data copied to the clipboard, which could include sensitive information. It is essential to note that while specific false positives are not identified, occurrences that do not follow the typical pattern of an attack may arise, and each case should be evaluated on its own merits. This detection strategy falls under the practices designed to observe and mitigate tactics associated with credential access or information gathering techniques by malicious entities.\n"
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection of unusual child processes by different system processes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unusual child processes by different system processes, you should focus on monitoring process creation logs within Windows systems. Specifically, look for instances where certain system processes such as winlogon.exe, services.exe, lsass.exe, csrss.exe, smss.exe, wininit.exe, spoolsv.exe, or searchindexer.exe are listed as parent processes. These parent processes should not typically spawn certain child processes, so their appearance is suspicious. Further examination should be done if these parent processes initiate PowerShell (powershell.exe, pwsh.exe), or Command Prompt (cmd.exe) as child processes, especially if the original filenames for PowerShell are PowerShell.EXE or pwsh.dll, and for Command Prompt are Cmd.Exe. \n\nAdditionally, you should apply a filter to exclude any command lines that contain both 'route' and 'ADD' to reduce false positives, as these might represent legitimate network configuration commands rather than malicious activity. Pay attention to user contexts that contain variations of 'AUTHORI' or 'AUTORI' in different language settings, indicating the user account under which these processes are being executed. \n\nBe aware that this analysis is highly specific and aimed at identifying high-risk behaviors indicative of malicious activity, such as attempting to leverage system processes to execute unauthorized commands or scripts. Despite this careful setup, there might still be unknown scenarios that could trigger false alarms, so human analysis and corroboration with other signs of compromise are advisable. The data points to focus on in the logs for this detection are the parent image path, the image path of the child process, the user account initiating the process, and the command line used.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\winlogon.exe'\n            - '\\services.exe'\n            - '\\lsass.exe'\n            - '\\csrss.exe'\n            - '\\smss.exe'\n            - '\\wininit.exe'\n            - '\\spoolsv.exe'\n            - '\\searchindexer.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'Cmd.Exe'\n    filter:\n        CommandLine|contains|all:\n            - ' route '\n            - ' ADD '\n    condition: all of selection_* and not filter\nfields:\n    - ParentImage\n    - Image\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\winlogon.exe'\n            - '\\services.exe'\n            - '\\lsass.exe'\n            - '\\csrss.exe'\n            - '\\smss.exe'\n            - '\\wininit.exe'\n            - '\\spoolsv.exe'\n            - '\\searchindexer.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n            - 'Cmd.Exe'\n    filter:\n        CommandLine|contains|all:\n            - ' route '\n            - ' ADD '\n    condition: all of selection_* and not filter\nfields:\n    - ParentImage\n    - Image\n    - User\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detection of unusual child processes by different system processes",
      "answer": "In order to detect unusual child processes by different system processes, you should focus on monitoring process creation logs within Windows systems. Specifically, look for instances where certain system processes such as winlogon.exe, services.exe, lsass.exe, csrss.exe, smss.exe, wininit.exe, spoolsv.exe, or searchindexer.exe are listed as parent processes. These parent processes should not typically spawn certain child processes, so their appearance is suspicious. Further examination should be done if these parent processes initiate PowerShell (powershell.exe, pwsh.exe), or Command Prompt (cmd.exe) as child processes, especially if the original filenames for PowerShell are PowerShell.EXE or pwsh.dll, and for Command Prompt are Cmd.Exe. \n\nAdditionally, you should apply a filter to exclude any command lines that contain both 'route' and 'ADD' to reduce false positives, as these might represent legitimate network configuration commands rather than malicious activity. Pay attention to user contexts that contain variations of 'AUTHORI' or 'AUTORI' in different language settings, indicating the user account under which these processes are being executed. \n\nBe aware that this analysis is highly specific and aimed at identifying high-risk behaviors indicative of malicious activity, such as attempting to leverage system processes to execute unauthorized commands or scripts. Despite this careful setup, there might still be unknown scenarios that could trigger false alarms, so human analysis and corroboration with other signs of compromise are advisable. The data points to focus on in the logs for this detection are the parent image path, the image path of the child process, the user account initiating the process, and the command line used."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Execute VBscript code that is referenced within the *.bgi file..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to execute VBscript code that is referenced within the *.bgi file, you should monitor the creation of processes on Windows systems, especially focusing on the execution of 'bginfo.exe'. Specifically, look for instances where 'bginfo.exe' is executed with command line parameters that include both '/popup' and '/nolicprompt'. These command line parameters are crucial indicators of the script\u2019s execution attempt without displaying license prompts, potentially for stealthy operations. It's important to note that detecting such activities can be challenging and might result in unknown false positives. The severity of this activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\bginfo.exe'\n        CommandLine|contains|all:\n            - '/popup'\n            - '/nolicprompt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\bginfo.exe'\n        CommandLine|contains|all:\n            - '/popup'\n            - '/nolicprompt'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Execute VBscript code that is referenced within the *.bgi file.",
      "answer": "In order to execute VBscript code that is referenced within the *.bgi file, you should monitor the creation of processes on Windows systems, especially focusing on the execution of 'bginfo.exe'. Specifically, look for instances where 'bginfo.exe' is executed with command line parameters that include both '/popup' and '/nolicprompt'. These command line parameters are crucial indicators of the script\u2019s execution attempt without displaying license prompts, potentially for stealthy operations. It's important to note that detecting such activities can be challenging and might result in unknown false positives. The severity of this activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect requests to \"amsiInitFailed\" that can be used to disable AMSI scanning, you should monitor for specific command-line activity within your Windows environment's process creation logs. Focus on detecting command lines containing either the 'System.Management.Automation.AmsiUtils' or 'amsiInitFailed' strings as one potential indicator. Another strong sign is command lines containing all the following strings: '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static'. Any one of these patterns matching is considered a high-level alert with an unlikely chance of being a false positive. This detection strategy helps in identifying attempts to bypass the Antimalware Scan Interface (AMSI) which is crucial for the proactive defense against malware and script-based attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'System.Management.Automation.AmsiUtils'\n            - 'amsiInitFailed'\n    selection_2:\n        CommandLine|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - 'System.Management.Automation.AmsiUtils'\n            - 'amsiInitFailed'\n    selection_2:\n        CommandLine|contains|all:\n            - '[Ref].Assembly.GetType'\n            - 'SetValue($null,$true)'\n            - 'NonPublic,Static'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning",
      "answer": "In order to detect requests to \"amsiInitFailed\" that can be used to disable AMSI scanning, you should monitor for specific command-line activity within your Windows environment's process creation logs. Focus on detecting command lines containing either the 'System.Management.Automation.AmsiUtils' or 'amsiInitFailed' strings as one potential indicator. Another strong sign is command lines containing all the following strings: '[Ref].Assembly.GetType', 'SetValue($null,$true)', and 'NonPublic,Static'. Any one of these patterns matching is considered a high-level alert with an unlikely chance of being a false positive. This detection strategy helps in identifying attempts to bypass the Antimalware Scan Interface (AMSI) which is crucial for the proactive defense against malware and script-based attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"lodctr.exe\" to rebuild the performance counter registry values. This can be abused by attackers by providing a malicious config file to overwrite performance counter configuration to confuse and evade monitoring and security solutions..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of \"lodctr.exe\" to rebuild the performance counter registry values which can be abused by attackers by providing a malicious config file to overwrite performance counter configuration to confuse and evade monitoring and security solutions, you should: focus on monitoring process creation events within Windows environments. Specifically, look for the execution of the file named 'lodctr.exe' or instances where its original file name is 'LODCTR.EXE'. Additionally, be vigilant for command line arguments that include ' /r' or ' -r', as these flags are used to rebuild performance counter settings. It's crucial to monitor for all these indicators simultaneously as part of your detection strategy. Be aware that there could be legitimate uses of this tool by system administrators, which are considered false positives. This detection tactic has a medium level of importance and relies on identifying potential misuse of a system utility to manipulate performance counters for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\lodctr.exe'\n        OriginalFileName: 'LODCTR.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ' /r'\n            - ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage by an administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        Image|endswith: '\\lodctr.exe'\n        OriginalFileName: 'LODCTR.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ' /r'\n            - ' -r'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage by an administrator\nlevel: medium\n",
      "question": "execution of \"lodctr.exe\" to rebuild the performance counter registry values. This can be abused by attackers by providing a malicious config file to overwrite performance counter configuration to confuse and evade monitoring and security solutions.",
      "answer": "In order to detect the execution of \"lodctr.exe\" to rebuild the performance counter registry values which can be abused by attackers by providing a malicious config file to overwrite performance counter configuration to confuse and evade monitoring and security solutions, you should: focus on monitoring process creation events within Windows environments. Specifically, look for the execution of the file named 'lodctr.exe' or instances where its original file name is 'LODCTR.EXE'. Additionally, be vigilant for command line arguments that include ' /r' or ' -r', as these flags are used to rebuild performance counter settings. It's crucial to monitor for all these indicators simultaneously as part of your detection strategy. Be aware that there could be legitimate uses of this tool by system administrators, which are considered false positives. This detection tactic has a medium level of importance and relies on identifying potential misuse of a system utility to manipulate performance counters for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting change the the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library, you should: Focus on monitoring registry set actions within Windows environments, specifically looking at event types that involve the setting of a value. The main event to look out for is when the value of \"AutodialDLL\" located within the \"\\Services\\WinSock2\\Parameters\" registry path is modified. This specific action is indicative of attempts to establish persistence on a system by loading a custom DLL through the \"ws2_32\" library, which is a legitimate library commonly used for network-related functions. Such modifications are rarely benign in nature and are therefore considered highly suspicious, with very limited scenarios under which they would be considered false positives. Essentially, detecting changes to this registry key can help identify and thwart attempts to maintain unauthorized access or control over a system through custom payloads leveraging the networking functionalities of Windows.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Services\\WinSock2\\Parameters\\AutodialDLL'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Services\\WinSock2\\Parameters\\AutodialDLL'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "change the the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library",
      "answer": "In order to detect changes to the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library, you should: Focus on monitoring registry set actions within Windows environments, specifically looking at event types that involve the setting of a value. The main event to look out for is when the value of \"AutodialDLL\" located within the \"\\Services\\WinSock2\\Parameters\" registry path is modified. This specific action is indicative of attempts to establish persistence on a system by loading a custom DLL through the \"ws2_32\" library, which is a legitimate library commonly used for network-related functions. Such modifications are rarely benign in nature and are therefore considered highly suspicious, with very limited scenarios under which they would be considered false positives. Essentially, detecting changes to this registry key can help identify and thwart attempts to maintain unauthorized access or control over a system through custom payloads leveraging the networking functionalities of Windows."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting disabling Windows Defender PUA protection.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect disabling Windows Defender PUA protection, you should: Monitor registry setting changes on Windows systems, specifically focusing on the category of registry_set. Look for events where the EventType is SetValue, indicating that a registry value has been modified. The primary target to watch is modifications to the registry key path that includes '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'. The specific alteration to be alert for is when the Details of the modification show a DWORD value set to '0x00000000', which effectively disables the Windows Defender's potentially unwanted application (PUA) protection feature. This detection strategy is critical as it helps identify attempts to weaken the security of a system by turning off PUA protection, which is a common tactic used by attackers to avoid detection. While monitoring for this behavior, be aware that false positive occurrences are unknown, indicating that any detection should be taken seriously and investigated. The significance of such monitoring is underscored by its high level of importance in maintaining system security against tactics and techniques that involve the disabling of protective measures meant to block potentially harmful software.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'\n        Details: 'DWORD (0x00000000)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "disabling Windows Defender PUA protection",
      "answer": "In order to detect disabling Windows Defender PUA protection, you should: Monitor registry setting changes on Windows systems, specifically focusing on the category of registry_set. Look for events where the EventType is SetValue, indicating that a registry value has been modified. The primary target to watch is modifications to the registry key path that includes '\\Policies\\Microsoft\\Windows Defender\\PUAProtection'. The specific alteration to be alert for is when the Details of the modification show a DWORD value set to '0x00000000', which effectively disables the Windows Defender's potentially unwanted application (PUA) protection feature. This detection strategy is critical as it helps identify attempts to weaken the security of a system by turning off PUA protection, which is a common tactic used by attackers to avoid detection. While monitoring for this behavior, be aware that false positive occurrences are unknown, indicating that any detection should be taken seriously and investigated. The significance of such monitoring is underscored by its high level of importance in maintaining system security against tactics and techniques that involve the disabling of protective measures meant to block potentially harmful software."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect DLL deletions from Spooler Service driver folder. This might be a potential exploitation attempt of CVE-2021-1675.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DLL deletions from Spooler Service driver folder, which might be a potential exploitation attempt of CVE-2021-1675, you should: Monitor for file deletion events on Windows systems, specifically focusing on the files within the \"C:\\Windows\\System32\\spool\\drivers\\x64\\3\\\" directory. This is because an attack could involve deleting DLL files from this specific folder, a tactic that might be used in exploiting the mentioned vulnerability. The deletion events initiated by the process \"\\spoolsv.exe\" are of particular interest since this process is related to the Windows Print Spooler service, which is directly implicated in CVE-2021-1675. If such a deletion is detected, it should be considered suspicious and a potential indicator of an ongoing attack exploiting this vulnerability. The severity of this rule is set to high due to the potential impact of exploiting CVE-2021-1675.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_delete\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\spoolsv.exe'\n        TargetFilename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\3\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_delete\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\spoolsv.exe'\n        TargetFilename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\3\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect DLL deletions from Spooler Service driver folder. This might be a potential exploitation attempt of CVE-2021-1675",
      "answer": "In order to detect DLL deletions from Spooler Service driver folder, which might be a potential exploitation attempt of CVE-2021-1675, you should: Monitor for file deletion events on Windows systems, specifically focusing on the files within the \"C:\\Windows\\System32\\spool\\drivers\\x64\\3\\\" directory. This is because an attack could involve deleting DLL files from this specific folder, a tactic that might be used in exploiting the mentioned vulnerability. The deletion events initiated by the process \"\\spoolsv.exe\" are of particular interest since this process is related to the Windows Print Spooler service, which is directly implicated in CVE-2021-1675. If such a deletion is detected, it should be considered suspicious and a potential indicator of an ongoing attack exploiting this vulnerability. The severity of this rule is set to high due to the potential impact of exploiting CVE-2021-1675."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a file named \"ErrorHandler.cmd\" in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory which could be used as a method of persistence\nThe content of C:\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd is read whenever some tools under C:\\WINDOWS\\System32\\oobe\\ (e.g. Setup.exe) fail to run for any reason.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a file named \"ErrorHandler.cmd\" in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory which could be used as a method of persistence, you should: Monitor file event logs on Windows-based systems, specifically looking for the creation of files that end with the path \"\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd\". This file is of interest because its content is executed whenever certain tools, such as those located in \"C:\\WINDOWS\\System32\\oobe\\\" (for example, Setup.exe), encounter execution failures. The creation of such a file could indicate an attempt to maintain persistence within the system by exploiting these tool failures to execute malicious scripts. False positives are currently unknown, implying that any detection should be investigated. The threat level for this activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith: '\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|endswith: '\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "creation of a file named \"ErrorHandler.cmd\" in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory which could be used as a method of persistence\nThe content of C:\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd is read whenever some tools under C:\\WINDOWS\\System32\\oobe\\ (e.g. Setup.exe) fail to run for any reason.\n",
      "answer": "In order to detect the creation of a file named \"ErrorHandler.cmd\" in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory which could be used as a method of persistence, you should: Monitor file event logs on Windows-based systems, specifically looking for the creation of files that end with the path \"\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd\". This file is of interest because its content is executed whenever certain tools, such as those located in \"C:\\WINDOWS\\System32\\oobe\\\" (for example, Setup.exe), encounter execution failures. The creation of such a file could indicate an attempt to maintain persistence within the system by exploiting these tool failures to execute malicious scripts. False positives are currently unknown, implying that any detection should be investigated. The threat level for this activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting COM interface (EditionUpgradeManager) that is not used by standard executables..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unauthorized access or manipulation of the COM interface (EditionUpgradeManager) that is not used by standard executables, you should: Monitor process access logs on Windows systems for any traces indicating the use of 'editionupgrademanagerobj.dll' in the call trace. This specific DLL is associated with the EditionUpgradeManager COM interface, which under normal circumstances, should not be accessed or utilized by standard applications. It's crucial to capture and analyze details such as the computer name, user, source image, target image, and the call trace itself from the logs. Be aware that due to the nature of this detection, there may be unknown scenarios that could lead to false positives, however, the risk level associated with this activity is considered high. This monitoring will help in identifying potentially malicious activities attempting to exploit this interface for unauthorized actions on the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        CallTrace|contains: 'editionupgrademanagerobj.dll'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - SourceImage\n    - TargetImage\n    - CallTrace\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        CallTrace|contains: 'editionupgrademanagerobj.dll'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - SourceImage\n    - TargetImage\n    - CallTrace\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "COM interface (EditionUpgradeManager) that is not used by standard executables.",
      "answer": "In order to detect unauthorized access or manipulation of the COM interface (EditionUpgradeManager) that is not used by standard executables, you should: Monitor process access logs on Windows systems for any traces indicating the use of 'editionupgrademanagerobj.dll' in the call trace. This specific DLL is associated with the EditionUpgradeManager COM interface, which under normal circumstances, should not be accessed or utilized by standard applications. It's crucial to capture and analyze details such as the computer name, user, source image, target image, and the call trace itself from the logs. Be aware that due to the nature of this detection, there may be unknown scenarios that could lead to false positives, however, the risk level associated with this activity is considered high. This monitoring will help in identifying potentially malicious activities attempting to exploit this interface for unauthorized actions on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting VPN connection is modified or deleted..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a VPN connection is modified or deleted, you should monitor Azure Activity Logs for operations associated with the modification or deletion of VPN connections. Specifically, look out for actions named \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\" and \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE.\" These operations indicate that a VPN Gateway's connection configuration is being changed or the connection is being removed entirely.\n\nIt's crucial to note that there could be legitimate reasons for these activities, such as a system administrator updating the VPN setup or removing outdated connections. Therefore, it's important to verify the identity of the user making these changes, the user agent involved, and whether the hostname associated with these actions is expected to perform such tasks within your environment.\n\nOn the other hand, if modifications or deletions are initiated by unfamiliar users or in an unusual manner, it warrants a deeper investigation. It might be necessary to exclude known and verified behaviors from your monitoring mechanisms to reduce the occurrence of false positives.\n\nThis approach aims to detect potential unauthorized access or malicious intentions to compromise network security by interfering with VPN configurations, maintaining a balance between security vigilance and allowing for legitimate administrative tasks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE\n    condition: selection\nfalsepositives:\n    - VPN Connection being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - VPN Connection modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName:\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\n            - MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE\n    condition: selection\nfalsepositives:\n    - VPN Connection being modified or deleted may be performed by a system administrator. Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - VPN Connection modified or deleted from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "VPN connection is modified or deleted.",
      "answer": "In order to identify when a VPN connection is modified or deleted, you should monitor Azure Activity Logs for operations associated with the modification or deletion of VPN connections. Specifically, look out for actions named \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/WRITE\" and \"MICROSOFT.NETWORK/VPNGATEWAYS/VPNCONNECTIONS/DELETE.\" These operations indicate that a VPN Gateway's connection configuration is being changed or the connection is being removed entirely.\n\nIt's crucial to note that there could be legitimate reasons for these activities, such as a system administrator updating the VPN setup or removing outdated connections. Therefore, it's important to verify the identity of the user making these changes, the user agent involved, and whether the hostname associated with these actions is expected to perform such tasks within your environment.\n\nOn the other hand, if modifications or deletions are initiated by unfamiliar users or in an unusual manner, it warrants a deeper investigation. It might be necessary to exclude known and verified behaviors from your monitoring mechanisms to reduce the occurrence of false positives.\n\nThis approach aims to detect potential unauthorized access or malicious intentions to compromise network security by interfering with VPN configurations, maintaining a balance between security vigilance and allowing for legitimate administrative tasks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting uninstallation or termination of security products using the WMIC utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect uninstallation or termination of security products using the WMIC utility, you should: monitor Windows process creation logs for indications of the Windows Management Instrumentation Command-line (WMIC) utility being used in ways that suggest the uninstallation or termination of security software. Specifically, look for command line executions that include the `wmic` command along with parameters indicating an attempt to manipulate software products, such as mentioning 'product where', 'call', 'uninstall', '/nointeractive', 'caption like', 'call delete', 'process where delete', and any references to the deletion or termination of processes. Additionally, the rule is designed to flag attempts to uninstall or terminate processes by matching against a list of known security product identifiers in the command lines, including a variety of common and leading security solution names like Carbon Black, Cylance, ESET, Malwarebytes, Sophos, Symantec, and Windows Defender, among others. The logic behind this rule requires that at least one of the specified command line selection criteria matches along with a reference to one of the listed security products, indicating a high likelihood of malicious activity aimed at disabling security mechanisms on the host system. However, it's essential to consider the possibility of false positives, which may arise from legitimate administrative tasks involving the uninstallation or management of security products.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'product where '\n            - 'call'\n            - 'uninstall'\n            - '/nointeractive'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'caption like '\n        CommandLine|contains:\n            - 'call delete'\n            - 'call terminate'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'process '\n            - 'where '\n            - 'delete'\n    selection_product:\n        CommandLine|contains:\n            - '%carbon%'\n            - '%cylance%'\n            - '%endpoint%'\n            - '%eset%'\n            - '%malware%'\n            - '%Sophos%'\n            - '%symantec%'\n            - 'Antivirus'\n            - 'AVG '\n            - 'Carbon Black'\n            - 'CarbonBlack'\n            - 'Cb Defense Sensor 64-bit'\n            - 'Crowdstrike Sensor'\n            - 'Cylance '\n            - 'Dell Threat Defense'\n            - 'DLP Endpoint'\n            - 'Endpoint Detection'\n            - 'Endpoint Protection'\n            - 'Endpoint Security'\n            - 'Endpoint Sensor'\n            - 'ESET File Security'\n            - 'LogRhythm System Monitor Service'\n            - 'Malwarebytes'\n            - 'McAfee Agent'\n            - 'Microsoft Security Client'\n            - 'Sophos Anti-Virus'\n            - 'Sophos AutoUpdate'\n            - 'Sophos Credential Store'\n            - 'Sophos Management Console'\n            - 'Sophos Management Database'\n            - 'Sophos Management Server'\n            - 'Sophos Remote Management System'\n            - 'Sophos Update Manager'\n            - 'Threat Protection'\n            - 'VirusScan'\n            - 'Webroot SecureAnywhere'\n            - 'Windows Defender'\n    condition: 1 of selection_cli_* and selection_product\nfalsepositives:\n    - Legitimate administration\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'product where '\n            - 'call'\n            - 'uninstall'\n            - '/nointeractive'\n    selection_cli_2:\n        CommandLine|contains|all:\n            - 'wmic'\n            - 'caption like '\n        CommandLine|contains:\n            - 'call delete'\n            - 'call terminate'\n    selection_cli_3:\n        CommandLine|contains|all:\n            - 'process '\n            - 'where '\n            - 'delete'\n    selection_product:\n        CommandLine|contains:\n            - '%carbon%'\n            - '%cylance%'\n            - '%endpoint%'\n            - '%eset%'\n            - '%malware%'\n            - '%Sophos%'\n            - '%symantec%'\n            - 'Antivirus'\n            - 'AVG '\n            - 'Carbon Black'\n            - 'CarbonBlack'\n            - 'Cb Defense Sensor 64-bit'\n            - 'Crowdstrike Sensor'\n            - 'Cylance '\n            - 'Dell Threat Defense'\n            - 'DLP Endpoint'\n            - 'Endpoint Detection'\n            - 'Endpoint Protection'\n            - 'Endpoint Security'\n            - 'Endpoint Sensor'\n            - 'ESET File Security'\n            - 'LogRhythm System Monitor Service'\n            - 'Malwarebytes'\n            - 'McAfee Agent'\n            - 'Microsoft Security Client'\n            - 'Sophos Anti-Virus'\n            - 'Sophos AutoUpdate'\n            - 'Sophos Credential Store'\n            - 'Sophos Management Console'\n            - 'Sophos Management Database'\n            - 'Sophos Management Server'\n            - 'Sophos Remote Management System'\n            - 'Sophos Update Manager'\n            - 'Threat Protection'\n            - 'VirusScan'\n            - 'Webroot SecureAnywhere'\n            - 'Windows Defender'\n    condition: 1 of selection_cli_* and selection_product\nfalsepositives:\n    - Legitimate administration\nlevel: high\n",
      "question": "uninstallation or termination of security products using the WMIC utility",
      "answer": "In order to detect uninstallation or termination of security products using the WMIC utility, you should: monitor Windows process creation logs for indications of the Windows Management Instrumentation Command-line (WMIC) utility being used in ways that suggest the uninstallation or termination of security software. Specifically, look for command line executions that include the `wmic` command along with parameters indicating an attempt to manipulate software products, such as mentioning 'product where', 'call', 'uninstall', '/nointeractive', 'caption like', 'call delete', 'process where delete', and any references to the deletion or termination of processes. Additionally, the rule is designed to flag attempts to uninstall or terminate processes by matching against a list of known security product identifiers in the command lines, including a variety of common and leading security solution names like Carbon Black, Cylance, ESET, Malwarebytes, Sophos, Symantec, and Windows Defender, among others. The logic behind this rule requires that at least one of the specified command line selection criteria matches along with a reference to one of the listed security products, indicating a high likelihood of malicious activity aimed at disabling security mechanisms on the host system. However, it's essential to consider the possibility of false positives, which may arise from legitimate administrative tasks involving the uninstallation or management of security products."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript, you should monitor for process creation events on Windows systems, specifically focusing on the execution of `wscript.exe` or `cscript.exe`. Detecting the use of these scripting hosts involves looking for their original file names (`wscript.exe` and `cscript.exe`) or paths that end with these executables. Additionally, pay attention to the command line arguments for these processes, as script file executions are indicated by the presence of file extensions such as `.js`, `.jse`, `.vba`, `.vbe`, `.vbs`, and `.wsf`. It's important to note that the effectiveness of this detection might require fine-tuning to reduce potential false positives. One recommended approach is to incorporate the user profile path in the command line analysis if the rule generates too many alerts. This approach will significantly improve the detection's accuracy and utility in identifying actual malicious activity involving script file execution with Wscript or Cscript.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'wscript.exe'\n            - 'cscript.exe'\n        - Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.js'\n            - '.jse'\n            - '.vba'\n            - '.vbe'\n            - '.vbs'\n            - '.wsf'\n    condition: all of selection_*\nfalsepositives:\n    - Some additional tunning is required. It is recommended to add the user profile path in CommandLine if it is getting too noisy.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'wscript.exe'\n            - 'cscript.exe'\n        - Image|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.js'\n            - '.jse'\n            - '.vba'\n            - '.vbe'\n            - '.vbs'\n            - '.wsf'\n    condition: all of selection_*\nfalsepositives:\n    - Some additional tunning is required. It is recommended to add the user profile path in CommandLine if it is getting too noisy.\nlevel: medium\n",
      "question": "script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript",
      "answer": "In order to detect script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript, you should monitor for process creation events on Windows systems, specifically focusing on the execution of `wscript.exe` or `cscript.exe`. Detecting the use of these scripting hosts involves looking for their original file names (`wscript.exe` and `cscript.exe`) or paths that end with these executables. Additionally, pay attention to the command line arguments for these processes, as script file executions are indicated by the presence of file extensions such as `.js`, `.jse`, `.vba`, `.vbe`, `.vbs`, and `.wsf`. It's important to note that the effectiveness of this detection might require fine-tuning to reduce potential false positives. One recommended approach is to incorporate the user profile path in the command line analysis if the rule generates too many alerts. This approach will significantly improve the detection's accuracy and utility in identifying actual malicious activity involving script file execution with Wscript or Cscript."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting new process creation using WMIC via the \"process call create\" flag.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect new process creation using WMIC via the \"process call create\" flag, you should: focus on process creation events within Windows environments. Specifically, the detection mechanism centers on identifying instances where the WMIC (Windows Management Instrumentation Command-line) utility, recognizable either through the image file ending with '\\wmic.exe' or having an original file name of 'wmic.exe', is employed to initiate a new process. This activity is typically signified by the command line arguments containing the keywords 'process', 'call', and 'create' concurrently. Such detection criteria aim to flag potentially malicious behavior where WMIC is misused to launch new processes, a tactic often leveraged by attackers to execute code or scripts. It is important to note that while this detection method is of medium sensitivity, it might also encounter scenarios where its findings are not indicative of malicious activity, thus necessitating further investigation to ascertain the context of the detected events.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'process'\n            - 'call'\n            - 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'process'\n            - 'call'\n            - 'create'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "new process creation using WMIC via the \"process call create\" flag",
      "answer": "In order to detect new process creation using WMIC via the \"process call create\" flag, you should: focus on process creation events within Windows environments. Specifically, the detection mechanism centers on identifying instances where the WMIC (Windows Management Instrumentation Command-line) utility, recognizable either through the image file ending with '\\wmic.exe' or having an original file name of 'wmic.exe', is employed to initiate a new process. This activity is typically signified by the command line arguments containing the keywords 'process', 'call', and 'create' concurrently. Such detection criteria aim to flag potentially malicious behavior where WMIC is misused to launch new processes, a tactic often leveraged by attackers to execute code or scripts. It is important to note that while this detection method is of medium sensitivity, it might also encounter scenarios where its findings are not indicative of malicious activity, thus necessitating further investigation to ascertain the context of the detected events."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell scripts to set the ACL to a file in the Windows folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell scripts designed to set the ACL (Access Control List) to a file in the Windows folder, you should monitor for specific script activities on Windows systems, particularly those involving PowerShell scripts (ps_script). Look for the execution of scripts that include commands to modify ACLs, specifically using the 'Set-Acl' cmdlet coupled with the '-AclObject' parameter, indicating an intention to change permission settings.\n\nFurthermore, pay close attention to scripts that aim to alter permissions on any files or directories within the Windows folder. This can be indicated by the presence of paths pointing to the Windows directory in various formats, such as 'C:\\Windows', 'C:/Windows', and also utilizing environmental variables like '$env:windir' to reference the Windows directory. These attempts are further characterized by the intention to grant 'FullControl' or 'Allow' permissions, which significantly increases the risk by potentially giving attackers unrestricted access to critical system directories.\n\nLastly, ensure that all detection conditions involving cmdlet usage, suspicious paths, and permissions setting are met concurrently to trigger alerts. Be aware that there could be legitimate reasons for such script executions, although they are not commonly expected, thus setting the alert level to high due to the potential severity of tampering with ACLs within the Windows directory.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: bade5735-5ab0-4aa7-a642-a11be0e40872\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains|all:\n            - 'Set-Acl '\n            - '-AclObject '\n    selection_paths:\n        # Note: Add more suspicious paths\n        ScriptBlockText|contains:\n            - '-Path \"C:\\Windows'\n            - '-Path \"C:/Windows'\n            - \"-Path 'C:\\\\Windows\"\n            - \"-Path 'C:/Windows\"\n            - '-Path C:\\\\Windows'\n            - '-Path C:/Windows'\n            - '-Path $env:windir'\n            - '-Path \"$env:windir'\n            - \"-Path '$env:windir\"\n    selection_permissions:\n        # Note: Add more suspicious permissions\n        ScriptBlockText|contains:\n            - 'FullControl'\n            - 'Allow'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: bade5735-5ab0-4aa7-a642-a11be0e40872\ndetection:\n    selection_cmdlet:\n        ScriptBlockText|contains|all:\n            - 'Set-Acl '\n            - '-AclObject '\n    selection_paths:\n        # Note: Add more suspicious paths\n        ScriptBlockText|contains:\n            - '-Path \"C:\\Windows'\n            - '-Path \"C:/Windows'\n            - \"-Path 'C:\\\\Windows\"\n            - \"-Path 'C:/Windows\"\n            - '-Path C:\\\\Windows'\n            - '-Path C:/Windows'\n            - '-Path $env:windir'\n            - '-Path \"$env:windir'\n            - \"-Path '$env:windir\"\n    selection_permissions:\n        # Note: Add more suspicious permissions\n        ScriptBlockText|contains:\n            - 'FullControl'\n            - 'Allow'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "PowerShell scripts to set the ACL to a file in the Windows folder",
      "answer": "In order to detect PowerShell scripts designed to set the ACL (Access Control List) to a file in the Windows folder, you should monitor for specific script activities on Windows systems, particularly those involving PowerShell scripts (ps_script). Look for the execution of scripts that include commands to modify ACLs, specifically using the 'Set-Acl' cmdlet coupled with the '-AclObject' parameter, indicating an intention to change permission settings.\n\nFurthermore, pay close attention to scripts that aim to alter permissions on any files or directories within the Windows folder. This can be indicated by the presence of paths pointing to the Windows directory in various formats, such as 'C:\\Windows', 'C:/Windows', and also utilizing environmental variables like '$env:windir' to reference the Windows directory. These attempts are further characterized by the intention to grant 'FullControl' or 'Allow' permissions, which significantly increases the risk by potentially giving attackers unrestricted access to critical system directories.\n\nLastly, ensure that all detection conditions involving cmdlet usage, suspicious paths, and permissions setting are met concurrently to trigger alerts. Be aware that there could be legitimate reasons for such script executions, although they are not commonly expected, thus setting the alert level to high due to the potential severity of tampering with ACLs within the Windows directory."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect use of X509Enrollment.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect use of X509Enrollment, you should monitor the creation of processes on Windows systems for specific command-line arguments that indicate the use of X509Enrollment for potentially malicious purposes. Focus on detecting the presence of either 'X509Enrollment.CBinaryConverter' or the identifier '884e2002-217d-11da-b2a4-000e7bbb2b09' within the command line arguments. These indicators are associated with actions that may utilize the X509Enrollment interface, a component that can be leveraged in various certificate-related operations, potentially including the generation or manipulation of certificates in a manner not intended by system administrators or security policies. It is important to note that while detecting these command-line arguments can point towards malicious activities, there might be legitimate administrative scripts that use this interface for valid reasons. Therefore, any detection should be investigated to distinguish between benign and malicious use, keeping in mind that the detection level is classified as medium due to the possibility of legitimate use cases. The focus on the Windows process creation log source enhances the ability to catch such activities early in their operation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'X509Enrollment.CBinaryConverter'\n            - '884e2002-217d-11da-b2a4-000e7bbb2b09'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'X509Enrollment.CBinaryConverter'\n            - '884e2002-217d-11da-b2a4-000e7bbb2b09'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Detect use of X509Enrollment",
      "answer": "In order to detect use of X509Enrollment, you should monitor the creation of processes on Windows systems for specific command-line arguments that indicate the use of X509Enrollment for potentially malicious purposes. Focus on detecting the presence of either 'X509Enrollment.CBinaryConverter' or the identifier '884e2002-217d-11da-b2a4-000e7bbb2b09' within the command line arguments. These indicators are associated with actions that may utilize the X509Enrollment interface, a component that can be leveraged in various certificate-related operations, potentially including the generation or manipulation of certificates in a manner not intended by system administrators or security policies. It is important to note that while detecting these command-line arguments can point towards malicious activities, there might be legitimate administrative scripts that use this interface for valid reasons. Therefore, any detection should be investigated to distinguish between benign and malicious use, keeping in mind that the detection level is classified as medium due to the possibility of legitimate use cases. The focus on the Windows process creation log source enhances the ability to catch such activities early in their operation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of grep to identify information about the operating system architecture. Often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\"\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of grep to identify information about the operating system architecture, often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\", you should: Monitor process creation logs on Linux systems for any instance where the 'grep' command ends its execution path, indicating it's being used. Additionally, pay attention to cases where the command line arguments end with architecture information keywords such as 'aarch64', 'arm', 'i386', 'i686', 'mips', or 'x86_64'. These indicators can suggest an attempt to pinpoint the architecture of the operating system, which may be a precursor or component of a larger reconnaissance strategy. It is important to capture all conditions where both the specific use of 'grep' and these architecture-related command line arguments occur together. However, be aware that this rule might produce unknown false positives, meaning it should be considered as having a low alert level until further verification of malicious intent can be established.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_process:\n        Image|endswith: '/grep'\n    selection_architecture:\n        CommandLine|endswith:\n            - 'aarch64'\n            - 'arm'\n            - 'i386'\n            - 'i686'\n            - 'mips'\n            - 'x86_64'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection_process:\n        Image|endswith: '/grep'\n    selection_architecture:\n        CommandLine|endswith:\n            - 'aarch64'\n            - 'arm'\n            - 'i386'\n            - 'i686'\n            - 'mips'\n            - 'x86_64'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "use of grep to identify information about the operating system architecture. Often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\"\n",
      "answer": "In order to detect the use of grep to identify information about the operating system architecture, often combined beforehand with the execution of \"uname\" or \"cat /proc/cpuinfo\", you should: Monitor process creation logs on Linux systems for any instance where the 'grep' command ends its execution path, indicating it's being used. Additionally, pay attention to cases where the command line arguments end with architecture information keywords such as 'aarch64', 'arm', 'i386', 'i686', 'mips', or 'x86_64'. These indicators can suggest an attempt to pinpoint the architecture of the operating system, which may be a precursor or component of a larger reconnaissance strategy. It is important to capture all conditions where both the specific use of 'grep' and these architecture-related command line arguments occur together. However, be aware that this rule might produce unknown false positives, meaning it should be considered as having a low alert level until further verification of malicious intent can be established."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network, you should monitor Windows process creation logs for occurrences of processes that are pertinent to networking command utilities. Specifically, look out for processes named 'net.exe' or 'net1.exe', as these are commonly used tools for querying network connections. Further, pay attention to the command line arguments passed to these executables, especially arguments ending with ' use', ' sessions', or contain ' use ', ' sessions ' in the middle of the command. These particular command-line arguments are indicative of attempts to list network connections or sessions, which can be a tactic used by attackers to gather information about network resources accessible from the currently compromised system or remote systems. \n\nBear in mind that detecting the mere usage of these commands may lead to false positives, as the 'net' command can also be used for legitimate network administration activities. Thus, a low level of alert should be assigned to these observations, and they should be further investigated to confirm malicious intent. This approach aligns with understanding the tactics and techniques outlined by MITRE ATT&CK concerning the gathering of network information, specifically focusing on the detection of potential adversary actions without relying on predefined signatures or patterns.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        - CommandLine|endswith:\n            - ' use'\n            - ' sessions'\n        - CommandLine|contains:\n            - ' use '\n            - ' sessions '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        - CommandLine|endswith:\n            - ' use'\n            - ' sessions'\n        - CommandLine|contains:\n            - ' use '\n            - ' sessions '\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
      "answer": "In order to detect adversaries attempting to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network, you should monitor Windows process creation logs for occurrences of processes that are pertinent to networking command utilities. Specifically, look out for processes named 'net.exe' or 'net1.exe', as these are commonly used tools for querying network connections. Further, pay attention to the command line arguments passed to these executables, especially arguments ending with ' use', ' sessions', or contain ' use ', ' sessions ' in the middle of the command. These particular command-line arguments are indicative of attempts to list network connections or sessions, which can be a tactic used by attackers to gather information about network resources accessible from the currently compromised system or remote systems. \n\nBear in mind that detecting the mere usage of these commands may lead to false positives, as the 'net' command can also be used for legitimate network administration activities. Thus, a low level of alert should be assigned to these observations, and they should be further investigated to confirm malicious intent. This approach aligns with understanding the tactics and techniques outlined by MITRE ATT&CK concerning the gathering of network information, specifically focusing on the detection of potential adversary actions without relying on predefined signatures or patterns."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls to read information about scheduled tasks via AtScv.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls to read information about scheduled tasks via AtScv, you should focus on monitoring for specific events generated by the RPC Firewall applied to processes that interact with remote procedure calls. Specifically:\n\n1. Ensure that the RPC Firewall is installed and configured to audit and block actions for processes, particularly those with the UUID \"1ff70682-0a51-30e8-076d-740be8cee98b\". This UUID is crucial as it identifies the specific interface associated with the remote calls you are interested in monitoring.\n\n2. Monitor the RPCFW event logs for EventID 3. EventID 3 is pertinent as it signifies that an audited action took place, which in the context of your monitoring, relates to remote RPC calls that could potentially be reading information about scheduled tasks.\n\n3. Check that the InterfaceUuid in the logged event matches \"1ff70682-0a51-30e8-076d-740be8cee98b\". This ensures that the event you're monitoring is relevant to the specific remote procedure call interface that interacts with scheduled tasks.\n\n4. Apply a filter to exclude events where the OpNum is 0 or 1. OpNums (operation numbers) specify the particular operation being called in the RPC; excluding these numbers helps to focus on the relevant operations that could indicate an attempt to read task information illicitly.\n\nGiven the high importance of detecting such activity, any matches to these criteria should be treated with a high level of scrutiny. However, be aware of the potential for unknown false positives, meaning some legitimate activities might inadvertently match these criteria until they are properly identified and whitelisted.\n\nThis approach is aligned with cybersecurity practices that aim to detect unauthorized access or malicious activity related to scheduled tasks, a technique that can be crucial for maintaining the security and integrity of systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:1ff70682-0a51-30e8-076d-740be8cee98b\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 1ff70682-0a51-30e8-076d-740be8cee98b\n    filter:\n        OpNum:\n            - 0\n            - 1\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:1ff70682-0a51-30e8-076d-740be8cee98b\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 1ff70682-0a51-30e8-076d-740be8cee98b\n    filter:\n        OpNum:\n            - 0\n            - 1\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "remote RPC calls to read information about scheduled tasks via AtScv",
      "answer": "In order to detect remote RPC calls to read information about scheduled tasks via AtScv, you should focus on monitoring for specific events generated by the RPC Firewall applied to processes that interact with remote procedure calls. Specifically:\n\n1. Ensure that the RPC Firewall is installed and configured to audit and block actions for processes, particularly those with the UUID \"1ff70682-0a51-30e8-076d-740be8cee98b\". This UUID is crucial as it identifies the specific interface associated with the remote calls you are interested in monitoring.\n\n2. Monitor the RPCFW event logs for EventID 3. EventID 3 is pertinent as it signifies that an audited action took place, which in the context of your monitoring, relates to remote RPC calls that could potentially be reading information about scheduled tasks.\n\n3. Check that the InterfaceUuid in the logged event matches \"1ff70682-0a51-30e8-076d-740be8cee98b\". This ensures that the event you're monitoring is relevant to the specific remote procedure call interface that interacts with scheduled tasks.\n\n4. Apply a filter to exclude events where the OpNum is 0 or 1. OpNums (operation numbers) specify the particular operation being called in the RPC; excluding these numbers helps to focus on the relevant operations that could indicate an attempt to read task information illicitly.\n\nGiven the high importance of detecting such activity, any matches to these criteria should be treated with a high level of scrutiny. However, be aware of the potential for unknown false positives, meaning some legitimate activities might inadvertently match these criteria until they are properly identified and whitelisted.\n\nThis approach is aligned with cybersecurity practices that aim to detect unauthorized access or malicious activity related to scheduled tasks, a technique that can be crucial for maintaining the security and integrity of systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory, you should: focus on monitoring Windows process creation logs. Specifically, look out for commands containing references to 'TrolleyExpress' followed by a single digit ranging from 7 to 9, both with and without the '.exe' extension. This range is indicative of an attempt to specify a process ID associated with lsass.exe, based on the assumption that its process ID is between 700 and 999. Additionally, any command lines ending with 'TrolleyExpress.exe -ma', which is a common parameter used in memory dumping processes, should be flagged. Further attention should be paid to instances where the executable image has been renamed to 'TrolleyExpress.exe', especially in scenarios where the original file name contains 'CtxInstall' or is absent, as these could potentially mask unauthorized memory dump attempts. It's essential to note that these criteria primarily target techniques associated with Credential Access through LSASS memory content acquisition, with a high level of scrutiny due to the likelihood of false positives being unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n      # We assume that the lsass.exe process has a process ID that's between 700 and 999 and the dumper uses just the PID as parameter\n            - '\\TrolleyExpress 7'\n            - '\\TrolleyExpress 8'\n            - '\\TrolleyExpress 9'\n            - '\\TrolleyExpress.exe 7'\n            - '\\TrolleyExpress.exe 8'\n            - '\\TrolleyExpress.exe 9'\n      # Common dumpers\n            - '\\TrolleyExpress.exe -ma '\n    renamed:\n        Image|endswith: '\\TrolleyExpress.exe'\n    filter_renamed:\n        OriginalFileName|contains: 'CtxInstall'\n    filter_empty:\n        OriginalFileName: null\n    condition: selection or ( renamed and not 1 of filter* )\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n      # We assume that the lsass.exe process has a process ID that's between 700 and 999 and the dumper uses just the PID as parameter\n            - '\\TrolleyExpress 7'\n            - '\\TrolleyExpress 8'\n            - '\\TrolleyExpress 9'\n            - '\\TrolleyExpress.exe 7'\n            - '\\TrolleyExpress.exe 8'\n            - '\\TrolleyExpress.exe 9'\n      # Common dumpers\n            - '\\TrolleyExpress.exe -ma '\n    renamed:\n        Image|endswith: '\\TrolleyExpress.exe'\n    filter_renamed:\n        OriginalFileName|contains: 'CtxInstall'\n    filter_empty:\n        OriginalFileName: null\n    condition: selection or ( renamed and not 1 of filter* )\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory",
      "answer": "In order to detect a possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory, you should: focus on monitoring Windows process creation logs. Specifically, look out for commands containing references to 'TrolleyExpress' followed by a single digit ranging from 7 to 9, both with and without the '.exe' extension. This range is indicative of an attempt to specify a process ID associated with lsass.exe, based on the assumption that its process ID is between 700 and 999. Additionally, any command lines ending with 'TrolleyExpress.exe -ma', which is a common parameter used in memory dumping processes, should be flagged. Further attention should be paid to instances where the executable image has been renamed to 'TrolleyExpress.exe', especially in scenarios where the original file name contains 'CtxInstall' or is absent, as these could potentially mask unauthorized memory dump attempts. It's essential to note that these criteria primarily target techniques associated with Credential Access through LSASS memory content acquisition, with a high level of scrutiny due to the likelihood of false positives being unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting BlackByte set three different registry values to escalate privileges and begin setting the stage for lateral movement and encryption.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempts by BlackByte to escalate privileges and begin setting the stage for lateral movement and encryption, you should monitor for specific registry modifications on Windows systems. Specifically, look for the setting of registry values that indicate an attempt to change system policies or filesystem configurations that could facilitate these actions. These registry modifications include changing the `LocalAccountTokenFilterPolicy`, `EnableLinkedConnections`, and `LongPathsEnabled` keys within the Windows Registry.\n\nWhen detecting these modifications, focus on the `SetValue` event type, which shows that a value is being changed in the registry. The specific keys to watch for are within the `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System` for `LocalAccountTokenFilterPolicy` and `EnableLinkedConnections`, and `HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem` for `LongPathsEnabled`. The modification to these keys involves setting their value to `DWORD (0x00000001)`, which typically enables certain behaviors or features that could be exploited for privilege escalation or to facilitate lateral movement.\n\nThe level of concern for these modifications is high, although it is acknowledged that the reasons for these registry modifications could be legitimate and thus could lead to potential false positives. However, due to the critical nature of these changes in the context of a potential BlackByte attack scenario, it's important to closely monitor and investigate any changes to these specific registry values.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject:\n            - HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy\n            - HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLinkedConnections\n            - HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\\LongPathsEnabled\n        Details: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject:\n            - HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy\n            - HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLinkedConnections\n            - HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\\LongPathsEnabled\n        Details: DWORD (0x00000001)\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "BlackByte set three different registry values to escalate privileges and begin setting the stage for lateral movement and encryption",
      "answer": "In order to detect attempts by BlackByte to escalate privileges and begin setting the stage for lateral movement and encryption, you should monitor for specific registry modifications on Windows systems. Specifically, look for the setting of registry values that indicate an attempt to change system policies or filesystem configurations that could facilitate these actions. These registry modifications include changing the `LocalAccountTokenFilterPolicy`, `EnableLinkedConnections`, and `LongPathsEnabled` keys within the Windows Registry.\n\nWhen detecting these modifications, focus on the `SetValue` event type, which shows that a value is being changed in the registry. The specific keys to watch for are within the `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System` for `LocalAccountTokenFilterPolicy` and `EnableLinkedConnections`, and `HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem` for `LongPathsEnabled`. The modification to these keys involves setting their value to `DWORD (0x00000001)`, which typically enables certain behaviors or features that could be exploited for privilege escalation or to facilitate lateral movement.\n\nThe level of concern for these modifications is high, although it is acknowledged that the reasons for these registry modifications could be legitimate and thus could lead to potential false positives. However, due to the critical nature of these changes in the context of a potential BlackByte attack scenario, it's important to closely monitor and investigate any changes to these specific registry values."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting LSASS process access by pypykatz for credential dumping..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect LSASS process access by pypykatz for credential dumping, you should: Monitor process access logs on Windows systems for instances where there is an attempt to access the Local Security Authority Subsystem Service (LSASS) executable. Specifically, look for access attempts to the 'lsass.exe' file. Verify that the access attempts include call traces to 'C:\\Windows\\SYSTEM32\\ntdll.dll+', 'C:\\Windows\\System32\\KERNELBASE.dll+', 'libffi-7.dll', '_ctypes.pyd+', and any 'python3*.dll+' indicating the use of Python, particularly versions 3.6 or newer as required by pypykatz. Additionally, ensure these access attempts request extensive privileges ('0x1FFFFF'), which is indicative of malicious intent such as credential dumping. This activity is classified as critical due to the sensitive nature of the information potentially being compromised.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        CallTrace|contains|all:\n            - 'C:\\Windows\\SYSTEM32\\ntdll.dll+'\n            - 'C:\\Windows\\System32\\KERNELBASE.dll+'\n            - 'libffi-7.dll'\n            - '_ctypes.pyd+'\n            - 'python3*.dll+'   # Pypy requires python>=3.6\n        GrantedAccess: '0x1FFFFF'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        CallTrace|contains|all:\n            - 'C:\\Windows\\SYSTEM32\\ntdll.dll+'\n            - 'C:\\Windows\\System32\\KERNELBASE.dll+'\n            - 'libffi-7.dll'\n            - '_ctypes.pyd+'\n            - 'python3*.dll+'   # Pypy requires python>=3.6\n        GrantedAccess: '0x1FFFFF'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "LSASS process access by pypykatz for credential dumping.",
      "answer": "In order to detect LSASS process access by pypykatz for credential dumping, you should: Monitor process access logs on Windows systems for instances where there is an attempt to access the Local Security Authority Subsystem Service (LSASS) executable. Specifically, look for access attempts to the 'lsass.exe' file. Verify that the access attempts include call traces to 'C:\\Windows\\SYSTEM32\\ntdll.dll+', 'C:\\Windows\\System32\\KERNELBASE.dll+', 'libffi-7.dll', '_ctypes.pyd+', and any 'python3*.dll+' indicating the use of Python, particularly versions 3.6 or newer as required by pypykatz. Additionally, ensure these access attempts request extensive privileges ('0x1FFFFF'), which is indicative of malicious intent such as credential dumping. This activity is classified as critical due to the sensitive nature of the information potentially being compromised."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Rule to detect the configuration of Run Once registry key. Configured payload can be run by runonce.exe /AlternateShellStartup.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the configuration of Run Once registry key, where the configured payload can be run by runonce.exe /AlternateShellStartup, you should monitor Windows registry events with a focus on changes to registry keys. Specifically, observe any modification to keys starting with 'HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' and ending with '\\StubPath'. These modifications are indicative that an application or script has been set up to execute once via the 'Run Once' mechanism in the Windows registry.\n\nFor accurate detection, differentiate between potentially malicious activities and normal behavior by evaluating the details of the modifications. Exclude entries that involve known legitimate paths and parameters for Google Chrome or Microsoft Edge browser installations. These paths are typically:\n- For Chrome: \"C:\\Program Files\\Google\\Chrome\\Application\\\" followed by parameters related to the installer 'chrmstp.exe' including flags for configuration, verbose logging, and system-level installation. In some cases, an additional flag indicating the channel (e.g., \"--channel=stable\") might be present and should be considered a normal activity indicator.\n- For Edge: Start with either \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\\" or \"C:\\Program Files\\Microsoft\\Edge\\Application\\\", followed by parameters leading to 'setup.exe' with flags for configuring user settings, verbose logging, installing at the system level, specifying it is for Microsoft Edge, and indicating a stable channel.\n\nKeep in mind that false positives may occur due to legitimate modifications of the registry keys by authorized software installations or updates. Therefore, any detection should be analyzed in the context of additional information and system behavior to ascertain malicious intent. This monitoring strategy is aligned with understanding tactics and techniques associated with application shimming and persistence methods described in the MITRE ATT&CK framework, without explicitly triggering false alarms on legitimate software operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n        TargetObject|endswith: '\\StubPath'\n    filter_chrome:\n        Details|startswith: '\"C:\\Program Files\\Google\\Chrome\\Application\\'\n        Details|contains: '\\Installer\\chrmstp.exe\" --configure-user-settings --verbose-logging --system-level' # In some cases the Details will contain an additional flag called \"--channel=stable\" at the end\n    filter_edge:\n        Details|startswith:\n            - '\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\'\n            - '\"C:\\Program Files\\Microsoft\\Edge\\Application\\'\n        Details|endswith: '\\Installer\\setup.exe\" --configure-user-settings --verbose-logging --system-level --msedge --channel=stable'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate modification of the registry key by legitimate program\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_event\ndetection:\n    selection:\n        TargetObject|startswith: 'HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components'\n        TargetObject|endswith: '\\StubPath'\n    filter_chrome:\n        Details|startswith: '\"C:\\Program Files\\Google\\Chrome\\Application\\'\n        Details|contains: '\\Installer\\chrmstp.exe\" --configure-user-settings --verbose-logging --system-level' # In some cases the Details will contain an additional flag called \"--channel=stable\" at the end\n    filter_edge:\n        Details|startswith:\n            - '\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\'\n            - '\"C:\\Program Files\\Microsoft\\Edge\\Application\\'\n        Details|endswith: '\\Installer\\setup.exe\" --configure-user-settings --verbose-logging --system-level --msedge --channel=stable'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Legitimate modification of the registry key by legitimate program\nlevel: medium\n",
      "question": "Rule to detect the configuration of Run Once registry key. Configured payload can be run by runonce.exe /AlternateShellStartup",
      "answer": "In order to detect the configuration of Run Once registry key, where the configured payload can be run by runonce.exe /AlternateShellStartup, you should monitor Windows registry events with a focus on changes to registry keys. Specifically, observe any modification to keys starting with 'HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' and ending with '\\StubPath'. These modifications are indicative that an application or script has been set up to execute once via the 'Run Once' mechanism in the Windows registry.\n\nFor accurate detection, differentiate between potentially malicious activities and normal behavior by evaluating the details of the modifications. Exclude entries that involve known legitimate paths and parameters for Google Chrome or Microsoft Edge browser installations. These paths are typically:\n- For Chrome: \"C:\\Program Files\\Google\\Chrome\\Application\\\" followed by parameters related to the installer 'chrmstp.exe' including flags for configuration, verbose logging, and system-level installation. In some cases, an additional flag indicating the channel (e.g., \"--channel=stable\") might be present and should be considered a normal activity indicator.\n- For Edge: Start with either \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\\" or \"C:\\Program Files\\Microsoft\\Edge\\Application\\\", followed by parameters leading to 'setup.exe' with flags for configuring user settings, verbose logging, installing at the system level, specifying it is for Microsoft Edge, and indicating a stable channel.\n\nKeep in mind that false positives may occur due to legitimate modifications of the registry keys by authorized software installations or updates. Therefore, any detection should be analyzed in the context of additional information and system behavior to ascertain malicious intent. This monitoring strategy is aligned with understanding tactics and techniques associated with application shimming and persistence methods described in the MITRE ATT&CK framework, without explicitly triggering false alarms on legitimate software operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of PSAttack PowerShell hack tool.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of PSAttack PowerShell hack tool, you should: Focus on monitoring PowerShell scripts within the Windows environment, specifically looking into the Script Block Logging feature. This is predicated on having Script Block Logging enabled to properly log script activity. Your detection mechanism should key in on identifying scripts that contain the specific text 'PS ATTACK!!!'. This method of detection is categorized under PowerShell script monitoring (ps_script) and is crucial for identifying instances where the PSAttack tool might be employed. Mark any detections with a high level of concern due to the potential severity of such tool usage in your environment. The absence of known false positives highlights the specificity of this detection criterion, although it remains important to consider the context within which the script was found to ensure accurate interpretation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'PS ATTACK!!!'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'PS ATTACK!!!'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "use of PSAttack PowerShell hack tool",
      "answer": "In order to detect the use of PSAttack PowerShell hack tool, you should: Focus on monitoring PowerShell scripts within the Windows environment, specifically looking into the Script Block Logging feature. This is predicated on having Script Block Logging enabled to properly log script activity. Your detection mechanism should key in on identifying scripts that contain the specific text 'PS ATTACK!!!'. This method of detection is categorized under PowerShell script monitoring (ps_script) and is crucial for identifying instances where the PSAttack tool might be employed. Mark any detections with a high level of concern due to the potential severity of such tool usage in your environment. The absence of known false positives highlights the specificity of this detection criterion, although it remains important to consider the context within which the script was found to ensure accurate interpretation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of RClone utility for exfiltration as used by various ransomware strains like REvil, Conti, FiveHands, etc, you should: \n\nFocus on log sources from the Windows operating system, specifically on the creation of new processes. To identify malicious use of the RClone command-line utility, which is often leveraged by these ransomware families for data exfiltration, examine the command-line parameters for characteristics indicative of malicious activity.\n\nOne specific pattern to watch for involves commands containing '--config ', '--no-check-certificate ', and ' copy ' all together. This combination suggests an attempt to use RClone with a specific configuration that bypasses standard security checks, a common tactic in data theft operations.\n\nAdditionally, pay attention to any process creation event where the image name ends with '\\rclone.exe' and is described as 'Rsync for cloud storage'. This directly indicates the use of RClone, which is a legitimate tool that can be repurposed for malicious intent.\n\nDelving deeper into command-line usage, consider a variety of parameters that, when used together, can signal malicious intent. These include combinations of 'pass', 'user', 'copy', 'sync', 'config', 'lsd', 'remote', 'ls', 'mega', 'pcloud', 'ftp', 'ignore-existing', 'auto-confirm', 'transfers', 'multi-thread-streams', and 'no-check-certificate '. These are various operations that, in the context of ransomware activity, can be related to unauthorized data access, synchronization, and transmission to remote locations.\n\nBe aware that all of the mentioned conditions and parameters should be carefully monitored while acknowledging that there might be legitimate uses of RClone. False positives are a consideration, and each detection must be contextualized to the broader behavior on the system.\n\nCapture and analyze the command line and parent command line details for any process that triggers these detection criteria, as these fields can provide substantial insight into the nature of the activity. Given the high level of threat associated with these ransomware families, maintaining vigilance in detecting such patterns is crucial for preventing data exfiltration attempts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_specific_options:\n        CommandLine|contains|all:\n            - '--config '\n            - '--no-check-certificate '\n            - ' copy '\n    selection_rclone_img:\n        - Image|endswith: '\\rclone.exe'\n        - Description: 'Rsync for cloud storage'\n    selection_rclone_cli:\n        CommandLine|contains:\n            - 'pass'\n            - 'user'\n            - 'copy'\n            - 'sync'\n            - 'config'\n            - 'lsd'\n            - 'remote'\n            - 'ls'\n            - 'mega'\n            - 'pcloud'\n            - 'ftp'\n            - 'ignore-existing'\n            - 'auto-confirm'\n            - 'transfers'\n            - 'multi-thread-streams'\n            - 'no-check-certificate '\n    condition: selection_specific_options or all of selection_rclone_*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_specific_options:\n        CommandLine|contains|all:\n            - '--config '\n            - '--no-check-certificate '\n            - ' copy '\n    selection_rclone_img:\n        - Image|endswith: '\\rclone.exe'\n        - Description: 'Rsync for cloud storage'\n    selection_rclone_cli:\n        CommandLine|contains:\n            - 'pass'\n            - 'user'\n            - 'copy'\n            - 'sync'\n            - 'config'\n            - 'lsd'\n            - 'remote'\n            - 'ls'\n            - 'mega'\n            - 'pcloud'\n            - 'ftp'\n            - 'ignore-existing'\n            - 'auto-confirm'\n            - 'transfers'\n            - 'multi-thread-streams'\n            - 'no-check-certificate '\n    condition: selection_specific_options or all of selection_rclone_*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - Details\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc",
      "answer": "In order to detect execution of RClone utility for exfiltration as used by various ransomware strains like REvil, Conti, FiveHands, etc, you should: \n\nFocus on log sources from the Windows operating system, specifically on the creation of new processes. To identify malicious use of the RClone command-line utility, which is often leveraged by these ransomware families for data exfiltration, examine the command-line parameters for characteristics indicative of malicious activity.\n\nOne specific pattern to watch for involves commands containing '--config ', '--no-check-certificate ', and ' copy ' all together. This combination suggests an attempt to use RClone with a specific configuration that bypasses standard security checks, a common tactic in data theft operations.\n\nAdditionally, pay attention to any process creation event where the image name ends with '\\rclone.exe' and is described as 'Rsync for cloud storage'. This directly indicates the use of RClone, which is a legitimate tool that can be repurposed for malicious intent.\n\nDelving deeper into command-line usage, consider a variety of parameters that, when used together, can signal malicious intent. These include combinations of 'pass', 'user', 'copy', 'sync', 'config', 'lsd', 'remote', 'ls', 'mega', 'pcloud', 'ftp', 'ignore-existing', 'auto-confirm', 'transfers', 'multi-thread-streams', and 'no-check-certificate '. These are various operations that, in the context of ransomware activity, can be related to unauthorized data access, synchronization, and transmission to remote locations.\n\nBe aware that all of the mentioned conditions and parameters should be carefully monitored while acknowledging that there might be legitimate uses of RClone. False positives are a consideration, and each detection must be contextualized to the broader behavior on the system.\n\nCapture and analyze the command line and parent command line details for any process that triggers these detection criteria, as these fields can provide substantial insight into the nature of the activity. Given the high level of threat associated with these ransomware families, maintaining vigilance in detecting such patterns is crucial for preventing data exfiltration attempts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential preparation for data exfiltration using tunneling techniques, particularly through the installation of well-known TAP software, you should focus on monitoring Windows security event logs. Specifically, it is crucial to ensure that the 'System Security Extension' audit subcategory is enabled, which allows for the logging of Event ID (EID) 4697. This event ID is significant as it is recorded when a service is installed on the system. An important indicator of suspicious activity is when the service file name associated with the event contains 'tap0901', which is commonly linked to OpenVPN TAP installations.\n\nIt's essential to pay attention to this activity because, while OpenVPN's TAP driver installation is a legitimate action in many contexts, it can be misused in this scenario for setting up a tunneling mechanism that attackers could leverage for data exfiltration. Consequently, any detection of an EID 4697 event with 'tap0901' in the service file name should be carefully investigated. However, it's also important to consider the possibility of false positives, particularly in environments where the OpenVPN TAP installation is expected and legitimate.\n\nThis monitoring strategy aligns with the tactics and techniques associated with Command and Control and Exfiltration, which involve the establishment of communication channels and the movement of data out of a target network in a manner that evades detection. This approach not only helps in identifying potential threats but also aids in understanding the context of their operations, allowing for more effective responses to prevent data breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains: 'tap0901'\n    condition: selection\nfalsepositives:\n    - Legitimate OpenVPN TAP insntallation\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697\ndetection:\n    selection:\n        EventID: 4697\n        ServiceFileName|contains: 'tap0901'\n    condition: selection\nfalsepositives:\n    - Legitimate OpenVPN TAP insntallation\nlevel: medium\n",
      "question": "Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques",
      "answer": "In order to detect potential preparation for data exfiltration using tunneling techniques, particularly through the installation of well-known TAP software, you should focus on monitoring Windows security event logs. Specifically, it is crucial to ensure that the 'System Security Extension' audit subcategory is enabled, which allows for the logging of Event ID (EID) 4697. This event ID is significant as it is recorded when a service is installed on the system. An important indicator of suspicious activity is when the service file name associated with the event contains 'tap0901', which is commonly linked to OpenVPN TAP installations.\n\nIt's essential to pay attention to this activity because, while OpenVPN's TAP driver installation is a legitimate action in many contexts, it can be misused in this scenario for setting up a tunneling mechanism that attackers could leverage for data exfiltration. Consequently, any detection of an EID 4697 event with 'tap0901' in the service file name should be carefully investigated. However, it's also important to consider the possibility of false positives, particularly in environments where the OpenVPN TAP installation is expected and legitimate.\n\nThis monitoring strategy aligns with the tactics and techniques associated with Command and Control and Exfiltration, which involve the establishment of communication channels and the movement of data out of a target network in a manner that evades detection. This approach not only helps in identifying potential threats but also aids in understanding the context of their operations, allowing for more effective responses to prevent data breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of Moriya rootkit as described in the securelist's Operation TunnelSnake report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Moriya rootkit as described in the securelist's Operation TunnelSnake report, you should: Monitor Windows System logs for events generated by the Service Control Manager with a specific focus on EventID 7045. This event indicates a service installation, which is critical in this context as the Moriya rootkit utilizes a service named ZzNetSvc during its deployment. By isolating logs that report the creation of this particular service, it becomes possible to identify potential traces of the Moriya rootkit on a system. Given the severity of this threat, any detection of such activity should be deemed critical. Be aware that detections might have some unknown false positives, but due to the critical level of this threat, each alert should be investigated thoroughly. This approach primarily falls under the tactics and techniques related to Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: ZzNetSvc\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        ServiceName: ZzNetSvc\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "use of Moriya rootkit as described in the securelist's Operation TunnelSnake report",
      "answer": "In order to detect the use of Moriya rootkit as described in the securelist's Operation TunnelSnake report, you should: Monitor Windows System logs for events generated by the Service Control Manager with a specific focus on EventID 7045. This event indicates a service installation, which is critical in this context as the Moriya rootkit utilizes a service named ZzNetSvc during its deployment. By isolating logs that report the creation of this particular service, it becomes possible to identify potential traces of the Moriya rootkit on a system. Given the severity of this threat, any detection of such activity should be deemed critical. Be aware that detections might have some unknown false positives, but due to the critical level of this threat, each alert should be investigated thoroughly. This approach primarily falls under the tactics and techniques related to Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious Django web application framework exceptions that could indicate exploitation attempts.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious Django web application framework exceptions that could indicate exploitation attempts, you should monitor the application logs for specific keywords that represent various types of suspicious activities. These activities are typically flagged by Django when certain operations that could potentially harm the security of the web application are performed. Specifically, look out for logs containing exceptions such as SuspiciousOperation and its subclasses including DisallowedHost, which indicates an unauthorized domain access attempt; DisallowedModelAdminLookup, signaling potentially harmful queries to the database through the admin interface; DisallowedModelAdminToField, denoting unauthorized attempts to modify database fields; DisallowedRedirect, flagging attempts to redirect users to untrusted sites; InvalidSessionKey, pointing to the use of an invalid session identifier; RequestDataTooBig, indicating an unusually large request payload that could be an attempt to cause a denial of service; SuspiciousFileOperation, marking attempts to access or modify files in an unauthorized manner; SuspiciousMultipartForm, which could signify an attempt to upload malicious files; SuspiciousSession, identifying unusual session patterns that could indicate session hijacking; TooManyFieldsSent, signaling an attack attempt that involves sending excessive amounts of data fields; and finally, PermissionDenied, which could highlight unauthorized access attempts. It's crucial to take note of false positives that might arise from application bugs. The severity of these signals is considered medium, indicating that while they might not always represent a security threat, they warrant investigation to ensure the integrity and security of the web application.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: application\n    product: django\ndetection:\n    keywords:\n        - SuspiciousOperation\n        # Subclasses of SuspiciousOperation\n        - DisallowedHost\n        - DisallowedModelAdminLookup\n        - DisallowedModelAdminToField\n        - DisallowedRedirect\n        - InvalidSessionKey\n        - RequestDataTooBig\n        - SuspiciousFileOperation\n        - SuspiciousMultipartForm\n        - SuspiciousSession\n        - TooManyFieldsSent\n        # Further security-related exceptions\n        - PermissionDenied\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: application\n    product: django\ndetection:\n    keywords:\n        - SuspiciousOperation\n        # Subclasses of SuspiciousOperation\n        - DisallowedHost\n        - DisallowedModelAdminLookup\n        - DisallowedModelAdminToField\n        - DisallowedRedirect\n        - InvalidSessionKey\n        - RequestDataTooBig\n        - SuspiciousFileOperation\n        - SuspiciousMultipartForm\n        - SuspiciousSession\n        - TooManyFieldsSent\n        # Further security-related exceptions\n        - PermissionDenied\n    condition: keywords\nfalsepositives:\n    - Application bugs\nlevel: medium\n",
      "question": "suspicious Django web application framework exceptions that could indicate exploitation attempts",
      "answer": "In order to detect suspicious Django web application framework exceptions that could indicate exploitation attempts, you should monitor the application logs for specific keywords that represent various types of suspicious activities. These activities are typically flagged by Django when certain operations that could potentially harm the security of the web application are performed. Specifically, look out for logs containing exceptions such as SuspiciousOperation and its subclasses including DisallowedHost, which indicates an unauthorized domain access attempt; DisallowedModelAdminLookup, signaling potentially harmful queries to the database through the admin interface; DisallowedModelAdminToField, denoting unauthorized attempts to modify database fields; DisallowedRedirect, flagging attempts to redirect users to untrusted sites; InvalidSessionKey, pointing to the use of an invalid session identifier; RequestDataTooBig, indicating an unusually large request payload that could be an attempt to cause a denial of service; SuspiciousFileOperation, marking attempts to access or modify files in an unauthorized manner; SuspiciousMultipartForm, which could signify an attempt to upload malicious files; SuspiciousSession, identifying unusual session patterns that could indicate session hijacking; TooManyFieldsSent, signaling an attack attempt that involves sending excessive amounts of data fields; and finally, PermissionDenied, which could highlight unauthorized access attempts. It's crucial to take note of false positives that might arise from application bugs. The severity of these signals is considered medium, indicating that while they might not always represent a security threat, they warrant investigation to ensure the integrity and security of the web application."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence, which will get invoked when an application crashes, you should: Monitor Windows registry settings specifically under the category for registry changes, targeting the Windows product. Focus on detecting events where a value is being set (EventType: SetValue) specifically to the registry path ending with '\\Microsoft\\.NETFramework\\DbgManagedDebugger'. It is critical to exclude events where the details match a legitimate debugger setup, specifically the use of \"C:\\Windows\\system32\\vsjitdebugger.exe\" with various process and environment parameters. This exclusion helps in reducing false positives that are common in environments where developers might legitimately set up a debugger. Be aware that changing registry values, particularly in the context described, can be a technique used to maintain persistence by ensuring a debugger gets called upon application crashes, providing a covert way to execute malicious payloads. This monitoring should be considered of medium importance and should be attentive to the potential legitimate use of the debugger setup, particularly on developers\u2019 machines, to avoid unnecessary alarms. The tactics and techniques associated with this behavior include persistence, as it aims to ensure continuous malicious presence on the affected system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\.NETFramework\\DbgManagedDebugger'\n    filter:\n        Details: '\"C:\\Windows\\system32\\vsjitdebugger.exe\" PID %d APPDOM %d EXTEXT \"%s\" EVTHDL %d'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of the key to setup a debugger. Which is often the case on developers machines\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\Microsoft\\.NETFramework\\DbgManagedDebugger'\n    filter:\n        Details: '\"C:\\Windows\\system32\\vsjitdebugger.exe\" PID %d APPDOM %d EXTEXT \"%s\" EVTHDL %d'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate use of the key to setup a debugger. Which is often the case on developers machines\nlevel: medium\n",
      "question": "addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes",
      "answer": "In order to detect the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence, which will get invoked when an application crashes, you should: Monitor Windows registry settings specifically under the category for registry changes, targeting the Windows product. Focus on detecting events where a value is being set (EventType: SetValue) specifically to the registry path ending with '\\Microsoft\\.NETFramework\\DbgManagedDebugger'. It is critical to exclude events where the details match a legitimate debugger setup, specifically the use of \"C:\\Windows\\system32\\vsjitdebugger.exe\" with various process and environment parameters. This exclusion helps in reducing false positives that are common in environments where developers might legitimately set up a debugger. Be aware that changing registry values, particularly in the context described, can be a technique used to maintain persistence by ensuring a debugger gets called upon application crashes, providing a covert way to execute malicious payloads. This monitoring should be considered of medium importance and should be attentive to the potential legitimate use of the debugger setup, particularly on developers\u2019 machines, to avoid unnecessary alarms. The tactics and techniques associated with this behavior include persistence, as it aims to ensure continuous malicious presence on the affected system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should monitor Windows PowerShell module logs for specific command-line patterns that indicate such activity. This involves tracking commands that utilize the 'Compress-Archive' function, a part of PowerShell used to create zip archives. Specifically, you should look for commands that include both the '-Path' and '-DestinationPath' parameters, indicating the source files to compress and the location where the compressed archive should be stored. It's critical to focus on commands that specify the destination path as the Windows temporary folder, denoted by `$env:TEMP\\`. This pattern of behavior is indicative of attackers leveraging built-in tools to compress potentially sensitive information before exfiltration, aligning with tactics and techniques such as Resource Development and Collection. While this detection strategy is important for identifying suspicious zipping activity, it's also advised to be aware of potential unknown false positives, given the legitimate use of 'Compress-Archive' in non-malicious contexts. The monitoring of these activities is categorized as medium level due to the possibility of both legitimate and malicious use cases.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        ContextInfo|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_4103:\n        ContextInfo|contains|all:\n            - 'Compress-Archive '\n            - ' -Path '\n            - ' -DestinationPath '\n            - '$env:TEMP\\'\n    condition: selection_4103\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration",
      "answer": "In order to use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration, you should monitor Windows PowerShell module logs for specific command-line patterns that indicate such activity. This involves tracking commands that utilize the 'Compress-Archive' function, a part of PowerShell used to create zip archives. Specifically, you should look for commands that include both the '-Path' and '-DestinationPath' parameters, indicating the source files to compress and the location where the compressed archive should be stored. It's critical to focus on commands that specify the destination path as the Windows temporary folder, denoted by `$env:TEMP\\`. This pattern of behavior is indicative of attackers leveraging built-in tools to compress potentially sensitive information before exfiltration, aligning with tactics and techniques such as Resource Development and Collection. While this detection strategy is important for identifying suspicious zipping activity, it's also advised to be aware of potential unknown false positives, given the legitimate use of 'Compress-Archive' in non-malicious contexts. The monitoring of these activities is categorized as medium level due to the possibility of both legitimate and malicious use cases."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting patterns as noticed in exploitation of Windows CVE-2021-31979 CVE-2021-33771 vulnerability and DevilsTongue malware by threat group Sourgum.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect patterns as noticed in exploitation of Windows CVE-2021-31979, CVE-2021-33771 vulnerability and DevilsTongue malware by threat group Sourgum, you should: monitor file events within the Windows operating system, specifically looking for any access, creation, or modification of a specific set of files. These files include various system and configuration files that are known to be targeted or associated with the aforementioned vulnerabilities and malware. Such files are located in system directories including but not limited to 'C:\\Windows\\system32' and its subdirectories related to IME, configurations, and recovery, such as 'physmem.sys', multiple '.dll' files associated with different input methods, 'pac.dat', 'TupTask.dat', 'startwus.dat', and 'WimBootConfigurations.ini'. The detection of interactions with these files is critical given their association with known security vulnerabilities and malicious activity by Sourgum. Considering the analysis, such detection efforts are marked with a level of critical urgency due to the high impact of potential exploits and the low likelihood of false positives in this context.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains:\n            - 'C:\\Windows\\system32\\physmem.sys'\n            - 'C:\\Windows\\System32\\IME\\IMEJP\\imjpueact.dll'\n            - 'C:\\Windows\\system32\\ime\\IMETC\\IMTCPROT.DLL'\n            - 'C:\\Windows\\system32\\ime\\SHARED\\imecpmeid.dll'\n            - 'C:\\Windows\\system32\\config\\spp\\ServiceState\\Recovery\\pac.dat'\n            - 'C:\\Windows\\system32\\config\\cy-GB\\Setup\\SKB\\InputMethod\\TupTask.dat'\n            - 'C:\\Windows\\system32\\config\\config\\startwus.dat'\n            - 'C:\\Windows\\system32\\ime\\SHARED\\WimBootConfigurations.ini'\n            - 'C:\\Windows\\system32\\ime\\IMEJP\\WimBootConfigurations.ini'\n            - 'C:\\Windows\\system32\\ime\\IMETC\\WimBootConfigurations.ini'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains:\n            - 'C:\\Windows\\system32\\physmem.sys'\n            - 'C:\\Windows\\System32\\IME\\IMEJP\\imjpueact.dll'\n            - 'C:\\Windows\\system32\\ime\\IMETC\\IMTCPROT.DLL'\n            - 'C:\\Windows\\system32\\ime\\SHARED\\imecpmeid.dll'\n            - 'C:\\Windows\\system32\\config\\spp\\ServiceState\\Recovery\\pac.dat'\n            - 'C:\\Windows\\system32\\config\\cy-GB\\Setup\\SKB\\InputMethod\\TupTask.dat'\n            - 'C:\\Windows\\system32\\config\\config\\startwus.dat'\n            - 'C:\\Windows\\system32\\ime\\SHARED\\WimBootConfigurations.ini'\n            - 'C:\\Windows\\system32\\ime\\IMEJP\\WimBootConfigurations.ini'\n            - 'C:\\Windows\\system32\\ime\\IMETC\\WimBootConfigurations.ini'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "patterns as noticed in exploitation of Windows CVE-2021-31979 CVE-2021-33771 vulnerability and DevilsTongue malware by threat group Sourgum",
      "answer": "In order to detect patterns as noticed in exploitation of Windows CVE-2021-31979, CVE-2021-33771 vulnerability and DevilsTongue malware by threat group Sourgum, you should: monitor file events within the Windows operating system, specifically looking for any access, creation, or modification of a specific set of files. These files include various system and configuration files that are known to be targeted or associated with the aforementioned vulnerabilities and malware. Such files are located in system directories including but not limited to 'C:\\Windows\\system32' and its subdirectories related to IME, configurations, and recovery, such as 'physmem.sys', multiple '.dll' files associated with different input methods, 'pac.dat', 'TupTask.dat', 'startwus.dat', and 'WimBootConfigurations.ini'. The detection of interactions with these files is critical given their association with known security vulnerabilities and malicious activity by Sourgum. Considering the analysis, such detection efforts are marked with a level of critical urgency due to the high impact of potential exploits and the low likelihood of false positives in this context."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Powershell Remove-Item  with -Path to delete a file or a folder with \"-Recurse\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential malicious activity involving PowerShell's Remove-Item cmdlet used with the -Path parameter to delete a file or folder recursively, you should monitor Windows PowerShell script executions. Specifically, look for script blocks that include both the \"Remove-Item\" command and the \"-Path\" argument. However, to reduce irrelevant alerts, exclude any script block that interacts with the Windows Registry paths \"HKCU:\\\" and \"HKLM:\\\". This approach aims to identify scripts that might be used for harmful purposes such as deleting critical files or folders but will disregard those accessing the registry, thereby reducing false positive alerts like legitimate administrative scripts. The focus is on identifying events that could indicate misuse of PowerShell for deletion operations, which might be indicative of malicious activities such as covering tracks or disrupting services. The detection predominantly relies on having Script Block Logging enabled, a feature in Windows that records executed PowerShell script content, enabling thorough analysis of script actions. It's worth noting that this detection strategy is considered to have a low level of false positives, although legitimate uses of PowerShell scripts that perform similar actions might occasionally be flagged.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Remove-Item\n            - '-Path '\n    filter_reg:\n        ScriptBlockText|contains:\n            - 'HKCU:\\'\n            - 'HKLM:\\'\n    condition: selection and not filter_reg\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - Remove-Item\n            - '-Path '\n    filter_reg:\n        ScriptBlockText|contains:\n            - 'HKCU:\\'\n            - 'HKLM:\\'\n    condition: selection and not filter_reg\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: low\n",
      "question": "Powershell Remove-Item  with -Path to delete a file or a folder with \"-Recurse\"",
      "answer": "In order to detect potential malicious activity involving PowerShell's Remove-Item cmdlet used with the -Path parameter to delete a file or folder recursively, you should monitor Windows PowerShell script executions. Specifically, look for script blocks that include both the \"Remove-Item\" command and the \"-Path\" argument. However, to reduce irrelevant alerts, exclude any script block that interacts with the Windows Registry paths \"HKCU:\\\" and \"HKLM:\\\". This approach aims to identify scripts that might be used for harmful purposes such as deleting critical files or folders but will disregard those accessing the registry, thereby reducing false positive alerts like legitimate administrative scripts. The focus is on identifying events that could indicate misuse of PowerShell for deletion operations, which might be indicative of malicious activities such as covering tracks or disrupting services. The detection predominantly relies on having Script Block Logging enabled, a feature in Windows that records executed PowerShell script content, enabling thorough analysis of script actions. It's worth noting that this detection strategy is considered to have a low level of false positives, although legitimate uses of PowerShell scripts that perform similar actions might occasionally be flagged."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible bypass EDR and SIEM via abnormal user account name..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible bypass EDR and SIEM via abnormal user account name, you should: Monitor for specific events within Windows Security logs that may indicate suspicious activity related to user accounts. Keep an eye out for events where a new user account is created (Event ID 4720) or an existing user account is renamed (Event ID 4781), especially if the account name contains a '$' symbol, as this could signify an attempt to create hidden or system accounts that are typically not scrutinized. These actions may be used by attackers to evade detection mechanisms. Pay attention to the event details such as the account name involved in the creation or renaming process (SamAccountName for creation, NewTargetUserName for renaming), as well as the user who executed the action (SubjectUserName). Although there might be legitimate cases where accounts with a '$' in the name are created, these occurrences are unusual and should be investigated to rule out malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4720 # create user\n        SamAccountName|contains: '$'\n    selection2:\n        EventID: 4781 # rename user\n        NewTargetUserName|contains: '$'\n    condition: 1 of selection*\nfields:\n    - EventID\n    - SamAccountName\n    - SubjectUserName\n    - NewTargetUserName\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4720 # create user\n        SamAccountName|contains: '$'\n    selection2:\n        EventID: 4781 # rename user\n        NewTargetUserName|contains: '$'\n    condition: 1 of selection*\nfields:\n    - EventID\n    - SamAccountName\n    - SubjectUserName\n    - NewTargetUserName\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "possible bypass EDR and SIEM via abnormal user account name.",
      "answer": "In order to detect possible bypass EDR and SIEM via abnormal user account name, you should: Monitor for specific events within Windows Security logs that may indicate suspicious activity related to user accounts. Keep an eye out for events where a new user account is created (Event ID 4720) or an existing user account is renamed (Event ID 4781), especially if the account name contains a '$' symbol, as this could signify an attempt to create hidden or system accounts that are typically not scrutinized. These actions may be used by attackers to evade detection mechanisms. Pay attention to the event details such as the account name involved in the creation or renaming process (SamAccountName for creation, NewTargetUserName for renaming), as well as the user who executed the action (SubjectUserName). Although there might be legitimate cases where accounts with a '$' in the name are created, these occurrences are unusual and should be investigated to rule out malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters, used as an obfuscation and masquerading techniques with only \"perfect\" homoglyphs included; characters that are indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters, you should: monitor file events on Windows systems for filenames containing specific unicode characters that resemble ASCII characters closely. These unicode characters include a wide range of Cyrillic and Greek letters that look similar to English letters (e.g., Cyrillic '\u0410' that looks like English 'A', Greek '\u0391' that looks like English 'A', etc.), effectively covering both uppercase and lowercase instances. The detection strategy involves scanning the filenames for these homoglyph characters to uncover potentially deceptive files that may be used in an attack to disguise malicious actions or objects. It's important to be aware of potential false positives, especially in environments where Cyrillic or Greek text is commonly used in file names, and adjustments might be necessary to minimize the impact on legitimate operations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_upper:\n        TargetFilename|contains:\n            - \"\\u0410\" # \u0410/A\n            - \"\\u0412\" # \u0412/B\n            - \"\\u0415\" # \u0415/E\n            - \"\\u041a\" # \u041a/K\n            - \"\\u041c\" # \u041c/M\n            - \"\\u041d\" # \u041d/H\n            - \"\\u041e\" # \u041e/O\n            - \"\\u0420\" # \u0420/P\n            - \"\\u0421\" # \u0421/C\n            - \"\\u0422\" # \u0422/T\n            - \"\\u0425\" # \u0425/X\n            - \"\\u0405\" # \u0405/S\n            - \"\\u0406\" # \u0406/I\n            - \"\\u0408\" # \u0408/J\n            - \"\\u04ae\" # \u04ae/Y\n            - \"\\u04c0\" # \u04c0/I\n            - \"\\u050C\" # \u050c/G\n            - \"\\u051a\" # \u051a/Q\n            - \"\\u051c\" # \u051c/W\n            - \"\\u0391\" # \u0391/A\n            - \"\\u0392\" # \u0392/B\n            - \"\\u0395\" # \u0395/E\n            - \"\\u0396\" # \u0396/Z\n            - \"\\u0397\" # \u0397/H\n            - \"\\u0399\" # \u0399/I\n            - \"\\u039a\" # \u039a/K\n            - \"\\u039c\" # \u039c/M\n            - \"\\u039d\" # \u039d/N\n            - \"\\u039f\" # \u039f/O\n            - \"\\u03a1\" # \u03a1/P\n            - \"\\u03a4\" # \u03a4/T\n            - \"\\u03a5\" # \u03a5/Y\n            - \"\\u03a7\" # \u03a7/X\n    selection_lower:\n        TargetFilename|contains:\n            - \"\\u0430\" # \u0430/a\n            - \"\\u0435\" # \u0435/e\n            - \"\\u043e\" # \u043e/o\n            - \"\\u0440\" # \u0440/p\n            - \"\\u0441\" # \u0441/c\n            - \"\\u0445\" # \u0445/x\n            - \"\\u0455\" # \u0455/s\n            - \"\\u0456\" # \u0456/i\n            - \"\\u04cf\" # \u04cf/l\n            - \"\\u0458\" # \u0458/j\n            - \"\\u04bb\" # \u04bb/h\n            - \"\\u0501\" # \u0501/d\n            - \"\\u051b\" # \u051b/q\n            - \"\\u051d\" # \u051d/w\n            - \"\\u03bf\" # \u03bf/o\n    condition: 1 of selection_*\nfalsepositives:\n    - File names with legitimate Cyrillic text. Will likely require tuning (or not be usable) in countries where these alphabets are in use.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection_upper:\n        TargetFilename|contains:\n            - \"\\u0410\" # \u0410/A\n            - \"\\u0412\" # \u0412/B\n            - \"\\u0415\" # \u0415/E\n            - \"\\u041a\" # \u041a/K\n            - \"\\u041c\" # \u041c/M\n            - \"\\u041d\" # \u041d/H\n            - \"\\u041e\" # \u041e/O\n            - \"\\u0420\" # \u0420/P\n            - \"\\u0421\" # \u0421/C\n            - \"\\u0422\" # \u0422/T\n            - \"\\u0425\" # \u0425/X\n            - \"\\u0405\" # \u0405/S\n            - \"\\u0406\" # \u0406/I\n            - \"\\u0408\" # \u0408/J\n            - \"\\u04ae\" # \u04ae/Y\n            - \"\\u04c0\" # \u04c0/I\n            - \"\\u050C\" # \u050c/G\n            - \"\\u051a\" # \u051a/Q\n            - \"\\u051c\" # \u051c/W\n            - \"\\u0391\" # \u0391/A\n            - \"\\u0392\" # \u0392/B\n            - \"\\u0395\" # \u0395/E\n            - \"\\u0396\" # \u0396/Z\n            - \"\\u0397\" # \u0397/H\n            - \"\\u0399\" # \u0399/I\n            - \"\\u039a\" # \u039a/K\n            - \"\\u039c\" # \u039c/M\n            - \"\\u039d\" # \u039d/N\n            - \"\\u039f\" # \u039f/O\n            - \"\\u03a1\" # \u03a1/P\n            - \"\\u03a4\" # \u03a4/T\n            - \"\\u03a5\" # \u03a5/Y\n            - \"\\u03a7\" # \u03a7/X\n    selection_lower:\n        TargetFilename|contains:\n            - \"\\u0430\" # \u0430/a\n            - \"\\u0435\" # \u0435/e\n            - \"\\u043e\" # \u043e/o\n            - \"\\u0440\" # \u0440/p\n            - \"\\u0441\" # \u0441/c\n            - \"\\u0445\" # \u0445/x\n            - \"\\u0455\" # \u0455/s\n            - \"\\u0456\" # \u0456/i\n            - \"\\u04cf\" # \u04cf/l\n            - \"\\u0458\" # \u0458/j\n            - \"\\u04bb\" # \u04bb/h\n            - \"\\u0501\" # \u0501/d\n            - \"\\u051b\" # \u051b/q\n            - \"\\u051d\" # \u051d/w\n            - \"\\u03bf\" # \u03bf/o\n    condition: 1 of selection_*\nfalsepositives:\n    - File names with legitimate Cyrillic text. Will likely require tuning (or not be usable) in countries where these alphabets are in use.\nlevel: medium\n",
      "question": "presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n",
      "answer": "In order to detect the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters, used as an obfuscation and masquerading techniques with only \"perfect\" homoglyphs included; characters that are indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters, you should: monitor file events on Windows systems for filenames containing specific unicode characters that resemble ASCII characters closely. These unicode characters include a wide range of Cyrillic and Greek letters that look similar to English letters (e.g., Cyrillic '\u0410' that looks like English 'A', Greek '\u0391' that looks like English 'A', etc.), effectively covering both uppercase and lowercase instances. The detection strategy involves scanning the filenames for these homoglyph characters to uncover potentially deceptive files that may be used in an attack to disguise malicious actions or objects. It's important to be aware of potential false positives, especially in environments where Cyrillic or Greek text is commonly used in file names, and adjustments might be necessary to minimize the impact on legitimate operations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g. AppData).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g., AppData), you should monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\csc.exe'. This indicates the use of the Microsoft C# Compiler, which could be utilized by an attacker to compile malicious code on the fly. Attention should be given to command lines that contain paths pointing to potentially suspicious folders such as '\\AppData\\' and '\\Windows\\Temp\\', which are commonly used by malware to execute or store payloads due to their less restrictive permissions and general oversight.\n\nHowever, it's also paramount to apply certain filters to reduce false-positive alerts. Processes spawned from 'C:\\Program Files' are typically considered safe, thus any process creation with a parent image starting with this path might be excluded from alerts. Similarly, parent images that end with '\\sdiagnhost.exe', '\\w3wp.exe', or '\\choco.exe', as well as processes initiated with command lines containing '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection', should also be deemed as potentially legitimate activities and excluded from being flagged as suspicious. These filters are crucial for focusing on truly malicious activities and mitigating the noise from legitimate software operations within these directories.\n\nThis approach emphasizes the importance of scrutinizing process creation events where 'csc.exe' is employed in conjunction with questionable directories, while also considering the context of the parent process to distinguish between malicious use and legitimate software activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csc.exe'\n        CommandLine|contains:\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    filter:\n        - ParentImage|startswith: 'C:\\Program Files'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n        - ParentImage|endswith:\n            - '\\sdiagnhost.exe'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n            - '\\w3wp.exe'        # https://twitter.com/gabriele_pippi/status/1206907900268072962\n            - '\\choco.exe'       # Chocolatey https://chocolatey.org/\n        - ParentCommandLine|contains: '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate software from program files - https://twitter.com/gN3mes1s/status/1206874118282448897\n    - Legitimate Microsoft software - https://twitter.com/gabriele_pippi/status/1206907900268072962\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csc.exe'\n        CommandLine|contains:\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    filter:\n        - ParentImage|startswith: 'C:\\Program Files'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n        - ParentImage|endswith:\n            - '\\sdiagnhost.exe'  # https://twitter.com/gN3mes1s/status/1206874118282448897\n            - '\\w3wp.exe'        # https://twitter.com/gabriele_pippi/status/1206907900268072962\n            - '\\choco.exe'       # Chocolatey https://chocolatey.org/\n        - ParentCommandLine|contains: '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate software from program files - https://twitter.com/gN3mes1s/status/1206874118282448897\n    - Legitimate Microsoft software - https://twitter.com/gabriele_pippi/status/1206907900268072962\nlevel: medium\n",
      "question": "suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g. AppData)",
      "answer": "In order to detect a suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g., AppData), you should monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image ends with '\\csc.exe'. This indicates the use of the Microsoft C# Compiler, which could be utilized by an attacker to compile malicious code on the fly. Attention should be given to command lines that contain paths pointing to potentially suspicious folders such as '\\AppData\\' and '\\Windows\\Temp\\', which are commonly used by malware to execute or store payloads due to their less restrictive permissions and general oversight.\n\nHowever, it's also paramount to apply certain filters to reduce false-positive alerts. Processes spawned from 'C:\\Program Files' are typically considered safe, thus any process creation with a parent image starting with this path might be excluded from alerts. Similarly, parent images that end with '\\sdiagnhost.exe', '\\w3wp.exe', or '\\choco.exe', as well as processes initiated with command lines containing '\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection', should also be deemed as potentially legitimate activities and excluded from being flagged as suspicious. These filters are crucial for focusing on truly malicious activities and mitigating the noise from legitimate software operations within these directories.\n\nThis approach emphasizes the importance of scrutinizing process creation events where 'csc.exe' is employed in conjunction with questionable directories, while also considering the context of the parent process to distinguish between malicious use and legitimate software activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection of sc.exe utility adding a new service with special permission which hides that service..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the sc.exe utility adding a new service with special permission which hides that service, you should: monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image either ends with '\\sc.exe' or has an original file name of 'sc.exe'. Additionally, you should look for command line arguments containing 'sdset'. Both of these conditions should be met to confidently identify the suspicious activity. This monitoring is aimed at identifying malicious attempts to manipulate services, a technique that could be utilized to maintain persistence, evade detection, or gain unauthorized access to system resources.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'sdset'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\sc.exe'\n        - OriginalFileName: 'sc.exe'\n    selection_cli:\n        CommandLine|contains: 'sdset'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detection of sc.exe utility adding a new service with special permission which hides that service.",
      "answer": "In order to detect the sc.exe utility adding a new service with special permission which hides that service, you should: monitor for the creation of processes on Windows systems, specifically focusing on instances where the process image either ends with '\\sc.exe' or has an original file name of 'sc.exe'. Additionally, you should look for command line arguments containing 'sdset'. Both of these conditions should be met to confidently identify the suspicious activity. This monitoring is aimed at identifying malicious attempts to manipulate services, a technique that could be utilized to maintain persistence, evade detection, or gain unauthorized access to system resources."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls to create or execute a scheduled task via SASec.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls to create or execute a scheduled task via SASec, you should: Monitor the application logs specifically from RPC firewalls. It is essential to have the RPC Firewall installed and configured to audit and block processes matching the UUID \"378e52b0-c0a9-11cf-822d-00aa0051e40f\". Pay particular attention to logs tagged as \"RPCFW\" within the Event Log. Look for events with the ID of 3, which signifies an interaction with the targeted interface UUID. Specifically, watch for operation numbers 0 and 1, as these are indicative of the creation or execution of a scheduled task through remote procedure calls. Be aware that while the detection level is set to high, there may be unknown false positives, indicating the potential for legitimate activities being flagged. Understanding and monitoring for these specific attributes will aid in identifying suspicious activities associated with scheduling tasks remotely, which could be a sign of malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:378e52b0-c0a9-11cf-822d-00aa0051e40f\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 378e52b0-c0a9-11cf-822d-00aa0051e40f\n        OpNum:\n            - 0\n            - 1\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:378e52b0-c0a9-11cf-822d-00aa0051e40f\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid: 378e52b0-c0a9-11cf-822d-00aa0051e40f\n        OpNum:\n            - 0\n            - 1\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "remote RPC calls to create or execute a scheduled task via SASec",
      "answer": "In order to detect remote RPC calls to create or execute a scheduled task via SASec, you should: Monitor the application logs specifically from RPC firewalls. It is essential to have the RPC Firewall installed and configured to audit and block processes matching the UUID \"378e52b0-c0a9-11cf-822d-00aa0051e40f\". Pay particular attention to logs tagged as \"RPCFW\" within the Event Log. Look for events with the ID of 3, which signifies an interaction with the targeted interface UUID. Specifically, watch for operation numbers 0 and 1, as these are indicative of the creation or execution of a scheduled task through remote procedure calls. Be aware that while the detection level is set to high, there may be unknown false positives, indicating the potential for legitimate activities being flagged. Understanding and monitoring for these specific attributes will aid in identifying suspicious activities associated with scheduling tasks remotely, which could be a sign of malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting msdt.exe creating files in suspicious directories which could be a sign of exploitation of either Follina or Dogwalk vulnerabilities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect msdt.exe creating files in suspicious directories which could be a sign of exploitation of either Follina or Dogwalk vulnerabilities, you should: monitor file events within Windows systems for the execution of 'msdt.exe' especially when this executable creates files in critical locations. Specifically, watch for occurrences where 'msdt.exe' is involved in the creation of files on the user's Desktop, within the Startup folder in the Start Menu, or in system-critical directories such as 'C:\\PerfLogs\\', 'C:\\ProgramData\\', and 'C:\\Users\\Public\\'. These actions are red flags for potential malicious activity, pointing towards an exploitation attempt of known vulnerabilities, requiring immediate investigation. Be aware that detections involving these criteria are considered high priority due to the sensitive nature of the directories involved and the exploitation techniques associated with the Follina and Dogwalk vulnerabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msdt.exe'\n        TargetFilename|contains:\n            - '\\Desktop\\'\n            - '\\Start Menu\\Programs\\Startup\\'\n            - 'C:\\PerfLogs\\'\n            - 'C:\\ProgramData\\'\n            - 'C:\\Users\\Public\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\msdt.exe'\n        TargetFilename|contains:\n            - '\\Desktop\\'\n            - '\\Start Menu\\Programs\\Startup\\'\n            - 'C:\\PerfLogs\\'\n            - 'C:\\ProgramData\\'\n            - 'C:\\Users\\Public\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "msdt.exe creating files in suspicious directories which could be a sign of exploitation of either Follina or Dogwalk vulnerabilities",
      "answer": "In order to detect msdt.exe creating files in suspicious directories which could be a sign of exploitation of either Follina or Dogwalk vulnerabilities, you should: monitor file events within Windows systems for the execution of 'msdt.exe' especially when this executable creates files in critical locations. Specifically, watch for occurrences where 'msdt.exe' is involved in the creation of files on the user's Desktop, within the Startup folder in the Start Menu, or in system-critical directories such as 'C:\\PerfLogs\\', 'C:\\ProgramData\\', and 'C:\\Users\\Public\\'. These actions are red flags for potential malicious activity, pointing towards an exploitation attempt of known vulnerabilities, requiring immediate investigation. Be aware that detections involving these criteria are considered high priority due to the sensitive nature of the directories involved and the exploitation techniques associated with the Follina and Dogwalk vulnerabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting alternate PowerShell hosts potentially bypassing detections looking for powershell.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect alternate PowerShell hosts potentially bypassing detections looking for powershell.exe, you should monitor for the creation of named pipes that start with '\\PSHost'. This is critical as attackers might utilize alternate methods to invoke PowerShell functionalities without directly calling powershell.exe or similar well-known executables, thus evading traditional detection methods that focus solely on the executable names.\n\nTo achieve this, ensure that your environment is set to log named pipe events, particularly looking for Event IDs 17 and 18 from Sysmon, which pertain to pipe events creation and connection. It's advisable to use a standard Sysmon configuration, such as those provided by SwiftOnSecurity, Neo23x0, or Olaf Hartong, as a starting point and customize it according to your environment.\n\nWhile focusing on the creation of pipes named with a prefix '\\PSHost', the rule also includes a series of filters to reduce false positives:\n\n1. Exclude events where the image path ends with typical PowerShell executables like powershell.exe or powershell_ise.exe, as well as other executables such as sdiagnhost.exe, wsmprovhost.exe, dsac.exe, wbem\\wmiprvse.exe, ForefrontActiveDirectoryConnector.exe, and inetsrv\\w3wp.exe. The last one is noted to possibly cause false positives on Exchange servers.\n   \n2. Exclude null image paths.\n   \n3. Exclude specific paths related to Microsoft SQL Server Tools.\n   \n4. Exclude paths starting with Citrix or Microsoft Exchange Server directories.\n   \n5. And finally, exclude specific images such as ServerManager.exe and PowerSheel 7's pwsh.exe.\n\nThe rule elaborates on capturing the following fields for each event detected: ComputerName, User, Image, and PipeName. This facilitates further investigation by providing context around the detected activity. \n\nIt's essential to be aware of potential false positives, especially involving legitimate programs that might use PowerShell directly, bypassing a dedicated interpreter. The alert level is set to medium, indicating that while detections may not always represent malicious activity, they warrant further investigation due to the potential use of alternate PowerShell hosts for evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PSHost'\n    filter1:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n            - '\\WINDOWS\\System32\\sdiagnhost.exe'\n            - '\\WINDOWS\\System32\\wsmprovhost.exe'\n            - '\\Windows\\system32\\dsac.exe'\n            - '\\Windows\\system32\\wbem\\wmiprvse.exe'\n            - '\\ForefrontActiveDirectoryConnector.exe'\n            - 'c:\\windows\\system32\\inetsrv\\w3wp.exe'   # this is sad :,( but it triggers FPs on Exchange servers\n    filter2:\n        Image: null\n    filter3: # Microsoft SQL Server\\130\\Tools\\\n        Image|contains|all:\n            - ':\\Program Files'\n            - '\\Microsoft SQL Server\\'\n        Image|endswith: '\\Tools\\Binn\\SQLPS.exe'\n    filter4:\n        Image|startswith:\n            - 'C:\\Program Files\\Citrix\\'\n            - 'C:\\Program Files\\Microsoft\\Exchange Server\\'\n    filter5:\n        Image:\n            - 'C:\\Windows\\system32\\ServerManager.exe'\n            - 'C:\\Program Files\\PowerShell\\7\\pwsh.exe' # Powershell 7\n    condition: selection and not 1 of filter*\nfields:\n    - ComputerName\n    - User\n    - Image\n    - PipeName\nfalsepositives:\n    - Programs using PowerShell directly without invocation of a dedicated interpreter.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: pipe_created\n    definition: 'Note that you have to configure logging for Named Pipe Events in Sysmon config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config, https://github.com/olafhartong/sysmon-modular. How to test detection? You can check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575'\ndetection:\n    selection:\n        PipeName|startswith: '\\PSHost'\n    filter1:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\powershell_ise.exe'\n            - '\\WINDOWS\\System32\\sdiagnhost.exe'\n            - '\\WINDOWS\\System32\\wsmprovhost.exe'\n            - '\\Windows\\system32\\dsac.exe'\n            - '\\Windows\\system32\\wbem\\wmiprvse.exe'\n            - '\\ForefrontActiveDirectoryConnector.exe'\n            - 'c:\\windows\\system32\\inetsrv\\w3wp.exe'   # this is sad :,( but it triggers FPs on Exchange servers\n    filter2:\n        Image: null\n    filter3: # Microsoft SQL Server\\130\\Tools\\\n        Image|contains|all:\n            - ':\\Program Files'\n            - '\\Microsoft SQL Server\\'\n        Image|endswith: '\\Tools\\Binn\\SQLPS.exe'\n    filter4:\n        Image|startswith:\n            - 'C:\\Program Files\\Citrix\\'\n            - 'C:\\Program Files\\Microsoft\\Exchange Server\\'\n    filter5:\n        Image:\n            - 'C:\\Windows\\system32\\ServerManager.exe'\n            - 'C:\\Program Files\\PowerShell\\7\\pwsh.exe' # Powershell 7\n    condition: selection and not 1 of filter*\nfields:\n    - ComputerName\n    - User\n    - Image\n    - PipeName\nfalsepositives:\n    - Programs using PowerShell directly without invocation of a dedicated interpreter.\nlevel: medium\n",
      "question": "alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
      "answer": "In order to detect alternate PowerShell hosts potentially bypassing detections looking for powershell.exe, you should monitor for the creation of named pipes that start with '\\PSHost'. This is critical as attackers might utilize alternate methods to invoke PowerShell functionalities without directly calling powershell.exe or similar well-known executables, thus evading traditional detection methods that focus solely on the executable names.\n\nTo achieve this, ensure that your environment is set to log named pipe events, particularly looking for Event IDs 17 and 18 from Sysmon, which pertain to pipe events creation and connection. It's advisable to use a standard Sysmon configuration, such as those provided by SwiftOnSecurity, Neo23x0, or Olaf Hartong, as a starting point and customize it according to your environment.\n\nWhile focusing on the creation of pipes named with a prefix '\\PSHost', the rule also includes a series of filters to reduce false positives:\n\n1. Exclude events where the image path ends with typical PowerShell executables like powershell.exe or powershell_ise.exe, as well as other executables such as sdiagnhost.exe, wsmprovhost.exe, dsac.exe, wbem\\wmiprvse.exe, ForefrontActiveDirectoryConnector.exe, and inetsrv\\w3wp.exe. The last one is noted to possibly cause false positives on Exchange servers.\n   \n2. Exclude null image paths.\n   \n3. Exclude specific paths related to Microsoft SQL Server Tools.\n   \n4. Exclude paths starting with Citrix or Microsoft Exchange Server directories.\n   \n5. And finally, exclude specific images such as ServerManager.exe and PowerSheel 7's pwsh.exe.\n\nThe rule elaborates on capturing the following fields for each event detected: ComputerName, User, Image, and PipeName. This facilitates further investigation by providing context around the detected activity. \n\nIt's essential to be aware of potential false positives, especially involving legitimate programs that might use PowerShell directly, bypassing a dedicated interpreter. The alert level is set to medium, indicating that while detections may not always represent malicious activity, they warrant further investigation due to the potential use of alternate PowerShell hosts for evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Loading unsigned image (DLL, EXE) into LSASS process.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to load an unsigned image (DLL, EXE) into LSASS process, you should: monitor the image load activities on Windows systems, specifically focusing on instances where an image ends with the name '\\lsass.exe'. It's critical to filter for cases where the loaded image is not digitally signed, indicating it might be unauthorized or malicious. Be aware that legitimate scenarios such as a valid user connecting via Remote Desktop Protocol (RDP) may generate similar alerts, and these should be considered as potential false positives. The associated tactics and techniques for this kind of activity mainly fall under Credential Access through the use of LSASS memory, making this behavior suspicious and worth investigating, albeit with a medium level of alert severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\lsass.exe'\n        Signed: 'false'\n    condition: selection\nfalsepositives:\n    - Valid user connecting using RDP\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\lsass.exe'\n        Signed: 'false'\n    condition: selection\nfalsepositives:\n    - Valid user connecting using RDP\nlevel: medium\n",
      "question": "Loading unsigned image (DLL, EXE) into LSASS process",
      "answer": "In order to load an unsigned image (DLL, EXE) into LSASS process, you should: monitor the image load activities on Windows systems, specifically focusing on instances where an image ends with the name '\\lsass.exe'. It's critical to filter for cases where the loaded image is not digitally signed, indicating it might be unauthorized or malicious. Be aware that legitimate scenarios such as a valid user connecting via Remote Desktop Protocol (RDP) may generate similar alerts, and these should be considered as potential false positives. The associated tactics and techniques for this kind of activity mainly fall under Credential Access through the use of LSASS memory, making this behavior suspicious and worth investigating, albeit with a medium level of alert severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unique URL marker seen being used by RomCom potentially exploiting CVE-2023-36884.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a unique URL marker seen being used by RomCom potentially exploiting CVE-2023-36884, you should monitor proxy logs for any GET requests containing the specific path '/MSHTML_C7/' in the URI. This activity indicates an attempt to exploit a known vulnerability, thereby triggering a high alert due to its potential malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        c-uri|contains: '/MSHTML_C7/'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-method: 'GET'\n        c-uri|contains: '/MSHTML_C7/'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "unique URL marker seen being used by RomCom potentially exploiting CVE-2023-36884",
      "answer": "In order to detect a unique URL marker seen being used by RomCom potentially exploiting CVE-2023-36884, you should monitor proxy logs for any GET requests containing the specific path '/MSHTML_C7/' in the URI. This activity indicates an attempt to exploit a known vulnerability, thereby triggering a high alert due to its potential malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting new admin role assignment is created. Which could be a sign of privilege escalation or persistence.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a new admin role assignment is created, which could be a sign of privilege escalation or persistence, you should focus on monitoring events generated by the Okta product. Specifically, look for events of the type 'iam.resourceset.bindings.add'. This event type indicates the addition of a new admin role assignment, which could potentially signal unauthorized attempts to escalate privileges or establish persistence within the environment. It's important to note that while these events can be indicative of malicious activity, there are legitimate scenarios where a new admin role assignment is expected and authorized. Therefore, any detection strategy should take into account the possibility of false positives, particularly in the form of legitimate creation of new admin role assignments. The severity level for this type of detection is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: 'iam.resourceset.bindings.add'\n    condition: selection\nfalsepositives:\n    - Legitimate creation of a new admin role assignment\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: okta\n    service: okta\ndetection:\n    selection:\n        eventtype: 'iam.resourceset.bindings.add'\n    condition: selection\nfalsepositives:\n    - Legitimate creation of a new admin role assignment\nlevel: medium\n",
      "question": "new admin role assignment is created. Which could be a sign of privilege escalation or persistence",
      "answer": "In order to detect when a new admin role assignment is created, which could be a sign of privilege escalation or persistence, you should focus on monitoring events generated by the Okta product. Specifically, look for events of the type 'iam.resourceset.bindings.add'. This event type indicates the addition of a new admin role assignment, which could potentially signal unauthorized attempts to escalate privileges or establish persistence within the environment. It's important to note that while these events can be indicative of malicious activity, there are legitimate scenarios where a new admin role assignment is expected and authorized. Therefore, any detection strategy should take into account the possibility of false positives, particularly in the form of legitimate creation of new admin role assignments. The severity level for this type of detection is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels\nEnsure that an encryption is used for all sensitive information in transit.\nEnsure that an encrypted channels is used for all administrative account access.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that an encrypted channel is used for all administrative account access, you should monitor network flow logs for traffic to specific ports which are commonly associated with unencrypted or potentially insecure communications. These ports include 8080, 21 (FTP), 80 (HTTP), 23 (Telnet), 50000, 1521 (Oracle database), 27017 (MongoDB), 1433 (Microsoft SQL Server), 11211 (Memcached), 3306 (MySQL), 15672 (RabbitMQ), and VNC ports 5900 to 5904. Communications to these ports might indicate that sensitive or administrative data is being transmitted without encryption, which could lead to exposure of confidential information. Be aware that there might be false positive detections, signifying legitimate use of these ports under certain circumstances. Nonetheless, it is critical to treat any activity detected on these ports with scrutiny to maintain the security and integrity of data in transit.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: netflow\ndetection:\n    selection:\n        destination.port:\n            - 8080\n            - 21\n            - 80\n            - 23\n            - 50000\n            - 1521\n            - 27017\n            - 1433\n            - 11211\n            - 3306\n            - 15672\n            - 5900\n            - 5901\n            - 5902\n            - 5903\n            - 5904\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: netflow\ndetection:\n    selection:\n        destination.port:\n            - 8080\n            - 21\n            - 80\n            - 23\n            - 50000\n            - 1521\n            - 27017\n            - 1433\n            - 11211\n            - 3306\n            - 15672\n            - 5900\n            - 5901\n            - 5902\n            - 5903\n            - 5904\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels\nEnsure that an encryption is used for all sensitive information in transit.\nEnsure that an encrypted channels is used for all administrative account access.\n",
      "answer": "In order to ensure that all account usernames and authentication credentials are transmitted across networks using encrypted channels, ensure that encryption is used for all sensitive information in transit, and ensure that an encrypted channel is used for all administrative account access, you should monitor network flow logs for traffic to specific ports which are commonly associated with unencrypted or potentially insecure communications. These ports include 8080, 21 (FTP), 80 (HTTP), 23 (Telnet), 50000, 1521 (Oracle database), 27017 (MongoDB), 1433 (Microsoft SQL Server), 11211 (Memcached), 3306 (MySQL), 15672 (RabbitMQ), and VNC ports 5900 to 5904. Communications to these ports might indicate that sensitive or administrative data is being transmitted without encryption, which could lead to exposure of confidential information. Be aware that there might be false positive detections, signifying legitimate use of these ports under certain circumstances. Nonetheless, it is critical to treat any activity detected on these ports with scrutiny to maintain the security and integrity of data in transit."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps, you should: Monitor the creation of processes on Windows systems for command lines that contain specific strings, which could indicate an attempt to search for or manipulate JWT tokens associated with Office applications or similar software. The targeted strings to watch for in the command line inputs include 'eyJ0eXAiOi', ' eyJ0eX', ' \"eyJ0eX\"', and \" 'eyJ0eX'\". These strings are part of the structure of JWT tokens and their presence in command lines could signify malicious attempts to interact with these tokens. The detection of such actions is of medium level importance and should be further analyzed, although it's acknowledged that some legitimate actions might be mistakenly identified (false positives are unknown).",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'eyJ0eXAiOi' # {\"typ\":\n            - ' eyJ0eX'\n            - ' \"eyJ0eX\"'\n            - \" 'eyJ0eX'\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'eyJ0eXAiOi' # {\"typ\":\n            - ' eyJ0eX'\n            - ' \"eyJ0eX\"'\n            - \" 'eyJ0eX'\"\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps.",
      "answer": "In order to detect possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps, you should: Monitor the creation of processes on Windows systems for command lines that contain specific strings, which could indicate an attempt to search for or manipulate JWT tokens associated with Office applications or similar software. The targeted strings to watch for in the command line inputs include 'eyJ0eXAiOi', ' eyJ0eX', ' \"eyJ0eX\"', and \" 'eyJ0eX'\". These strings are part of the structure of JWT tokens and their presence in command lines could signify malicious attempts to interact with these tokens. The detection of such actions is of medium level importance and should be further analyzed, although it's acknowledged that some legitimate actions might be mistakenly identified (false positives are unknown)."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"logman\" utility in order to disable or delete Windows trace sessions.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\logman.exe'\n        - OriginalFileName: 'Logman.exe'\n    selection_action:\n        CommandLine|contains:\n            - 'stop '\n            - 'delete '\n    selection_service:\n        CommandLine|contains:\n            - 'Circular Kernel Context Logger'\n            - 'EventLog-' # Cover multiple traces starting with EventLog-*\n            - 'SYSMON TRACE'\n            - 'SysmonDnsEtwSession'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate deactivation by administrative staff\n    - Installer tools that disable services, e.g. before log collection agent installation\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\logman.exe'\n        - OriginalFileName: 'Logman.exe'\n    selection_action:\n        CommandLine|contains:\n            - 'stop '\n            - 'delete '\n    selection_service:\n        CommandLine|contains:\n            - 'Circular Kernel Context Logger'\n            - 'EventLog-' # Cover multiple traces starting with EventLog-*\n            - 'SYSMON TRACE'\n            - 'SysmonDnsEtwSession'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate deactivation by administrative staff\n    - Installer tools that disable services, e.g. before log collection agent installation\nlevel: high\n",
      "question": "execution of \"logman\" utility in order to disable or delete Windows trace sessions",
      "answer": "In order to detect the execution of \"logman\" utility in order to disable or delete Windows trace sessions, you should: Monitor process creation events in Windows environments for the execution of \"logman.exe\". This detection focuses on instances where \"logman.exe\" is executed, specifically when its command line includes actions to \"stop\" or \"delete\" certain processes or services. Furthermore, it is important to watch for command-line invocations that attempt to manipulate or deactivate Windows trace sessions, especially those related to the Circular Kernel Context Logger, any event logs prefixed with \"EventLog-\", \"SYSMON TRACE\", or the \"SysmonDnsEtwSession\". The rule identifies these activities as potentially malicious due to their nature of disrupting trace and logging mechanisms which are vital for auditing and forensic analysis. It is worth noting that while this rule aims to capture malicious activity, there may be instances where legitimate administrative actions or installer tools perform similar operations. Therefore, such benign activities might trigger alerts and should be considered as possible false positives. The significance of detecting these actions is high, given their potential use in evading detection or hindering security investigations."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to environment variables related to ETW logging. This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to environment variables related to ETW logging, which could indicate potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: monitor the creation of processes on Windows systems, specifically looking for the presence of 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' in the command line arguments. These particular strings are associated with environment variables that control ETW (Event Tracing for Windows) logging settings for .NET applications. A change or manipulation of these could suggest an attempt to evade detection by disabling logging of .NET assembly loads. Such activities are considered highly suspicious and are unlikely to produce false positives, highlighting the significance of detecting these specific command line arguments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'COMPlus_ETWEnabled'\n            - 'COMPlus_ETWFlags'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'COMPlus_ETWEnabled'\n            - 'COMPlus_ETWFlags'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "changes to environment variables related to ETW logging. This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies.",
      "answer": "In order to detect changes to environment variables related to ETW logging, which could indicate potential adversaries stopping ETW providers from recording loaded .NET assemblies, you should: monitor the creation of processes on Windows systems, specifically looking for the presence of 'COMPlus_ETWEnabled' or 'COMPlus_ETWFlags' in the command line arguments. These particular strings are associated with environment variables that control ETW (Event Tracing for Windows) logging settings for .NET applications. A change or manipulation of these could suggest an attempt to evade detection by disabling logging of .NET assembly loads. Such activities are considered highly suspicious and are unlikely to produce false positives, highlighting the significance of detecting these specific command line arguments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Obfuscated use of stdin to execute PowerShell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect obfuscated use of stdin to execute PowerShell, you should focus on monitoring Windows system service logs, specifically targeting events recorded by the Service Control Manager. Look for event ID 7045, which pertains to service installations. The critical indicator to watch for involves service installation commands that invoke PowerShell via the command line (cmd) using either the '/c' or '/r' switch to carry out commands. These commands are particularly suspicious when they include both 'cmd' and 'powershell' within the service's binary path or ImagePath.\n\nMoreover, signs of obfuscation and potential evasion techniques become apparent when the ImagePath contains specific patterns. These include the presence of 'noexit', which aims to keep the PowerShell session open, and sequences combining 'input' with the '$' character, suggesting the script is attempting to read from stdin in a manner that might not be straightforward. Such combinations are often employed to obscure the command's true nature, making it harder to detect malicious activities.\n\nTo efficiently detect these behaviors, ensure that your detection mechanisms capture all instances where the conditions mentioned above are met simultaneously. However, be aware that there might be rare legitimate uses that trigger these indicators, so consider these as high-level alerts that require manual verification to confirm their malicious intent.\n\nBy focusing on these specific patterns and behaviors in the Windows system service logs, you can identify attempts to execute PowerShell scripts in a manner that seeks to evade detection through obfuscation, which is a common tactic in various attack scenarios such as Initial Access, Execution, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection_main:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\\\"'\n        # Example 1: c:\\windows\\sYstEm32\\CmD.eXE /C\"echO\\Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -NoEXiT -\"\n        # Example 2: c:\\WiNDOws\\sysTEm32\\cmd.EXe /C \" ECHo Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -nol ${EXEcUtIONCONTeXT}.INvOkEComMANd.InvOKEScRIPt( $InpUt )\"\n        ImagePath|contains|all:\n            - 'cmd'\n            - 'powershell'\n        ImagePath|contains:\n            - '/c'\n            - '/r'\n    selection_other:\n        - ImagePath|contains: 'noexit'\n        - ImagePath|contains|all:\n            - 'input'\n            - '$'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection_main:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n        # ImagePath|re: '.*cmd.{0,5}(?:\\/c|\\/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\\\"'\n        # Example 1: c:\\windows\\sYstEm32\\CmD.eXE /C\"echO\\Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -NoEXiT -\"\n        # Example 2: c:\\WiNDOws\\sysTEm32\\cmd.EXe /C \" ECHo Invoke-Expression (New-Object Net.WebClient).DownloadString | POwersHELl -nol ${EXEcUtIONCONTeXT}.INvOkEComMANd.InvOKEScRIPt( $InpUt )\"\n        ImagePath|contains|all:\n            - 'cmd'\n            - 'powershell'\n        ImagePath|contains:\n            - '/c'\n            - '/r'\n    selection_other:\n        - ImagePath|contains: 'noexit'\n        - ImagePath|contains|all:\n            - 'input'\n            - '$'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Obfuscated use of stdin to execute PowerShell",
      "answer": "In order to detect obfuscated use of stdin to execute PowerShell, you should focus on monitoring Windows system service logs, specifically targeting events recorded by the Service Control Manager. Look for event ID 7045, which pertains to service installations. The critical indicator to watch for involves service installation commands that invoke PowerShell via the command line (cmd) using either the '/c' or '/r' switch to carry out commands. These commands are particularly suspicious when they include both 'cmd' and 'powershell' within the service's binary path or ImagePath.\n\nMoreover, signs of obfuscation and potential evasion techniques become apparent when the ImagePath contains specific patterns. These include the presence of 'noexit', which aims to keep the PowerShell session open, and sequences combining 'input' with the '$' character, suggesting the script is attempting to read from stdin in a manner that might not be straightforward. Such combinations are often employed to obscure the command's true nature, making it harder to detect malicious activities.\n\nTo efficiently detect these behaviors, ensure that your detection mechanisms capture all instances where the conditions mentioned above are met simultaneously. However, be aware that there might be rare legitimate uses that trigger these indicators, so consider these as high-level alerts that require manual verification to confirm their malicious intent.\n\nBy focusing on these specific patterns and behaviors in the Windows system service logs, you can identify attempts to execute PowerShell scripts in a manner that seeks to evade detection through obfuscation, which is a common tactic in various attack scenarios such as Initial Access, Execution, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket, you should: Look for events generated by the OpenSSH service on Windows systems specifically monitoring the logs that come from the service named openssh. Focus particularly on events with an EventID of 4, which signify in this context that the OpenSSH server (sshd) has initiated and is now listening for incoming connections. This is identified by log entries where the payload field begins with the text 'Server listening on '. It's crucial to be aware that there can be legitimate reasons for these events, such as administrator activity setting up the service. These detections are flagged with a medium alert level, indicating a noteworthy but not definitively malicious activity on its own. Recognizing these activities involves understanding their relationship with potential attack methods, specifically those that relate to enabling unauthorized access or command and control capabilities through the SSH protocol.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: openssh\ndetection:\n    selection:\n        EventID: 4\n        process: sshd\n        payload|startswith: 'Server listening on '\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: openssh\ndetection:\n    selection:\n        EventID: 4\n        process: sshd\n        payload|startswith: 'Server listening on '\n    condition: selection\nfalsepositives:\n    - Legitimate administrator activity\nlevel: medium\n",
      "question": "scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket.",
      "answer": "In order to detect scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket, you should: Look for events generated by the OpenSSH service on Windows systems specifically monitoring the logs that come from the service named openssh. Focus particularly on events with an EventID of 4, which signify in this context that the OpenSSH server (sshd) has initiated and is now listening for incoming connections. This is identified by log entries where the payload field begins with the text 'Server listening on '. It's crucial to be aware that there can be legitimate reasons for these events, such as administrator activity setting up the service. These detections are flagged with a medium alert level, indicating a noteworthy but not definitively malicious activity on its own. Recognizing these activities involves understanding their relationship with potential attack methods, specifically those that relate to enabling unauthorized access or command and control capabilities through the SSH protocol."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy, you should: focus on observing process creation events within Windows environments. Specifically, watch for processes that end with '\\gpscript.exe' or have the original file name 'GPSCRIPT.EXE'. These processes are particular interest if they are initiated with a command line that includes ' /logon' or ' /startup', indicating they are being used to execute logon or startup scripts as configured in a Group Policy. However, it's crucial to filter out and not raise alerts if these processes stem from the parent command line 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc', as this is a legitimate use case associated with the main service host process for networking services. Be aware, though, that there could be legitimate uses of logon scripts distributed via group policy, which could lead to potential false positives. The level of concern for such detections is considered medium, underscoring the need for careful analysis of detected events to distinguish between malicious use and legitimate administrative activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\gpscript.exe'\n        - OriginalFileName: 'GPSCRIPT.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ' /logon'\n            - ' /startup'\n    filter_main_svchost:\n        ParentCommandLine: 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate uses of logon scripts distributed via group policy\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\gpscript.exe'\n        - OriginalFileName: 'GPSCRIPT.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ' /logon'\n            - ' /startup'\n    filter_main_svchost:\n        ParentCommandLine: 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate uses of logon scripts distributed via group policy\nlevel: medium\n",
      "question": "execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy",
      "answer": "In order to detect the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy, you should: focus on observing process creation events within Windows environments. Specifically, watch for processes that end with '\\gpscript.exe' or have the original file name 'GPSCRIPT.EXE'. These processes are particular interest if they are initiated with a command line that includes ' /logon' or ' /startup', indicating they are being used to execute logon or startup scripts as configured in a Group Policy. However, it's crucial to filter out and not raise alerts if these processes stem from the parent command line 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc', as this is a legitimate use case associated with the main service host process for networking services. Be aware, though, that there could be legitimate uses of logon scripts distributed via group policy, which could lead to potential false positives. The level of concern for such detections is considered medium, underscoring the need for careful analysis of detected events to distinguish between malicious use and legitimate administrative activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting possible suspicious driver is being installed via pnputil.exe lolbin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a possible suspicious driver is being installed via pnputil.exe lolbin, you should: monitor Windows process creation events for instances where the command line includes specific indicators such as '-i', '/install', '-a', '/add-driver', or ends with a '.inf' file extension. Additionally, the process image name should conclude with '\\pnputil.exe'. Keep an eye out for the computer name, user identity, command line, and parent command line in the logs to aid in the investigation. Be aware that legitimate administrative activities may use pnputil.exe for proper driver installations; hence, verify the context of its usage to reduce false positives. Specifically, scrutinize activities initiated by unfamiliar users or processes to ensure they are expected within your environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '-i'\n            - '/install'\n            - '-a'\n            - '/add-driver'\n            - '.inf'\n        Image|endswith: '\\pnputil.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Pnputil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Pnputil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '-i'\n            - '/install'\n            - '-a'\n            - '/add-driver'\n            - '.inf'\n        Image|endswith: '\\pnputil.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Pnputil.exe being used may be performed by a system administrator.\n    - Verify whether the user identity, user agent, and/or hostname should be making changes in your environment.\n    - Pnputil.exe being executed from unfamiliar users should be investigated. If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "possible suspicious driver is being installed via pnputil.exe lolbin",
      "answer": "In order to detect when a possible suspicious driver is being installed via pnputil.exe lolbin, you should: monitor Windows process creation events for instances where the command line includes specific indicators such as '-i', '/install', '-a', '/add-driver', or ends with a '.inf' file extension. Additionally, the process image name should conclude with '\\pnputil.exe'. Keep an eye out for the computer name, user identity, command line, and parent command line in the logs to aid in the investigation. Be aware that legitimate administrative activities may use pnputil.exe for proper driver installations; hence, verify the context of its usage to reduce false positives. Specifically, scrutinize activities initiated by unfamiliar users or processes to ensure they are expected within your environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to RCE..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to Remote Code Execution (RCE), you should: Focus on monitoring application error logs specifically within applications that use the velocity template rendering engine. Ensure that these logs have a log level of ERROR or above as specified in the requirements. Detection can be achieved by looking out for specific exception keywords that indicate a problematic state during the rendering process. These keywords include 'ParseErrorException', 'VelocityException', and 'TemplateInitException'. It is essential to monitor for these exceptions because they indicate that something went wrong during the dynamic rendering of user input, which might be an attempt at or indicative of a possible RCE attack. Be aware that there could be certain situations where these alerts might not signify an actual attack but rather stem from internal application bugs or issues like missing '.vm' (Velocity template) files, representing potential false positives. Given the severity of what these exceptions might represent, the alert level for such detections is marked as high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: application\n    product: velocity\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'ParseErrorException'\n        - 'VelocityException'\n        - 'TemplateInitException'\n    condition: keywords\nfalsepositives:\n    - Application bugs\n    - Missing .vm files\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: application\n    product: velocity\n    definition: 'Requirements: application error logs must be collected (with LOG_LEVEL=ERROR and above)'\ndetection:\n    keywords:\n        - 'ParseErrorException'\n        - 'VelocityException'\n        - 'TemplateInitException'\n    condition: keywords\nfalsepositives:\n    - Application bugs\n    - Missing .vm files\nlevel: high\n",
      "question": "exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to RCE.",
      "answer": "In order to detect exceptions in velocity template renderer, this most likely happens due to dynamic rendering of user input and may lead to Remote Code Execution (RCE), you should: Focus on monitoring application error logs specifically within applications that use the velocity template rendering engine. Ensure that these logs have a log level of ERROR or above as specified in the requirements. Detection can be achieved by looking out for specific exception keywords that indicate a problematic state during the rendering process. These keywords include 'ParseErrorException', 'VelocityException', and 'TemplateInitException'. It is essential to monitor for these exceptions because they indicate that something went wrong during the dynamic rendering of user input, which might be an attempt at or indicative of a possible RCE attack. Be aware that there could be certain situations where these alerts might not signify an actual attack but rather stem from internal application bugs or issues like missing '.vm' (Velocity template) files, representing potential false positives. Given the severity of what these exceptions might represent, the alert level for such detections is marked as high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where processes are created with images ending in '\\rcedit-x64.exe' or '\\rcedit-x86.exe'. These executables are associated with rcedit, a tool that can edit resources of another executable. Pay attention not only to the name and path of the executable but also to the command line arguments. Specifically, look for command line arguments containing '--set-', which is indicative of commands used to edit various metadata properties of an executable, like setting resource strings or version strings.\n\nFurther investigation should focus on command line arguments that include modifications to metadata attributes such as 'OriginalFileName', 'CompanyName', 'FileDescription', 'ProductName', 'ProductVersion', and 'LegalCopyright'. These attributes are critical since changes to them can be used by an attacker to disguise malicious binaries as legitimate system utilities, facilitating defense evasion.\n\nHowever, it's important to consider that the rcedit tool might also be legitimately used by administrators or software developers to update binary metadata. Therefore, occurrences of such process creations should be analyzed in the context of their environment to discern between legitimate uses and potentially malicious activities.\n\nThis monitoring strategy leverages Windows process creation logs to identify attempts to misuse the rcedit tool for altering executable properties in a manner that could aid in evading defenses by renaming or otherwise disguising system utilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\rcedit-x64.exe'\n            - '\\rcedit-x86.exe'\n        - Description: 'Edit resources of exe'\n        - Product: 'rcedit'\n    selection_flags:\n        CommandLine|contains: '--set-' # Covers multiple edit commands such as \"--set-resource-string\" or \"--set-version-string\"\n    selection_attributes:\n        CommandLine|contains:\n            - 'OriginalFileName'\n            - 'CompanyName'\n            - 'FileDescription'\n            - 'ProductName'\n            - 'ProductVersion'\n            - 'LegalCopyright'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the tool by administrators or users to update metadata of a binary\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\rcedit-x64.exe'\n            - '\\rcedit-x86.exe'\n        - Description: 'Edit resources of exe'\n        - Product: 'rcedit'\n    selection_flags:\n        CommandLine|contains: '--set-' # Covers multiple edit commands such as \"--set-resource-string\" or \"--set-version-string\"\n    selection_attributes:\n        CommandLine|contains:\n            - 'OriginalFileName'\n            - 'CompanyName'\n            - 'FileDescription'\n            - 'ProductName'\n            - 'ProductVersion'\n            - 'LegalCopyright'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the tool by administrators or users to update metadata of a binary\nlevel: medium\n",
      "question": "use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion.",
      "answer": "In order to detect the use of rcedit to potentially alter executable PE metadata properties, which could conceal efforts to rename system utilities for defense evasion, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where processes are created with images ending in '\\rcedit-x64.exe' or '\\rcedit-x86.exe'. These executables are associated with rcedit, a tool that can edit resources of another executable. Pay attention not only to the name and path of the executable but also to the command line arguments. Specifically, look for command line arguments containing '--set-', which is indicative of commands used to edit various metadata properties of an executable, like setting resource strings or version strings.\n\nFurther investigation should focus on command line arguments that include modifications to metadata attributes such as 'OriginalFileName', 'CompanyName', 'FileDescription', 'ProductName', 'ProductVersion', and 'LegalCopyright'. These attributes are critical since changes to them can be used by an attacker to disguise malicious binaries as legitimate system utilities, facilitating defense evasion.\n\nHowever, it's important to consider that the rcedit tool might also be legitimately used by administrators or software developers to update binary metadata. Therefore, occurrences of such process creations should be analyzed in the context of their environment to discern between legitimate uses and potentially malicious activities.\n\nThis monitoring strategy leverages Windows process creation logs to identify attempts to misuse the rcedit tool for altering executable properties in a manner that could aid in evading defenses by renaming or otherwise disguising system utilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Disable Microsoft Office Security Features by registry.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to disable Microsoft Office Security Features by registry, you should focus on monitoring changes in the Windows registry specifically tied to the Microsoft Office suite. This involves tracking the setting of registry keys under `\\SOFTWARE\\Microsoft\\Office\\`. The specific modifications to look out for are the changes that end with either `VBAWarnings`, `DisableInternetFilesInPV`, `DisableUnsafeLocationsInPV`, or `DisableAttachmentsInPV`, accompanied by the event type `SetValue`. These registry keys, once modified, can significantly impact the security posture of Microsoft Office applications by disabling several security features. The changes are typically characterized by the value `DWORD (0x00000001)`, indicating that a feature has been disabled or altered.\n\nMonitoring for these registry changes requires a configuration that can capture `SetValue` events within the registry, specifically under the Microsoft Office keys. This detection is crucial as it is closely associated with tactics and techniques aimed at undermining the security mechanism of office applications, making them more susceptible to attack or exploitation. The associated MITRE ATT&CK tactics and techniques include defense evasion and execution through the manipulation of Office security settings.\n\nGiven the high level of impact and the specificity of the changes, it's important to consider the possibility of false positives, although they are generally unknown for these particular registry modifications. The detection of these registry key changes flows from understanding how adversaries might seek to disable Office security features to facilitate further malicious activities or evade detection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\n    definition: key must be add to the sysmon configuration to works\n    # Sysmon\n    # <TargetObject name=\"T1562,office\" condition=\"end with\">\\VBAWarnings</TargetObject>\n    # <TargetObject name=\"T1562,office\" condition=\"end with\">\\DisableInternetFilesInPV</TargetObject>\n    # <TargetObject name=\"T1562,office\" condition=\"end with\">\\DisableUnsafeLocationsInPV</TargetObject>\n    # <TargetObject name=\"T1562,office\" condition=\"end with\">\\DisableAttachementsInPV</TargetObject>\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Office\\'\n        TargetObject|endswith:\n            - VBAWarnings\n            - DisableInternetFilesInPV\n            - DisableUnsafeLocationsInPV\n            - DisableAttachementsInPV\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\n    definition: key must be add to the sysmon configuration to works\n    # Sysmon\n    # <TargetObject name=\"T1562,office\" condition=\"end with\">\\VBAWarnings</TargetObject>\n    # <TargetObject name=\"T1562,office\" condition=\"end with\">\\DisableInternetFilesInPV</TargetObject>\n    # <TargetObject name=\"T1562,office\" condition=\"end with\">\\DisableUnsafeLocationsInPV</TargetObject>\n    # <TargetObject name=\"T1562,office\" condition=\"end with\">\\DisableAttachementsInPV</TargetObject>\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: '\\SOFTWARE\\Microsoft\\Office\\'\n        TargetObject|endswith:\n            - VBAWarnings\n            - DisableInternetFilesInPV\n            - DisableUnsafeLocationsInPV\n            - DisableAttachementsInPV\n        Details: 'DWORD (0x00000001)'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Disable Microsoft Office Security Features by registry",
      "answer": "In order to disable Microsoft Office Security Features by registry, you should focus on monitoring changes in the Windows registry specifically tied to the Microsoft Office suite. This involves tracking the setting of registry keys under `\\SOFTWARE\\Microsoft\\Office\\`. The specific modifications to look out for are the changes that end with either `VBAWarnings`, `DisableInternetFilesInPV`, `DisableUnsafeLocationsInPV`, or `DisableAttachmentsInPV`, accompanied by the event type `SetValue`. These registry keys, once modified, can significantly impact the security posture of Microsoft Office applications by disabling several security features. The changes are typically characterized by the value `DWORD (0x00000001)`, indicating that a feature has been disabled or altered.\n\nMonitoring for these registry changes requires a configuration that can capture `SetValue` events within the registry, specifically under the Microsoft Office keys. This detection is crucial as it is closely associated with tactics and techniques aimed at undermining the security mechanism of office applications, making them more susceptible to attack or exploitation. The associated MITRE ATT&CK tactics and techniques include defense evasion and execution through the manipulation of Office security settings.\n\nGiven the high level of impact and the specificity of the changes, it's important to consider the possibility of false positives, although they are generally unknown for these particular registry modifications. The detection of these registry key changes flows from understanding how adversaries might seek to disable Office security features to facilitate further malicious activities or evade detection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution node.exe which is shipped with multiple software such as VMware, Adobe...etc. In order to execute arbitrary code. For example to establish reverse shell as seen in Log4j attacks...etc.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of node.exe, which is shipped with multiple software such as VMware, Adobe, etc., in order to execute arbitrary code, for example to establish a reverse shell as seen in Log4j attacks among others, you should: Monitor the process creation logs on Windows systems for instances where 'node.exe' is executed. Specifically, look for command lines containing '-e' or '--eval', which are indicative of attempts to evaluate code directly, suggesting arbitrary code execution. Furthermore, pay special attention to command lines that contain all of the following: '.exec(', 'net.socket', '.connect', and 'child_process'. This particular pattern suggests an attempt to establish a reverse shell, which is a common objective in various cyber attacks. It's important to note that false positives are unlikely. However, any detection should be carefully investigated to confirm malicious activity. This approach is critical for identifying and potentially stopping attackers who utilize legitimate software, like Node.js, to execute unauthorized code on a system, which is a tactic often observed in credential access, execution, and defense evasion scenarios.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\node.exe'\n        CommandLine|contains:\n            - ' -e '\n            - ' --eval '\n    # Add more pattern of abuse as actions\n    action_reverse_shell:\n        CommandLine|contains|all:\n            - '.exec('\n            - 'net.socket'\n            - '.connect'\n            - 'child_process'\n    condition: selection and 1 of action_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\node.exe'\n        CommandLine|contains:\n            - ' -e '\n            - ' --eval '\n    # Add more pattern of abuse as actions\n    action_reverse_shell:\n        CommandLine|contains|all:\n            - '.exec('\n            - 'net.socket'\n            - '.connect'\n            - 'child_process'\n    condition: selection and 1 of action_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution node.exe which is shipped with multiple software such as VMware, Adobe...etc. In order to execute arbitrary code. For example to establish reverse shell as seen in Log4j attacks...etc",
      "answer": "In order to detect the execution of node.exe, which is shipped with multiple software such as VMware, Adobe, etc., in order to execute arbitrary code, for example to establish a reverse shell as seen in Log4j attacks among others, you should: Monitor the process creation logs on Windows systems for instances where 'node.exe' is executed. Specifically, look for command lines containing '-e' or '--eval', which are indicative of attempts to evaluate code directly, suggesting arbitrary code execution. Furthermore, pay special attention to command lines that contain all of the following: '.exec(', 'net.socket', '.connect', and 'child_process'. This particular pattern suggests an attempt to establish a reverse shell, which is a common objective in various cyber attacks. It's important to note that false positives are unlikely. However, any detection should be carefully investigated to confirm malicious activity. This approach is critical for identifying and potentially stopping attackers who utilize legitimate software, like Node.js, to execute unauthorized code on a system, which is a tactic often observed in credential access, execution, and defense evasion scenarios."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of the IEExec utility to download payloads.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of the IEExec utility to download payloads, you should: Monitor the creation of processes on Windows systems for instances where the IEExec utility is used. Specifically, look for processes that end with the image name '\\IEExec.exe' or have 'IEExec.exe' as the OriginalFileName. Additionally, pay attention to any command line arguments that include 'https://' or 'http://', indicating a possible remote payload retrieval attempt. This combination of process creation involving IEExec.exe and remote payload retrieval attempts through HTTP or HTTPS protocols should be flagged for further investigation. Keep in mind that while this method is highly indicative of malicious activity, there may be cases where it detects legitimate use of network resources, though such instances are currently considered unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    lolbas:\n        - Image|endswith: '\\IEExec.exe'\n        - OriginalFileName: 'IEExec.exe'\n    remote:\n        CommandLine|contains:\n            - 'https://'\n            - 'http://'\n    condition: lolbas and remote\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    lolbas:\n        - Image|endswith: '\\IEExec.exe'\n        - OriginalFileName: 'IEExec.exe'\n    remote:\n        CommandLine|contains:\n            - 'https://'\n            - 'http://'\n    condition: lolbas and remote\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of the IEExec utility to download payloads",
      "answer": "In order to detect execution of the IEExec utility to download payloads, you should: Monitor the creation of processes on Windows systems for instances where the IEExec utility is used. Specifically, look for processes that end with the image name '\\IEExec.exe' or have 'IEExec.exe' as the OriginalFileName. Additionally, pay attention to any command line arguments that include 'https://' or 'http://', indicating a possible remote payload retrieval attempt. This combination of process creation involving IEExec.exe and remote payload retrieval attempts through HTTP or HTTPS protocols should be flagged for further investigation. Keep in mind that while this method is highly indicative of malicious activity, there may be cases where it detects legitimate use of network resources, though such instances are currently considered unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Elise backdoor activity used by APT32.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Elise backdoor activity used by APT32, you should: focus on monitoring Windows process creation logs. Specifically, look for the generation of suspicious processes related to the misused svchost.exe path, where instances are observed with an image path ending in '\\Microsoft\\Network\\svchost.exe'. Additionally, you should be vigilant for command lines that exhibit both the presence of a DLL file located in '\\Windows\\Caches\\NavShExt.dll' and the command '/c del', which indicates an attempt to delete this file - a common tactic to evade detection or analysis. It is crucial also to note command lines that terminate with paths pointing to 'NavShExt.dll' within the '\\AppData\\Roaming\\MICROS~1\\Windows\\Caches\\' or '\\AppData\\Roaming\\Microsoft\\Windows\\Caches\\' directories. Indications of the command line involving ',Setting' in conjunction with the previous DLL paths are a strong signal of the backdoor activity. Any of the behaviors related to misusing `svchost.exe` are sufficient for alerting, while all the conditions related to the suspicious use of `NavShExt.dll` need to be met concurrently to trigger an alert. Due to the critical nature of this rule, there are hardly any conditions under which these signals would be considered false positives. This focused approach allows IT security teams to effectively counter the tactics and techniques employed by APT32 to leverage the Elise backdoor, ensuring a higher security posture against this sophisticated threat.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other_svchost:\n        Image|endswith: '\\Microsoft\\Network\\svchost.exe'\n    selection_other_del:\n        CommandLine|contains|all:\n            - '\\Windows\\Caches\\NavShExt.dll'\n            - '/c del'\n    selection_dll_path:\n        CommandLine|endswith:\n            - '\\AppData\\Roaming\\MICROS~1\\Windows\\Caches\\NavShExt.dll'\n            - '\\AppData\\Roaming\\Microsoft\\Windows\\Caches\\NavShExt.dll'\n    selection_dll_function:\n        CommandLine|contains: ',Setting'\n    condition: 1 of selection_other_* or all of selection_dll_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_other_svchost:\n        Image|endswith: '\\Microsoft\\Network\\svchost.exe'\n    selection_other_del:\n        CommandLine|contains|all:\n            - '\\Windows\\Caches\\NavShExt.dll'\n            - '/c del'\n    selection_dll_path:\n        CommandLine|endswith:\n            - '\\AppData\\Roaming\\MICROS~1\\Windows\\Caches\\NavShExt.dll'\n            - '\\AppData\\Roaming\\Microsoft\\Windows\\Caches\\NavShExt.dll'\n    selection_dll_function:\n        CommandLine|contains: ',Setting'\n    condition: 1 of selection_other_* or all of selection_dll_*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "Elise backdoor activity used by APT32",
      "answer": "In order to detect Elise backdoor activity used by APT32, you should: focus on monitoring Windows process creation logs. Specifically, look for the generation of suspicious processes related to the misused svchost.exe path, where instances are observed with an image path ending in '\\Microsoft\\Network\\svchost.exe'. Additionally, you should be vigilant for command lines that exhibit both the presence of a DLL file located in '\\Windows\\Caches\\NavShExt.dll' and the command '/c del', which indicates an attempt to delete this file - a common tactic to evade detection or analysis. It is crucial also to note command lines that terminate with paths pointing to 'NavShExt.dll' within the '\\AppData\\Roaming\\MICROS~1\\Windows\\Caches\\' or '\\AppData\\Roaming\\Microsoft\\Windows\\Caches\\' directories. Indications of the command line involving ',Setting' in conjunction with the previous DLL paths are a strong signal of the backdoor activity. Any of the behaviors related to misusing `svchost.exe` are sufficient for alerting, while all the conditions related to the suspicious use of `NavShExt.dll` need to be met concurrently to trigger an alert. Due to the critical nature of this rule, there are hardly any conditions under which these signals would be considered false positives. This focused approach allows IT security teams to effectively counter the tactics and techniques employed by APT32 to leverage the Elise backdoor, ensuring a higher security posture against this sophisticated threat."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting system changes made by Blue Mockingbird.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|endswith: '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: Setvalue\n        TargetObject|endswith: '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "system changes made by Blue Mockingbird",
      "answer": "In order to detect system changes made by Blue Mockingbird, you should monitor the Windows Registry for specific modifications that are indicative of this attack. Specifically, focus on the registry setting events where the value is being set (Setvalue EventType). The critical alteration to lookout for occurs in the registry key path that ends with '\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll'. This particular change is a common tactic used by Blue Mockingbird to achieve persistence and control over a compromised system by potentially modifying the referenced DLL to one under their control. \n\nMonitoring for such alterations will require configuring your security systems to log and alert whenever this type of registry modification occurs. It's important to be aware that, as of the knowledge available, there are no known false positives associated with this detection strategy, indicating a high level of confidence in these specific modifications as indicators of Blue Mockingbird activity. However, always exercise caution and investigate alerts thoroughly to confirm malicious activity. This detection strategy is of high importance due to the direct association with Blue Mockingbird's technique for maintaining persistence and potentially executing unauthorized commands or software on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag. This detection will detect PST export even if the 'eDiscovery search or exported' alert is disabled in the O365.This rule will apply to ExchangePowerShell usage and from the cloud..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag, especially noting that this detection will capture PST exports even if the 'eDiscovery search or exported' alert is turned off in O365, and it applies to both ExchangePowerShell usage and actions performed from the cloud, you should: Monitor for activities within the Microsoft 365 threat management service logs, specifically focusing on events originating from the SecurityComplianceCenter. Look for actions that involve the creation of a new compliance search action ('New-ComplianceSearchAction') specified with an '-Export' flag, which results in exporting content into a PST file format. This activity might signify potentially unauthorized data exports and needs surveillance despite the possibility of such actions being conducted for legitimate reasons. As exporting PST files involves accessing potentially sensitive information, such actions, while they could be legitimate, necessitate careful monitoring due to their sensitive nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        Payload|contains|all:\n            - 'New-ComplianceSearchAction'\n            - 'Export'\n            - 'pst'\n    condition: selection\nfalsepositives:\n    - Exporting a PST can be done for legitimate purposes by legitimate sources, but due to the sensitive nature of PST content, it must be monitored.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        Payload|contains|all:\n            - 'New-ComplianceSearchAction'\n            - 'Export'\n            - 'pst'\n    condition: selection\nfalsepositives:\n    - Exporting a PST can be done for legitimate purposes by legitimate sources, but due to the sensitive nature of PST content, it must be monitored.\nlevel: medium\n",
      "question": "Alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag. This detection will detect PST export even if the 'eDiscovery search or exported' alert is disabled in the O365.This rule will apply to ExchangePowerShell usage and from the cloud.",
      "answer": "In order to alert when a user has performed an export to a search using 'New-ComplianceSearchAction' with the '-Export' flag, especially noting that this detection will capture PST exports even if the 'eDiscovery search or exported' alert is turned off in O365, and it applies to both ExchangePowerShell usage and actions performed from the cloud, you should: Monitor for activities within the Microsoft 365 threat management service logs, specifically focusing on events originating from the SecurityComplianceCenter. Look for actions that involve the creation of a new compliance search action ('New-ComplianceSearchAction') specified with an '-Export' flag, which results in exporting content into a PST file format. This activity might signify potentially unauthorized data exports and needs surveillance despite the possibility of such actions being conducted for legitimate reasons. As exporting PST files involves accessing potentially sensitive information, such actions, while they could be legitimate, necessitate careful monitoring due to their sensitive nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as\na precursor for Collection and to identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify adversaries looking for folders and drives shared on remote systems as a means of finding information sources for collection and spotting potential targets for lateral movement, you should monitor Windows PowerShell script logs, specifically focusing on instances where the command `get-smbshare` is used. This command is usually employed to retrieve shared folders and drives on the network, which could indicate someone is scanning for shared resources. Enabling Script Block Logging on Windows systems is essential for capturing the relevant details needed for this detection. It's important to note that while this method of detection has a low level of false positives, unanticipated or unknown benign activities could trigger an alert. This approach aligns with understanding tactics related to Discovery and Lateral Movement by looking for techniques that involve collection from remote systems and movement within the network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: get-smbshare\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as\na precursor for Collection and to identify potential systems of interest for Lateral Movement.\nNetworks often contain shared network drives and folders that enable users to access file directories on various systems across a network.\n",
      "answer": "In order to identify adversaries looking for folders and drives shared on remote systems as a means of finding information sources for collection and spotting potential targets for lateral movement, you should monitor Windows PowerShell script logs, specifically focusing on instances where the command `get-smbshare` is used. This command is usually employed to retrieve shared folders and drives on the network, which could indicate someone is scanning for shared resources. Enabling Script Block Logging on Windows systems is essential for capturing the relevant details needed for this detection. It's important to note that while this method of detection has a low level of false positives, unanticipated or unknown benign activities could trigger an alert. This approach aligns with understanding tactics related to Discovery and Lateral Movement by looking for techniques that involve collection from remote systems and movement within the network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder, you should: \n\nMonitor the Windows firewall activity, particularly on Windows 10 and 11 platforms. Keep an eye out for event IDs 2004 and 2071, which indicate that a new rule has been added to the Windows Defender Firewall exception list. Specifically, focus on applications added to the exception list that are located within the '\\AppData\\' or '\\Temp\\' directories. These locations are often used by malicious software because they are user-accessible and frequently overlooked by users and some security programs.\n\nIt's important to exclude from alerts any changes that involve a predefined list of applications that might normally operate from those directories for benign reasons. These include well-known applications such as Microsoft Teams, Keybase, Messenger, and Opera Browser if they are exactly located in their usual application paths like '\\AppData\\local\\microsoft\\teams\\current\\teams.exe' for Teams, '\\AppData\\Local\\Keybase\\keybase.exe' for Keybase, etc.\n\nYou need to be cautious and consider any legitimate application that runs from the AppData user directory as a potential false positive. Such applications may also add firewall exceptions as part of their normal operations. Therefore, while maintaining a high level of alertness for suspicious activity associated with these event IDs and paths, careful investigation of each incident is advised to distinguish between legitimate and malicious activities.\n\nThis monitoring approach targets tactics associated with Persistence and Privilege Escalation, where attackers attempt to maintain their presence on a system and potentially elevate their control by making their malicious software harder to block by adding it to the firewall's exception list.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: firewall-as\ndetection:\n    selection:\n        EventID:\n            - 2004 # A rule has been added to the Windows Defender Firewall exception list. (Windows 10)\n            - 2071 # A rule has been added to the Windows Defender Firewall exception list. (Windows 11)\n        ApplicationPath|contains:\n            - '\\AppData\\'\n            - '\\Temp\\'\n    filter_main_block:\n        Action: 2\n    filter_optional_teams:\n        ApplicationPath|endswith: '\\AppData\\local\\microsoft\\teams\\current\\teams.exe'\n    filter_optional_keybase:\n        ApplicationPath|endswith: '\\AppData\\Local\\Keybase\\keybase.exe'\n    filter_optional_messenger:\n        ApplicationPath|endswith: '\\AppData\\Local\\Programs\\Messenger\\Messenger.exe'\n    filter_optional_opera:\n        ApplicationPath|startswith: 'C:\\Users\\'\n        ApplicationPath|contains: '\\AppData\\Local\\Programs\\Opera\\'\n        ApplicationPath|endswith: '\\opera.exe'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Any legitimate application that runs from the AppData user directory\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: firewall-as\ndetection:\n    selection:\n        EventID:\n            - 2004 # A rule has been added to the Windows Defender Firewall exception list. (Windows 10)\n            - 2071 # A rule has been added to the Windows Defender Firewall exception list. (Windows 11)\n        ApplicationPath|contains:\n            - '\\AppData\\'\n            - '\\Temp\\'\n    filter_main_block:\n        Action: 2\n    filter_optional_teams:\n        ApplicationPath|endswith: '\\AppData\\local\\microsoft\\teams\\current\\teams.exe'\n    filter_optional_keybase:\n        ApplicationPath|endswith: '\\AppData\\Local\\Keybase\\keybase.exe'\n    filter_optional_messenger:\n        ApplicationPath|endswith: '\\AppData\\Local\\Programs\\Messenger\\Messenger.exe'\n    filter_optional_opera:\n        ApplicationPath|startswith: 'C:\\Users\\'\n        ApplicationPath|contains: '\\AppData\\Local\\Programs\\Opera\\'\n        ApplicationPath|endswith: '\\opera.exe'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Any legitimate application that runs from the AppData user directory\nlevel: high\n",
      "question": "addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder",
      "answer": "In order to detect the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder, you should: \n\nMonitor the Windows firewall activity, particularly on Windows 10 and 11 platforms. Keep an eye out for event IDs 2004 and 2071, which indicate that a new rule has been added to the Windows Defender Firewall exception list. Specifically, focus on applications added to the exception list that are located within the '\\AppData\\' or '\\Temp\\' directories. These locations are often used by malicious software because they are user-accessible and frequently overlooked by users and some security programs.\n\nIt's important to exclude from alerts any changes that involve a predefined list of applications that might normally operate from those directories for benign reasons. These include well-known applications such as Microsoft Teams, Keybase, Messenger, and Opera Browser if they are exactly located in their usual application paths like '\\AppData\\local\\microsoft\\teams\\current\\teams.exe' for Teams, '\\AppData\\Local\\Keybase\\keybase.exe' for Keybase, etc.\n\nYou need to be cautious and consider any legitimate application that runs from the AppData user directory as a potential false positive. Such applications may also add firewall exceptions as part of their normal operations. Therefore, while maintaining a high level of alertness for suspicious activity associated with these event IDs and paths, careful investigation of each incident is advised to distinguish between legitimate and malicious activities.\n\nThis monitoring approach targets tactics associated with Persistence and Privilege Escalation, where attackers attempt to maintain their presence on a system and potentially elevate their control by making their malicious software harder to block by adding it to the firewall's exception list."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting One of the Windows Eventlogs has been cleared. e.g. caused by \"wevtutil cl\" command execution.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect if one of the Windows Eventlogs has been cleared, possibly due to operations like the execution of the \"wevtutil cl\" command, you should monitor for specific event IDs in the Windows security logs. Look for events with the ID 517, which under the provider name \"Security\" indicate that an event log was cleared. Similarly, keep an eye out for event ID 1102 under the provider name \"Microsoft-Windows-Eventlog\". This event ID signifies that the audit log was cleared, which can be a critical sign of someone trying to hide their tracks after an attack or unauthorized changes.\n\nBe aware that there are instances where these event log clearances might not be malicious. Expected benign triggers include the rollout of log collection agents since setting these up can often involve resetting the local event log. Another non-malicious scenario is during system provisioning, where a system reset might occur before the creation of a 'golden' image for future deployments. Given the potential for these legitimate reasons causing event log clearances, such activity is marked with a high level of caution. \n\nThe detection of these activities should focus on Windows security services, leveraging the identifying features of the event IDs mentioned to signal possible malicious behavior. This type of monitoring is crucial as clearing event logs is a tactic used by adversaries to erase evidence of their presence and activities on a system, aligning with tactics and techniques that involve evasion and covering tracks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection_517:\n        EventID: 517\n        Provider_Name: Security\n    selection_1102:\n        EventID: 1102\n        Provider_Name: Microsoft-Windows-Eventlog\n    condition: 1 of selection_*\nfalsepositives:\n    - Rollout of log collection agents (the setup routine often includes a reset of the local Eventlog)\n    - System provisioning (system reset before the golden image creation)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection_517:\n        EventID: 517\n        Provider_Name: Security\n    selection_1102:\n        EventID: 1102\n        Provider_Name: Microsoft-Windows-Eventlog\n    condition: 1 of selection_*\nfalsepositives:\n    - Rollout of log collection agents (the setup routine often includes a reset of the local Eventlog)\n    - System provisioning (system reset before the golden image creation)\nlevel: high\n",
      "question": "One of the Windows Eventlogs has been cleared. e.g. caused by \"wevtutil cl\" command execution",
      "answer": "In order to detect if one of the Windows Eventlogs has been cleared, possibly due to operations like the execution of the \"wevtutil cl\" command, you should monitor for specific event IDs in the Windows security logs. Look for events with the ID 517, which under the provider name \"Security\" indicate that an event log was cleared. Similarly, keep an eye out for event ID 1102 under the provider name \"Microsoft-Windows-Eventlog\". This event ID signifies that the audit log was cleared, which can be a critical sign of someone trying to hide their tracks after an attack or unauthorized changes.\n\nBe aware that there are instances where these event log clearances might not be malicious. Expected benign triggers include the rollout of log collection agents since setting these up can often involve resetting the local event log. Another non-malicious scenario is during system provisioning, where a system reset might occur before the creation of a 'golden' image for future deployments. Given the potential for these legitimate reasons causing event log clearances, such activity is marked with a high level of caution. \n\nThe detection of these activities should focus on Windows security services, leveraging the identifying features of the event IDs mentioned to signal possible malicious behavior. This type of monitoring is crucial as clearing event logs is a tactic used by adversaries to erase evidence of their presence and activities on a system, aligning with tactics and techniques that involve evasion and covering tracks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious requests to Telegram API without the usual Telegram User-Agent.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious requests to Telegram API without the usual Telegram User-Agent, you should monitor your proxy logs for requests made to api.telegram.org, which is often used by automated bots for various activities, some of which could be malicious. Specifically, pay attention to traffic where the 'cs-host' field matches 'api.telegram.org'. It is crucial to further refine this detection by excluding requests that contain certain keywords in the 'c-useragent' field, such as 'Telegram' or 'Bot', since these are commonly used by legitimate Telegram bot interactions. \n\nYou should collect and analyze information such as the Client IP address, URI requested, and the User-Agent string ('ClientIP', 'c-uri', 'c-useragent') to better understand the nature of the request. It's important to be aware of potential false positives, which may occur if your organization makes legitimate use of Telegram bots. This activity is categorized under medium severity level due to the potential for misuse of the Telegram API by malicious actors to perform command and control activities or data exfiltration.\n\nMonitor for these conditions to quickly identify and investigate requests that could indicate unauthorized or malicious use of the Telegram API, enabling timely response to potential threats. This monitoring aligns with tactics and techniques such as \"Command and Control\" where attackers use common services like Telegram to control compromised systems within a target network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-host: 'api.telegram.org' # Often used by Bots\n    filter:\n        c-useragent|contains:\n            # Used https://core.telegram.org/bots/samples for this list\n            - 'Telegram'\n            - 'Bot'\n    condition: selection and not filter\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Legitimate use of Telegram bots in the company\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-host: 'api.telegram.org' # Often used by Bots\n    filter:\n        c-useragent|contains:\n            # Used https://core.telegram.org/bots/samples for this list\n            - 'Telegram'\n            - 'Bot'\n    condition: selection and not filter\nfields:\n    - ClientIP\n    - c-uri\n    - c-useragent\nfalsepositives:\n    - Legitimate use of Telegram bots in the company\nlevel: medium\n",
      "question": "suspicious requests to Telegram API without the usual Telegram User-Agent",
      "answer": "In order to detect suspicious requests to Telegram API without the usual Telegram User-Agent, you should monitor your proxy logs for requests made to api.telegram.org, which is often used by automated bots for various activities, some of which could be malicious. Specifically, pay attention to traffic where the 'cs-host' field matches 'api.telegram.org'. It is crucial to further refine this detection by excluding requests that contain certain keywords in the 'c-useragent' field, such as 'Telegram' or 'Bot', since these are commonly used by legitimate Telegram bot interactions. \n\nYou should collect and analyze information such as the Client IP address, URI requested, and the User-Agent string ('ClientIP', 'c-uri', 'c-useragent') to better understand the nature of the request. It's important to be aware of potential false positives, which may occur if your organization makes legitimate use of Telegram bots. This activity is categorized under medium severity level due to the potential for misuse of the Telegram API by malicious actors to perform command and control activities or data exfiltration.\n\nMonitor for these conditions to quickly identify and investigate requests that could indicate unauthorized or malicious use of the Telegram API, enabling timely response to potential threats. This monitoring aligns with tactics and techniques such as \"Command and Control\" where attackers use common services like Telegram to control compromised systems within a target network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of Time Travel Debugging Utility, where adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe, you should: Monitor Windows image load events for the loading of specific libraries including 'ttdrecord.dll', 'ttdwriter.dll', and 'ttdloader.dll'. These libraries are associated with the Time Travel Debugging Utility which could be exploited by an attacker to execute or analyze malicious processes stealthily. Be conscious of false positives which might arise from legitimate use by software developers or testers. This activity carries a high severity level due to its potential use in undermining process integrity and conducting unauthorized actions on the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\ttdrecord.dll'\n            - '\\ttdwriter.dll'\n            - '\\ttdloader.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate usage by software developers/testers\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: image_load\ndetection:\n    selection:\n        ImageLoaded|endswith:\n            - '\\ttdrecord.dll'\n            - '\\ttdwriter.dll'\n            - '\\ttdloader.dll'\n    condition: selection\nfalsepositives:\n    - Legitimate usage by software developers/testers\nlevel: high\n",
      "question": "usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe.",
      "answer": "In order to detect usage of Time Travel Debugging Utility, where adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe, you should: Monitor Windows image load events for the loading of specific libraries including 'ttdrecord.dll', 'ttdwriter.dll', and 'ttdloader.dll'. These libraries are associated with the Time Travel Debugging Utility which could be exploited by an attacker to execute or analyze malicious processes stealthily. Be conscious of false positives which might arise from legitimate use by software developers or testers. This activity carries a high severity level due to its potential use in undermining process integrity and conducting unauthorized actions on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should monitor the process creation logs on Windows systems for the execution of specific binaries that are commonly manipulated by attackers. These binaries include 'Cmd.Exe', 'CONHOST.EXE', '7z.exe', 'WinRAR.exe', 'wevtutil.exe', 'net.exe', 'net1.exe', 'netsh.exe', and 'InstallUtil.exe'. It's crucial to distinguish authentic binary executions from malicious ones. This can be achieved by checking if the executing binary\u2019s name exactly matches the standard file names or if there is a deviation, indicating potential tampering or misuse. However, be aware of potential false positives that can arise from legitimate applications which may rename these binaries for their own use. Such instances should be thoroughly investigated and, if confirmed to be benign, added to a whitelist to refine the detection process. This approach aims to enhance the security posture by identifying and responding to methods employed in various cyber attack techniques, without being misled by superficial changes to binary names.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'Cmd.Exe'\n            - 'CONHOST.EXE'\n            - '7z.exe'\n            - 'WinRAR.exe'\n            - 'wevtutil.exe'\n            - 'net.exe'\n            - 'net1.exe'\n            - 'netsh.exe'\n            - 'InstallUtil.exe'\n    filter:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\conhost.exe'\n            - '\\7z.exe'\n            - '\\WinRAR.exe'\n            - '\\wevtutil.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netsh.exe'\n            - '\\InstallUtil.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Custom applications use renamed binaries adding slight change to binary name. Typically this is easy to spot and add to whitelist\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        OriginalFileName:\n            - 'Cmd.Exe'\n            - 'CONHOST.EXE'\n            - '7z.exe'\n            - 'WinRAR.exe'\n            - 'wevtutil.exe'\n            - 'net.exe'\n            - 'net1.exe'\n            - 'netsh.exe'\n            - 'InstallUtil.exe'\n    filter:\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\conhost.exe'\n            - '\\7z.exe'\n            - '\\WinRAR.exe'\n            - '\\wevtutil.exe'\n            - '\\net.exe'\n            - '\\net1.exe'\n            - '\\netsh.exe'\n            - '\\InstallUtil.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Custom applications use renamed binaries adding slight change to binary name. Typically this is easy to spot and add to whitelist\nlevel: medium\n",
      "question": "execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.",
      "answer": "In order to detect the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint, you should monitor the process creation logs on Windows systems for the execution of specific binaries that are commonly manipulated by attackers. These binaries include 'Cmd.Exe', 'CONHOST.EXE', '7z.exe', 'WinRAR.exe', 'wevtutil.exe', 'net.exe', 'net1.exe', 'netsh.exe', and 'InstallUtil.exe'. It's crucial to distinguish authentic binary executions from malicious ones. This can be achieved by checking if the executing binary\u2019s name exactly matches the standard file names or if there is a deviation, indicating potential tampering or misuse. However, be aware of potential false positives that can arise from legitimate applications which may rename these binaries for their own use. Such instances should be thoroughly investigated and, if confirmed to be benign, added to a whitelist to refine the detection process. This approach aims to enhance the security posture by identifying and responding to methods employed in various cyber attack techniques, without being misled by superficial changes to binary names."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting import of '.reg' files from suspicious paths using the 'reg.exe' utility.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the import of '.reg' files from suspicious paths using the 'reg.exe' utility, you should monitor the creation of processes on Windows systems, specifically looking for instances where the 'reg.exe' utility is executed. Pay close attention to the command line used during the process creation, particularly watching for the use of ' import ' as this indicates the importation of registry keys. Equally important is to scrutinize the paths from which these '.reg' files are being imported. Common pathways for suspicious activity include user directories like 'C:\\Users\\', temporary folders such as '%temp%', '%tmp%', system application data folders like '%appdata%' and specific paths including '\\AppData\\Local\\Temp\\', 'C:\\Windows\\Temp\\', and 'C:\\ProgramData\\'. All these elements combined indicate potentially malicious action. However, bear in mind that there are legitimate uses for importing keys, and these should be considered as possible false positives. The importance of this detection process is rated as medium due to its potential for flagging normal administrative activities as suspicious.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli:\n        CommandLine|contains: ' import '\n    selection_paths:\n        CommandLine|contains:\n            - 'C:\\Users\\'\n            - '%temp%'\n            - '%tmp%'\n            - '%appdata%'\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\ProgramData\\'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate import of keys\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_cli:\n        CommandLine|contains: ' import '\n    selection_paths:\n        CommandLine|contains:\n            - 'C:\\Users\\'\n            - '%temp%'\n            - '%tmp%'\n            - '%appdata%'\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\ProgramData\\'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate import of keys\nlevel: medium\n",
      "question": "import of '.reg' files from suspicious paths using the 'reg.exe' utility",
      "answer": "In order to detect the import of '.reg' files from suspicious paths using the 'reg.exe' utility, you should monitor the creation of processes on Windows systems, specifically looking for instances where the 'reg.exe' utility is executed. Pay close attention to the command line used during the process creation, particularly watching for the use of ' import ' as this indicates the importation of registry keys. Equally important is to scrutinize the paths from which these '.reg' files are being imported. Common pathways for suspicious activity include user directories like 'C:\\Users\\', temporary folders such as '%temp%', '%tmp%', system application data folders like '%appdata%' and specific paths including '\\AppData\\Local\\Temp\\', 'C:\\Windows\\Temp\\', and 'C:\\ProgramData\\'. All these elements combined indicate potentially malicious action. However, bear in mind that there are legitimate uses for importing keys, and these should be considered as possible false positives. The importance of this detection process is rated as medium due to its potential for flagging normal administrative activities as suspicious."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"dsquery.exe\" for domain trust discovery.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"dsquery.exe\" for domain trust discovery, you should monitor process creation logs on Windows systems. Specifically, look for instances where the process name ends with '\\dsquery.exe' or the original file name is identified exactly as 'dsquery.exe'. Additionally, pay attention to any command line execution that contains the term 'trustedDomain'. This could indicate an attempt to discover domain trusts, which can be a precursor to further attacks or lateral movement within a network. It is worth noting that there could be legitimate instances of using these utilities by authorized personnel for valid reasons, so consider this when evaluating potential alerts to avoid false positives. This approach leverages medium-level security measures focused on mitigating possible reconnaissance activities aimed at understanding domain trusts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsquery.exe'\n        - OriginalFileName: 'dsquery.exe'\n    selection_cli:\n        CommandLine|contains: 'trustedDomain'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the utilities by legitimate user for legitimate reason\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\dsquery.exe'\n        - OriginalFileName: 'dsquery.exe'\n    selection_cli:\n        CommandLine|contains: 'trustedDomain'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate use of the utilities by legitimate user for legitimate reason\nlevel: medium\n",
      "question": "execution of \"dsquery.exe\" for domain trust discovery",
      "answer": "In order to detect execution of \"dsquery.exe\" for domain trust discovery, you should monitor process creation logs on Windows systems. Specifically, look for instances where the process name ends with '\\dsquery.exe' or the original file name is identified exactly as 'dsquery.exe'. Additionally, pay attention to any command line execution that contains the term 'trustedDomain'. This could indicate an attempt to discover domain trusts, which can be a precursor to further attacks or lateral movement within a network. It is worth noting that there could be legitimate instances of using these utilities by authorized personnel for valid reasons, so consider this when evaluating potential alerts to avoid false positives. This approach leverages medium-level security measures focused on mitigating possible reconnaissance activities aimed at understanding domain trusts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Identifies user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify a user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password, you should monitor Azure signin logs for specific sign-in attempt outcomes. Pay attention to logs that show a ResultType of 50053. This specific ResultType indicates that a user account has been locked due to multiple failed sign-in attempts. Such behavior could be indicative of an attempted attack where an adversary is trying to guess or brute-force a user\u2019s password. Monitoring for this activity is crucial for detecting and responding to potential security incidents related to account lockout policies. It\u2019s important to note that there may be instances where these detections could trigger on benign activities; however, the security event's level is considered medium, suggesting a balanced approach to investigating these alerts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        ResultType: 50053\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        ResultType: 50053\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Identifies user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password.",
      "answer": "In order to identify a user account which has been locked because the user tried to sign in too many times with an incorrect user ID or password, you should monitor Azure signin logs for specific sign-in attempt outcomes. Pay attention to logs that show a ResultType of 50053. This specific ResultType indicates that a user account has been locked due to multiple failed sign-in attempts. Such behavior could be indicative of an attempted attack where an adversary is trying to guess or brute-force a user\u2019s password. Monitoring for this activity is crucial for detecting and responding to potential security incidents related to account lockout policies. It\u2019s important to note that there may be instances where these detections could trigger on benign activities; however, the security event's level is considered medium, suggesting a balanced approach to investigating these alerts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser.\nAn attacker can use this to authenticate to Azure AD in a browser as that user.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser. An attacker can use this to authenticate to Azure AD in a browser as that user, you should: monitor for the loading of the MicrosoftAccountTokenProvider.dll from the C:\\Windows\\System32 directory on Windows systems. This detection is based on the premise that during an attack attempting to exploit Azure Browser SSO for unauthorized authentication via OAuth 2.0 refresh tokens, the MicrosoftAccountTokenProvider.dll would be crucial since it is linked to handling of Microsoft account tokens.\n\nTo refine the detection and minimize false positives, it's advisable to exclude events where the loaded images are part of legitimate background tasks, including tasks started by BackgroundTaskHost.exe located either in the System32 or SysWOW64 directories. Similarly, activities initiated by recognized developer tools like Microsoft Visual Studio, browsers such as Internet Explorer or Microsoft Edge, as well as OneDrive, should also be considered as exceptions unless other suspicious activities correlate.\n\nThis monitoring strategy leverages the understanding that simply loading the said DLL can occur in non-malicious scenarios. Therefore, alerting on this event alone is classified with a low-level severity. It is most effective when this activity is correlated with other suspicious actions that could indicate an attack aimed at misusing Azure Browser SSO features to gain unauthorized access. The tags associated with this attack would relate to techniques that abuse legitimate authentication processes to perform unauthorized actions, reflecting an exploitation of trusted processes for malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded: 'C:\\Windows\\System32\\MicrosoftAccountTokenProvider.dll'\n    filter_main_bgtaskhost:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n        Image|endswith: '\\BackgroundTaskHost.exe'\n        #CommandLine|contains: '-ServerNameBackgroundTaskHost.WebAccountProvider'\n    filter_optional_devenv:\n        Image|startswith:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n        Image|endswith: '\\IDE\\devenv.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_onedrive:\n        Image|endswith: '\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe'\n    filter_optional_null:\n        Image: null\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - False positives are expected since this rules is only looking for the DLL load event. This rule is better used in correlation with related activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded: 'C:\\Windows\\System32\\MicrosoftAccountTokenProvider.dll'\n    filter_main_bgtaskhost:\n        Image|startswith:\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SysWOW64\\'\n        Image|endswith: '\\BackgroundTaskHost.exe'\n        #CommandLine|contains: '-ServerNameBackgroundTaskHost.WebAccountProvider'\n    filter_optional_devenv:\n        Image|startswith:\n            - 'C:\\Program Files\\Microsoft Visual Studio\\'\n            - 'C:\\Program Files (x86)\\Microsoft Visual Studio\\'\n        Image|endswith: '\\IDE\\devenv.exe'\n    filter_optional_ie:\n        Image:\n            - 'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'\n            - 'C:\\Program Files\\Internet Explorer\\iexplore.exe'\n    filter_optional_edge_1:\n        - Image|startswith: 'C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\'\n        - Image|endswith: '\\WindowsApps\\MicrosoftEdge.exe'\n        - Image:\n            - 'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'\n            - 'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe'\n    filter_optional_edge_2:\n        Image|startswith:\n            - 'C:\\Program Files (x86)\\Microsoft\\EdgeCore\\'\n            - 'C:\\Program Files\\Microsoft\\EdgeCore\\'\n        Image|endswith:\n            - '\\msedge.exe'\n            - '\\msedgewebview2.exe'\n    filter_optional_onedrive:\n        Image|endswith: '\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe'\n    filter_optional_null:\n        Image: null\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - False positives are expected since this rules is only looking for the DLL load event. This rule is better used in correlation with related activity\nlevel: low\n",
      "question": "abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser.\nAn attacker can use this to authenticate to Azure AD in a browser as that user.\n",
      "answer": "In order to detect abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser. An attacker can use this to authenticate to Azure AD in a browser as that user, you should: monitor for the loading of the MicrosoftAccountTokenProvider.dll from the C:\\Windows\\System32 directory on Windows systems. This detection is based on the premise that during an attack attempting to exploit Azure Browser SSO for unauthorized authentication via OAuth 2.0 refresh tokens, the MicrosoftAccountTokenProvider.dll would be crucial since it is linked to handling of Microsoft account tokens.\n\nTo refine the detection and minimize false positives, it's advisable to exclude events where the loaded images are part of legitimate background tasks, including tasks started by BackgroundTaskHost.exe located either in the System32 or SysWOW64 directories. Similarly, activities initiated by recognized developer tools like Microsoft Visual Studio, browsers such as Internet Explorer or Microsoft Edge, as well as OneDrive, should also be considered as exceptions unless other suspicious activities correlate.\n\nThis monitoring strategy leverages the understanding that simply loading the said DLL can occur in non-malicious scenarios. Therefore, alerting on this event alone is classified with a low-level severity. It is most effective when this activity is correlated with other suspicious actions that could indicate an attack aimed at misusing Azure Browser SSO features to gain unauthorized access. The tags associated with this attack would relate to techniques that abuse legitimate authentication processes to perform unauthorized actions, reflecting an exploitation of trusted processes for malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting adversary creating hidden file or directory, by detecting directories or files with . as the first character.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversary creating hidden file or directory, by detecting directories or files with . as the first character, you should monitor execution events on Linux systems specifically using the auditd service. Focus on capturing the execution of the following commands: mkdir, touch, vim, nano, and vi. These commands are commonly utilized by users and scripts for file or directory creation and editing. When these commands are executed, pay special attention to the arguments passed to them.\n\nWatch for instances where the first argument (a1) or the second argument (a2) contain or start with '.', indicating the creation or modification of hidden files or directories. Hidden files and directories are typically denoted by a leading '.' character in Unix-based systems such as Linux.\n\nThis detection mechanism involves correlating execution events (tracked as EXECVE types) with the specific patterns in the passed arguments. The detection conditions are met when any of the watched commands are associated with arguments exhibiting the outlined patterns, signifying potential stealthy file or directory creation or manipulation activities often characteristic of malicious operations.\n\nIt is important to note that this approach might generate some alerts that do not correspond to actual malicious activity (false positives), as the creation of hidden files and directories is not exclusively malicious but is a known behavior in system administration, configuration, and certain applications' operations. Thus, the level of threat associated with triggering this detection is considered low; however, it is crucial for situational awareness and further investigation depending on the context of occurrence and other correlated security events. The techniques are related to the execution of commands and creation/manipulation of files or directories, potentially aligning with tactics such as Persistence, Privilege Escalation, and Defense Evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    commands:\n        type: EXECVE\n        a0:\n            - mkdir\n            - touch\n            - vim\n            - nano\n            - vi\n    arguments:\n        - a1|contains: '/.'\n        - a1|startswith: '.'\n        - a2|contains: '/.'\n        - a2|startswith: '.'\n    condition: commands and arguments\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    commands:\n        type: EXECVE\n        a0:\n            - mkdir\n            - touch\n            - vim\n            - nano\n            - vi\n    arguments:\n        - a1|contains: '/.'\n        - a1|startswith: '.'\n        - a2|contains: '/.'\n        - a2|startswith: '.'\n    condition: commands and arguments\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "adversary creating hidden file or directory, by detecting directories or files with . as the first character",
      "answer": "In order to detect adversary creating hidden file or directory, by detecting directories or files with . as the first character, you should monitor execution events on Linux systems specifically using the auditd service. Focus on capturing the execution of the following commands: mkdir, touch, vim, nano, and vi. These commands are commonly utilized by users and scripts for file or directory creation and editing. When these commands are executed, pay special attention to the arguments passed to them.\n\nWatch for instances where the first argument (a1) or the second argument (a2) contain or start with '.', indicating the creation or modification of hidden files or directories. Hidden files and directories are typically denoted by a leading '.' character in Unix-based systems such as Linux.\n\nThis detection mechanism involves correlating execution events (tracked as EXECVE types) with the specific patterns in the passed arguments. The detection conditions are met when any of the watched commands are associated with arguments exhibiting the outlined patterns, signifying potential stealthy file or directory creation or manipulation activities often characteristic of malicious operations.\n\nIt is important to note that this approach might generate some alerts that do not correspond to actual malicious activity (false positives), as the creation of hidden files and directories is not exclusively malicious but is a known behavior in system administration, configuration, and certain applications' operations. Thus, the level of threat associated with triggering this detection is considered low; however, it is crucial for situational awareness and further investigation depending on the context of occurrence and other correlated security events. The techniques are related to the execution of commands and creation/manipulation of files or directories, potentially aligning with tactics such as Persistence, Privilege Escalation, and Defense Evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting handle requests and access operations to specific registry keys to calculate the SysKey.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect handle requests and access operations to specific registry keys to calculate the SysKey, you should monitor Windows security event logs for events with IDs 4656 and 4663, which indicate a handle to an object was requested or an attempt was made to access an object, respectively. Specifically, focus on registry key objects whose names end with 'lsa\\JD', 'lsa\\GBG', 'lsa\\Skew1', or 'lsa\\Data'. These accesses might suggest an attempt to gather information necessary to calculate the SysKey, which is a critical part of the security system in Windows used to further encrypt other sensitive data. Take note that occurrences of these specific events related to the registry keys in question should be treated with high priority due to their potential security implications, while also being aware that some legitimate operations could trigger these events, though such cases are considered unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4656\n            - 4663\n        ObjectType: 'key'\n        ObjectName|endswith:\n            - 'lsa\\JD'\n            - 'lsa\\GBG'\n            - 'lsa\\Skew1'\n            - 'lsa\\Data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID:\n            - 4656\n            - 4663\n        ObjectType: 'key'\n        ObjectName|endswith:\n            - 'lsa\\JD'\n            - 'lsa\\GBG'\n            - 'lsa\\Skew1'\n            - 'lsa\\Data'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "handle requests and access operations to specific registry keys to calculate the SysKey",
      "answer": "In order to detect handle requests and access operations to specific registry keys to calculate the SysKey, you should monitor Windows security event logs for events with IDs 4656 and 4663, which indicate a handle to an object was requested or an attempt was made to access an object, respectively. Specifically, focus on registry key objects whose names end with 'lsa\\JD', 'lsa\\GBG', 'lsa\\Skew1', or 'lsa\\Data'. These accesses might suggest an attempt to gather information necessary to calculate the SysKey, which is a critical part of the security system in Windows used to further encrypt other sensitive data. Take note that occurrences of these specific events related to the registry keys in question should be treated with high priority due to their potential security implications, while also being aware that some legitimate operations could trigger these events, though such cases are considered unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an adversary leveraging legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes on Windows systems that are indicative of the GoTo Opener software. This involves looking for any process that has a description of \"GoTo Opener,\" is named \"GoTo Opener,\" and is associated with the company \"LogMeIn, Inc.\" It's important to note, however, that there may be legitimate uses of this software, so not all detections signify malicious activity but should be examined within the context of other suspicious activities on the network. The monitoring of such processes falls under the tactics of Execution, Persistence, and Privilege Escalation, as malicious actors may use the GoTo Opener as a method to execute commands, maintain persistent access, and potentially escalate their privileges within a target network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'GoTo Opener'\n        - Product: 'GoTo Opener'\n        - Company: 'LogMeIn, Inc.'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Description: 'GoTo Opener'\n        - Product: 'GoTo Opener'\n        - Company: 'LogMeIn, Inc.'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n",
      "question": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "answer": "In order to detect an adversary leveraging legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks, you should: Monitor for the creation of processes on Windows systems that are indicative of the GoTo Opener software. This involves looking for any process that has a description of \"GoTo Opener,\" is named \"GoTo Opener,\" and is associated with the company \"LogMeIn, Inc.\" It's important to note, however, that there may be legitimate uses of this software, so not all detections signify malicious activity but should be examined within the context of other suspicious activities on the network. The monitoring of such processes falls under the tactics of Execution, Persistence, and Privilege Escalation, as malicious actors may use the GoTo Opener as a method to execute commands, maintain persistent access, and potentially escalate their privileges within a target network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files').\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files'), you should focus on monitoring process creation events on Windows systems. Look for processes that are initiated from executable files named 'rutserv.exe' or 'rfusclient.exe', which are associated with the Remote Utilities software. Additionally, check if the 'Product' attribute in the event logs matches 'Remote Utilities'. It's crucial to differentiate between legitimate and suspicious activities by excluding events where these processes start from the standard installation paths, namely 'C:\\Program Files\\Remote Utilities' and 'C:\\Program Files (x86)\\Remote Utilities'. By applying this monitoring strategy, any process creation event that matches these criteria but does not originate from the expected directories should be considered as a potential indicator of a Remote Utilities RAT being executed from an unusual location, which might suggest a malicious usage. This detection is categorized with a medium level of confidence due to the possibility of unknown false positives, indicating that while the criteria are specific, there may be legitimate scenarios that could inadvertently meet these conditions. This approach is designed to combat tactics and techniques like execution of malware and use of remote access tools by unauthorized entities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n        - Product: 'Remote Utilities'\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\Remote Utilities'\n            - 'C:\\Program Files (x86)\\Remote Utilities'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith:\n            - '\\rutserv.exe'\n            - '\\rfusclient.exe'\n        - Product: 'Remote Utilities'\n    filter:\n        Image|startswith:\n            - 'C:\\Program Files\\Remote Utilities'\n            - 'C:\\Program Files (x86)\\Remote Utilities'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files')",
      "answer": "In order to detect execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files'), you should focus on monitoring process creation events on Windows systems. Look for processes that are initiated from executable files named 'rutserv.exe' or 'rfusclient.exe', which are associated with the Remote Utilities software. Additionally, check if the 'Product' attribute in the event logs matches 'Remote Utilities'. It's crucial to differentiate between legitimate and suspicious activities by excluding events where these processes start from the standard installation paths, namely 'C:\\Program Files\\Remote Utilities' and 'C:\\Program Files (x86)\\Remote Utilities'. By applying this monitoring strategy, any process creation event that matches these criteria but does not originate from the expected directories should be considered as a potential indicator of a Remote Utilities RAT being executed from an unusual location, which might suggest a malicious usage. This detection is categorized with a medium level of confidence due to the possibility of unknown false positives, indicating that while the criteria are specific, there may be legitimate scenarios that could inadvertently meet these conditions. This approach is designed to combat tactics and techniques like execution of malware and use of remote access tools by unauthorized entities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS queries for subdomains used for upload to MEGA.io.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS queries for subdomains used for upload to MEGA.io, you should focus on monitoring Windows DNS client activities. Specifically, keep an eye on Microsoft-Windows-DNS Client Events/Operational Event Log, making sure it is enabled and collected. The critical piece of information to look out for is Event ID 3008, especially when it's associated with queries containing the domain 'userstorage.mega.co.nz'. This activity might indicate an attempt to use the MEGA.io service potentially for exfiltrating sensitive data. However, it is crucial to remember that there could be legitimate reasons for accessing MEGA, and such interactions might not always signify malicious intent. Nonetheless, given that this activity is flagged with a high level of concern, it's vital to investigate and contextualize any such occurrences to determine their nature accurately. This detection strategy aligns with understanding tactics and techniques related to initial access, command and control, and exfiltration.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: dns-client\n    definition: 'Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.'\ndetection:\n    selection:\n        EventID: 3008\n        QueryName|contains: 'userstorage.mega.co.nz'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Mega\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: dns-client\n    definition: 'Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events.'\ndetection:\n    selection:\n        EventID: 3008\n        QueryName|contains: 'userstorage.mega.co.nz'\n    condition: selection\nfalsepositives:\n    - Legitimate DNS queries and usage of Mega\nlevel: high\n",
      "question": "DNS queries for subdomains used for upload to MEGA.io",
      "answer": "In order to detect DNS queries for subdomains used for upload to MEGA.io, you should focus on monitoring Windows DNS client activities. Specifically, keep an eye on Microsoft-Windows-DNS Client Events/Operational Event Log, making sure it is enabled and collected. The critical piece of information to look out for is Event ID 3008, especially when it's associated with queries containing the domain 'userstorage.mega.co.nz'. This activity might indicate an attempt to use the MEGA.io service potentially for exfiltrating sensitive data. However, it is crucial to remember that there could be legitimate reasons for accessing MEGA, and such interactions might not always signify malicious intent. Nonetheless, given that this activity is flagged with a high level of concern, it's vital to investigate and contextualize any such occurrences to determine their nature accurately. This detection strategy aligns with understanding tactics and techniques related to initial access, command and control, and exfiltration."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detection use of the command \"split\" to split files into parts and possible transfer..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of the command \"split\" to split files into parts and possible transfer, you should monitor process creation logs on macOS systems for any instances where the command ending with '/split' is executed. It's important to note that this activity might sometimes be related to legitimate administrative tasks, so the risk level associated with this detection is considered low. This monitoring aims to identify scenarios where an attacker may be splitting files, potentially as a precursor to exfiltrating data.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/split'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: macos\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/split'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n",
      "question": "Detection use of the command \"split\" to split files into parts and possible transfer.",
      "answer": "In order to detect the use of the command \"split\" to split files into parts and possible transfer, you should monitor process creation logs on macOS systems for any instances where the command ending with '/split' is executed. It's important to note that this activity might sometimes be related to legitimate administrative tasks, so the risk level associated with this detection is considered low. This monitoring aims to identify scenarios where an attacker may be splitting files, potentially as a precursor to exfiltrating data."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting keywords that could indicate clearing PowerShell history.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect keywords that could indicate clearing PowerShell history, you should monitor Windows PowerShell modules for specific command patterns that suggest attempts to delete or otherwise manipulate PowerShell command history. This detection focuses on various payloads that attackers might use to cover their tracks or prevent their PowerShell commands from being logged or recovered later.\n\nFirstly, look for commands that directly attempt to delete items or clear history, such as 'del', 'Remove-Item', or 'rm'. These commands can be indicative of an attempt to remove specific files or logs, including potentially the PowerShell history itself.\n\nAdditionally, pay attention to commands involving '(Get-PSReadlineOption).HistorySavePath'. This could suggest an attacker is attempting to identify the path where PowerShell history is saved, likely as a precursor to altering or deleting these history files.\n\nFurther, be on the lookout for sequences of commands designed to change the PowerShell history saving behavior. Specifically, sequences that contain 'Set-PSReadlineOption' in conjunction with either '\u2013HistorySaveStyle' or '-HistorySaveStyle' followed by 'SaveNothing'. These commands instruct PowerShell not to save any history, effectively preventing any future audit or review of executed commands.\n\nIt's important to note that while these patterns are strongly indicative of suspicious activity aimed at obscuring an attacker\u2019s actions, there can be legitimate use cases for such scripts. For example, system administrators might use similar commands during routine maintenance or script deployments. Therefore, detected instances should be investigated to differentiate between malicious activities and legitimate administrative tasks.\n\nThis detection is aligned with MITRE ATT&CK tactics and techniques that include Defense Evasion through Indicator Removal on Host, specifically the technique related to clearing command history. Recognizing attempts to manipulate PowerShell history is essential for maintaining visibility into the actions performed on Windows systems and thwarting attempts by attackers to hide their tracks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_1a_payload:\n        Payload|contains:\n            - 'del'\n            - 'Remove-Item'\n            - 'rm'\n    selection_1b_payload:\n        Payload|contains: '(Get-PSReadlineOption).HistorySavePath'\n    selection_payload_2:\n        Payload|contains|all:\n            - 'Set-PSReadlineOption'\n            - '\u2013HistorySaveStyle'  # not sure if the homoglyph \u2013/- is intended, just checking for both\n            - 'SaveNothing'\n    selection_payload_3:\n        Payload|contains|all:\n            - 'Set-PSReadlineOption'\n            - '-HistorySaveStyle'\n            - 'SaveNothing'\n    condition: 1 of selection_payload_* or all of selection_1*\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_module\n    definition: 0ad03ef1-f21b-4a79-8ce8-e6900c54b65b\ndetection:\n    selection_1a_payload:\n        Payload|contains:\n            - 'del'\n            - 'Remove-Item'\n            - 'rm'\n    selection_1b_payload:\n        Payload|contains: '(Get-PSReadlineOption).HistorySavePath'\n    selection_payload_2:\n        Payload|contains|all:\n            - 'Set-PSReadlineOption'\n            - '\u2013HistorySaveStyle'  # not sure if the homoglyph \u2013/- is intended, just checking for both\n            - 'SaveNothing'\n    selection_payload_3:\n        Payload|contains|all:\n            - 'Set-PSReadlineOption'\n            - '-HistorySaveStyle'\n            - 'SaveNothing'\n    condition: 1 of selection_payload_* or all of selection_1*\nfalsepositives:\n    - Legitimate PowerShell scripts\nlevel: medium\n",
      "question": "keywords that could indicate clearing PowerShell history",
      "answer": "In order to detect keywords that could indicate clearing PowerShell history, you should monitor Windows PowerShell modules for specific command patterns that suggest attempts to delete or otherwise manipulate PowerShell command history. This detection focuses on various payloads that attackers might use to cover their tracks or prevent their PowerShell commands from being logged or recovered later.\n\nFirstly, look for commands that directly attempt to delete items or clear history, such as 'del', 'Remove-Item', or 'rm'. These commands can be indicative of an attempt to remove specific files or logs, including potentially the PowerShell history itself.\n\nAdditionally, pay attention to commands involving '(Get-PSReadlineOption).HistorySavePath'. This could suggest an attacker is attempting to identify the path where PowerShell history is saved, likely as a precursor to altering or deleting these history files.\n\nFurther, be on the lookout for sequences of commands designed to change the PowerShell history saving behavior. Specifically, sequences that contain 'Set-PSReadlineOption' in conjunction with either '\u2013HistorySaveStyle' or '-HistorySaveStyle' followed by 'SaveNothing'. These commands instruct PowerShell not to save any history, effectively preventing any future audit or review of executed commands.\n\nIt's important to note that while these patterns are strongly indicative of suspicious activity aimed at obscuring an attacker\u2019s actions, there can be legitimate use cases for such scripts. For example, system administrators might use similar commands during routine maintenance or script deployments. Therefore, detected instances should be investigated to differentiate between malicious activities and legitimate administrative tasks.\n\nThis detection is aligned with MITRE ATT&CK tactics and techniques that include Defense Evasion through Indicator Removal on Host, specifically the technique related to clearing command history. Recognizing attempts to manipulate PowerShell history is essential for maintaining visibility into the actions performed on Windows systems and thwarting attempts by attackers to hide their tracks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting stopping of a Windows service.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the stopping of a Windows service, you should focus on monitoring the creation of processes within Windows environments. Specifically, pay attention to instances where the process being initiated is either 'net.exe' or 'net1.exe'. These executables are commonly used in Windows for network-related tasks, including the control of services. Detection should be based on two main criteria:\n\n1. The original file name being exactly 'net.exe' or 'net1.exe'. Additionally, be vigilant for processes where the image path ends with '\\net.exe' or '\\net1.exe'. This ensures the detection of these executables irrespective of their location in the file system.\n\n2. The presence of the 'stop' command within the command line used to initiate the process. This is indicative of an attempt to stop a service using the net utility.\n\nBoth of these detection vectors need to be met for an alert to be considered valid. However, it's important to note that there are numerous legitimate reasons for stopping a service in a Windows environment. Due to this, the level of suspicion for this activity is rated as low, and there might be a substantial number of false positives. It\u2019s crucial for security analysts to filter these alerts through the lens of their specific environment's normal operations to discern between benign and potentially malicious activity effectively. This monitoring strategy aligns with understanding tactics and techniques associated with adversarial manipulation of services, though the intent can vary widely, from benign administrative tasks to potentially malicious actions such as disrupting security services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    selection_cli:\n        CommandLine|contains: ' stop '\n    condition: all of selection_*\nfalsepositives:\n    - There are many legitimate reasons to stop a service. This rule isn't looking for any suspicious behaviour in particular. Filter legitimate activity accordingly\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n    selection_cli:\n        CommandLine|contains: ' stop '\n    condition: all of selection_*\nfalsepositives:\n    - There are many legitimate reasons to stop a service. This rule isn't looking for any suspicious behaviour in particular. Filter legitimate activity accordingly\nlevel: low\n",
      "question": "stopping of a Windows service",
      "answer": "In order to detect the stopping of a Windows service, you should focus on monitoring the creation of processes within Windows environments. Specifically, pay attention to instances where the process being initiated is either 'net.exe' or 'net1.exe'. These executables are commonly used in Windows for network-related tasks, including the control of services. Detection should be based on two main criteria:\n\n1. The original file name being exactly 'net.exe' or 'net1.exe'. Additionally, be vigilant for processes where the image path ends with '\\net.exe' or '\\net1.exe'. This ensures the detection of these executables irrespective of their location in the file system.\n\n2. The presence of the 'stop' command within the command line used to initiate the process. This is indicative of an attempt to stop a service using the net utility.\n\nBoth of these detection vectors need to be met for an alert to be considered valid. However, it's important to note that there are numerous legitimate reasons for stopping a service in a Windows environment. Due to this, the level of suspicion for this activity is rated as low, and there might be a substantial number of false positives. It\u2019s crucial for security analysts to filter these alerts through the lens of their specific environment's normal operations to discern between benign and potentially malicious activity effectively. This monitoring strategy aligns with understanding tactics and techniques associated with adversarial manipulation of services, though the intent can vary widely, from benign administrative tasks to potentially malicious actions such as disrupting security services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect well-known TAP software installation, possibly as preparation for data exfiltration using tunneling techniques, you should monitor driver load logs on Windows systems. Look for events where the 'ImagePath' field contains the specific string 'tap0901,' which is commonly associated with TAP drivers used by VPN software like OpenVPN. It's important to note that encountering this evidence does not immediately signify a threat, as it could also represent a legitimate installation of OpenVPN TAP drivers. However, these instances are flagged at a medium severity level due to their potential link to preparing systems for data exfiltration through tunneling.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains: 'tap0901'\n    condition: selection\nfalsepositives:\n    - Legitimate OpenVPN TAP insntallation\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: driver_load\ndetection:\n    selection:\n        ImagePath|contains: 'tap0901'\n    condition: selection\nfalsepositives:\n    - Legitimate OpenVPN TAP insntallation\nlevel: medium\n",
      "question": "Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques",
      "answer": "In order to detect well-known TAP software installation, possibly as preparation for data exfiltration using tunneling techniques, you should monitor driver load logs on Windows systems. Look for events where the 'ImagePath' field contains the specific string 'tap0901,' which is commonly associated with TAP drivers used by VPN software like OpenVPN. It's important to note that encountering this evidence does not immediately signify a threat, as it could also represent a legitimate installation of OpenVPN TAP drivers. However, these instances are flagged at a medium severity level due to their potential link to preparing systems for data exfiltration through tunneling."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting access to $ADMIN share.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect access to $ADMIN share, you should look for specific events within Windows Security logs. Focus on events where the advanced audit policy regarding \"Object Access > Audit File Share\" is configured to log both success and failure instances. Specifically, keep an eye out for events with an ID of 5140, which indicates an attempt to access a file share. Moreover, it's essential to filter these events to include those accessing the \"Admin$\" share, a well-known default share used for administrative purposes in Windows systems.\n\nHowever, during this monitoring process, it's also important to apply certain filters to reduce false positives. One such filter involves ignoring events initiated by computer account names (which end in a '$' symbol). These are typically automated processes or services running on the network and are less likely to be related to unauthorized access attempts.\n\nIt's worth noting that while monitoring for this activity is critical, it's also expected to encounter legitimate administrative activities that match these criteria. Due to the nature of administrative tasks that might involve accessing the $ADMIN share, these events are categorized with a low level of alert. Therefore, any detection should be carefully analyzed to distinguish between malicious activities and necessary administrative operations.\n\nThis approach primarily aligns with the MITRE ATT&CK tactics and techniques related to Credential Access and Lateral Movement by monitoring attempts to access critical administrative shares on a network, which could indicate an attempt to escalate privileges or move laterally within the network.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit File Share\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 5140\n        ShareName: Admin$\n    filter:\n        SubjectUserName|endswith: '$'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'The advanced audit policy setting \"Object Access > Audit File Share\" must be configured for Success/Failure'\ndetection:\n    selection:\n        EventID: 5140\n        ShareName: Admin$\n    filter:\n        SubjectUserName|endswith: '$'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate administrative activity\nlevel: low\n",
      "question": "access to $ADMIN share",
      "answer": "In order to detect access to $ADMIN share, you should look for specific events within Windows Security logs. Focus on events where the advanced audit policy regarding \"Object Access > Audit File Share\" is configured to log both success and failure instances. Specifically, keep an eye out for events with an ID of 5140, which indicates an attempt to access a file share. Moreover, it's essential to filter these events to include those accessing the \"Admin$\" share, a well-known default share used for administrative purposes in Windows systems.\n\nHowever, during this monitoring process, it's also important to apply certain filters to reduce false positives. One such filter involves ignoring events initiated by computer account names (which end in a '$' symbol). These are typically automated processes or services running on the network and are less likely to be related to unauthorized access attempts.\n\nIt's worth noting that while monitoring for this activity is critical, it's also expected to encounter legitimate administrative activities that match these criteria. Due to the nature of administrative tasks that might involve accessing the $ADMIN share, these events are categorized with a low level of alert. Therefore, any detection should be carefully analyzed to distinguish between malicious activities and necessary administrative operations.\n\nThis approach primarily aligns with the MITRE ATT&CK tactics and techniques related to Credential Access and Lateral Movement by monitoring attempts to access critical administrative shares on a network, which could indicate an attempt to escalate privileges or move laterally within the network."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the PSFactory COM InProcServer32 registry. This technique was used by RomCom to create persistence storing a malicious DLL..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the PSFactory COM InProcServer32 registry, a technique used by RomCom to create persistence by storing a malicious DLL, you should: Focus on monitoring registry modifications, specifically focusing on the Windows platform. The key aspect of this detection approach involves identifying events where the \"SetValue\" operation is carried out on registry keys. Specifically, the registry key to watch is the one ending with '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'. However, to avoid false alarms and ensure the accuracy of detection, modifications involving the standard Windows path to 'ActXPrxy.dll', being either '%windir%\\System32\\ActXPrxy.dll' or 'C:\\Windows\\System32\\ActXPrxy.dll', should not trigger alerts. These paths represent legitimate events that are not indicative of the malicious activity described. The absence of known benign activities causing similar changes creates an uncertainty around potential false positives, thereby warranting a high level of scrutiny for any alerts generated based on these criteria. This focused approach is essential for identifying attempts to achieve persistence by inserting a malicious DLL, a method commonly associated with sophisticated cyber threats like RomCom, within targeted systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'\n    filter_main:\n        Details:\n            - '%windir%\\System32\\ActXPrxy.dll'\n            - 'C:\\Windows\\System32\\ActXPrxy.dll'\n    condition: selection and not filter_main\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'\n    filter_main:\n        Details:\n            - '%windir%\\System32\\ActXPrxy.dll'\n            - 'C:\\Windows\\System32\\ActXPrxy.dll'\n    condition: selection and not filter_main\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to the PSFactory COM InProcServer32 registry. This technique was used by RomCom to create persistence storing a malicious DLL.",
      "answer": "In order to detect changes to the PSFactory COM InProcServer32 registry, a technique used by RomCom to create persistence by storing a malicious DLL, you should: Focus on monitoring registry modifications, specifically focusing on the Windows platform. The key aspect of this detection approach involves identifying events where the \"SetValue\" operation is carried out on registry keys. Specifically, the registry key to watch is the one ending with '\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)'. However, to avoid false alarms and ensure the accuracy of detection, modifications involving the standard Windows path to 'ActXPrxy.dll', being either '%windir%\\System32\\ActXPrxy.dll' or 'C:\\Windows\\System32\\ActXPrxy.dll', should not trigger alerts. These paths represent legitimate events that are not indicative of the malicious activity described. The absence of known benign activities causing similar changes creates an uncertainty around potential false positives, thereby warranting a high level of scrutiny for any alerts generated based on these criteria. This focused approach is essential for identifying attempts to achieve persistence by inserting a malicious DLL, a method commonly associated with sophisticated cyber threats like RomCom, within targeted systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\", you should: look for the process creation logs on Windows systems for command lines that contain specific base64 encoded patterns. These patterns represent different obfuscated combinations of the word \"LOAD\", a technique often used to evade detection mechanisms. The focus is on analyzing command lines to uncover the usage of \".NET reflection.assembly\" load method in an attempt to execute possibly malicious code. The detection of these encoded patterns in process creation activities can be critical in identifying attacks leveraging reflection techniques for evasion. The tags relevant to this detection strategy include Execution, Defense Evasion, and Command and Scripting Interpreter. Given the high level of potential threat and the sophistication of the obfuscation technique, such detections are considered to have a high level of importance, with unlikely chances of false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # ::(\"L\"+\"oad\")\n            - 'OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ'\n            - 'oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA'\n            - '6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA'\n            # ::(\"Lo\"+\"ad\")\n            - 'OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ'\n            - 'oAOgAoACIATABvACIAKwAiAGEAZAAiACkA'\n            - '6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA'\n            # ::(\"Loa\"+\"d\")\n            - 'OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ'\n            - 'oAOgAoACIATABvAGEAIgArACIAZAAiACkA'\n            - '6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA'\n            # ::('L'+'oad')\n            - 'OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ'\n            - 'oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA'\n            - '6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA'\n            # ::('Lo'+'ad')\n            - 'OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ'\n            - 'oAOgAoACcATABvACcAKwAnAGEAZAAnACkA'\n            - '6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA'\n            # ::('Loa'+'d')\n            - 'OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ'\n            - 'oAOgAoACcATABvAGEAJwArACcAZAAnACkA'\n            - '6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # ::(\"L\"+\"oad\")\n            - 'OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ'\n            - 'oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA'\n            - '6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA'\n            # ::(\"Lo\"+\"ad\")\n            - 'OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ'\n            - 'oAOgAoACIATABvACIAKwAiAGEAZAAiACkA'\n            - '6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA'\n            # ::(\"Loa\"+\"d\")\n            - 'OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ'\n            - 'oAOgAoACIATABvAGEAIgArACIAZAAiACkA'\n            - '6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA'\n            # ::('L'+'oad')\n            - 'OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ'\n            - 'oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA'\n            - '6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA'\n            # ::('Lo'+'ad')\n            - 'OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ'\n            - 'oAOgAoACcATABvACcAKwAnAGEAZAAnACkA'\n            - '6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA'\n            # ::('Loa'+'d')\n            - 'OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ'\n            - 'oAOgAoACcATABvAGEAJwArACcAZAAnACkA'\n            - '6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\"",
      "answer": "In order to detect suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\", you should: look for the process creation logs on Windows systems for command lines that contain specific base64 encoded patterns. These patterns represent different obfuscated combinations of the word \"LOAD\", a technique often used to evade detection mechanisms. The focus is on analyzing command lines to uncover the usage of \".NET reflection.assembly\" load method in an attempt to execute possibly malicious code. The detection of these encoded patterns in process creation activities can be critical in identifying attacks leveraging reflection techniques for evasion. The tags relevant to this detection strategy include Execution, Defense Evasion, and Command and Scripting Interpreter. Given the high level of potential threat and the sophistication of the obfuscation technique, such detections are considered to have a high level of importance, with unlikely chances of false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor proxy logs for traffic to specific hostnames that exhibit characteristics of malicious communication. This detection strategy involves scrutinizing the hostnames within proxy logs to identify any traffic directed towards a list of suspicious domain names. These domains include 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. Monitoring for communication with these domains is crucial as they have been identified as indicators of compromise associated with malicious activity related to the 3CX 3CXDesktopApp. Ensuring vigilant monitoring and analysis of proxy logs for these signs can aid in early detection of potential threats, facilitating timely response measures to mitigate any adverse impacts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: proxy\ndetection:\n    selection:\n        cs-host|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: proxy\ndetection:\n    selection:\n        cs-host|contains:\n            - 'akamaicontainer.com'\n            - 'akamaitechcloudservices.com'\n            - 'azuredeploystore.com'\n            - 'azureonlinecloud.com'\n            - 'azureonlinestorage.com'\n            - 'dunamistrd.com'\n            - 'glcloudservice.com'\n            - 'journalide.org'\n            - 'msedgepackageinfo.com'\n            - 'msstorageazure.com'\n            - 'msstorageboxes.com'\n            - 'officeaddons.com'\n            - 'officestoragebox.com'\n            - 'pbxcloudeservices.com'\n            - 'pbxphonenetwork.com'\n            - 'pbxsources.com'\n            - 'qwepoi123098.com'\n            - 'sbmsa.wiki'\n            - 'sourceslabs.com'\n            - 'visualstudiofactory.com'\n            - 'zacharryblogs.com'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise",
      "answer": "In order to detect potential beaconing activity to domains related to 3CX 3CXDesktopApp compromise, you should monitor proxy logs for traffic to specific hostnames that exhibit characteristics of malicious communication. This detection strategy involves scrutinizing the hostnames within proxy logs to identify any traffic directed towards a list of suspicious domain names. These domains include 'akamaicontainer.com', 'akamaitechcloudservices.com', 'azuredeploystore.com', 'azureonlinecloud.com', 'azureonlinestorage.com', 'dunamistrd.com', 'glcloudservice.com', 'journalide.org', 'msedgepackageinfo.com', 'msstorageazure.com', 'msstorageboxes.com', 'officeaddons.com', 'officestoragebox.com', 'pbxcloudeservices.com', 'pbxphonenetwork.com', 'pbxsources.com', 'qwepoi123098.com', 'sbmsa.wiki', 'sourceslabs.com', 'visualstudiofactory.com', and 'zacharryblogs.com'. Monitoring for communication with these domains is crucial as they have been identified as indicators of compromise associated with malicious activity related to the 3CX 3CXDesktopApp. Ensuring vigilant monitoring and analysis of proxy logs for these signs can aid in early detection of potential threats, facilitating timely response measures to mitigate any adverse impacts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a new bits job by Bitsadmin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a new BITS job by Bitsadmin, you should: Monitor Windows Background Intelligent Transfer Service (BITS) client logs for events with an Event ID of 3, which indicate the creation of a new BITS job, and specifically check if these events were triggered by processes ending with '\\bitsadmin.exe'. It's important to note that while BITS admin tools can be used for legitimate purposes, their misuse can often be associated with malicious activities such as data exfiltration or the download of malicious payloads. The detection focuses on spotting these activities by narrowing down to the specific EventID and process path associated with BITS job creation. However, be aware that there might be many legitimate applications or scripts that use \"bitsadmin\", making it necessary to correlate this event with others, such as Event ID 16403 and the JobID field, to reduce false positives. The overall severity of this detection is considered to be low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: bits-client\ndetection:\n    selection:\n        EventID: 3\n        processPath|endswith: '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Many legitimate applications or scripts could leverage \"bitsadmin\". This event is best correlated with EID 16403 via the JobID field\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: bits-client\ndetection:\n    selection:\n        EventID: 3\n        processPath|endswith: '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Many legitimate applications or scripts could leverage \"bitsadmin\". This event is best correlated with EID 16403 via the JobID field\nlevel: low\n",
      "question": "creation of a new bits job by Bitsadmin",
      "answer": "In order to detect the creation of a new BITS job by Bitsadmin, you should: Monitor Windows Background Intelligent Transfer Service (BITS) client logs for events with an Event ID of 3, which indicate the creation of a new BITS job, and specifically check if these events were triggered by processes ending with '\\bitsadmin.exe'. It's important to note that while BITS admin tools can be used for legitimate purposes, their misuse can often be associated with malicious activities such as data exfiltration or the download of malicious payloads. The detection focuses on spotting these activities by narrowing down to the specific EventID and process path associated with BITS job creation. However, be aware that there might be many legitimate applications or scripts that use \"bitsadmin\", making it necessary to correlate this event with others, such as Event ID 16403 and the JobID field, to reduce false positives. The overall severity of this detection is considered to be low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting failed logins with multiple accounts from a single process on the system..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect failed logins with multiple accounts from a single process on the system, you should monitor for specific security events within the Windows operating environment. Focus on tracking Event ID 4625, which corresponds to failed login attempts, specifically those that utilize a Logon Type of 2, indicating interactive logins. This monitoring should occur over a 24-hour period to gather comprehensive data.\n\nIt is critical to exclude any events where the ProcessName is not specified (indicated by a '-'), as these do not provide the necessary information for analysis. The core of the detection strategy hinges on identifying scenarios where more than 10 failed login attempts have been made using different user accounts but originating from the same process.\n\nBe mindful that certain environments, such as terminal servers, jump servers, Citrix server farms, or workstations where user accounts are frequently switched, might naturally exhibit this behavior and therefore could be sources of false positives.\n\nThis approach is aligned with identifying potential brute force attacks or other unauthorized access attempts, focusing on techniques that fall under the reconnaissance and credential access tactics. By scrutinizing event logs for these specific failed login characteristics, it's possible to pinpoint unusual activity that could indicate a security threat or attack attempt on the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4625\n        LogonType: 2\n    filter:\n        ProcessName: '-'\n    timeframe: 24h\n    condition: selection1 and not filter | count(TargetUserName) by ProcessName > 10\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Other multiuser systems like Citrix server farms\n    - Workstations with frequently changing users\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection1:\n        EventID: 4625\n        LogonType: 2\n    filter:\n        ProcessName: '-'\n    timeframe: 24h\n    condition: selection1 and not filter | count(TargetUserName) by ProcessName > 10\nfalsepositives:\n    - Terminal servers\n    - Jump servers\n    - Other multiuser systems like Citrix server farms\n    - Workstations with frequently changing users\nlevel: medium\n",
      "question": "failed logins with multiple accounts from a single process on the system.",
      "answer": "In order to detect failed logins with multiple accounts from a single process on the system, you should monitor for specific security events within the Windows operating environment. Focus on tracking Event ID 4625, which corresponds to failed login attempts, specifically those that utilize a Logon Type of 2, indicating interactive logins. This monitoring should occur over a 24-hour period to gather comprehensive data.\n\nIt is critical to exclude any events where the ProcessName is not specified (indicated by a '-'), as these do not provide the necessary information for analysis. The core of the detection strategy hinges on identifying scenarios where more than 10 failed login attempts have been made using different user accounts but originating from the same process.\n\nBe mindful that certain environments, such as terminal servers, jump servers, Citrix server farms, or workstations where user accounts are frequently switched, might naturally exhibit this behavior and therefore could be sources of false positives.\n\nThis approach is aligned with identifying potential brute force attacks or other unauthorized access attempts, focusing on techniques that fall under the reconnaissance and credential access tactics. By scrutinizing event logs for these specific failed login characteristics, it's possible to pinpoint unusual activity that could indicate a security threat or attack attempt on the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share, you should: Focus on monitoring process creation logs in Windows. Specifically, look for instances where 'cmd.exe' or its original filename 'Cmd.Exe' is executed. Both conditions must be met: 1) The command line contains the keyword 'copy ' followed by a double backslash '\\\\', indicating an operation to copy files from a network location. 2) The command must also include either '.dmp' or '.dump' in it, suggesting the types of files being copied are memory dump files. These indicators, when present together, suggest that an action is being taken to copy potentially sensitive or diagnostic information from a remote share, possibly for malicious reasons. Due to the nature of the data being targeted and the method of acquisition, this activity is flagged at a high level of concern. However, there might be instances where such actions are legitimate and thus could be considered false positives, although such cases are unknown. The tactics associated with this activity include the retrieval of information and potentially the exfiltration of data.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: copy \\\\<host>\\\\<folder>\\\\process.dmp C:\\Users\\process.dmp\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'copy '\n            - ' \\\\\\\\'\n        CommandLine|contains:\n            - '.dmp'\n            - '.dump'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    # Example: copy \\\\<host>\\\\<folder>\\\\process.dmp C:\\Users\\process.dmp\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'copy '\n            - ' \\\\\\\\'\n        CommandLine|contains:\n            - '.dmp'\n            - '.dump'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share",
      "answer": "In order to detect usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share, you should: Focus on monitoring process creation logs in Windows. Specifically, look for instances where 'cmd.exe' or its original filename 'Cmd.Exe' is executed. Both conditions must be met: 1) The command line contains the keyword 'copy ' followed by a double backslash '\\\\', indicating an operation to copy files from a network location. 2) The command must also include either '.dmp' or '.dump' in it, suggesting the types of files being copied are memory dump files. These indicators, when present together, suggest that an action is being taken to copy potentially sensitive or diagnostic information from a remote share, possibly for malicious reasons. Due to the nature of the data being targeted and the method of acquisition, this activity is flagged at a high level of concern. However, there might be instances where such actions are legitimate and thus could be considered false positives, although such cases are unknown. The tactics associated with this activity include the retrieval of information and potentially the exfiltration of data."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting remote RPC calls to get event log information via EVEN or EVEN6.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect remote RPC calls to get event log information via EVEN or EVEN6, you should monitor your system's RPC firewall application logs for specific events. Here is how you can effectively carry out this detection process:\n\nYour environment must be set up with an RPC Firewall, a security application designed to regulate and monitor Remote Procedure Call (RPC) traffic. This setup should be configured to audit and block certain RPC activities, targeting processes identified by unique UUIDs: 82273fdc-e32a-18c3-3f78-827929dc23ea and f6beaff7-1e19-4fbb-9f8f-b89e2018337c. This specific configuration serves as a preliminary step to focus on potentially malicious RPC communication attempts.\n\nWhen monitoring the application logs generated by the RPC Firewall, look out for log entries categorized under the \"RPCFW\" event log. The entries of particular interest have an EventID of 3, which indicates an event tied to remote RPC calls attempting to access event log information. This is a critical marker for identifying suspicious activities.\n\nThe detection further narrows down to log entries involving the previously mentioned UUIDs associated with the RPC interfaces. These UUIDs are significant as they tie back to specific operations or processes that could be targeted by attackers seeking to retrieve event log data through remote RPC calls.\n\nBe aware that in some cases, these detections might flag legitimate remote administrative tasks involving Windows Events as potential threats. These are considered false positives and should be carefully validated to ensure that legitimate administrative activities are not disrupted.\n\nGiven this detection strategy's high importance level, it is crucial to actively monitor for these indicators and investigate any triggers to ensure that your system is protected against unauthorized attempts to access event log information via remote RPC calls. This approach is aligned with mitigating tactics and techniques related to unauthorized access and data extraction from systems.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:82273fdc-e32a-18c3-3f78-827929dc23ea and uuid:f6beaff7-1e19-4fbb-9f8f-b89e2018337c\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - 82273fdc-e32a-18c3-3f78-827929dc23ea\n            - f6beaff7-1e19-4fbb-9f8f-b89e2018337c\n    condition: selection\nfalsepositives:\n    - Remote administrative tasks on Windows Events\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: rpc_firewall\n    category: application\n    definition: 'Requirements: install and apply the RPC Firewall to all processes with \"audit:true action:block uuid:82273fdc-e32a-18c3-3f78-827929dc23ea and uuid:f6beaff7-1e19-4fbb-9f8f-b89e2018337c\"'\ndetection:\n    selection:\n        EventLog: RPCFW\n        EventID: 3\n        InterfaceUuid:\n            - 82273fdc-e32a-18c3-3f78-827929dc23ea\n            - f6beaff7-1e19-4fbb-9f8f-b89e2018337c\n    condition: selection\nfalsepositives:\n    - Remote administrative tasks on Windows Events\nlevel: high\n",
      "question": "remote RPC calls to get event log information via EVEN or EVEN6",
      "answer": "In order to detect remote RPC calls to get event log information via EVEN or EVEN6, you should monitor your system's RPC firewall application logs for specific events. Here is how you can effectively carry out this detection process:\n\nYour environment must be set up with an RPC Firewall, a security application designed to regulate and monitor Remote Procedure Call (RPC) traffic. This setup should be configured to audit and block certain RPC activities, targeting processes identified by unique UUIDs: 82273fdc-e32a-18c3-3f78-827929dc23ea and f6beaff7-1e19-4fbb-9f8f-b89e2018337c. This specific configuration serves as a preliminary step to focus on potentially malicious RPC communication attempts.\n\nWhen monitoring the application logs generated by the RPC Firewall, look out for log entries categorized under the \"RPCFW\" event log. The entries of particular interest have an EventID of 3, which indicates an event tied to remote RPC calls attempting to access event log information. This is a critical marker for identifying suspicious activities.\n\nThe detection further narrows down to log entries involving the previously mentioned UUIDs associated with the RPC interfaces. These UUIDs are significant as they tie back to specific operations or processes that could be targeted by attackers seeking to retrieve event log data through remote RPC calls.\n\nBe aware that in some cases, these detections might flag legitimate remote administrative tasks involving Windows Events as potential threats. These are considered false positives and should be carefully validated to ensure that legitimate administrative activities are not disrupted.\n\nGiven this detection strategy's high importance level, it is crucial to actively monitor for these indicators and investigate any triggers to ensure that your system is protected against unauthorized attempts to access event log information via remote RPC calls. This approach is aligned with mitigating tactics and techniques related to unauthorized access and data extraction from systems."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who are using a known encryption algorithm to conceal command and control traffic instead of relying on inherent protections offered by a communication protocol, you should focus on analyzing scripts executed on Windows environments. Specifically, monitor for script activities that involve scripting block logs, given that Script Block Logging must be enabled. Look for scripts that incorporate elements such as 'System.Net.Security.SslStream', 'Net.Security.RemoteCertificateValidationCallback', and '.AuthenticateAsClient' within their text. These specific components suggest an attempt to implement SSL/TLS encryption directly, possibly as a means to obscure malicious traffic. It's essential to note, however, that such detection might also flag legitimate administrative scripts using similar techniques for secure communication, hence the possibility of false positives is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - System.Net.Security.SslStream\n            - Net.Security.RemoteCertificateValidationCallback\n            - '.AuthenticateAsClient'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - System.Net.Security.SslStream\n            - Net.Security.RemoteCertificateValidationCallback\n            - '.AuthenticateAsClient'\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: low\n",
      "question": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol.",
      "answer": "In order to detect adversaries who are using a known encryption algorithm to conceal command and control traffic instead of relying on inherent protections offered by a communication protocol, you should focus on analyzing scripts executed on Windows environments. Specifically, monitor for script activities that involve scripting block logs, given that Script Block Logging must be enabled. Look for scripts that incorporate elements such as 'System.Net.Security.SslStream', 'Net.Security.RemoteCertificateValidationCallback', and '.AuthenticateAsClient' within their text. These specific components suggest an attempt to implement SSL/TLS encryption directly, possibly as a means to obscure malicious traffic. It's essential to note, however, that such detection might also flag legitimate administrative scripts using similar techniques for secure communication, hence the possibility of false positives is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the Registry in which a monitor program gets registered to monitor the exit of another process.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the Registry in which a monitor program gets registered to monitor the exit of another process, you should: monitor Windows Registry settings, particularly focusing on events where a registry setting is being modified. Specifically, look for the `SetValue` event type under the category of registry settings. These modifications of interest are those targeting the registry path that includes 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit'. Within these events, keep an eye out for any changes involving the registration or update of a `MonitorProcess`. This activity can be indicative of an attempt to stealthily observe or control the termination of processes, possibly for malicious reasons. Given the high importance (level: high) of such registry changes, any detection of these conditions should be taken seriously, though it's noted that there may be scenarios (false positives) where the implications of such detections are not clear or known. This activity aligns with tactics and techniques around persistence and privilege escalation, as the ability to monitor or manipulate the exit of processes could be exploited to maintain unauthorized access or elevate privileges within a system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit'\n        Details|contains: 'MonitorProcess'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit'\n        Details|contains: 'MonitorProcess'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to the Registry in which a monitor program gets registered to monitor the exit of another process",
      "answer": "In order to detect changes to the Registry in which a monitor program gets registered to monitor the exit of another process, you should: monitor Windows Registry settings, particularly focusing on events where a registry setting is being modified. Specifically, look for the `SetValue` event type under the category of registry settings. These modifications of interest are those targeting the registry path that includes 'Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit'. Within these events, keep an eye out for any changes involving the registration or update of a `MonitorProcess`. This activity can be indicative of an attempt to stealthily observe or control the termination of processes, possibly for malicious reasons. Given the high importance (level: high) of such registry changes, any detection of these conditions should be taken seriously, though it's noted that there may be scenarios (false positives) where the implications of such detections are not clear or known. This activity aligns with tactics and techniques around persistence and privilege escalation, as the ability to monitor or manipulate the exit of processes could be exploited to maintain unauthorized access or elevate privileges within a system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect the creation of a service with a service binary located in a uncommon directory.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a service with a service binary located in an uncommon directory, you should monitor Windows registry settings changes, specifically focusing on the creation or modification of service start options and image paths within the system's service configurations. Start by observing any registry operations where the event type is 'SetValue', indicating a change in value. Specifically, watch for changes within the 'HKLM\\System\\CurrentControlSet\\Services\\' key.\n\nFor the detection of suspicious service creation, look for modifications to the '\\Start' and '\\ImagePath' registry keys. These modifications could indicate attempts to set a service's startup type or specify a service's executable path. Specifically, pay close attention to registry changes where the target object path ends with '\\Start' or '\\ImagePath', and the modifications are made from directories within the user's AppData local or roaming folders, which are uncommon locations for legitimate system services.\n\nThe critical indicators to watch for include:\n- The service's binary being located in '\\AppData\\Local\\' or '\\AppData\\Roaming\\' paths, as legitimate services usually do not reside in these user-specific directories.\n- Changes to the service's start type, particularly settings to boot, system, or automatic start types represented by the specific DWORD values '0x00000000', '0x00000001', and '0x00000002' respectively, which are indicative of a service being configured to start in a manner typical for essential services, thereby raising suspicion when coupled with the uncommon directory location.\n- Ensure to exclude or disregard changes related to benign applications known to legitimately use these directories for their operational services, such as 'Zoom', to avoid unnecessary false positive alerts.\n\nThis monitoring approach utilizes Windows registry logs as its primary log source, focusing on events that indicate a potential unauthorized or malicious service creation. By deploying this strategy, security systems can effectively flag suspicious activities that align with tactics often employed by attackers to gain persistence or execute malicious payloads within a target system, thereby supporting the broader goal of enhancing the detection and prevention of unauthorized system modifications.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_1:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\'\n        TargetObject|endswith: '\\Start'\n        Image|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\Roaming\\'\n        Details:\n            - 'DWORD (0x00000000)'  # boot\n            - 'DWORD (0x00000001)'  # System\n            - 'DWORD (0x00000002)'  # Automatic\n            # 3 - Manual , 4 - Disabled\n    selection_2:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\'\n        TargetObject|endswith: '\\ImagePath'\n        Details|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\Roaming\\'\n    filter:\n        - Image|contains:\n            - '\\AppData\\Roaming\\Zoom'\n            - '\\AppData\\Local\\Zoom'\n        - Details|contains:\n            - '\\AppData\\Roaming\\Zoom'\n            - '\\AppData\\Local\\Zoom'\n    condition: 1 of selection_* and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_1:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\'\n        TargetObject|endswith: '\\Start'\n        Image|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\Roaming\\'\n        Details:\n            - 'DWORD (0x00000000)'  # boot\n            - 'DWORD (0x00000001)'  # System\n            - 'DWORD (0x00000002)'  # Automatic\n            # 3 - Manual , 4 - Disabled\n    selection_2:\n        EventType: SetValue\n        TargetObject|startswith: 'HKLM\\System\\CurrentControlSet\\Services\\'\n        TargetObject|endswith: '\\ImagePath'\n        Details|contains:\n            - '\\AppData\\Local\\'\n            - '\\AppData\\Roaming\\'\n    filter:\n        - Image|contains:\n            - '\\AppData\\Roaming\\Zoom'\n            - '\\AppData\\Local\\Zoom'\n        - Details|contains:\n            - '\\AppData\\Roaming\\Zoom'\n            - '\\AppData\\Local\\Zoom'\n    condition: 1 of selection_* and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Detect the creation of a service with a service binary located in a uncommon directory",
      "answer": "In order to detect the creation of a service with a service binary located in an uncommon directory, you should monitor Windows registry settings changes, specifically focusing on the creation or modification of service start options and image paths within the system's service configurations. Start by observing any registry operations where the event type is 'SetValue', indicating a change in value. Specifically, watch for changes within the 'HKLM\\System\\CurrentControlSet\\Services\\' key.\n\nFor the detection of suspicious service creation, look for modifications to the '\\Start' and '\\ImagePath' registry keys. These modifications could indicate attempts to set a service's startup type or specify a service's executable path. Specifically, pay close attention to registry changes where the target object path ends with '\\Start' or '\\ImagePath', and the modifications are made from directories within the user's AppData local or roaming folders, which are uncommon locations for legitimate system services.\n\nThe critical indicators to watch for include:\n- The service's binary being located in '\\AppData\\Local\\' or '\\AppData\\Roaming\\' paths, as legitimate services usually do not reside in these user-specific directories.\n- Changes to the service's start type, particularly settings to boot, system, or automatic start types represented by the specific DWORD values '0x00000000', '0x00000001', and '0x00000002' respectively, which are indicative of a service being configured to start in a manner typical for essential services, thereby raising suspicion when coupled with the uncommon directory location.\n- Ensure to exclude or disregard changes related to benign applications known to legitimately use these directories for their operational services, such as 'Zoom', to avoid unnecessary false positive alerts.\n\nThis monitoring approach utilizes Windows registry logs as its primary log source, focusing on events that indicate a potential unauthorized or malicious service creation. By deploying this strategy, security systems can effectively flag suspicious activities that align with tactics often employed by attackers to gain persistence or execute malicious payloads within a target system, thereby supporting the broader goal of enhancing the detection and prevention of unauthorized system modifications."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential privilege escalation attempt via the creation of the \"*.Exe.Local\" folder inside the \"System32\" directory in order to sideload \"comctl32.dll\".\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential privilege escalation attempt via the creation of the \"*.Exe.Local\" folder inside the \"System32\" directory in order to sideload \"comctl32.dll\", you should: Monitor for file events specifically on Windows systems where the target filenames start with specific paths tied to critical executables including 'C:\\Windows\\System32\\logonUI.exe.local', 'C:\\Windows\\System32\\werFault.exe.local', 'C:\\Windows\\System32\\consent.exe.local', 'C:\\Windows\\System32\\narrator.exe.local', and 'C:\\Windows\\System32\\wermgr.exe.local'. Additionally, ensure that these files end with '\\comctl32.dll'. Situations where these criteria are met should be flagged with a high level of concern due to the potential for privilege escalation. This involves sideloading a known operational library to exploit the system's trust in these executables, allowing an attacker to execute arbitrary code with elevated privileges. The primary tactics being targeted here include \u201cPrivilege Escalation\u201d and \u201cDefense Evasion\u201d, by manipulating trusted processes and files. Any detections based on these conditions should be taken seriously, although it's acknowledged that there may be unknown situations that could trigger false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith:\n            - 'C:\\Windows\\System32\\logonUI.exe.local'\n            - 'C:\\Windows\\System32\\werFault.exe.local'\n            - 'C:\\Windows\\System32\\consent.exe.local'\n            - 'C:\\Windows\\System32\\narrator.exe.local'\n            - 'C:\\Windows\\System32\\wermgr.exe.local'\n        TargetFilename|endswith: '\\comctl32.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: file_event\n    product: windows\ndetection:\n    selection:\n        TargetFilename|startswith:\n            - 'C:\\Windows\\System32\\logonUI.exe.local'\n            - 'C:\\Windows\\System32\\werFault.exe.local'\n            - 'C:\\Windows\\System32\\consent.exe.local'\n            - 'C:\\Windows\\System32\\narrator.exe.local'\n            - 'C:\\Windows\\System32\\wermgr.exe.local'\n        TargetFilename|endswith: '\\comctl32.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential privilege escalation attempt via the creation of the \"*.Exe.Local\" folder inside the \"System32\" directory in order to sideload \"comctl32.dll\"",
      "answer": "In order to detect potential privilege escalation attempt via the creation of the \"*.Exe.Local\" folder inside the \"System32\" directory in order to sideload \"comctl32.dll\", you should: Monitor for file events specifically on Windows systems where the target filenames start with specific paths tied to critical executables including 'C:\\Windows\\System32\\logonUI.exe.local', 'C:\\Windows\\System32\\werFault.exe.local', 'C:\\Windows\\System32\\consent.exe.local', 'C:\\Windows\\System32\\narrator.exe.local', and 'C:\\Windows\\System32\\wermgr.exe.local'. Additionally, ensure that these files end with '\\comctl32.dll'. Situations where these criteria are met should be flagged with a high level of concern due to the potential for privilege escalation. This involves sideloading a known operational library to exploit the system's trust in these executables, allowing an attacker to execute arbitrary code with elevated privileges. The primary tactics being targeted here include \u201cPrivilege Escalation\u201d and \u201cDefense Evasion\u201d, by manipulating trusted processes and files. Any detections based on these conditions should be taken seriously, although it's acknowledged that there may be unknown situations that could trigger false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious parent of csc.exe, which could by a sign of payload delivery.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious parent of csc.exe, which could be a sign of payload delivery, you should: Identify instances in Windows process creation logs where the executable 'csc.exe' is initiated by parent processes that are known for potentially dangerous script execution or HTML application hosting. Specifically, look for 'csc.exe' being launched following 'wscript.exe', 'cscript.exe', or 'mshta.exe'. The detection of these particular parent-child process relationships is crucial, as it may indicate an attempt to dynamically compile and execute code as part of a payload delivery mechanism, which is a common tactic in various cyber attacks. Recognize that such activities are flagged with a high level of concern, although there might be scenarios where these detections are innocuous, and those are currently categorized as unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csc.exe'\n        ParentImage|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\csc.exe'\n        ParentImage|endswith:\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious parent of csc.exe, which could by a sign of payload delivery",
      "answer": "In order to detect a suspicious parent of csc.exe, which could be a sign of payload delivery, you should: Identify instances in Windows process creation logs where the executable 'csc.exe' is initiated by parent processes that are known for potentially dangerous script execution or HTML application hosting. Specifically, look for 'csc.exe' being launched following 'wscript.exe', 'cscript.exe', or 'mshta.exe'. The detection of these particular parent-child process relationships is crucial, as it may indicate an attempt to dynamically compile and execute code as part of a payload delivery mechanism, which is a common tactic in various cyber attacks. Recognize that such activities are flagged with a high level of concern, although there might be scenarios where these detections are innocuous, and those are currently categorized as unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications, you should: Monitor the creation processes on Windows systems for any instances where the process image ends with '\\clip.exe' or the original file name is identified as clip.exe. This observation aids in identifying potential malicious activity where adversaries attempt to leverage the clipboard utility (clip.exe) to illicitly gather and potentially exfiltrate sensitive information copied by users. This monitoring should be perceived as having a low level of alert due to the possibility of false positives, as the usage of clip.exe might not always be malicious. However, it remains an essential step in the broader scope of defending against data exfiltration techniques.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\clip.exe'\n        - OriginalFileName: clip.exe\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\clip.exe'\n        - OriginalFileName: clip.exe\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications.",
      "answer": "In order to detect the execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications, you should: Monitor the creation processes on Windows systems for any instances where the process image ends with '\\clip.exe' or the original file name is identified as clip.exe. This observation aids in identifying potential malicious activity where adversaries attempt to leverage the clipboard utility (clip.exe) to illicitly gather and potentially exfiltrate sensitive information copied by users. This monitoring should be perceived as having a low level of alert due to the possibility of false positives, as the usage of clip.exe might not always be malicious. However, it remains an essential step in the broader scope of defending against data exfiltration techniques."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting regsvr32 execution to download and install DLLs located remotely where the address is an IP address..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect regsvr32 execution to download and install DLLs located remotely where the address is an IP address, you should monitor for process creations on Windows systems, especially focused on the execution of regsvr32.exe. This involves checking if the process image name ends with '\\regsvr32.exe' or the original file is named 'REGSVR32.EXE'. Additionally, pay attention to command-line executions that attempt to invoke regsvr32 with the '/i:' or '-i:' options followed by 'http://' or 'https://' URLs that start directly with digits (indicating direct IP address usage rather than domain names) from '1' to '9'. This detection strategy is critical since attackers might use regsvr32, a legitimate Windows utility, to download remote DLLs for malicious purposes, leveraging the fact that IP addresses starting with numbers could be used to bypass less sophisticated security measures. Be mindful of potential false positives which could arise from legitimate applications named similarly or using IP addresses in their normal operations, such as \"7-Zip\". This approach corresponds to a high alert level due to the serious implications of allowing unauthorized DLL downloads and executions via regsvr32.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_ip:\n        CommandLine|contains:\n            - ' /i:http://1'\n            - ' /i:http://2'\n            - ' /i:http://3'\n            - ' /i:http://4'\n            - ' /i:http://5'\n            - ' /i:http://6'\n            - ' /i:http://7'\n            - ' /i:http://8'\n            - ' /i:http://9'\n            - ' /i:https://1'\n            - ' /i:https://2'\n            - ' /i:https://3'\n            - ' /i:https://4'\n            - ' /i:https://5'\n            - ' /i:https://6'\n            - ' /i:https://7'\n            - ' /i:https://8'\n            - ' /i:https://9'\n            - ' -i:http://1'\n            - ' -i:http://2'\n            - ' -i:http://3'\n            - ' -i:http://4'\n            - ' -i:http://5'\n            - ' -i:http://6'\n            - ' -i:http://7'\n            - ' -i:http://8'\n            - ' -i:http://9'\n            - ' -i:https://1'\n            - ' -i:https://2'\n            - ' -i:https://3'\n            - ' -i:https://4'\n            - ' -i:https://5'\n            - ' -i:https://6'\n            - ' -i:https://7'\n            - ' -i:https://8'\n            - ' -i:https://9'\n    condition: all of selection_*\nfalsepositives:\n    - FQDNs that start with a number such as \"7-Zip\"\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_ip:\n        CommandLine|contains:\n            - ' /i:http://1'\n            - ' /i:http://2'\n            - ' /i:http://3'\n            - ' /i:http://4'\n            - ' /i:http://5'\n            - ' /i:http://6'\n            - ' /i:http://7'\n            - ' /i:http://8'\n            - ' /i:http://9'\n            - ' /i:https://1'\n            - ' /i:https://2'\n            - ' /i:https://3'\n            - ' /i:https://4'\n            - ' /i:https://5'\n            - ' /i:https://6'\n            - ' /i:https://7'\n            - ' /i:https://8'\n            - ' /i:https://9'\n            - ' -i:http://1'\n            - ' -i:http://2'\n            - ' -i:http://3'\n            - ' -i:http://4'\n            - ' -i:http://5'\n            - ' -i:http://6'\n            - ' -i:http://7'\n            - ' -i:http://8'\n            - ' -i:http://9'\n            - ' -i:https://1'\n            - ' -i:https://2'\n            - ' -i:https://3'\n            - ' -i:https://4'\n            - ' -i:https://5'\n            - ' -i:https://6'\n            - ' -i:https://7'\n            - ' -i:https://8'\n            - ' -i:https://9'\n    condition: all of selection_*\nfalsepositives:\n    - FQDNs that start with a number such as \"7-Zip\"\nlevel: high\n",
      "question": "regsvr32 execution to download and install DLLs located remotely where the address is an IP address.",
      "answer": "In order to detect regsvr32 execution to download and install DLLs located remotely where the address is an IP address, you should monitor for process creations on Windows systems, especially focused on the execution of regsvr32.exe. This involves checking if the process image name ends with '\\regsvr32.exe' or the original file is named 'REGSVR32.EXE'. Additionally, pay attention to command-line executions that attempt to invoke regsvr32 with the '/i:' or '-i:' options followed by 'http://' or 'https://' URLs that start directly with digits (indicating direct IP address usage rather than domain names) from '1' to '9'. This detection strategy is critical since attackers might use regsvr32, a legitimate Windows utility, to download remote DLLs for malicious purposes, leveraging the fact that IP addresses starting with numbers could be used to bypass less sophisticated security measures. Be mindful of potential false positives which could arise from legitimate applications named similarly or using IP addresses in their normal operations, such as \"7-Zip\". This approach corresponds to a high alert level due to the serious implications of allowing unauthorized DLL downloads and executions via regsvr32."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of the PROCEXP152.sys file in the application-data local temporary folder.\nThis driver is used by Sysinternals Process Explorer but also by KDU (https://github.com/hfiref0x/KDU) or Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of the PROCEXP152.sys file in the application-data local temporary folder, you should monitor Windows file event logs for instances where a file with the name ending in 'PROCEXP152.sys' is created in the '\\AppData\\Local\\Temp\\' directory. It's crucial to exclude events triggered by known legitimate software, such as Sysinternals Process Explorer (procexp64.exe, procexp.exe) and Process Monitor (procmon64.exe, procmon.exe), by filtering out these processes from the detection logic. This approach is necessary as the specified driver is not only utilized by Process Explorer but could also be associated with malicious tools like KDU and Ghost-In-The-Logs, which employ the driver for potentially harmful activities. Note that while this method serves as a medium-level detection strategy, it is not foolproof. Attackers might bypass this detection mechanism simply by changing the driver's filename, and there might be other legitimate tools that use this driver and filename. Therefore, this detection should be part of a broader security strategy and not solely relied upon for identifying malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\'\n        TargetFilename|endswith: 'PROCEXP152.sys'\n    filter:\n        Image|contains:\n            - '\\procexp64.exe'\n            - '\\procexp.exe'\n            - '\\procmon64.exe'\n            - '\\procmon.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Other legimate tools using this driver and filename (like Sysinternals). Note - Clever attackers may easily bypass this detection by just renaming the driver filename. Therefore just Medium-level and don't rely on it.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|contains: '\\AppData\\Local\\Temp\\'\n        TargetFilename|endswith: 'PROCEXP152.sys'\n    filter:\n        Image|contains:\n            - '\\procexp64.exe'\n            - '\\procexp.exe'\n            - '\\procmon64.exe'\n            - '\\procmon.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Other legimate tools using this driver and filename (like Sysinternals). Note - Clever attackers may easily bypass this detection by just renaming the driver filename. Therefore just Medium-level and don't rely on it.\nlevel: medium\n",
      "question": "creation of the PROCEXP152.sys file in the application-data local temporary folder.\nThis driver is used by Sysinternals Process Explorer but also by KDU (https://github.com/hfiref0x/KDU) or Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU.\n",
      "answer": "In order to detect the creation of the PROCEXP152.sys file in the application-data local temporary folder, you should monitor Windows file event logs for instances where a file with the name ending in 'PROCEXP152.sys' is created in the '\\AppData\\Local\\Temp\\' directory. It's crucial to exclude events triggered by known legitimate software, such as Sysinternals Process Explorer (procexp64.exe, procexp.exe) and Process Monitor (procmon64.exe, procmon.exe), by filtering out these processes from the detection logic. This approach is necessary as the specified driver is not only utilized by Process Explorer but could also be associated with malicious tools like KDU and Ghost-In-The-Logs, which employ the driver for potentially harmful activities. Note that while this method serves as a medium-level detection strategy, it is not foolproof. Attackers might bypass this detection mechanism simply by changing the driver's filename, and there might be other legitimate tools that use this driver and filename. Therefore, this detection should be part of a broader security strategy and not solely relied upon for identifying malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting email exfiltration via powershell cmdlets.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect email exfiltration via PowerShell cmdlets, you should focus on monitoring process creation logs within Windows environments. Specifically, keep a vigilant eye for any instances where 'powershell.exe' or 'pwsh.exe' are launched. Within the command lines initiated by these executables, it is imperative to look for the combination of certain PowerShell commands. These include 'Add-PSSnapin', paired with 'Get-Recipient', and the additional use of '-ExpandProperty EmailAddresses', 'SmtpAddress', and '-hidetableheaders'. The presence of these command-line arguments together may indicate an attempt to query and exfiltrate email addresses without triggering obvious signs of malicious activity. Given the high impact of such an action, the alert level for this behavior is considered high, although it's important to remain cautious of potential unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Add-PSSnapin'\n            - 'Get-Recipient'\n            - '-ExpandProperty'\n            - 'EmailAddresses'\n            - 'SmtpAddress'\n            - '-hidetableheaders'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains|all:\n            - 'Add-PSSnapin'\n            - 'Get-Recipient'\n            - '-ExpandProperty'\n            - 'EmailAddresses'\n            - 'SmtpAddress'\n            - '-hidetableheaders'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "email exfiltration via powershell cmdlets",
      "answer": "In order to detect email exfiltration via PowerShell cmdlets, you should focus on monitoring process creation logs within Windows environments. Specifically, keep a vigilant eye for any instances where 'powershell.exe' or 'pwsh.exe' are launched. Within the command lines initiated by these executables, it is imperative to look for the combination of certain PowerShell commands. These include 'Add-PSSnapin', paired with 'Get-Recipient', and the additional use of '-ExpandProperty EmailAddresses', 'SmtpAddress', and '-hidetableheaders'. The presence of these command-line arguments together may indicate an attempt to query and exfiltrate email addresses without triggering obvious signs of malicious activity. Given the high impact of such an action, the alert level for this behavior is considered high, although it's important to remain cautious of potential unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file type dropped by an Exchange component in IIS.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious file type dropped by an Exchange component in IIS, you should: Monitor Windows file event logs for instances where files with specific extensions (such as '.aspx', '.asp', '.ashx', '.ps1', '.bat', '.exe', '.dll', '.vbs') are created or modified by processes that end with '\\w3wp.exe' and contain 'MSExchange' in their command line parameters. This activity is indicative of potential malicious behavior associated with the web server's interaction with Exchange components, aiming to exploit or manipulate Exchange functionalities, possibly for command execution or persistence on the server. Be aware that while this detection strategy is tailored to capture a specific attack pattern, there could be instances that are not malicious (though these are currently unknown), thus it's crucial to investigate the context of the matches at a medium level of alert severity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n            - '.ps1'\n            - '.bat'\n            - '.exe'\n            - '.dll'\n            - '.vbs'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        Image|endswith: '\\w3wp.exe'\n        CommandLine|contains: 'MSExchange'\n    selection_types:\n        TargetFilename|endswith:\n            - '.aspx'\n            - '.asp'\n            - '.ashx'\n            - '.ps1'\n            - '.bat'\n            - '.exe'\n            - '.dll'\n            - '.vbs'\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "suspicious file type dropped by an Exchange component in IIS",
      "answer": "In order to detect suspicious file type dropped by an Exchange component in IIS, you should: Monitor Windows file event logs for instances where files with specific extensions (such as '.aspx', '.asp', '.ashx', '.ps1', '.bat', '.exe', '.dll', '.vbs') are created or modified by processes that end with '\\w3wp.exe' and contain 'MSExchange' in their command line parameters. This activity is indicative of potential malicious behavior associated with the web server's interaction with Exchange components, aiming to exploit or manipulate Exchange functionalities, possibly for command execution or persistence on the server. Be aware that while this detection strategy is tailored to capture a specific attack pattern, there could be instances that are not malicious (though these are currently unknown), thus it's crucial to investigate the context of the matches at a medium level of alert severity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when adversaries are seeking details about the network configuration and settings of systems they access or through information discovery of remote systems, focus on monitoring the creation of processes on Windows systems for execution of specific command lines that are commonly used to gather network information. Watch for processes initiated with command lines containing any of the following commands: 'ipconfig /all', 'netsh interface show interface', 'arp -a', 'nbtstat -n', 'net config', 'route print'. These commands are typically used by adversaries to collect detailed information on the network's configuration, such as IP addresses, MAC addresses, network interfaces, and active connections. It's important to note that, while these commands can be indicative of information gathering activities by an adversary, they are also used by system administrators for legitimate purposes. Therefore, occurrences of these commands might not always signal a threat, and the context in which they are used should be carefully considered to reduce the likelihood of false positives. This detection focuses on understanding the tactics and techniques related to Discovery, specifically aimed at identifying adversaries' activities that involve scanning and probing network information.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'ipconfig /all'\n            - 'netsh interface show interface'\n            - 'arp -a'\n            - 'nbtstat -n'\n            - 'net config'\n            - 'route print'\n    condition: selection\nfalsepositives:\n    - Administrator, hotline ask to user\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'ipconfig /all'\n            - 'netsh interface show interface'\n            - 'arp -a'\n            - 'nbtstat -n'\n            - 'net config'\n            - 'route print'\n    condition: selection\nfalsepositives:\n    - Administrator, hotline ask to user\nlevel: low\n",
      "question": "Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems",
      "answer": "In order to detect when adversaries are seeking details about the network configuration and settings of systems they access or through information discovery of remote systems, focus on monitoring the creation of processes on Windows systems for execution of specific command lines that are commonly used to gather network information. Watch for processes initiated with command lines containing any of the following commands: 'ipconfig /all', 'netsh interface show interface', 'arp -a', 'nbtstat -n', 'net config', 'route print'. These commands are typically used by adversaries to collect detailed information on the network's configuration, such as IP addresses, MAC addresses, network interfaces, and active connections. It's important to note that, while these commands can be indicative of information gathering activities by an adversary, they are also used by system administrators for legitimate purposes. Therefore, occurrences of these commands might not always signal a threat, and the context in which they are used should be carefully considered to reduce the likelihood of false positives. This detection focuses on understanding the tactics and techniques related to Discovery, specifically aimed at identifying adversaries' activities that involve scanning and probing network information."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting All TCP traffic on particular port from attacker is routed to different port. ex. '/sbin/iptables -t nat -D PREROUTING -p tcp -s 192.168.1.1 --dport 22 -j REDIRECT --to-ports 42392'\nThe traffic looks like encrypted SSH communications going to TCP port 22, but in reality is being directed to the shell port once it hits the iptables rule for the attacker host only.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify an attack where all TCP traffic on a particular port from an attacker is routed to a different port, making it appear as encrypted SSH communications going to TCP port 22, but in reality, it is redirected to the shell port once it hits the iptables rule for the attacker host only, you should:\n\nMonitor Linux audit logs for execution events (`EXECVE` type) specifically related to the iptables command. Look for commands ending with 'iptables' and using the '-t nat' options to manipulate the network address translation (NAT) table. This often involves redirecting traffic from one port to another, which is a common technique used by attackers to disguise their activities or bypass network security measures.\n\nThe detection should focus on commands containing '--to-ports 42' or '--to-ports 43', which indicates an attempt to redirect traffic to these specific ports. These details, derived from auditd service logs, serve as indicators of a potentially malicious iptables configuration designed to covertly reroute network traffic.\n\nConsider any occurrence of these specific command patterns as suspicious, but also be aware of legitimate use cases for port redirection. Common legitimate scenarios could include network administration tasks or services configuration.\n\nThis monitoring activity is tied to the MITRE ATT&CK tactics and techniques related to Defense Evasion and Command and Control, as redirecting traffic can be used to evade network security mechanisms or establish command and control channels.\n\nKeep the detection level at medium, reflecting a balanced approach between sensitivity and the potential for false positives, where the observed activity might stem from legitimate network administration work involving port redirection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    cmd:\n        type: 'EXECVE'\n        a0|endswith: 'iptables'\n        a1: '-t'\n        a2: 'nat'\n    keywords:\n        - '--to-ports 42'\n        - '--to-ports 43'\n    condition: cmd and keywords\nfalsepositives:\n    - Legitimate ports redirect\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    cmd:\n        type: 'EXECVE'\n        a0|endswith: 'iptables'\n        a1: '-t'\n        a2: 'nat'\n    keywords:\n        - '--to-ports 42'\n        - '--to-ports 43'\n    condition: cmd and keywords\nfalsepositives:\n    - Legitimate ports redirect\nlevel: medium\n",
      "question": "All TCP traffic on particular port from attacker is routed to different port. ex. '/sbin/iptables -t nat -D PREROUTING -p tcp -s 192.168.1.1 --dport 22 -j REDIRECT --to-ports 42392'\nThe traffic looks like encrypted SSH communications going to TCP port 22, but in reality is being directed to the shell port once it hits the iptables rule for the attacker host only.\n",
      "answer": "In order to identify an attack where all TCP traffic on a particular port from an attacker is routed to a different port, making it appear as encrypted SSH communications going to TCP port 22, but in reality, it is redirected to the shell port once it hits the iptables rule for the attacker host only, you should:\n\nMonitor Linux audit logs for execution events (`EXECVE` type) specifically related to the iptables command. Look for commands ending with 'iptables' and using the '-t nat' options to manipulate the network address translation (NAT) table. This often involves redirecting traffic from one port to another, which is a common technique used by attackers to disguise their activities or bypass network security measures.\n\nThe detection should focus on commands containing '--to-ports 42' or '--to-ports 43', which indicates an attempt to redirect traffic to these specific ports. These details, derived from auditd service logs, serve as indicators of a potentially malicious iptables configuration designed to covertly reroute network traffic.\n\nConsider any occurrence of these specific command patterns as suspicious, but also be aware of legitimate use cases for port redirection. Common legitimate scenarios could include network administration tasks or services configuration.\n\nThis monitoring activity is tied to the MITRE ATT&CK tactics and techniques related to Defense Evasion and Command and Control, as redirecting traffic can be used to evade network security mechanisms or establish command and control channels.\n\nKeep the detection level at medium, reflecting a balanced approach between sensitivity and the potential for false positives, where the observed activity might stem from legitimate network administration work involving port redirection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious process creation as SYSTEM user (suspicious program or command line parameter).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect a suspicious process creation as SYSTEM user (suspicious program or command line parameter), you should: monitor the creation of processes on Windows systems, specifically focusing on events where the process is initiated with System integrity level. Pay close attention to processes initiated by users with names containing variations of \"AUTHORI\" or \"AUTORI\", which are aimed to cover various language settings. \n\nSpecial attention should be given to processes that involve the execution of specific applications such as calculator (calc.exe), Windows Script Host (wscript.exe, cscript.exe), HTML Help (hh.exe), Microsoft HTML Application Host (mshta.exe), forfiles, and ping command executables. These executables are often leveraged in malicious activities when paired with suspicious command line parameters that include, but are not limited to, stopping system services, running PowerShell commands with hidden windows or encoded commands, utilizing certutil for encoding or caching commands, interacting with shadow copies (often in ransomware attacks), extracting system keys, modifying registry entries for persistence, downloading files via PowerShell, using Rubeus and Mimikatz for credential theft and manipulation, invoking in-memory execution with Invoke-Expression (IEx) in PowerShell, and process dumping methods for data exfiltration.\n\nThe detection strategy should exclude known benign activities such as administrative actions, regular scripts, and tools used by systems administrators, as well as specific monitoring tools activities. This methodology aims to minimize false positives while effectively identifying and responding to potential security threats indicated by the attempted or successful creation of processes under the SYSTEM integrity level, involving either suspicious executables or command-line arguments.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        IntegrityLevel: System\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_special:\n        - Image|endswith:\n            - '\\calc.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\hh.exe'\n            - '\\mshta.exe'\n            - '\\forfiles.exe'\n            - '\\ping.exe'\n        - CommandLine|contains:\n            # - 'sc stop ' # stops a system service # causes FPs\n            - ' -NoP '  # Often used in malicious PowerShell commands\n            - ' -W Hidden '  # Often used in malicious PowerShell commands\n            - ' -decode '  # Used with certutil\n            - ' /decode '  # Used with certutil\n            - ' /urlcache '  # Used with certutil\n            - ' -urlcache '  # Used with certutil\n            - ' -e* JAB'  # PowerShell encoded commands\n            - ' -e* SUVYI'  # PowerShell encoded commands\n            - ' -e* SQBFAFgA'  # PowerShell encoded commands\n            - ' -e* aWV4I'  # PowerShell encoded commands\n            - ' -e* IAB'  # PowerShell encoded commands\n            - ' -e* PAA'  # PowerShell encoded commands\n            - ' -e* aQBlAHgA'  # PowerShell encoded commands\n            - 'vssadmin delete shadows'  # Ransomware\n            - 'reg SAVE HKLM'  # save registry SAM - syskey extraction\n            - ' -ma '  # ProcDump\n            - 'Microsoft\\Windows\\CurrentVersion\\Run'  # Run key in command line - often in combination with REG ADD\n            - '.downloadstring('  # PowerShell download command\n            - '.downloadfile('  # PowerShell download command\n            - ' /ticket:'  # Rubeus\n            - 'dpapi::'     #Mimikatz\n            - 'event::clear'        #Mimikatz\n            - 'event::drop'     #Mimikatz\n            - 'id::modify'      #Mimikatz\n            - 'kerberos::'       #Mimikatz\n            - 'lsadump::'      #Mimikatz\n            - 'misc::'     #Mimikatz\n            - 'privilege::'       #Mimikatz\n            - 'rpc::'      #Mimikatz\n            - 'sekurlsa::'       #Mimikatz\n            - 'sid::'        #Mimikatz\n            - 'token::'      #Mimikatz\n            - 'vault::cred'     #Mimikatz\n            - 'vault::list'     #Mimikatz\n            - ' p::d '  # Mimikatz\n            - ';iex('  # PowerShell IEX\n            - 'MiniDump'  # Process dumping method apart from procdump\n            - 'net user '\n    filter_ping:\n        CommandLine: 'ping 127.0.0.1 -n 5'\n    filter_vs:\n        Image|endswith: '\\PING.EXE'\n        ParentCommandLine|contains: '\\DismFoDInstall.cmd'\n    filter_config_mgr:\n        ParentImage|startswith: 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n    filter_java:\n        ParentImage|startswith: 'C:\\Program Files (x86)\\Java\\'\n        ParentImage|endswith: '\\bin\\javaws.exe'\n        Image|startswith: 'C:\\Program Files (x86)\\Java\\'\n        Image|endswith: '\\bin\\jp2launcher.exe'\n        CommandLine|contains: ' -ma '\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Administrative activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        IntegrityLevel: System\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    selection_special:\n        - Image|endswith:\n            - '\\calc.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n            - '\\hh.exe'\n            - '\\mshta.exe'\n            - '\\forfiles.exe'\n            - '\\ping.exe'\n        - CommandLine|contains:\n            # - 'sc stop ' # stops a system service # causes FPs\n            - ' -NoP '  # Often used in malicious PowerShell commands\n            - ' -W Hidden '  # Often used in malicious PowerShell commands\n            - ' -decode '  # Used with certutil\n            - ' /decode '  # Used with certutil\n            - ' /urlcache '  # Used with certutil\n            - ' -urlcache '  # Used with certutil\n            - ' -e* JAB'  # PowerShell encoded commands\n            - ' -e* SUVYI'  # PowerShell encoded commands\n            - ' -e* SQBFAFgA'  # PowerShell encoded commands\n            - ' -e* aWV4I'  # PowerShell encoded commands\n            - ' -e* IAB'  # PowerShell encoded commands\n            - ' -e* PAA'  # PowerShell encoded commands\n            - ' -e* aQBlAHgA'  # PowerShell encoded commands\n            - 'vssadmin delete shadows'  # Ransomware\n            - 'reg SAVE HKLM'  # save registry SAM - syskey extraction\n            - ' -ma '  # ProcDump\n            - 'Microsoft\\Windows\\CurrentVersion\\Run'  # Run key in command line - often in combination with REG ADD\n            - '.downloadstring('  # PowerShell download command\n            - '.downloadfile('  # PowerShell download command\n            - ' /ticket:'  # Rubeus\n            - 'dpapi::'     #Mimikatz\n            - 'event::clear'        #Mimikatz\n            - 'event::drop'     #Mimikatz\n            - 'id::modify'      #Mimikatz\n            - 'kerberos::'       #Mimikatz\n            - 'lsadump::'      #Mimikatz\n            - 'misc::'     #Mimikatz\n            - 'privilege::'       #Mimikatz\n            - 'rpc::'      #Mimikatz\n            - 'sekurlsa::'       #Mimikatz\n            - 'sid::'        #Mimikatz\n            - 'token::'      #Mimikatz\n            - 'vault::cred'     #Mimikatz\n            - 'vault::list'     #Mimikatz\n            - ' p::d '  # Mimikatz\n            - ';iex('  # PowerShell IEX\n            - 'MiniDump'  # Process dumping method apart from procdump\n            - 'net user '\n    filter_ping:\n        CommandLine: 'ping 127.0.0.1 -n 5'\n    filter_vs:\n        Image|endswith: '\\PING.EXE'\n        ParentCommandLine|contains: '\\DismFoDInstall.cmd'\n    filter_config_mgr:\n        ParentImage|startswith: 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n    filter_java:\n        ParentImage|startswith: 'C:\\Program Files (x86)\\Java\\'\n        ParentImage|endswith: '\\bin\\javaws.exe'\n        Image|startswith: 'C:\\Program Files (x86)\\Java\\'\n        Image|endswith: '\\bin\\jp2launcher.exe'\n        CommandLine|contains: ' -ma '\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Administrative activity\n    - Scripts and administrative tools used in the monitored environment\n    - Monitoring activity\nlevel: high\n",
      "question": "suspicious process creation as SYSTEM user (suspicious program or command line parameter)",
      "answer": "In order to detect a suspicious process creation as SYSTEM user (suspicious program or command line parameter), you should: monitor the creation of processes on Windows systems, specifically focusing on events where the process is initiated with System integrity level. Pay close attention to processes initiated by users with names containing variations of \"AUTHORI\" or \"AUTORI\", which are aimed to cover various language settings. \n\nSpecial attention should be given to processes that involve the execution of specific applications such as calculator (calc.exe), Windows Script Host (wscript.exe, cscript.exe), HTML Help (hh.exe), Microsoft HTML Application Host (mshta.exe), forfiles, and ping command executables. These executables are often leveraged in malicious activities when paired with suspicious command line parameters that include, but are not limited to, stopping system services, running PowerShell commands with hidden windows or encoded commands, utilizing certutil for encoding or caching commands, interacting with shadow copies (often in ransomware attacks), extracting system keys, modifying registry entries for persistence, downloading files via PowerShell, using Rubeus and Mimikatz for credential theft and manipulation, invoking in-memory execution with Invoke-Expression (IEx) in PowerShell, and process dumping methods for data exfiltration.\n\nThe detection strategy should exclude known benign activities such as administrative actions, regular scripts, and tools used by systems administrators, as well as specific monitoring tools activities. This methodology aims to minimize false positives while effectively identifying and responding to potential security threats indicated by the attempted or successful creation of processes under the SYSTEM integrity level, involving either suspicious executables or command-line arguments."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675 ..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675, you should focus on monitoring antivirus logs specifically for files created or modified in the `C:\\Windows\\System32\\spool\\drivers\\x64\\` directory. This path is critical because it's commonly exploited by attackers aiming to leverage the Print Spooler vulnerabilities to execute malicious code remotely on a Windows system. \n\nIt's crucial to watch for any activity involving the creation or modification of files in this directory without immediately flagging files that have been submitted to Symantec for analysis (identified by mentions such as \"File submitted to Symantec\"), as these might still be under investigation and could result in false positives. Nonetheless, since these false positives are considered unlikely or are pending further analysis by a Protection Service for Platforms (PSP), any hit outside of this context should be taken with utmost seriousness.\n\nFor effective detection, ensure to log and scrutinize the signature of the detected file, its filename, and the computer name which reported the activity. By concentrating on these details, you can identify and respond to potential exploitation of these vulnerabilities more swiftly. Given the critical nature of these vulnerabilities and the method of attack, this detection mechanism is paramount in defending against unauthorized remote code execution that capitalizes on the Windows Print Spooler vulnerabilities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: antivirus\ndetection:\n    selection:\n        Filename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\'\n    keywords:\n        - 'File submitted to Symantec' # symantec fp, pending analysis, more generic\n    condition: selection and not keywords\nfields:\n    - Signature\n    - Filename\n    - ComputerName\nfalsepositives:\n    - Unlikely, or pending PSP analysis\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: antivirus\ndetection:\n    selection:\n        Filename|contains: 'C:\\Windows\\System32\\spool\\drivers\\x64\\'\n    keywords:\n        - 'File submitted to Symantec' # symantec fp, pending analysis, more generic\n    condition: selection and not keywords\nfields:\n    - Signature\n    - Filename\n    - ComputerName\nfalsepositives:\n    - Unlikely, or pending PSP analysis\nlevel: critical\n",
      "question": "suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675 .",
      "answer": "In order to detect the suspicious file that is created from PoC code against Windows Print Spooler Remote Code Execution Vulnerability CVE-2021-34527 (PrinterNightmare), CVE-2021-1675, you should focus on monitoring antivirus logs specifically for files created or modified in the `C:\\Windows\\System32\\spool\\drivers\\x64\\` directory. This path is critical because it's commonly exploited by attackers aiming to leverage the Print Spooler vulnerabilities to execute malicious code remotely on a Windows system. \n\nIt's crucial to watch for any activity involving the creation or modification of files in this directory without immediately flagging files that have been submitted to Symantec for analysis (identified by mentions such as \"File submitted to Symantec\"), as these might still be under investigation and could result in false positives. Nonetheless, since these false positives are considered unlikely or are pending further analysis by a Protection Service for Platforms (PSP), any hit outside of this context should be taken with utmost seriousness.\n\nFor effective detection, ensure to log and scrutinize the signature of the detected file, its filename, and the computer name which reported the activity. By concentrating on these details, you can identify and respond to potential exploitation of these vulnerabilities more swiftly. Given the critical nature of these vulnerabilities and the method of attack, this detection mechanism is paramount in defending against unauthorized remote code execution that capitalizes on the Windows Print Spooler vulnerabilities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity)..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity), you should:\n\nMonitor Windows security logs for event ID 4663, which indicates an attempt to access a file object. Pay special attention to the instances where the object type is specifically a file and the access list includes '%%1537', signaling a rename or delete operation. Furthermore, ensure the keyword '0x8020000000000000' is present in the log entry, as it denotes a specific type of access attempt related to these operations. To effectively identify potential ransomware activity, look for cases where more than ten of these specific events are detected within a short timeframe of 30 seconds, all linked by the same SubjectLogonId, indicating they were performed by the same user account.\n\nBe mindful of potential false positives which may arise from legitimate activities like software uninstallation processes or file restoration activities, which can also trigger similar log entries. The alert level for such detections is considered medium, emphasizing the need for further investigation to confirm malicious activities. This monitoring strategy aligns with understanding and mitigating tactics and techniques such as Data Destruction and Data Encrypted for Impact, common in ransomware attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : Policies/Windows Settings/Security Settings/Local Policies/Audit Policy/Audit object access, Policies/Windows Settings/Security Settings/Advanced Audit Policy Configuration/Object Access'\ndetection:\n    selection:\n        EventID: 4663\n        ObjectType: 'File'\n        AccessList: '%%1537'\n        Keywords: '0x8020000000000000'\n    timeframe: 30s\n    condition: selection | count() by SubjectLogonId > 10\nfalsepositives:\n    - Software uninstallation\n    - Files restore activities\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\n    definition: 'Requirements: Audit Policy : Policies/Windows Settings/Security Settings/Local Policies/Audit Policy/Audit object access, Policies/Windows Settings/Security Settings/Advanced Audit Policy Configuration/Object Access'\ndetection:\n    selection:\n        EventID: 4663\n        ObjectType: 'File'\n        AccessList: '%%1537'\n        Keywords: '0x8020000000000000'\n    timeframe: 30s\n    condition: selection | count() by SubjectLogonId > 10\nfalsepositives:\n    - Software uninstallation\n    - Files restore activities\nlevel: medium\n",
      "question": "multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity).",
      "answer": "In order to detect multiple file rename or delete events occurrence within a specified period of time by a same user (these events may signalize about ransomware activity), you should:\n\nMonitor Windows security logs for event ID 4663, which indicates an attempt to access a file object. Pay special attention to the instances where the object type is specifically a file and the access list includes '%%1537', signaling a rename or delete operation. Furthermore, ensure the keyword '0x8020000000000000' is present in the log entry, as it denotes a specific type of access attempt related to these operations. To effectively identify potential ransomware activity, look for cases where more than ten of these specific events are detected within a short timeframe of 30 seconds, all linked by the same SubjectLogonId, indicating they were performed by the same user account.\n\nBe mindful of potential false positives which may arise from legitimate activities like software uninstallation processes or file restoration activities, which can also trigger similar log entries. The alert level for such detections is considered medium, emphasizing the need for further investigation to confirm malicious activities. This monitoring strategy aligns with understanding and mitigating tactics and techniques such as Data Destruction and Data Encrypted for Impact, common in ransomware attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of regini.exe which can be used to modify registry keys, the changes are imported from one or more text files..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of regini.exe which can be used to modify registry keys, the changes are imported from one or more text files, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\regini.exe' or the original file name matches 'REGINI.EXE'. It's important to exclude instances where the command line argument matches a certain regular expression pattern (indicating a normal operation that does not modify keys in an unauthorized manner). This detection focuses on identifying potentially malicious attempts to change registry keys through the execution of regini.exe, which might indicate an attack. Monitoring should include capturing the parent image path and command line arguments used during the process creation to help in further analysis. Be aware of legitimate modifications of keys that might trigger this detection, which are considered low-level false positives. The related MITRE ATT&CK tactics and techniques include Persistence, Privilege Escalation, and Defense Evasion through Registry Run Keys / Startup Folder, Boot or Logon Autostart Execution, and Modify Registry respectively.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\regini.exe'\n        - OriginalFileName: 'REGINI.EXE'\n    filter:\n        CommandLine|re: ':[^ \\\\]' # Covered in 77946e79-97f1-45a2-84b4-f37b5c0d8682\n    condition: selection and not filter\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Legitimate modification of keys\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\regini.exe'\n        - OriginalFileName: 'REGINI.EXE'\n    filter:\n        CommandLine|re: ':[^ \\\\]' # Covered in 77946e79-97f1-45a2-84b4-f37b5c0d8682\n    condition: selection and not filter\nfields:\n    - ParentImage\n    - CommandLine\nfalsepositives:\n    - Legitimate modification of keys\nlevel: low\n",
      "question": "execution of regini.exe which can be used to modify registry keys, the changes are imported from one or more text files.",
      "answer": "In order to detect the execution of regini.exe which can be used to modify registry keys, the changes are imported from one or more text files, you should: Monitor the creation of processes on Windows systems, specifically looking for instances where the process image ends with '\\regini.exe' or the original file name matches 'REGINI.EXE'. It's important to exclude instances where the command line argument matches a certain regular expression pattern (indicating a normal operation that does not modify keys in an unauthorized manner). This detection focuses on identifying potentially malicious attempts to change registry keys through the execution of regini.exe, which might indicate an attack. Monitoring should include capturing the parent image path and command line arguments used during the process creation to help in further analysis. Be aware of legitimate modifications of keys that might trigger this detection, which are considered low-level false positives. The related MITRE ATT&CK tactics and techniques include Persistence, Privilege Escalation, and Defense Evasion through Registry Run Keys / Startup Folder, Boot or Logon Autostart Execution, and Modify Registry respectively."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe'.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe', you should: Monitor the creation of processes on Windows systems, focusing on identifying instances where a process named 'CustomShellHost.exe' initiates another process. However, any initiated process that is exactly 'C:\\Windows\\explorer.exe' should be excluded from suspicions. This approach aims to spot potentially malicious activities while minimizing false positives, though it's important to note that some unrelated activities may still be incorrectly flagged as suspicious. The monitoring is guided by medium-level alerts, indicating a balanced sensitivity towards detecting potentially harmful actions without overwhelming the system with false alarms.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\CustomShellHost.exe'\n    filter:\n        Image: 'C:\\Windows\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\CustomShellHost.exe'\n    filter:\n        Image: 'C:\\Windows\\explorer.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe'",
      "answer": "In order to detect the execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe', you should: Monitor the creation of processes on Windows systems, focusing on identifying instances where a process named 'CustomShellHost.exe' initiates another process. However, any initiated process that is exactly 'C:\\Windows\\explorer.exe' should be excluded from suspicions. This approach aims to spot potentially malicious activities while minimizing false positives, though it's important to note that some unrelated activities may still be incorrectly flagged as suspicious. The monitoring is guided by medium-level alerts, indicating a balanced sensitivity towards detecting potentially harmful actions without overwhelming the system with false alarms."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a user attempts to clear console history, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion, you should: Focus on monitoring PowerShell script behavior within Windows environments, especially where Script Block Logging is enabled. Look for the execution of specific commands that indicate an attempt to clear or delete command history. These include the use of \"Clear-History\" command, which directly clears the command history, and operations involving \"Remove-Item\" or its alias \"rm\", particularly when they target files associated with PowerShell history such as \"ConsoleHost_history.txt\" or the PowerShell readline history save path \"(Get-PSReadlineOption).HistorySavePath\". The detection strategy hinges on catching either the direct clearing of history or the removal of history files, signaling a high-level threat of an adversary trying to hide their tracks within a compromised system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection1:\n        ScriptBlockText|contains: Clear-History\n    selection2a:\n        ScriptBlockText|contains:\n            - Remove-Item\n            - rm\n    selection2b:\n        ScriptBlockText|contains:\n            - ConsoleHost_history.txt\n            - (Get-PSReadlineOption).HistorySavePath\n    condition: selection1 or selection2a and selection2b\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection1:\n        ScriptBlockText|contains: Clear-History\n    selection2a:\n        ScriptBlockText|contains:\n            - Remove-Item\n            - rm\n    selection2b:\n        ScriptBlockText|contains:\n            - ConsoleHost_history.txt\n            - (Get-PSReadlineOption).HistorySavePath\n    condition: selection1 or selection2a and selection2b\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion.",
      "answer": "In order to identify when a user attempts to clear console history, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion, you should: Focus on monitoring PowerShell script behavior within Windows environments, especially where Script Block Logging is enabled. Look for the execution of specific commands that indicate an attempt to clear or delete command history. These include the use of \"Clear-History\" command, which directly clears the command history, and operations involving \"Remove-Item\" or its alias \"rm\", particularly when they target files associated with PowerShell history such as \"ConsoleHost_history.txt\" or the PowerShell readline history save path \"(Get-PSReadlineOption).HistorySavePath\". The detection strategy hinges on catching either the direct clearing of history or the removal of history files, signaling a high-level threat of an adversary trying to hide their tracks within a compromised system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious encoded payloads in WMI Event Consumers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious encoded payloads in WMI Event Consumers, you should monitor Windows Management Instrumentation (WMI) event logs for specific encoded payload patterns. Focus on identifying any events where the destination contains certain base64 offsets indicative of suspicious or potentially malicious content. These include patterns that reference \"WriteProcessMemory\", which suggests an attempt to modify another process's memory\u2014a common tactic in exploitation and persistence; or strings like \"This program cannot be run in DOS mode\" and \"This program must be run under Win32\", which are typically found in the headers of Windows executables and may indicate embedded or obfuscated executable content within the payload. Monitoring for these specific patterns in WMI event logs is crucial. Additionally, keeping track of the user and the operation involved in these events can provide further context and aid in investigation. It is important to note that while this approach is high in its detection level, there may still be unknown false positives, so corroborating these findings with other indicators of compromise is recommended.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: wmi_event\ndetection:\n    selection_destination:\n        Destination|base64offset|contains:\n            - 'WriteProcessMemory'\n            - 'This program cannot be run in DOS mode'\n            - 'This program must be run under Win32'\n    condition: selection_destination\nfields:\n    - User\n    - Operation\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: wmi_event\ndetection:\n    selection_destination:\n        Destination|base64offset|contains:\n            - 'WriteProcessMemory'\n            - 'This program cannot be run in DOS mode'\n            - 'This program must be run under Win32'\n    condition: selection_destination\nfields:\n    - User\n    - Operation\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious encoded payloads in WMI Event Consumers",
      "answer": "In order to detect suspicious encoded payloads in WMI Event Consumers, you should monitor Windows Management Instrumentation (WMI) event logs for specific encoded payload patterns. Focus on identifying any events where the destination contains certain base64 offsets indicative of suspicious or potentially malicious content. These include patterns that reference \"WriteProcessMemory\", which suggests an attempt to modify another process's memory\u2014a common tactic in exploitation and persistence; or strings like \"This program cannot be run in DOS mode\" and \"This program must be run under Win32\", which are typically found in the headers of Windows executables and may indicate embedded or obfuscated executable content within the payload. Monitoring for these specific patterns in WMI event logs is crucial. Additionally, keeping track of the user and the operation involved in these events can provide further context and aid in investigation. It is important to note that while this approach is high in its detection level, there may still be unknown false positives, so corroborating these findings with other indicators of compromise is recommended."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting creation of a \"rundll32\" process from the ColdSteel persistence service to initiate the cleanup command by calling one of its own exports. This functionality is not present in \"MileStone2017\" and some \"MileStone2016\" samples.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of a \"rundll32\" process from the ColdSteel persistence service to initiate the cleanup command by calling one of its own exports, a functionality not present in \"MileStone2017\" and some \"MileStone2016\" samples, you should monitor the creation of processes on Windows systems with specific characteristics. Look for the creation of processes where the parent process image ends with '\\svchost.exe' and its command line includes either ' -k msupdate', ' -k msupdate2', or ' -k alg'. Additionally, the created process should be 'rundll32.exe' with a command line that contains 'UpdateDriverForPlugAndPlayDevicesW', 'ServiceMain', or 'DiUninstallDevice'. These particular patterns are indicative of an attack scenario involving the execution of commands that are not typically present in legitimate use cases, making false positives unlikely. Due to the critical nature of spotting such activities, which are often linked to malicious persistence mechanisms, oversight of these process creation events is crucial for maintaining the integrity of the system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        ParentCommandLine|contains:\n            - ' -k msupdate'\n            - ' -k msupdate2'\n            - ' -k alg'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            - 'UpdateDriverForPlugAndPlayDevicesW'\n            - 'ServiceMain'\n            - 'DiUninstallDevice'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        ParentCommandLine|contains:\n            - ' -k msupdate'\n            - ' -k msupdate2'\n            - ' -k alg'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains:\n            - 'UpdateDriverForPlugAndPlayDevicesW'\n            - 'ServiceMain'\n            - 'DiUninstallDevice'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "creation of a \"rundll32\" process from the ColdSteel persistence service to initiate the cleanup command by calling one of its own exports. This functionality is not present in \"MileStone2017\" and some \"MileStone2016\" samples",
      "answer": "In order to detect the creation of a \"rundll32\" process from the ColdSteel persistence service to initiate the cleanup command by calling one of its own exports, a functionality not present in \"MileStone2017\" and some \"MileStone2016\" samples, you should monitor the creation of processes on Windows systems with specific characteristics. Look for the creation of processes where the parent process image ends with '\\svchost.exe' and its command line includes either ' -k msupdate', ' -k msupdate2', or ' -k alg'. Additionally, the created process should be 'rundll32.exe' with a command line that contains 'UpdateDriverForPlugAndPlayDevicesW', 'ServiceMain', or 'DiUninstallDevice'. These particular patterns are indicative of an attack scenario involving the execution of commands that are not typically present in legitimate use cases, making false positives unlikely. Due to the critical nature of spotting such activities, which are often linked to malicious persistence mechanisms, oversight of these process creation events is crucial for maintaining the integrity of the system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of \"reg.exe\" commands with the \"delete\" flag on services registry key. Often used by attacker to remove AV software services.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect execution of \"reg.exe\" commands with the \"delete\" flag on services registry key, often used by attackers to remove antivirus software services, you should monitor process creation logs on Windows systems for the execution of \"reg.exe\". Specifically, look for occurrences where the process image ends with 'reg.exe' or the original file name matches 'reg.exe'. It is critical to pay attention to commands that contain the 'delete' keyword, especially when these commands are modifying keys within the '\\SYSTEM\\CurrentControlSet\\services\\' path in the registry. This path is significant because it is where service configurations are stored, and modifying it could suggest attempts to disable or remove software, particularly security services. This detection mechanism is considered to have a high level of importance due to the unlikely event of false positives, indicating that legitimate usage of such commands in this context is rare.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: 'reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_delete:\n        CommandLine|contains: ' delete '\n    selection_key:\n        # Add specific services if you would like the rule to be more specific\n        CommandLine|contains: '\\SYSTEM\\CurrentControlSet\\services\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: 'reg.exe'\n        - OriginalFileName: 'reg.exe'\n    selection_delete:\n        CommandLine|contains: ' delete '\n    selection_key:\n        # Add specific services if you would like the rule to be more specific\n        CommandLine|contains: '\\SYSTEM\\CurrentControlSet\\services\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of \"reg.exe\" commands with the \"delete\" flag on services registry key. Often used by attacker to remove AV software services",
      "answer": "In order to detect execution of \"reg.exe\" commands with the \"delete\" flag on services registry key, often used by attackers to remove antivirus software services, you should monitor process creation logs on Windows systems for the execution of \"reg.exe\". Specifically, look for occurrences where the process image ends with 'reg.exe' or the original file name matches 'reg.exe'. It is critical to pay attention to commands that contain the 'delete' keyword, especially when these commands are modifying keys within the '\\SYSTEM\\CurrentControlSet\\services\\' path in the registry. This path is significant because it is where service configurations are stored, and modifying it could suggest attempts to disable or remove software, particularly security services. This detection mechanism is considered to have a high level of importance due to the unlikely event of false positives, indicating that legitimate usage of such commands in this context is rare."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting device in azure is no longer managed or compliant.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a device in Azure is no longer managed or compliant, you should: monitor the Azure activity logs for any messages indicating that a device is \"no longer compliant\" or \"no longer managed.\" These messages serve as a potential indication of compliance issues or changes in device management status which could impact security posture. It's important, however, to consider that these alerts can sometimes be triggered by administrative oversights, such as forgetting to review a device's status. This scenario has been assessed with a medium level of concern due to the balance between potential security implications and the likelihood of benign triggers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        properties.message:\n            - Device no longer compliant\n            - Device no longer managed\n    condition: selection\nfalsepositives:\n    - Administrator may have forgotten to review the device.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        properties.message:\n            - Device no longer compliant\n            - Device no longer managed\n    condition: selection\nfalsepositives:\n    - Administrator may have forgotten to review the device.\nlevel: medium\n",
      "question": "device in azure is no longer managed or compliant",
      "answer": "In order to identify when a device in Azure is no longer managed or compliant, you should: monitor the Azure activity logs for any messages indicating that a device is \"no longer compliant\" or \"no longer managed.\" These messages serve as a potential indication of compliance issues or changes in device management status which could impact security posture. It's important, however, to consider that these alerts can sometimes be triggered by administrative oversights, such as forgetting to review a device's status. This scenario has been assessed with a medium level of concern due to the balance between potential security implications and the likelihood of benign triggers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Impossible travel activity'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    service: threat_management\n    product: m365\ndetection:\n    selection:\n        eventSource: SecurityComplianceCenter\n        eventName: 'Impossible travel activity'\n        status: success\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel.",
      "answer": "In order to detect when a Microsoft Cloud App Security reported a risky sign-in attempt due to a login associated with an impossible travel, you should monitor logs generated by the threat management system for Microsoft 365 services. Specifically, focus on logs coming from the Security Compliance Center. The key event to look out for is labeled as \"Impossible travel activity\" and must have a status indicating success. This detection aims to identify when a user's credentials have been used to attempt sign-ins from geographical locations that are physically impossible to travel between within the time frame of the sign-in attempts. It is important to note that while this is a medium-level security alert, there may be unknown scenarios that could trigger false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting UTF-8 and UTF-16 Base64 encoded powershell 'Invoke-' calls.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect UTF-8 and UTF-16 Base64 encoded PowerShell 'Invoke-' calls, you should identify when processes are created in a Windows environment that exhibit specific characteristics. Look for processes where the image name ends with either 'powershell.exe' or 'pwsh.exe', or where the original file name is noted as 'PowerShell.EXE' or 'pwsh.dll'. Additionally, focus on command lines that contain ' -e', which indicates the possibility of encoded commands. Furthermore, particular attention should be given to command lines containing patterns that match Base64 encoded versions of 'Invoke-' in both UTF-16LE and UTF-8 formats. These specific strings are indicative of potentially malicious encoded PowerShell commands being executed. It is important to consider all these selection criteria together to accurately detect malicious activities. However, be aware that there may be instances where these indicators might not necessarily point to malicious intent and could trigger false positives. The severity level for this detection rule is high, reflecting its significance in identifying potentially harmful activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cli_enc:\n        CommandLine|contains: ' -e'\n    selection_cli_invoke:\n        CommandLine|contains:\n            # Invoke-\n            # UTF-16LE\n            - 'SQBuAHYAbwBrAGUALQ'\n            - 'kAbgB2AG8AawBlAC0A'\n            - 'JAG4AdgBvAGsAZQAtA'\n            # UTF-8\n            - 'SW52b2tlL'\n            - 'ludm9rZS'\n            - 'JbnZva2Ut'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.EXE'\n            - 'pwsh.dll'\n    selection_cli_enc:\n        CommandLine|contains: ' -e'\n    selection_cli_invoke:\n        CommandLine|contains:\n            # Invoke-\n            # UTF-16LE\n            - 'SQBuAHYAbwBrAGUALQ'\n            - 'kAbgB2AG8AawBlAC0A'\n            - 'JAG4AdgBvAGsAZQAtA'\n            # UTF-8\n            - 'SW52b2tlL'\n            - 'ludm9rZS'\n            - 'JbnZva2Ut'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "UTF-8 and UTF-16 Base64 encoded powershell 'Invoke-' calls",
      "answer": "In order to detect UTF-8 and UTF-16 Base64 encoded PowerShell 'Invoke-' calls, you should identify when processes are created in a Windows environment that exhibit specific characteristics. Look for processes where the image name ends with either 'powershell.exe' or 'pwsh.exe', or where the original file name is noted as 'PowerShell.EXE' or 'pwsh.dll'. Additionally, focus on command lines that contain ' -e', which indicates the possibility of encoded commands. Furthermore, particular attention should be given to command lines containing patterns that match Base64 encoded versions of 'Invoke-' in both UTF-16LE and UTF-8 formats. These specific strings are indicative of potentially malicious encoded PowerShell commands being executed. It is important to consider all these selection criteria together to accurately detect malicious activities. However, be aware that there may be instances where these indicators might not necessarily point to malicious intent and could trigger false positives. The severity level for this detection rule is high, reflecting its significance in identifying potentially harmful activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting activity mentioned in Operation Wocao report.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activity mentioned in Operation Wocao report, you should: Monitor Windows security logs for events with an ID of 4799. Specifically, look for events where the targeted username begins with 'Administr' and the name of the caller process ends with '\\checkadmin.exe'. This approach helps identify when there\u2019s an attempt to enumerate local administrators potentially for malicious purposes, aligning with practices reported in Operation Wocao. However, it's important to note that legitimate usage of the tool 'checkadmin.exe' by administrators for checking local group memberships could also trigger this detection, and those instances should be considered false positives. The severity of these detections is considered high due to their potential tie to targeted attack methodologies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4799\n        TargetUserName|startswith: 'Administr'\n        CallerProcessName|endswith: '\\checkadmin.exe'\n    condition: selection\nfalsepositives:\n    - Administrators that use checkadmin.exe tool to enumerate local administrators\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4799\n        TargetUserName|startswith: 'Administr'\n        CallerProcessName|endswith: '\\checkadmin.exe'\n    condition: selection\nfalsepositives:\n    - Administrators that use checkadmin.exe tool to enumerate local administrators\nlevel: high\n",
      "question": "activity mentioned in Operation Wocao report",
      "answer": "In order to detect activity mentioned in Operation Wocao report, you should: Monitor Windows security logs for events with an ID of 4799. Specifically, look for events where the targeted username begins with 'Administr' and the name of the caller process ends with '\\checkadmin.exe'. This approach helps identify when there\u2019s an attempt to enumerate local administrators potentially for malicious purposes, aligning with practices reported in Operation Wocao. However, it's important to note that legitimate usage of the tool 'checkadmin.exe' by administrators for checking local group memberships could also trigger this detection, and those instances should be considered false positives. The severity of these detections is considered high due to their potential tie to targeted attack methodologies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting use of Windows Credential Editor (WCE).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of Windows Credential Editor (WCE), you should: Monitor Windows registry event logs for any changes or access to the specific registry key associated with the Windows Credential Editor, particularly changes to the 'Services\\WCESERVICE\\Start' registry key path. This activity is critical to identify as it can indicate unauthorized or malicious use of tools designed to manipulate or exploit Windows credentials. Keep in mind that while this detection mechanism is crucial, there may be instances where legitimate activity triggers the alert, though such false positives are currently unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: Services\\WCESERVICE\\Start\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains: Services\\WCESERVICE\\Start\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "use of Windows Credential Editor (WCE)",
      "answer": "In order to detect the use of Windows Credential Editor (WCE), you should: Monitor Windows registry event logs for any changes or access to the specific registry key associated with the Windows Credential Editor, particularly changes to the 'Services\\WCESERVICE\\Start' registry key path. This activity is critical to identify as it can indicate unauthorized or malicious use of tools designed to manipulate or exploit Windows credentials. Keep in mind that while this detection mechanism is crucial, there may be instances where legitimate activity triggers the alert, though such false positives are currently unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting spawning of suspicious child processes by Atlassian Confluence server which may indicate successful exploitation of CVE-2022-26134.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect spawning of suspicious child processes by Atlassian Confluence server which may indicate successful exploitation of CVE-2022-26134, you should: Monitor for the creation of processes on Linux where the parent process is a Java application running from the '/opt/atlassian/confluence/' directory. Specifically, look for child processes that begin with common shell and scripting languages such as '/bin/sh', 'bash', 'dash', 'ksh', 'zsh', 'csh', 'fish', and also include tools that can fetch external content or execute code like 'curl', 'wget', 'python'. These indicators suggest a high likelihood of malicious activity, possibly related to the exploitation of vulnerabilities in Confluence servers.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        # Monitor suspicious child processes spawned by Confluence\n        ParentImage|startswith: '/opt/atlassian/confluence/'\n        ParentImage|endswith: '/java'\n        CommandLine|contains:\n            - '/bin/sh'\n            - 'bash'\n            - 'dash'\n            - 'ksh'\n            - 'zsh'\n            - 'csh'\n            - 'fish'\n            - 'curl'\n            - 'wget'\n            - 'python'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        # Monitor suspicious child processes spawned by Confluence\n        ParentImage|startswith: '/opt/atlassian/confluence/'\n        ParentImage|endswith: '/java'\n        CommandLine|contains:\n            - '/bin/sh'\n            - 'bash'\n            - 'dash'\n            - 'ksh'\n            - 'zsh'\n            - 'csh'\n            - 'fish'\n            - 'curl'\n            - 'wget'\n            - 'python'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "spawning of suspicious child processes by Atlassian Confluence server which may indicate successful exploitation of CVE-2022-26134",
      "answer": "In order to detect spawning of suspicious child processes by Atlassian Confluence server which may indicate successful exploitation of CVE-2022-26134, you should: Monitor for the creation of processes on Linux where the parent process is a Java application running from the '/opt/atlassian/confluence/' directory. Specifically, look for child processes that begin with common shell and scripting languages such as '/bin/sh', 'bash', 'dash', 'ksh', 'zsh', 'csh', 'fish', and also include tools that can fetch external content or execute code like 'curl', 'wget', 'python'. These indicators suggest a high likelihood of malicious activity, possibly related to the exploitation of vulnerabilities in Confluence servers."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of autostart extensibility point (ASEP) in registry..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification of autostart extensibility point (ASEP) in registry, you should: Monitor Windows registry for set value operations specifically within `\\Software\\Classes`, which is a common area for applications to add extensions or modifications that could affect the way files, folders, and actions are handled. Look for modifications in specific registry paths such as `\\Folder\\ShellEx\\ExtShellFolderViews`, `\\Folder\\ShellEx\\DragDropHandlers`, and similar paths that might be targeted by adversaries to establish persistence or modify the system's behavior for malicious purposes. These paths include areas related to file execution commands, context menu handlers, and drag and drop handlers among others. It is also important to filter out and ignore activities generated by known legitimate sources, such as Microsoft Office installations or certain system processes like 'drvinst.exe' and 'svchost.exe', which may legitimately interact with these registry areas for non-malicious reasons. Pay attention to the security identifiers, object names, and before and after values of the registry keys to understand the context of the changes. However, remain aware that legitimate software and administrative actions often modify these settings for non-malicious reasons, which could lead to false positives. The assessment should be of medium level, with proactive monitoring for the specific registry modifications, excluding the defined benign sources to pinpoint suspicious activity effectively. This approach aims at identifying tactics and techniques employed by adversaries to gain persistence and interfere with system or file behaviors maliciously.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_classes_base:\n        EventType: SetValue\n        TargetObject|contains: '\\Software\\Classes'\n    selection_classes_target:\n        TargetObject|contains:\n            - '\\Folder\\ShellEx\\ExtShellFolderViews'\n            - '\\Folder\\ShellEx\\DragDropHandlers'\n            - '\\Folder\\Shellex\\ColumnHandlers'\n            - '\\Filter'\n            - '\\Exefile\\Shell\\Open\\Command\\(Default)'\n            - '\\Directory\\Shellex\\DragDropHandlers'\n            - '\\Directory\\Shellex\\CopyHookHandlers'\n            - '\\CLSID\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\Instance'\n            - '\\CLSID\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\Instance'\n            - '\\CLSID\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\Instance'\n            - '\\CLSID\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\Instance'\n            - '\\Classes\\AllFileSystemObjects\\ShellEx\\DragDropHandlers'\n            - '\\.exe'\n            - '\\.cmd'\n            - '\\ShellEx\\PropertySheetHandlers'\n            - '\\ShellEx\\ContextMenuHandlers'\n    filter_empty:\n        Details: '(Empty)'\n    filter_msoffice:\n        Details: '{807583E5-5146-11D5-A672-00B0D022E945}'\n    filter_drivers:\n        Image: 'C:\\Windows\\System32\\drvinst.exe'\n    filter_svchost:\n        Image: 'C:\\Windows\\System32\\svchost.exe'\n        # If more targets are found from \"svchost\". Please exclude the whole image\n        TargetObject|contains: '\\lnkfile\\shellex\\ContextMenuHandlers\\'\n    condition: all of selection_* and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_classes_base:\n        EventType: SetValue\n        TargetObject|contains: '\\Software\\Classes'\n    selection_classes_target:\n        TargetObject|contains:\n            - '\\Folder\\ShellEx\\ExtShellFolderViews'\n            - '\\Folder\\ShellEx\\DragDropHandlers'\n            - '\\Folder\\Shellex\\ColumnHandlers'\n            - '\\Filter'\n            - '\\Exefile\\Shell\\Open\\Command\\(Default)'\n            - '\\Directory\\Shellex\\DragDropHandlers'\n            - '\\Directory\\Shellex\\CopyHookHandlers'\n            - '\\CLSID\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\Instance'\n            - '\\CLSID\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\Instance'\n            - '\\CLSID\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\Instance'\n            - '\\CLSID\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\Instance'\n            - '\\Classes\\AllFileSystemObjects\\ShellEx\\DragDropHandlers'\n            - '\\.exe'\n            - '\\.cmd'\n            - '\\ShellEx\\PropertySheetHandlers'\n            - '\\ShellEx\\ContextMenuHandlers'\n    filter_empty:\n        Details: '(Empty)'\n    filter_msoffice:\n        Details: '{807583E5-5146-11D5-A672-00B0D022E945}'\n    filter_drivers:\n        Image: 'C:\\Windows\\System32\\drvinst.exe'\n    filter_svchost:\n        Image: 'C:\\Windows\\System32\\svchost.exe'\n        # If more targets are found from \"svchost\". Please exclude the whole image\n        TargetObject|contains: '\\lnkfile\\shellex\\ContextMenuHandlers\\'\n    condition: all of selection_* and not 1 of filter_*\nfields:\n    - SecurityID\n    - ObjectName\n    - OldValueType\n    - NewValueType\nfalsepositives:\n    - Legitimate software automatically (mostly, during installation) sets up autorun keys for legitimate reason\n    - Legitimate administrator sets up autorun keys for legitimate reason\nlevel: medium\n",
      "question": "modification of autostart extensibility point (ASEP) in registry.",
      "answer": "In order to detect modification of autostart extensibility point (ASEP) in registry, you should: Monitor Windows registry for set value operations specifically within `\\Software\\Classes`, which is a common area for applications to add extensions or modifications that could affect the way files, folders, and actions are handled. Look for modifications in specific registry paths such as `\\Folder\\ShellEx\\ExtShellFolderViews`, `\\Folder\\ShellEx\\DragDropHandlers`, and similar paths that might be targeted by adversaries to establish persistence or modify the system's behavior for malicious purposes. These paths include areas related to file execution commands, context menu handlers, and drag and drop handlers among others. It is also important to filter out and ignore activities generated by known legitimate sources, such as Microsoft Office installations or certain system processes like 'drvinst.exe' and 'svchost.exe', which may legitimately interact with these registry areas for non-malicious reasons. Pay attention to the security identifiers, object names, and before and after values of the registry keys to understand the context of the changes. However, remain aware that legitimate software and administrative actions often modify these settings for non-malicious reasons, which could lead to false positives. The assessment should be of medium level, with proactive monitoring for the specific registry modifications, excluding the defined benign sources to pinpoint suspicious activity effectively. This approach aims at identifying tactics and techniques employed by adversaries to gain persistence and interfere with system or file behaviors maliciously."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious WMI event filter and command line event consumer based on WMI and Security Logs..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious WMI event filter and command line event consumer based on WMI and Security Logs, you should: Monitor Windows security logs for instances where the event ID is 4662, which indicates an operation was performed on an object. Specifically, focus on scenarios where the object type is related to \"WMI Namespace\" and the object name contains the term \"subscription\u201d. These instances can signal potentially malicious activities since attackers might exploit WMI subscriptions to execute arbitrary code or maintain persistence on a host. Be aware that the reliability of detections might vary as the dataset being analyzed could be too small or not sufficiently varied; hence, further testing might be needed to reduce false positives. The severity level for this activity is considered medium.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        ObjectType: 'WMI Namespace'\n        ObjectName|contains: 'subscription'\n    condition: selection\nfalsepositives:\n    - Unknown (data set is too small; further testing needed)\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: security\ndetection:\n    selection:\n        EventID: 4662\n        ObjectType: 'WMI Namespace'\n        ObjectName|contains: 'subscription'\n    condition: selection\nfalsepositives:\n    - Unknown (data set is too small; further testing needed)\nlevel: medium\n",
      "question": "suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
      "answer": "In order to detect suspicious WMI event filter and command line event consumer based on WMI and Security Logs, you should: Monitor Windows security logs for instances where the event ID is 4662, which indicates an operation was performed on an object. Specifically, focus on scenarios where the object type is related to \"WMI Namespace\" and the object name contains the term \"subscription\u201d. These instances can signal potentially malicious activities since attackers might exploit WMI subscriptions to execute arbitrary code or maintain persistence on a host. Be aware that the reliability of detections might vary as the dataset being analyzed could be too small or not sufficiently varied; hence, further testing might be needed to reduce false positives. The severity level for this activity is considered medium."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with highest privileges and not only the privileges of the login user account (e.g. the administrator account).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with the highest privileges and not only the privileges of the login user account (e.g., the administrator account), you should: Monitor Windows process creation logs for instances where the PSEXESVC.exe file is the parent image. Pay special attention if the process is initiated by user accounts that contain \"AUTHORI\" or \"AUTORI\" in their names, as this is often indicative of the command being executed under the context of an authority or administrator account, potentially in a different language setting. Be aware that there may be legitimate uses of this service for debugging purposes, particularly with Microsoft Intune, and such instances should be considered when evaluating potential false positives. This is a critical measure for identifying signs of remote command execution attempts that leverage high privileges on the target system.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage: 'C:\\Windows\\PSEXESVC.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection\nfalsepositives:\n    - Users that debug Microsoft Intune issues using the commands mentioned in the official documentation; see https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage: 'C:\\Windows\\PSEXESVC.exe'\n        User|contains: # covers many language settings\n            - 'AUTHORI'\n            - 'AUTORI'\n    condition: selection\nfalsepositives:\n    - Users that debug Microsoft Intune issues using the commands mentioned in the official documentation; see https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension\nlevel: high\n",
      "question": "suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with highest privileges and not only the privileges of the login user account (e.g. the administrator account)",
      "answer": "In order to detect suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with the highest privileges and not only the privileges of the login user account (e.g., the administrator account), you should: Monitor Windows process creation logs for instances where the PSEXESVC.exe file is the parent image. Pay special attention if the process is initiated by user accounts that contain \"AUTHORI\" or \"AUTORI\" in their names, as this is often indicative of the command being executed under the context of an authority or administrator account, potentially in a different language setting. Be aware that there may be legitimate uses of this service for debugging purposes, particularly with Microsoft Intune, and such instances should be considered when evaluating potential false positives. This is a critical measure for identifying signs of remote command execution attempts that leverage high privileges on the target system."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect attempt to enable auditing of TTY input.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_path_events:\n        type: PATH\n        name:\n            - '/etc/pam.d/system-auth'\n            - '/etc/pam.d/password-auth'\n    selection_tty_events:\n        type:\n            - 'TTY'\n            - 'USER_TTY'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative work\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: linux\n    service: auditd\ndetection:\n    selection_path_events:\n        type: PATH\n        name:\n            - '/etc/pam.d/system-auth'\n            - '/etc/pam.d/password-auth'\n    selection_tty_events:\n        type:\n            - 'TTY'\n            - 'USER_TTY'\n    condition: 1 of selection_*\nfalsepositives:\n    - Administrative work\nlevel: high\n",
      "question": "Detect attempt to enable auditing of TTY input",
      "answer": "In order to detect attempt to enable auditing of TTY input, you should: Monitor for specific events within Linux environments where the audit daemon (auditd) is enabled. Focus on detecting when there are modifications or interactions with critical authentication-related files, specifically '/etc/pam.d/system-auth' and '/etc/pam.d/password-auth'. Additionally, pay attention to events related to TTY (Teletypewriter) inputs, such as those classified as 'TTY' and 'USER_TTY'. These events should be carefully reviewed to determine if they represent legitimate administrative activities or if they are indicative of an attacker attempting to enable auditing on TTY inputs to capture user inputs, potentially including credentials. Administrative actions could sometimes trigger these events, so it's essential to differentiate between normal administrative work and potential security threats. The detection is considered high level due to the sensitive nature of the activity and its potential impact on security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"systeminfo\" command to retrieve information.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of the \"systeminfo\" command to retrieve information, you should: Monitor the creation of processes on Windows systems, focusing on any process where the image name ends with '\\systeminfo.exe' or the original file name is identified as 'sysinfo.exe'. The detection of these particular process creations is a sign that the \"systeminfo\" command may be being used. This technique is associated with obtaining system information, which can be indicative of reconnaissance activity. The level of certainty for this detection is considered low, implying that while these indicators can suggest suspicious activity, they are not definitive proof of malicious behavior alone and could result in unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\systeminfo.exe'\n        - OriginalFileName: 'sysinfo.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\systeminfo.exe'\n        - OriginalFileName: 'sysinfo.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "usage of the \"systeminfo\" command to retrieve information",
      "answer": "In order to detect the usage of the \"systeminfo\" command to retrieve information, you should: Monitor the creation of processes on Windows systems, focusing on any process where the image name ends with '\\systeminfo.exe' or the original file name is identified as 'sysinfo.exe'. The detection of these particular process creations is a sign that the \"systeminfo\" command may be being used. This technique is associated with obtaining system information, which can be indicative of reconnaissance activity. The level of certainty for this detection is considered low, implying that while these indicators can suggest suspicious activity, they are not definitive proof of malicious behavior alone and could result in unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious processes including shells spawnd from WinRM host process.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious processes including shells spawned from WinRM host process, you should: Identify the creation of processes on Windows systems with a focus on instances where certain command-line tools or shells (such as cmd.exe, sh.exe, bash.exe, powershell.exe, pwsh.exe, wsl.exe, schtasks.exe, certutil.exe, whoami.exe, or bitsadmin.exe) are initiated from a parent process named wsmprovhost.exe. This activity is significant as it might indicate an attacker leveraging Windows Remote Management (WinRM) to execute commands or scripts remotely, which can be a part of various attack tactics like execution, privilege escalation, or lateral movement. It is crucial, however, to consider that not all matches will indicate malicious activity; legitimate administrative use of WinRM which includes similar process creation patterns could be erroneously detected, thus, being mindful of potential legitimate uses of WinRM in the environment is essential. The rule carries a high level of importance due to the severity of the underlying behavior it aims to detect.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsmprovhost.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate WinRM usage\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\wsmprovhost.exe'\n        Image|endswith:\n            - '\\cmd.exe'\n            - '\\sh.exe'\n            - '\\bash.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wsl.exe'\n            - '\\schtasks.exe'\n            - '\\certutil.exe'\n            - '\\whoami.exe'\n            - '\\bitsadmin.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate WinRM usage\nlevel: high\n",
      "question": "suspicious processes including shells spawnd from WinRM host process",
      "answer": "In order to detect suspicious processes including shells spawned from WinRM host process, you should: Identify the creation of processes on Windows systems with a focus on instances where certain command-line tools or shells (such as cmd.exe, sh.exe, bash.exe, powershell.exe, pwsh.exe, wsl.exe, schtasks.exe, certutil.exe, whoami.exe, or bitsadmin.exe) are initiated from a parent process named wsmprovhost.exe. This activity is significant as it might indicate an attacker leveraging Windows Remote Management (WinRM) to execute commands or scripts remotely, which can be a part of various attack tactics like execution, privilege escalation, or lateral movement. It is crucial, however, to consider that not all matches will indicate malicious activity; legitimate administrative use of WinRM which includes similar process creation patterns could be erroneously detected, thus, being mindful of potential legitimate uses of WinRM in the environment is essential. The rule carries a high level of importance due to the severity of the underlying behavior it aims to detect."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting risky authencaition from a non AD registered device without MFA being required..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect risky authentication from a non AD registered device without MFA being required, you should: Monitor Azure sign-in logs for successful authentication attempts that only utilized single factor authentication from devices not registered with Active Directory and are marked as 'atRisk'. This involves focusing on sign-in attempts where 'Status' is marked as 'Success', 'AuthenticationRequirement' indicates 'singleFactorAuthentication', 'DeviceDetail.trusttype' is not specified (indicating a lack of device registration or trust), and 'RiskState' is flagged as 'atRisk', pointing towards a potentially compromised or risky authentication attempt. Noteworthy, this process does not predict all possible false positives, which remain unknown, and the significance level of these detection criteria is considered high.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n        AuthenticationRequirement: 'singleFactorAuthentication'\n        DeviceDetail.trusttype: ''\n        RiskState: 'atRisk'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: signinlogs\ndetection:\n    selection:\n        Status: 'Success'\n        AuthenticationRequirement: 'singleFactorAuthentication'\n        DeviceDetail.trusttype: ''\n        RiskState: 'atRisk'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "risky authencaition from a non AD registered device without MFA being required.",
      "answer": "In order to detect risky authentication from a non AD registered device without MFA being required, you should: Monitor Azure sign-in logs for successful authentication attempts that only utilized single factor authentication from devices not registered with Active Directory and are marked as 'atRisk'. This involves focusing on sign-in attempts where 'Status' is marked as 'Success', 'AuthenticationRequirement' indicates 'singleFactorAuthentication', 'DeviceDetail.trusttype' is not specified (indicating a lack of device registration or trust), and 'RiskState' is flagged as 'atRisk', pointing towards a potentially compromised or risky authentication attempt. Noteworthy, this process does not predict all possible false positives, which remain unknown, and the significance level of these detection criteria is considered high."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting user accept agreement execution in psexec commandline.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect user acceptance agreement execution in psexec commandline, you should: Monitor the process creation logs within Windows systems. Specifically, focus on instances where the process image name ends with '\\psexec.exe' or where the original file name is identified as 'psexec.c'. This activity could indicate an effort to execute commands or scripts remotely, which is a common tactic used by attackers to maintain presence and control over a compromised system. Be aware that some legitimate administrative activities might also trigger this detection, such as the use of administrative scripts involving PsExec for legitimate remote command execution. Therefore, it is classified with a medium level of alert and requires context-aware investigation to distinguish between malicious and benign activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\psexec.exe'\n        - OriginalFileName: 'psexec.c'\n    condition: selection\nfalsepositives:\n    - Administrative scripts.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\psexec.exe'\n        - OriginalFileName: 'psexec.c'\n    condition: selection\nfalsepositives:\n    - Administrative scripts.\nlevel: medium\n",
      "question": "user accept agreement execution in psexec commandline",
      "answer": "In order to detect user acceptance agreement execution in psexec commandline, you should: Monitor the process creation logs within Windows systems. Specifically, focus on instances where the process image name ends with '\\psexec.exe' or where the original file name is identified as 'psexec.c'. This activity could indicate an effort to execute commands or scripts remotely, which is a common tactic used by attackers to maintain presence and control over a compromised system. Be aware that some legitimate administrative activities might also trigger this detection, such as the use of administrative scripts involving PsExec for legitimate remote command execution. Therefore, it is classified with a medium level of alert and requires context-aware investigation to distinguish between malicious and benign activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect modification of the startup key to a path where a payload could be stored to be launched during startup.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect modification of the startup key to a path where a payload could be stored to be launched during startup, you should monitor the Windows registry for any setting changes specifically within the 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders' key. Look for events where the EventType is 'SetValue'. This indicates that a value within a registry key has been modified. Furthermore, focus on changes where the TargetObject ends with 'Startup', encompassing both the Common Startup folder and individual user Startup folders. This is critical as malicious actors often target these registry keys to ensure their payload executes during system startup, achieving persistence on the compromised system. False positives might arise in situations where legitimate software or administrators make changes to these startup keys, which are currently considered unknown. The importance of monitoring these registry modifications is rated as high due to the potential for misuse by adversaries to gain persistent access and execute unauthorized code automatically upon system boot.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders'\n        TargetObject|endswith: 'Startup' # cover Common Startup and Startup\n        # can use Details|contains: path if get too many FP\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: registry_set\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|contains: 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders'\n        TargetObject|endswith: 'Startup' # cover Common Startup and Startup\n        # can use Details|contains: path if get too many FP\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Detect modification of the startup key to a path where a payload could be stored to be launched during startup",
      "answer": "In order to detect modification of the startup key to a path where a payload could be stored to be launched during startup, you should monitor the Windows registry for any setting changes specifically within the 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders' key. Look for events where the EventType is 'SetValue'. This indicates that a value within a registry key has been modified. Furthermore, focus on changes where the TargetObject ends with 'Startup', encompassing both the Common Startup folder and individual user Startup folders. This is critical as malicious actors often target these registry keys to ensure their payload executes during system startup, achieving persistence on the compromised system. False positives might arise in situations where legitimate software or administrators make changes to these startup keys, which are currently considered unknown. The importance of monitoring these registry modifications is rated as high due to the potential for misuse by adversaries to gain persistent access and execute unauthorized code automatically upon system boot."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of REGSVR32.exe with DLL files masquerading as other files.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of REGSVR32.exe with DLL files masquerading as other files, you should monitor for the creation of processes related to Windows operations, specifically focusing on the execution of 'regsvr32.exe'. It's important to look for instances where the 'Image' path ends with '\\regsvr32.exe' as well as verifying if the 'OriginalFileName' is exactly 'REGSVR32.EXE'. In addition, examine the command line arguments for 'regsvr32.exe' processes to spot execution attempts where command line parameters end with file extensions that typically wouldn't be associated with legitimate usage of 'regsvr32.exe', such as '.bin', '.bmp', '.cr2', '.dat', '.eps', '.gif', '.ico', '.jpeg', '.jpg', '.nef', '.orf', '.png', '.raw', '.sr2', '.temp', '.tif', '.tiff', '.tmp', '.rtf', and '.txt'. It's critical to apply this rule across all detected instances comprehensively. Given that false positives are deemed unlikely, alerts raised under these criteria should be taken seriously and investigated promptly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_cli:\n        CommandLine|endswith:\n            # Add more image extensions\n            # https://twitter.com/Max_Mal_/status/1542461200797163522/photo/3\n            - '.bin'\n            - '.bmp'\n            - '.cr2'\n            - '.dat'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.temp'\n            - '.tif'\n            - '.tiff'\n            - '.tmp'\n            - '.rtf'\n            - '.txt'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_cli:\n        CommandLine|endswith:\n            # Add more image extensions\n            # https://twitter.com/Max_Mal_/status/1542461200797163522/photo/3\n            - '.bin'\n            - '.bmp'\n            - '.cr2'\n            - '.dat'\n            - '.eps'\n            - '.gif'\n            - '.ico'\n            - '.jpeg'\n            - '.jpg'\n            - '.nef'\n            - '.orf'\n            - '.png'\n            - '.raw'\n            - '.sr2'\n            - '.temp'\n            - '.tif'\n            - '.tiff'\n            - '.tmp'\n            - '.rtf'\n            - '.txt'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "execution of REGSVR32.exe with DLL files masquerading as other files",
      "answer": "In order to detect the execution of REGSVR32.exe with DLL files masquerading as other files, you should monitor for the creation of processes related to Windows operations, specifically focusing on the execution of 'regsvr32.exe'. It's important to look for instances where the 'Image' path ends with '\\regsvr32.exe' as well as verifying if the 'OriginalFileName' is exactly 'REGSVR32.EXE'. In addition, examine the command line arguments for 'regsvr32.exe' processes to spot execution attempts where command line parameters end with file extensions that typically wouldn't be associated with legitimate usage of 'regsvr32.exe', such as '.bin', '.bmp', '.cr2', '.dat', '.eps', '.gif', '.ico', '.jpeg', '.jpg', '.nef', '.orf', '.png', '.raw', '.sr2', '.temp', '.tif', '.tiff', '.tmp', '.rtf', and '.txt'. It's critical to apply this rule across all detected instances comprehensively. Given that false positives are deemed unlikely, alerts raised under these criteria should be taken seriously and investigated promptly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName|startswith: \n            - 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH'\n            - 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH'\n        operationName|endswith:\n            - '/CRONJOBS/WRITE'\n            - '/JOBS/WRITE'\n    condition: selection\nfalsepositives:\n    - Azure Kubernetes CronJob/Job may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: azure\n    service: activitylogs\ndetection:\n    selection:\n        operationName|startswith: \n            - 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH'\n            - 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH'\n        operationName|endswith:\n            - '/CRONJOBS/WRITE'\n            - '/JOBS/WRITE'\n    condition: selection\nfalsepositives:\n    - Azure Kubernetes CronJob/Job may be done by a system administrator.\n    - If known behavior is causing false positives, it can be exempted from the rule.\nlevel: medium\n",
      "question": "Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate.\nKubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs.\nAn Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n",
      "answer": "In order to identify when a Azure Kubernetes CronJob runs in Azure Cloud. Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. An Adversary may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster, you should: Monitor Azure activity logs for specific operation names that indicate interaction with Kubernetes connected clusters and managed clusters, particularly those operation names that start with 'MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/BATCH' or 'MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/BATCH' and end with '/CRONJOBS/WRITE' or '/JOBS/WRITE'. These logs are indicative of activities related to the creation or modification of Kubernetes Jobs and CronJobs, which can be used for legitimate batch processing tasks but might also be utilized by adversaries for malicious purposes. It is essential to consider that some detected activities may be legitimate administrative actions. Hence, known benign behaviors may need to be filtered out to reduce false positives. This approach leverages Azure's logging capabilities to identify potential misuse of Kubernetes CronJobs and Jobs, ensuring that only those activities that deviate from expected patterns are flagged for further investigation. The associated tactics and techniques for this kind of monitoring include Execution and Persistence, as managing and scheduling tasks like CronJobs and Jobs can be abused by attackers to execute malicious code or maintain their presence within a cluster."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell scripts that contains reference to keystroke capturing functions.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell scripts that contain reference to keystroke capturing functions, you should: Monitor PowerShell script logs, specifically focusing on instances where the logs reveal scripts that include text matching '[Windows.Input.Keyboard]::IsKeyDown([System.Windows.Input.Key]::'. This indicates the script may be attempting to capture keystrokes, which is a common technique used by attackers to secretly gather sensitive user input data like passwords or other confidential information. It is essential that Script Block Logging is enabled on Windows to detect such activities. Although this method of detection is reliable, be aware that there might be instances where legitimate scripts use similar functions for non-malicious purposes, which would be considered false positives. The severity of these findings is considered medium, emphasizing the importance of further investigation to confirm malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: '[Windows.Input.Keyboard]::IsKeyDown([System.Windows.Input.Key]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: '[Windows.Input.Keyboard]::IsKeyDown([System.Windows.Input.Key]::'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "PowerShell scripts that contains reference to keystroke capturing functions",
      "answer": "In order to detect PowerShell scripts that contain reference to keystroke capturing functions, you should: Monitor PowerShell script logs, specifically focusing on instances where the logs reveal scripts that include text matching '[Windows.Input.Keyboard]::IsKeyDown([System.Windows.Input.Key]::'. This indicates the script may be attempting to capture keystrokes, which is a common technique used by attackers to secretly gather sensitive user input data like passwords or other confidential information. It is essential that Script Block Logging is enabled on Windows to detect such activities. Although this method of detection is reliable, be aware that there might be instances where legitimate scripts use similar functions for non-malicious purposes, which would be considered false positives. The severity of these findings is considered medium, emphasizing the importance of further investigation to confirm malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of the \"net.exe\" command to start a service using the \"start\" flag.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the usage of the \"net.exe\" command to start a service using the \"start\" flag, you should monitor Windows process creation logs for instances where the \"net.exe\" or \"net1.exe\" file is executed. Specifically, look for occurrences where the command line includes the ' start ' sequence, ensuring there's a space character both before and after \"start\". This detail is essential as it differentiates between the use of the command to begin a service versus other potential uses of \"net start\" for discovering services. However, be mindful that such detections may sometimes flag legitimate activities, such as administrators or users starting a service for non-malicious reasons. Given this, the level of concern for these detections is considered low.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains: ' start '     # space character after the 'start' keyword indicates that a service name follows, in contrast to `net start` discovery expression\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrator or user executes a service for legitimate reasons.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains: ' start '     # space character after the 'start' keyword indicates that a service name follows, in contrast to `net start` discovery expression\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administrator or user executes a service for legitimate reasons.\nlevel: low\n",
      "question": "usage of the \"net.exe\" command to start a service using the \"start\" flag",
      "answer": "In order to detect the usage of the \"net.exe\" command to start a service using the \"start\" flag, you should monitor Windows process creation logs for instances where the \"net.exe\" or \"net1.exe\" file is executed. Specifically, look for occurrences where the command line includes the ' start ' sequence, ensuring there's a space character both before and after \"start\". This detail is essential as it differentiates between the use of the command to begin a service versus other potential uses of \"net start\" for discovering services. However, be mindful that such detections may sometimes flag legitimate activities, such as administrators or users starting a service for non-malicious reasons. Given this, the level of concern for these detections is considered low."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may create a domain account to maintain access to victim systems.\nDomain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain..\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who may create a domain account to maintain access to victim systems, you should focus on monitoring script activities on Windows systems, specifically looking into PowerShell scripts. This is because PowerShell scripts are capable of interacting with Active Directory Domain Services, which manage domain accounts. You need to ensure that Script Block Logging is enabled to capture detailed information about all PowerShell scripts executed on the system. By examining the logs for instances where scripts contain references to \"System.DirectoryServices.AccountManagement\", you can identify potential malicious attempts to interact with or manipulate Active Directory, such as creating or modifying domain accounts to gain or maintain access. Be aware that sometimes these detections might be triggered by legitimate administrative activities, so it's important to verify the context of the detected activity to determine its nature. The critical elements to watch include the execution of PowerShell scripts that interact with Active Directory, and this approach is categorized under tactics and techniques associated with maintaining access through the use of domain accounts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: System.DirectoryServices.AccountManagement\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: System.DirectoryServices.AccountManagement\n    condition: selection\nfalsepositives:\n    - Legitimate administrative script\nlevel: medium\n",
      "question": "Adversaries may create a domain account to maintain access to victim systems.\nDomain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain..\n",
      "answer": "In order to detect adversaries who may create a domain account to maintain access to victim systems, you should focus on monitoring script activities on Windows systems, specifically looking into PowerShell scripts. This is because PowerShell scripts are capable of interacting with Active Directory Domain Services, which manage domain accounts. You need to ensure that Script Block Logging is enabled to capture detailed information about all PowerShell scripts executed on the system. By examining the logs for instances where scripts contain references to \"System.DirectoryServices.AccountManagement\", you can identify potential malicious attempts to interact with or manipulate Active Directory, such as creating or modifying domain accounts to gain or maintain access. Be aware that sometimes these detections might be triggered by legitimate administrative activities, so it's important to verify the context of the detected activity to determine its nature. The critical elements to watch include the execution of PowerShell scripts that interact with Active Directory, and this approach is categorized under tactics and techniques associated with maintaining access through the use of domain accounts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious DNS queries known from Cobalt Strike beacons.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious DNS queries known from Cobalt Strike beacons, you should: Monitor DNS logs for queries that begin with 'aaa.stage.' or 'post.1'. Additionally, keep an eye out for queries containing the pattern '.stage.123456.' within them. These specific patterns in DNS queries are indicative of Cobalt Strike beacon communication, which is a common tool used in cyber attacks to establish a backdoor for persistent access or to exfiltrate data. Any detection of these query patterns should be considered critical, as they are a strong signal of an ongoing or imminent threat. Given the critical nature of these detections, there are no known benign causes for these query patterns (no known false positives), implying that investigations should be prioritized when alerts are triggered. This analysis focuses on DNS logs, highlighting the importance of monitoring and analyzing DNS traffic to uncover potential malicious activities related to Cobalt Strike beacons.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: dns\ndetection:\n    selection1:\n        query|startswith:\n            - 'aaa.stage.'\n            - 'post.1'\n    selection2:\n        query|contains: '.stage.123456.'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: dns\ndetection:\n    selection1:\n        query|startswith:\n            - 'aaa.stage.'\n            - 'post.1'\n    selection2:\n        query|contains: '.stage.123456.'\n    condition: 1 of selection*\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "suspicious DNS queries known from Cobalt Strike beacons",
      "answer": "In order to detect suspicious DNS queries known from Cobalt Strike beacons, you should: Monitor DNS logs for queries that begin with 'aaa.stage.' or 'post.1'. Additionally, keep an eye out for queries containing the pattern '.stage.123456.' within them. These specific patterns in DNS queries are indicative of Cobalt Strike beacon communication, which is a common tool used in cyber attacks to establish a backdoor for persistent access or to exfiltrate data. Any detection of these query patterns should be considered critical, as they are a strong signal of an ongoing or imminent threat. Given the critical nature of these detections, there are no known benign causes for these query patterns (no known false positives), implying that investigations should be prioritized when alerts are triggered. This analysis focuses on DNS logs, highlighting the importance of monitoring and analyzing DNS traffic to uncover potential malicious activities related to Cobalt Strike beacons."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up, you should: Focus on monitoring process access within Windows environments, specifically observing attempts to access the Local Security Authority Subsystem Service (lsass.exe). This involves looking for access patterns that include specific GrantedAccess flags such as '0x1038', '0x1438', and '0x143a'. These access flags are critical hints towards unauthorized or suspicious activities, intending to manipulate or dump the memory of the lsass.exe process, which is a common target for attackers seeking to extract sensitive authentication credentials.\n\nAdditionally, pay close attention to the Call Trace logs for indications that the access attempts involve significant system DLLs such as dbghelp.dll, dbgcore.dll, and ntdll.dll. These DLLs are typically employed in legitimate debugging activities but can be misused for dumping memory content, especially in the context of sophisticated credential theft attacks.\n\nTo minimize false positives and refine detection accuracy, it is advisable to consider the context and source of the process access attempt. For instance, filtering out events originating from known system management and monitoring tools or from within temporary directories commonly used by legitimate applications for extraction or temporary storage. This can be achieved by excluding access attempts linked to specific CallTraces like those originating from the C:\\Windows\\Temp\\ directory, or explicitly from Sysmon (System Monitor) activities, indicating the event was captured by a system monitoring tool rather than being an unauthorized access attempt.\n\nIt is also important to be aware of the potential for false positives, particularly with certain access codes, and to apply exclusions or additional scrutiny as needed to differentiate between malicious activities and legitimate system or administrative operations.\n\nBy carefully monitoring these signals and filtering out known benign activities, it's possible to significantly enhance the detection of unauthorized LSASS memory dumping attempts. These attempts are often indicators of advanced credential theft operations targeting Windows 10, Server 2016, and newer systems, employing tools like Mimikatz, NanoDump, and others specialized in extracting sensitive data.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|contains:\n            #- '0x1fffff' # Too many false positives\n            #- '0x01000'  # Too many false positives\n            #- '0x1010'   # Too many false positives\n            - '0x1038'\n            # - '0x40'   # Too many false positives\n            #- '0x1400'  # Too many false positives\n            # - '0x1410' # Too many false positives\n            - '0x1438'\n            - '0x143a'\n        CallTrace|contains:\n            - 'dbghelp.dll'\n            - 'dbgcore.dll'\n            - 'ntdll.dll'\n    filter_thor:\n        CallTrace|contains|all:\n            - '|C:\\Windows\\Temp\\asgard2-agent\\'\n            - '\\thor\\thor64.exe+'\n            - '|UNKNOWN('\n        GrantedAccess: '0x103800'\n    filter_sysmon:\n        SourceImage: 'C:\\Windows\\Sysmon64.exe'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - False positives are present when looking for 0x1410. Exclusions may be required.\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        GrantedAccess|contains:\n            #- '0x1fffff' # Too many false positives\n            #- '0x01000'  # Too many false positives\n            #- '0x1010'   # Too many false positives\n            - '0x1038'\n            # - '0x40'   # Too many false positives\n            #- '0x1400'  # Too many false positives\n            # - '0x1410' # Too many false positives\n            - '0x1438'\n            - '0x143a'\n        CallTrace|contains:\n            - 'dbghelp.dll'\n            - 'dbgcore.dll'\n            - 'ntdll.dll'\n    filter_thor:\n        CallTrace|contains|all:\n            - '|C:\\Windows\\Temp\\asgard2-agent\\'\n            - '\\thor\\thor64.exe+'\n            - '|UNKNOWN('\n        GrantedAccess: '0x103800'\n    filter_sysmon:\n        SourceImage: 'C:\\Windows\\Sysmon64.exe'\n    condition: selection and not 1 of filter*\nfalsepositives:\n    - False positives are present when looking for 0x1410. Exclusions may be required.\nlevel: high\n",
      "question": "process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up.",
      "answer": "In order to detect process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up, you should: Focus on monitoring process access within Windows environments, specifically observing attempts to access the Local Security Authority Subsystem Service (lsass.exe). This involves looking for access patterns that include specific GrantedAccess flags such as '0x1038', '0x1438', and '0x143a'. These access flags are critical hints towards unauthorized or suspicious activities, intending to manipulate or dump the memory of the lsass.exe process, which is a common target for attackers seeking to extract sensitive authentication credentials.\n\nAdditionally, pay close attention to the Call Trace logs for indications that the access attempts involve significant system DLLs such as dbghelp.dll, dbgcore.dll, and ntdll.dll. These DLLs are typically employed in legitimate debugging activities but can be misused for dumping memory content, especially in the context of sophisticated credential theft attacks.\n\nTo minimize false positives and refine detection accuracy, it is advisable to consider the context and source of the process access attempt. For instance, filtering out events originating from known system management and monitoring tools or from within temporary directories commonly used by legitimate applications for extraction or temporary storage. This can be achieved by excluding access attempts linked to specific CallTraces like those originating from the C:\\Windows\\Temp\\ directory, or explicitly from Sysmon (System Monitor) activities, indicating the event was captured by a system monitoring tool rather than being an unauthorized access attempt.\n\nIt is also important to be aware of the potential for false positives, particularly with certain access codes, and to apply exclusions or additional scrutiny as needed to differentiate between malicious activities and legitimate system or administrative operations.\n\nBy carefully monitoring these signals and filtering out known benign activities, it's possible to significantly enhance the detection of unauthorized LSASS memory dumping attempts. These attempts are often indicators of advanced credential theft operations targeting Windows 10, Server 2016, and newer systems, employing tools like Mimikatz, NanoDump, and others specialized in extracting sensitive data."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting unsigned module load by ClickOnce application..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect unsigned module load by ClickOnce application, you should observe the process of image loading within Windows operating environments. Focus on instances where images are loaded from a path that includes '\\AppData\\Local\\Apps\\2.0\\'. Among these instances, attention should be further narrowed down to those where the loaded modules are either not digitally signed or have an expired signature. This is identified through checking the 'Signed' attribute for a value of 'false' and the 'SignatureStatus' for a value indicating that the signature has 'Expired'. Monitoring for these specific conditions across the specified paths allows for the detection of potentially malicious activity associated with the loading of unsigned or expired modules by ClickOnce applications. Given the targeted nature of this surveillance, instances triggering these conditions are considered to bear a medium threat level with unlikely chances of false positives. This strategy aligns with mitigation and detection techniques relevant to the MITRE ATT&CK framework, specifically addressing tactics and techniques related to the execution of unauthorized or compromised software components.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection_path:\n        Image|contains: '\\AppData\\Local\\Apps\\2.0\\'\n    selection_sig_status:\n        - Signed: 'false'\n        - SignatureStatus: 'Expired'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection_path:\n        Image|contains: '\\AppData\\Local\\Apps\\2.0\\'\n    selection_sig_status:\n        - Signed: 'false'\n        - SignatureStatus: 'Expired'\n    condition: all of selection_*\nfalsepositives:\n    - Unlikely\nlevel: medium\n",
      "question": "unsigned module load by ClickOnce application.",
      "answer": "In order to detect unsigned module load by ClickOnce application, you should observe the process of image loading within Windows operating environments. Focus on instances where images are loaded from a path that includes '\\AppData\\Local\\Apps\\2.0\\'. Among these instances, attention should be further narrowed down to those where the loaded modules are either not digitally signed or have an expired signature. This is identified through checking the 'Signed' attribute for a value of 'false' and the 'SignatureStatus' for a value indicating that the signature has 'Expired'. Monitoring for these specific conditions across the specified paths allows for the detection of potentially malicious activity associated with the loading of unsigned or expired modules by ClickOnce applications. Given the targeted nature of this surveillance, instances triggering these conditions are considered to bear a medium threat level with unlikely chances of false positives. This strategy aligns with mitigation and detection techniques relevant to the MITRE ATT&CK framework, specifically addressing tactics and techniques related to the execution of unauthorized or compromised software components."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item. This could be a sign of exploitation of CVE-2023-23397. Further investigation is required to determine the success of an exploitation..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item, which could be a sign of exploitation of CVE-2023-23397, you should: Monitor the Windows Registry for modifications. Specifically, focus on registry sets associated with Microsoft Office and Outlook, especially those changes made to the Tasks and Notes sections. These modifications are identified by the 'SetValue' event type in the registry logs. It's important to note that sometimes legitimate actions, like receiving reminders for tasks or notes, can also trigger this monitoring condition, so these instances are considered low-level alerts and require further investigation to confirm any actual exploitation attempt.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Office\\'\n            - '\\Outlook\\'\n        TargetObject|contains:\n            - '\\Tasks\\'\n            - '\\Notes\\'\n        EventType: SetValue\n    condition: selection\nfalsepositives:\n    - Legitimate reminders received for a task or a note will also trigger this rule.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        TargetObject|contains|all:\n            - '\\SOFTWARE\\Microsoft\\Office\\'\n            - '\\Outlook\\'\n        TargetObject|contains:\n            - '\\Tasks\\'\n            - '\\Notes\\'\n        EventType: SetValue\n    condition: selection\nfalsepositives:\n    - Legitimate reminders received for a task or a note will also trigger this rule.\nlevel: low\n",
      "question": "changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item. This could be a sign of exploitation of CVE-2023-23397. Further investigation is required to determine the success of an exploitation.",
      "answer": "In order to detect changes to the registry values related to outlook that indicates that a reminder was triggered for a Note or Task item, which could be a sign of exploitation of CVE-2023-23397, you should: Monitor the Windows Registry for modifications. Specifically, focus on registry sets associated with Microsoft Office and Outlook, especially those changes made to the Tasks and Notes sections. These modifications are identified by the 'SetValue' event type in the registry logs. It's important to note that sometimes legitimate actions, like receiving reminders for tasks or notes, can also trigger this monitoring condition, so these instances are considered low-level alerts and require further investigation to confirm any actual exploitation attempt."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting kerberos TGS request using RC4 encryption which may be indicative of kerberoasting.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect kerberos TGS request using RC4 encryption which may be indicative of kerberoasting, you should: Focus on analyzing Zeek logs specifically from the Kerberos service. Look for Ticket-Granting Service (TGS) requests that use RC4-HMAC encryption. It's important to filter out any service account requests that start with a '$', as these are generally considered normal enterprise Service Principal Name (SPN) request activities and not part of this detection strategy. Recognize that events meeting these criteria might indicate a potential kerberoasting attack, aiming to crack service account passwords. This detection strategy is of a medium level of urgency and helps in identifying possible malicious activities related to credential theft and lateral movement, aligning with tactics and techniques such as Credential Access through Kerberoasting. Keep in mind that while this method can be effective, it may also yield false positives in the form of normal enterprise SPN requests activity, requiring further investigation to confirm malicious intent.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: kerberos\ndetection:\n    selection:\n        request_type: 'TGS'\n        cipher: 'rc4-hmac'\n    computer_acct:\n        service|startswith: '$'\n    condition: selection and not computer_acct\nfalsepositives:\n    - Normal enterprise SPN requests activity\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: kerberos\ndetection:\n    selection:\n        request_type: 'TGS'\n        cipher: 'rc4-hmac'\n    computer_acct:\n        service|startswith: '$'\n    condition: selection and not computer_acct\nfalsepositives:\n    - Normal enterprise SPN requests activity\nlevel: medium\n",
      "question": "kerberos TGS request using RC4 encryption which may be indicative of kerberoasting",
      "answer": "In order to detect kerberos TGS request using RC4 encryption which may be indicative of kerberoasting, you should: Focus on analyzing Zeek logs specifically from the Kerberos service. Look for Ticket-Granting Service (TGS) requests that use RC4-HMAC encryption. It's important to filter out any service account requests that start with a '$', as these are generally considered normal enterprise Service Principal Name (SPN) request activities and not part of this detection strategy. Recognize that events meeting these criteria might indicate a potential kerberoasting attack, aiming to crack service account passwords. This detection strategy is of a medium level of urgency and helps in identifying possible malicious activities related to credential theft and lateral movement, aligning with tactics and techniques such as Credential Access through Kerberoasting. Keep in mind that while this method can be effective, it may also yield false positives in the form of normal enterprise SPN requests activity, requiring further investigation to confirm malicious intent."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Cobalt Strike module/commands accidentally entered in CMD shell.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Cobalt Strike module/commands accidentally entered in CMD shell, you should focus on monitoring Windows process creation logs for specific patterns that indicate the execution of these modules or commands. Look for processes that have been initiated from 'Cmd.Exe' or any process that ends with '\\cmd.exe' as part of their file path. Additionally, pay close attention to the command line arguments of these processes. If you notice any of the following command strings: 'Invoke-UserHunter', 'Invoke-ShareFinder', 'Invoke-Kerberoast', 'Invoke-SMBAutoBrute', 'Invoke-Nightmare', 'zerologon', or 'av_query', it's indicative of Cobalt Strike activity. This detection mechanism requires both conditions to be met, meaning that a process must originate from the command shell and include one of the specified malicious command line arguments. Due to the nature of these commands and their association with Cobalt Strike, this detection is flagged with a high level of confidence, although you should consider that there might be scenarios where these commands could be used in a benign context, although such cases are unknown.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'Cmd.Exe'\n        - Image|endswith: '\\cmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'Invoke-UserHunter'\n            - 'Invoke-ShareFinder'\n            - 'Invoke-Kerberoast'\n            - 'Invoke-SMBAutoBrute'\n            - 'Invoke-Nightmare'\n            - 'zerologon'\n            - 'av_query'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'Cmd.Exe'\n        - Image|endswith: '\\cmd.exe'\n    selection_cli:\n        CommandLine|contains:\n            - 'Invoke-UserHunter'\n            - 'Invoke-ShareFinder'\n            - 'Invoke-Kerberoast'\n            - 'Invoke-SMBAutoBrute'\n            - 'Invoke-Nightmare'\n            - 'zerologon'\n            - 'av_query'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "Cobalt Strike module/commands accidentally entered in CMD shell",
      "answer": "In order to detect Cobalt Strike module/commands accidentally entered in CMD shell, you should focus on monitoring Windows process creation logs for specific patterns that indicate the execution of these modules or commands. Look for processes that have been initiated from 'Cmd.Exe' or any process that ends with '\\cmd.exe' as part of their file path. Additionally, pay close attention to the command line arguments of these processes. If you notice any of the following command strings: 'Invoke-UserHunter', 'Invoke-ShareFinder', 'Invoke-Kerberoast', 'Invoke-SMBAutoBrute', 'Invoke-Nightmare', 'zerologon', or 'av_query', it's indicative of Cobalt Strike activity. This detection mechanism requires both conditions to be met, meaning that a process must originate from the command shell and include one of the specified malicious command line arguments. Due to the nature of these commands and their association with Cobalt Strike, this detection is flagged with a high level of confidence, although you should consider that there might be scenarios where these commands could be used in a benign context, although such cases are unknown."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie. This could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server) or potentially a sign of exploitation of CVE-2023-23397\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie, which could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server) or potentially a sign of exploitation of CVE-2023-23397, you should: Monitor Windows process creation events for instances where the parent process image name ends with '\\svchost.exe' and includes the command line argument '-s WebClient'. Specifically, look for the child process image name ending with '\\rundll32.exe' that contains the command line argument 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'. Additionally, inspect for command line patterns that match a URL pointing to an IP address format. Exclude detections where the command line includes references to commonly used local IP address spaces to reduce false positives. This approach helps in identifying suspicious activities potentially related to malicious code execution or exfiltration activities leveraging WebDav.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        ParentCommandLine|contains: '-s WebClient'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'\n        CommandLine|re: '://\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'\n    filter_local_ips:\n        CommandLine|contains:\n            - '://10.' #10.0.0.0/8\n            - '://192.168.' #192.168.0.0/16\n            - '://172.16.' #172.16.0.0/12\n            - '://172.17.'\n            - '://172.18.'\n            - '://172.19.'\n            - '://172.20.'\n            - '://172.21.'\n            - '://172.22.'\n            - '://172.23.'\n            - '://172.24.'\n            - '://172.25.'\n            - '://172.26.'\n            - '://172.27.'\n            - '://172.28.'\n            - '://172.29.'\n            - '://172.30.'\n            - '://172.31.'\n            - '://127.' #127.0.0.0/8\n            - '://169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\svchost.exe'\n        ParentCommandLine|contains: '-s WebClient'\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'\n        CommandLine|re: '://\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'\n    filter_local_ips:\n        CommandLine|contains:\n            - '://10.' #10.0.0.0/8\n            - '://192.168.' #192.168.0.0/16\n            - '://172.16.' #172.16.0.0/12\n            - '://172.17.'\n            - '://172.18.'\n            - '://172.19.'\n            - '://172.20.'\n            - '://172.21.'\n            - '://172.22.'\n            - '://172.23.'\n            - '://172.24.'\n            - '://172.25.'\n            - '://172.26.'\n            - '://172.27.'\n            - '://172.28.'\n            - '://172.29.'\n            - '://172.30.'\n            - '://172.31.'\n            - '://127.' #127.0.0.0/8\n            - '://169.254.' #169.254.0.0/16\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "\"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie. This could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server) or potentially a sign of exploitation of CVE-2023-23397\n",
      "answer": "In order to detect \"svchost.exe\" spawning \"rundll32.exe\" with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie, which could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server) or potentially a sign of exploitation of CVE-2023-23397, you should: Monitor Windows process creation events for instances where the parent process image name ends with '\\svchost.exe' and includes the command line argument '-s WebClient'. Specifically, look for the child process image name ending with '\\rundll32.exe' that contains the command line argument 'C:\\windows\\system32\\davclnt.dll,DavSetCookie'. Additionally, inspect for command line patterns that match a URL pointing to an IP address format. Exclude detections where the command line includes references to commonly used local IP address spaces to reduce false positives. This approach helps in identifying suspicious activities potentially related to malicious code execution or exfiltration activities leveraging WebDav."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Show when private keys are being exported from the device, or when new certificates are installed.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to show when private keys are being exported from the device, or when new certificates are installed, you should monitor Cisco devices for specific activities that can indicate these actions are taking place. Focus on the Cisco AAA (Authentication, Authorization, and Accounting) logs as your primary data source. Look for occurrences of the following command keywords in the logs: 'crypto pki export', 'crypto pki import', and 'crypto pki trustpoint'. These commands are crucial for identifying when private keys may be exported (which could lead to potential security risks if done maliciously) or when new certificates are installed (which could signify a change in the device's trust anchors). The logs should provide details such as the source, command set, user involved, privilege level, and remote address associated with the command's execution. It is important to note that these commands are not commonly run by administrators, so any occurrences might be suspicious. However, you should establish a whitelist of known good certificates to reduce false positives. The level of concern for these events is high, indicating that close attention should be paid to any detection of these commands in your environment.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'crypto pki export'\n        - 'crypto pki import'\n        - 'crypto pki trustpoint'\n    condition: keywords\nfields:\n    - src\n    - CmdSet\n    - User\n    - Privilege_Level\n    - Remote_Address\nfalsepositives:\n    - Not commonly run by administrators. Also whitelist your known good certificates\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: cisco\n    service: aaa\ndetection:\n    keywords:\n        - 'crypto pki export'\n        - 'crypto pki import'\n        - 'crypto pki trustpoint'\n    condition: keywords\nfields:\n    - src\n    - CmdSet\n    - User\n    - Privilege_Level\n    - Remote_Address\nfalsepositives:\n    - Not commonly run by administrators. Also whitelist your known good certificates\nlevel: high\n",
      "question": "Show when private keys are being exported from the device, or when new certificates are installed",
      "answer": "In order to show when private keys are being exported from the device, or when new certificates are installed, you should monitor Cisco devices for specific activities that can indicate these actions are taking place. Focus on the Cisco AAA (Authentication, Authorization, and Accounting) logs as your primary data source. Look for occurrences of the following command keywords in the logs: 'crypto pki export', 'crypto pki import', and 'crypto pki trustpoint'. These commands are crucial for identifying when private keys may be exported (which could lead to potential security risks if done maliciously) or when new certificates are installed (which could signify a change in the device's trust anchors). The logs should provide details such as the source, command set, user involved, privilege level, and remote address associated with the command's execution. It is important to note that these commands are not commonly run by administrators, so any occurrences might be suspicious. However, you should establish a whitelist of known good certificates to reduce false positives. The level of concern for these events is high, indicating that close attention should be paid to any detection of these commands in your environment."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting tampering of RDP Terminal Service/Server sensitive settings.\nSuch as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections'...etc\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect tampering of RDP Terminal Service/Server sensitive settings such as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections', you should: Monitor Windows registry settings related to Terminal Services for unauthorized modifications. Specifically, look for changes to registry values under `SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\` and `\\Control\\Terminal Server\\` that pertain to remote session shadowing configurations and permissions. This includes alterations to settings that determine whether full control or view session permissions are given either with or without the user's permission, represented by DWORD values ranging from 0x00000001 to 0x00000004. Additionally, pay attention to modifications that allow unsolicited remote assistance offers (`fAllowUnsolicited` and `fAllowUnsolicitedFullControl`) signified by setting these values to 'DWORD (0x00000001)'. It's also crucial to monitor for any changes aiming to tamper with the RDP service directly, such as modifications to the `ServiceDll` under the TermService parameters, or the setting of initial programs to run automatically upon logging in to a remote computer through RDP paths. Be alert to these changes as they indicate attempts to hijack or misuse Terminal Services for unauthorized access or control. Adjustments to these specific registry keys and values may not always be malicious, as administrators may alter them for legitimate policy settings, nevertheless, these modifications require thorough investigation due to their high-risk nature.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_shadow:\n        EventType: SetValue\n        TargetObject|contains:\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\'\n            - '\\Control\\Terminal Server\\'\n        TargetObject|endswith: '\\Shadow'\n        Details:\n            - 'DWORD (0x00000001)' # Full Control with user\u2019s permission\n            - 'DWORD (0x00000002)' # Full Control without user\u2019s permission\n            - 'DWORD (0x00000003)' # View Session with user\u2019s permission\n            - 'DWORD (0x00000004)' # View Session without user\u2019s permission\n    selection_terminal_services_key:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Control\\Terminal Server\\'\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\'\n    selection_terminal_services_values:\n        TargetObject|endswith:\n            - '\\fAllowUnsolicited' # Allow unsolicited remote assistance offers\n            - '\\fAllowUnsolicitedFullControl'\n        Details: 'DWORD (0x00000001)'\n    selection_tamper_only:\n        # Any changes to these keys should be suspicious and looked at\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\services\\TermService\\Parameters\\ServiceDll' # RDP hijacking\n            - '\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n            - '\\Control\\Terminal Server\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n    condition: selection_shadow or (selection_terminal_services_key and selection_terminal_services_values) or selection_tamper_only\nfalsepositives:\n    - Some of the keys mentioned here could be modified by an administrator while setting group policy (it should be investigated either way)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection_shadow:\n        EventType: SetValue\n        TargetObject|contains:\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\'\n            - '\\Control\\Terminal Server\\'\n        TargetObject|endswith: '\\Shadow'\n        Details:\n            - 'DWORD (0x00000001)' # Full Control with user\u2019s permission\n            - 'DWORD (0x00000002)' # Full Control without user\u2019s permission\n            - 'DWORD (0x00000003)' # View Session with user\u2019s permission\n            - 'DWORD (0x00000004)' # View Session without user\u2019s permission\n    selection_terminal_services_key:\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\Control\\Terminal Server\\'\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\'\n    selection_terminal_services_values:\n        TargetObject|endswith:\n            - '\\fAllowUnsolicited' # Allow unsolicited remote assistance offers\n            - '\\fAllowUnsolicitedFullControl'\n        Details: 'DWORD (0x00000001)'\n    selection_tamper_only:\n        # Any changes to these keys should be suspicious and looked at\n        EventType: SetValue\n        TargetObject|contains:\n            - '\\services\\TermService\\Parameters\\ServiceDll' # RDP hijacking\n            - '\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n            - '\\Control\\Terminal Server\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n            - 'SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\InitialProgram' # This value can be set to pecify a program to run automatically when a user logs on to a remote computer.\n    condition: selection_shadow or (selection_terminal_services_key and selection_terminal_services_values) or selection_tamper_only\nfalsepositives:\n    - Some of the keys mentioned here could be modified by an administrator while setting group policy (it should be investigated either way)\nlevel: high\n",
      "question": "tampering of RDP Terminal Service/Server sensitive settings.\nSuch as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections'...etc\n",
      "answer": "In order to detect tampering of RDP Terminal Service/Server sensitive settings such as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections', you should: Monitor Windows registry settings related to Terminal Services for unauthorized modifications. Specifically, look for changes to registry values under `SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\` and `\\Control\\Terminal Server\\` that pertain to remote session shadowing configurations and permissions. This includes alterations to settings that determine whether full control or view session permissions are given either with or without the user's permission, represented by DWORD values ranging from 0x00000001 to 0x00000004. Additionally, pay attention to modifications that allow unsolicited remote assistance offers (`fAllowUnsolicited` and `fAllowUnsolicitedFullControl`) signified by setting these values to 'DWORD (0x00000001)'. It's also crucial to monitor for any changes aiming to tamper with the RDP service directly, such as modifications to the `ServiceDll` under the TermService parameters, or the setting of initial programs to run automatically upon logging in to a remote computer through RDP paths. Be alert to these changes as they indicate attempts to hijack or misuse Terminal Services for unauthorized access or control. Adjustments to these specific registry keys and values may not always be malicious, as administrators may alter them for legitimate policy settings, nevertheless, these modifications require thorough investigation due to their high-risk nature."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the use of sdclt being spawned as an elevated process, which could indicate sdclt being used for bypass UAC techniques, you should: monitor the creation of processes on Windows systems, focusing specifically on any instance where the process image ends with 'sdclt.exe' and operates at a high integrity level. This approach helps identify potentially malicious activity associated with bypassing User Account Control (UAC) mechanisms, underlining the necessity of vigilant monitoring for such indicators to safeguard against unauthorized access or privilege escalation attempts.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'sdclt.exe'\n        IntegrityLevel: 'High'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: 'sdclt.exe'\n        IntegrityLevel: 'High'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques.",
      "answer": "In order to detect the use of sdclt being spawned as an elevated process, which could indicate sdclt being used for bypass UAC techniques, you should: monitor the creation of processes on Windows systems, focusing specifically on any instance where the process image ends with 'sdclt.exe' and operates at a high integrity level. This approach helps identify potentially malicious activity associated with bypassing User Account Control (UAC) mechanisms, underlining the necessity of vigilant monitoring for such indicators to safeguard against unauthorized access or privilege escalation attempts."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting changes to the AMSI come server registry key in order disable AMSI scanning functionalities. When AMSI attempts to starts its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect changes to the AMSI COM server registry key in order to disable AMSI scanning functionalities. When AMSI attempts to start its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless, you should: Monitor Windows registry set operations, focusing on events where the registry value is being set (EventType: SetValue) to track changes. Concentrate on registry modifications targeting the specific path ending with '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)', which is crucial for AMSI's COM server initialization. Exclude any instances where these modifications are setting the registry's target object to the legitimate AMSI DLL path ('%windir%\\system32\\amsi.dll'), as these changes do not represent the attack scenario of interest. This detection strategy requires vigilance in monitoring for registry alterations that deviate from the genuine AMSI DLL path, ensuring the early identification of attempts to disable AMSI scanning functionalities. Recognizing such unauthorized modifications is vital, as they can lead to a scenario where Windows fails to load the correct AMSI COM component during scanning operations, severely compromising system security.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)'\n    filter:\n        Details: '%windir%\\system32\\amsi.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_set\n    product: windows\ndetection:\n    selection:\n        EventType: SetValue\n        TargetObject|endswith: '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)'\n    filter:\n        Details: '%windir%\\system32\\amsi.dll'\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "changes to the AMSI come server registry key in order disable AMSI scanning functionalities. When AMSI attempts to starts its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless",
      "answer": "In order to detect changes to the AMSI COM server registry key in order to disable AMSI scanning functionalities. When AMSI attempts to start its COM component, it will query its registered CLSID and return a non-existent COM server. This causes a load failure and prevents any scanning methods from being accessed, ultimately rendering AMSI useless, you should: Monitor Windows registry set operations, focusing on events where the registry value is being set (EventType: SetValue) to track changes. Concentrate on registry modifications targeting the specific path ending with '\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32\\(Default)', which is crucial for AMSI's COM server initialization. Exclude any instances where these modifications are setting the registry's target object to the legitimate AMSI DLL path ('%windir%\\system32\\amsi.dll'), as these changes do not represent the attack scenario of interest. This detection strategy requires vigilance in monitoring for registry alterations that deviate from the genuine AMSI DLL path, ensuring the early identification of attempts to disable AMSI scanning functionalities. Recognizing such unauthorized modifications is vital, as they can lead to a scenario where Windows fails to load the correct AMSI COM component during scanning operations, severely compromising system security."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting PowerShell command line patterns in combincation with encoded commands that often appear in malware infection chains.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect PowerShell command line patterns in combination with encoded commands that often appear in malware infection chains, you should: Monitor Windows process creation logs for the execution of PowerShell (powershell.exe or pwsh.exe) or processes with the original file names PowerShell.Exe or pwsh.dll. Be vigilant for command lines containing specific flags that indicate encoding (' -e ', ' -en ', ' -enc ', ' -enco') or actual encoded strings that often start with ' JAB', ' SUVYI', ' SQBFAFgA', ' aWV4I', ' IAB', ' PAA', or ' aQBlAHgA'. It's crucial to exclude any activity initiated by the parent process gc_worker.exe located in `C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\`, as this could be a legitimate use case involving encoded scripts. This approach targets the identification of suspicious PowerShell activity, which is a common vector used in malware infections, by leveraging specific encoded command patterns and execution flags without generating false positives from legitimate scripting activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.Exe'\n            - 'pwsh.dll'\n    selection_flags:\n        CommandLine|contains:\n            - ' -e '\n            - ' -en '\n            - ' -enc '\n            - ' -enco'\n    selection_encoded:\n        CommandLine|contains:\n            - ' JAB'\n            - ' SUVYI'\n            - ' SQBFAFgA'\n            - ' aWV4I'\n            - ' IAB'\n            - ' PAA'\n            - ' aQBlAHgA'\n    filter_gcworker:\n        ParentImage|contains:\n            - 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n            - '\\gc_worker.exe'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Other tools that work with encoded scripts in the command line instead of script files\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        - OriginalFileName:\n            - 'PowerShell.Exe'\n            - 'pwsh.dll'\n    selection_flags:\n        CommandLine|contains:\n            - ' -e '\n            - ' -en '\n            - ' -enc '\n            - ' -enco'\n    selection_encoded:\n        CommandLine|contains:\n            - ' JAB'\n            - ' SUVYI'\n            - ' SQBFAFgA'\n            - ' aWV4I'\n            - ' IAB'\n            - ' PAA'\n            - ' aQBlAHgA'\n    filter_gcworker:\n        ParentImage|contains:\n            - 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n            - '\\gc_worker.exe'\n    condition: all of selection_* and not 1 of filter_*\nfalsepositives:\n    - Other tools that work with encoded scripts in the command line instead of script files\nlevel: high\n",
      "question": "PowerShell command line patterns in combincation with encoded commands that often appear in malware infection chains",
      "answer": "In order to detect PowerShell command line patterns in combination with encoded commands that often appear in malware infection chains, you should: Monitor Windows process creation logs for the execution of PowerShell (powershell.exe or pwsh.exe) or processes with the original file names PowerShell.Exe or pwsh.dll. Be vigilant for command lines containing specific flags that indicate encoding (' -e ', ' -en ', ' -enc ', ' -enco') or actual encoded strings that often start with ' JAB', ' SUVYI', ' SQBFAFgA', ' aWV4I', ' IAB', ' PAA', or ' aQBlAHgA'. It's crucial to exclude any activity initiated by the parent process gc_worker.exe located in `C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\`, as this could be a legitimate use case involving encoded scripts. This approach targets the identification of suspicious PowerShell activity, which is a common vector used in malware infections, by leveraging specific encoded command patterns and execution flags without generating false positives from legitimate scripting activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Transferring files with well-known filenames (sensitive files with credential data) using network shares.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect activities involving transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor SMB (Server Message Block) file share activities on systems using Zeek, focusing on file names that are commonly associated with sensitive information. These filenames include system and security files that attackers might target to obtain credential data, such as 'mimidrv', 'lsass', 'windows\\minidump\\', 'hiberfil', 'sqldmpr', 'sam', 'ntds.dit', and 'security'. A detection mechanism should be in place to flag activities involving these files when they are being accessed or transferred over the network.\n\nIt is essential to consider that there are legitimate reasons why an administrator might transfer such files during routine administration tasks. Therefore, while monitoring for these file name patterns, it is necessary to differentiate between malicious activities and legitimate administrative operations to reduce false positives. The detection level for this activity is medium, indicating that while it is not uncommon, careful analysis is recommended to accurately distinguish between normal and suspicious activities. Identifying such transfers can be pivotal in early detection of credential theft or other preliminary steps by attackers leveraging SMB file shares.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: zeek\n    service: smb_files\ndetection:\n    selection:\n        name:\n            - '\\mimidrv'\n            - '\\lsass'\n            - '\\windows\\minidump\\'\n            - '\\hiberfil'\n            - '\\sqldmpr'\n            - '\\sam'\n            - '\\ntds.dit'\n            - '\\security'\n    condition: selection\nfalsepositives:\n    - Transferring sensitive files for legitimate administration work by legitimate administrator\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: zeek\n    service: smb_files\ndetection:\n    selection:\n        name:\n            - '\\mimidrv'\n            - '\\lsass'\n            - '\\windows\\minidump\\'\n            - '\\hiberfil'\n            - '\\sqldmpr'\n            - '\\sam'\n            - '\\ntds.dit'\n            - '\\security'\n    condition: selection\nfalsepositives:\n    - Transferring sensitive files for legitimate administration work by legitimate administrator\nlevel: medium\n",
      "question": "Transferring files with well-known filenames (sensitive files with credential data) using network shares",
      "answer": "In order to detect activities involving transferring files with well-known filenames (sensitive files with credential data) using network shares, you should monitor SMB (Server Message Block) file share activities on systems using Zeek, focusing on file names that are commonly associated with sensitive information. These filenames include system and security files that attackers might target to obtain credential data, such as 'mimidrv', 'lsass', 'windows\\minidump\\', 'hiberfil', 'sqldmpr', 'sam', 'ntds.dit', and 'security'. A detection mechanism should be in place to flag activities involving these files when they are being accessed or transferred over the network.\n\nIt is essential to consider that there are legitimate reasons why an administrator might transfer such files during routine administration tasks. Therefore, while monitoring for these file name patterns, it is necessary to differentiate between malicious activities and legitimate administrative operations to reduce false positives. The detection level for this activity is medium, indicating that while it is not uncommon, careful analysis is recommended to accurately distinguish between normal and suspicious activities. Identifying such transfers can be pivotal in early detection of credential theft or other preliminary steps by attackers leveraging SMB file shares."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields, you should: Monitor the creation of processes in Windows systems for signs of suspicious activity. Specifically, look out for processes where the image name ends with '\\wmic.exe' or where the original file name is identified as 'wmic.exe'. In addition, pay close attention to the import hash (Imphash) values of these processes. The Imphash values of particular interest are 1B1A3F43BF37B5BFE60751F2EE2F326E, 37777A96245A3C74EB217308F3546F4C, and 9D87C9D67CE724033C0B40CC4CA1B206. Also, examine the 'Hashes' field for these specific Imphash values as an indicator of potentially malicious activity. Another critical sign is the presence of specific command line parameters, particularly those that include 'format:' followed by 'http', which may indicate an attack attempt. The detection requires observing both the suspicious process execution patterns and command line parameters together as indicators of an attack. This approach is essential for identifying and mitigating threats associated with the SquiblyTwo attack technique, which are tagged under techniques such as execution, persistence, privilege escalation, and defense evasion.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n        - Imphash:\n            - 1B1A3F43BF37B5BFE60751F2EE2F326E\n            - 37777A96245A3C74EB217308F3546F4C\n            - 9D87C9D67CE724033C0B40CC4CA1B206\n        - Hashes|contains:  # Sysmon field hashes contains all types\n            - IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E\n            - IMPHASH=37777A96245A3C74EB217308F3546F4C\n            - IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206\n    selection_cli:\n        CommandLine|contains|all:\n            - 'format:'\n            - 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_pe:\n        - Image|endswith: '\\wmic.exe'\n        - OriginalFileName: 'wmic.exe'\n        - Imphash:\n            - 1B1A3F43BF37B5BFE60751F2EE2F326E\n            - 37777A96245A3C74EB217308F3546F4C\n            - 9D87C9D67CE724033C0B40CC4CA1B206\n        - Hashes|contains:  # Sysmon field hashes contains all types\n            - IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E\n            - IMPHASH=37777A96245A3C74EB217308F3546F4C\n            - IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206\n    selection_cli:\n        CommandLine|contains|all:\n            - 'format:'\n            - 'http'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields",
      "answer": "In order to detect potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields, you should: Monitor the creation of processes in Windows systems for signs of suspicious activity. Specifically, look out for processes where the image name ends with '\\wmic.exe' or where the original file name is identified as 'wmic.exe'. In addition, pay close attention to the import hash (Imphash) values of these processes. The Imphash values of particular interest are 1B1A3F43BF37B5BFE60751F2EE2F326E, 37777A96245A3C74EB217308F3546F4C, and 9D87C9D67CE724033C0B40CC4CA1B206. Also, examine the 'Hashes' field for these specific Imphash values as an indicator of potentially malicious activity. Another critical sign is the presence of specific command line parameters, particularly those that include 'format:' followed by 'http', which may indicate an attack attempt. The detection requires observing both the suspicious process execution patterns and command line parameters together as indicators of an attack. This approach is essential for identifying and mitigating threats associated with the SquiblyTwo attack technique, which are tagged under techniques such as execution, persistence, privilege escalation, and defense evasion."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines, you should: monitor the creation of processes on Windows systems for command lines that contain certain patterns indicative of obfuscated PowerShell code. Specifically, look for command lines that include UTF16 and base64 encoded strings which are typically associated with attempts to bypass detection mechanisms by obscuring the true nature of the PowerShell commands being executed. These patterns include snippets that translate to PowerShell syntax for bitwise XOR operations (\u2018bxor 0x\u2019 and variations thereof) and method invocation (\u2018.Invoke() |\u2019), as well as PowerShell format string operators (\u2018-f\u2019) used in a manner suggesting attempts to construct and execute code dynamically. High priority should be given to these detections due to the nature of the encoded and obfuscated content, which is commonly used in malicious scripts. Note that due to the obfuscated nature of the detected activity, false positives may be unknown, indicating a high level of confidence in the specificity of these indicators for malicious activity.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            #  -bxor 0x\n            - 'IAAtAGIAeABvAHIAIAAwAHgA'\n            - 'AALQBiAHgAbwByACAAMAB4A'\n            - 'gAC0AYgB4AG8AcgAgADAAeA'\n            # .Invoke() |\n            - 'AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg'\n            - 'AuAEkAbgB2AG8AawBlACgAKQAgAHwAI'\n            - 'ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC'\n            # {1}{0}\" -f\n            # {0}{3}\" -f\n            # {2}{0}\" -f\n            - 'AHsAMQB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AIgAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACIAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAiACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AIgAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AIgAgAC0AZgAg'\n            # {1}{0}' -f\n            # {0}{3}' -f\n            # {2}{0}' -f\n            - 'AHsAMQB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AJwAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACcAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAnACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AJwAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AJwAgAC0AZgAg'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            #  -bxor 0x\n            - 'IAAtAGIAeABvAHIAIAAwAHgA'\n            - 'AALQBiAHgAbwByACAAMAB4A'\n            - 'gAC0AYgB4AG8AcgAgADAAeA'\n            # .Invoke() |\n            - 'AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg'\n            - 'AuAEkAbgB2AG8AawBlACgAKQAgAHwAI'\n            - 'ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC'\n            # {1}{0}\" -f\n            # {0}{3}\" -f\n            # {2}{0}\" -f\n            - 'AHsAMQB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AIgAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACIAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAiACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AIgAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACIAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAiACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AIgAgAC0AZgAg'\n            # {1}{0}' -f\n            # {0}{3}' -f\n            # {2}{0}' -f\n            - 'AHsAMQB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADEAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAxAH0AewAwAH0AJwAgAC0AZgAg'\n            - 'AHsAMAB9AHsAMwB9ACcAIAAtAGYAI'\n            - 'B7ADAAfQB7ADMAfQAnACAALQBmAC'\n            - 'AewAwAH0AewAzAH0AJwAgAC0AZgAg'\n            - 'AHsAMgB9AHsAMAB9ACcAIAAtAGYAI'\n            - 'B7ADIAfQB7ADAAfQAnACAALQBmAC'\n            - 'AewAyAH0AewAwAH0AJwAgAC0AZgAg'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines",
      "answer": "In order to detect suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines, you should: monitor the creation of processes on Windows systems for command lines that contain certain patterns indicative of obfuscated PowerShell code. Specifically, look for command lines that include UTF16 and base64 encoded strings which are typically associated with attempts to bypass detection mechanisms by obscuring the true nature of the PowerShell commands being executed. These patterns include snippets that translate to PowerShell syntax for bitwise XOR operations (\u2018bxor 0x\u2019 and variations thereof) and method invocation (\u2018.Invoke() |\u2019), as well as PowerShell format string operators (\u2018-f\u2019) used in a manner suggesting attempts to construct and execute code dynamically. High priority should be given to these detections due to the nature of the encoded and obfuscated content, which is commonly used in malicious scripts. Note that due to the obfuscated nature of the detected activity, false positives may be unknown, indicating a high level of confidence in the specificity of these indicators for malicious activity."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an user account is locked or suspended..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when a user account is locked or suspended, you should: Monitor Onelogin event logs for specific event types that indicate such activities have occurred. Focus on Onelogin's events log source, where you'll primarily be looking for three types of events. First, look for events with an event type ID of 532, which signals that an account has been locked via API. Secondly, watch out for events marked with an event type ID of 553, indicating an account was also locked through API interactions. Thirdly, be aware of events with an event type ID of 551, which points towards an account suspension carried out via API.\n\nThese activities might sometimes generate false positives, as the system may legitimately lock or suspend user accounts for various non-malicious reasons. Therefore, the level of threat associated with these detections is considered low. Focus your efforts on examining these specific event IDs in the Onelogin's events logs to effectively identify cases where a user account might be at risk, aligning with associated detection practices linked to account manipulation and abuse of authentication processes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: onelogin\n    service: onelogin.events\ndetection:\n    selection1: # Locked via API\n        event_type_id: 532\n    selection2: # Locked via API\n        event_type_id: 553\n    selection3: # Suspended via API\n        event_type_id: 551\n    condition: 1 of selection*\nfalsepositives:\n    - System may lock or suspend user accounts.\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: onelogin\n    service: onelogin.events\ndetection:\n    selection1: # Locked via API\n        event_type_id: 532\n    selection2: # Locked via API\n        event_type_id: 553\n    selection3: # Suspended via API\n        event_type_id: 551\n    condition: 1 of selection*\nfalsepositives:\n    - System may lock or suspend user accounts.\nlevel: low\n",
      "question": "when an user account is locked or suspended.",
      "answer": "In order to detect when a user account is locked or suspended, you should: Monitor Onelogin event logs for specific event types that indicate such activities have occurred. Focus on Onelogin's events log source, where you'll primarily be looking for three types of events. First, look for events with an event type ID of 532, which signals that an account has been locked via API. Secondly, watch out for events marked with an event type ID of 553, indicating an account was also locked through API interactions. Thirdly, be aware of events with an event type ID of 551, which points towards an account suspension carried out via API.\n\nThese activities might sometimes generate false positives, as the system may legitimately lock or suspend user accounts for various non-malicious reasons. Therefore, the level of threat associated with these detections is considered low. Focus your efforts on examining these specific event IDs in the Onelogin's events logs to effectively identify cases where a user account might be at risk, aligning with associated detection practices linked to account manipulation and abuse of authentication processes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting DNS-answer with TTL <10..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect DNS-answer with TTL <10, you should: monitor DNS logs for responses that have a TTL (Time to Live) less than 10 seconds, which can indicate suspicious or malicious activity. Specifically, focus on responses where any answer is provided (indicating a successful query response) and the TTL value for the response is greater than 0 but less than 10 seconds. Additionally, it is important to observe the rate at which these responses occur; if more than 3 such responses are identified coming from the same source IP address within a 30-second window, it warrants attention. The detection of such activity is considered to be of medium severity and aligns with tactics and techniques that involve the exploitation of DNS for command and control or other malicious purposes.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: dns\ndetection:\n    selection:\n        answer: '*'\n    filter1:\n        ttl: '>0'\n    filter2:\n        ttl: '<10'\n    timeframe: 30s\n    condition: selection and filter1 and filter2 | count(answer) by src_ip > 3\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: dns\ndetection:\n    selection:\n        answer: '*'\n    filter1:\n        ttl: '>0'\n    filter2:\n        ttl: '<10'\n    timeframe: 30s\n    condition: selection and filter1 and filter2 | count(answer) by src_ip > 3\nlevel: medium\n",
      "question": "DNS-answer with TTL <10.",
      "answer": "In order to detect DNS-answer with TTL <10, you should: monitor DNS logs for responses that have a TTL (Time to Live) less than 10 seconds, which can indicate suspicious or malicious activity. Specifically, focus on responses where any answer is provided (indicating a successful query response) and the TTL value for the response is greater than 0 but less than 10 seconds. Additionally, it is important to observe the rate at which these responses occur; if more than 3 such responses are identified coming from the same source IP address within a 30-second window, it warrants attention. The detection of such activity is considered to be of medium severity and aligns with tactics and techniques that involve the exploitation of DNS for command and control or other malicious purposes."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of a renamed PsExec often used by attackers or malware.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of a renamed PsExec often used by attackers or malware, you should monitor for process creation events on Windows systems. Look for descriptions indicating the remote execution of processes, particularly those associated with the Sysinternals PsExec product. However, it's crucial to exclude events where the image path ends with '\\PsExec.exe' or '\\PsExec64.exe' as these indicate legitimate PsExec usage. The focus should be on instances where PsExec may have been renamed, as this can be a sign of malicious activity. Be aware that there might be false positives, such as software that integrates PsExec in a renamed form without malicious intent, or administrators who have renamed PsExec for reasons unknown. This detection is rated at a high level of importance due to the potential for abuse by attackers leveraging renamed instances of PsExec to conduct their operations covertly.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Description: 'Execute processes remotely'\n        Product: 'Sysinternals PsExec'\n    filter:\n        Image|endswith:\n            - '\\PsExec.exe'\n            - '\\PsExec64.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software that illegaly integrates PsExec in a renamed form\n    - Administrators that have renamed PsExec and no one knows why\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        Description: 'Execute processes remotely'\n        Product: 'Sysinternals PsExec'\n    filter:\n        Image|endswith:\n            - '\\PsExec.exe'\n            - '\\PsExec64.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Software that illegaly integrates PsExec in a renamed form\n    - Administrators that have renamed PsExec and no one knows why\nlevel: high\n",
      "question": "execution of a renamed PsExec often used by attackers or malware",
      "answer": "In order to detect the execution of a renamed PsExec often used by attackers or malware, you should monitor for process creation events on Windows systems. Look for descriptions indicating the remote execution of processes, particularly those associated with the Sysinternals PsExec product. However, it's crucial to exclude events where the image path ends with '\\PsExec.exe' or '\\PsExec64.exe' as these indicate legitimate PsExec usage. The focus should be on instances where PsExec may have been renamed, as this can be a sign of malicious activity. Be aware that there might be false positives, such as software that integrates PsExec in a renamed form without malicious intent, or administrators who have renamed PsExec for reasons unknown. This detection is rated at a high level of importance due to the potential for abuse by attackers leveraging renamed instances of PsExec to conduct their operations covertly."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.\nThe data may also be sent to an alternate network location from the main command and control server.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries who may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel and may also send the data to an alternate network location from the main command and control server, you should monitor Windows PowerShell Script Block Logging for specific script activities. Focus on scripts that contain the use of 'Send-MailMessage', which indicates an attempt to send data out, possibly as a form of data exfiltration. However, you will need to exclude any findings where 'CmdletsToExport' appears within the script block text, as this may represent legitimate script usage. Through this methodology, scripts that could potentially be used in data theft by sending information through unsecured email methods can be singled out, bearing in mind to carefully consider legitimate scripts that might similarly use sending email functionalities. The level of threat for this type of detection is considered medium, suggesting that while not foolproof, it's a valuable component of a layered defense approach.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'Send-MailMessage'\n    filter:\n        ScriptBlockText|contains: 'CmdletsToExport'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate script\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains: 'Send-MailMessage'\n    filter:\n        ScriptBlockText|contains: 'CmdletsToExport'\n    condition: selection and not filter\nfalsepositives:\n    - Legitimate script\nlevel: medium\n",
      "question": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.\nThe data may also be sent to an alternate network location from the main command and control server.\n",
      "answer": "In order to detect adversaries who may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel and may also send the data to an alternate network location from the main command and control server, you should monitor Windows PowerShell Script Block Logging for specific script activities. Focus on scripts that contain the use of 'Send-MailMessage', which indicates an attempt to send data out, possibly as a form of data exfiltration. However, you will need to exclude any findings where 'CmdletsToExport' appears within the script block text, as this may represent legitimate script usage. Through this methodology, scripts that could potentially be used in data theft by sending information through unsecured email methods can be singled out, bearing in mind to carefully consider legitimate scripts that might similarly use sending email functionalities. The level of threat for this type of detection is considered medium, suggesting that while not foolproof, it's a valuable component of a layered defense approach."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting TeamViewer_Desktop.exe is create during install.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the creation of \"TeamViewer_Desktop.exe\" during an installation process, you should monitor for file events within the Windows environment. Specifically, look for any event where the target filename ends with '\\TeamViewer_Desktop.exe'. This approach is particularly important as it helps to identify potential misuse or malicious deployments of TeamViewer by tracking its installation footprint. Keep in mind that false positives are currently unknown, suggesting caution and further investigation for any alerts. The alert level for this kind of detection has been set to medium, highlighting its importance in the broader context of monitoring and threat detection activities related to various tactics and techniques, such as Execution, Persistence, or Privilege Escalation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\TeamViewer_Desktop.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: file_event\ndetection:\n    selection:\n        TargetFilename|endswith: '\\TeamViewer_Desktop.exe'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "TeamViewer_Desktop.exe is create during install",
      "answer": "In order to detect the creation of \"TeamViewer_Desktop.exe\" during an installation process, you should monitor for file events within the Windows environment. Specifically, look for any event where the target filename ends with '\\TeamViewer_Desktop.exe'. This approach is particularly important as it helps to identify potential misuse or malicious deployments of TeamViewer by tracking its installation footprint. Keep in mind that false positives are currently unknown, suggesting caution and further investigation for any alerts. The alert level for this kind of detection has been set to medium, highlighting its importance in the broader context of monitoring and threat detection activities related to various tactics and techniques, such as Execution, Persistence, or Privilege Escalation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting processes loading modules related to PCRE.NET package.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect processes loading modules related to PCRE.NET package, you should: Monitor Windows image load events for any instances where modules are loaded from a specific path within the AppData\\Local\\Temp directory, notably when the path includes \"\\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\\". This activity is noteworthy as it could indicate an attempt to use or abuse PCRE.NET package functionalities in a potentially malicious manner. Given the high level of concern, any detection of such activity should be carefully investigated despite the possibility of unknown false positives.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|contains: \\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        ImageLoaded|contains: \\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "processes loading modules related to PCRE.NET package",
      "answer": "In order to detect processes loading modules related to PCRE.NET package, you should: Monitor Windows image load events for any instances where modules are loaded from a specific path within the AppData\\Local\\Temp directory, notably when the path includes \"\\AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\\\". This activity is noteworthy as it could indicate an attempt to use or abuse PCRE.NET package functionalities in a potentially malicious manner. Given the high level of concern, any detection of such activity should be carefully investigated despite the possibility of unknown false positives."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Detect indirect command execution via Program Compatibility Assistant pcwrun.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect indirect command execution via Program Compatibility Assistant pcwrun.exe, you should monitor for process creation events on Windows systems where the parent process ends with '\\pcwrun.exe'. When this condition is met, it is advisable to collect additional information such as the name of the computer where the event occurred, the user account involved, the exact command line used by the parent process, and the command line of the process itself. Be aware that focusing solely on these events may lead to false positives due to legitimate uses of scripts or the necessity of applying additional analysis methods like 'unique_count' or 'filter' to identify unusual activities effectively. The severity of these findings is considered low, but they can nevertheless contribute to understanding the scope and methodology of an attack exploiting this method.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\pcwrun.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - ParentCommandLine\n    - CommandLine\nfalsepositives:\n    - Need to use extra processing with 'unique_count' / 'filter' to focus on outliers as opposed to commonly seen artifacts\n    - Legit usage of scripts\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith: '\\pcwrun.exe'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - ParentCommandLine\n    - CommandLine\nfalsepositives:\n    - Need to use extra processing with 'unique_count' / 'filter' to focus on outliers as opposed to commonly seen artifacts\n    - Legit usage of scripts\nlevel: low\n",
      "question": "Detect indirect command execution via Program Compatibility Assistant pcwrun.exe",
      "answer": "In order to detect indirect command execution via Program Compatibility Assistant pcwrun.exe, you should monitor for process creation events on Windows systems where the parent process ends with '\\pcwrun.exe'. When this condition is met, it is advisable to collect additional information such as the name of the computer where the event occurred, the user account involved, the exact command line used by the parent process, and the command line of the process itself. Be aware that focusing solely on these events may lead to false positives due to legitimate uses of scripts or the necessity of applying additional analysis methods like 'unique_count' or 'filter' to identify unusual activities effectively. The severity of these findings is considered low, but they can nevertheless contribute to understanding the scope and methodology of an attack exploiting this method."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect uncommon or suspicious child processes spawning from a WSL process, which could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL, you should monitor process creation events specifically within Windows environments. Focus on instances where the parent process is either `wsl.exe` or `wslhost.exe`. These particular parent processes, associated with the Windows Subsystem for Linux (WSL), should not typically spawn certain types of child processes under normal operations. Therefore, pay close attention to the creation of child processes like `powershell.exe`, `pwsh.exe` (PowerShell Core), `cmd.exe` (Command Prompt), and even `calc.exe` (Calculator), which could be leveraged for malicious activities. Additionally, it's crucial to observe the paths from which these child processes are launched. Uncommon or suspicious paths to watch include the `AppData\\Local\\Temp\\`, public user directories (`C:\\Users\\Public\\`), and various temporary folders commonly used by Windows (`C:\\Windows\\Temp\\`, `C:\\Temp\\`) as well as directories like `Downloads` and `Desktop`. Such child processes spawning from WSL processes and launching from these locations suggest a potential security risk, reflecting activities that are not part of the typical usage patterns and might signal evasion or persistence mechanisms employed by adversaries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\wsl.exe'\n            - '\\wslhost.exe'\n    selection_children_images:\n        Image|endswith:\n            # Add more suspicious/uncommon \"lolbin\" processes\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n            - '\\calc.exe'\n    selection_children_paths:\n        Image|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\Temp\\'\n            - '\\Downloads\\'\n            - '\\Desktop\\'\n    condition: selection_parent and 1 of selection_children_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent:\n        ParentImage|endswith:\n            - '\\wsl.exe'\n            - '\\wslhost.exe'\n    selection_children_images:\n        Image|endswith:\n            # Add more suspicious/uncommon \"lolbin\" processes\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\cmd.exe'\n            - '\\calc.exe'\n    selection_children_paths:\n        Image|contains:\n            - '\\AppData\\Local\\Temp\\'\n            - 'C:\\Users\\Public\\'\n            - 'C:\\Windows\\Temp\\'\n            - 'C:\\Temp\\'\n            - '\\Downloads\\'\n            - '\\Desktop\\'\n    condition: selection_parent and 1 of selection_children_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL",
      "answer": "In order to detect uncommon or suspicious child processes spawning from a WSL process, which could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL, you should monitor process creation events specifically within Windows environments. Focus on instances where the parent process is either `wsl.exe` or `wslhost.exe`. These particular parent processes, associated with the Windows Subsystem for Linux (WSL), should not typically spawn certain types of child processes under normal operations. Therefore, pay close attention to the creation of child processes like `powershell.exe`, `pwsh.exe` (PowerShell Core), `cmd.exe` (Command Prompt), and even `calc.exe` (Calculator), which could be leveraged for malicious activities. Additionally, it's crucial to observe the paths from which these child processes are launched. Uncommon or suspicious paths to watch include the `AppData\\Local\\Temp\\`, public user directories (`C:\\Users\\Public\\`), and various temporary folders commonly used by Windows (`C:\\Windows\\Temp\\`, `C:\\Temp\\`) as well as directories like `Downloads` and `Desktop`. Such child processes spawning from WSL processes and launching from these locations suggest a potential security risk, reflecting activities that are not part of the typical usage patterns and might signal evasion or persistence mechanisms employed by adversaries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect usage of \"appcmd\" to create new global URL rewrite rules, which has been observed being used by threat actors to add new rules so they can access their webshells, you should: Monitor Windows process creation logs for instances of the application \"appcmd.exe\" being executed, especially focusing on commands that include 'set', 'config', 'section:system.webServer/rewrite/globalRules', and 'commit:' in the command line. This behavior is indicative of attempts to modify web server configurations, potentially to insert malicious URL rewrite rules that could facilitate unsanctioned access to webshells. It is important to note, though, that there might be legitimate cases where administrators use \"appcmd.exe\" to add new URL rewrite rules for valid reasons, which are considered as possible false positives that need to be carefully evaluated. The severity of this activity is assessed as medium, suggesting a balanced approach to monitoring and investigation.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:system.webServer/rewrite/globalRules'\n            - 'commit:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of appcmd to add new URL rewrite rules\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\appcmd.exe'\n        - OriginalFileName: 'appcmd.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'set'\n            - 'config'\n            - 'section:system.webServer/rewrite/globalRules'\n            - 'commit:'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate usage of appcmd to add new URL rewrite rules\nlevel: medium\n",
      "question": "usage of \"appcmd\" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.",
      "answer": "In order to detect usage of \"appcmd\" to create new global URL rewrite rules, which has been observed being used by threat actors to add new rules so they can access their webshells, you should: Monitor Windows process creation logs for instances of the application \"appcmd.exe\" being executed, especially focusing on commands that include 'set', 'config', 'section:system.webServer/rewrite/globalRules', and 'commit:' in the command line. This behavior is indicative of attempts to modify web server configurations, potentially to insert malicious URL rewrite rules that could facilitate unsanctioned access to webshells. It is important to note, though, that there might be legitimate cases where administrators use \"appcmd.exe\" to add new URL rewrite rules for valid reasons, which are considered as possible false positives that need to be carefully evaluated. The severity of this activity is assessed as medium, suggesting a balanced approach to monitoring and investigation."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting WMI command line event consumers.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect WMI command line event consumers, you should: Monitor for specific images being loaded in the Windows operating system, particularly focusing on the image loading events related to \"C:\\Windows\\System32\\wbem\\WmiPrvSE.exe\". Additionally, pay close attention to instances where 'wbemcons.dll' is loaded by any process, indicated by the ending of the loaded image path. This behavior can point towards the execution or utilization of Windows Management Instrumentation (WMI) for potentially malicious purposes, often associated with surveillance or automation of tasks that could be leveraged by an attacker. Be aware, however, that due to the novelty and complexity of this detection method, there might be unknown false positives, indicating a necessity for further data analysis and testing. The associated threat level with this type of detection is classified as high, reflecting the malicious potential of abusing WMI components.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe'\n        ImageLoaded|endswith: '\\wbemcons.dll'\n    condition: selection\nfalsepositives:\n    - Unknown (data set is too small; further testing needed)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: image_load\n    product: windows\ndetection:\n    selection:\n        Image: 'C:\\Windows\\System32\\wbem\\WmiPrvSE.exe'\n        ImageLoaded|endswith: '\\wbemcons.dll'\n    condition: selection\nfalsepositives:\n    - Unknown (data set is too small; further testing needed)\nlevel: high\n",
      "question": "WMI command line event consumers",
      "answer": "In order to detect WMI command line event consumers, you should: Monitor for specific images being loaded in the Windows operating system, particularly focusing on the image loading events related to \"C:\\Windows\\System32\\wbem\\WmiPrvSE.exe\". Additionally, pay close attention to instances where 'wbemcons.dll' is loaded by any process, indicated by the ending of the loaded image path. This behavior can point towards the execution or utilization of Windows Management Instrumentation (WMI) for potentially malicious purposes, often associated with surveillance or automation of tasks that could be leveraged by an attacker. Be aware, however, that due to the novelty and complexity of this detection method, there might be unknown false positives, indicating a necessity for further data analysis and testing. The associated threat level with this type of detection is classified as high, reflecting the malicious potential of abusing WMI components."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, which can reveal personal information about users or details about internal network resources, you should monitor Windows PowerShell script activities, specifically looking for the use of the `Get-ChildItem` cmdlet with a combination of parameters. These parameters include `-Recurse`, which allows the script to search through directories recursively; `-Path`, which specifies the directory path to search; `-Filter Bookmarks`, indicating the search specifically targets bookmark files; `-ErrorAction SilentlyContinue`, which suppresses error messages; and `-Force`, enabling the script to perform actions that it would otherwise not be allowed to, such as accessing hidden or system files. This monitoring requires that Script Block Logging be enabled on the Windows system, to ensure that detailed records of PowerShell script executions are kept. The detection of this particular pattern of script execution is associated with a low level of alert due to the potential for false positives, as there may be legitimate reasons for scripts to access bookmarks in this manner.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-ChildItem'\n            - ' -Recurse '\n            - ' -Path '\n            - ' -Filter Bookmarks'\n            - ' -ErrorAction SilentlyContinue'\n            - ' -Force'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: ps_script\n    definition: 'Requirements: Script Block Logging must be enabled'\ndetection:\n    selection:\n        ScriptBlockText|contains|all:\n            - 'Get-ChildItem'\n            - ' -Recurse '\n            - ' -Path '\n            - ' -Filter Bookmarks'\n            - ' -ErrorAction SilentlyContinue'\n            - ' -Force'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: low\n",
      "question": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts.\nBrowser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about\ninternal network resources such as servers, tools/dashboards, or other related infrastructure.\n",
      "answer": "In order to detect adversaries attempting to enumerate browser bookmarks to learn more about compromised hosts, which can reveal personal information about users or details about internal network resources, you should monitor Windows PowerShell script activities, specifically looking for the use of the `Get-ChildItem` cmdlet with a combination of parameters. These parameters include `-Recurse`, which allows the script to search through directories recursively; `-Path`, which specifies the directory path to search; `-Filter Bookmarks`, indicating the search specifically targets bookmark files; `-ErrorAction SilentlyContinue`, which suppresses error messages; and `-Force`, enabling the script to perform actions that it would otherwise not be allowed to, such as accessing hidden or system files. This monitoring requires that Script Block Logging be enabled on the Windows system, to ensure that detailed records of PowerShell script executions are kept. The detection of this particular pattern of script execution is associated with a low level of alert due to the potential for false positives, as there may be legitimate reasons for scripts to access bookmarks in this manner."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass, you should: This detection focuses on monitoring process access within Windows environments. It specifically identifies instances when the lsass.exe (Local Security Authority Subsystem Service) process is accessed by the rundll32.exe utility. The rule triggers an alert if the lsass.exe process is being targeted and the source of this activity is rundll32.exe, especially when this activity involves the use of the comsvcs.dll, which is known to be used for memory dumping functions. This behavior is indicative of an attack aiming to extract sensitive information from the memory of the lsass process, which manages user logins and password changes, making it a prime target for attackers seeking to steal credentials. The critical nature of this alert underscores the importance of promptly investigating such detections to mitigate potential security breaches.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        SourceImage: 'C:\\Windows\\System32\\rundll32.exe'\n        CallTrace|contains: 'comsvcs.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_access\n    product: windows\ndetection:\n    selection:\n        TargetImage|endswith: '\\lsass.exe'\n        SourceImage: 'C:\\Windows\\System32\\rundll32.exe'\n        CallTrace|contains: 'comsvcs.dll'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: critical\n",
      "question": "adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass.",
      "answer": "In order to detect adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass, you should: This detection focuses on monitoring process access within Windows environments. It specifically identifies instances when the lsass.exe (Local Security Authority Subsystem Service) process is accessed by the rundll32.exe utility. The rule triggers an alert if the lsass.exe process is being targeted and the source of this activity is rundll32.exe, especially when this activity involves the use of the comsvcs.dll, which is known to be used for memory dumping functions. This behavior is indicative of an attack aiming to extract sensitive information from the memory of the lsass process, which manages user logins and password changes, making it a prime target for attackers seeking to steal credentials. The critical nature of this alert underscores the importance of promptly investigating such detections to mitigate potential security breaches."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents, you should monitor process creation logs on Windows systems for the activation of specific utilities or commands indicative of file downloads. Specifically, look for instances where the image name ends with '\\curl.exe' or '\\wget.exe', or where the command line includes phrases such as 'Invoke-WebRequest', 'iwr ', 'curl ', 'wget ', or 'Start-BitsTransfer'. Additionally, monitor for use of '.DownloadFile(' or '.DownloadString(' in command lines, which are methods often used in PowerShell scripting to download files from the internet. Attention should also be focused on commands that contain URLs pointing to 'https://attachment.outlook.live.net/owa/' or 'https://onenoteonlinesync.onenote.com/onenoteonlinesync/', as these are Microsoft domains hosting attachments for Emails and OneNote documents. It's important to be aware that there could be legitimate scripts or tools designed to download attachments from these domains, and these should be considered as potential false positives. This detection approach is highly relevant for identifying activities that may involve unauthorized downloading of sensitive documents or data exfiltration attempts through trusted Microsoft services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_download:\n        - Image|endswith:\n            - '\\curl.exe'\n            - '\\wget.exe'\n        - CommandLine|contains:\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'curl '\n            - 'wget '\n            - 'Start-BitsTransfer'\n            - '.DownloadFile('\n            - '.DownloadString('\n    selection_domains:\n        CommandLine|contains:\n            - 'https://attachment.outlook.live.net/owa/'\n            - 'https://onenoteonlinesync.onenote.com/onenoteonlinesync/'\n    condition: all of selection_*\nfalsepositives:\n    - Scripts or tools that download attachments from these domains (OneNote, Outlook 365)\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_download:\n        - Image|endswith:\n            - '\\curl.exe'\n            - '\\wget.exe'\n        - CommandLine|contains:\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'curl '\n            - 'wget '\n            - 'Start-BitsTransfer'\n            - '.DownloadFile('\n            - '.DownloadString('\n    selection_domains:\n        CommandLine|contains:\n            - 'https://attachment.outlook.live.net/owa/'\n            - 'https://onenoteonlinesync.onenote.com/onenoteonlinesync/'\n    condition: all of selection_*\nfalsepositives:\n    - Scripts or tools that download attachments from these domains (OneNote, Outlook 365)\nlevel: high\n",
      "question": "suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents",
      "answer": "In order to detect suspicious ways to download files from Microsoft domains that are used to store attachments in Emails or OneNote documents, you should monitor process creation logs on Windows systems for the activation of specific utilities or commands indicative of file downloads. Specifically, look for instances where the image name ends with '\\curl.exe' or '\\wget.exe', or where the command line includes phrases such as 'Invoke-WebRequest', 'iwr ', 'curl ', 'wget ', or 'Start-BitsTransfer'. Additionally, monitor for use of '.DownloadFile(' or '.DownloadString(' in command lines, which are methods often used in PowerShell scripting to download files from the internet. Attention should also be focused on commands that contain URLs pointing to 'https://attachment.outlook.live.net/owa/' or 'https://onenoteonlinesync.onenote.com/onenoteonlinesync/', as these are Microsoft domains hosting attachments for Emails and OneNote documents. It's important to be aware that there could be legitimate scripts or tools designed to download attachments from these domains, and these should be considered as potential false positives. This detection approach is highly relevant for identifying activities that may involve unauthorized downloading of sensitive documents or data exfiltration attempts through trusted Microsoft services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting base64 encoded .NET reflective loading of Assembly.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect base64 encoded .NET reflective loading of Assembly, you should: focus on monitoring process creation logs within Windows environments. Look for command line executions that contain specific base64 encoded strings which are indicative of attempts to use reflection for the loading of .NET assemblies. This technique typically involves obscure or obfuscated base64 strings that, when decoded, reference the .NET reflection methods such as `[Reflection.Assembly]::Load(` or variations thereof, often with additional obfuscation to evade simple detection mechanisms. Since this behavior is rarely found in legitimate system activity and given its high potential for misuse in executing malicious code via reflection (a method that allows for the runtime loading of .NET assemblies), it is regarded with a high level of suspicion. Detected occurrences should be closely inspected to determine their nature and origin, though they are unlikely to represent false positives. This monitoring strategy is aligned with identifying malicious activities related to the execution and persistence tactics commonly associated with various forms of malware and targeted attacks, making it an essential practice for defending against advanced threats leveraging .NET assemblies.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # [Reflection.Assembly]::Load(\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n            # [reflection.assembly]::(\"Load\")\n            - 'AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC'\n            - 'BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp'\n            - 'AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK'\n            # [Reflection.Assembly]::(\"Load\")\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA'\n            # [reflection.assembly]::Load(\n            - 'WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # [Reflection.Assembly]::Load(\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n            # [reflection.assembly]::(\"Load\")\n            - 'AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC'\n            - 'BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp'\n            - 'AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK'\n            # [Reflection.Assembly]::(\"Load\")\n            - 'WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ'\n            - 'sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA'\n            - 'bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA'\n            # [reflection.assembly]::Load(\n            - 'WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA'\n            - 'sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA'\n            - 'bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unlikely\nlevel: high\n",
      "question": "base64 encoded .NET reflective loading of Assembly",
      "answer": "In order to detect base64 encoded .NET reflective loading of Assembly, you should: focus on monitoring process creation logs within Windows environments. Look for command line executions that contain specific base64 encoded strings which are indicative of attempts to use reflection for the loading of .NET assemblies. This technique typically involves obscure or obfuscated base64 strings that, when decoded, reference the .NET reflection methods such as `[Reflection.Assembly]::Load(` or variations thereof, often with additional obfuscation to evade simple detection mechanisms. Since this behavior is rarely found in legitimate system activity and given its high potential for misuse in executing malicious code via reflection (a method that allows for the runtime loading of .NET assemblies), it is regarded with a high level of suspicion. Detected occurrences should be closely inspected to determine their nature and origin, though they are unlikely to represent false positives. This monitoring strategy is aligned with identifying malicious activities related to the execution and persistence tactics commonly associated with various forms of malware and targeted attacks, making it an essential practice for defending against advanced threats leveraging .NET assemblies."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting modification of an EC2 snapshot's permissions to enable access from another account.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the modification of an EC2 snapshot's permissions to enable access from another account, you should: Monitor AWS CloudTrail logs for events where the source is EC2 (`ec2.amazonaws.com`) and the event name is `ModifySnapshotAttribute`. This activity might indicate that an EC2 snapshot's permissions are being changed to allow access from an external account, which can be a sign of unauthorized access or data exfiltration. Be aware that there can be legitimate reasons for altering a snapshot's permissions, such as granting access to a snapshot for collaboration purposes or transferring resources between accounts. Therefore, it's important to examine these events in the context of known and expected administrative activities to differentiate between benign and malicious intent. The severity level for this activity is considered medium, emphasizing the need for a balanced approach to monitoring and response.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: ec2.amazonaws.com\n        eventName: ModifySnapshotAttribute\n    condition: selection_source\nfalsepositives:\n    - Valid change to a snapshot's permissions\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: aws\n    service: cloudtrail\ndetection:\n    selection_source:\n        eventSource: ec2.amazonaws.com\n        eventName: ModifySnapshotAttribute\n    condition: selection_source\nfalsepositives:\n    - Valid change to a snapshot's permissions\nlevel: medium\n",
      "question": "modification of an EC2 snapshot's permissions to enable access from another account",
      "answer": "In order to detect the modification of an EC2 snapshot's permissions to enable access from another account, you should: Monitor AWS CloudTrail logs for events where the source is EC2 (`ec2.amazonaws.com`) and the event name is `ModifySnapshotAttribute`. This activity might indicate that an EC2 snapshot's permissions are being changed to allow access from an external account, which can be a sign of unauthorized access or data exfiltration. Be aware that there can be legitimate reasons for altering a snapshot's permissions, such as granting access to a snapshot for collaboration purposes or transferring resources between accounts. Therefore, it's important to examine these events in the context of known and expected administrative activities to differentiate between benign and malicious intent. The severity level for this activity is considered medium, emphasizing the need for a balanced approach to monitoring and response."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting when an admin share is mounted using net.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect when an admin share is mounted using net.exe, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where either 'net.exe' or 'net1.exe' are executed, as these are command-line utilities often leveraged for network tasks, including the mounting of administrator shares. The detection is based on two main criteria: the name of the executable (where it ends with '\\net.exe' or '\\net1.exe') and the command line arguments that include 'use' in conjunction with a pattern that matches a Universal Naming Convention (UNC) path to an admin share (indicated by '\\\\\\\\*\\\\*$'). It's important to note that while this kind of activity can sometimes be legitimate and performed by administrators, it might also indicate a potential security threat, such as an attacker trying to gain unauthorized access to admin shares. Therefore, any detection at a medium level of confidence should be investigated, keeping in mind that legitimate administrative activities could also trigger this alert.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' use '\n            - ' \\\\\\\\*\\\\*$'\n    condition: all of selection_*\nfalsepositives:\n    - Administrators\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        - OriginalFileName:\n            - 'net.exe'\n            - 'net1.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - ' use '\n            - ' \\\\\\\\*\\\\*$'\n    condition: all of selection_*\nfalsepositives:\n    - Administrators\nlevel: medium\n",
      "question": "when an admin share is mounted using net.exe",
      "answer": "In order to detect when an admin share is mounted using net.exe, you should focus on monitoring process creation events within Windows environments. Specifically, pay attention to instances where either 'net.exe' or 'net1.exe' are executed, as these are command-line utilities often leveraged for network tasks, including the mounting of administrator shares. The detection is based on two main criteria: the name of the executable (where it ends with '\\net.exe' or '\\net1.exe') and the command line arguments that include 'use' in conjunction with a pattern that matches a Universal Naming Convention (UNC) path to an admin share (indicated by '\\\\\\\\*\\\\*$'). It's important to note that while this kind of activity can sometimes be legitimate and performed by administrators, it might also indicate a potential security threat, such as an attacker trying to gain unauthorized access to admin shares. Therefore, any detection at a medium level of confidence should be investigated, keeping in mind that legitimate administrative activities could also trigger this alert."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Ryuk Ransomware command lines.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Ryuk Ransomware command lines, you should: Focus on monitoring process creation events within Windows environments. Look specifically for processes that end with '\\net.exe' or '\\net1.exe' and contain the command line argument 'stop'. Additionally, be alert for any command line executions that contain the strings 'samss', 'audioendpointbuilder', or 'unistoresvc_'. Pay attention to all these conditions simultaneously as they are indicative of the methods employed by Ryuk Ransomware. Given the critical nature of such detections, false positives are considered unlikely. This approach assists in identifying potential instances of the Ryuk Ransomware actively disrupting or manipulating system processes and services.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'stop'\n    selection2:\n        CommandLine|contains:\n            - 'samss'\n            - 'audioendpointbuilder'\n            - 'unistoresvc_'\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith:\n            - '\\net.exe'\n            - '\\net1.exe'\n        CommandLine|contains: 'stop'\n    selection2:\n        CommandLine|contains:\n            - 'samss'\n            - 'audioendpointbuilder'\n            - 'unistoresvc_'\n    condition: all of selection*\nfalsepositives:\n    - Unlikely\nlevel: critical\n",
      "question": "Ryuk Ransomware command lines",
      "answer": "In order to detect Ryuk Ransomware command lines, you should: Focus on monitoring process creation events within Windows environments. Look specifically for processes that end with '\\net.exe' or '\\net1.exe' and contain the command line argument 'stop'. Additionally, be alert for any command line executions that contain the strings 'samss', 'audioendpointbuilder', or 'unistoresvc_'. Pay attention to all these conditions simultaneously as they are indicative of the methods employed by Ryuk Ransomware. Given the critical nature of such detections, false positives are considered unlikely. This approach assists in identifying potential instances of the Ryuk Ransomware actively disrupting or manipulating system processes and services."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting service installation with suspicious folder patterns.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect service installation with suspicious folder patterns, you should monitor Windows system service logs for events linked to the Service Control Manager, specifically focusing on EventID 7045. This event ID signals a service installation, which can be perfectly routine or, under certain conditions, a sign of malicious activity. The primary concern here is when the service's installation path matches unusual or suspicious folder patterns. Specifically, paths that begin with \"C:\\ProgramData\\\" followed by one to nine non-standard characters and ending with \".exe\", or paths that start directly on the \"C:\\\" drive with one to nine non-standard characters before the \".exe\" extension. These patterns are typically not used by legitimate software and can indicate an attempt to disguise malicious services by mimicking legitimate directory structures or hiding the service in rarely checked folders. Given the nature of these potential threats, any detection of service installation following these patterns is flagged with a high level of concern. It is also important to note that while this detection method is robust, it may also intercept unusual but benign software behaviors, so the occurrence of false positives, although not well-defined in this context, cannot be entirely ruled out. Identifying such patterns is critical in understanding and responding to possible hidden or stealthy installations of malicious services that could compromise system security or facilitate further attacks.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    suspicious1:\n        - ImagePath|re: '^[Cc]:\\\\[Pp]rogram[Dd]ata\\\\.{1,9}\\.exe'\n        - ImagePath|re: '^[Cc]:\\\\.{1,9}\\.exe'\n    condition: selection and 1 of suspicious*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    service: system\ndetection:\n    selection:\n        Provider_Name: 'Service Control Manager'\n        EventID: 7045\n    suspicious1:\n        - ImagePath|re: '^[Cc]:\\\\[Pp]rogram[Dd]ata\\\\.{1,9}\\.exe'\n        - ImagePath|re: '^[Cc]:\\\\.{1,9}\\.exe'\n    condition: selection and 1 of suspicious*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "service installation with suspicious folder patterns",
      "answer": "In order to detect service installation with suspicious folder patterns, you should monitor Windows system service logs for events linked to the Service Control Manager, specifically focusing on EventID 7045. This event ID signals a service installation, which can be perfectly routine or, under certain conditions, a sign of malicious activity. The primary concern here is when the service's installation path matches unusual or suspicious folder patterns. Specifically, paths that begin with \"C:\\ProgramData\\\" followed by one to nine non-standard characters and ending with \".exe\", or paths that start directly on the \"C:\\\" drive with one to nine non-standard characters before the \".exe\" extension. These patterns are typically not used by legitimate software and can indicate an attempt to disguise malicious services by mimicking legitimate directory structures or hiding the service in rarely checked folders. Given the nature of these potential threats, any detection of service installation following these patterns is flagged with a high level of concern. It is also important to note that while this detection method is robust, it may also intercept unusual but benign software behaviors, so the occurrence of false positives, although not well-defined in this context, cannot be entirely ruled out. Identifying such patterns is critical in understanding and responding to possible hidden or stealthy installations of malicious services that could compromise system security or facilitate further attacks."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting Azure Hybrid Connection Manager services querying the Azure service bus service.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect Azure Hybrid Connection Manager services querying the Azure service bus service, you should:\nMonitor DNS query logs from Windows systems, specifically looking for queries that contain the domain 'servicebus.windows.net' in the QueryName. Additionally, pay attention to processes associated with the 'HybridConnectionManager' appearing in the Image field of these queries. This approach aims at identifying potentially malicious or unauthorized attempts to access Azure Service Bus services via the Azure Hybrid Connection Manager. It is crucial, however, to be aware of legitimate activities that may generate similar logs, as proper usage of Azure Hybrid Connection Manager and Azure Service Bus service can lead to similar findings. The level of alert for this detection is categorized as high, indicating that occurrences matching these criteria should be taken seriously and investigated promptly. This activity is linked with specific tactics and techniques in cybersecurity frameworks, providing context for the behavior being monitored.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'servicebus.windows.net'\n        Image|contains: 'HybridConnectionManager'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Azure Hybrid Connection Manager and the Azure Service Bus service\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: dns_query\ndetection:\n    selection:\n        QueryName|contains: 'servicebus.windows.net'\n        Image|contains: 'HybridConnectionManager'\n    condition: selection\nfalsepositives:\n    - Legitimate use of Azure Hybrid Connection Manager and the Azure Service Bus service\nlevel: high\n",
      "question": "Azure Hybrid Connection Manager services querying the Azure service bus service",
      "answer": "In order to detect Azure Hybrid Connection Manager services querying the Azure service bus service, you should:\nMonitor DNS query logs from Windows systems, specifically looking for queries that contain the domain 'servicebus.windows.net' in the QueryName. Additionally, pay attention to processes associated with the 'HybridConnectionManager' appearing in the Image field of these queries. This approach aims at identifying potentially malicious or unauthorized attempts to access Azure Service Bus services via the Azure Hybrid Connection Manager. It is crucial, however, to be aware of legitimate activities that may generate similar logs, as proper usage of Azure Hybrid Connection Manager and Azure Service Bus service can lead to similar findings. The level of alert for this detection is categorized as high, indicating that occurrences matching these criteria should be taken seriously and investigated promptly. This activity is linked with specific tactics and techniques in cybersecurity frameworks, providing context for the behavior being monitored."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting The \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) can be used to execute arbitrary binaries.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect malicious use of the \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) to execute arbitrary binaries, you should monitor process creation logs on Windows systems. Focus on spotting any instances where the process image or its original filename ends with '\\mftrace.exe'. Additionally, observe command lines that either contain '.exe ' (indicating an executable being specified after a space) or end with '.exe' as these patterns suggest the launching of an executable file. It's also crucial to watch for any parent processes with an image name ending in '\\mftrace.exe', indicating mftrace.exe may be used to initiate other executables. Always consider the potential for legitimate use of mftrace.exe for tracing purposes, as these instances can be false positives. This approach is characterized by a medium level of alertness and targets the identification of techniques and tactics like Execution, Command and Scripting Interpreter, and Execution through API, helping to safeguard against the exploitation of mftrace.exe for executing unauthorized binaries.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mftrace.exe'\n        - OriginalFileName: 'mftrace.exe'\n    selection_cli:\n        # This assumes that when someone use mftrace to launch an \".exe\" he will add a space and the binary launched will end with \".exe\"\n        CommandLine|contains: '.exe '\n        CommandLine|endswith: '.exe'\n    parent:\n        ParentImage|endswith: '\\mftrace.exe'\n    condition: all of selection* or parent\nfalsepositives:\n    - Legitimate use for tracing purposes\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mftrace.exe'\n        - OriginalFileName: 'mftrace.exe'\n    selection_cli:\n        # This assumes that when someone use mftrace to launch an \".exe\" he will add a space and the binary launched will end with \".exe\"\n        CommandLine|contains: '.exe '\n        CommandLine|endswith: '.exe'\n    parent:\n        ParentImage|endswith: '\\mftrace.exe'\n    condition: all of selection* or parent\nfalsepositives:\n    - Legitimate use for tracing purposes\nlevel: medium\n",
      "question": "The \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) can be used to execute arbitrary binaries",
      "answer": "In order to detect malicious use of the \"Trace log generation tool for Media Foundation Tools\" (Mftrace.exe) to execute arbitrary binaries, you should monitor process creation logs on Windows systems. Focus on spotting any instances where the process image or its original filename ends with '\\mftrace.exe'. Additionally, observe command lines that either contain '.exe ' (indicating an executable being specified after a space) or end with '.exe' as these patterns suggest the launching of an executable file. It's also crucial to watch for any parent processes with an image name ending in '\\mftrace.exe', indicating mftrace.exe may be used to initiate other executables. Always consider the potential for legitimate use of mftrace.exe for tracing purposes, as these instances can be false positives. This approach is characterized by a medium level of alertness and targets the identification of techniques and tactics like Execution, Command and Scripting Interpreter, and Execution through API, helping to safeguard against the exploitation of mftrace.exe for executing unauthorized binaries."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potential use of CreateRemoteThread api and LoadLibrary function to inject DLL into a process.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potential use of CreateRemoteThread API and LoadLibrary function to inject DLL into a process, you should look for events within Windows logs that fall under the category of create_remote_thread. Specifically, focus your attention on instances where a thread is created remotely and initiates from the module ending with '\\kernel32.dll'. The hallmark activity to watch for is the use of the 'LoadLibraryA' function. This particular combination of starting module and function strongly suggests an attempt to inject a DLL into another process, which is a technique attackers might use to execute malicious code within the context of legitimate processes on the victim's system. Given the nature of this behavior, there are no known benign circumstances that exactly match this pattern, making every hit potentially significant and the level of alert high. The tags related to this detection strategy include tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion, particularly focusing on process injection.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        StartModule|endswith: '\\kernel32.dll'\n        StartFunction: 'LoadLibraryA'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: create_remote_thread\ndetection:\n    selection:\n        StartModule|endswith: '\\kernel32.dll'\n        StartFunction: 'LoadLibraryA'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "potential use of CreateRemoteThread api and LoadLibrary function to inject DLL into a process",
      "answer": "In order to detect potential use of CreateRemoteThread API and LoadLibrary function to inject DLL into a process, you should look for events within Windows logs that fall under the category of create_remote_thread. Specifically, focus your attention on instances where a thread is created remotely and initiates from the module ending with '\\kernel32.dll'. The hallmark activity to watch for is the use of the 'LoadLibraryA' function. This particular combination of starting module and function strongly suggests an attempt to inject a DLL into another process, which is a technique attackers might use to execute malicious code within the context of legitimate processes on the victim's system. Given the nature of this behavior, there are no known benign circumstances that exactly match this pattern, making every hit potentially significant and the level of alert high. The tags related to this detection strategy include tactics and techniques such as Execution, Persistence, Privilege Escalation, and Defense Evasion, particularly focusing on process injection."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting potentially uncommon child processes of SndVol.exe (the Windows volume mixer).\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect potentially uncommon child processes of SndVol.exe (the Windows volume mixer), you should: Monitor process creation logs on Windows systems for any instances where the parent process is identified as SndVol.exe, which is the executable for the Windows volume mixer. It's crucial to specifically look for child processes initiated by SndVol.exe but exclude any occurrences where rundll32.exe is called with 'shell32.dll,Control_RunDLL' in the command line, as this is considered a legitimate action related to sound volume control. This detection focuses on identifying unusual behavior that could be indicative of malicious activity exploiting SndVol.exe to launch potentially harmful processes, while minimizing false positives by excluding known legitimate use cases involving rundll32.exe. The sensitivity of this rule is set at a medium level, acknowledging that while uncommon, there may be legitimate scenarios that were not foreseen, and as such, unknown false positives could occur.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\SndVol.exe'\n    filter_main_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: ' shell32.dll,Control_RunDLL '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        ParentImage|endswith: '\\SndVol.exe'\n    filter_main_rundll32:\n        Image|endswith: '\\rundll32.exe'\n        CommandLine|contains: ' shell32.dll,Control_RunDLL '\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "potentially uncommon child processes of SndVol.exe (the Windows volume mixer)",
      "answer": "In order to detect potentially uncommon child processes of SndVol.exe (the Windows volume mixer), you should: Monitor process creation logs on Windows systems for any instances where the parent process is identified as SndVol.exe, which is the executable for the Windows volume mixer. It's crucial to specifically look for child processes initiated by SndVol.exe but exclude any occurrences where rundll32.exe is called with 'shell32.dll,Control_RunDLL' in the command line, as this is considered a legitimate action related to sound volume control. This detection focuses on identifying unusual behavior that could be indicative of malicious activity exploiting SndVol.exe to launch potentially harmful processes, while minimizing false positives by excluding known legitimate use cases involving rundll32.exe. The sensitivity of this rule is set at a medium level, acknowledging that while uncommon, there may be legitimate scenarios that were not foreseen, and as such, unknown false positives could occur."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect an adversary's attempt to compress or encrypt data collected prior to exfiltration using 3rd party utilities, focus on monitoring process creation logs within Windows environments. Specifically, look for instances where `winzip.exe` or `winzip64.exe` are executed, which are indicative of the WinZip utility being used. Additionally, pay attention to command-line parameters that communicate the intention to compress or encrypt data, such as '-s\"' indicating the setting of a password for the compressed archive, and other flags including ' -min ' for minimizing the WinZip window and ' -a ' for adding files to a zip archive. These indicators should be considered collectively to identify potential malicious activity. However, be aware that there may be legitimate uses of these commands, so unknown false positives might occur, and investigation is advised to determine the context of usage. The severity of these indicators is considered medium, underlining the importance of vigilance in detecting potential preparatory actions for data exfiltration.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_winzip:\n        CommandLine|contains:\n            - 'winzip.exe'\n            - 'winzip64.exe'\n    selection_password:\n        CommandLine|contains: '-s\"'\n    selection_other:\n        CommandLine|contains:\n            - ' -min '\n            - ' -a '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_winzip:\n        CommandLine|contains:\n            - 'winzip.exe'\n            - 'winzip64.exe'\n    selection_password:\n        CommandLine|contains: '-s\"'\n    selection_other:\n        CommandLine|contains:\n            - ' -min '\n            - ' -a '\n    condition: all of selection*\nfalsepositives:\n    - Unknown\nlevel: medium\n",
      "question": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities",
      "answer": "In order to detect an adversary's attempt to compress or encrypt data collected prior to exfiltration using 3rd party utilities, focus on monitoring process creation logs within Windows environments. Specifically, look for instances where `winzip.exe` or `winzip64.exe` are executed, which are indicative of the WinZip utility being used. Additionally, pay attention to command-line parameters that communicate the intention to compress or encrypt data, such as '-s\"' indicating the setting of a password for the compressed archive, and other flags including ' -min ' for minimizing the WinZip window and ' -a ' for adding files to a zip archive. These indicators should be considered collectively to identify potential malicious activity. However, be aware that there may be legitimate uses of these commands, so unknown false positives might occur, and investigation is advised to determine the context of usage. The severity of these indicators is considered medium, underlining the importance of vigilance in detecting potential preparatory actions for data exfiltration."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting various anomalies in relation to regsvr32.exe.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect various anomalies in relation to regsvr32.exe, you should: Monitor Windows process creation logs for specific patterns involving regsvr32.exe, a legitimate Windows command, that may indicate malicious activity. Pay special attention to processes where regsvr32.exe is involved in the following scenarios: \n\n1. regsvr32.exe is executed with command line paths containing the Temp directory.\n2. regsvr32.exe is launched by known scripting environments like PowerShell (including powershell.exe, pwsh.exe, and powershell_ise.exe) or cmd.exe, suggesting script-based exploitation or lateral movement.\n3. Command lines invoking regsvr32.exe contain URLs (signaled by HTTP or FTP in the command line) followed by \"scrobj.dll\", indicating potential remote script object registration, a tactic often used to fetch and execute malicious code.\n4. regsvr32.exe is the parent process for script hosts cscript.exe or wscript.exe, or in cases where Office applications like EXCEL.EXE are used to indirectly call regsvr32.exe, hinting at document-based malware or phishing attempts.\n5. Specific attention should be paid to command lines ending with unusual extensions for regsvr32.exe operations such as image extensions (.jpg, .jpeg, .png, .gif) or temporary files (.bin, .tmp, .temp, .txt), which could be used to disguise malicious scripts or payloads.\n6. Also, watch for command lines containing paths to the user's AppData\\Local or C:\\Users\\Public directories when used in conjunction with regsvr32.exe, as these paths can be indicative of attempts to execute or drop malicious payloads on the system.\n\nExclude any activity related to legitimate application paths such as Microsoft Teams, WebEx, or Box's sync feature, as well as the legitimate use of RpcProxy.dll to avoid false positives. The focus here is to identify and investigate suspicious or anomalous usage patterns of regsvr32.exe that deviate from normal operational or system maintenance activities.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains: '\\Temp\\'\n    selection2:\n        Image|endswith: '\\regsvr32.exe'\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\powershell_ise.exe'\n    selection3:\n        Image|endswith: '\\regsvr32.exe'\n        ParentImage|endswith: '\\cmd.exe'\n    selection4a:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains|all:\n            - '/i:'\n            - 'http'\n        CommandLine|endswith: 'scrobj.dll'\n    selection4b:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains|all:\n            - '/i:'\n            - 'ftp'\n        CommandLine|endswith: 'scrobj.dll'\n    selection5:\n        Image|endswith: \n            - '\\cscript.exe'\n            - '\\wscript.exe'\n        ParentImage|endswith: '\\regsvr32.exe'\n    selection6:\n        Image|endswith: '\\EXCEL.EXE'\n        CommandLine|contains: '..\\..\\..\\Windows\\System32\\regsvr32.exe '\n    selection7:\n        ParentImage|endswith: '\\mshta.exe'\n        Image|endswith: '\\regsvr32.exe'\n    selection8:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains:\n            - '\\AppData\\Local'\n            - 'C:\\Users\\Public'\n    selection9: # suspicious extensions https://twitter.com/Max_Mal_/status/1542461200797163522/photo/3\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|endswith:\n            - '.jpg'\n            - '.jpeg'\n            - '.png'\n            - '.gif'\n            - '.bin'\n            - '.tmp'\n            - '.temp'\n            - '.txt'\n    filter1:\n        CommandLine|contains:\n            - '\\AppData\\Local\\Microsoft\\Teams'\n            - '\\AppData\\Local\\WebEx\\WebEx64\\Meetings\\atucfobj.dll'\n    filter2:\n        ParentImage: 'C:\\Program Files\\Box\\Box\\FS\\streem.exe'\n        CommandLine|contains: '\\Program Files\\Box\\Box\\Temp\\'\n    filter_legitimate:\n        CommandLine|endswith: '/s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll'\n    condition: 1 of selection* and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection1:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains: '\\Temp\\'\n    selection2:\n        Image|endswith: '\\regsvr32.exe'\n        ParentImage|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\powershell_ise.exe'\n    selection3:\n        Image|endswith: '\\regsvr32.exe'\n        ParentImage|endswith: '\\cmd.exe'\n    selection4a:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains|all:\n            - '/i:'\n            - 'http'\n        CommandLine|endswith: 'scrobj.dll'\n    selection4b:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains|all:\n            - '/i:'\n            - 'ftp'\n        CommandLine|endswith: 'scrobj.dll'\n    selection5:\n        Image|endswith: \n            - '\\cscript.exe'\n            - '\\wscript.exe'\n        ParentImage|endswith: '\\regsvr32.exe'\n    selection6:\n        Image|endswith: '\\EXCEL.EXE'\n        CommandLine|contains: '..\\..\\..\\Windows\\System32\\regsvr32.exe '\n    selection7:\n        ParentImage|endswith: '\\mshta.exe'\n        Image|endswith: '\\regsvr32.exe'\n    selection8:\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|contains:\n            - '\\AppData\\Local'\n            - 'C:\\Users\\Public'\n    selection9: # suspicious extensions https://twitter.com/Max_Mal_/status/1542461200797163522/photo/3\n        Image|endswith: '\\regsvr32.exe'\n        CommandLine|endswith:\n            - '.jpg'\n            - '.jpeg'\n            - '.png'\n            - '.gif'\n            - '.bin'\n            - '.tmp'\n            - '.temp'\n            - '.txt'\n    filter1:\n        CommandLine|contains:\n            - '\\AppData\\Local\\Microsoft\\Teams'\n            - '\\AppData\\Local\\WebEx\\WebEx64\\Meetings\\atucfobj.dll'\n    filter2:\n        ParentImage: 'C:\\Program Files\\Box\\Box\\FS\\streem.exe'\n        CommandLine|contains: '\\Program Files\\Box\\Box\\Temp\\'\n    filter_legitimate:\n        CommandLine|endswith: '/s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll'\n    condition: 1 of selection* and not 1 of filter*\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: high",
      "question": "various anomalies in relation to regsvr32.exe",
      "answer": "In order to detect various anomalies in relation to regsvr32.exe, you should: Monitor Windows process creation logs for specific patterns involving regsvr32.exe, a legitimate Windows command, that may indicate malicious activity. Pay special attention to processes where regsvr32.exe is involved in the following scenarios: \n\n1. regsvr32.exe is executed with command line paths containing the Temp directory.\n2. regsvr32.exe is launched by known scripting environments like PowerShell (including powershell.exe, pwsh.exe, and powershell_ise.exe) or cmd.exe, suggesting script-based exploitation or lateral movement.\n3. Command lines invoking regsvr32.exe contain URLs (signaled by HTTP or FTP in the command line) followed by \"scrobj.dll\", indicating potential remote script object registration, a tactic often used to fetch and execute malicious code.\n4. regsvr32.exe is the parent process for script hosts cscript.exe or wscript.exe, or in cases where Office applications like EXCEL.EXE are used to indirectly call regsvr32.exe, hinting at document-based malware or phishing attempts.\n5. Specific attention should be paid to command lines ending with unusual extensions for regsvr32.exe operations such as image extensions (.jpg, .jpeg, .png, .gif) or temporary files (.bin, .tmp, .temp, .txt), which could be used to disguise malicious scripts or payloads.\n6. Also, watch for command lines containing paths to the user's AppData\\Local or C:\\Users\\Public directories when used in conjunction with regsvr32.exe, as these paths can be indicative of attempts to execute or drop malicious payloads on the system.\n\nExclude any activity related to legitimate application paths such as Microsoft Teams, WebEx, or Box's sync feature, as well as the legitimate use of RpcProxy.dll to avoid false positives. The focus here is to identify and investigate suspicious or anomalous usage patterns of regsvr32.exe that deviate from normal operational or system maintenance activities."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory..\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory, you should observe the following: Focus on the creation of new processes on Windows systems. Specifically, look out for instances where the process image name ends with '\\ADExplorer.exe', or the original file name is noted as 'AdExp'. This targets the ADExplorer utility, a tool capable of interacting with Windows Active Directory data. Additionally, monitor if the command line executed with these processes contains the 'snapshot' flag, an indication that the tool is being used to capture a local copy of the active directory database. Further scrutiny is advised for commands indicating that the snapshot might be saved to traditionally suspicious directories, such as '\\Downloads\\', '\\Users\\Public\\', '\\AppData\\', and '\\Windows\\Temp\\'. Any process creation event matching all these criteria should be considered highly suspect, albeit with the understanding that not all instances may be malicious, as there could be unknown legitimate causes for such behavior.",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_flag:\n        CommandLine|contains: 'snapshot'\n    selection_paths:\n        CommandLine|contains:\n            # TODO: Add more suspicious paths\n            - '\\Downloads\\'\n            - '\\Users\\Public\\'\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\ADExplorer.exe'\n        - OriginalFileName: 'AdExp'\n    selection_flag:\n        CommandLine|contains: 'snapshot'\n    selection_paths:\n        CommandLine|contains:\n            # TODO: Add more suspicious paths\n            - '\\Downloads\\'\n            - '\\Users\\Public\\'\n            - '\\AppData\\'\n            - '\\Windows\\Temp\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory.",
      "answer": "In order to detect the execution of Sysinternals ADExplorer with the \"-snapshot\" flag in order to save a local copy of the active directory database to a suspicious directory, you should observe the following: Focus on the creation of new processes on Windows systems. Specifically, look out for instances where the process image name ends with '\\ADExplorer.exe', or the original file name is noted as 'AdExp'. This targets the ADExplorer utility, a tool capable of interacting with Windows Active Directory data. Additionally, monitor if the command line executed with these processes contains the 'snapshot' flag, an indication that the tool is being used to capture a local copy of the active directory database. Further scrutiny is advised for commands indicating that the snapshot might be saved to traditionally suspicious directories, such as '\\Downloads\\', '\\Users\\Public\\', '\\AppData\\', and '\\Windows\\Temp\\'. Any process creation event matching all these criteria should be considered highly suspect, albeit with the understanding that not all instances may be malicious, as there could be unknown legitimate causes for such behavior."
    }
  },
  {
    "instruction": "Build a Sigma rule with the goal of detecting persistence registry keys for Recycle Bin.\nMore specifically, the Sigma rule should work as follows:\n\nIn order to detect persistence registry keys for Recycle Bin, you should monitor registry events in Windows systems for the creation or modification of specific keys that are known to be utilized for maintaining persistence mechanisms. Specifically, look out for events where a registry key is renamed to include '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open', as this indicates an attempt to manipulate the Recycle Bin's functionality for persistent access. Additionally, monitor for events where the default command for the Recycle Bin (identified through the registry path '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)') is set or altered. Detecting these activities in the registry can signify that an attacker is trying to establish persistence on the system by leveraging the Recycle Bin, a technique that can allow malicious software or activities to remain undetected by conventional security measures. As no specific false positives have been defined apart from unknown ones, it's crucial to analyze these detections in the context they occur to understand their legitimacy. ",
    "context": "",
    "output": "Ofcourse.\nHere is the requested Sigma rule:\nlogsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection_create:\n        EventType: RenameKey\n        NewName|contains: '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open'\n    selection_set:\n        EventType: SetValue\n        TargetObject|contains: '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
    "category": "SigmaFlan",
    "instruction_type": "sigma_rule_build",
    "parsed_raw_data": {
      "Sigma": "logsource:\n    category: registry_event\n    product: windows\ndetection:\n    selection_create:\n        EventType: RenameKey\n        NewName|contains: '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open'\n    selection_set:\n        EventType: SetValue\n        TargetObject|contains: '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n",
      "question": "persistence registry keys for Recycle Bin",
      "answer": "In order to detect persistence registry keys for Recycle Bin, you should monitor registry events in Windows systems for the creation or modification of specific keys that are known to be utilized for maintaining persistence mechanisms. Specifically, look out for events where a registry key is renamed to include '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open', as this indicates an attempt to manipulate the Recycle Bin's functionality for persistent access. Additionally, monitor for events where the default command for the Recycle Bin (identified through the registry path '\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)') is set or altered. Detecting these activities in the registry can signify that an attacker is trying to establish persistence on the system by leveraging the Recycle Bin, a technique that can allow malicious software or activities to remain undetected by conventional security measures. As no specific false positives have been defined apart from unknown ones, it's crucial to analyze these detections in the context they occur to understand their legitimacy. "
    }
  }
]